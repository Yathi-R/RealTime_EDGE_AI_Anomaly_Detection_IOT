
Final_RT_Edge_Anomaly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f534  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f264  0800f7a0  0800f7a0  000107a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ea04  0801ea04  00021144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ea04  0801ea04  0001fa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ea0c  0801ea0c  00021144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ea0c  0801ea0c  0001fa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ea10  0801ea10  0001fa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001144  20000000  0801ea14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00079f78  20001148  0801fb58  00021148  2**3
                  ALLOC
 10 ._user_heap_stack 00001800  2007b0c0  0801fb58  000220c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00021144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f8e6  00000000  00000000  0002117a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0e  00000000  00000000  00050a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00019940  00000000  00000000  0005586e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0006f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002dc1  00000000  00000000  00070630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000382e2  00000000  00000000  000733f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032310  00000000  00000000  000ab6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016691f  00000000  00000000  000dd9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00244302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051f8  00000000  00000000  00244388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00249580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20001148 	.word	0x20001148
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f76c 	.word	0x0800f76c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000114c 	.word	0x2000114c
 800028c:	0800f76c 	.word	0x0800f76c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <ECGSamplingTask>:
    xSemaphoreGive(adcSemaphore);
    return value;
}

/* Main ECG sampling & inference task */
void ECGSamplingTask(void *argument) {
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	ed2d 8b0a 	vpush	{d8-d12}
    g_network_activations_table[1] = (ai_handle)ai_activations;
 8000f50:	4bbf      	ldr	r3, [pc, #764]	@ (8001250 <ECGSamplingTask+0x308>)
 8000f52:	49c0      	ldr	r1, [pc, #768]	@ (8001254 <ECGSamplingTask+0x30c>)
void ECGSamplingTask(void *argument) {
 8000f54:	b0cb      	sub	sp, #300	@ 0x12c
    err = ai_network_create_and_init(
 8000f56:	4ac0      	ldr	r2, [pc, #768]	@ (8001258 <ECGSamplingTask+0x310>)
 8000f58:	48c0      	ldr	r0, [pc, #768]	@ (800125c <ECGSamplingTask+0x314>)
    g_network_activations_table[1] = (ai_handle)ai_activations;
 8000f5a:	f841 3f04 	str.w	r3, [r1, #4]!
    err = ai_network_create_and_init(
 8000f5e:	f006 fbfb 	bl	8007758 <ai_network_create_and_init>
    if (err.type != AI_ERROR_NONE) {
 8000f62:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 8000f66:	f040 825a 	bne.w	800141e <ECGSamplingTask+0x4d6>
    ai_network_get_info(ecg_network, &info);
 8000f6a:	4dbc      	ldr	r5, [pc, #752]	@ (800125c <ECGSamplingTask+0x314>)
 8000f6c:	f10d 08a0 	add.w	r8, sp, #160	@ 0xa0
 8000f70:	4641      	mov	r1, r8
 8000f72:	6828      	ldr	r0, [r5, #0]
 8000f74:	f006 fa54 	bl	8007420 <ai_network_get_info>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Model initialized OK\r\n",
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	2216      	movs	r2, #22
 8000f7e:	49b8      	ldr	r1, [pc, #736]	@ (8001260 <ECGSamplingTask+0x318>)
 8000f80:	48b8      	ldr	r0, [pc, #736]	@ (8001264 <ECGSamplingTask+0x31c>)
 8000f82:	f005 fddb 	bl	8006b3c <HAL_UART_Transmit>
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f86:	4621      	mov	r1, r4
 8000f88:	6828      	ldr	r0, [r5, #0]
 8000f8a:	f006 faa3 	bl	80074d4 <ai_network_inputs_get>
 8000f8e:	4fb6      	ldr	r7, [pc, #728]	@ (8001268 <ECGSamplingTask+0x320>)
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f90:	4621      	mov	r1, r4
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f92:	6038      	str	r0, [r7, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f94:	6828      	ldr	r0, [r5, #0]
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f96:	970e      	str	r7, [sp, #56]	@ 0x38
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f98:	f006 faaa 	bl	80074f0 <ai_network_outputs_get>
 8000f9c:	4605      	mov	r5, r0
        snprintf(dbg, sizeof(dbg),
 8000f9e:	2150      	movs	r1, #80	@ 0x50
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fa0:	9e37      	ldr	r6, [sp, #220]	@ 0xdc
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fa2:	4bb2      	ldr	r3, [pc, #712]	@ (800126c <ECGSamplingTask+0x324>)
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fa4:	6838      	ldr	r0, [r7, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fa6:	930d      	str	r3, [sp, #52]	@ 0x34
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fa8:	6933      	ldr	r3, [r6, #16]
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000faa:	4cb1      	ldr	r4, [pc, #708]	@ (8001270 <ECGSamplingTask+0x328>)
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fac:	6103      	str	r3, [r0, #16]
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fae:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fb0:	6044      	str	r4, [r0, #4]
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fb2:	691f      	ldr	r7, [r3, #16]
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fb4:	4aaf      	ldr	r2, [pc, #700]	@ (8001274 <ECGSamplingTask+0x32c>)
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fb6:	612f      	str	r7, [r5, #16]
        snprintf(dbg, sizeof(dbg),
 8000fb8:	6933      	ldr	r3, [r6, #16]
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fba:	4eae      	ldr	r6, [pc, #696]	@ (8001274 <ECGSamplingTask+0x32c>)
        snprintf(dbg, sizeof(dbg),
 8000fbc:	eb0d 0a01 	add.w	sl, sp, r1
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fc0:	606e      	str	r6, [r5, #4]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fc2:	4eaa      	ldr	r6, [pc, #680]	@ (800126c <ECGSamplingTask+0x324>)
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fc4:	920f      	str	r2, [sp, #60]	@ 0x3c
        snprintf(dbg, sizeof(dbg),
 8000fc6:	9700      	str	r7, [sp, #0]
 8000fc8:	4aab      	ldr	r2, [pc, #684]	@ (8001278 <ECGSamplingTask+0x330>)
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fca:	6035      	str	r5, [r6, #0]
        snprintf(dbg, sizeof(dbg),
 8000fcc:	4650      	mov	r0, sl
 8000fce:	f00c fa9f 	bl	800d510 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000fd2:	4650      	mov	r0, sl
 8000fd4:	f7ff f95c 	bl	8000290 <strlen>
 8000fd8:	4602      	mov	r2, r0

    InitAI();
    if(ecg_network == AI_HANDLE_NULL) {
 8000fda:	4da0      	ldr	r5, [pc, #640]	@ (800125c <ECGSamplingTask+0x314>)
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	4651      	mov	r1, sl
 8000fe2:	48a0      	ldr	r0, [pc, #640]	@ (8001264 <ECGSamplingTask+0x31c>)
 8000fe4:	b292      	uxth	r2, r2
 8000fe6:	f005 fda9 	bl	8006b3c <HAL_UART_Transmit>
    if(ecg_network == AI_HANDLE_NULL) {
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 8236 	beq.w	800145e <ECGSamplingTask+0x516>
        HAL_UART_Transmit(&huart3, (uint8_t*)"AI Init Failed!\r\n", 16, 100);
        vTaskDelete(NULL);
    }

    TickType_t last_wake = xTaskGetTickCount();
 8000ff2:	f007 ff05 	bl	8008e00 <xTaskGetTickCount>
void ECGSamplingTask(void *argument) {
 8000ff6:	eddf caa1 	vldr	s25, [pc, #644]	@ 800127c <ECGSamplingTask+0x334>
    while (1) {
        vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(SAMPLE_RATE_MS));

        // Read and preprocess ADC
        int16_t raw = ReadADC();
        float voltage = raw * (3.3f / 4095.0f);
 8000ffa:	ed9f caa1 	vldr	s24, [pc, #644]	@ 8001280 <ECGSamplingTask+0x338>
        float centered = (voltage - 1.65f);
 8000ffe:	eddf baa1 	vldr	s23, [pc, #644]	@ 8001284 <ECGSamplingTask+0x33c>
void ECGSamplingTask(void *argument) {
 8001002:	ed9f 8b8d 	vldr	d8, [pc, #564]	@ 8001238 <ECGSamplingTask+0x2f0>
                snprintf(errBuf, sizeof(errBuf), "Inference failed: code=%d, type=%d\r\n", err.code, err.type);
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);

                // Print input buffer stats
                float min_val = 255, max_val = 0;
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001006:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 8001240 <ECGSamplingTask+0x2f8>
 800100a:	ed9f 9b8f 	vldr	d9, [pc, #572]	@ 8001248 <ECGSamplingTask+0x300>
 800100e:	4e9e      	ldr	r6, [pc, #632]	@ (8001288 <ECGSamplingTask+0x340>)
 8001010:	f8df b2a4 	ldr.w	fp, [pc, #676]	@ 80012b8 <ECGSamplingTask+0x370>
 8001014:	f8df 92a4 	ldr.w	r9, [pc, #676]	@ 80012bc <ECGSamplingTask+0x374>
    TickType_t last_wake = xTaskGetTickCount();
 8001018:	9011      	str	r0, [sp, #68]	@ 0x44
 800101a:	f506 657a 	add.w	r5, r6, #4000	@ 0xfa0
        vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(SAMPLE_RATE_MS));
 800101e:	2101      	movs	r1, #1
 8001020:	a811      	add	r0, sp, #68	@ 0x44
 8001022:	f007 fde3 	bl	8008bec <xTaskDelayUntil>
    if (xSemaphoreTake(adcSemaphore, pdMS_TO_TICKS(10)) != pdTRUE)
 8001026:	210a      	movs	r1, #10
 8001028:	f8db 0000 	ldr.w	r0, [fp]
 800102c:	f006 ffc2 	bl	8007fb4 <xQueueSemaphoreTake>
 8001030:	2801      	cmp	r0, #1
 8001032:	4607      	mov	r7, r0
 8001034:	f000 80d4 	beq.w	80011e0 <ECGSamplingTask+0x298>
void ECGSamplingTask(void *argument) {
 8001038:	eef0 7a6c 	vmov.f32	s15, s25
 800103c:	ec51 0b18 	vmov	r0, r1, d8
        modelInputBuffer[sampleCount++] = centered;
 8001040:	f8d9 3000 	ldr.w	r3, [r9]
        snprintf(uartBuffer, sizeof(uartBuffer), "{\"V\":%.2f}\n", voltage);
 8001044:	e9cd 0100 	strd	r0, r1, [sp]
        modelInputBuffer[sampleCount++] = centered;
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800104e:	edc3 7a00 	vstr	s15, [r3]
        snprintf(uartBuffer, sizeof(uartBuffer), "{\"V\":%.2f}\n", voltage);
 8001052:	2140      	movs	r1, #64	@ 0x40
        modelInputBuffer[sampleCount++] = centered;
 8001054:	f8c9 2000 	str.w	r2, [r9]
        snprintf(uartBuffer, sizeof(uartBuffer), "{\"V\":%.2f}\n", voltage);
 8001058:	4650      	mov	r0, sl
 800105a:	4a8c      	ldr	r2, [pc, #560]	@ (800128c <ECGSamplingTask+0x344>)
 800105c:	f00c fa58 	bl	800d510 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001060:	4650      	mov	r0, sl
 8001062:	f7ff f915 	bl	8000290 <strlen>
 8001066:	4602      	mov	r2, r0
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	4651      	mov	r1, sl
 800106e:	4888      	ldr	r0, [pc, #544]	@ (8001290 <ECGSamplingTask+0x348>)
 8001070:	b292      	uxth	r2, r2
 8001072:	f005 fd63 	bl	8006b3c <HAL_UART_Transmit>
        if (sampleCount >= MODEL_INPUT_SIZE) {
 8001076:	f8d9 3000 	ldr.w	r3, [r9]
 800107a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107e:	d3ce      	bcc.n	800101e <ECGSamplingTask+0xd6>
 8001080:	4e81      	ldr	r6, [pc, #516]	@ (8001288 <ECGSamplingTask+0x340>)
    float sum = 0.0f;
 8001082:	eddf 7a84 	vldr	s15, [pc, #528]	@ 8001294 <ECGSamplingTask+0x34c>
        if (sampleCount >= MODEL_INPUT_SIZE) {
 8001086:	4633      	mov	r3, r6
 8001088:	4632      	mov	r2, r6
    for (uint32_t i = 0; i < size; i++) sum += buffer[i];
 800108a:	ecb2 7a01 	vldmia	r2!, {s14}
 800108e:	4295      	cmp	r5, r2
 8001090:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001094:	d1f9      	bne.n	800108a <ECGSamplingTask+0x142>
    return sum / size;
 8001096:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001298 <ECGSamplingTask+0x350>
    float variance = 0.0f;
 800109a:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001294 <ECGSamplingTask+0x34c>
    return sum / size;
 800109e:	ee87 baa6 	vdiv.f32	s22, s15, s13
        float diff = buffer[i] - mean;
 80010a2:	ecf3 7a01 	vldmia	r3!, {s15}
 80010a6:	ee77 7acb 	vsub.f32	s15, s15, s22
    for (uint32_t i = 0; i < size; i++) {
 80010aa:	429d      	cmp	r5, r3
        variance += diff * diff;
 80010ac:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (uint32_t i = 0; i < size; i++) {
 80010b0:	d1f7      	bne.n	80010a2 <ECGSamplingTask+0x15a>
    return sqrtf(variance / size);
 80010b2:	eddf 7a79 	vldr	s15, [pc, #484]	@ 8001298 <ECGSamplingTask+0x350>
 80010b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80010ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	f100 81d6 	bmi.w	8001472 <ECGSamplingTask+0x52a>
 80010c6:	eef1 6ac0 	vsqrt.f32	s13, s0
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80010ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80010d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d4:	da18      	bge.n	8001108 <ECGSamplingTask+0x1c0>
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 80010d6:	eddf 7a71 	vldr	s15, [pc, #452]	@ 800129c <ECGSamplingTask+0x354>
 80010da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80010e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee77 7acb 	vsub.f32	s15, s15, s22
 80010ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80010f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 80010f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80010f8:	3201      	adds	r2, #1
 80010fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80010fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 80010fe:	ed83 7a00 	vstr	s14, [r3]
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001102:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001106:	dbea      	blt.n	80010de <ECGSamplingTask+0x196>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800110c:	f3bf 8f6f 	isb	sy
            ai_i32 ret = ai_network_run(ecg_network, in_bufs, out_bufs);
 8001110:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	4b50      	ldr	r3, [pc, #320]	@ (800125c <ECGSamplingTask+0x314>)
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	f006 fb76 	bl	800780c <ai_network_run>
            if (ret == AI_NETWORK_OUT_NUM) {
 8001120:	2801      	cmp	r0, #1
 8001122:	f040 80cd 	bne.w	80012c0 <ECGSamplingTask+0x378>
            	ai_float yq = ai_output_buffer[0];
 8001126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
            	int is_anomaly = yq > 0.6f ? 1 : 0;
 8001130:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8001134:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 80012a0 <ECGSamplingTask+0x358>
 8001138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            	snprintf(uartBuffer, sizeof(uartBuffer), "Anomaly:%d, Score:%.4f\r\n", is_anomaly, yq);
 8001140:	ee17 0a10 	vmov	r0, s14
            	int is_anomaly = yq > 0.6f ? 1 : 0;
 8001144:	bfcc      	ite	gt
 8001146:	2701      	movgt	r7, #1
 8001148:	2700      	movle	r7, #0
            	snprintf(uartBuffer, sizeof(uartBuffer), "Anomaly:%d, Score:%.4f\r\n", is_anomaly, yq);
 800114a:	f7ff fa0d 	bl	8000568 <__aeabi_f2d>
 800114e:	463b      	mov	r3, r7
 8001150:	e9cd 0100 	strd	r0, r1, [sp]
 8001154:	4a53      	ldr	r2, [pc, #332]	@ (80012a4 <ECGSamplingTask+0x35c>)
 8001156:	2140      	movs	r1, #64	@ 0x40
 8001158:	4640      	mov	r0, r8
 800115a:	f00c f9d9 	bl	800d510 <sniprintf>
            	HAL_UART_Transmit(&huart3, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800115e:	4640      	mov	r0, r8
 8001160:	f7ff f896 	bl	8000290 <strlen>
 8001164:	4602      	mov	r2, r0
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	4641      	mov	r1, r8
 800116c:	b292      	uxth	r2, r2
 800116e:	483d      	ldr	r0, [pc, #244]	@ (8001264 <ECGSamplingTask+0x31c>)
 8001170:	f005 fce4 	bl	8006b3c <HAL_UART_Transmit>
            	snprintf(uartBuffer, sizeof(uartBuffer), "{\"A\":%d}\n", is_anomaly);
 8001174:	463b      	mov	r3, r7
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	4a4b      	ldr	r2, [pc, #300]	@ (80012a8 <ECGSamplingTask+0x360>)
 800117a:	4640      	mov	r0, r8
 800117c:	f00c f9c8 	bl	800d510 <sniprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001180:	4640      	mov	r0, r8
 8001182:	f7ff f885 	bl	8000290 <strlen>
 8001186:	4602      	mov	r2, r0
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	4641      	mov	r1, r8
 800118e:	4840      	ldr	r0, [pc, #256]	@ (8001290 <ECGSamplingTask+0x348>)
 8001190:	b292      	uxth	r2, r2
 8001192:	f005 fcd3 	bl	8006b3c <HAL_UART_Transmit>
                         ai_input_buffer[2], ai_input_buffer[3],
                         ai_input_buffer[4]);
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
            }

            sampleCount = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c9 3000 	str.w	r3, [r9]
    if (xTaskGetTickCount() - last > pdMS_TO_TICKS(5000)) {
 800119c:	f007 fe30 	bl	8008e00 <xTaskGetTickCount>
 80011a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011a4:	4a41      	ldr	r2, [pc, #260]	@ (80012ac <ECGSamplingTask+0x364>)
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	1a80      	subs	r0, r0, r2
 80011aa:	4298      	cmp	r0, r3
 80011ac:	f67f af37 	bls.w	800101e <ECGSamplingTask+0xd6>
        last = xTaskGetTickCount();
 80011b0:	f007 fe26 	bl	8008e00 <xTaskGetTickCount>
 80011b4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <ECGSamplingTask+0x364>)
 80011b6:	6018      	str	r0, [r3, #0]
        snprintf(buf, sizeof(buf), "Free heap: %u bytes\r\n", xPortGetFreeHeapSize());
 80011b8:	f008 fd72 	bl	8009ca0 <xPortGetFreeHeapSize>
 80011bc:	2140      	movs	r1, #64	@ 0x40
 80011be:	4603      	mov	r3, r0
 80011c0:	4a3b      	ldr	r2, [pc, #236]	@ (80012b0 <ECGSamplingTask+0x368>)
 80011c2:	4640      	mov	r0, r8
 80011c4:	f00c f9a4 	bl	800d510 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80011c8:	4640      	mov	r0, r8
 80011ca:	f7ff f861 	bl	8000290 <strlen>
 80011ce:	4602      	mov	r2, r0
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	4641      	mov	r1, r8
 80011d6:	b292      	uxth	r2, r2
 80011d8:	4822      	ldr	r0, [pc, #136]	@ (8001264 <ECGSamplingTask+0x31c>)
 80011da:	f005 fcaf 	bl	8006b3c <HAL_UART_Transmit>
    while (1) {
 80011de:	e71e      	b.n	800101e <ECGSamplingTask+0xd6>
    HAL_StatusTypeDef status = HAL_ADC_Start(&hadc1);
 80011e0:	4834      	ldr	r0, [pc, #208]	@ (80012b4 <ECGSamplingTask+0x36c>)
 80011e2:	f001 faa5 	bl	8002730 <HAL_ADC_Start>
    if (status != HAL_OK) {
 80011e6:	2800      	cmp	r0, #0
 80011e8:	f040 80fe 	bne.w	80013e8 <ECGSamplingTask+0x4a0>
    status = HAL_ADC_PollForConversion(&hadc1, 1);
 80011ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80011ee:	4639      	mov	r1, r7
 80011f0:	4830      	ldr	r0, [pc, #192]	@ (80012b4 <ECGSamplingTask+0x36c>)
 80011f2:	f000 fec1 	bl	8001f78 <HAL_ADC_PollForConversion>
    if (status != HAL_OK) {
 80011f6:	2800      	cmp	r0, #0
 80011f8:	f040 8101 	bne.w	80013fe <ECGSamplingTask+0x4b6>
    int16_t value = HAL_ADC_GetValue(&hadc1);
 80011fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80011fe:	482d      	ldr	r0, [pc, #180]	@ (80012b4 <ECGSamplingTask+0x36c>)
 8001200:	f000 ff30 	bl	8002064 <HAL_ADC_GetValue>
 8001204:	4607      	mov	r7, r0
    HAL_ADC_Stop(&hadc1);
 8001206:	482b      	ldr	r0, [pc, #172]	@ (80012b4 <ECGSamplingTask+0x36c>)
 8001208:	f001 fb36 	bl	8002878 <HAL_ADC_Stop>
    xSemaphoreGive(adcSemaphore);
 800120c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800120e:	f8db 0000 	ldr.w	r0, [fp]
 8001212:	461a      	mov	r2, r3
 8001214:	4619      	mov	r1, r3
 8001216:	f006 fbdd 	bl	80079d4 <xQueueGenericSend>
        float voltage = raw * (3.3f / 4095.0f);
 800121a:	b23b      	sxth	r3, r7
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001224:	ee27 ba8c 	vmul.f32	s22, s15, s24
        snprintf(uartBuffer, sizeof(uartBuffer), "{\"V\":%.2f}\n", voltage);
 8001228:	ee1b 0a10 	vmov	r0, s22
 800122c:	f7ff f99c 	bl	8000568 <__aeabi_f2d>
        float centered = (voltage - 1.65f);
 8001230:	ee7b 7a6b 	vsub.f32	s15, s22, s23
    return value;
 8001234:	e704      	b.n	8001040 <ECGSamplingTask+0xf8>
 8001236:	bf00      	nop
 8001238:	e0000000 	.word	0xe0000000
 800123c:	3ffa680c 	.word	0x3ffa680c
	...
 800124c:	406fe000 	.word	0x406fe000
 8001250:	20001170 	.word	0x20001170
 8001254:	20000f6c 	.word	0x20000f6c
 8001258:	20000f64 	.word	0x20000f64
 800125c:	20060714 	.word	0x20060714
 8001260:	0800f7ec 	.word	0x0800f7ec
 8001264:	200616d0 	.word	0x200616d0
 8001268:	2000116c 	.word	0x2000116c
 800126c:	20001168 	.word	0x20001168
 8001270:	2005f774 	.word	0x2005f774
 8001274:	2005f770 	.word	0x2005f770
 8001278:	0800f804 	.word	0x0800f804
 800127c:	39d34000 	.word	0x39d34000
 8001280:	3a534067 	.word	0x3a534067
 8001284:	3fd33333 	.word	0x3fd33333
 8001288:	2006071c 	.word	0x2006071c
 800128c:	0800f844 	.word	0x0800f844
 8001290:	20061764 	.word	0x20061764
 8001294:	00000000 	.word	0x00000000
 8001298:	447a0000 	.word	0x447a0000
 800129c:	322bcc77 	.word	0x322bcc77
 80012a0:	3f19999a 	.word	0x3f19999a
 80012a4:	0800f850 	.word	0x0800f850
 80012a8:	0800f86c 	.word	0x0800f86c
 80012ac:	20001164 	.word	0x20001164
 80012b0:	0800f7c0 	.word	0x0800f7c0
 80012b4:	20061878 	.word	0x20061878
 80012b8:	200616c0 	.word	0x200616c0
 80012bc:	20060718 	.word	0x20060718
                ai_error err = ai_network_get_error(ecg_network);
 80012c0:	4b6e      	ldr	r3, [pc, #440]	@ (800147c <ECGSamplingTask+0x534>)
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	f006 f904 	bl	80074d0 <ai_network_get_error>
 80012c8:	4603      	mov	r3, r0
                snprintf(errBuf, sizeof(errBuf), "Inference failed: code=%d, type=%d\r\n", err.code, err.type);
 80012ca:	b2df      	uxtb	r7, r3
 80012cc:	2180      	movs	r1, #128	@ 0x80
 80012ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001480 <ECGSamplingTask+0x538>)
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	4640      	mov	r0, r8
 80012d4:	9700      	str	r7, [sp, #0]
 80012d6:	f00c f91b 	bl	800d510 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 80012da:	4640      	mov	r0, r8
 80012dc:	f7fe ffd8 	bl	8000290 <strlen>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	4641      	mov	r1, r8
 80012e8:	4866      	ldr	r0, [pc, #408]	@ (8001484 <ECGSamplingTask+0x53c>)
 80012ea:	b292      	uxth	r2, r2
 80012ec:	f005 fc26 	bl	8006b3c <HAL_UART_Transmit>
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80012f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80012f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012fa:	f280 808b 	bge.w	8001414 <ECGSamplingTask+0x4cc>
                float min_val = 255, max_val = 0;
 80012fe:	ed9f ba62 	vldr	s22, [pc, #392]	@ 8001488 <ECGSamplingTask+0x540>
 8001302:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800148c <ECGSamplingTask+0x544>
                    if (ai_input_buffer[i] < min_val) min_val = ai_input_buffer[i];
 8001306:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8001308:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d504      	bpl.n	8001324 <ECGSamplingTask+0x3dc>
 800131a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800131c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001320:	ed93 7a00 	vldr	s14, [r3]
                    if (ai_input_buffer[i] > max_val) max_val = ai_input_buffer[i];
 8001324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8001326:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eef4 7acb 	vcmpe.f32	s15, s22
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	dd04      	ble.n	8001342 <ECGSamplingTask+0x3fa>
 8001338:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800133a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800133e:	ed93 ba00 	vldr	s22, [r3]
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001342:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8001344:	3301      	adds	r3, #1
 8001346:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001348:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800134a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800134e:	dbda      	blt.n	8001306 <ECGSamplingTask+0x3be>
                snprintf(errBuf, sizeof(errBuf), "Input range: min=%.2f, max=%.2f\r\n", min_val, max_val);
 8001350:	ee17 0a10 	vmov	r0, s14
 8001354:	f7ff f908 	bl	8000568 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	ee1b 0a10 	vmov	r0, s22
 8001360:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001364:	f7ff f900 	bl	8000568 <__aeabi_f2d>
 8001368:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
 8001370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001374:	4a46      	ldr	r2, [pc, #280]	@ (8001490 <ECGSamplingTask+0x548>)
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	4640      	mov	r0, r8
 800137a:	f00c f8c9 	bl	800d510 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 800137e:	4640      	mov	r0, r8
 8001380:	f7fe ff86 	bl	8000290 <strlen>
 8001384:	4602      	mov	r2, r0
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	b292      	uxth	r2, r2
 800138c:	4641      	mov	r1, r8
 800138e:	483d      	ldr	r0, [pc, #244]	@ (8001484 <ECGSamplingTask+0x53c>)
 8001390:	f005 fbd4 	bl	8006b3c <HAL_UART_Transmit>
                snprintf(errBuf, sizeof(errBuf), "Samples: %.2f, %.2f, %.2f, %.2f, %.2f\r\n",
 8001394:	6920      	ldr	r0, [r4, #16]
 8001396:	f7ff f8e7 	bl	8000568 <__aeabi_f2d>
 800139a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800139e:	68e0      	ldr	r0, [r4, #12]
 80013a0:	f7ff f8e2 	bl	8000568 <__aeabi_f2d>
 80013a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80013a8:	68a0      	ldr	r0, [r4, #8]
 80013aa:	f7ff f8dd 	bl	8000568 <__aeabi_f2d>
 80013ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013b2:	6860      	ldr	r0, [r4, #4]
 80013b4:	f7ff f8d8 	bl	8000568 <__aeabi_f2d>
 80013b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	f7ff f8d3 	bl	8000568 <__aeabi_f2d>
 80013c2:	4a34      	ldr	r2, [pc, #208]	@ (8001494 <ECGSamplingTask+0x54c>)
 80013c4:	e9cd 0100 	strd	r0, r1, [sp]
 80013c8:	2180      	movs	r1, #128	@ 0x80
 80013ca:	4640      	mov	r0, r8
 80013cc:	f00c f8a0 	bl	800d510 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 80013d0:	4640      	mov	r0, r8
 80013d2:	f7fe ff5d 	bl	8000290 <strlen>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	4641      	mov	r1, r8
 80013de:	b292      	uxth	r2, r2
 80013e0:	4828      	ldr	r0, [pc, #160]	@ (8001484 <ECGSamplingTask+0x53c>)
 80013e2:	f005 fbab 	bl	8006b3c <HAL_UART_Transmit>
 80013e6:	e6d6      	b.n	8001196 <ECGSamplingTask+0x24e>
        HAL_ADC_Stop(&hadc1);
 80013e8:	482b      	ldr	r0, [pc, #172]	@ (8001498 <ECGSamplingTask+0x550>)
 80013ea:	f001 fa45 	bl	8002878 <HAL_ADC_Stop>
        xSemaphoreGive(adcSemaphore);
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8db 0000 	ldr.w	r0, [fp]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	f006 faec 	bl	80079d4 <xQueueGenericSend>
        return 2048;
 80013fc:	e61c      	b.n	8001038 <ECGSamplingTask+0xf0>
        HAL_ADC_Stop(&hadc1);
 80013fe:	4826      	ldr	r0, [pc, #152]	@ (8001498 <ECGSamplingTask+0x550>)
 8001400:	f001 fa3a 	bl	8002878 <HAL_ADC_Stop>
        xSemaphoreGive(adcSemaphore);
 8001404:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001406:	f8db 0000 	ldr.w	r0, [fp]
 800140a:	4613      	mov	r3, r2
 800140c:	4611      	mov	r1, r2
 800140e:	f006 fae1 	bl	80079d4 <xQueueGenericSend>
        return 2048;
 8001412:	e611      	b.n	8001038 <ECGSamplingTask+0xf0>
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001414:	ec51 0b1a 	vmov	r0, r1, d10
 8001418:	ec53 2b19 	vmov	r2, r3, d9
 800141c:	e7a6      	b.n	800136c <ECGSamplingTask+0x424>
        snprintf(buf, sizeof(buf), "AI Init error: %d\r\n", err.code);
 800141e:	4603      	mov	r3, r0
 8001420:	f10d 08a0 	add.w	r8, sp, #160	@ 0xa0
 8001424:	2140      	movs	r1, #64	@ 0x40
 8001426:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <ECGSamplingTask+0x554>)
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	4640      	mov	r0, r8
 800142c:	f00c f870 	bl	800d510 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001430:	4640      	mov	r0, r8
 8001432:	f7fe ff2d 	bl	8000290 <strlen>
 8001436:	4602      	mov	r2, r0
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	b292      	uxth	r2, r2
 800143e:	4641      	mov	r1, r8
 8001440:	4810      	ldr	r0, [pc, #64]	@ (8001484 <ECGSamplingTask+0x53c>)
 8001442:	f005 fb7b 	bl	8006b3c <HAL_UART_Transmit>
        ecg_network = AI_HANDLE_NULL;
 8001446:	2300      	movs	r3, #0
 8001448:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <ECGSamplingTask+0x558>)
 800144a:	4c16      	ldr	r4, [pc, #88]	@ (80014a4 <ECGSamplingTask+0x55c>)
 800144c:	920e      	str	r2, [sp, #56]	@ 0x38
 800144e:	4a16      	ldr	r2, [pc, #88]	@ (80014a8 <ECGSamplingTask+0x560>)
 8001450:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8001454:	920d      	str	r2, [sp, #52]	@ 0x34
 8001456:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <ECGSamplingTask+0x564>)
 8001458:	920f      	str	r2, [sp, #60]	@ 0x3c
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <ECGSamplingTask+0x534>)
 800145c:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)"AI Init Failed!\r\n", 16, 100);
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	2210      	movs	r2, #16
 8001462:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <ECGSamplingTask+0x568>)
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <ECGSamplingTask+0x53c>)
 8001466:	f005 fb69 	bl	8006b3c <HAL_UART_Transmit>
        vTaskDelete(NULL);
 800146a:	2000      	movs	r0, #0
 800146c:	f007 fb54 	bl	8008b18 <vTaskDelete>
 8001470:	e5bf      	b.n	8000ff2 <ECGSamplingTask+0xaa>
    return sqrtf(variance / size);
 8001472:	f00b f92f 	bl	800c6d4 <sqrtf>
 8001476:	eef0 6a40 	vmov.f32	s13, s0
 800147a:	e626      	b.n	80010ca <ECGSamplingTask+0x182>
 800147c:	20060714 	.word	0x20060714
 8001480:	0800f878 	.word	0x0800f878
 8001484:	200616d0 	.word	0x200616d0
 8001488:	00000000 	.word	0x00000000
 800148c:	437f0000 	.word	0x437f0000
 8001490:	0800f8a0 	.word	0x0800f8a0
 8001494:	0800f8c4 	.word	0x0800f8c4
 8001498:	20061878 	.word	0x20061878
 800149c:	0800f7d8 	.word	0x0800f7d8
 80014a0:	2000116c 	.word	0x2000116c
 80014a4:	2005f774 	.word	0x2005f774
 80014a8:	20001168 	.word	0x20001168
 80014ac:	2005f770 	.word	0x2005f770
 80014b0:	0800f830 	.word	0x0800f830

080014b4 <ECGTask_Init>:
        }
    }
}

/* ECG Task and Semaphore Initialization */
void ECGTask_Init(void) {
 80014b4:	b508      	push	{r3, lr}
    adcSemaphore = xSemaphoreCreateMutex();
 80014b6:	2001      	movs	r0, #1
 80014b8:	f006 fbe6 	bl	8007c88 <xQueueCreateMutex>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <ECGTask_Init+0x1c>)
    uartSemaphore = xSemaphoreCreateMutex();
 80014c0:	2001      	movs	r0, #1
    adcSemaphore = xSemaphoreCreateMutex();
 80014c2:	601a      	str	r2, [r3, #0]
    uartSemaphore = xSemaphoreCreateMutex();
 80014c4:	f006 fbe0 	bl	8007c88 <xQueueCreateMutex>
 80014c8:	4b02      	ldr	r3, [pc, #8]	@ (80014d4 <ECGTask_Init+0x20>)
 80014ca:	6018      	str	r0, [r3, #0]
}
 80014cc:	bd08      	pop	{r3, pc}
 80014ce:	bf00      	nop
 80014d0:	200616c0 	.word	0x200616c0
 80014d4:	200616bc 	.word	0x200616bc

080014d8 <spo2_handler>:
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
    taskDISABLE_INTERRUPTS();
    while (1);
}

void spo2_handler(void * parameters){
 80014d8:	b500      	push	{lr}
 80014da:	b083      	sub	sp, #12
	TickType_t last_wake = xTaskGetTickCount();
 80014dc:	f007 fc90 	bl	8008e00 <xTaskGetTickCount>
//	 PPGSample_t sample;
	while(1){
		vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(1000));
		HAL_UART_Transmit(&huart3, (uint8_t *)"Hello from spo2\r\n", sizeof("Hello from spo2\r\n"), 100);
 80014e0:	4e09      	ldr	r6, [pc, #36]	@ (8001508 <spo2_handler+0x30>)
 80014e2:	4d0a      	ldr	r5, [pc, #40]	@ (800150c <spo2_handler+0x34>)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80014e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001510 <spo2_handler+0x38>)
	TickType_t last_wake = xTaskGetTickCount();
 80014e6:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(1000));
 80014e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014ec:	a801      	add	r0, sp, #4
 80014ee:	f007 fb7d 	bl	8008bec <xTaskDelayUntil>
		HAL_UART_Transmit(&huart3, (uint8_t *)"Hello from spo2\r\n", sizeof("Hello from spo2\r\n"), 100);
 80014f2:	4631      	mov	r1, r6
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	2212      	movs	r2, #18
 80014f8:	4628      	mov	r0, r5
 80014fa:	f005 fb1f 	bl	8006b3c <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80014fe:	2101      	movs	r1, #1
 8001500:	4620      	mov	r0, r4
 8001502:	f001 fba5 	bl	8002c50 <HAL_GPIO_TogglePin>
	while(1){
 8001506:	e7ef      	b.n	80014e8 <spo2_handler+0x10>
 8001508:	0800f8ec 	.word	0x0800f8ec
 800150c:	200616d0 	.word	0x200616d0
 8001510:	42020400 	.word	0x42020400

08001514 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8001514:	b500      	push	{lr}
 8001516:	b091      	sub	sp, #68	@ 0x44
 8001518:	460b      	mov	r3, r1
    snprintf(buf, sizeof(buf), "Stack overflow in %s\r\n", pcTaskName);
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <vApplicationStackOverflowHook+0x2c>)
 800151c:	2140      	movs	r1, #64	@ 0x40
 800151e:	4668      	mov	r0, sp
 8001520:	f00b fff6 	bl	800d510 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001524:	4668      	mov	r0, sp
 8001526:	f7fe feb3 	bl	8000290 <strlen>
 800152a:	4602      	mov	r2, r0
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	4669      	mov	r1, sp
 8001532:	b292      	uxth	r2, r2
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <vApplicationStackOverflowHook+0x30>)
 8001536:	f005 fb01 	bl	8006b3c <HAL_UART_Transmit>
    taskDISABLE_INTERRUPTS();
 800153a:	f008 fa3b 	bl	80099b4 <ulSetInterruptMask>
    while (1);
 800153e:	e7fe      	b.n	800153e <vApplicationStackOverflowHook+0x2a>
 8001540:	0800f900 	.word	0x0800f900
 8001544:	200616d0 	.word	0x200616d0

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b5d0      	push	{r4, r6, r7, lr}
 800154a:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154c:	2220      	movs	r2, #32
 800154e:	2100      	movs	r1, #0
 8001550:	a80a      	add	r0, sp, #40	@ 0x28
 8001552:	f00c f870 	bl	800d636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001556:	2300      	movs	r3, #0
 8001558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800155c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001560:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001564:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <SystemClock_Config+0x9c>)
 8001566:	6913      	ldr	r3, [r2, #16]
 8001568:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800156c:	6113      	str	r3, [r2, #16]
 800156e:	6913      	ldr	r3, [r2, #16]
 8001570:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001578:	6953      	ldr	r3, [r2, #20]
 800157a:	071b      	lsls	r3, r3, #28
 800157c:	d5fc      	bpl.n	8001578 <SystemClock_Config+0x30>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 250;
 800157e:	26fa      	movs	r6, #250	@ 0xfa
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001580:	2001      	movs	r0, #1
 8001582:	f44f 11a8 	mov.w	r1, #1376256	@ 0x150000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001588:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 250;
 800158a:	9615      	str	r6, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800158c:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800158e:	2600      	movs	r6, #0
 8001590:	2700      	movs	r7, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001592:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001598:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800159c:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a0:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80015a2:	e9cd 671a 	strd	r6, r7, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015a6:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80015a8:	9219      	str	r2, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f001 fca9 	bl	8002f00 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b108      	cbz	r0, 80015b6 <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	231f      	movs	r3, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015bc:	2105      	movs	r1, #5
 80015be:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c0:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c8:	f001 fff0 	bl	80035ac <HAL_RCC_ClockConfig>
 80015cc:	b108      	cbz	r0, 80015d2 <SystemClock_Config+0x8a>
 80015ce:	b672      	cpsid	i
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <SystemClock_Config+0x88>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <SystemClock_Config+0xa0>)
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80015da:	f043 0320 	orr.w	r3, r3, #32
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	b01c      	add	sp, #112	@ 0x70
 80015e2:	bdd0      	pop	{r4, r6, r7, pc}
 80015e4:	44020800 	.word	0x44020800
 80015e8:	40022000 	.word	0x40022000

080015ec <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	2400      	movs	r4, #0
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b092      	sub	sp, #72	@ 0x48
  HAL_Init();
 80015f2:	f000 fbb7 	bl	8001d64 <HAL_Init>
  SystemClock_Config();
 80015f6:	f7ff ffa7 	bl	8001548 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80015fe:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4bb0      	ldr	r3, [pc, #704]	@ (80018c4 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	f042 0204 	orr.w	r2, r2, #4
 8001610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001614:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001618:	2510      	movs	r5, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	f002 0204 	and.w	r2, r2, #4
 800161e:	9203      	str	r2, [sp, #12]
 8001620:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001622:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001626:	2110      	movs	r1, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001630:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001634:	48a4      	ldr	r0, [pc, #656]	@ (80018c8 <main+0x2dc>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	f002 0220 	and.w	r2, r2, #32
 800163a:	9204      	str	r2, [sp, #16]
 800163c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001642:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800164a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800164e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001652:	9205      	str	r2, [sp, #20]
 8001654:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001662:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001666:	f002 0201 	and.w	r2, r2, #1
 800166a:	9206      	str	r2, [sp, #24]
 800166c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001672:	f042 0202 	orr.w	r2, r2, #2
 8001676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800167a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800167e:	f002 0202 	and.w	r2, r2, #2
 8001682:	9207      	str	r2, [sp, #28]
 8001684:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800168a:	f042 0208 	orr.w	r2, r2, #8
 800168e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001692:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001696:	f002 0208 	and.w	r2, r2, #8
 800169a:	9208      	str	r2, [sp, #32]
 800169c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80016a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80016aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80016ae:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80016b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80016b8:	f001 fac4 	bl	8002c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016bc:	4622      	mov	r2, r4
 80016be:	2101      	movs	r1, #1
 80016c0:	4882      	ldr	r0, [pc, #520]	@ (80018cc <main+0x2e0>)
 80016c2:	f001 fabf 	bl	8002c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 80016c6:	4622      	mov	r2, r4
 80016c8:	2110      	movs	r1, #16
 80016ca:	4881      	ldr	r0, [pc, #516]	@ (80018d0 <main+0x2e4>)
 80016cc:	f001 faba 	bl	8002c44 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	487d      	ldr	r0, [pc, #500]	@ (80018c8 <main+0x2dc>)
 80016d2:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016dc:	f001 f9ee 	bl	8002abc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	487a      	ldr	r0, [pc, #488]	@ (80018cc <main+0x2e0>)
 80016e2:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f001 f9e6 	bl	8002abc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f4:	4876      	ldr	r0, [pc, #472]	@ (80018d0 <main+0x2e4>)
  hi2c1.Instance = I2C1;
 80016f6:	4d77      	ldr	r5, [pc, #476]	@ (80018d4 <main+0x2e8>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f8:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016fe:	f001 f9dd 	bl	8002abc <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x60808CD3;
 8001702:	4a75      	ldr	r2, [pc, #468]	@ (80018d8 <main+0x2ec>)
 8001704:	4b75      	ldr	r3, [pc, #468]	@ (80018dc <main+0x2f0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001706:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x60808CD3;
 8001708:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170c:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001710:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001718:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171a:	f001 faa3 	bl	8002c64 <HAL_I2C_Init>
 800171e:	b108      	cbz	r0, 8001724 <main+0x138>
 8001720:	b672      	cpsid	i
  while (1)
 8001722:	e7fe      	b.n	8001722 <main+0x136>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001724:	4601      	mov	r1, r0
 8001726:	4628      	mov	r0, r5
 8001728:	f001 faf6 	bl	8002d18 <HAL_I2CEx_ConfigAnalogFilter>
 800172c:	b108      	cbz	r0, 8001732 <main+0x146>
 800172e:	b672      	cpsid	i
  while (1)
 8001730:	e7fe      	b.n	8001730 <main+0x144>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001732:	4601      	mov	r1, r0
 8001734:	4628      	mov	r0, r5
 8001736:	f001 fb19 	bl	8002d6c <HAL_I2CEx_ConfigDigitalFilter>
 800173a:	b108      	cbz	r0, 8001740 <main+0x154>
 800173c:	b672      	cpsid	i
  while (1)
 800173e:	e7fe      	b.n	800173e <main+0x152>
  huart3.Instance = USART3;
 8001740:	4c67      	ldr	r4, [pc, #412]	@ (80018e0 <main+0x2f4>)
 8001742:	4a68      	ldr	r2, [pc, #416]	@ (80018e4 <main+0x2f8>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001744:	270c      	movs	r7, #12
  huart3.Instance = USART3;
 8001746:	6022      	str	r2, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8001748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart3.Init.Parity = UART_PARITY_NONE;
 800174c:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001758:	60a0      	str	r0, [r4, #8]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175c:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 115200;
 800175e:	6062      	str	r2, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001760:	6167      	str	r7, [r4, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	f005 fc07 	bl	8006f74 <HAL_UART_Init>
 8001766:	4601      	mov	r1, r0
 8001768:	b108      	cbz	r0, 800176e <main+0x182>
 800176a:	b672      	cpsid	i
  while (1)
 800176c:	e7fe      	b.n	800176c <main+0x180>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	4620      	mov	r0, r4
 8001770:	f005 fdd0 	bl	8007314 <HAL_UARTEx_SetTxFifoThreshold>
 8001774:	4601      	mov	r1, r0
 8001776:	b108      	cbz	r0, 800177c <main+0x190>
 8001778:	b672      	cpsid	i
  while (1)
 800177a:	e7fe      	b.n	800177a <main+0x18e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177c:	4620      	mov	r0, r4
 800177e:	f005 fe0b 	bl	8007398 <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	b108      	cbz	r0, 8001788 <main+0x19c>
 8001784:	b672      	cpsid	i
  while (1)
 8001786:	e7fe      	b.n	8001786 <main+0x19a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001788:	4620      	mov	r0, r4
 800178a:	f005 fda5 	bl	80072d8 <HAL_UARTEx_DisableFifoMode>
 800178e:	4605      	mov	r5, r0
 8001790:	b108      	cbz	r0, 8001796 <main+0x1aa>
 8001792:	b672      	cpsid	i
  while (1)
 8001794:	e7fe      	b.n	8001794 <main+0x1a8>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001796:	4601      	mov	r1, r0
 8001798:	2220      	movs	r2, #32
 800179a:	a80a      	add	r0, sp, #40	@ 0x28
 800179c:	f00b ff4b 	bl	800d636 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017a0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  hadc1.Instance = ADC1;
 80017a4:	4c50      	ldr	r4, [pc, #320]	@ (80018e8 <main+0x2fc>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a6:	e9c4 3501 	strd	r3, r5, [r4, #4]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ae:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b2:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017b6:	8325      	strh	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b8:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017bc:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80017c0:	6325      	str	r5, [r4, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 80017c2:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c6:	2504      	movs	r5, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017c8:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Instance = ADC1;
 80017ca:	4b48      	ldr	r3, [pc, #288]	@ (80018ec <main+0x300>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017cc:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80017ce:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 1;
 80017d0:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d2:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d4:	f000 faf2 	bl	8001dbc <HAL_ADC_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	b108      	cbz	r0, 80017e0 <main+0x1f4>
 80017dc:	b672      	cpsid	i
  while (1)
 80017de:	e7fe      	b.n	80017de <main+0x1f2>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e0:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e2:	2206      	movs	r2, #6
  sConfig.Offset = 0;
 80017e4:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017e6:	247f      	movs	r4, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017e8:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ea:	a90a      	add	r1, sp, #40	@ 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017ec:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
  sConfig.Channel = ADC_CHANNEL_0;
 80017f0:	960a      	str	r6, [sp, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017f2:	950e      	str	r5, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017f4:	940d      	str	r4, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f6:	f000 fc39 	bl	800206c <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b108      	cbz	r0, 8001802 <main+0x216>
 80017fe:	b672      	cpsid	i
  while (1)
 8001800:	e7fe      	b.n	8001800 <main+0x214>
  huart2.Init.BaudRate = 921600;
 8001802:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
  huart2.Instance = USART2;
 8001806:	483a      	ldr	r0, [pc, #232]	@ (80018f0 <main+0x304>)
 8001808:	493a      	ldr	r1, [pc, #232]	@ (80018f4 <main+0x308>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001812:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 800181c:	6001      	str	r1, [r0, #0]
  huart2.Init.BaudRate = 921600;
 800181e:	6042      	str	r2, [r0, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001820:	f005 fba8 	bl	8006f74 <HAL_UART_Init>
 8001824:	b108      	cbz	r0, 800182a <main+0x23e>
 8001826:	b672      	cpsid	i
  while (1)
 8001828:	e7fe      	b.n	8001828 <main+0x23c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182a:	2100      	movs	r1, #0
 800182c:	4830      	ldr	r0, [pc, #192]	@ (80018f0 <main+0x304>)
 800182e:	f005 fd71 	bl	8007314 <HAL_UARTEx_SetTxFifoThreshold>
 8001832:	4601      	mov	r1, r0
 8001834:	b108      	cbz	r0, 800183a <main+0x24e>
 8001836:	b672      	cpsid	i
  while (1)
 8001838:	e7fe      	b.n	8001838 <main+0x24c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	482d      	ldr	r0, [pc, #180]	@ (80018f0 <main+0x304>)
 800183c:	f005 fdac 	bl	8007398 <HAL_UARTEx_SetRxFifoThreshold>
 8001840:	b108      	cbz	r0, 8001846 <main+0x25a>
 8001842:	b672      	cpsid	i
  while (1)
 8001844:	e7fe      	b.n	8001844 <main+0x258>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001846:	482a      	ldr	r0, [pc, #168]	@ (80018f0 <main+0x304>)
 8001848:	f005 fd08 	bl	800725c <HAL_UARTEx_EnableFifoMode>
 800184c:	b108      	cbz	r0, 8001852 <main+0x266>
 800184e:	b672      	cpsid	i
  while (1)
 8001850:	e7fe      	b.n	8001850 <main+0x264>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001852:	f001 fab7 	bl	8002dc4 <HAL_ICACHE_Enable>
 8001856:	4603      	mov	r3, r0
 8001858:	b108      	cbz	r0, 800185e <main+0x272>
 800185a:	b672      	cpsid	i
  while (1)
 800185c:	e7fe      	b.n	800185c <main+0x270>
  hdcache1.Instance = DCACHE1;
 800185e:	4826      	ldr	r0, [pc, #152]	@ (80018f8 <main+0x30c>)
 8001860:	4a26      	ldr	r2, [pc, #152]	@ (80018fc <main+0x310>)
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8001862:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8001866:	f001 f8eb 	bl	8002a40 <HAL_DCACHE_Init>
 800186a:	4604      	mov	r4, r0
 800186c:	b108      	cbz	r0, 8001872 <main+0x286>
 800186e:	b672      	cpsid	i
  while (1)
 8001870:	e7fe      	b.n	8001870 <main+0x284>
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 8001872:	2502      	movs	r5, #2
 8001874:	4e22      	ldr	r6, [pc, #136]	@ (8001900 <main+0x314>)
  ECGTask_Init();
 8001876:	f7ff fe1d 	bl	80014b4 <ECGTask_Init>
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 800187a:	e9cd 5600 	strd	r5, r6, [sp]
 800187e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001882:	4623      	mov	r3, r4
 8001884:	491f      	ldr	r1, [pc, #124]	@ (8001904 <main+0x318>)
 8001886:	4820      	ldr	r0, [pc, #128]	@ (8001908 <main+0x31c>)
 8001888:	f007 f8a4 	bl	80089d4 <xTaskCreate>
 800188c:	4d1f      	ldr	r5, [pc, #124]	@ (800190c <main+0x320>)
  configASSERT(status == pdPASS);
 800188e:	2801      	cmp	r0, #1
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 8001890:	6028      	str	r0, [r5, #0]
  configASSERT(status == pdPASS);
 8001892:	d002      	beq.n	800189a <main+0x2ae>
 8001894:	f008 f88e 	bl	80099b4 <ulSetInterruptMask>
 8001898:	e7fe      	b.n	8001898 <main+0x2ac>
  status = xTaskCreate(ECGSamplingTask, "ECGTask", 8192, NULL, 3, &ecg_handle);
 800189a:	2603      	movs	r6, #3
 800189c:	491c      	ldr	r1, [pc, #112]	@ (8001910 <main+0x324>)
 800189e:	4623      	mov	r3, r4
 80018a0:	9101      	str	r1, [sp, #4]
 80018a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a6:	491b      	ldr	r1, [pc, #108]	@ (8001914 <main+0x328>)
 80018a8:	481b      	ldr	r0, [pc, #108]	@ (8001918 <main+0x32c>)
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	f007 f892 	bl	80089d4 <xTaskCreate>
  configASSERT(status == pdPASS);
 80018b0:	2801      	cmp	r0, #1
  status = xTaskCreate(ECGSamplingTask, "ECGTask", 8192, NULL, 3, &ecg_handle);
 80018b2:	6028      	str	r0, [r5, #0]
  configASSERT(status == pdPASS);
 80018b4:	d002      	beq.n	80018bc <main+0x2d0>
 80018b6:	f008 f87d 	bl	80099b4 <ulSetInterruptMask>
 80018ba:	e7fe      	b.n	80018ba <main+0x2ce>
  vTaskStartScheduler();
 80018bc:	f007 f9fe 	bl	8008cbc <vTaskStartScheduler>
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <main+0x2d4>
 80018c2:	bf00      	nop
 80018c4:	44020c00 	.word	0x44020c00
 80018c8:	42021400 	.word	0x42021400
 80018cc:	42020400 	.word	0x42020400
 80018d0:	42021800 	.word	0x42021800
 80018d4:	200617f8 	.word	0x200617f8
 80018d8:	40005400 	.word	0x40005400
 80018dc:	60808cd3 	.word	0x60808cd3
 80018e0:	200616d0 	.word	0x200616d0
 80018e4:	40004800 	.word	0x40004800
 80018e8:	20061878 	.word	0x20061878
 80018ec:	42028000 	.word	0x42028000
 80018f0:	20061764 	.word	0x20061764
 80018f4:	40004400 	.word	0x40004400
 80018f8:	2006184c 	.word	0x2006184c
 80018fc:	40031400 	.word	0x40031400
 8001900:	200616cc 	.word	0x200616cc
 8001904:	0800f918 	.word	0x0800f918
 8001908:	080014d9 	.word	0x080014d9
 800190c:	200616c4 	.word	0x200616c4
 8001910:	200616c8 	.word	0x200616c8
 8001914:	0800f924 	.word	0x0800f924
 8001918:	08000f49 	.word	0x08000f49

0800191c <Error_Handler>:
 800191c:	b672      	cpsid	i
  while (1)
 800191e:	e7fe      	b.n	800191e <Error_Handler+0x2>

08001920 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	0000      	movs	r0, r0
	...

08001928 <HAL_ADC_MspInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	2300      	movs	r3, #0
{
 800192a:	b500      	push	{lr}
  if(hadc->Instance==ADC1)
 800192c:	4a1a      	ldr	r2, [pc, #104]	@ (8001998 <HAL_ADC_MspInit+0x70>)
 800192e:	6801      	ldr	r1, [r0, #0]
{
 8001930:	b089      	sub	sp, #36	@ 0x24
  if(hadc->Instance==ADC1)
 8001932:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001938:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800193c:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 800193e:	d002      	beq.n	8001946 <HAL_ADC_MspInit+0x1e>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001940:	b009      	add	sp, #36	@ 0x24
 8001942:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001946:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8001990 <HAL_ADC_MspInit+0x68>
    __HAL_RCC_ADC_CLK_ENABLE();
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_ADC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800194e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC_CLK_ENABLE();
 8001954:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001958:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800195c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001960:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800196c:	f042 0201 	orr.w	r2, r2, #1
 8001970:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001978:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f001 f89a 	bl	8002abc <HAL_GPIO_Init>
}
 8001988:	b009      	add	sp, #36	@ 0x24
 800198a:	f85d fb04 	ldr.w	pc, [sp], #4
 800198e:	bf00      	nop
 8001990:	00000001 	.word	0x00000001
 8001994:	00000003 	.word	0x00000003
 8001998:	42028000 	.word	0x42028000
 800199c:	44020c00 	.word	0x44020c00
 80019a0:	42020000 	.word	0x42020000

080019a4 <HAL_DCACHE_MspInit>:
  * @param hdcache: DCACHE handle pointer
  * @retval None
  */
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
  if(hdcache->Instance==DCACHE1)
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_DCACHE_MspInit+0x2c>)
 80019a6:	6802      	ldr	r2, [r0, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d000      	beq.n	80019ae <HAL_DCACHE_MspInit+0xa>
 80019ac:	4770      	bx	lr
  {
    /* USER CODE BEGIN DCACHE1_MspInit 0 */

    /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_DCACHE_MspInit+0x30>)
{
 80019b0:	b082      	sub	sp, #8
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80019b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80019b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END DCACHE1_MspInit 1 */

  }

}
 80019ca:	b002      	add	sp, #8
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40031400 	.word	0x40031400
 80019d4:	44020c00 	.word	0x44020c00

080019d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	2100      	movs	r1, #0
{
 80019dc:	4604      	mov	r4, r0
 80019de:	b0ca      	sub	sp, #296	@ 0x128
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80019e4:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80019ea:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80019ee:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f00b fe21 	bl	800d636 <memset>
  if(hi2c->Instance==I2C1)
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_I2C_MspInit+0x94>)
 80019f6:	6822      	ldr	r2, [r4, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_MspInit+0x28>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019fc:	b04a      	add	sp, #296	@ 0x128
 80019fe:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a04:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a06:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a08:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f002 f942 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 8001a10:	bb40      	cbnz	r0, 8001a64 <HAL_I2C_MspInit+0x8c>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a12:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4c16      	ldr	r4, [pc, #88]	@ (8001a70 <HAL_I2C_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a16:	20c0      	movs	r0, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a1c:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8001a26:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2a:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <HAL_I2C_MspInit+0x9c>)
 8001a3e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f001 f83a 	bl	8002abc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a48:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8001a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a50:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8001a54:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9b01      	ldr	r3, [sp, #4]
}
 8001a60:	b04a      	add	sp, #296	@ 0x128
 8001a62:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001a64:	f7ff ff5a 	bl	800191c <Error_Handler>
 8001a68:	e7d3      	b.n	8001a12 <HAL_I2C_MspInit+0x3a>
 8001a6a:	bf00      	nop
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	44020c00 	.word	0x44020c00
 8001a74:	42020400 	.word	0x42020400

08001a78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	2100      	movs	r1, #0
{
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	b0ce      	sub	sp, #312	@ 0x138
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001a84:	a80c      	add	r0, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001a8a:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001a8e:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a90:	f00b fdd1 	bl	800d636 <memset>
  if(huart->Instance==USART2)
 8001a94:	4a44      	ldr	r2, [pc, #272]	@ (8001ba8 <HAL_UART_MspInit+0x130>)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_UART_MspInit+0x2e>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001a9c:	4a43      	ldr	r2, [pc, #268]	@ (8001bac <HAL_UART_MspInit+0x134>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d04a      	beq.n	8001b38 <HAL_UART_MspInit+0xc0>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aa2:	b04e      	add	sp, #312	@ 0x138
 8001aa4:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aaa:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab0:	f002 f8f0 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d171      	bne.n	8001b9c <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb0 <HAL_UART_MspInit+0x138>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ac0:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001ac6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001aca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ace:	2700      	movs	r7, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001ad4:	9201      	str	r2, [sp, #4]
 8001ad6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	4835      	ldr	r0, [pc, #212]	@ (8001bb4 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001ae6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001aea:	f002 0201 	and.w	r2, r2, #1
 8001aee:	9202      	str	r2, [sp, #8]
 8001af0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001af6:	f042 0208 	orr.w	r2, r2, #8
 8001afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b02:	2208      	movs	r2, #8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0c:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b14:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b18:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f000 ffcf 	bl	8002abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b1e:	2220      	movs	r2, #32
 8001b20:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b22:	4825      	ldr	r0, [pc, #148]	@ (8001bb8 <HAL_UART_MspInit+0x140>)
 8001b24:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b26:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001b2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2e:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f000 ffc4 	bl	8002abc <HAL_GPIO_Init>
}
 8001b34:	b04e      	add	sp, #312	@ 0x138
 8001b36:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b38:	2204      	movs	r2, #4
 8001b3a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b42:	f002 f8a7 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	bb60      	cbnz	r0, 8001ba2 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_UART_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b4a:	2000      	movs	r0, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b50:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b52:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001b5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001b5e:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001b62:	9204      	str	r2, [sp, #16]
 8001b64:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b66:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b76:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	9305      	str	r3, [sp, #20]
 8001b80:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b82:	2100      	movs	r1, #0
 8001b84:	2302      	movs	r3, #2
 8001b86:	e9cd 0108 	strd	r0, r1, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	480b      	ldr	r0, [pc, #44]	@ (8001bb8 <HAL_UART_MspInit+0x140>)
 8001b8c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b92:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b94:	f000 ff92 	bl	8002abc <HAL_GPIO_Init>
}
 8001b98:	b04e      	add	sp, #312	@ 0x138
 8001b9a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001b9c:	f7ff febe 	bl	800191c <Error_Handler>
 8001ba0:	e78a      	b.n	8001ab8 <HAL_UART_MspInit+0x40>
      Error_Handler();
 8001ba2:	f7ff febb 	bl	800191c <Error_Handler>
 8001ba6:	e7cf      	b.n	8001b48 <HAL_UART_MspInit+0xd0>
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40004800 	.word	0x40004800
 8001bb0:	44020c00 	.word	0x44020c00
 8001bb4:	42020000 	.word	0x42020000
 8001bb8:	42020c00 	.word	0x42020c00

08001bbc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bbc:	e7fe      	b.n	8001bbc <NMI_Handler>
 8001bbe:	bf00      	nop

08001bc0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <HardFault_Handler>
 8001bc2:	bf00      	nop

08001bc4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler>
 8001bc6:	bf00      	nop

08001bc8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <BusFault_Handler>
 8001bca:	bf00      	nop

08001bcc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler>
 8001bce:	bf00      	nop

08001bd0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop

08001bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd4:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bd6:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 8001bd8:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bda:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bde:	491d      	ldr	r1, [pc, #116]	@ (8001c54 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001be0:	4c1d      	ldr	r4, [pc, #116]	@ (8001c58 <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
  RCC->PLL1DIVR = 0x01010280U;
 8001be6:	481d      	ldr	r0, [pc, #116]	@ (8001c5c <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR = RCC_CR_HSION;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001bf2:	4d1c      	ldr	r5, [pc, #112]	@ (8001c64 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 8001bf4:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 8001bf6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001bf8:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001bfa:	681f      	ldr	r7, [r3, #0]
 8001bfc:	403c      	ands	r4, r7
 8001bfe:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL3CFGR = 0U;
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1DIVR = 0x01010280U;
 8001c06:	6358      	str	r0, [r3, #52]	@ 0x34
  RCC->PLL1FRACR = 0x00000000U;
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2DIVR = 0x01010280U;
 8001c0a:	63d8      	str	r0, [r3, #60]	@ 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3DIVR = 0x01010280U;
 8001c0e:	6458      	str	r0, [r3, #68]	@ 0x44
  RCC->PLL3FRACR = 0x00000000U;
 8001c10:	649a      	str	r2, [r3, #72]	@ 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001c18:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 8001c1a:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c1c:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001c1e:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001c20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001c24:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c28:	d001      	beq.n	8001c2e <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 8001c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2c:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001c2e:	69eb      	ldr	r3, [r5, #28]
 8001c30:	07db      	lsls	r3, r3, #31
 8001c32:	d503      	bpl.n	8001c3c <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c34:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c38:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001c3a:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <SystemInit+0x90>)
}
 8001c3e:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	f042 0202 	orr.w	r2, r2, #2
 8001c46:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	61da      	str	r2, [r3, #28]
}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	eae2eae3 	.word	0xeae2eae3
 8001c5c:	01010280 	.word	0x01010280
 8001c60:	44020c00 	.word	0x44020c00
 8001c64:	40022000 	.word	0x40022000
 8001c68:	08192a3b 	.word	0x08192a3b
 8001c6c:	4c5d6e7f 	.word	0x4c5d6e7f

08001c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c70:	480d      	ldr	r0, [pc, #52]	@ (8001ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c74:	f7ff ffae 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <LoopForever+0x6>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <LoopForever+0xe>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <LoopForever+0x16>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c9e:	f00b fd91 	bl	800d7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca2:	f7ff fca3 	bl	80015ec <main>

08001ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ca6:	e7fe      	b.n	8001ca6 <LoopForever>
  ldr   r0, =_estack
 8001ca8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	20001144 	.word	0x20001144
  ldr r2, =_sidata
 8001cb4:	0801ea14 	.word	0x0801ea14
  ldr r2, =_sbss
 8001cb8:	20001148 	.word	0x20001148
  ldr r4, =_ebss
 8001cbc:	2007b0c0 	.word	0x2007b0c0

08001cc0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC1_IRQHandler>
	...

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001cc6:	4e24      	ldr	r6, [pc, #144]	@ (8001d58 <HAL_InitTick+0x94>)
 8001cc8:	7832      	ldrb	r2, [r6, #0]
 8001cca:	b1ea      	cbz	r2, 8001d08 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001ccc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001cd0:	691c      	ldr	r4, [r3, #16]
 8001cd2:	4605      	mov	r5, r0
 8001cd4:	f014 0404 	ands.w	r4, r4, #4
 8001cd8:	d018      	beq.n	8001d0c <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001cda:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cde:	fbb1 f2f2 	udiv	r2, r1, r2
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_InitTick+0x98>)
 8001ce4:	681c      	ldr	r4, [r3, #0]
 8001ce6:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001cea:	4620      	mov	r0, r4
 8001cec:	f000 fe36 	bl	800295c <HAL_SYSTICK_Config>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	b948      	cbnz	r0, 8001d08 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 fdf2 	bl	80028e4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d00:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_InitTick+0x9c>)
 8001d02:	4620      	mov	r0, r4
 8001d04:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
}
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d0c:	f000 fe74 	bl	80029f8 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8001d10:	2801      	cmp	r0, #1
 8001d12:	d00d      	beq.n	8001d30 <HAL_InitTick+0x6c>
 8001d14:	2802      	cmp	r0, #2
 8001d16:	d015      	beq.n	8001d44 <HAL_InitTick+0x80>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d1e6      	bne.n	8001cea <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d1c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d20:	7831      	ldrb	r1, [r6, #0]
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_InitTick+0x98>)
 8001d24:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d28:	681c      	ldr	r4, [r3, #0]
 8001d2a:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 8001d2e:	e7dc      	b.n	8001cea <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d34:	7831      	ldrb	r1, [r6, #0]
 8001d36:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8001d3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d3e:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001d42:	e7d2      	b.n	8001cea <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d48:	7831      	ldrb	r1, [r6, #0]
 8001d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d4e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d52:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001d56:	e7c8      	b.n	8001cea <HAL_InitTick+0x26>
 8001d58:	20000004 	.word	0x20000004
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_Init>:
{
 8001d64:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d66:	2003      	movs	r0, #3
 8001d68:	f000 fdaa 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d6c:	f001 fd74 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a0c      	ldr	r2, [pc, #48]	@ (8001da4 <HAL_Init+0x40>)
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <HAL_Init+0x44>)
 8001d76:	6a12      	ldr	r2, [r2, #32]
 8001d78:	490c      	ldr	r1, [pc, #48]	@ (8001dac <HAL_Init+0x48>)
 8001d7a:	f002 020f 	and.w	r2, r2, #15
 8001d7e:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d80:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d82:	40d3      	lsrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d86:	f000 fdf9 	bl	800297c <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f7ff ff9a 	bl	8001cc4 <HAL_InitTick>
 8001d90:	b110      	cbz	r0, 8001d98 <HAL_Init+0x34>
    return HAL_ERROR;
 8001d92:	2401      	movs	r4, #1
}
 8001d94:	4620      	mov	r0, r4
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	4604      	mov	r4, r0
  HAL_MspInit();
 8001d9a:	f7ff fdc1 	bl	8001920 <HAL_MspInit>
}
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	44020c00 	.word	0x44020c00
 8001da8:	0800f9a4 	.word	0x0800f9a4
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001db0:	4b01      	ldr	r3, [pc, #4]	@ (8001db8 <HAL_GetTick+0x8>)
 8001db2:	6818      	ldr	r0, [r3, #0]
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	200618e0 	.word	0x200618e0

08001dbc <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dbc:	2300      	movs	r3, #0
{
 8001dbe:	b530      	push	{r4, r5, lr}
 8001dc0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001dc2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f000 809c 	beq.w	8001f02 <HAL_ADC_Init+0x146>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dca:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001dcc:	4604      	mov	r4, r0
 8001dce:	2d00      	cmp	r5, #0
 8001dd0:	f000 809c 	beq.w	8001f0c <HAL_ADC_Init+0x150>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dd6:	6893      	ldr	r3, [r2, #8]
 8001dd8:	009d      	lsls	r5, r3, #2
 8001dda:	d505      	bpl.n	8001de8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001de2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001de8:	6893      	ldr	r3, [r2, #8]
 8001dea:	00d8      	lsls	r0, r3, #3
 8001dec:	d419      	bmi.n	8001e22 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dee:	4b5c      	ldr	r3, [pc, #368]	@ (8001f60 <HAL_ADC_Init+0x1a4>)
 8001df0:	485c      	ldr	r0, [pc, #368]	@ (8001f64 <HAL_ADC_Init+0x1a8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001df4:	6891      	ldr	r1, [r2, #8]
 8001df6:	099b      	lsrs	r3, r3, #6
 8001df8:	fba0 0303 	umull	r0, r3, r0, r3
 8001dfc:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001e0e:	6091      	str	r1, [r2, #8]
 8001e10:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001e12:	9b01      	ldr	r3, [sp, #4]
 8001e14:	b12b      	cbz	r3, 8001e22 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f9      	bne.n	8001e16 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e22:	6893      	ldr	r3, [r2, #8]
 8001e24:	00d9      	lsls	r1, r3, #3
 8001e26:	d46f      	bmi.n	8001f08 <HAL_ADC_Init+0x14c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8001e28:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001e34:	4303      	orrs	r3, r0
 8001e36:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e38:	6893      	ldr	r3, [r2, #8]
 8001e3a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e40:	d15b      	bne.n	8001efa <HAL_ADC_Init+0x13e>
 8001e42:	06db      	lsls	r3, r3, #27
 8001e44:	d459      	bmi.n	8001efa <HAL_ADC_Init+0x13e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e52:	6893      	ldr	r3, [r2, #8]
 8001e54:	07dd      	lsls	r5, r3, #31
 8001e56:	d408      	bmi.n	8001e6a <HAL_ADC_Init+0xae>
 8001e58:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_ADC_Init+0x1ac>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f013 0f01 	tst.w	r3, #1
 8001e60:	4b42      	ldr	r3, [pc, #264]	@ (8001f6c <HAL_ADC_Init+0x1b0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0xae>
 8001e66:	07d9      	lsls	r1, r3, #31
 8001e68:	d563      	bpl.n	8001f32 <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8001e6a:	68e5      	ldr	r5, [r4, #12]
 8001e6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e6e:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8001e72:	432b      	orrs	r3, r5
 8001e74:	68a5      	ldr	r5, [r4, #8]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e76:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8001e78:	ea43 0305 	orr.w	r3, r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e7c:	7e65      	ldrb	r5, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 8001e7e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e86:	d04f      	beq.n	8001f28 <HAL_ADC_Init+0x16c>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e88:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001e8a:	b121      	cbz	r1, 8001e96 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8001e8c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e8e:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e92:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e94:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e96:	68d5      	ldr	r5, [r2, #12]
 8001e98:	4935      	ldr	r1, [pc, #212]	@ (8001f70 <HAL_ADC_Init+0x1b4>)
 8001e9a:	4029      	ands	r1, r5
 8001e9c:	4319      	orrs	r1, r3
 8001e9e:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ea0:	6913      	ldr	r3, [r2, #16]
 8001ea2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001ea4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eac:	6893      	ldr	r3, [r2, #8]
 8001eae:	071b      	lsls	r3, r3, #28
 8001eb0:	d414      	bmi.n	8001edc <HAL_ADC_Init+0x120>
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eb2:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eb4:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb8:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eba:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ebe:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ec0:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (
 8001ec4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ecc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d036      	beq.n	8001f42 <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ed4:	6913      	ldr	r3, [r2, #16]
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001edc:	6923      	ldr	r3, [r4, #16]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d01a      	beq.n	8001f18 <HAL_ADC_Init+0x15c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001ee4:	f023 030f 	bic.w	r3, r3, #15
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001eec:	f023 0303 	bic.w	r3, r3, #3
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001ef6:	b003      	add	sp, #12
 8001ef8:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001efc:	f043 0310 	orr.w	r3, r3, #16
 8001f00:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	b003      	add	sp, #12
 8001f06:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e795      	b.n	8001e38 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8001f0c:	f7ff fd0c 	bl	8001928 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f10:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8001f16:	e75d      	b.n	8001dd4 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f18:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001f1a:	69e3      	ldr	r3, [r4, #28]
 8001f1c:	f021 010f 	bic.w	r1, r1, #15
 8001f20:	3b01      	subs	r3, #1
 8001f22:	430b      	orrs	r3, r1
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	e7e0      	b.n	8001eea <HAL_ADC_Init+0x12e>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001f2a:	3901      	subs	r1, #1
 8001f2c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001f30:	e7aa      	b.n	8001e88 <HAL_ADC_Init+0xcc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f32:	4910      	ldr	r1, [pc, #64]	@ (8001f74 <HAL_ADC_Init+0x1b8>)
 8001f34:	6865      	ldr	r5, [r4, #4]
 8001f36:	688b      	ldr	r3, [r1, #8]
 8001f38:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001f3c:	432b      	orrs	r3, r5
 8001f3e:	608b      	str	r3, [r1, #8]
}
 8001f40:	e793      	b.n	8001e6a <HAL_ADC_Init+0xae>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f42:	6911      	ldr	r1, [r2, #16]
 8001f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f46:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001f48:	f36f 018a 	bfc	r1, #2, #9
 8001f4c:	432b      	orrs	r3, r5
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001f56:	430b      	orrs	r3, r1
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6113      	str	r3, [r2, #16]
 8001f5e:	e7bd      	b.n	8001edc <HAL_ADC_Init+0x120>
 8001f60:	20000000 	.word	0x20000000
 8001f64:	053e2d63 	.word	0x053e2d63
 8001f68:	42028000 	.word	0x42028000
 8001f6c:	42028100 	.word	0x42028100
 8001f70:	fff04007 	.word	0xfff04007
 8001f74:	42028300 	.word	0x42028300

08001f78 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f78:	4a37      	ldr	r2, [pc, #220]	@ (8002058 <HAL_ADC_PollForConversion+0xe0>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f7e:	6944      	ldr	r4, [r0, #20]
 8001f80:	6896      	ldr	r6, [r2, #8]
 8001f82:	2c08      	cmp	r4, #8
{
 8001f84:	4605      	mov	r5, r0
 8001f86:	460f      	mov	r7, r1
 8001f88:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f8c:	d014      	beq.n	8001fb8 <HAL_ADC_PollForConversion+0x40>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f8e:	f240 2321 	movw	r3, #545	@ 0x221
 8001f92:	40f3      	lsrs	r3, r6
 8001f94:	07d9      	lsls	r1, r3, #31
 8001f96:	d40a      	bmi.n	8001fae <HAL_ADC_PollForConversion+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f98:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f9a:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_ADC_PollForConversion+0x3e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	f043 0320 	orr.w	r3, r3, #32
 8001fa8:	65ab      	str	r3, [r5, #88]	@ 0x58
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8001faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fae:	6803      	ldr	r3, [r0, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	07da      	lsls	r2, r3, #31
 8001fb4:	d4f4      	bmi.n	8001fa0 <HAL_ADC_PollForConversion+0x28>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fb6:	2404      	movs	r4, #4
  tickstart = HAL_GetTick();
 8001fb8:	f7ff fefa 	bl	8001db0 <HAL_GetTick>
 8001fbc:	1c7b      	adds	r3, r7, #1
 8001fbe:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fc0:	682a      	ldr	r2, [r5, #0]
 8001fc2:	d133      	bne.n	800202c <HAL_ADC_PollForConversion+0xb4>
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	4223      	tst	r3, r4
 8001fc8:	d0fc      	beq.n	8001fc4 <HAL_ADC_PollForConversion+0x4c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fca:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd0:	65ab      	str	r3, [r5, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd2:	68d3      	ldr	r3, [r2, #12]
 8001fd4:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 8001fd8:	d10f      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x82>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fda:	7e6b      	ldrb	r3, [r5, #25]
 8001fdc:	b96b      	cbnz	r3, 8001ffa <HAL_ADC_PollForConversion+0x82>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	071f      	lsls	r7, r3, #28
 8001fe2:	d50a      	bpl.n	8001ffa <HAL_ADC_PollForConversion+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fe6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fea:	65ab      	str	r3, [r5, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fec:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fee:	04d8      	lsls	r0, r3, #19
 8001ff0:	d403      	bmi.n	8001ffa <HAL_ADC_PollForConversion+0x82>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	65ab      	str	r3, [r5, #88]	@ 0x58
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_ADC_PollForConversion+0xe4>)
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d009      	beq.n	8002014 <HAL_ADC_PollForConversion+0x9c>
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002000:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002002:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002004:	d00f      	beq.n	8002026 <HAL_ADC_PollForConversion+0xae>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002006:	045b      	lsls	r3, r3, #17
 8002008:	d401      	bmi.n	800200e <HAL_ADC_PollForConversion+0x96>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800200a:	230c      	movs	r3, #12
 800200c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800200e:	2000      	movs	r0, #0
}
 8002010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002014:	f240 2321 	movw	r3, #545	@ 0x221
 8002018:	40f3      	lsrs	r3, r6
 800201a:	07d9      	lsls	r1, r3, #31
 800201c:	d4f0      	bmi.n	8002000 <HAL_ADC_PollForConversion+0x88>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_ADC_PollForConversion+0xe8>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002020:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002022:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002024:	d1ef      	bne.n	8002006 <HAL_ADC_PollForConversion+0x8e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002026:	6014      	str	r4, [r2, #0]
 8002028:	e7f1      	b.n	800200e <HAL_ADC_PollForConversion+0x96>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800202a:	b14f      	cbz	r7, 8002040 <HAL_ADC_PollForConversion+0xc8>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	4223      	tst	r3, r4
 8002030:	d1cb      	bne.n	8001fca <HAL_ADC_PollForConversion+0x52>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002032:	f7ff febd 	bl	8001db0 <HAL_GetTick>
 8002036:	eba0 0308 	sub.w	r3, r0, r8
 800203a:	42bb      	cmp	r3, r7
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800203c:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800203e:	d9f4      	bls.n	800202a <HAL_ADC_PollForConversion+0xb2>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	4023      	ands	r3, r4
 8002044:	d1f2      	bne.n	800202c <HAL_ADC_PollForConversion+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002046:	6daa      	ldr	r2, [r5, #88]	@ 0x58
          return HAL_TIMEOUT;
 8002048:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800204a:	f042 0204 	orr.w	r2, r2, #4
 800204e:	65aa      	str	r2, [r5, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8002050:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8002054:	e7dc      	b.n	8002010 <HAL_ADC_PollForConversion+0x98>
 8002056:	bf00      	nop
 8002058:	42028300 	.word	0x42028300
 800205c:	42028100 	.word	0x42028100
 8002060:	42028000 	.word	0x42028000

08002064 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800206c:	2200      	movs	r2, #0
{
 800206e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002072:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002074:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002076:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 800207a:	2a01      	cmp	r2, #1
 800207c:	f000 812f 	beq.w	80022de <HAL_ADC_ConfigChannel+0x272>
 8002080:	4603      	mov	r3, r0
 8002082:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002084:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002086:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208a:	6894      	ldr	r4, [r2, #8]
 800208c:	0764      	lsls	r4, r4, #29
 800208e:	d509      	bpl.n	80020a4 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002090:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 800209e:	b002      	add	sp, #8
 80020a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80020a4:	6808      	ldr	r0, [r1, #0]
 80020a6:	2801      	cmp	r0, #1
 80020a8:	f000 80ae 	beq.w	8002208 <HAL_ADC_ConfigChannel+0x19c>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80020ac:	4cac      	ldr	r4, [pc, #688]	@ (8002360 <HAL_ADC_ConfigChannel+0x2f4>)
 80020ae:	42a0      	cmp	r0, r4
 80020b0:	f000 80a5 	beq.w	80021fe <HAL_ADC_ConfigChannel+0x192>
  MODIFY_REG(*preg,
 80020b4:	f04f 0c1f 	mov.w	ip, #31
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020b8:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020ba:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 80020be:	ea4f 1e94 	mov.w	lr, r4, lsr #6
 80020c2:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80020c6:	ea04 040c 	and.w	r4, r4, ip
 80020ca:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80020ce:	40a0      	lsls	r0, r4
 80020d0:	fa0c fc04 	lsl.w	ip, ip, r4
 80020d4:	f855 400e 	ldr.w	r4, [r5, lr]
 80020d8:	ea24 0c0c 	bic.w	ip, r4, ip
 80020dc:	ea4c 0000 	orr.w	r0, ip, r0
 80020e0:	f845 000e 	str.w	r0, [r5, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020e4:	6890      	ldr	r0, [r2, #8]
 80020e6:	0740      	lsls	r0, r0, #29
 80020e8:	d537      	bpl.n	800215a <HAL_ADC_ConfigChannel+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ea:	6890      	ldr	r0, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020ec:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ee:	6894      	ldr	r4, [r2, #8]
 80020f0:	07e6      	lsls	r6, r4, #31
 80020f2:	d412      	bmi.n	800211a <HAL_ADC_ConfigChannel+0xae>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020f4:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80020f6:	4c9b      	ldr	r4, [pc, #620]	@ (8002364 <HAL_ADC_ConfigChannel+0x2f8>)
 80020f8:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 80020fc:	f006 0718 	and.w	r7, r6, #24
 8002100:	40fc      	lsrs	r4, r7
 8002102:	f3c0 0713 	ubfx	r7, r0, #0, #20
 8002106:	4004      	ands	r4, r0
 8002108:	ea25 0507 	bic.w	r5, r5, r7
 800210c:	432c      	orrs	r4, r5
 800210e:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002112:	4c95      	ldr	r4, [pc, #596]	@ (8002368 <HAL_ADC_ConfigChannel+0x2fc>)
 8002114:	42a6      	cmp	r6, r4
 8002116:	f000 809f 	beq.w	8002258 <HAL_ADC_ConfigChannel+0x1ec>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800211a:	4994      	ldr	r1, [pc, #592]	@ (800236c <HAL_ADC_ConfigChannel+0x300>)
 800211c:	4208      	tst	r0, r1
 800211e:	d01a      	beq.n	8002156 <HAL_ADC_ConfigChannel+0xea>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002120:	4c93      	ldr	r4, [pc, #588]	@ (8002370 <HAL_ADC_ConfigChannel+0x304>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002122:	4d94      	ldr	r5, [pc, #592]	@ (8002374 <HAL_ADC_ConfigChannel+0x308>)
 8002124:	68a1      	ldr	r1, [r4, #8]
 8002126:	42a8      	cmp	r0, r5
 8002128:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 800212c:	d074      	beq.n	8002218 <HAL_ADC_ConfigChannel+0x1ac>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800212e:	4d92      	ldr	r5, [pc, #584]	@ (8002378 <HAL_ADC_ConfigChannel+0x30c>)
 8002130:	42a8      	cmp	r0, r5
 8002132:	f000 80d8 	beq.w	80022e6 <HAL_ADC_ConfigChannel+0x27a>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002136:	4d91      	ldr	r5, [pc, #580]	@ (800237c <HAL_ADC_ConfigChannel+0x310>)
 8002138:	42a8      	cmp	r0, r5
 800213a:	f000 80e3 	beq.w	8002304 <HAL_ADC_ConfigChannel+0x298>
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800213e:	4990      	ldr	r1, [pc, #576]	@ (8002380 <HAL_ADC_ConfigChannel+0x314>)
 8002140:	4288      	cmp	r0, r1
 8002142:	d108      	bne.n	8002156 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002144:	498f      	ldr	r1, [pc, #572]	@ (8002384 <HAL_ADC_ConfigChannel+0x318>)
 8002146:	428a      	cmp	r2, r1
 8002148:	d005      	beq.n	8002156 <HAL_ADC_ConfigChannel+0xea>
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 800214a:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 800214e:	f041 0101 	orr.w	r1, r1, #1
 8002152:	f8c2 10c8 	str.w	r1, [r2, #200]	@ 0xc8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002156:	2000      	movs	r0, #0
 8002158:	e79e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x2c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800215a:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800215c:	6808      	ldr	r0, [r1, #0]
 800215e:	0727      	lsls	r7, r4, #28
 8002160:	d4c5      	bmi.n	80020ee <HAL_ADC_ConfigChannel+0x82>
  MODIFY_REG(*preg,
 8002162:	2407      	movs	r4, #7
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002164:	688d      	ldr	r5, [r1, #8]
 8002166:	f3c0 5604 	ubfx	r6, r0, #20, #5
 800216a:	40b4      	lsls	r4, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800216c:	0dc0      	lsrs	r0, r0, #23
 800216e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  MODIFY_REG(*preg,
 8002172:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002176:	f000 0004 	and.w	r0, r0, #4
 800217a:	f000 80e7 	beq.w	800234c <HAL_ADC_ConfigChannel+0x2e0>
 800217e:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8002182:	40b5      	lsls	r5, r6
 8002184:	583e      	ldr	r6, [r7, r0]
 8002186:	4034      	ands	r4, r6
 8002188:	432c      	orrs	r4, r5
 800218a:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800218c:	6950      	ldr	r0, [r2, #20]
 800218e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002192:	6150      	str	r0, [r2, #20]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002194:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002196:	e9d1 7404 	ldrd	r7, r4, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800219a:	2f04      	cmp	r7, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800219c:	4606      	mov	r6, r0
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800219e:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021a0:	f000 80fa 	beq.w	8002398 <HAL_ADC_ConfigChannel+0x32c>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021a4:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80021a8:	006d      	lsls	r5, r5, #1
 80021aa:	40ac      	lsls	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ac:	f102 0560 	add.w	r5, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 80021b0:	f855 c027 	ldr.w	ip, [r5, r7, lsl #2]
 80021b4:	4e74      	ldr	r6, [pc, #464]	@ (8002388 <HAL_ADC_ConfigChannel+0x31c>)
 80021b6:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80021ba:	ea0c 0606 	and.w	r6, ip, r6
 80021be:	4306      	orrs	r6, r0
 80021c0:	4334      	orrs	r4, r6
 80021c2:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80021c6:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ca:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(*preg,
 80021cc:	698e      	ldr	r6, [r1, #24]
 80021ce:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80021d2:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80021d6:	4330      	orrs	r0, r6
 80021d8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021dc:	7f0c      	ldrb	r4, [r1, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021de:	690e      	ldr	r6, [r1, #16]
 80021e0:	f1a4 0401 	sub.w	r4, r4, #1
 80021e4:	fab4 f484 	clz	r4, r4
  MODIFY_REG(*preg,
 80021e8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80021ec:	0964      	lsrs	r4, r4, #5
 80021ee:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80021f2:	ea40 6044 	orr.w	r0, r0, r4, lsl #25
 80021f6:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021fa:	6808      	ldr	r0, [r1, #0]
}
 80021fc:	e777      	b.n	80020ee <HAL_ADC_ConfigChannel+0x82>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80021fe:	4c5a      	ldr	r4, [pc, #360]	@ (8002368 <HAL_ADC_ConfigChannel+0x2fc>)
 8002200:	68cd      	ldr	r5, [r1, #12]
 8002202:	42a5      	cmp	r5, r4
 8002204:	f47f af56 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x48>
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8002208:	4d5e      	ldr	r5, [pc, #376]	@ (8002384 <HAL_ADC_ConfigChannel+0x318>)
 800220a:	f8d5 40c8 	ldr.w	r4, [r5, #200]	@ 0xc8
 800220e:	f044 0401 	orr.w	r4, r4, #1
 8002212:	f8c5 40c8 	str.w	r4, [r5, #200]	@ 0xc8
}
 8002216:	e74d      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x48>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002218:	020d      	lsls	r5, r1, #8
 800221a:	d49c      	bmi.n	8002156 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800221c:	4959      	ldr	r1, [pc, #356]	@ (8002384 <HAL_ADC_ConfigChannel+0x318>)
 800221e:	428a      	cmp	r2, r1
 8002220:	d199      	bne.n	8002156 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002222:	68a2      	ldr	r2, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002224:	4959      	ldr	r1, [pc, #356]	@ (800238c <HAL_ADC_ConfigChannel+0x320>)
 8002226:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800222a:	4332      	orrs	r2, r6
 800222c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002230:	60a2      	str	r2, [r4, #8]
 8002232:	680a      	ldr	r2, [r1, #0]
 8002234:	4956      	ldr	r1, [pc, #344]	@ (8002390 <HAL_ADC_ConfigChannel+0x324>)
 8002236:	0992      	lsrs	r2, r2, #6
 8002238:	fba1 1202 	umull	r1, r2, r1, r2
 800223c:	0992      	lsrs	r2, r2, #6
 800223e:	3201      	adds	r2, #1
 8002240:	0052      	lsls	r2, r2, #1
 8002242:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002244:	9a01      	ldr	r2, [sp, #4]
 8002246:	2a00      	cmp	r2, #0
 8002248:	d085      	beq.n	8002156 <HAL_ADC_ConfigChannel+0xea>
            wait_loop_index--;
 800224a:	9a01      	ldr	r2, [sp, #4]
 800224c:	3a01      	subs	r2, #1
 800224e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002250:	9a01      	ldr	r2, [sp, #4]
 8002252:	2a00      	cmp	r2, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1de>
 8002256:	e77e      	b.n	8002156 <HAL_ADC_ConfigChannel+0xea>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002258:	2f00      	cmp	r7, #0
 800225a:	d062      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x2b6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002260:	2c00      	cmp	r4, #0
 8002262:	f000 80c4 	beq.w	80023ee <HAL_ADC_ConfigChannel+0x382>
  return __builtin_clz(value);
 8002266:	fab4 f684 	clz	r6, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226a:	3601      	adds	r6, #1
 800226c:	f006 051f 	and.w	r5, r6, #31
 8002270:	2d09      	cmp	r5, #9
 8002272:	f240 80bc 	bls.w	80023ee <HAL_ADC_ConfigChannel+0x382>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	fa90 f0a0 	rbit	r0, r0
  return __builtin_clz(value);
 800227a:	fab4 f584 	clz	r5, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227e:	06b4      	lsls	r4, r6, #26
 8002280:	2601      	movs	r6, #1
 8002282:	4435      	add	r5, r6
 8002284:	f005 051f 	and.w	r5, r5, #31
 8002288:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800228c:	fa06 f505 	lsl.w	r5, r6, r5
 8002290:	432c      	orrs	r4, r5
  if (value == 0U)
 8002292:	2800      	cmp	r0, #0
 8002294:	f000 8153 	beq.w	800253e <HAL_ADC_ConfigChannel+0x4d2>
  return __builtin_clz(value);
 8002298:	fab0 f580 	clz	r5, r0
 800229c:	f06f 061d 	mvn.w	r6, #29
 80022a0:	2003      	movs	r0, #3
 80022a2:	3501      	adds	r5, #1
 80022a4:	f005 051f 	and.w	r5, r5, #31
 80022a8:	fb10 6005 	smlabb	r0, r0, r5, r6
 80022ac:	0500      	lsls	r0, r0, #20
 80022ae:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b2:	4320      	orrs	r0, r4
  MODIFY_REG(*preg,
 80022b4:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022b6:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80022b8:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022ba:	f005 0504 	and.w	r5, r5, #4
 80022be:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80022c2:	f85c 4005 	ldr.w	r4, [ip, r5]
 80022c6:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80022ca:	4086      	lsls	r6, r0
 80022cc:	fa07 f000 	lsl.w	r0, r7, r0
 80022d0:	ea24 0000 	bic.w	r0, r4, r0
 80022d4:	4330      	orrs	r0, r6
 80022d6:	f84c 0005 	str.w	r0, [ip, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022da:	6808      	ldr	r0, [r1, #0]
}
 80022dc:	e71d      	b.n	800211a <HAL_ADC_ConfigChannel+0xae>
  __HAL_LOCK(hadc);
 80022de:	2002      	movs	r0, #2
}
 80022e0:	b002      	add	sp, #8
 80022e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022e6:	01c8      	lsls	r0, r1, #7
 80022e8:	f53f af35 	bmi.w	8002156 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ec:	4929      	ldr	r1, [pc, #164]	@ (8002394 <HAL_ADC_ConfigChannel+0x328>)
 80022ee:	428a      	cmp	r2, r1
 80022f0:	f47f af31 	bne.w	8002156 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022f4:	68a2      	ldr	r2, [r4, #8]
 80022f6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80022fa:	4332      	orrs	r2, r6
 80022fc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002300:	60a2      	str	r2, [r4, #8]
}
 8002302:	e728      	b.n	8002156 <HAL_ADC_ConfigChannel+0xea>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002304:	0249      	lsls	r1, r1, #9
 8002306:	f53f af26 	bmi.w	8002156 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VREFINT_INSTANCE(hadc))
 800230a:	491e      	ldr	r1, [pc, #120]	@ (8002384 <HAL_ADC_ConfigChannel+0x318>)
 800230c:	428a      	cmp	r2, r1
 800230e:	f47f af22 	bne.w	8002156 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002312:	68a2      	ldr	r2, [r4, #8]
 8002314:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002318:	4332      	orrs	r2, r6
 800231a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800231e:	60a2      	str	r2, [r4, #8]
}
 8002320:	e719      	b.n	8002156 <HAL_ADC_ConfigChannel+0xea>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002322:	2401      	movs	r4, #1
 8002324:	0e80      	lsrs	r0, r0, #26
 8002326:	3001      	adds	r0, #1
 8002328:	f000 061f 	and.w	r6, r0, #31
 800232c:	0680      	lsls	r0, r0, #26
 800232e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002332:	40b4      	lsls	r4, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002334:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002336:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800233a:	ea44 0400 	orr.w	r4, r4, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233e:	d97b      	bls.n	8002438 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002340:	f1a5 001e 	sub.w	r0, r5, #30
 8002344:	0500      	lsls	r0, r0, #20
 8002346:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 800234a:	e7b2      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x246>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800234c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8002350:	5835      	ldr	r5, [r6, r0]
 8002352:	402c      	ands	r4, r5
 8002354:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002356:	6950      	ldr	r0, [r2, #20]
 8002358:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800235c:	6150      	str	r0, [r2, #20]
}
 800235e:	e719      	b.n	8002194 <HAL_ADC_ConfigChannel+0x128>
 8002360:	04300002 	.word	0x04300002
 8002364:	000fffff 	.word	0x000fffff
 8002368:	407f0000 	.word	0x407f0000
 800236c:	80080000 	.word	0x80080000
 8002370:	42028300 	.word	0x42028300
 8002374:	c3210000 	.word	0xc3210000
 8002378:	43290000 	.word	0x43290000
 800237c:	c7520000 	.word	0xc7520000
 8002380:	475a0000 	.word	0x475a0000
 8002384:	42028000 	.word	0x42028000
 8002388:	03fff000 	.word	0x03fff000
 800238c:	20000000 	.word	0x20000000
 8002390:	053e2d63 	.word	0x053e2d63
 8002394:	42028100 	.word	0x42028100
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002398:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 800239a:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800239c:	f3c0 0513 	ubfx	r5, r0, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023a0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a4:	2d00      	cmp	r5, #0
 80023a6:	d14b      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x3d4>
 80023a8:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ac:	4284      	cmp	r4, r0
 80023ae:	d07f      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x444>
 80023b0:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80023b2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b4:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80023bc:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 80023c0:	4285      	cmp	r5, r0
 80023c2:	f000 80a0 	beq.w	8002506 <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023c6:	68a5      	ldr	r5, [r4, #8]
 80023c8:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ca:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ce:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80023d2:	4285      	cmp	r5, r0
 80023d4:	f000 8081 	beq.w	80024da <HAL_ADC_ConfigChannel+0x46e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023d8:	68e5      	ldr	r5, [r4, #12]
 80023da:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023dc:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e0:	f3c5 6484 	ubfx	r4, r5, #26, #5
 80023e4:	42a0      	cmp	r0, r4
 80023e6:	f000 80a4 	beq.w	8002532 <HAL_ADC_ConfigChannel+0x4c6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023ea:	4630      	mov	r0, r6
 80023ec:	e67f      	b.n	80020ee <HAL_ADC_ConfigChannel+0x82>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80023f2:	2c00      	cmp	r4, #0
 80023f4:	f000 80b4 	beq.w	8002560 <HAL_ADC_ConfigChannel+0x4f4>
  return __builtin_clz(value);
 80023f8:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023fc:	3401      	adds	r4, #1
 80023fe:	06a4      	lsls	r4, r4, #26
 8002400:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002408:	2d00      	cmp	r5, #0
 800240a:	f000 80a7 	beq.w	800255c <HAL_ADC_ConfigChannel+0x4f0>
 800240e:	2601      	movs	r6, #1
  return __builtin_clz(value);
 8002410:	fab5 f585 	clz	r5, r5
 8002414:	4435      	add	r5, r6
 8002416:	f005 051f 	and.w	r5, r5, #31
 800241a:	fa06 f505 	lsl.w	r5, r6, r5
 800241e:	432c      	orrs	r4, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002424:	2800      	cmp	r0, #0
 8002426:	f000 8096 	beq.w	8002556 <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 800242a:	fab0 f580 	clz	r5, r0
 800242e:	3501      	adds	r5, #1
 8002430:	f005 051f 	and.w	r5, r5, #31
 8002434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002438:	052d      	lsls	r5, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243a:	ea45 0004 	orr.w	r0, r5, r4
 800243e:	e739      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x248>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002444:	b11d      	cbz	r5, 800244e <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8002446:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244a:	42ac      	cmp	r4, r5
 800244c:	d030      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800244e:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8002450:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002452:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002456:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800245a:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 800245e:	f104 0c08 	add.w	ip, r4, #8
 8002462:	46e0      	mov	r8, ip
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	fa96 f7a6 	rbit	r7, r6
  if (value == 0U)
 8002468:	2f00      	cmp	r7, #0
 800246a:	d06f      	beq.n	800254c <HAL_ADC_ConfigChannel+0x4e0>
  return __builtin_clz(value);
 800246c:	fab7 f787 	clz	r7, r7
 8002470:	42af      	cmp	r7, r5
 8002472:	d04a      	beq.n	800250a <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002474:	f8dc 5000 	ldr.w	r5, [ip]
 8002478:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800247c:	f3c5 6584 	ubfx	r5, r5, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002480:	f104 070c 	add.w	r7, r4, #12
 8002484:	46b8      	mov	r8, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	fa96 fea6 	rbit	lr, r6
  if (value == 0U)
 800248a:	f1be 0f00 	cmp.w	lr, #0
 800248e:	d058      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x4d6>
  return __builtin_clz(value);
 8002490:	fabe fe8e 	clz	lr, lr
 8002494:	45ae      	cmp	lr, r5
 8002496:	d022      	beq.n	80024de <HAL_ADC_ConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002498:	683c      	ldr	r4, [r7, #0]
 800249a:	683c      	ldr	r4, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249c:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	fa96 f5a6 	rbit	r5, r6
  if (value == 0U)
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	f43f ae22 	beq.w	80020ee <HAL_ADC_ConfigChannel+0x82>
  return __builtin_clz(value);
 80024aa:	fab5 f085 	clz	r0, r5
 80024ae:	e799      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x378>
  MODIFY_REG(*preg,
 80024b0:	4614      	mov	r4, r2
 80024b2:	6e10      	ldr	r0, [r2, #96]	@ 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b4:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
  MODIFY_REG(*preg,
 80024b8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80024bc:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c0:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024c2:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80024c4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80024c6:	f3c6 0713 	ubfx	r7, r6, #0, #20
 80024ca:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024cc:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d0:	2f00      	cmp	r7, #0
 80024d2:	d1c4      	bne.n	800245e <HAL_ADC_ConfigChannel+0x3f2>
 80024d4:	f3c6 6084 	ubfx	r0, r6, #26, #5
 80024d8:	e772      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x354>
 80024da:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80024de:	f8dc 0000 	ldr.w	r0, [ip]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e2:	4647      	mov	r7, r8
  MODIFY_REG(*preg,
 80024e4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80024e8:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ec:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024ee:	68e0      	ldr	r0, [r4, #12]
 80024f0:	68e4      	ldr	r4, [r4, #12]
 80024f2:	f3c6 0513 	ubfx	r5, r6, #0, #20
 80024f6:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	d1cf      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x434>
 8002500:	f3c6 6084 	ubfx	r0, r6, #26, #5
 8002504:	e76e      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x378>
 8002506:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 800250a:	f8de 0000 	ldr.w	r0, [lr]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	46c4      	mov	ip, r8
  MODIFY_REG(*preg,
 8002510:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002514:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002518:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800251a:	68a0      	ldr	r0, [r4, #8]
 800251c:	68a5      	ldr	r5, [r4, #8]
 800251e:	f3c6 0713 	ubfx	r7, r6, #0, #20
 8002522:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002524:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002528:	2f00      	cmp	r7, #0
 800252a:	d1a9      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x414>
 800252c:	f3c6 6084 	ubfx	r0, r6, #26, #5
 8002530:	e74f      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002538:	6038      	str	r0, [r7, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800253a:	6808      	ldr	r0, [r1, #0]
}
 800253c:	e5d7      	b.n	80020ee <HAL_ADC_ConfigChannel+0x82>
 800253e:	480a      	ldr	r0, [pc, #40]	@ (8002568 <HAL_ADC_ConfigChannel+0x4fc>)
 8002540:	e6b7      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002542:	68e5      	ldr	r5, [r4, #12]
 8002544:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002546:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800254a:	e7a9      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x434>
 800254c:	68a5      	ldr	r5, [r4, #8]
 800254e:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002550:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002554:	e794      	b.n	8002480 <HAL_ADC_ConfigChannel+0x414>
 8002556:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 800255a:	e76e      	b.n	800243a <HAL_ADC_ConfigChannel+0x3ce>
 800255c:	2502      	movs	r5, #2
 800255e:	e75e      	b.n	800241e <HAL_ADC_ConfigChannel+0x3b2>
 8002560:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002564:	e74e      	b.n	8002404 <HAL_ADC_ConfigChannel+0x398>
 8002566:	bf00      	nop
 8002568:	fe500000 	.word	0xfe500000

0800256c <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800256c:	6803      	ldr	r3, [r0, #0]
{
 800256e:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	4604      	mov	r4, r0
 8002574:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002578:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800257a:	d101      	bne.n	8002580 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800257c:	0716      	lsls	r6, r2, #28
 800257e:	d53c      	bpl.n	80025fa <ADC_ConversionStop+0x8e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	0195      	lsls	r5, r2, #6
 8002584:	d504      	bpl.n	8002590 <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002586:	f240 1201 	movw	r2, #257	@ 0x101
 800258a:	8b20      	ldrh	r0, [r4, #24]
 800258c:	4290      	cmp	r0, r2
 800258e:	d045      	beq.n	800261c <ADC_ConversionStop+0xb0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002590:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	d033      	beq.n	80025fe <ADC_ConversionStop+0x92>
 8002596:	0750      	lsls	r0, r2, #29
 8002598:	d502      	bpl.n	80025a0 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	0792      	lsls	r2, r2, #30
 800259e:	d559      	bpl.n	8002654 <ADC_ConversionStop+0xe8>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025a0:	2901      	cmp	r1, #1
 80025a2:	d055      	beq.n	8002650 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	0710      	lsls	r0, r2, #28
 80025a8:	d50a      	bpl.n	80025c0 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	0792      	lsls	r2, r2, #30
 80025ae:	d407      	bmi.n	80025c0 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025b6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80025ba:	f042 0220 	orr.w	r2, r2, #32
 80025be:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025c0:	2903      	cmp	r1, #3
 80025c2:	d145      	bne.n	8002650 <ADC_ConversionStop+0xe4>
 80025c4:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025c6:	f7ff fbf3 	bl	8001db0 <HAL_GetTick>
 80025ca:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	421d      	tst	r5, r3
 80025d2:	d012      	beq.n	80025fa <ADC_ConversionStop+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025d4:	f7ff fbec 	bl	8001db0 <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	2805      	cmp	r0, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025dc:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025de:	d9f6      	bls.n	80025ce <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	422a      	tst	r2, r5
 80025e4:	d0f3      	beq.n	80025ce <ADC_ConversionStop+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	65e3      	str	r3, [r4, #92]	@ 0x5c

  }

  /* Return HAL status */
  return HAL_OK;
}
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80025fa:	2000      	movs	r0, #0
}
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025fe:	0716      	lsls	r6, r2, #28
 8002600:	d50a      	bpl.n	8002618 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	0795      	lsls	r5, r2, #30
 8002606:	d407      	bmi.n	8002618 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800260e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002612:	f042 0220 	orr.w	r2, r2, #32
 8002616:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002618:	2508      	movs	r5, #8
 800261a:	e7d4      	b.n	80025c6 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	0650      	lsls	r0, r2, #25
 8002620:	d406      	bmi.n	8002630 <ADC_ConversionStop+0xc4>
 8002622:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <ADC_ConversionStop+0xfc>)
 8002624:	e001      	b.n	800262a <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002626:	3a01      	subs	r2, #1
 8002628:	d0dd      	beq.n	80025e6 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	0649      	lsls	r1, r1, #25
 800262e:	d5fa      	bpl.n	8002626 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002630:	2240      	movs	r2, #64	@ 0x40
 8002632:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	0756      	lsls	r6, r2, #29
 8002638:	d50a      	bpl.n	8002650 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	0795      	lsls	r5, r2, #30
 800263e:	d407      	bmi.n	8002650 <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002646:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800264a:	f042 0210 	orr.w	r2, r2, #16
 800264e:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002650:	2504      	movs	r5, #4
 8002652:	e7b8      	b.n	80025c6 <ADC_ConversionStop+0x5a>
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800265a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800265e:	f042 0210 	orr.w	r2, r2, #16
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	e79c      	b.n	80025a0 <ADC_ConversionStop+0x34>
 8002666:	bf00      	nop
 8002668:	a3400000 	.word	0xa3400000

0800266c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
{
 800266e:	b570      	push	{r4, r5, r6, lr}
 8002670:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002672:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002674:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	07d2      	lsls	r2, r2, #31
 800267a:	d42c      	bmi.n	80026d6 <ADC_Enable+0x6a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	4a27      	ldr	r2, [pc, #156]	@ (800271c <ADC_Enable+0xb0>)
 8002680:	4604      	mov	r4, r0
 8002682:	4211      	tst	r1, r2
 8002684:	d12a      	bne.n	80026dc <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8002686:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002688:	4925      	ldr	r1, [pc, #148]	@ (8002720 <ADC_Enable+0xb4>)
  MODIFY_REG(ADCx->CR,
 800268a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800268e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002698:	688b      	ldr	r3, [r1, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	d429      	bmi.n	80026f2 <ADC_Enable+0x86>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800269e:	f7ff fb87 	bl	8001db0 <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80026a4:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	07d6      	lsls	r6, r2, #31
 80026aa:	d414      	bmi.n	80026d6 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 80026ac:	4e1d      	ldr	r6, [pc, #116]	@ (8002724 <ADC_Enable+0xb8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	07d0      	lsls	r0, r2, #31
 80026b2:	d404      	bmi.n	80026be <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4032      	ands	r2, r6
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026be:	f7ff fb77 	bl	8001db0 <HAL_GetTick>
 80026c2:	1b43      	subs	r3, r0, r5
 80026c4:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026c8:	d902      	bls.n	80026d0 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	07d1      	lsls	r1, r2, #31
 80026ce:	d505      	bpl.n	80026dc <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	07d2      	lsls	r2, r2, #31
 80026d4:	d5eb      	bpl.n	80026ae <ADC_Enable+0x42>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026d6:	2000      	movs	r0, #0
}
 80026d8:	b002      	add	sp, #8
 80026da:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026dc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80026e0:	f043 0310 	orr.w	r3, r3, #16
 80026e4:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 80026ee:	b002      	add	sp, #8
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <ADC_Enable+0xbc>)
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <ADC_Enable+0xc0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	3301      	adds	r3, #1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0c8      	beq.n	800269e <ADC_Enable+0x32>
        wait_loop_index--;
 800270c:	9b01      	ldr	r3, [sp, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002712:	9b01      	ldr	r3, [sp, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <ADC_Enable+0xa0>
 8002718:	e7c1      	b.n	800269e <ADC_Enable+0x32>
 800271a:	bf00      	nop
 800271c:	8000003f 	.word	0x8000003f
 8002720:	42028300 	.word	0x42028300
 8002724:	7fffffc0 	.word	0x7fffffc0
 8002728:	20000000 	.word	0x20000000
 800272c:	053e2d63 	.word	0x053e2d63

08002730 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002730:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <HAL_ADC_Start+0xc8>)
{
 8002732:	b570      	push	{r4, r5, r6, lr}
 8002734:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002736:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002738:	689d      	ldr	r5, [r3, #8]
 800273a:	f015 0504 	ands.w	r5, r5, #4
 800273e:	d140      	bne.n	80027c2 <HAL_ADC_Start+0x92>
    __HAL_LOCK(hadc);
 8002740:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002744:	4604      	mov	r4, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d03b      	beq.n	80027c2 <HAL_ADC_Start+0x92>
 800274a:	2301      	movs	r3, #1
 800274c:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002750:	f7ff ff8c 	bl	800266c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002754:	2800      	cmp	r0, #0
 8002756:	d136      	bne.n	80027c6 <HAL_ADC_Start+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8002758:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275a:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800275c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002768:	65a3      	str	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276a:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_ADC_Start+0xcc>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800276c:	f006 061f 	and.w	r6, r6, #31
 8002770:	429a      	cmp	r2, r3
 8002772:	d02b      	beq.n	80027cc <HAL_ADC_Start+0x9c>
 8002774:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002776:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002778:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800277c:	65a3      	str	r3, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002780:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002784:	bf1c      	itt	ne
 8002786:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
 8002788:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800278c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800278e:	231c      	movs	r3, #28
 8002790:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002792:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002794:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 8002796:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800279a:	d01b      	beq.n	80027d4 <HAL_ADC_Start+0xa4>
 800279c:	f240 2321 	movw	r3, #545	@ 0x221
 80027a0:	40f3      	lsrs	r3, r6
 80027a2:	07dd      	lsls	r5, r3, #31
 80027a4:	d416      	bmi.n	80027d4 <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ac:	65a3      	str	r3, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027ae:	68cb      	ldr	r3, [r1, #12]
 80027b0:	019b      	lsls	r3, r3, #6
 80027b2:	d505      	bpl.n	80027c0 <HAL_ADC_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027be:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80027c2:	2002      	movs	r0, #2
}
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80027c6:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027cc:	490c      	ldr	r1, [pc, #48]	@ (8002800 <HAL_ADC_Start+0xd0>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ce:	2e00      	cmp	r6, #0
 80027d0:	d1d5      	bne.n	800277e <HAL_ADC_Start+0x4e>
 80027d2:	e7d0      	b.n	8002776 <HAL_ADC_Start+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027d4:	68d3      	ldr	r3, [r2, #12]
 80027d6:	0199      	lsls	r1, r3, #6
 80027d8:	d505      	bpl.n	80027e6 <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e4:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 80027e6:	6893      	ldr	r3, [r2, #8]
 80027e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6093      	str	r3, [r2, #8]
}
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	42028300 	.word	0x42028300
 80027fc:	42028100 	.word	0x42028100
 8002800:	42028000 	.word	0x42028000

08002804 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002804:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002806:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	0795      	lsls	r5, r2, #30
 800280c:	d502      	bpl.n	8002814 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800280e:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002810:	2000      	movs	r0, #0
}
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	07d4      	lsls	r4, r2, #31
 8002818:	d5fa      	bpl.n	8002810 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4604      	mov	r4, r0
 800281e:	f002 020d 	and.w	r2, r2, #13
 8002822:	2a01      	cmp	r2, #1
 8002824:	d009      	beq.n	800283a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	f043 0310 	orr.w	r3, r3, #16
 800282e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002830:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8002838:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800283a:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->CR,
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002842:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002846:	f042 0202 	orr.w	r2, r2, #2
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800284e:	f7ff faaf 	bl	8001db0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002852:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002854:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	07d9      	lsls	r1, r3, #31
 800285a:	d403      	bmi.n	8002864 <ADC_Disable+0x60>
 800285c:	e7d8      	b.n	8002810 <ADC_Disable+0xc>
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	07db      	lsls	r3, r3, #31
 8002862:	d5d5      	bpl.n	8002810 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002864:	f7ff faa4 	bl	8001db0 <HAL_GetTick>
 8002868:	1b40      	subs	r0, r0, r5
 800286a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800286c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800286e:	d9f6      	bls.n	800285e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	07d2      	lsls	r2, r2, #31
 8002874:	d5f3      	bpl.n	800285e <ADC_Disable+0x5a>
 8002876:	e7d6      	b.n	8002826 <ADC_Disable+0x22>

08002878 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002878:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800287c:	2b01      	cmp	r3, #1
 800287e:	d01d      	beq.n	80028bc <HAL_ADC_Stop+0x44>
 8002880:	2301      	movs	r3, #1
{
 8002882:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002884:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8002886:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800288a:	4604      	mov	r4, r0
 800288c:	f7ff fe6e 	bl	800256c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002890:	b118      	cbz	r0, 800289a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8002892:	2300      	movs	r3, #0
 8002894:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8002898:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ffb2 	bl	8002804 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d1f6      	bne.n	8002892 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80028a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80028b4:	2300      	movs	r3, #0
 80028b6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80028ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80028bc:	2002      	movs	r0, #2
}
 80028be:	4770      	bx	lr

080028c0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c0:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80028dc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e6:	b500      	push	{lr}
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ee:	f1c3 0e07 	rsb	lr, r3, #7
 80028f2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fa:	bf28      	it	cs
 80028fc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002900:	f1bc 0f06 	cmp.w	ip, #6
 8002904:	d91c      	bls.n	8002940 <HAL_NVIC_SetPriority+0x5c>
 8002906:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002912:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	fa03 f30e 	lsl.w	r3, r3, lr
 800291e:	ea21 0303 	bic.w	r3, r1, r3
 8002922:	fa03 f30c 	lsl.w	r3, r3, ip
 8002926:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800292a:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800292e:	db0a      	blt.n	8002946 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002934:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002938:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800293c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002940:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	4694      	mov	ip, r2
 8002944:	e7e7      	b.n	8002916 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <HAL_NVIC_SetPriority+0x74>)
 8002948:	f000 000f 	and.w	r0, r0, #15
 800294c:	4402      	add	r2, r0
 800294e:	7613      	strb	r3, [r2, #24]
 8002950:	f85d fb04 	ldr.w	pc, [sp], #4
 8002954:	e000ed00 	.word	0xe000ed00
 8002958:	e000ecfc 	.word	0xe000ecfc

0800295c <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	1e43      	subs	r3, r0, #1
 800295e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002962:	d209      	bcs.n	8002978 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002964:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002968:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800296a:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 800296c:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800296e:	6913      	ldr	r3, [r2, #16]
 8002970:	f043 0303 	orr.w	r3, r3, #3
 8002974:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8002976:	4770      	bx	lr
    return (1UL);
 8002978:	2001      	movs	r0, #1
}
 800297a:	4770      	bx	lr

0800297c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800297c:	2804      	cmp	r0, #4
 800297e:	d813      	bhi.n	80029a8 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8002980:	e8df f000 	tbb	[pc, r0]
 8002984:	12031a2a 	.word	0x12031a2a
 8002988:	13          	.byte	0x13
 8002989:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800298a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 800298e:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002990:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002998:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800299c:	f023 030c 	bic.w	r3, r3, #12
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 80029a8:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029aa:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80029ae:	6913      	ldr	r3, [r2, #16]
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6113      	str	r3, [r2, #16]
      break;
 80029b6:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029b8:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80029bc:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80029be:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80029c6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80029ca:	f023 030c 	bic.w	r3, r3, #12
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80029d6:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029d8:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80029dc:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80029de:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80029e6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80029ea:	f023 030c 	bic.w	r3, r3, #12
 80029ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80029f2:	4770      	bx	lr
 80029f4:	44020c00 	.word	0x44020c00

080029f8 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80029f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	075b      	lsls	r3, r3, #29
 8002a00:	d40f      	bmi.n	8002a22 <HAL_SYSTICK_GetCLKSourceConfig+0x2a>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002a02:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8002a04:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 8002a08:	f000 000c 	and.w	r0, r0, #12

    switch (systick_rcc_source)
 8002a0c:	2804      	cmp	r0, #4
 8002a0e:	d006      	beq.n	8002a1e <HAL_SYSTICK_GetCLKSourceConfig+0x26>
 8002a10:	f1a0 0008 	sub.w	r0, r0, #8
 8002a14:	fab0 f080 	clz	r0, r0
 8002a18:	0940      	lsrs	r0, r0, #5
 8002a1a:	0040      	lsls	r0, r0, #1
 8002a1c:	4770      	bx	lr
 8002a1e:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8002a20:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002a22:	2004      	movs	r0, #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	44020c00 	.word	0x44020c00

08002a2c <HAL_DCACHE_ErrorCallback>:
  * @brief  Error callback.
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <HAL_DCACHE_CleanByAddrCallback>:
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <HAL_DCACHE_InvalidateByAddrCallback>:
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <HAL_DCACHE_InvalidateCompleteCallback>:
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop

08002a40 <HAL_DCACHE_Init>:
  if (hdcache == NULL)
 8002a40:	b350      	cbz	r0, 8002a98 <HAL_DCACHE_Init+0x58>
{
 8002a42:	b510      	push	{r4, lr}
  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8002a44:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002a48:	4604      	mov	r4, r0
 8002a4a:	b96b      	cbnz	r3, 8002a68 <HAL_DCACHE_Init+0x28>
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8002a4c:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_DCACHE_Init+0x64>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8002a4e:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <HAL_DCACHE_Init+0x68>)
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8002a50:	4816      	ldr	r0, [pc, #88]	@ (8002aac <HAL_DCACHE_Init+0x6c>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8002a52:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8002a56:	4916      	ldr	r1, [pc, #88]	@ (8002ab0 <HAL_DCACHE_Init+0x70>)
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8002a58:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <HAL_DCACHE_Init+0x74>)
    if (hdcache->MspInitCallback == NULL)
 8002a5a:	69e3      	ldr	r3, [r4, #28]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8002a5c:	e9c4 0104 	strd	r0, r1, [r4, #16]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8002a60:	61a2      	str	r2, [r4, #24]
    if (hdcache->MspInitCallback == NULL)
 8002a62:	b1db      	cbz	r3, 8002a9c <HAL_DCACHE_Init+0x5c>
    hdcache->MspInitCallback(hdcache);
 8002a64:	4620      	mov	r0, r4
 8002a66:	4798      	blx	r3
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8002a68:	e9d4 2100 	ldrd	r2, r1, [r4]
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002a6c:	2000      	movs	r0, #0
  hdcache->State = HAL_DCACHE_STATE_READY;
 8002a6e:	2301      	movs	r3, #1
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002a70:	62a0      	str	r0, [r4, #40]	@ 0x28
  hdcache->State = HAL_DCACHE_STATE_READY;
 8002a72:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6013      	str	r3, [r2, #0]
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8002a80:	6850      	ldr	r0, [r2, #4]
 8002a82:	f010 0009 	ands.w	r0, r0, #9
 8002a86:	d105      	bne.n	8002a94 <HAL_DCACHE_Init+0x54>
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002a88:	62a0      	str	r0, [r4, #40]	@ 0x28
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6013      	str	r3, [r2, #0]
}
 8002a92:	bd10      	pop	{r4, pc}
    status =  HAL_BUSY;
 8002a94:	2002      	movs	r0, #2
}
 8002a96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a98:	2001      	movs	r0, #1
}
 8002a9a:	4770      	bx	lr
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <HAL_DCACHE_Init+0x78>)
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	61e2      	str	r2, [r4, #28]
 8002aa2:	e7df      	b.n	8002a64 <HAL_DCACHE_Init+0x24>
 8002aa4:	08002a2d 	.word	0x08002a2d
 8002aa8:	08002a31 	.word	0x08002a31
 8002aac:	08002a35 	.word	0x08002a35
 8002ab0:	08002a3d 	.word	0x08002a3d
 8002ab4:	08002a39 	.word	0x08002a39
 8002ab8:	080019a5 	.word	0x080019a5

08002abc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ac0:	680d      	ldr	r5, [r1, #0]
{
 8002ac2:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ac4:	2d00      	cmp	r5, #0
 8002ac6:	f000 80b6 	beq.w	8002c36 <HAL_GPIO_Init+0x17a>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002aca:	4a5c      	ldr	r2, [pc, #368]	@ (8002c3c <HAL_GPIO_Init+0x180>)
  uint32_t position = 0U;
 8002acc:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ace:	ea02 2290 	and.w	r2, r2, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ad2:	f04f 0b01 	mov.w	fp, #1
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ad6:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8002c40 <HAL_GPIO_Init+0x184>
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ada:	9203      	str	r2, [sp, #12]
        tmp = EXTI->RTSR1;
 8002adc:	9101      	str	r1, [sp, #4]
 8002ade:	e059      	b.n	8002b94 <HAL_GPIO_Init+0xd8>
      tmp = GPIOx->MODER;
 8002ae0:	f8d0 e000 	ldr.w	lr, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ae4:	f10c 3cff 	add.w	ip, ip, #4294967295
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ae8:	ea0e 0e06 	and.w	lr, lr, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002aec:	ea4e 0e01 	orr.w	lr, lr, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af0:	f1bc 0f01 	cmp.w	ip, #1
      GPIOx->MODER = tmp;
 8002af4:	f8c0 e000 	str.w	lr, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af8:	f240 8085 	bls.w	8002c06 <HAL_GPIO_Init+0x14a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002afc:	9a01      	ldr	r2, [sp, #4]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002afe:	f1b8 0f03 	cmp.w	r8, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002b02:	6892      	ldr	r2, [r2, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x4e>
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d004      	beq.n	8002b14 <HAL_GPIO_Init+0x58>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b0a:	40ba      	lsls	r2, r7
        tmp = GPIOx->PUPDR;
 8002b0c:	68c7      	ldr	r7, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b0e:	403e      	ands	r6, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b10:	4332      	orrs	r2, r6
        GPIOx->PUPDR = tmp;
 8002b12:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b14:	00e2      	lsls	r2, r4, #3
 8002b16:	d539      	bpl.n	8002b8c <HAL_GPIO_Init+0xd0>
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b18:	210f      	movs	r1, #15
 8002b1a:	f023 0603 	bic.w	r6, r3, #3
 8002b1e:	f106 4688 	add.w	r6, r6, #1140850688	@ 0x44000000
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	f506 3608 	add.w	r6, r6, #139264	@ 0x22000
 8002b2a:	00d2      	lsls	r2, r2, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002b2c:	6e37      	ldr	r7, [r6, #96]	@ 0x60
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b2e:	fa01 fc02 	lsl.w	ip, r1, r2
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b32:	9903      	ldr	r1, [sp, #12]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b34:	ea27 070c 	bic.w	r7, r7, ip
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	433a      	orrs	r2, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b3e:	6632      	str	r2, [r6, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8002b40:	ea6f 0609 	mvn.w	r6, r9
        tmp = EXTI->RTSR1;
 8002b44:	f8da 2000 	ldr.w	r2, [sl]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b48:	02e7      	lsls	r7, r4, #11
        tmp &= ~((uint32_t)iocurrent);
 8002b4a:	bf54      	ite	pl
 8002b4c:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b4e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = tmp;
 8002b52:	f8ca 2000 	str.w	r2, [sl]

        tmp = EXTI->FTSR1;
 8002b56:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5a:	02a1      	lsls	r1, r4, #10
        tmp &= ~((uint32_t)iocurrent);
 8002b5c:	bf54      	ite	pl
 8002b5e:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b60:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = tmp;
 8002b64:	f8ca 2004 	str.w	r2, [sl, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002b68:	f8da 2084 	ldr.w	r2, [sl, #132]	@ 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6c:	03a7      	lsls	r7, r4, #14
        tmp &= ~((uint32_t)iocurrent);
 8002b6e:	bf54      	ite	pl
 8002b70:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b72:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = tmp;
 8002b76:	f8ca 2084 	str.w	r2, [sl, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002b7a:	f8da 2080 	ldr.w	r2, [sl, #128]	@ 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b7e:	03e1      	lsls	r1, r4, #15
        tmp &= ~((uint32_t)iocurrent);
 8002b80:	bf54      	ite	pl
 8002b82:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b84:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = tmp;
 8002b88:	f8ca 2080 	str.w	r2, [sl, #128]	@ 0x80
      }
    }

    position++;
 8002b8c:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b8e:	fa35 f203 	lsrs.w	r2, r5, r3
 8002b92:	d050      	beq.n	8002c36 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b94:	fa0b f203 	lsl.w	r2, fp, r3
    if (iocurrent != 0U)
 8002b98:	ea12 0905 	ands.w	r9, r2, r5
 8002b9c:	d0f6      	beq.n	8002b8c <HAL_GPIO_Init+0xd0>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9e:	9901      	ldr	r1, [sp, #4]
 8002ba0:	005f      	lsls	r7, r3, #1
 8002ba2:	684c      	ldr	r4, [r1, #4]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ba4:	2103      	movs	r1, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba6:	f024 0c10 	bic.w	ip, r4, #16
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002baa:	ea04 0801 	and.w	r8, r4, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bae:	fa01 f607 	lsl.w	r6, r1, r7
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb2:	f1bc 0f02 	cmp.w	ip, #2
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bb6:	fa08 f107 	lsl.w	r1, r8, r7
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bba:	ea6f 0606 	mvn.w	r6, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bbe:	9102      	str	r1, [sp, #8]
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc0:	d18e      	bne.n	8002ae0 <HAL_GPIO_Init+0x24>
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bc2:	9901      	ldr	r1, [sp, #4]
        tmp = GPIOx->AFR[position >> 3U];
 8002bc4:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bc8:	6909      	ldr	r1, [r1, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bca:	f003 0c07 	and.w	ip, r3, #7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bce:	f001 0e0f 	and.w	lr, r1, #15
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002bd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bdc:	fa0e fe0c 	lsl.w	lr, lr, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002be0:	fa01 fc0c 	lsl.w	ip, r1, ip
        tmp = GPIOx->AFR[position >> 3U];
 8002be4:	f8d8 1020 	ldr.w	r1, [r8, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002be8:	ea21 0c0c 	bic.w	ip, r1, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bec:	ea4e 0e0c 	orr.w	lr, lr, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8002bf0:	f8c8 e020 	str.w	lr, [r8, #32]
      tmp = GPIOx->MODER;
 8002bf4:	f8d0 c000 	ldr.w	ip, [r0]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bf8:	9902      	ldr	r1, [sp, #8]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bfa:	ea0c 0c06 	and.w	ip, ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bfe:	ea4c 0c01 	orr.w	ip, ip, r1
      GPIOx->MODER = tmp;
 8002c02:	f8c0 c000 	str.w	ip, [r0]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c06:	9901      	ldr	r1, [sp, #4]
        tmp = GPIOx->OSPEEDR;
 8002c08:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c0c:	68c9      	ldr	r1, [r1, #12]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c0e:	ea0e 0e06 	and.w	lr, lr, r6
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c12:	fa01 fc07 	lsl.w	ip, r1, r7
 8002c16:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = tmp;
 8002c1a:	f8c0 c008 	str.w	ip, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002c1e:	f8d0 c004 	ldr.w	ip, [r0, #4]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c22:	9901      	ldr	r1, [sp, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c24:	ea2c 0c02 	bic.w	ip, ip, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c28:	0922      	lsrs	r2, r4, #4
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = tmp;
 8002c30:	6042      	str	r2, [r0, #4]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c32:	688a      	ldr	r2, [r1, #8]
 8002c34:	e769      	b.n	8002b0a <HAL_GPIO_Init+0x4e>
  }
}
 8002c36:	b005      	add	sp, #20
 8002c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3c:	002f7f7f 	.word	0x002f7f7f
 8002c40:	44022000 	.word	0x44022000

08002c44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	b10a      	cbz	r2, 8002c4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c46:	6181      	str	r1, [r0, #24]
 8002c48:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c4a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c50:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c52:	ea01 0203 	and.w	r2, r1, r3
 8002c56:	ea21 0103 	bic.w	r1, r1, r3
 8002c5a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c5e:	6181      	str	r1, [r0, #24]
}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d055      	beq.n	8002d14 <HAL_I2C_Init+0xb0>
{
 8002c68:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002c6e:	4604      	mov	r4, r0
 8002c70:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d048      	beq.n	8002d0a <HAL_I2C_Init+0xa6>
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c78:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7c:	2124      	movs	r1, #36	@ 0x24
 8002c7e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002c82:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	f021 0101 	bic.w	r1, r1, #1
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c8c:	68e5      	ldr	r5, [r4, #12]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c8e:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002c90:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c92:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c94:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c96:	2d01      	cmp	r5, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9e:	d009      	beq.n	8002cb4 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ca0:	f440 4004 	orr.w	r0, r0, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ca4:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ca6:	6098      	str	r0, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cb4:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002cb8:	6098      	str	r0, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc2:	2100      	movs	r1, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cd2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cda:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cdc:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 8002ce0:	4302      	orrs	r2, r0
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ce2:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ce4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002ce8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cea:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002cee:	4302      	orrs	r2, r0
 8002cf0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002cf2:	681a      	ldr	r2, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002cf4:	4608      	mov	r0, r1
  __HAL_I2C_ENABLE(hi2c);
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	6461      	str	r1, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d02:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
}
 8002d08:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002d0a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002d0e:	f7fe fe63 	bl	80019d8 <HAL_I2C_MspInit>
 8002d12:	e7b1      	b.n	8002c78 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002d14:	2001      	movs	r0, #1
}
 8002d16:	4770      	bx	lr

08002d18 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d18:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002d1c:	2a20      	cmp	r2, #32
 8002d1e:	d123      	bne.n	8002d68 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002d20:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d24:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2a01      	cmp	r2, #1
 8002d2c:	d01c      	beq.n	8002d68 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2e:	2024      	movs	r0, #36	@ 0x24
{
 8002d30:	b500      	push	{lr}
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d32:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8002d36:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002d3c:	6810      	ldr	r0, [r2, #0]
 8002d3e:	f020 0001 	bic.w	r0, r0, #1
 8002d42:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d44:	6810      	ldr	r0, [r2, #0]
 8002d46:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002d4a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d4c:	6810      	ldr	r0, [r2, #0]
 8002d4e:	4301      	orrs	r1, r0
 8002d50:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d52:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8002d54:	4670      	mov	r0, lr
    __HAL_I2C_ENABLE(hi2c);
 8002d56:	f041 0101 	orr.w	r1, r1, #1
 8002d5a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002d60:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002d64:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002d68:	2002      	movs	r0, #2
}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002d70:	2a20      	cmp	r2, #32
 8002d72:	d122      	bne.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002d74:	b500      	push	{lr}
 8002d76:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2a01      	cmp	r2, #1
 8002d82:	d01c      	beq.n	8002dbe <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d84:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_DISABLE(hi2c);
 8002d8a:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002d90:	6810      	ldr	r0, [r2, #0]
 8002d92:	f020 0001 	bic.w	r0, r0, #1
 8002d96:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002d98:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002d9a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002d9e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002da2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002da4:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8002da6:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8002da8:	f041 0101 	orr.w	r1, r1, #1
 8002dac:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002db2:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002db6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002dba:	2002      	movs	r0, #2
}
 8002dbc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002dbe:	2002      	movs	r0, #2
}
 8002dc0:	f85d fb04 	ldr.w	pc, [sp], #4

08002dc4 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002dc4:	4a03      	ldr	r2, [pc, #12]	@ (8002dd4 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8002dc6:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40030400 	.word	0x40030400

08002dd8 <HAL_RCC_GetSysClockFreq.part.0>:
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002dd8:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_RCC_GetSysClockFreq.part.0+0x114>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002dda:	b430      	push	{r4, r5}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ddc:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002dde:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002de0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002de2:	f411 5f7c 	tst.w	r1, #16128	@ 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002de6:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002de8:	f3c1 2005 	ubfx	r0, r1, #8, #6
    if (pllm != 0U)
 8002dec:	d035      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq.part.0+0x82>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002dee:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002df2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002df6:	fb05 f202 	mul.w	r2, r5, r2
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dfa:	ee07 0a90 	vmov	s15, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dfe:	ee06 2a90 	vmov	s13, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e02:	f004 0403 	and.w	r4, r4, #3
      switch (pllsource)
 8002e06:	2c01      	cmp	r4, #1
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e0c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
      switch (pllsource)
 8002e10:	d039      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq.part.0+0xae>
 8002e12:	2c03      	cmp	r4, #3
 8002e14:	d123      	bne.n	8002e5e <HAL_RCC_GetSysClockFreq.part.0+0x86>
          }

          break;

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e18:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e28:	eddf 5a31 	vldr	s11, [pc, #196]	@ 8002ef0 <HAL_RCC_GetSysClockFreq.part.0+0x118>
 8002e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e30:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e34:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e38:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
          break;
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_GetSysClockFreq.part.0+0x114>)
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002e44:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e46:	ee07 3a10 	vmov	s14, r3
 8002e4a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002e4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e52:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002e56:	ee17 0a90 	vmov	r0, s15
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
  }

  return sysclockfreq;
}
 8002e5a:	bc30      	pop	{r4, r5}
 8002e5c:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e60:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e70:	eddf 5a20 	vldr	s11, [pc, #128]	@ 8002ef4 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 8002e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e78:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e7c:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e80:	ee67 7aa6 	vmul.f32	s15, s15, s13
          break;
 8002e84:	e7da      	b.n	8002e3c <HAL_RCC_GetSysClockFreq.part.0+0x64>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	0692      	lsls	r2, r2, #26
 8002e8a:	d51a      	bpl.n	8002ec2 <HAL_RCC_GetSysClockFreq.part.0+0xea>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e8c:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <HAL_RCC_GetSysClockFreq.part.0+0x120>)
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	ee07 3a90 	vmov	s15, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e9a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002e9e:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea4:	ee06 2a10 	vmov	s12, r2
 8002ea8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002eac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eb4:	eec6 7a07 	vdiv.f32	s15, s12, s14
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb8:	ee36 7aa5 	vadd.f32	s14, s13, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec0:	e7bc      	b.n	8002e3c <HAL_RCC_GetSysClockFreq.part.0+0x64>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed4:	eddf 5a09 	vldr	s11, [pc, #36]	@ 8002efc <HAL_RCC_GetSysClockFreq.part.0+0x124>
 8002ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002edc:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ee0:	ee77 7a86 	vadd.f32	s15, s15, s12
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ee4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ee8:	e7a8      	b.n	8002e3c <HAL_RCC_GetSysClockFreq.part.0+0x64>
 8002eea:	bf00      	nop
 8002eec:	44020c00 	.word	0x44020c00
 8002ef0:	4af42400 	.word	0x4af42400
 8002ef4:	4a742400 	.word	0x4a742400
 8002ef8:	03d09000 	.word	0x03d09000
 8002efc:	4c742400 	.word	0x4c742400

08002f00 <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	f000 8349 	beq.w	8003598 <HAL_RCC_OscConfig+0x698>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f06:	4aa3      	ldr	r2, [pc, #652]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f08:	6803      	ldr	r3, [r0, #0]
{
 8002f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0e:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002f10:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 8002f12:	4604      	mov	r4, r0
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f14:	06d8      	lsls	r0, r3, #27
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f16:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002f1a:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f1e:	d524      	bpl.n	8002f6a <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002f20:	2d08      	cmp	r5, #8
 8002f22:	f000 813e 	beq.w	80031a2 <HAL_RCC_OscConfig+0x2a2>
 8002f26:	2d18      	cmp	r5, #24
 8002f28:	f000 8138 	beq.w	800319c <HAL_RCC_OscConfig+0x29c>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f2c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002f2e:	4f99      	ldr	r7, [pc, #612]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80ef 	beq.w	8003114 <HAL_RCC_OscConfig+0x214>
        __HAL_RCC_CSI_ENABLE();
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002f3e:	f7fe ff37 	bl	8001db0 <HAL_GetTick>
 8002f42:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002f44:	e006      	b.n	8002f54 <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002f46:	f7fe ff33 	bl	8001db0 <HAL_GetTick>
 8002f4a:	eba0 0008 	sub.w	r0, r0, r8
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	f200 8169 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	059a      	lsls	r2, r3, #22
 8002f58:	d5f5      	bpl.n	8002f46 <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6a22      	ldr	r2, [r4, #32]
 8002f5e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f66:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	07d8      	lsls	r0, r3, #31
 8002f6c:	d538      	bpl.n	8002fe0 <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f6e:	2d10      	cmp	r5, #16
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002f70:	6862      	ldr	r2, [r4, #4]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f72:	f000 80e5 	beq.w	8003140 <HAL_RCC_OscConfig+0x240>
 8002f76:	2d18      	cmp	r5, #24
 8002f78:	f000 80df 	beq.w	800313a <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002f7c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002f80:	d018      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xb4>
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	f000 8152 	beq.w	800322c <HAL_RCC_OscConfig+0x32c>
 8002f88:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8002f8c:	4b81      	ldr	r3, [pc, #516]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
 8002f8e:	f000 823e 	beq.w	800340e <HAL_RCC_OscConfig+0x50e>
 8002f92:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	f000 82b9 	beq.w	800350e <HAL_RCC_OscConfig+0x60e>
 8002f9c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002fb0:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb2:	e004      	b.n	8002fbe <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002fb4:	4a77      	ldr	r2, [pc, #476]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fef7 	bl	8001db0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8003194 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8002fc6:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc8:	e005      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002fca:	f7fe fef1 	bl	8001db0 <HAL_GetTick>
 8002fce:	1bc0      	subs	r0, r0, r7
 8002fd0:	2864      	cmp	r0, #100	@ 0x64
 8002fd2:	f200 8128 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002fda:	039a      	lsls	r2, r3, #14
 8002fdc:	d5f5      	bpl.n	8002fca <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	0798      	lsls	r0, r3, #30
 8002fe2:	d524      	bpl.n	800302e <HAL_RCC_OscConfig+0x12e>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002fe4:	68e3      	ldr	r3, [r4, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	f040 8153 	bne.w	8003292 <HAL_RCC_OscConfig+0x392>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8159 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3a4>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002ff2:	4b68      	ldr	r3, [pc, #416]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
 8002ff4:	6921      	ldr	r1, [r4, #16]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	f002 0218 	and.w	r2, r2, #24
 8002ffc:	428a      	cmp	r2, r1
 8002ffe:	f040 8193 	bne.w	8003328 <HAL_RCC_OscConfig+0x428>
        tickstart = HAL_GetTick();
 8003002:	f7fe fed5 	bl	8001db0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003006:	4f63      	ldr	r7, [pc, #396]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8003008:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300a:	e005      	b.n	8003018 <HAL_RCC_OscConfig+0x118>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800300c:	f7fe fed0 	bl	8001db0 <HAL_GetTick>
 8003010:	1b80      	subs	r0, r0, r6
 8003012:	2802      	cmp	r0, #2
 8003014:	f200 8107 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	079a      	lsls	r2, r3, #30
 800301c:	d5f6      	bpl.n	800300c <HAL_RCC_OscConfig+0x10c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6962      	ldr	r2, [r4, #20]
 8003022:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8003026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800302a:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	0719      	lsls	r1, r3, #28
 8003030:	d519      	bpl.n	8003066 <HAL_RCC_OscConfig+0x166>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003032:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 8003034:	4e57      	ldr	r6, [pc, #348]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8113 	beq.w	8003262 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_LSI_ENABLE();
 800303c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003040:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003044:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8003048:	f7fe feb2 	bl	8001db0 <HAL_GetTick>
 800304c:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800304e:	e005      	b.n	800305c <HAL_RCC_OscConfig+0x15c>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003050:	f7fe feae 	bl	8001db0 <HAL_GetTick>
 8003054:	1bc0      	subs	r0, r0, r7
 8003056:	2802      	cmp	r0, #2
 8003058:	f200 80e5 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800305c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003060:	011a      	lsls	r2, r3, #4
 8003062:	d5f5      	bpl.n	8003050 <HAL_RCC_OscConfig+0x150>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	0758      	lsls	r0, r3, #29
 8003068:	d536      	bpl.n	80030d8 <HAL_RCC_OscConfig+0x1d8>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800306a:	4e4b      	ldr	r6, [pc, #300]	@ (8003198 <HAL_RCC_OscConfig+0x298>)
 800306c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800306e:	07d9      	lsls	r1, r3, #31
 8003070:	f140 80c9 	bpl.w	8003206 <HAL_RCC_OscConfig+0x306>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003074:	68a3      	ldr	r3, [r4, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f000 81d6 	beq.w	8003428 <HAL_RCC_OscConfig+0x528>
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 809f 	beq.w	80031c0 <HAL_RCC_OscConfig+0x2c0>
 8003082:	2b05      	cmp	r3, #5
 8003084:	f000 824f 	beq.w	8003526 <HAL_RCC_OscConfig+0x626>
 8003088:	2b85      	cmp	r3, #133	@ 0x85
 800308a:	4b42      	ldr	r3, [pc, #264]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
 800308c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003090:	f000 826d 	beq.w	800356e <HAL_RCC_OscConfig+0x66e>
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800309c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030a0:	f022 0204 	bic.w	r2, r2, #4
 80030a4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80030a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030b0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80030b4:	f7fe fe7c 	bl	8001db0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80030bc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030be:	4f35      	ldr	r7, [pc, #212]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
 80030c0:	e005      	b.n	80030ce <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe fe75 	bl	8001db0 <HAL_GetTick>
 80030c6:	1b80      	subs	r0, r0, r6
 80030c8:	4540      	cmp	r0, r8
 80030ca:	f200 80ac 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80030d2:	079b      	lsls	r3, r3, #30
 80030d4:	d5f5      	bpl.n	80030c2 <HAL_RCC_OscConfig+0x1c2>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	0699      	lsls	r1, r3, #26
 80030da:	d515      	bpl.n	8003108 <HAL_RCC_OscConfig+0x208>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 80030de:	4e2d      	ldr	r6, [pc, #180]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8110 	beq.w	8003306 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSI48_ENABLE();
 80030e6:	6833      	ldr	r3, [r6, #0]
 80030e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80030ee:	f7fe fe5f 	bl	8001db0 <HAL_GetTick>
 80030f2:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030f4:	e005      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fe5b 	bl	8001db0 <HAL_GetTick>
 80030fa:	1bc0      	subs	r0, r0, r7
 80030fc:	2802      	cmp	r0, #2
 80030fe:	f200 8092 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003102:	6833      	ldr	r3, [r6, #0]
 8003104:	049a      	lsls	r2, r3, #18
 8003106:	d5f6      	bpl.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003108:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 80cc 	bne.w	80032a8 <HAL_RCC_OscConfig+0x3a8>
  return HAL_OK;
 8003110:	2000      	movs	r0, #0
 8003112:	e089      	b.n	8003228 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_CSI_DISABLE();
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800311a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800311c:	f7fe fe48 	bl	8001db0 <HAL_GetTick>
 8003120:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003122:	e005      	b.n	8003130 <HAL_RCC_OscConfig+0x230>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003124:	f7fe fe44 	bl	8001db0 <HAL_GetTick>
 8003128:	eba0 0008 	sub.w	r0, r0, r8
 800312c:	2802      	cmp	r0, #2
 800312e:	d87a      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	059b      	lsls	r3, r3, #22
 8003134:	d4f6      	bmi.n	8003124 <HAL_RCC_OscConfig+0x224>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	e717      	b.n	8002f6a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800313a:	2e03      	cmp	r6, #3
 800313c:	f47f af1e 	bne.w	8002f7c <HAL_RCC_OscConfig+0x7c>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003140:	2a00      	cmp	r2, #0
 8003142:	f000 80af 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3a4>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003146:	0799      	lsls	r1, r3, #30
 8003148:	f57f af71 	bpl.w	800302e <HAL_RCC_OscConfig+0x12e>
 800314c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800314e:	4e11      	ldr	r6, [pc, #68]	@ (8003194 <HAL_RCC_OscConfig+0x294>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80c6 	beq.w	80032e2 <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003156:	6833      	ldr	r3, [r6, #0]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	f023 0318 	bic.w	r3, r3, #24
 800315e:	4313      	orrs	r3, r2
 8003160:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800316a:	f7fe fe21 	bl	8001db0 <HAL_GetTick>
 800316e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	e004      	b.n	800317c <HAL_RCC_OscConfig+0x27c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003172:	f7fe fe1d 	bl	8001db0 <HAL_GetTick>
 8003176:	1bc0      	subs	r0, r0, r7
 8003178:	2802      	cmp	r0, #2
 800317a:	d854      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	6833      	ldr	r3, [r6, #0]
 800317e:	079b      	lsls	r3, r3, #30
 8003180:	d5f7      	bpl.n	8003172 <HAL_RCC_OscConfig+0x272>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003182:	6933      	ldr	r3, [r6, #16]
 8003184:	6962      	ldr	r2, [r4, #20]
 8003186:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800318a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800318e:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	e74c      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
 8003194:	44020c00 	.word	0x44020c00
 8003198:	44020800 	.word	0x44020800
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800319c:	2e02      	cmp	r6, #2
 800319e:	f47f aec5 	bne.w	8002f2c <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80031a2:	69e2      	ldr	r2, [r4, #28]
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d07d      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3a4>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80031a8:	49a8      	ldr	r1, [pc, #672]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 80031aa:	6a20      	ldr	r0, [r4, #32]
 80031ac:	698a      	ldr	r2, [r1, #24]
 80031ae:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 80031b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80031b6:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b8:	07d9      	lsls	r1, r3, #31
 80031ba:	d566      	bpl.n	800328a <HAL_RCC_OscConfig+0x38a>
 80031bc:	6862      	ldr	r2, [r4, #4]
 80031be:	e6da      	b.n	8002f76 <HAL_RCC_OscConfig+0x76>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80031c0:	4ea2      	ldr	r6, [pc, #648]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80031c6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
 80031d2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031da:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
 80031de:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031e2:	f023 0304 	bic.w	r3, r3, #4
 80031e6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80031ea:	f7fe fde1 	bl	8001db0 <HAL_GetTick>
 80031ee:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f0:	e004      	b.n	80031fc <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fddd 	bl	8001db0 <HAL_GetTick>
 80031f6:	1bc0      	subs	r0, r0, r7
 80031f8:	4540      	cmp	r0, r8
 80031fa:	d814      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031fc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003200:	0798      	lsls	r0, r3, #30
 8003202:	d4f6      	bmi.n	80031f2 <HAL_RCC_OscConfig+0x2f2>
 8003204:	e767      	b.n	80030d6 <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003206:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6273      	str	r3, [r6, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800320e:	f7fe fdcf 	bl	8001db0 <HAL_GetTick>
 8003212:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003214:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003216:	07da      	lsls	r2, r3, #31
 8003218:	f53f af2c 	bmi.w	8003074 <HAL_RCC_OscConfig+0x174>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fdc8 	bl	8001db0 <HAL_GetTick>
 8003220:	1bc0      	subs	r0, r0, r7
 8003222:	2802      	cmp	r0, #2
 8003224:	d9f6      	bls.n	8003214 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8003226:	2003      	movs	r0, #3
}
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800322c:	4f87      	ldr	r7, [pc, #540]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003244:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003246:	f7fe fdb3 	bl	8001db0 <HAL_GetTick>
 800324a:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324c:	e005      	b.n	800325a <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800324e:	f7fe fdaf 	bl	8001db0 <HAL_GetTick>
 8003252:	eba0 0008 	sub.w	r0, r0, r8
 8003256:	2864      	cmp	r0, #100	@ 0x64
 8003258:	d8e5      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	039b      	lsls	r3, r3, #14
 800325e:	d4f6      	bmi.n	800324e <HAL_RCC_OscConfig+0x34e>
 8003260:	e6bd      	b.n	8002fde <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 8003262:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003266:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800326a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800326e:	f7fe fd9f 	bl	8001db0 <HAL_GetTick>
 8003272:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003274:	e004      	b.n	8003280 <HAL_RCC_OscConfig+0x380>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003276:	f7fe fd9b 	bl	8001db0 <HAL_GetTick>
 800327a:	1bc0      	subs	r0, r0, r7
 800327c:	2802      	cmp	r0, #2
 800327e:	d8d2      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003280:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	d4f6      	bmi.n	8003276 <HAL_RCC_OscConfig+0x376>
 8003288:	e6ec      	b.n	8003064 <HAL_RCC_OscConfig+0x164>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328a:	079a      	lsls	r2, r3, #30
 800328c:	f57f aecf 	bpl.w	800302e <HAL_RCC_OscConfig+0x12e>
 8003290:	68e3      	ldr	r3, [r4, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003292:	2d18      	cmp	r5, #24
 8003294:	f47f af5b 	bne.w	800314e <HAL_RCC_OscConfig+0x24e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003298:	2e01      	cmp	r6, #1
 800329a:	f47f af58 	bne.w	800314e <HAL_RCC_OscConfig+0x24e>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f aeaf 	bne.w	8003002 <HAL_RCC_OscConfig+0x102>
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
 80032a6:	e7bf      	b.n	8003228 <HAL_RCC_OscConfig+0x328>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a8:	2d18      	cmp	r5, #24
 80032aa:	d069      	beq.n	8003380 <HAL_RCC_OscConfig+0x480>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	f000 80c3 	beq.w	8003438 <HAL_RCC_OscConfig+0x538>
        __HAL_RCC_PLL1_DISABLE();
 80032b2:	4c66      	ldr	r4, [pc, #408]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032bc:	f7fe fd78 	bl	8001db0 <HAL_GetTick>
 80032c0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032c2:	e004      	b.n	80032ce <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fd74 	bl	8001db0 <HAL_GetTick>
 80032c8:	1b40      	subs	r0, r0, r5
 80032ca:	2802      	cmp	r0, #2
 80032cc:	d8ab      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	0199      	lsls	r1, r3, #6
 80032d2:	d4f7      	bmi.n	80032c4 <HAL_RCC_OscConfig+0x3c4>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80032d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032d6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032e0:	e716      	b.n	8003110 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_DISABLE();
 80032e2:	6833      	ldr	r3, [r6, #0]
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80032ea:	f7fe fd61 	bl	8001db0 <HAL_GetTick>
 80032ee:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	e004      	b.n	80032fc <HAL_RCC_OscConfig+0x3fc>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032f2:	f7fe fd5d 	bl	8001db0 <HAL_GetTick>
 80032f6:	1bc0      	subs	r0, r0, r7
 80032f8:	2802      	cmp	r0, #2
 80032fa:	d894      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	0798      	lsls	r0, r3, #30
 8003300:	d4f7      	bmi.n	80032f2 <HAL_RCC_OscConfig+0x3f2>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	e693      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
      __HAL_RCC_HSI48_DISABLE();
 8003306:	6833      	ldr	r3, [r6, #0]
 8003308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800330c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800330e:	f7fe fd4f 	bl	8001db0 <HAL_GetTick>
 8003312:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003314:	e004      	b.n	8003320 <HAL_RCC_OscConfig+0x420>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003316:	f7fe fd4b 	bl	8001db0 <HAL_GetTick>
 800331a:	1bc0      	subs	r0, r0, r7
 800331c:	2802      	cmp	r0, #2
 800331e:	d882      	bhi.n	8003226 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003320:	6833      	ldr	r3, [r6, #0]
 8003322:	049b      	lsls	r3, r3, #18
 8003324:	d4f7      	bmi.n	8003316 <HAL_RCC_OscConfig+0x416>
 8003326:	e6ef      	b.n	8003108 <HAL_RCC_OscConfig+0x208>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f022 0218 	bic.w	r2, r2, #24
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	f002 0218 	and.w	r2, r2, #24
 8003338:	2a08      	cmp	r2, #8
 800333a:	f000 8129 	beq.w	8003590 <HAL_RCC_OscConfig+0x690>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	f012 0f18 	tst.w	r2, #24
 8003344:	f040 8103 	bne.w	800354e <HAL_RCC_OscConfig+0x64e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	0691      	lsls	r1, r2, #26
 800334c:	f140 810d 	bpl.w	800356a <HAL_RCC_OscConfig+0x66a>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <HAL_RCC_OscConfig+0x550>)
 8003354:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003358:	40d3      	lsrs	r3, r2
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800335a:	4a3c      	ldr	r2, [pc, #240]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 800335c:	483d      	ldr	r0, [pc, #244]	@ (8003454 <HAL_RCC_OscConfig+0x554>)
 800335e:	6a12      	ldr	r2, [r2, #32]
 8003360:	493d      	ldr	r1, [pc, #244]	@ (8003458 <HAL_RCC_OscConfig+0x558>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003362:	f002 020f 	and.w	r2, r2, #15
 8003366:	5c82      	ldrb	r2, [r0, r2]
 8003368:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800336c:	40d3      	lsrs	r3, r2
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800336e:	4a3b      	ldr	r2, [pc, #236]	@ (800345c <HAL_RCC_OscConfig+0x55c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003370:	600b      	str	r3, [r1, #0]
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003372:	6810      	ldr	r0, [r2, #0]
 8003374:	f7fe fca6 	bl	8001cc4 <HAL_InitTick>
 8003378:	2800      	cmp	r0, #0
 800337a:	f43f ae42 	beq.w	8003002 <HAL_RCC_OscConfig+0x102>
 800337e:	e791      	b.n	80032a4 <HAL_RCC_OscConfig+0x3a4>
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003380:	4a32      	ldr	r2, [pc, #200]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003382:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003384:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003386:	6b55      	ldr	r5, [r2, #52]	@ 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003388:	d08c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3a4>
 800338a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800338c:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003390:	4283      	cmp	r3, r0
 8003392:	d187      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3a4>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003394:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003396:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800339a:	4299      	cmp	r1, r3
 800339c:	d182      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3a4>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800339e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033a0:	f3c5 0108 	ubfx	r1, r5, #0, #9
 80033a4:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80033a6:	4299      	cmp	r1, r3
 80033a8:	f47f af7c 	bne.w	80032a4 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80033ae:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80033b4:	4299      	cmp	r1, r3
 80033b6:	f47f af75 	bne.w	80032a4 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80033bc:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033c2:	4299      	cmp	r1, r3
 80033c4:	f47f af6e 	bne.w	80032a4 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80033c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80033ca:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80033ce:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033d0:	429d      	cmp	r5, r3
 80033d2:	f47f af67 	bne.w	80032a4 <HAL_RCC_OscConfig+0x3a4>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80033d6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80033d8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80033da:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80033de:	4293      	cmp	r3, r2
 80033e0:	f43f ae96 	beq.w	8003110 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80033e4:	4a19      	ldr	r2, [pc, #100]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 80033e6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80033e8:	f023 0310 	bic.w	r3, r3, #16
 80033ec:	6293      	str	r3, [r2, #40]	@ 0x28
        tickstart = HAL_GetTick();
 80033ee:	f7fe fcdf 	bl	8001db0 <HAL_GetTick>
 80033f2:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80033f4:	f7fe fcdc 	bl	8001db0 <HAL_GetTick>
 80033f8:	42a8      	cmp	r0, r5
 80033fa:	d0fb      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4f4>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80033fc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80033fe:	4b13      	ldr	r3, [pc, #76]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 8003400:	00d2      	lsls	r2, r2, #3
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003404:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003406:	f042 0210 	orr.w	r2, r2, #16
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28
 800340c:	e680      	b.n	8003110 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003424:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003426:	e5ca      	b.n	8002fbe <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003428:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 800342a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003436:	e63d      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_PLL1_DISABLE();
 8003438:	4d04      	ldr	r5, [pc, #16]	@ (800344c <HAL_RCC_OscConfig+0x54c>)
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003440:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003442:	f7fe fcb5 	bl	8001db0 <HAL_GetTick>
 8003446:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003448:	e010      	b.n	800346c <HAL_RCC_OscConfig+0x56c>
 800344a:	bf00      	nop
 800344c:	44020c00 	.word	0x44020c00
 8003450:	03d09000 	.word	0x03d09000
 8003454:	0800f9a4 	.word	0x0800f9a4
 8003458:	20000000 	.word	0x20000000
 800345c:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003460:	f7fe fca6 	bl	8001db0 <HAL_GetTick>
 8003464:	1b80      	subs	r0, r0, r6
 8003466:	2802      	cmp	r0, #2
 8003468:	f63f aedd 	bhi.w	8003226 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	019f      	lsls	r7, r3, #6
 8003470:	d4f6      	bmi.n	8003460 <HAL_RCC_OscConfig+0x560>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003472:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003474:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003476:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800347a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800347c:	f023 0303 	bic.w	r3, r3, #3
 8003480:	430b      	orrs	r3, r1
 8003482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003486:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003488:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	@ 0x38
 800348c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800348e:	3b01      	subs	r3, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	025b      	lsls	r3, r3, #9
 8003494:	0412      	lsls	r2, r2, #16
 8003496:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800349a:	3901      	subs	r1, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	f3c1 0208 	ubfx	r2, r1, #0, #9
 80034a4:	4313      	orrs	r3, r2
 80034a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0612      	lsls	r2, r2, #24
 80034ac:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80034b0:	4313      	orrs	r3, r2
 80034b2:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80034b4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80034bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	63ab      	str	r3, [r5, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80034c2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80034ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034cc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80034ce:	f023 030c 	bic.w	r3, r3, #12
 80034d2:	4313      	orrs	r3, r2
 80034d4:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80034d6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034d8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80034da:	f023 0320 	bic.w	r3, r3, #32
 80034de:	4313      	orrs	r3, r2
 80034e0:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034e2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e8:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_ENABLE();
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034f2:	f7fe fc5d 	bl	8001db0 <HAL_GetTick>
 80034f6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80034f8:	4d28      	ldr	r5, [pc, #160]	@ (800359c <HAL_RCC_OscConfig+0x69c>)
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	0198      	lsls	r0, r3, #6
 80034fe:	f53f ae07 	bmi.w	8003110 <HAL_RCC_OscConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003502:	f7fe fc55 	bl	8001db0 <HAL_GetTick>
 8003506:	1b00      	subs	r0, r0, r4
 8003508:	2802      	cmp	r0, #2
 800350a:	d9f6      	bls.n	80034fa <HAL_RCC_OscConfig+0x5fa>
 800350c:	e68b      	b.n	8003226 <HAL_RCC_OscConfig+0x326>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800350e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003522:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	e54b      	b.n	8002fbe <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003526:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <HAL_RCC_OscConfig+0x69c>)
 8003528:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800352c:	f042 0204 	orr.w	r2, r2, #4
 8003530:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003534:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003540:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800354c:	e5b2      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	f002 0218 	and.w	r2, r2, #24
 8003554:	2a10      	cmp	r2, #16
 8003556:	d01d      	beq.n	8003594 <HAL_RCC_OscConfig+0x694>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0318 	and.w	r3, r3, #24
 800355e:	2b18      	cmp	r3, #24
 8003560:	d103      	bne.n	800356a <HAL_RCC_OscConfig+0x66a>
 8003562:	f7ff fc39 	bl	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
 8003566:	4603      	mov	r3, r0
 8003568:	e6f7      	b.n	800335a <HAL_RCC_OscConfig+0x45a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <HAL_RCC_OscConfig+0x6a0>)
 800356c:	e6f5      	b.n	800335a <HAL_RCC_OscConfig+0x45a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800356e:	f042 0204 	orr.w	r2, r2, #4
 8003572:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003576:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800357a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800357e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003582:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800358e:	e591      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
    sysclockfreq = CSI_VALUE;
 8003590:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <HAL_RCC_OscConfig+0x6a4>)
 8003592:	e6e2      	b.n	800335a <HAL_RCC_OscConfig+0x45a>
    sysclockfreq = HSE_VALUE;
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <HAL_RCC_OscConfig+0x6a8>)
 8003596:	e6e0      	b.n	800335a <HAL_RCC_OscConfig+0x45a>
    return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
}
 800359a:	4770      	bx	lr
 800359c:	44020c00 	.word	0x44020c00
 80035a0:	03d09000 	.word	0x03d09000
 80035a4:	003d0900 	.word	0x003d0900
 80035a8:	007a1200 	.word	0x007a1200

080035ac <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f000 8133 	beq.w	8003818 <HAL_RCC_ClockConfig+0x26c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b2:	4a9e      	ldr	r2, [pc, #632]	@ (800382c <HAL_RCC_ClockConfig+0x280>)
{
 80035b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	6813      	ldr	r3, [r2, #0]
 80035ba:	4604      	mov	r4, r0
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	428b      	cmp	r3, r1
 80035c2:	460d      	mov	r5, r1
 80035c4:	d20c      	bcs.n	80035e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	6813      	ldr	r3, [r2, #0]
 80035c8:	f023 030f 	bic.w	r3, r3, #15
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d0:	6813      	ldr	r3, [r2, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	428b      	cmp	r3, r1
 80035d8:	d002      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80035da:	2001      	movs	r0, #1
}
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	06d9      	lsls	r1, r3, #27
 80035e4:	d50d      	bpl.n	8003602 <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80035e6:	4992      	ldr	r1, [pc, #584]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 80035e8:	6960      	ldr	r0, [r4, #20]
 80035ea:	6a0a      	ldr	r2, [r1, #32]
 80035ec:	0a12      	lsrs	r2, r2, #8
 80035ee:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80035f2:	4290      	cmp	r0, r2
 80035f4:	d905      	bls.n	8003602 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80035f6:	6a0a      	ldr	r2, [r1, #32]
 80035f8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80035fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003600:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	071a      	lsls	r2, r3, #28
 8003604:	d50d      	bpl.n	8003622 <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003606:	498a      	ldr	r1, [pc, #552]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 8003608:	6920      	ldr	r0, [r4, #16]
 800360a:	6a0a      	ldr	r2, [r1, #32]
 800360c:	0912      	lsrs	r2, r2, #4
 800360e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003612:	4290      	cmp	r0, r2
 8003614:	d905      	bls.n	8003622 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003616:	6a0a      	ldr	r2, [r1, #32]
 8003618:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800361c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8003620:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003622:	075f      	lsls	r7, r3, #29
 8003624:	d50b      	bpl.n	800363e <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003626:	4982      	ldr	r1, [pc, #520]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 8003628:	68e0      	ldr	r0, [r4, #12]
 800362a:	6a0a      	ldr	r2, [r1, #32]
 800362c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003630:	4290      	cmp	r0, r2
 8003632:	d904      	bls.n	800363e <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003634:	6a0a      	ldr	r2, [r1, #32]
 8003636:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800363a:	4302      	orrs	r2, r0
 800363c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363e:	079e      	lsls	r6, r3, #30
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003640:	f003 0201 	and.w	r2, r3, #1
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	f140 80a5 	bpl.w	8003792 <HAL_RCC_ClockConfig+0x1e6>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003648:	4e79      	ldr	r6, [pc, #484]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 800364a:	68a0      	ldr	r0, [r4, #8]
 800364c:	6a31      	ldr	r1, [r6, #32]
 800364e:	f001 010f 	and.w	r1, r1, #15
 8003652:	4288      	cmp	r0, r1
 8003654:	d904      	bls.n	8003660 <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003656:	6a31      	ldr	r1, [r6, #32]
 8003658:	f021 010f 	bic.w	r1, r1, #15
 800365c:	4301      	orrs	r1, r0
 800365e:	6231      	str	r1, [r6, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003660:	b382      	cbz	r2, 80036c4 <HAL_RCC_ClockConfig+0x118>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003662:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003664:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003668:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366a:	f000 809a 	beq.w	80037a2 <HAL_RCC_ClockConfig+0x1f6>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	2a02      	cmp	r2, #2
 8003670:	f000 80ce 	beq.w	8003810 <HAL_RCC_ClockConfig+0x264>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003674:	2a01      	cmp	r2, #1
 8003676:	f000 80e7 	beq.w	8003848 <HAL_RCC_ClockConfig+0x29c>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	079f      	lsls	r7, r3, #30
 800367c:	d5ad      	bpl.n	80035da <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800367e:	4e6c      	ldr	r6, [pc, #432]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003684:	69f3      	ldr	r3, [r6, #28]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	4313      	orrs	r3, r2
 800368c:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 800368e:	f7fe fb8f 	bl	8001db0 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003694:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003696:	2b03      	cmp	r3, #3
 8003698:	f000 808c 	beq.w	80037b4 <HAL_RCC_ClockConfig+0x208>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369c:	2b02      	cmp	r3, #2
 800369e:	f000 8094 	beq.w	80037ca <HAL_RCC_ClockConfig+0x21e>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d106      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x108>
 80036a6:	e09b      	b.n	80037e0 <HAL_RCC_ClockConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe fb82 	bl	8001db0 <HAL_GetTick>
 80036ac:	1bc0      	subs	r0, r0, r7
 80036ae:	4540      	cmp	r0, r8
 80036b0:	f200 80b4 	bhi.w	800381c <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b4:	69f3      	ldr	r3, [r6, #28]
 80036b6:	f013 0f18 	tst.w	r3, #24
 80036ba:	d1f5      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	079e      	lsls	r6, r3, #30
 80036c0:	d507      	bpl.n	80036d2 <HAL_RCC_ClockConfig+0x126>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80036c2:	68a0      	ldr	r0, [r4, #8]
 80036c4:	495a      	ldr	r1, [pc, #360]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 80036c6:	6a0a      	ldr	r2, [r1, #32]
 80036c8:	f002 020f 	and.w	r2, r2, #15
 80036cc:	4282      	cmp	r2, r0
 80036ce:	f200 8099 	bhi.w	8003804 <HAL_RCC_ClockConfig+0x258>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d2:	4956      	ldr	r1, [pc, #344]	@ (800382c <HAL_RCC_ClockConfig+0x280>)
 80036d4:	680a      	ldr	r2, [r1, #0]
 80036d6:	f002 020f 	and.w	r2, r2, #15
 80036da:	42aa      	cmp	r2, r5
 80036dc:	d90a      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x148>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	680a      	ldr	r2, [r1, #0]
 80036e0:	f022 020f 	bic.w	r2, r2, #15
 80036e4:	432a      	orrs	r2, r5
 80036e6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e8:	680a      	ldr	r2, [r1, #0]
 80036ea:	f002 020f 	and.w	r2, r2, #15
 80036ee:	42aa      	cmp	r2, r5
 80036f0:	f47f af73 	bne.w	80035da <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	075d      	lsls	r5, r3, #29
 80036f6:	d50b      	bpl.n	8003710 <HAL_RCC_ClockConfig+0x164>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80036f8:	494d      	ldr	r1, [pc, #308]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 80036fa:	68e0      	ldr	r0, [r4, #12]
 80036fc:	6a0a      	ldr	r2, [r1, #32]
 80036fe:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003702:	4290      	cmp	r0, r2
 8003704:	d204      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003706:	6a0a      	ldr	r2, [r1, #32]
 8003708:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800370c:	4302      	orrs	r2, r0
 800370e:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	0718      	lsls	r0, r3, #28
 8003712:	d50d      	bpl.n	8003730 <HAL_RCC_ClockConfig+0x184>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003714:	4946      	ldr	r1, [pc, #280]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 8003716:	6920      	ldr	r0, [r4, #16]
 8003718:	6a0a      	ldr	r2, [r1, #32]
 800371a:	0912      	lsrs	r2, r2, #4
 800371c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003720:	4290      	cmp	r0, r2
 8003722:	d205      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x184>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003724:	6a0a      	ldr	r2, [r1, #32]
 8003726:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800372a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800372e:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003730:	06d9      	lsls	r1, r3, #27
 8003732:	d50d      	bpl.n	8003750 <HAL_RCC_ClockConfig+0x1a4>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003734:	4a3e      	ldr	r2, [pc, #248]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 8003736:	6961      	ldr	r1, [r4, #20]
 8003738:	6a13      	ldr	r3, [r2, #32]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003740:	4299      	cmp	r1, r3
 8003742:	d205      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x1a4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003744:	6a13      	ldr	r3, [r2, #32]
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800374a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800374e:	6213      	str	r3, [r2, #32]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003750:	4b37      	ldr	r3, [pc, #220]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	f002 0218 	and.w	r2, r2, #24
 8003758:	2a08      	cmp	r2, #8
 800375a:	d061      	beq.n	8003820 <HAL_RCC_ClockConfig+0x274>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	f012 0f18 	tst.w	r2, #24
 8003762:	d143      	bne.n	80037ec <HAL_RCC_ClockConfig+0x240>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	0692      	lsls	r2, r2, #26
 8003768:	d54a      	bpl.n	8003800 <HAL_RCC_ClockConfig+0x254>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <HAL_RCC_ClockConfig+0x288>)
 800376e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003772:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003774:	4a2e      	ldr	r2, [pc, #184]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
 8003776:	4830      	ldr	r0, [pc, #192]	@ (8003838 <HAL_RCC_ClockConfig+0x28c>)
 8003778:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 800377a:	4930      	ldr	r1, [pc, #192]	@ (800383c <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800377c:	f002 020f 	and.w	r2, r2, #15
 8003780:	5c80      	ldrb	r0, [r0, r2]
 8003782:	4a2f      	ldr	r2, [pc, #188]	@ (8003840 <HAL_RCC_ClockConfig+0x294>)
 8003784:	40c3      	lsrs	r3, r0
}
 8003786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800378a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800378c:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800378e:	f7fe ba99 	b.w	8001cc4 <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	2a00      	cmp	r2, #0
 8003794:	d09d      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x126>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003796:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003798:	4b25      	ldr	r3, [pc, #148]	@ (8003830 <HAL_RCC_ClockConfig+0x284>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379a:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800379c:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379e:	f47f af66 	bne.w	800366e <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037a2:	0198      	lsls	r0, r3, #6
 80037a4:	f53f af6b 	bmi.w	800367e <HAL_RCC_ClockConfig+0xd2>
 80037a8:	e717      	b.n	80035da <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037aa:	f7fe fb01 	bl	8001db0 <HAL_GetTick>
 80037ae:	1bc3      	subs	r3, r0, r7
 80037b0:	4543      	cmp	r3, r8
 80037b2:	d833      	bhi.n	800381c <HAL_RCC_ClockConfig+0x270>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	69f3      	ldr	r3, [r6, #28]
 80037b6:	f003 0318 	and.w	r3, r3, #24
 80037ba:	2b18      	cmp	r3, #24
 80037bc:	d1f5      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1fe>
 80037be:	e77d      	b.n	80036bc <HAL_RCC_ClockConfig+0x110>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe faf6 	bl	8001db0 <HAL_GetTick>
 80037c4:	1bc0      	subs	r0, r0, r7
 80037c6:	4540      	cmp	r0, r8
 80037c8:	d828      	bhi.n	800381c <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ca:	69f3      	ldr	r3, [r6, #28]
 80037cc:	f003 0318 	and.w	r3, r3, #24
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d1f5      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x214>
 80037d4:	e772      	b.n	80036bc <HAL_RCC_ClockConfig+0x110>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037d6:	f7fe faeb 	bl	8001db0 <HAL_GetTick>
 80037da:	1bc0      	subs	r0, r0, r7
 80037dc:	4540      	cmp	r0, r8
 80037de:	d81d      	bhi.n	800381c <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80037e0:	69f3      	ldr	r3, [r6, #28]
 80037e2:	f003 0318 	and.w	r3, r3, #24
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d1f5      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x22a>
 80037ea:	e767      	b.n	80036bc <HAL_RCC_ClockConfig+0x110>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	f002 0218 	and.w	r2, r2, #24
 80037f2:	2a10      	cmp	r2, #16
 80037f4:	d02c      	beq.n	8003850 <HAL_RCC_ClockConfig+0x2a4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0318 	and.w	r3, r3, #24
 80037fc:	2b18      	cmp	r3, #24
 80037fe:	d011      	beq.n	8003824 <HAL_RCC_ClockConfig+0x278>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003800:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003802:	e7b7      	b.n	8003774 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003804:	6a0a      	ldr	r2, [r1, #32]
 8003806:	f022 020f 	bic.w	r2, r2, #15
 800380a:	4302      	orrs	r2, r0
 800380c:	620a      	str	r2, [r1, #32]
 800380e:	e760      	b.n	80036d2 <HAL_RCC_ClockConfig+0x126>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003810:	0399      	lsls	r1, r3, #14
 8003812:	f53f af34 	bmi.w	800367e <HAL_RCC_ClockConfig+0xd2>
 8003816:	e6e0      	b.n	80035da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003818:	2001      	movs	r0, #1
}
 800381a:	4770      	bx	lr
          return HAL_TIMEOUT;
 800381c:	2003      	movs	r0, #3
 800381e:	e6dd      	b.n	80035dc <HAL_RCC_ClockConfig+0x30>
    sysclockfreq = CSI_VALUE;
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCC_ClockConfig+0x298>)
 8003822:	e7a7      	b.n	8003774 <HAL_RCC_ClockConfig+0x1c8>
 8003824:	f7ff fad8 	bl	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
 8003828:	4603      	mov	r3, r0
 800382a:	e7a3      	b.n	8003774 <HAL_RCC_ClockConfig+0x1c8>
 800382c:	40022000 	.word	0x40022000
 8003830:	44020c00 	.word	0x44020c00
 8003834:	03d09000 	.word	0x03d09000
 8003838:	0800f9a4 	.word	0x0800f9a4
 800383c:	20000008 	.word	0x20000008
 8003840:	20000000 	.word	0x20000000
 8003844:	003d0900 	.word	0x003d0900
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003848:	059b      	lsls	r3, r3, #22
 800384a:	f53f af18 	bmi.w	800367e <HAL_RCC_ClockConfig+0xd2>
 800384e:	e6c4      	b.n	80035da <HAL_RCC_ClockConfig+0x2e>
    sysclockfreq = HSE_VALUE;
 8003850:	4b00      	ldr	r3, [pc, #0]	@ (8003854 <HAL_RCC_ClockConfig+0x2a8>)
 8003852:	e78f      	b.n	8003774 <HAL_RCC_ClockConfig+0x1c8>
 8003854:	007a1200 	.word	0x007a1200

08003858 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003858:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x4c>)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	f002 0218 	and.w	r2, r2, #24
 8003860:	2a08      	cmp	r2, #8
 8003862:	d018      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x3e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	f012 0f18 	tst.w	r2, #24
 800386a:	d108      	bne.n	800387e <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	0692      	lsls	r2, r2, #26
 8003870:	d50f      	bpl.n	8003892 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	480c      	ldr	r0, [pc, #48]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x50>)
 8003876:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800387a:	40d8      	lsrs	r0, r3
 800387c:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	f002 0218 	and.w	r2, r2, #24
 8003884:	2a10      	cmp	r2, #16
 8003886:	d00a      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0318 	and.w	r3, r3, #24
 800388e:	2b18      	cmp	r3, #24
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003892:	4805      	ldr	r0, [pc, #20]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x50>)
}
 8003894:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 8003896:	4805      	ldr	r0, [pc, #20]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x54>)
 8003898:	4770      	bx	lr
 800389a:	f7ff ba9d 	b.w	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
    sysclockfreq = HSE_VALUE;
 800389e:	4804      	ldr	r0, [pc, #16]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x58>)
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	44020c00 	.word	0x44020c00
 80038a8:	03d09000 	.word	0x03d09000
 80038ac:	003d0900 	.word	0x003d0900
 80038b0:	007a1200 	.word	0x007a1200

080038b4 <HAL_RCC_GetHCLKFreq>:
{
 80038b4:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80038b6:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <HAL_RCC_GetHCLKFreq+0x64>)
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	f002 0218 	and.w	r2, r2, #24
 80038be:	2a08      	cmp	r2, #8
 80038c0:	d023      	beq.n	800390a <HAL_RCC_GetHCLKFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	f012 0f18 	tst.w	r2, #24
 80038c8:	d113      	bne.n	80038f2 <HAL_RCC_GetHCLKFreq+0x3e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	0692      	lsls	r2, r2, #26
 80038ce:	d51a      	bpl.n	8003906 <HAL_RCC_GetHCLKFreq+0x52>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4812      	ldr	r0, [pc, #72]	@ (800391c <HAL_RCC_GetHCLKFreq+0x68>)
 80038d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80038d8:	40d8      	lsrs	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038da:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <HAL_RCC_GetHCLKFreq+0x64>)
 80038dc:	4910      	ldr	r1, [pc, #64]	@ (8003920 <HAL_RCC_GetHCLKFreq+0x6c>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4a10      	ldr	r2, [pc, #64]	@ (8003924 <HAL_RCC_GetHCLKFreq+0x70>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038ec:	40d8      	lsrs	r0, r3
 80038ee:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 80038f0:	bd08      	pop	{r3, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	f002 0218 	and.w	r2, r2, #24
 80038f8:	2a10      	cmp	r2, #16
 80038fa:	d00b      	beq.n	8003914 <HAL_RCC_GetHCLKFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0318 	and.w	r3, r3, #24
 8003902:	2b18      	cmp	r3, #24
 8003904:	d003      	beq.n	800390e <HAL_RCC_GetHCLKFreq+0x5a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003906:	4805      	ldr	r0, [pc, #20]	@ (800391c <HAL_RCC_GetHCLKFreq+0x68>)
 8003908:	e7e7      	b.n	80038da <HAL_RCC_GetHCLKFreq+0x26>
    sysclockfreq = CSI_VALUE;
 800390a:	4807      	ldr	r0, [pc, #28]	@ (8003928 <HAL_RCC_GetHCLKFreq+0x74>)
 800390c:	e7e5      	b.n	80038da <HAL_RCC_GetHCLKFreq+0x26>
 800390e:	f7ff fa63 	bl	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
 8003912:	e7e2      	b.n	80038da <HAL_RCC_GetHCLKFreq+0x26>
    sysclockfreq = HSE_VALUE;
 8003914:	4805      	ldr	r0, [pc, #20]	@ (800392c <HAL_RCC_GetHCLKFreq+0x78>)
 8003916:	e7e0      	b.n	80038da <HAL_RCC_GetHCLKFreq+0x26>
 8003918:	44020c00 	.word	0x44020c00
 800391c:	03d09000 	.word	0x03d09000
 8003920:	0800f9a4 	.word	0x0800f9a4
 8003924:	20000000 	.word	0x20000000
 8003928:	003d0900 	.word	0x003d0900
 800392c:	007a1200 	.word	0x007a1200

08003930 <HAL_RCC_GetPCLK1Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003930:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCC_GetPCLK1Freq+0x78>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003932:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	f002 0218 	and.w	r2, r2, #24
 800393a:	2a08      	cmp	r2, #8
 800393c:	d02c      	beq.n	8003998 <HAL_RCC_GetPCLK1Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	f012 0f18 	tst.w	r2, #24
 8003944:	d11c      	bne.n	8003980 <HAL_RCC_GetPCLK1Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	0692      	lsls	r2, r2, #26
 800394a:	d523      	bpl.n	8003994 <HAL_RCC_GetPCLK1Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b17      	ldr	r3, [pc, #92]	@ (80039ac <HAL_RCC_GetPCLK1Freq+0x7c>)
 8003950:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003954:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003956:	4914      	ldr	r1, [pc, #80]	@ (80039a8 <HAL_RCC_GetPCLK1Freq+0x78>)
 8003958:	4c15      	ldr	r4, [pc, #84]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x80>)
 800395a:	6a0a      	ldr	r2, [r1, #32]
 800395c:	4815      	ldr	r0, [pc, #84]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800395e:	f002 020f 	and.w	r2, r2, #15
 8003962:	5ca2      	ldrb	r2, [r4, r2]
 8003964:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003968:	40d3      	lsrs	r3, r2
 800396a:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800396c:	6a0a      	ldr	r2, [r1, #32]
 800396e:	4912      	ldr	r1, [pc, #72]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x88>)
 8003970:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003974:	5c88      	ldrb	r0, [r1, r2]
 8003976:	f000 001f 	and.w	r0, r0, #31
}
 800397a:	fa23 f000 	lsr.w	r0, r3, r0
 800397e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	f002 0218 	and.w	r2, r2, #24
 8003986:	2a10      	cmp	r2, #16
 8003988:	d00c      	beq.n	80039a4 <HAL_RCC_GetPCLK1Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f003 0318 	and.w	r3, r3, #24
 8003990:	2b18      	cmp	r3, #24
 8003992:	d003      	beq.n	800399c <HAL_RCC_GetPCLK1Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCC_GetPCLK1Freq+0x7c>)
 8003996:	e7de      	b.n	8003956 <HAL_RCC_GetPCLK1Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003998:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <HAL_RCC_GetPCLK1Freq+0x8c>)
 800399a:	e7dc      	b.n	8003956 <HAL_RCC_GetPCLK1Freq+0x26>
 800399c:	f7ff fa1c 	bl	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
 80039a0:	4603      	mov	r3, r0
 80039a2:	e7d8      	b.n	8003956 <HAL_RCC_GetPCLK1Freq+0x26>
    sysclockfreq = HSE_VALUE;
 80039a4:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x90>)
 80039a6:	e7d6      	b.n	8003956 <HAL_RCC_GetPCLK1Freq+0x26>
 80039a8:	44020c00 	.word	0x44020c00
 80039ac:	03d09000 	.word	0x03d09000
 80039b0:	0800f9a4 	.word	0x0800f9a4
 80039b4:	20000000 	.word	0x20000000
 80039b8:	0800f99c 	.word	0x0800f99c
 80039bc:	003d0900 	.word	0x003d0900
 80039c0:	007a1200 	.word	0x007a1200

080039c4 <HAL_RCC_GetPCLK2Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80039c4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x78>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c6:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	f002 0218 	and.w	r2, r2, #24
 80039ce:	2a08      	cmp	r2, #8
 80039d0:	d02c      	beq.n	8003a2c <HAL_RCC_GetPCLK2Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	f012 0f18 	tst.w	r2, #24
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_GetPCLK2Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	0692      	lsls	r2, r2, #26
 80039de:	d523      	bpl.n	8003a28 <HAL_RCC_GetPCLK2Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <HAL_RCC_GetPCLK2Freq+0x7c>)
 80039e4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80039e8:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039ea:	4914      	ldr	r1, [pc, #80]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x78>)
 80039ec:	4c15      	ldr	r4, [pc, #84]	@ (8003a44 <HAL_RCC_GetPCLK2Freq+0x80>)
 80039ee:	6a0a      	ldr	r2, [r1, #32]
 80039f0:	4815      	ldr	r0, [pc, #84]	@ (8003a48 <HAL_RCC_GetPCLK2Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80039f2:	f002 020f 	and.w	r2, r2, #15
 80039f6:	5ca2      	ldrb	r2, [r4, r2]
 80039f8:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039fc:	40d3      	lsrs	r3, r2
 80039fe:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003a00:	6a0a      	ldr	r2, [r1, #32]
 8003a02:	4912      	ldr	r1, [pc, #72]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x88>)
 8003a04:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003a08:	5c88      	ldrb	r0, [r1, r2]
 8003a0a:	f000 001f 	and.w	r0, r0, #31
}
 8003a0e:	fa23 f000 	lsr.w	r0, r3, r0
 8003a12:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	f002 0218 	and.w	r2, r2, #24
 8003a1a:	2a10      	cmp	r2, #16
 8003a1c:	d00c      	beq.n	8003a38 <HAL_RCC_GetPCLK2Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 0318 	and.w	r3, r3, #24
 8003a24:	2b18      	cmp	r3, #24
 8003a26:	d003      	beq.n	8003a30 <HAL_RCC_GetPCLK2Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003a2a:	e7de      	b.n	80039ea <HAL_RCC_GetPCLK2Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003a2c:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8003a2e:	e7dc      	b.n	80039ea <HAL_RCC_GetPCLK2Freq+0x26>
 8003a30:	f7ff f9d2 	bl	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
 8003a34:	4603      	mov	r3, r0
 8003a36:	e7d8      	b.n	80039ea <HAL_RCC_GetPCLK2Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <HAL_RCC_GetPCLK2Freq+0x90>)
 8003a3a:	e7d6      	b.n	80039ea <HAL_RCC_GetPCLK2Freq+0x26>
 8003a3c:	44020c00 	.word	0x44020c00
 8003a40:	03d09000 	.word	0x03d09000
 8003a44:	0800f9a4 	.word	0x0800f9a4
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	0800f99c 	.word	0x0800f99c
 8003a50:	003d0900 	.word	0x003d0900
 8003a54:	007a1200 	.word	0x007a1200

08003a58 <HAL_RCC_GetPCLK3Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCC_GetPCLK3Freq+0x78>)
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003a5a:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	f002 0218 	and.w	r2, r2, #24
 8003a62:	2a08      	cmp	r2, #8
 8003a64:	d02c      	beq.n	8003ac0 <HAL_RCC_GetPCLK3Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	f012 0f18 	tst.w	r2, #24
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_RCC_GetPCLK3Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	0692      	lsls	r2, r2, #26
 8003a72:	d523      	bpl.n	8003abc <HAL_RCC_GetPCLK3Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b17      	ldr	r3, [pc, #92]	@ (8003ad4 <HAL_RCC_GetPCLK3Freq+0x7c>)
 8003a78:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a7c:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a7e:	4914      	ldr	r1, [pc, #80]	@ (8003ad0 <HAL_RCC_GetPCLK3Freq+0x78>)
 8003a80:	4c15      	ldr	r4, [pc, #84]	@ (8003ad8 <HAL_RCC_GetPCLK3Freq+0x80>)
 8003a82:	6a0a      	ldr	r2, [r1, #32]
 8003a84:	4815      	ldr	r0, [pc, #84]	@ (8003adc <HAL_RCC_GetPCLK3Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003a86:	f002 020f 	and.w	r2, r2, #15
 8003a8a:	5ca2      	ldrb	r2, [r4, r2]
 8003a8c:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a90:	40d3      	lsrs	r3, r2
 8003a92:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003a94:	6a0a      	ldr	r2, [r1, #32]
 8003a96:	4912      	ldr	r1, [pc, #72]	@ (8003ae0 <HAL_RCC_GetPCLK3Freq+0x88>)
 8003a98:	f3c2 3202 	ubfx	r2, r2, #12, #3
 8003a9c:	5c88      	ldrb	r0, [r1, r2]
 8003a9e:	f000 001f 	and.w	r0, r0, #31
}
 8003aa2:	fa23 f000 	lsr.w	r0, r3, r0
 8003aa6:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	f002 0218 	and.w	r2, r2, #24
 8003aae:	2a10      	cmp	r2, #16
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_GetPCLK3Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 0318 	and.w	r3, r3, #24
 8003ab8:	2b18      	cmp	r3, #24
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCC_GetPCLK3Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCC_GetPCLK3Freq+0x7c>)
 8003abe:	e7de      	b.n	8003a7e <HAL_RCC_GetPCLK3Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003ac0:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_RCC_GetPCLK3Freq+0x8c>)
 8003ac2:	e7dc      	b.n	8003a7e <HAL_RCC_GetPCLK3Freq+0x26>
 8003ac4:	f7ff f988 	bl	8002dd8 <HAL_RCC_GetSysClockFreq.part.0>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	e7d8      	b.n	8003a7e <HAL_RCC_GetPCLK3Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_RCC_GetPCLK3Freq+0x90>)
 8003ace:	e7d6      	b.n	8003a7e <HAL_RCC_GetPCLK3Freq+0x26>
 8003ad0:	44020c00 	.word	0x44020c00
 8003ad4:	03d09000 	.word	0x03d09000
 8003ad8:	0800f9a4 	.word	0x0800f9a4
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	0800f99c 	.word	0x0800f99c
 8003ae4:	003d0900 	.word	0x003d0900
 8003ae8:	007a1200 	.word	0x007a1200

08003aec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003aee:	4c33      	ldr	r4, [pc, #204]	@ (8003bbc <RCCEx_PLL2_Config+0xd0>)
{
 8003af0:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003af8:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003afa:	f7fe f959 	bl	8001db0 <HAL_GetTick>
 8003afe:	4605      	mov	r5, r0

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b00:	e004      	b.n	8003b0c <RCCEx_PLL2_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b02:	f7fe f955 	bl	8001db0 <HAL_GetTick>
 8003b06:	1b40      	subs	r0, r0, r5
 8003b08:	2802      	cmp	r0, #2
 8003b0a:	d855      	bhi.n	8003bb8 <RCCEx_PLL2_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	011a      	lsls	r2, r3, #4
 8003b10:	d4f7      	bmi.n	8003b02 <RCCEx_PLL2_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003b12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b14:	6831      	ldr	r1, [r6, #0]
 8003b16:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b1a:	6872      	ldr	r2, [r6, #4]
 8003b1c:	f023 0303 	bic.w	r3, r3, #3
 8003b20:	430b      	orrs	r3, r1
 8003b22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b28:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	025b      	lsls	r3, r3, #9
 8003b32:	0412      	lsls	r2, r2, #16
 8003b34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	68b1      	ldr	r1, [r6, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	6972      	ldr	r2, [r6, #20]
 8003b40:	3901      	subs	r1, #1
 8003b42:	3a01      	subs	r2, #1
 8003b44:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003b48:	0612      	lsls	r2, r2, #24
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003b50:	4313      	orrs	r3, r2
 8003b52:	63e3      	str	r3, [r4, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003b54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b56:	69b2      	ldr	r2, [r6, #24]
 8003b58:	f023 030c 	bic.w	r3, r3, #12
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003b60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b62:	69f2      	ldr	r2, [r6, #28]
 8003b64:	f023 0320 	bic.w	r3, r3, #32
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003b6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b6e:	6a72      	ldr	r2, [r6, #36]	@ 0x24

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b70:	4d12      	ldr	r5, [pc, #72]	@ (8003bbc <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003b72:	4313      	orrs	r3, r2
 8003b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003b76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b78:	f023 0310 	bic.w	r3, r3, #16
 8003b7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003b7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b80:	6a32      	ldr	r2, [r6, #32]
 8003b82:	f36f 03cf 	bfc	r3, #3, #13
 8003b86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003b8a:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003b8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b8e:	f043 0310 	orr.w	r3, r3, #16
 8003b92:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b9a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003b9c:	f7fe f908 	bl	8001db0 <HAL_GetTick>
 8003ba0:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ba2:	e004      	b.n	8003bae <RCCEx_PLL2_Config+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ba4:	f7fe f904 	bl	8001db0 <HAL_GetTick>
 8003ba8:	1b00      	subs	r0, r0, r4
 8003baa:	2802      	cmp	r0, #2
 8003bac:	d804      	bhi.n	8003bb8 <RCCEx_PLL2_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bae:	682b      	ldr	r3, [r5, #0]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	d5f7      	bpl.n	8003ba4 <RCCEx_PLL2_Config+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003bb4:	2000      	movs	r0, #0

}
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003bb8:	2003      	movs	r0, #3
}
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	44020c00 	.word	0x44020c00

08003bc0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003bc0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8003bc2:	4c33      	ldr	r4, [pc, #204]	@ (8003c90 <RCCEx_PLL3_Config+0xd0>)
{
 8003bc4:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bce:	f7fe f8ef 	bl	8001db0 <HAL_GetTick>
 8003bd2:	4605      	mov	r5, r0

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bd4:	e004      	b.n	8003be0 <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003bd6:	f7fe f8eb 	bl	8001db0 <HAL_GetTick>
 8003bda:	1b40      	subs	r0, r0, r5
 8003bdc:	2802      	cmp	r0, #2
 8003bde:	d855      	bhi.n	8003c8c <RCCEx_PLL3_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	d4f7      	bmi.n	8003bd6 <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003be6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003be8:	6831      	ldr	r1, [r6, #0]
 8003bea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bee:	6872      	ldr	r2, [r6, #4]
 8003bf0:	f023 0303 	bic.w	r3, r3, #3
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bfa:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bfc:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	3a01      	subs	r2, #1
 8003c04:	025b      	lsls	r3, r3, #9
 8003c06:	0412      	lsls	r2, r2, #16
 8003c08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	68b1      	ldr	r1, [r6, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	6972      	ldr	r2, [r6, #20]
 8003c14:	3901      	subs	r1, #1
 8003c16:	3a01      	subs	r2, #1
 8003c18:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003c1c:	0612      	lsls	r2, r2, #24
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003c24:	4313      	orrs	r3, r2
 8003c26:	6463      	str	r3, [r4, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c2a:	69b2      	ldr	r2, [r6, #24]
 8003c2c:	f023 030c 	bic.w	r3, r3, #12
 8003c30:	4313      	orrs	r3, r2
 8003c32:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8003c34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c36:	69f2      	ldr	r2, [r6, #28]
 8003c38:	f023 0320 	bic.w	r3, r3, #32
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003c40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c42:	6a72      	ldr	r2, [r6, #36]	@ 0x24

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c44:	4d12      	ldr	r5, [pc, #72]	@ (8003c90 <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003c46:	4313      	orrs	r3, r2
 8003c48:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8003c4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8003c52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003c54:	6a32      	ldr	r2, [r6, #32]
 8003c56:	f36f 03cf 	bfc	r3, #3, #13
 8003c5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c5e:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8003c60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c62:	f043 0310 	orr.w	r3, r3, #16
 8003c66:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003c70:	f7fe f89e 	bl	8001db0 <HAL_GetTick>
 8003c74:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c76:	e004      	b.n	8003c82 <RCCEx_PLL3_Config+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c78:	f7fe f89a 	bl	8001db0 <HAL_GetTick>
 8003c7c:	1b00      	subs	r0, r0, r4
 8003c7e:	2802      	cmp	r0, #2
 8003c80:	d804      	bhi.n	8003c8c <RCCEx_PLL3_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	d5f7      	bpl.n	8003c78 <RCCEx_PLL3_Config+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003c88:	2000      	movs	r0, #0
}
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003c8c:	2003      	movs	r0, #3
}
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	44020c00 	.word	0x44020c00

08003c94 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c98:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003c9c:	01de      	lsls	r6, r3, #7
{
 8003c9e:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ca0:	d508      	bpl.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003ca2:	482d      	ldr	r0, [pc, #180]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0xc4>)
 8003ca4:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003ca6:	f8d0 10e8 	ldr.w	r1, [r0, #232]	@ 0xe8
 8003caa:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8003cae:	4329      	orrs	r1, r5
 8003cb0:	f8c0 10e8 	str.w	r1, [r0, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb4:	f013 0601 	ands.w	r6, r3, #1
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8003cba:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003cbc:	2905      	cmp	r1, #5
 8003cbe:	f201 8165 	bhi.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003cc2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003cc6:	000f      	.short	0x000f
 8003cc8:	07e10006 	.word	0x07e10006
 8003ccc:	000f000f 	.word	0x000f000f
 8003cd0:	000f      	.short	0x000f
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd2:	f104 0008 	add.w	r0, r4, #8
 8003cd6:	f7ff ff09 	bl	8003aec <RCCEx_PLL2_Config>
 8003cda:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cdc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ce0:	b94e      	cbnz	r6, 8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003ce2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce4:	2600      	movs	r6, #0
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003ce6:	4d1c      	ldr	r5, [pc, #112]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0xc4>)
 8003ce8:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
 8003cec:	f020 0007 	bic.w	r0, r0, #7
 8003cf0:	4301      	orrs	r1, r0
 8003cf2:	f8c5 10d8 	str.w	r1, [r5, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf6:	079d      	lsls	r5, r3, #30
 8003cf8:	d531      	bpl.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8003cfa:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003cfc:	2928      	cmp	r1, #40	@ 0x28
 8003cfe:	d82d      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003d00:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003d04:	002c07b4 	.word	0x002c07b4
 8003d08:	002c002c 	.word	0x002c002c
 8003d0c:	002c002c 	.word	0x002c002c
 8003d10:	002c002c 	.word	0x002c002c
 8003d14:	002c07e4 	.word	0x002c07e4
 8003d18:	002c002c 	.word	0x002c002c
 8003d1c:	002c002c 	.word	0x002c002c
 8003d20:	002c002c 	.word	0x002c002c
 8003d24:	002c07f0 	.word	0x002c07f0
 8003d28:	002c002c 	.word	0x002c002c
 8003d2c:	002c002c 	.word	0x002c002c
 8003d30:	002c002c 	.word	0x002c002c
 8003d34:	002c07b4 	.word	0x002c07b4
 8003d38:	002c002c 	.word	0x002c002c
 8003d3c:	002c002c 	.word	0x002c002c
 8003d40:	002c002c 	.word	0x002c002c
 8003d44:	002c07b4 	.word	0x002c07b4
 8003d48:	002c002c 	.word	0x002c002c
 8003d4c:	002c002c 	.word	0x002c002c
 8003d50:	002c002c 	.word	0x002c002c
 8003d54:	07b4      	.short	0x07b4
 8003d56:	bf00      	nop
 8003d58:	44020c00 	.word	0x44020c00
 8003d5c:	2601      	movs	r6, #1
 8003d5e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d60:	0758      	lsls	r0, r3, #29
 8003d62:	d51c      	bpl.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8003d64:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003d66:	2980      	cmp	r1, #128	@ 0x80
 8003d68:	f000 8700 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8003d6c:	f201 80c2 	bhi.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003d70:	b149      	cbz	r1, 8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8003d72:	2940      	cmp	r1, #64	@ 0x40
 8003d74:	f041 80c7 	bne.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1272>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d78:	f104 0008 	add.w	r0, r4, #8
 8003d7c:	f7ff feb6 	bl	8003aec <RCCEx_PLL2_Config>
 8003d80:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	f040 8542 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003d8c:	4f80      	ldr	r7, [pc, #512]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d8e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003d90:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003d94:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8003d98:	4301      	orrs	r1, r0
 8003d9a:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9e:	0719      	lsls	r1, r3, #28
 8003da0:	d51e      	bpl.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8003da2:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003da4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003da8:	f000 86ee 	beq.w	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xef4>
 8003dac:	f200 87fa 	bhi.w	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
 8003db0:	b151      	cbz	r1, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8003db2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003db6:	f040 87ff 	bne.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1124>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dba:	f104 0008 	add.w	r0, r4, #8
 8003dbe:	f7ff fe95 	bl	8003aec <RCCEx_PLL2_Config>
 8003dc2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	f040 8500 	bne.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003dce:	4f70      	ldr	r7, [pc, #448]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003dd0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003dd2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003dd6:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8003dda:	4301      	orrs	r1, r0
 8003ddc:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de0:	06df      	lsls	r7, r3, #27
 8003de2:	d51e      	bpl.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8003de4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8003de6:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003dea:	f000 86d9 	beq.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003dee:	f200 8787 	bhi.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003df2:	b151      	cbz	r1, 8003e0a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8003df4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003df8:	f040 878c 	bne.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1080>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dfc:	f104 0008 	add.w	r0, r4, #8
 8003e00:	f7ff fe74 	bl	8003aec <RCCEx_PLL2_Config>
 8003e04:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e0a:	2d00      	cmp	r5, #0
 8003e0c:	f040 8503 	bne.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb82>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003e10:	4f5f      	ldr	r7, [pc, #380]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e12:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003e14:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e18:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003e1c:	4301      	orrs	r1, r0
 8003e1e:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e22:	0698      	lsls	r0, r3, #26
 8003e24:	d51e      	bpl.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8003e26:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003e28:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003e2c:	f000 86c4 	beq.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003e30:	f200 87e2 	bhi.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1164>
 8003e34:	b151      	cbz	r1, 8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e36:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003e3a:	f040 87e7 	bne.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e3e:	f104 0008 	add.w	r0, r4, #8
 8003e42:	f7ff fe53 	bl	8003aec <RCCEx_PLL2_Config>
 8003e46:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	f040 84e7 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003e52:	4f4f      	ldr	r7, [pc, #316]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e54:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003e56:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e5a:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
 8003e5e:	4301      	orrs	r1, r0
 8003e60:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e64:	0659      	lsls	r1, r3, #25
 8003e66:	d51e      	bpl.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8003e68:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8003e6a:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8003e6e:	f000 863a 	beq.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
 8003e72:	f201 8015 	bhi.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
 8003e76:	b151      	cbz	r1, 8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e78:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8003e7c:	f041 801a 	bne.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e80:	f104 0008 	add.w	r0, r4, #8
 8003e84:	f7ff fe32 	bl	8003aec <RCCEx_PLL2_Config>
 8003e88:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	f040 84cb 	bne.w	800482a <HAL_RCCEx_PeriphCLKConfig+0xb96>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003e94:	4f3e      	ldr	r7, [pc, #248]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e96:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003e98:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e9c:	f421 11e0 	bic.w	r1, r1, #1835008	@ 0x1c0000
 8003ea0:	4301      	orrs	r1, r0
 8003ea2:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ea6:	061f      	lsls	r7, r3, #24
 8003ea8:	d51e      	bpl.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8003eaa:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003eac:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003eb0:	f000 8625 	beq.w	8004afe <HAL_RCCEx_PeriphCLKConfig+0xe6a>
 8003eb4:	f200 8792 	bhi.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003eb8:	b151      	cbz	r1, 8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8003eba:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003ebe:	f040 8797 	bne.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x115c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ec2:	f104 0008 	add.w	r0, r4, #8
 8003ec6:	f7ff fe11 	bl	8003aec <RCCEx_PLL2_Config>
 8003eca:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	f040 848f 	bne.w	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003ed6:	4f2e      	ldr	r7, [pc, #184]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ed8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003eda:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003ede:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8003ee2:	4301      	orrs	r1, r0
 8003ee4:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003ee8:	05d8      	lsls	r0, r3, #23
 8003eea:	d51e      	bpl.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8003eec:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003eee:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003ef2:	f000 85e0 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8003ef6:	f200 8711 	bhi.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003efa:	b151      	cbz	r1, 8003f12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003efc:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003f00:	f040 8716 	bne.w	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x109c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f04:	f104 0008 	add.w	r0, r4, #8
 8003f08:	f7ff fdf0 	bl	8003aec <RCCEx_PLL2_Config>
 8003f0c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	f040 8466 	bne.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003f18:	4f1d      	ldr	r7, [pc, #116]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f1a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003f1c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003f20:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003f24:	4301      	orrs	r1, r0
 8003f26:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003f2a:	0599      	lsls	r1, r3, #22
 8003f2c:	d520      	bpl.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8003f2e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003f32:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003f36:	f000 85ca 	beq.w	8004ace <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003f3a:	f200 87cd 	bhi.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 8003f3e:	b151      	cbz	r1, 8003f56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f40:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8003f44:	f040 87d2 	bne.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1258>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f48:	f104 0008 	add.w	r0, r4, #8
 8003f4c:	f7ff fdce 	bl	8003aec <RCCEx_PLL2_Config>
 8003f50:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	f040 844f 	bne.w	80047fa <HAL_RCCEx_PeriphCLKConfig+0xb66>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003f5c:	4f0c      	ldr	r7, [pc, #48]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f5e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003f62:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003f66:	f021 5160 	bic.w	r1, r1, #939524096	@ 0x38000000
 8003f6a:	4301      	orrs	r1, r0
 8003f6c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003f70:	055f      	lsls	r7, r3, #21
 8003f72:	d51a      	bpl.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8003f74:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8003f78:	2905      	cmp	r1, #5
 8003f7a:	f201 800a 	bhi.w	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x12fe>
 8003f7e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003f82:	0010      	.short	0x0010
 8003f84:	068a0009 	.word	0x068a0009
 8003f88:	00100010 	.word	0x00100010
 8003f8c:	0010      	.short	0x0010
 8003f8e:	bf00      	nop
 8003f90:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f94:	f104 0008 	add.w	r0, r4, #8
 8003f98:	f7ff fda8 	bl	8003aec <RCCEx_PLL2_Config>
 8003f9c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	f000 8403 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      status = ret;
 8003fa8:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003faa:	0518      	lsls	r0, r3, #20
 8003fac:	d51e      	bpl.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8003fae:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8003fb2:	2920      	cmp	r1, #32
 8003fb4:	f000 8573 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 8003fb8:	f200 86be 	bhi.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8003fbc:	b149      	cbz	r1, 8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003fbe:	2910      	cmp	r1, #16
 8003fc0:	f040 86c2 	bne.w	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fc4:	f104 0008 	add.w	r0, r4, #8
 8003fc8:	f7ff fd90 	bl	8003aec <RCCEx_PLL2_Config>
 8003fcc:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	f040 8409 	bne.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003fd8:	4fb0      	ldr	r7, [pc, #704]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8003fda:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003fde:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8003fe2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003fe6:	4301      	orrs	r1, r0
 8003fe8:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fec:	04d9      	lsls	r1, r3, #19
 8003fee:	d520      	bpl.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003ff0:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8003ff4:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003ff8:	f000 853c 	beq.w	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8003ffc:	f200 8742 	bhi.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x11f0>
 8004000:	b151      	cbz	r1, 8004018 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004002:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004006:	f040 8747 	bne.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1204>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800400a:	f104 0008 	add.w	r0, r4, #8
 800400e:	f7ff fd6d 	bl	8003aec <RCCEx_PLL2_Config>
 8004012:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004018:	2d00      	cmp	r5, #0
 800401a:	f040 83e9 	bne.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800401e:	4f9f      	ldr	r7, [pc, #636]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004020:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004024:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8004028:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800402c:	4301      	orrs	r1, r0
 800402e:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004032:	049f      	lsls	r7, r3, #18
 8004034:	d50f      	bpl.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8004036:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800403a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800403e:	f000 843c 	beq.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004042:	f240 84a7 	bls.w	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004046:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800404a:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800404e:	f000 843b 	beq.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004052:	2601      	movs	r6, #1
 8004054:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004056:	0458      	lsls	r0, r3, #17
 8004058:	d50f      	bpl.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (pPeriphClkInit->I2c2ClockSelection)
 800405a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800405e:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8004062:	f000 83e5 	beq.w	8004830 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004066:	f240 84a6 	bls.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800406a:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800406e:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8004072:	f000 83e4 	beq.w	800483e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004076:	2601      	movs	r6, #1
 8004078:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800407a:	0419      	lsls	r1, r3, #16
 800407c:	d50f      	bpl.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (pPeriphClkInit->I2c3ClockSelection)
 800407e:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8004082:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004086:	f000 8402 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800408a:	f240 848b 	bls.w	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800408e:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8004092:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004096:	f000 8401 	beq.w	800489c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800409a:	2601      	movs	r6, #1
 800409c:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800409e:	0557      	lsls	r7, r2, #21
 80040a0:	d50f      	bpl.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (pPeriphClkInit->I2c4ClockSelection)
 80040a2:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80040a6:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80040aa:	f000 83db 	beq.w	8004864 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80040ae:	f240 8468 	bls.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80040b2:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80040b6:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80040ba:	f000 83da 	beq.w	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80040be:	2601      	movs	r6, #1
 80040c0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80040c2:	03d8      	lsls	r0, r3, #15
 80040c4:	d50b      	bpl.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    switch (pPeriphClkInit->I3c1ClockSelection)
 80040c6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80040ca:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80040ce:	f000 8357 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80040d2:	f031 7100 	bics.w	r1, r1, #33554432	@ 0x2000000
 80040d6:	f000 835a 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0xafa>
 80040da:	2601      	movs	r6, #1
 80040dc:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040de:	0511      	lsls	r1, r2, #20
 80040e0:	d509      	bpl.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80040e2:	496e      	ldr	r1, [pc, #440]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80040e4:	69c8      	ldr	r0, [r1, #28]
 80040e6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80040ea:	61c8      	str	r0, [r1, #28]
 80040ec:	69c8      	ldr	r0, [r1, #28]
 80040ee:	f8d4 7104 	ldr.w	r7, [r4, #260]	@ 0x104
 80040f2:	4338      	orrs	r0, r7
 80040f4:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040f6:	039f      	lsls	r7, r3, #14
 80040f8:	d520      	bpl.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 80040fa:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80040fe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004102:	f000 84ab 	beq.w	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
 8004106:	f200 8693 	bhi.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x119c>
 800410a:	b151      	cbz	r1, 8004122 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800410c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004110:	f040 8698 	bne.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004114:	f104 0008 	add.w	r0, r4, #8
 8004118:	f7ff fce8 	bl	8003aec <RCCEx_PLL2_Config>
 800411c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004122:	2d00      	cmp	r5, #0
 8004124:	f040 835c 	bne.w	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004128:	4f5c      	ldr	r7, [pc, #368]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800412a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800412e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004132:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004136:	4301      	orrs	r1, r0
 8004138:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800413c:	0358      	lsls	r0, r3, #13
 800413e:	d520      	bpl.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004140:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004144:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004148:	f000 8464 	beq.w	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800414c:	f200 861c 	bhi.w	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10f4>
 8004150:	b151      	cbz	r1, 8004168 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004152:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004156:	f040 8621 	bne.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1108>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800415a:	f104 0008 	add.w	r0, r4, #8
 800415e:	f7ff fcc5 	bl	8003aec <RCCEx_PLL2_Config>
 8004162:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004168:	2d00      	cmp	r5, #0
 800416a:	f040 8349 	bne.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800416e:	4f4b      	ldr	r7, [pc, #300]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004170:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004174:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004178:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800417c:	4301      	orrs	r1, r0
 800417e:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004182:	0691      	lsls	r1, r2, #26
 8004184:	d520      	bpl.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004186:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800418a:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800418e:	f000 844d 	beq.w	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004192:	f200 8669 	bhi.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
 8004196:	b151      	cbz	r1, 80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004198:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800419c:	f040 866e 	bne.w	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041a0:	f104 0008 	add.w	r0, r4, #8
 80041a4:	f7ff fca2 	bl	8003aec <RCCEx_PLL2_Config>
 80041a8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80041ae:	2d00      	cmp	r5, #0
 80041b0:	f040 8310 	bne.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xb40>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80041b4:	4f39      	ldr	r7, [pc, #228]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80041b6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80041ba:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80041be:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80041c2:	4301      	orrs	r1, r0
 80041c4:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80041c8:	0657      	lsls	r7, r2, #25
 80041ca:	d520      	bpl.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 80041cc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80041d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80041d4:	f000 84ab 	beq.w	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80041d8:	f200 8670 	bhi.w	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1228>
 80041dc:	b151      	cbz	r1, 80041f4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80041de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80041e2:	f040 8675 	bne.w	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x123c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e6:	f104 0008 	add.w	r0, r4, #8
 80041ea:	f7ff fc7f 	bl	8003aec <RCCEx_PLL2_Config>
 80041ee:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80041f4:	2d00      	cmp	r5, #0
 80041f6:	f040 82ef 	bne.w	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80041fa:	4f28      	ldr	r7, [pc, #160]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80041fc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8004200:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004204:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8004208:	4301      	orrs	r1, r0
 800420a:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800420e:	0610      	lsls	r0, r2, #24
 8004210:	d520      	bpl.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004212:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8004216:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800421a:	f000 8413 	beq.w	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800421e:	f200 85a5 	bhi.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x10d8>
 8004222:	b151      	cbz	r1, 800423a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004224:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004228:	f040 85aa 	bne.w	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800422c:	f104 0008 	add.w	r0, r4, #8
 8004230:	f7ff fc5c 	bl	8003aec <RCCEx_PLL2_Config>
 8004234:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800423a:	2d00      	cmp	r5, #0
 800423c:	f040 82e2 	bne.w	8004804 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004240:	4f16      	ldr	r7, [pc, #88]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004242:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8004246:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800424a:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800424e:	4301      	orrs	r1, r0
 8004250:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004254:	05d1      	lsls	r1, r2, #23
 8004256:	d523      	bpl.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004258:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 800425c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004260:	f000 8459 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004264:	f200 85d6 	bhi.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004268:	b151      	cbz	r1, 8004280 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800426a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800426e:	f040 85db 	bne.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1194>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004272:	f104 0008 	add.w	r0, r4, #8
 8004276:	f7ff fc39 	bl	8003aec <RCCEx_PLL2_Config>
 800427a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004280:	2d00      	cmp	r5, #0
 8004282:	f040 82a2 	bne.w	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb36>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004286:	4f05      	ldr	r7, [pc, #20]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004288:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 800428c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004290:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004294:	4301      	orrs	r1, r0
 8004296:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800429c:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042a0:	031f      	lsls	r7, r3, #12
 80042a2:	d522      	bpl.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80042a4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80042a8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80042ac:	f000 84bb 	beq.w	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xf92>
 80042b0:	f200 8630 	bhi.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1280>
 80042b4:	2900      	cmp	r1, #0
 80042b6:	f000 848e 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
 80042ba:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80042be:	f040 8631 	bne.w	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1290>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042c2:	f104 0008 	add.w	r0, r4, #8
 80042c6:	f7ff fc11 	bl	8003aec <RCCEx_PLL2_Config>
 80042ca:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80042d0:	2d00      	cmp	r5, #0
 80042d2:	f040 8488 	bne.w	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80042d6:	4fa2      	ldr	r7, [pc, #648]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042d8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80042dc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80042e0:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80042e4:	4301      	orrs	r1, r0
 80042e6:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80042ea:	02d8      	lsls	r0, r3, #11
 80042ec:	d522      	bpl.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch (pPeriphClkInit->Sai2ClockSelection)
 80042ee:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 80042f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80042f6:	f000 8489 	beq.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xf78>
 80042fa:	f200 8617 	bhi.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1298>
 80042fe:	2900      	cmp	r1, #0
 8004300:	f000 84a6 	beq.w	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004304:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8004308:	f040 8618 	bne.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800430c:	f104 0008 	add.w	r0, r4, #8
 8004310:	f7ff fbec 	bl	8003aec <RCCEx_PLL2_Config>
 8004314:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800431a:	2d00      	cmp	r5, #0
 800431c:	f040 8480 	bne.w	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004320:	4f8f      	ldr	r7, [pc, #572]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004322:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8004326:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800432a:	f421 1160 	bic.w	r1, r1, #3670016	@ 0x380000
 800432e:	4301      	orrs	r1, r0
 8004330:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004334:	0299      	lsls	r1, r3, #10
 8004336:	d50c      	bpl.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8004338:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 800433c:	2902      	cmp	r1, #2
 800433e:	f000 8162 	beq.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004342:	f240 8167 	bls.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004346:	3903      	subs	r1, #3
 8004348:	2902      	cmp	r1, #2
 800434a:	f240 8163 	bls.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800434e:	2601      	movs	r6, #1
 8004350:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004352:	0597      	lsls	r7, r2, #22
 8004354:	d507      	bpl.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004356:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 800435a:	f031 0008 	bics.w	r0, r1, #8
 800435e:	f000 817b 	beq.w	8004658 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 8004362:	2601      	movs	r6, #1
 8004364:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004366:	0198      	lsls	r0, r3, #6
 8004368:	f100 8184 	bmi.w	8004674 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800436c:	0159      	lsls	r1, r3, #5
 800436e:	d50d      	bpl.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    switch (pPeriphClkInit->RngClockSelection)
 8004370:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
 8004374:	2910      	cmp	r1, #16
 8004376:	f000 82db 	beq.w	8004930 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800437a:	f240 8325 	bls.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800437e:	f021 0010 	bic.w	r0, r1, #16
 8004382:	2820      	cmp	r0, #32
 8004384:	f000 82d9 	beq.w	800493a <HAL_RCCEx_PeriphCLKConfig+0xca6>
 8004388:	2601      	movs	r6, #1
 800438a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800438c:	025f      	lsls	r7, r3, #9
 800438e:	d509      	bpl.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x710>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004390:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 8004394:	2900      	cmp	r1, #0
 8004396:	f000 82a5 	beq.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800439a:	2940      	cmp	r1, #64	@ 0x40
 800439c:	f000 82d8 	beq.w	8004950 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
 80043a0:	2601      	movs	r6, #1
 80043a2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043a4:	0218      	lsls	r0, r3, #8
 80043a6:	d509      	bpl.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80043a8:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80043ac:	2900      	cmp	r1, #0
 80043ae:	f000 82ab 	beq.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80043b2:	2980      	cmp	r1, #128	@ 0x80
 80043b4:	f000 82da 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 80043b8:	2601      	movs	r6, #1
 80043ba:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80043bc:	0119      	lsls	r1, r3, #4
 80043be:	d50c      	bpl.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (pPeriphClkInit->Spi1ClockSelection)
 80043c0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80043c4:	2904      	cmp	r1, #4
 80043c6:	f200 85d9 	bhi.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x12e8>
 80043ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 80043ce:	0109      	.short	0x0109
 80043d0:	0417040f 	.word	0x0417040f
 80043d4:	010e010e 	.word	0x010e010e
      status = ret;
 80043d8:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80043da:	00df      	lsls	r7, r3, #3
 80043dc:	d528      	bpl.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    switch (pPeriphClkInit->Spi2ClockSelection)
 80043de:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
 80043e2:	2920      	cmp	r1, #32
 80043e4:	d822      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x798>
 80043e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80043ea:	01a8      	.short	0x01a8
 80043ec:	00210021 	.word	0x00210021
 80043f0:	00210021 	.word	0x00210021
 80043f4:	00210021 	.word	0x00210021
 80043f8:	04690021 	.word	0x04690021
 80043fc:	00210021 	.word	0x00210021
 8004400:	00210021 	.word	0x00210021
 8004404:	00210021 	.word	0x00210021
 8004408:	04610021 	.word	0x04610021
 800440c:	00210021 	.word	0x00210021
 8004410:	00210021 	.word	0x00210021
 8004414:	00210021 	.word	0x00210021
 8004418:	01ad0021 	.word	0x01ad0021
 800441c:	00210021 	.word	0x00210021
 8004420:	00210021 	.word	0x00210021
 8004424:	00210021 	.word	0x00210021
 8004428:	01ad0021 	.word	0x01ad0021
 800442c:	2601      	movs	r6, #1
 800442e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004430:	0098      	lsls	r0, r3, #2
 8004432:	d520      	bpl.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8004434:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8004438:	2980      	cmp	r1, #128	@ 0x80
 800443a:	f000 83fd 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800443e:	f200 8581 	bhi.w	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
 8004442:	2900      	cmp	r1, #0
 8004444:	f000 840b 	beq.w	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xfca>
 8004448:	2940      	cmp	r1, #64	@ 0x40
 800444a:	f040 8582 	bne.w	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x12be>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800444e:	f104 0008 	add.w	r0, r4, #8
 8004452:	f7ff fb4b 	bl	8003aec <RCCEx_PLL2_Config>
 8004456:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800445c:	2d00      	cmp	r5, #0
 800445e:	f040 83f5 	bne.w	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004462:	4f3f      	ldr	r7, [pc, #252]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004464:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 8004468:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800446c:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004470:	4301      	orrs	r1, r0
 8004472:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004476:	0059      	lsls	r1, r3, #1
 8004478:	d520      	bpl.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x828>
    switch (pPeriphClkInit->Spi4ClockSelection)
 800447a:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 800447e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004482:	f000 82a8 	beq.w	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004486:	f200 8463 	bhi.w	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800448a:	b151      	cbz	r1, 80044a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800448c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004490:	f040 8468 	bne.w	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004494:	f104 0008 	add.w	r0, r4, #8
 8004498:	f7ff fb28 	bl	8003aec <RCCEx_PLL2_Config>
 800449c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	f040 81bf 	bne.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb92>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80044a8:	4f2d      	ldr	r7, [pc, #180]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044aa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 80044ae:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80044b2:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 80044b6:	4301      	orrs	r1, r0
 80044b8:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da1f      	bge.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    switch (pPeriphClkInit->Spi5ClockSelection)
 80044c0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c8:	f000 8290 	beq.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80044cc:	f200 8478 	bhi.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x112c>
 80044d0:	b14b      	cbz	r3, 80044e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d6:	f040 847d 	bne.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044da:	f104 0008 	add.w	r0, r4, #8
 80044de:	f7ff fb05 	bl	8003aec <RCCEx_PLL2_Config>
 80044e2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044e4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	f040 8178 	bne.w	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80044ec:	491c      	ldr	r1, [pc, #112]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 80044f2:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fa:	4303      	orrs	r3, r0
 80044fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004500:	07d3      	lsls	r3, r2, #31
 8004502:	d51f      	bpl.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8004504:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	f000 8278 	beq.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004510:	f200 849c 	bhi.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x11b8>
 8004514:	b14b      	cbz	r3, 800452a <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451a:	f040 84a1 	bne.w	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800451e:	f104 0008 	add.w	r0, r4, #8
 8004522:	f7ff fae3 	bl	8003aec <RCCEx_PLL2_Config>
 8004526:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004528:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800452a:	2d00      	cmp	r5, #0
 800452c:	f040 8176 	bne.w	800481c <HAL_RCCEx_PeriphCLKConfig+0xb88>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004530:	490b      	ldr	r1, [pc, #44]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004532:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8004536:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 800453a:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 800453e:	4303      	orrs	r3, r0
 8004540:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004544:	0797      	lsls	r7, r2, #30
 8004546:	d51f      	bpl.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch (pPeriphClkInit->OspiClockSelection)
 8004548:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 800454c:	2b03      	cmp	r3, #3
 800454e:	f200 8519 	bhi.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
 8004552:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004556:	000c      	.short	0x000c
 8004558:	02f80007 	.word	0x02f80007
 800455c:	000c      	.short	0x000c
 800455e:	bf00      	nop
 8004560:	44020c00 	.word	0x44020c00
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004564:	49bd      	ldr	r1, [pc, #756]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004566:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456c:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 800456e:	2d00      	cmp	r5, #0
 8004570:	f040 814c 	bne.w	800480c <HAL_RCCEx_PeriphCLKConfig+0xb78>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004574:	49b9      	ldr	r1, [pc, #740]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004576:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 800457a:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	4303      	orrs	r3, r0
 8004584:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004588:	0750      	lsls	r0, r2, #29
 800458a:	d50c      	bpl.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
    switch (pPeriphClkInit->FdcanClockSelection)
 800458c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8004590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004594:	f000 82e1 	beq.w	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xec6>
 8004598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800459c:	d048      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04c      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80045a2:	2601      	movs	r6, #1
 80045a4:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045a6:	06d1      	lsls	r1, r2, #27
 80045a8:	d50b      	bpl.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    switch (pPeriphClkInit->UsbClockSelection)
 80045aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	f000 80d4 	beq.w	800475c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80045b4:	2b30      	cmp	r3, #48	@ 0x30
 80045b6:	f000 80d7 	beq.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	f000 8266 	beq.w	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80045c0:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045c2:	0713      	lsls	r3, r2, #28
 80045c4:	d509      	bpl.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x946>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80045c6:	4aa5      	ldr	r2, [pc, #660]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045c8:	f8d4 10fc 	ldr.w	r1, [r4, #252]	@ 0xfc
 80045cc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80045d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80045d4:	430b      	orrs	r3, r1
 80045d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 80045da:	4630      	mov	r0, r6
 80045dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	489e      	ldr	r0, [pc, #632]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045e2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80045e4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80045e8:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	f47f aef4 	bne.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80045f0:	4f9a      	ldr	r7, [pc, #616]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045f2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 80045f6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80045fa:	f021 0107 	bic.w	r1, r1, #7
 80045fe:	4301      	orrs	r1, r0
 8004600:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8004604:	e6e9      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x746>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004606:	f104 0008 	add.w	r0, r4, #8
 800460a:	f7ff fa6f 	bl	8003aec <RCCEx_PLL2_Config>
 800460e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004614:	2d00      	cmp	r5, #0
 8004616:	f040 8189 	bne.w	800492c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800461a:	4f90      	ldr	r7, [pc, #576]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800461c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8004620:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004624:	f021 0107 	bic.w	r1, r1, #7
 8004628:	4301      	orrs	r1, r0
 800462a:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 800462e:	e690      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x6be>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004630:	f104 0008 	add.w	r0, r4, #8
 8004634:	f7ff fa5a 	bl	8003aec <RCCEx_PLL2_Config>
 8004638:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800463c:	2d00      	cmp	r5, #0
 800463e:	f040 80e3 	bne.w	8004808 <HAL_RCCEx_PeriphCLKConfig+0xb74>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004642:	4986      	ldr	r1, [pc, #536]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004644:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8004648:	f8d1 30e8 	ldr.w	r3, [r1, #232]	@ 0xe8
 800464c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004650:	4303      	orrs	r3, r0
 8004652:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004656:	e7a6      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
    if (ret == HAL_OK)
 8004658:	2d00      	cmp	r5, #0
 800465a:	f040 82b9 	bne.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800465e:	4f7f      	ldr	r7, [pc, #508]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004660:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8004664:	f020 0008 	bic.w	r0, r0, #8
 8004668:	4301      	orrs	r1, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800466a:	0198      	lsls	r0, r3, #6
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800466c:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004670:	f57f ae7c 	bpl.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004674:	4f7a      	ldr	r7, [pc, #488]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0xbcc>)
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
    tickstart = HAL_GetTick();
 800467e:	f7fd fb97 	bl	8001db0 <HAL_GetTick>
 8004682:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004686:	f7fd fb93 	bl	8001db0 <HAL_GetTick>
 800468a:	eba0 0008 	sub.w	r0, r0, r8
 800468e:	2802      	cmp	r0, #2
 8004690:	f200 8330 	bhi.w	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1060>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	07d9      	lsls	r1, r3, #31
 8004698:	d5f5      	bpl.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    if (ret == HAL_OK)
 800469a:	2d00      	cmp	r5, #0
 800469c:	f040 832b 	bne.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1062>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046a0:	4f6e      	ldr	r7, [pc, #440]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046a2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046aa:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80046ae:	d028      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d026      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046b4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80046bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046c0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80046c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046cc:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d0:	f421 7240 	bic.w	r2, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 80046d4:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d8:	07ca      	lsls	r2, r1, #31
 80046da:	d512      	bpl.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        tickstart = HAL_GetTick();
 80046dc:	f7fd fb68 	bl	8001db0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80046e4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e6:	e006      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fd fb62 	bl	8001db0 <HAL_GetTick>
 80046ec:	eba0 0008 	sub.w	r0, r0, r8
 80046f0:	4548      	cmp	r0, r9
 80046f2:	f200 843d 	bhi.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046fa:	0798      	lsls	r0, r3, #30
 80046fc:	d5f4      	bpl.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80046fe:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8004702:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004706:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800470a:	f000 8426 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x12c6>
 800470e:	4953      	ldr	r1, [pc, #332]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004710:	69ca      	ldr	r2, [r1, #28]
 8004712:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004716:	61ca      	str	r2, [r1, #28]
 8004718:	4a50      	ldr	r2, [pc, #320]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800471a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471e:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 8004722:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004726:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
 800472a:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800472e:	430b      	orrs	r3, r1
 8004730:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004734:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004738:	e618      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4848      	ldr	r0, [pc, #288]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800473c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800473e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004742:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004744:	bb8d      	cbnz	r5, 80047aa <HAL_RCCEx_PeriphCLKConfig+0xb16>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004746:	4f45      	ldr	r7, [pc, #276]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004748:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 800474c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8004750:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004754:	4301      	orrs	r1, r0
 8004756:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 800475a:	e669      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x79c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800475c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004760:	f7ff fa2e 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004764:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004766:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004768:	bb6d      	cbnz	r5, 80047c6 <HAL_RCCEx_PeriphCLKConfig+0xb32>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800476a:	493c      	ldr	r1, [pc, #240]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800476c:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 8004770:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 8004774:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004778:	4303      	orrs	r3, r0
 800477a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800477e:	e720      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004780:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004784:	f7ff fa1c 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004788:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800478e:	2d00      	cmp	r5, #0
 8004790:	f040 80e9 	bne.w	8004966 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004794:	4f31      	ldr	r7, [pc, #196]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004796:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800479a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800479e:	f021 7140 	bic.w	r1, r1, #50331648	@ 0x3000000
 80047a2:	4301      	orrs	r1, r0
 80047a4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80047a8:	e499      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x44a>
      status = ret;
 80047aa:	462e      	mov	r6, r5
 80047ac:	e640      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80047ae:	4f2b      	ldr	r7, [pc, #172]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047b0:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80047b4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80047b8:	f021 0107 	bic.w	r1, r1, #7
 80047bc:	4301      	orrs	r1, r0
 80047be:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80047c2:	f7ff bbf2 	b.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
      status = ret;
 80047c6:	462e      	mov	r6, r5
 80047c8:	e6fb      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      status = ret;
 80047ca:	462e      	mov	r6, r5
 80047cc:	e568      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      status = ret;
 80047ce:	462e      	mov	r6, r5
 80047d0:	f7ff bb06 	b.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      status = ret;
 80047d4:	462e      	mov	r6, r5
 80047d6:	e4f7      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = ret;
 80047d8:	462e      	mov	r6, r5
 80047da:	e518      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x57a>
      status = ret;
 80047dc:	462e      	mov	r6, r5
 80047de:	e68f      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      status = ret;
 80047e0:	462e      	mov	r6, r5
 80047e2:	e4ab      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      status = ret;
 80047e4:	462e      	mov	r6, r5
 80047e6:	f7ff bba0 	b.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x296>
      status = ret;
 80047ea:	462e      	mov	r6, r5
 80047ec:	f7ff bbfe 	b.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x358>
      status = ret;
 80047f0:	462e      	mov	r6, r5
 80047f2:	e41e      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      status = ret;
 80047f4:	462e      	mov	r6, r5
 80047f6:	f7ff bb77 	b.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      status = ret;
 80047fa:	462e      	mov	r6, r5
 80047fc:	f7ff bbb8 	b.w	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      status = ret;
 8004800:	462e      	mov	r6, r5
 8004802:	e4be      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      status = ret;
 8004804:	462e      	mov	r6, r5
 8004806:	e525      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      status = ret;
 8004808:	462e      	mov	r6, r5
 800480a:	e6cc      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      status = ret;
 800480c:	462e      	mov	r6, r5
 800480e:	e6bb      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      status = ret;
 8004810:	462e      	mov	r6, r5
 8004812:	f7ff bac4 	b.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      status = ret;
 8004816:	462e      	mov	r6, r5
 8004818:	f7ff bb03 	b.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      status = ret;
 800481c:	462e      	mov	r6, r5
 800481e:	e691      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      status = ret;
 8004820:	462e      	mov	r6, r5
 8004822:	f7ff bb1f 	b.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 8004826:	462e      	mov	r6, r5
 8004828:	e648      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x828>
      status = ret;
 800482a:	462e      	mov	r6, r5
 800482c:	f7ff bb3b 	b.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004830:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004834:	f7ff f9c4 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004838:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800483e:	2d00      	cmp	r5, #0
 8004840:	f040 80bf 	bne.w	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004844:	4f05      	ldr	r7, [pc, #20]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004846:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800484a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800484e:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8004852:	4301      	orrs	r1, r0
 8004854:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004858:	e40f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800485a:	bf00      	nop
 800485c:	44020c00 	.word	0x44020c00
 8004860:	44020800 	.word	0x44020800
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004864:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004868:	f7ff f9aa 	bl	8003bc0 <RCCEx_PLL3_Config>
 800486c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004872:	2d00      	cmp	r5, #0
 8004874:	f040 808b 	bne.w	800498e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004878:	4fc2      	ldr	r7, [pc, #776]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800487a:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800487e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8004882:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 8004886:	4301      	orrs	r1, r0
 8004888:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 800488c:	e419      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800488e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004892:	f7ff f995 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004896:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800489c:	2d00      	cmp	r5, #0
 800489e:	f040 8087 	bne.w	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80048a2:	4fb8      	ldr	r7, [pc, #736]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80048a4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80048a8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80048ac:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80048b0:	4301      	orrs	r1, r0
 80048b2:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80048b6:	f7ff bbf2 	b.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x40a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ba:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80048be:	f7ff f97f 	bl	8003bc0 <RCCEx_PLL3_Config>
 80048c2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	d168      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80048cc:	4fad      	ldr	r7, [pc, #692]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80048ce:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80048d2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80048d6:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80048da:	4301      	orrs	r1, r0
 80048dc:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80048e0:	f7ff bbb9 	b.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e4:	48a7      	ldr	r0, [pc, #668]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80048e6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80048e8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80048ec:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	d137      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xcce>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80048f2:	4fa4      	ldr	r7, [pc, #656]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80048f4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80048f8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80048fc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004900:	4301      	orrs	r1, r0
 8004902:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004906:	e54d      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x710>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004908:	489e      	ldr	r0, [pc, #632]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800490a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800490c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004910:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004912:	2d00      	cmp	r5, #0
 8004914:	d133      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xcea>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004916:	4f9b      	ldr	r7, [pc, #620]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004918:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 800491c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8004920:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004924:	4301      	orrs	r1, r0
 8004926:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 800492a:	e547      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x728>
      status = ret;
 800492c:	462e      	mov	r6, r5
 800492e:	e510      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x6be>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	4f94      	ldr	r7, [pc, #592]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004934:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8004938:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (ret == HAL_OK)
 800493a:	2d00      	cmp	r5, #0
 800493c:	d149      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800493e:	4f91      	ldr	r7, [pc, #580]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004940:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8004944:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 8004948:	4301      	orrs	r1, r0
 800494a:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 800494e:	e51d      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004950:	f104 0008 	add.w	r0, r4, #8
 8004954:	f7ff f8ca 	bl	8003aec <RCCEx_PLL2_Config>
 8004958:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800495e:	2d00      	cmp	r5, #0
 8004960:	d0c7      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
      status = ret;
 8004962:	462e      	mov	r6, r5
 8004964:	e51e      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x710>
      status = ret;
 8004966:	462e      	mov	r6, r5
 8004968:	f7ff bbb9 	b.w	80040de <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800496c:	f104 0008 	add.w	r0, r4, #8
 8004970:	f7ff f8bc 	bl	8003aec <RCCEx_PLL2_Config>
 8004974:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800497a:	2d00      	cmp	r5, #0
 800497c:	d0cb      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc82>
      status = ret;
 800497e:	462e      	mov	r6, r5
 8004980:	e51c      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8004982:	2900      	cmp	r1, #0
 8004984:	f47f ab9b 	bne.w	80040be <HAL_RCCEx_PeriphCLKConfig+0x42a>
    if (ret == HAL_OK)
 8004988:	2d00      	cmp	r5, #0
 800498a:	f43f af75 	beq.w	8004878 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
      status = ret;
 800498e:	462e      	mov	r6, r5
 8004990:	f7ff bb97 	b.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8004994:	2900      	cmp	r1, #0
 8004996:	f47f ab5c 	bne.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 800499a:	2d00      	cmp	r5, #0
 800499c:	d096      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc38>
      status = ret;
 800499e:	462e      	mov	r6, r5
 80049a0:	f7ff bb59 	b.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (pPeriphClkInit->I2c3ClockSelection)
 80049a4:	2900      	cmp	r1, #0
 80049a6:	f47f ab78 	bne.w	800409a <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 80049aa:	2d00      	cmp	r5, #0
 80049ac:	f43f af79 	beq.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
      status = ret;
 80049b0:	462e      	mov	r6, r5
 80049b2:	f7ff bb74 	b.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (pPeriphClkInit->I2c2ClockSelection)
 80049b6:	2900      	cmp	r1, #0
 80049b8:	f47f ab5d 	bne.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    if (ret == HAL_OK)
 80049bc:	2d00      	cmp	r5, #0
 80049be:	f43f af41 	beq.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      status = ret;
 80049c2:	462e      	mov	r6, r5
 80049c4:	f7ff bb59 	b.w	800407a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (pPeriphClkInit->RngClockSelection)
 80049c8:	2900      	cmp	r1, #0
 80049ca:	f47f acdd 	bne.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if (ret == HAL_OK)
 80049ce:	2d00      	cmp	r5, #0
 80049d0:	d0b5      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
      status = ret;
 80049d2:	462e      	mov	r6, r5
 80049d4:	e4da      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049d6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049da:	f7ff f8f1 	bl	8003bc0 <RCCEx_PLL3_Config>
 80049de:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	f47f af1e 	bne.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80049ea:	e55d      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ec:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049f0:	f7ff f8e6 	bl	8003bc0 <RCCEx_PLL3_Config>
 80049f4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049f6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80049f8:	2d00      	cmp	r5, #0
 80049fa:	f47f aeef 	bne.w	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
 80049fe:	e575      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x858>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a00:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a04:	f7ff f8dc 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004a08:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a0a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a0c:	2d00      	cmp	r5, #0
 8004a0e:	f47f af05 	bne.w	800481c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004a12:	e58d      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x89c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a14:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a18:	f7ff f8d2 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004a1c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	f47f aeec 	bne.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8004a28:	f7ff bba1 	b.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x4da>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a2c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a30:	f7ff f8c6 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004a34:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	f47f aeca 	bne.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8004a40:	f7ff bbb8 	b.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a44:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a48:	f7ff f8ba 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004a4c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	f47f aed6 	bne.w	8004804 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8004a58:	f7ff bbf2 	b.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a5c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a60:	f7ff f8ae 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004a64:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	f47f aeb8 	bne.w	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004a70:	f7ff bb5a 	b.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a74:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a78:	f7ff f8a2 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004a7c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	f47f aeb4 	bne.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8004a88:	f7ff bac9 	b.w	800401e <HAL_RCCEx_PeriphCLKConfig+0x38a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8c:	493d      	ldr	r1, [pc, #244]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004a8e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a94:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	f47f ae95 	bne.w	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8004a9c:	e665      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a9e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004aa2:	f7ff f88d 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004aa6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	f47f ae9c 	bne.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004ab2:	f7ff ba91 	b.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ab6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004aba:	f7ff f881 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004abe:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	f47f ae8d 	bne.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
 8004aca:	f7ff ba25 	b.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x284>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ace:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ad2:	f7ff f875 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004ad6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	f47f ae8c 	bne.w	80047fa <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004ae2:	f7ff ba3b 	b.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ae6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004aea:	f7ff f869 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004aee:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	f47f ae98 	bne.w	800482a <HAL_RCCEx_PeriphCLKConfig+0xb96>
 8004afa:	f7ff b9cb 	b.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004afe:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b02:	f7ff f85d 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004b06:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	f47f ae71 	bne.w	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8004b12:	f7ff b9e0 	b.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b16:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b1a:	f7ff f851 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004b1e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b24:	2d00      	cmp	r5, #0
 8004b26:	f47f ae50 	bne.w	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb36>
 8004b2a:	f7ff bbac 	b.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b2e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b32:	f7ff f845 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004b36:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	f47f ae4b 	bne.w	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004b42:	f7ff bb5a 	b.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x566>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b46:	f104 0008 	add.w	r0, r4, #8
 8004b4a:	f7fe ffcf 	bl	8003aec <RCCEx_PLL2_Config>
 8004b4e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b50:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	f47f ae5a 	bne.w	800480c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004b58:	e50c      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5a:	490a      	ldr	r1, [pc, #40]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004b5c:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b62:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8004b64:	2d00      	cmp	r5, #0
 8004b66:	f47f ae4f 	bne.w	8004808 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b6a:	e56a      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b6c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b70:	f7ff f826 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004b74:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	f47f ae48 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004b80:	f7ff b904 	b.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004b84:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b88:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b8c:	f7ff f818 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004b90:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	f47f ae19 	bne.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8004b9c:	f7ff b917 	b.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x13a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ba0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ba4:	f7ff f80c 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004ba8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	f47f ae31 	bne.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004bb4:	f7ff b92c 	b.w	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bb8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004bbc:	f7ff f800 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004bc0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	f47f ae2a 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004bcc:	f7ff b941 	b.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      status = ret;
 8004bd0:	462e      	mov	r6, r5
 8004bd2:	f7ff bbc8 	b.w	8004366 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd6:	48ce      	ldr	r0, [pc, #824]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004bd8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004bda:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004bde:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	f43f ab78 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      status = ret;
 8004be6:	462e      	mov	r6, r5
 8004be8:	f7ff bb7f 	b.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bec:	f104 0008 	add.w	r0, r4, #8
 8004bf0:	f7fe ff7c 	bl	8003aec <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004bf4:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bf6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004bf8:	6862      	ldr	r2, [r4, #4]
        break;
 8004bfa:	e4f6      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x956>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bfc:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c00:	f7fe ffde 	bl	8003bc0 <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c04:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c06:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c08:	6862      	ldr	r2, [r4, #4]
        break;
 8004c0a:	e4ee      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x956>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c0c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c10:	f7fe ffd6 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004c14:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004c1a:	2d00      	cmp	r5, #0
 8004c1c:	f43f ab80 	beq.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      status = ret;
 8004c20:	462e      	mov	r6, r5
 8004c22:	f7ff bb87 	b.w	8004334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c26:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c2a:	f7fe ffc9 	bl	8003bc0 <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004c2e:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c30:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004c32:	6862      	ldr	r2, [r4, #4]
        break;
 8004c34:	f7ff bb4c 	b.w	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c38:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c3c:	f7fe ffc0 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004c40:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	f43f ac0b 	beq.w	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      status = ret;
 8004c4c:	462e      	mov	r6, r5
 8004c4e:	e412      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c50:	48af      	ldr	r0, [pc, #700]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004c52:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004c54:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004c58:	6281      	str	r1, [r0, #40]	@ 0x28
        break;
 8004c5a:	f7ff bb5e 	b.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x686>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5e:	48ac      	ldr	r0, [pc, #688]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004c60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004c62:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004c66:	6281      	str	r1, [r0, #40]	@ 0x28
        break;
 8004c68:	f7ff bbf8 	b.w	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8004c6c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	d135      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x104a>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c72:	4fa7      	ldr	r7, [pc, #668]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004c74:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004c76:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004c7a:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004c7e:	4301      	orrs	r1, r0
 8004c80:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8004c84:	f7ff b86c 	b.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c88:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c8c:	f7fe ff98 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004c90:	4606      	mov	r6, r0
        break;
 8004c92:	f7ff b823 	b.w	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c96:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c9a:	f7fe ff91 	bl	8003bc0 <RCCEx_PLL3_Config>
 8004c9e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004ca4:	2d00      	cmp	r5, #0
 8004ca6:	f47f a97f 	bne.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004caa:	e580      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cac:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004cb0:	f7fe ff86 	bl	8003bc0 <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004cb4:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cb6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004cb8:	6862      	ldr	r2, [r4, #4]
        break;
 8004cba:	e543      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xab0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cbc:	f104 0008 	add.w	r0, r4, #8
 8004cc0:	f7fe ff14 	bl	8003aec <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004cc4:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004cc8:	6862      	ldr	r2, [r4, #4]
        break;
 8004cca:	e53b      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xab0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ccc:	f104 0008 	add.w	r0, r4, #8
 8004cd0:	f7fe ff0c 	bl	8003aec <RCCEx_PLL2_Config>
 8004cd4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	d0c9      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xfde>
      status = ret;
 8004cde:	462e      	mov	r6, r5
 8004ce0:	f7ff b83e 	b.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ce4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ce8:	f7fe ff6a 	bl	8003bc0 <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cec:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cee:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf0:	6862      	ldr	r2, [r4, #4]
        break;
 8004cf2:	e7bc      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xfda>
        ret = HAL_TIMEOUT;
 8004cf4:	2503      	movs	r5, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cf6:	e9d4 3200 	ldrd	r3, r2, [r4]
      status = ret;
 8004cfa:	462e      	mov	r6, r5
 8004cfc:	f7ff bb36 	b.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8004d00:	f421 5080 	bic.w	r0, r1, #4096	@ 0x1000
 8004d04:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004d08:	f43f a87f 	beq.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004d0c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004d10:	f43f a87b 	beq.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004d14:	2601      	movs	r6, #1
 8004d16:	4635      	mov	r5, r6
 8004d18:	f7ff b883 	b.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8004d1c:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004d20:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004d24:	f43f a8f5 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d28:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004d2c:	f43f a8f1 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d30:	2601      	movs	r6, #1
 8004d32:	4635      	mov	r5, r6
 8004d34:	f7ff b8f9 	b.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8004d38:	f021 0010 	bic.w	r0, r1, #16
 8004d3c:	2840      	cmp	r0, #64	@ 0x40
 8004d3e:	f43f a948 	beq.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d42:	2930      	cmp	r1, #48	@ 0x30
 8004d44:	f43f a945 	beq.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d48:	2601      	movs	r6, #1
 8004d4a:	4635      	mov	r5, r6
 8004d4c:	f7ff b94e 	b.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8004d50:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8004d54:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004d58:	f43f aba3 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004d5c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004d60:	f43f ab9f 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004d64:	2601      	movs	r6, #1
 8004d66:	4635      	mov	r5, r6
 8004d68:	f7ff bba8 	b.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x828>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004d6c:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004d70:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004d74:	f43f aa61 	beq.w	800423a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d78:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004d7c:	f43f aa5d 	beq.w	800423a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d80:	2601      	movs	r6, #1
 8004d82:	4635      	mov	r5, r6
 8004d84:	f7ff ba66 	b.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004d88:	f421 5080 	bic.w	r0, r1, #4096	@ 0x1000
 8004d8c:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004d90:	f43f a9ea 	beq.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004d94:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004d98:	f43f a9e6 	beq.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004d9c:	2601      	movs	r6, #1
 8004d9e:	4635      	mov	r5, r6
 8004da0:	f7ff b9ef 	b.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8004da4:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8004da8:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004dac:	f43f a80c 	beq.w	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004db0:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004db4:	f43f a808 	beq.w	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004db8:	2601      	movs	r6, #1
 8004dba:	4635      	mov	r5, r6
 8004dbc:	f7ff b810 	b.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8004dc0:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dc4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8004dc8:	f43f ab8d 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd0:	f43f ab89 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004dd4:	2601      	movs	r6, #1
 8004dd6:	4635      	mov	r5, r6
 8004dd8:	f7ff bb92 	b.w	8004500 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8004ddc:	f421 1000 	bic.w	r0, r1, #2097152	@ 0x200000
 8004de0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004de4:	f43f a874 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004de8:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8004dec:	f43f a870 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004df0:	2601      	movs	r6, #1
 8004df2:	4635      	mov	r5, r6
 8004df4:	f7ff b878 	b.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8004df8:	f421 4000 	bic.w	r0, r1, #32768	@ 0x8000
 8004dfc:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8004e00:	f43f a824 	beq.w	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e04:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
 8004e08:	f43f a820 	beq.w	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e0c:	2601      	movs	r6, #1
 8004e0e:	4635      	mov	r5, r6
 8004e10:	f7ff b828 	b.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004e14:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8004e18:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004e1c:	f43f aa30 	beq.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004e20:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004e24:	f43f aa2c 	beq.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004e28:	2601      	movs	r6, #1
 8004e2a:	4635      	mov	r5, r6
 8004e2c:	f7ff ba38 	b.w	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004e30:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8004e34:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004e38:	f43f a973 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004e3c:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8004e40:	f43f a96f 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004e44:	2601      	movs	r6, #1
 8004e46:	4635      	mov	r5, r6
 8004e48:	f7ff b978 	b.w	800413c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8004e4c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e50:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004e54:	f43f ab69 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004e58:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e5c:	f43f ab65 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004e60:	2601      	movs	r6, #1
 8004e62:	4635      	mov	r5, r6
 8004e64:	f7ff bb6e 	b.w	8004544 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004e68:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8004e6c:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8004e70:	f43f a99d 	beq.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e74:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004e78:	f43f a999 	beq.w	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e7c:	2601      	movs	r6, #1
 8004e7e:	4635      	mov	r5, r6
 8004e80:	f7ff b9a2 	b.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004e84:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004e88:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004e8c:	f43f a8c4 	beq.w	8004018 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004e90:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004e94:	f43f a8c0 	beq.w	8004018 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004e98:	2601      	movs	r6, #1
 8004e9a:	4635      	mov	r5, r6
 8004e9c:	f7ff b8c9 	b.w	8004032 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8004ea0:	f421 2080 	bic.w	r0, r1, #262144	@ 0x40000
 8004ea4:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8004ea8:	f43e aff1 	beq.w	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004eac:	f5b1 2f40 	cmp.w	r1, #786432	@ 0xc0000
 8004eb0:	f43e afed 	beq.w	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004eb4:	2601      	movs	r6, #1
 8004eb6:	4635      	mov	r5, r6
 8004eb8:	f7fe bff5 	b.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004ebc:	f421 1080 	bic.w	r0, r1, #1048576	@ 0x100000
 8004ec0:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8004ec4:	f43f a996 	beq.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004ec8:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8004ecc:	f43f a992 	beq.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004ed0:	2601      	movs	r6, #1
 8004ed2:	4635      	mov	r5, r6
 8004ed4:	f7ff b99b 	b.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8004ed8:	f021 6000 	bic.w	r0, r1, #134217728	@ 0x8000000
 8004edc:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8004ee0:	f43f a839 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ee4:	f1b1 5fc0 	cmp.w	r1, #402653184	@ 0x18000000
 8004ee8:	f43f a835 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004eec:	2601      	movs	r6, #1
 8004eee:	4635      	mov	r5, r6
 8004ef0:	f7ff b83e 	b.w	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8004ef4:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8004ef8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004efc:	f43e af43 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004f00:	29c0      	cmp	r1, #192	@ 0xc0
 8004f02:	f43e af40 	beq.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004f06:	2601      	movs	r6, #1
 8004f08:	4635      	mov	r5, r6
 8004f0a:	f7fe bf48 	b.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004f0e:	bf00      	nop
 8004f10:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f14:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004f18:	f43f a9da 	beq.w	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004f1c:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8004f20:	f43f a9d6 	beq.w	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004f24:	2601      	movs	r6, #1
 8004f26:	4635      	mov	r5, r6
 8004f28:	f7ff b9df 	b.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8004f2c:	f5b1 1fc0 	cmp.w	r1, #1572864	@ 0x180000
 8004f30:	f43f a9f3 	beq.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x686>
 8004f34:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004f38:	f43f a9ef 	beq.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x686>
 8004f3c:	2601      	movs	r6, #1
 8004f3e:	4635      	mov	r5, r6
 8004f40:	f7ff b9f8 	b.w	8004334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8004f44:	29c0      	cmp	r1, #192	@ 0xc0
 8004f46:	f43f aa89 	beq.w	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f4a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004f4e:	f43f aa85 	beq.w	800445c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f52:	2601      	movs	r6, #1
 8004f54:	4635      	mov	r5, r6
 8004f56:	f7ff ba8e 	b.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f5a:	4810      	ldr	r0, [pc, #64]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1308>)
 8004f5c:	4a10      	ldr	r2, [pc, #64]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x130c>)
 8004f5e:	69c1      	ldr	r1, [r0, #28]
 8004f60:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004f64:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	61c2      	str	r2, [r0, #28]
 8004f6c:	f7ff bbd4 	b.w	8004718 <HAL_RCCEx_PeriphCLKConfig+0xa84>
        status = ret;
 8004f70:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f72:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f76:	4635      	mov	r5, r6
 8004f78:	f7ff b9f8 	b.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8004f7c:	2601      	movs	r6, #1
 8004f7e:	4635      	mov	r5, r6
 8004f80:	f7ff ba2b 	b.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (pPeriphClkInit->OspiClockSelection)
 8004f84:	2601      	movs	r6, #1
 8004f86:	4635      	mov	r5, r6
 8004f88:	f7ff bafe 	b.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8004f8c:	2601      	movs	r6, #1
 8004f8e:	f7fe beb2 	b.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8004f92:	2601      	movs	r6, #1
 8004f94:	4635      	mov	r5, r6
 8004f96:	f7ff b808 	b.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004f9a:	bf00      	nop
 8004f9c:	44020c00 	.word	0x44020c00
 8004fa0:	00ffffcf 	.word	0x00ffffcf

08004fa4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fa4:	4a50      	ldr	r2, [pc, #320]	@ (80050e8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
{
 8004fa6:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fa8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004faa:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fac:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004fae:	6a97      	ldr	r7, [r2, #40]	@ 0x28
  if (pll1m != 0U)
 8004fb0:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fb4:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fb6:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 8004fba:	d05d      	beq.n	8005078 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fbc:	ee07 4a90 	vmov	s15, r4
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fc0:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004fc4:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fc8:	fb07 f101 	mul.w	r1, r7, r1
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fd4:	ee07 1a10 	vmov	s14, r1
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fd8:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fdc:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80050ec <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8004fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fe4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fe8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004fec:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004ff0:	f005 0303 	and.w	r3, r5, #3
    switch (pll1source)
 8004ff4:	2b02      	cmp	r3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ff6:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll1source)
 8004ffa:	d067      	beq.n	80050cc <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d06c      	beq.n	80050da <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 8005004:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005008:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800500a:	ee07 3a10 	vmov	s14, r3
 800500e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005012:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8005016:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800501a:	4a33      	ldr	r2, [pc, #204]	@ (80050e8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 800501c:	6813      	ldr	r3, [r2, #0]
 800501e:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8005022:	d003      	beq.n	800502c <HAL_RCCEx_GetPLL1ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005024:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005026:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800502a:	d13d      	bne.n	80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800502c:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800502e:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8005036:	d003      	beq.n	8005040 <HAL_RCCEx_GetPLL1ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005038:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800503a:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800503e:	d121      	bne.n	8005084 <HAL_RCCEx_GetPLL1ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005040:	4a29      	ldr	r2, [pc, #164]	@ (80050e8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005042:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005044:	6813      	ldr	r3, [r2, #0]
 8005046:	0199      	lsls	r1, r3, #6
 8005048:	d518      	bpl.n	800507c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800504a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800504c:	035b      	lsls	r3, r3, #13
 800504e:	d515      	bpl.n	800507c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
}
 8005050:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005052:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005058:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800505c:	ee06 3a90 	vmov	s13, r3
 8005060:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005064:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005068:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800506c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005070:	ee17 3a90 	vmov	r3, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005074:	6083      	str	r3, [r0, #8]
}
 8005076:	4770      	bx	lr
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005078:	e9c0 4400 	strd	r4, r4, [r0]
}
 800507c:	bcf0      	pop	{r4, r5, r6, r7}
{
 800507e:	2300      	movs	r3, #0
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005080:	6083      	str	r3, [r0, #8]
}
 8005082:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005084:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800508a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800508e:	ee06 3a90 	vmov	s13, r3
 8005092:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005096:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800509a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800509e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80050a2:	ee17 3a10 	vmov	r3, s14
 80050a6:	e7cb      	b.n	8005040 <HAL_RCCEx_GetPLL1ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050a8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80050aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050ae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80050b2:	ee06 3a90 	vmov	s13, r3
 80050b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80050ba:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80050be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050c2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80050c6:	ee17 3a10 	vmov	r3, s14
 80050ca:	e7af      	b.n	800502c <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050cc:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 80050f4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80050d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80050d4:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80050d8:	e79f      	b.n	800501a <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050da:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80050f8 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 80050de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80050e6:	e798      	b.n	800501a <HAL_RCCEx_GetPLL1ClockFreq+0x76>
 80050e8:	44020c00 	.word	0x44020c00
 80050ec:	39000000 	.word	0x39000000
 80050f0:	03d09000 	.word	0x03d09000
 80050f4:	4a742400 	.word	0x4a742400
 80050f8:	4af42400 	.word	0x4af42400

080050fc <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80050fc:	4a50      	ldr	r2, [pc, #320]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 80050fe:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005100:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005102:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005104:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005106:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005108:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800510c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800510e:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 8005112:	d05d      	beq.n	80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005114:	ee07 4a90 	vmov	s15, r4
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005118:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800511c:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005120:	fb07 f101 	mul.w	r1, r7, r1
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005124:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005128:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800512c:	ee07 1a10 	vmov	s14, r1
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005130:	ee07 3a90 	vmov	s15, r3
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005134:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800513c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005140:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005144:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005148:	f005 0303 	and.w	r3, r5, #3
    switch (pll2source)
 800514c:	2b02      	cmp	r3, #2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800514e:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll2source)
 8005152:	d067      	beq.n	8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8005154:	2b03      	cmp	r3, #3
 8005156:	d06c      	beq.n	8005232 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	4b3b      	ldr	r3, [pc, #236]	@ (8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 800515c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005160:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005162:	ee07 3a10 	vmov	s14, r3
 8005166:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800516a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800516e:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005172:	4a33      	ldr	r2, [pc, #204]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8005174:	6813      	ldr	r3, [r2, #0]
 8005176:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 800517a:	d003      	beq.n	8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800517c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800517e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8005182:	d13d      	bne.n	8005200 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005184:	4a2e      	ldr	r2, [pc, #184]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005186:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005188:	6813      	ldr	r3, [r2, #0]
 800518a:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 800518e:	d003      	beq.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005190:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005192:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8005196:	d121      	bne.n	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005198:	4a29      	ldr	r2, [pc, #164]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800519a:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800519c:	6813      	ldr	r3, [r2, #0]
 800519e:	0119      	lsls	r1, r3, #4
 80051a0:	d518      	bpl.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80051a2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80051a4:	035b      	lsls	r3, r3, #13
 80051a6:	d515      	bpl.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
}
 80051a8:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051aa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80051ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051b4:	ee06 3a90 	vmov	s13, r3
 80051b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80051bc:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80051c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051c4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80051c8:	ee17 3a90 	vmov	r3, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80051cc:	6083      	str	r3, [r0, #8]
}
 80051ce:	4770      	bx	lr
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80051d0:	e9c0 4400 	strd	r4, r4, [r0]
}
 80051d4:	bcf0      	pop	{r4, r5, r6, r7}
{
 80051d6:	2300      	movs	r3, #0
        pPLL2_Clocks->PLL2_R_Frequency = \
 80051d8:	6083      	str	r3, [r0, #8]
}
 80051da:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051dc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80051de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051e2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80051e6:	ee06 3a90 	vmov	s13, r3
 80051ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80051ee:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80051f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80051fa:	ee17 3a10 	vmov	r3, s14
 80051fe:	e7cb      	b.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005200:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005206:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800520a:	ee06 3a90 	vmov	s13, r3
 800520e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005212:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005216:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800521a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800521e:	ee17 3a10 	vmov	r3, s14
 8005222:	e7af      	b.n	8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005224:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005228:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800522c:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8005230:	e79f      	b.n	8005172 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005232:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005236:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 800523e:	e798      	b.n	8005172 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
 8005240:	44020c00 	.word	0x44020c00
 8005244:	39000000 	.word	0x39000000
 8005248:	03d09000 	.word	0x03d09000
 800524c:	4a742400 	.word	0x4a742400
 8005250:	4af42400 	.word	0x4af42400

08005254 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005254:	4a50      	ldr	r2, [pc, #320]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8005256:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005258:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800525a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800525c:	6b16      	ldr	r6, [r2, #48]	@ 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800525e:	6b17      	ldr	r7, [r2, #48]	@ 0x30
  if (pll3m != 0U)
 8005260:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005264:	6c91      	ldr	r1, [r2, #72]	@ 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005266:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 800526a:	d05d      	beq.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800526c:	ee07 4a90 	vmov	s15, r4
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005270:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005274:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005278:	fb07 f101 	mul.w	r1, r7, r1
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800527c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005280:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005284:	ee07 1a10 	vmov	s14, r1
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005288:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800528c:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800539c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005294:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005298:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800529c:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80052a0:	f005 0303 	and.w	r3, r5, #3
    switch (pll3source)
 80052a4:	2b02      	cmp	r3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052a6:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll3source)
 80052aa:	d067      	beq.n	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d06c      	beq.n	800538a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 80052b4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80052b8:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052ba:	ee07 3a10 	vmov	s14, r3
 80052be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80052c2:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80052c6:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052ca:	4a33      	ldr	r2, [pc, #204]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 80052d2:	d003      	beq.n	80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80052d4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80052d6:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80052da:	d13d      	bne.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80052de:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 80052e6:	d003      	beq.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80052e8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80052ea:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80052ee:	d121      	bne.n	8005334 <HAL_RCCEx_GetPLL3ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052f0:	4a29      	ldr	r2, [pc, #164]	@ (8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052f2:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	d518      	bpl.n	800532c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80052fa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80052fc:	035b      	lsls	r3, r3, #13
 80052fe:	d515      	bpl.n	800532c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
}
 8005300:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005302:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005304:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005308:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800530c:	ee06 3a90 	vmov	s13, r3
 8005310:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005314:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005318:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800531c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005320:	ee17 3a90 	vmov	r3, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005324:	6083      	str	r3, [r0, #8]
}
 8005326:	4770      	bx	lr
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005328:	e9c0 4400 	strd	r4, r4, [r0]
}
 800532c:	bcf0      	pop	{r4, r5, r6, r7}
{
 800532e:	2300      	movs	r3, #0
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005330:	6083      	str	r3, [r0, #8]
}
 8005332:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005334:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800533a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800533e:	ee06 3a90 	vmov	s13, r3
 8005342:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005346:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800534a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800534e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005352:	ee17 3a10 	vmov	r3, s14
 8005356:	e7cb      	b.n	80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005358:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800535a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800535e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005362:	ee06 3a90 	vmov	s13, r3
 8005366:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800536a:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800536e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005372:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005376:	ee17 3a10 	vmov	r3, s14
 800537a:	e7af      	b.n	80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800537c:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8005380:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005384:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8005388:	e79f      	b.n	80052ca <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800538a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800538e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8005396:	e798      	b.n	80052ca <HAL_RCCEx_GetPLL3ClockFreq+0x76>
 8005398:	44020c00 	.word	0x44020c00
 800539c:	39000000 	.word	0x39000000
 80053a0:	03d09000 	.word	0x03d09000
 80053a4:	4a742400 	.word	0x4a742400
 80053a8:	4af42400 	.word	0x4af42400

080053ac <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80053ac:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 80053b0:	430b      	orrs	r3, r1
 80053b2:	d062      	beq.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
{
 80053b4:	b500      	push	{lr}
    switch (PeriphClk)
 80053b6:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 80053ba:	430b      	orrs	r3, r1
{
 80053bc:	b085      	sub	sp, #20
    switch (PeriphClk)
 80053be:	f000 8785 	beq.w	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80053c2:	4bac      	ldr	r3, [pc, #688]	@ (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80053c4:	4298      	cmp	r0, r3
 80053c6:	f171 0300 	sbcs.w	r3, r1, #0
 80053ca:	d21f      	bcs.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80053cc:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80053d0:	430b      	orrs	r3, r1
 80053d2:	f000 85fc 	beq.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80053d6:	f240 4301 	movw	r3, #1025	@ 0x401
 80053da:	4298      	cmp	r0, r3
 80053dc:	f171 0300 	sbcs.w	r3, r1, #0
 80053e0:	d26d      	bcs.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80053e2:	2821      	cmp	r0, #33	@ 0x21
 80053e4:	f171 0300 	sbcs.w	r3, r1, #0
 80053e8:	f080 80f9 	bcs.w	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 80053ec:	ea50 0301 	orrs.w	r3, r0, r1
 80053f0:	f001 816f 	beq.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
 80053f4:	3801      	subs	r0, #1
 80053f6:	f141 31ff 	adc.w	r1, r1, #4294967295
 80053fa:	2820      	cmp	r0, #32
 80053fc:	f171 0100 	sbcs.w	r1, r1, #0
 8005400:	f0c0 8328 	bcc.w	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
        frequency = 0U;
 8005404:	2000      	movs	r0, #0
}
 8005406:	b005      	add	sp, #20
 8005408:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 800540c:	2300      	movs	r3, #0
 800540e:	2202      	movs	r2, #2
 8005410:	4291      	cmp	r1, r2
 8005412:	bf08      	it	eq
 8005414:	4298      	cmpeq	r0, r3
 8005416:	f000 877e 	beq.w	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800541a:	4283      	cmp	r3, r0
 800541c:	418a      	sbcs	r2, r1
 800541e:	f0c0 809d 	bcc.w	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005422:	f100 4270 	add.w	r2, r0, #4026531840	@ 0xf0000000
 8005426:	430a      	orrs	r2, r1
 8005428:	f000 8602 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800542c:	4a92      	ldr	r2, [pc, #584]	@ (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800542e:	4290      	cmp	r0, r2
 8005430:	f171 0200 	sbcs.w	r2, r1, #0
 8005434:	f080 8154 	bcs.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8005438:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800543c:	430b      	orrs	r3, r1
 800543e:	f000 82f4 	beq.w	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8005442:	4b8e      	ldr	r3, [pc, #568]	@ (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005444:	4298      	cmp	r0, r3
 8005446:	f171 0300 	sbcs.w	r3, r1, #0
 800544a:	f080 81cd 	bcs.w	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800544e:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
 8005452:	430b      	orrs	r3, r1
 8005454:	f000 8651 	beq.w	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xd4e>
 8005458:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
 800545c:	4308      	orrs	r0, r1
        frequency = 0U;
 800545e:	bf18      	it	ne
 8005460:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005462:	d1d0      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005464:	4b86      	ldr	r3, [pc, #536]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800546a:	0659      	lsls	r1, r3, #25
 800546c:	f140 82e3 	bpl.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005470:	a801      	add	r0, sp, #4
 8005472:	f7ff fe43 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005476:	9803      	ldr	r0, [sp, #12]
 8005478:	e7c5      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800547a:	4a81      	ldr	r2, [pc, #516]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800547c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005480:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005488:	0791      	lsls	r1, r2, #30
 800548a:	d503      	bpl.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800548c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005490:	f000 81a4 	beq.w	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005494:	4a7a      	ldr	r2, [pc, #488]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005496:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	d503      	bpl.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800549e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a2:	f000 819e 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80054a6:	4a76      	ldr	r2, [pc, #472]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054a8:	6810      	ldr	r0, [r2, #0]
 80054aa:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80054ae:	d005      	beq.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b4:	f000 82ab 	beq.w	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
        frequency = 0U;
 80054b8:	2000      	movs	r0, #0
 80054ba:	4770      	bx	lr
}
 80054bc:	4770      	bx	lr
    switch (PeriphClk)
 80054be:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 80054c2:	430b      	orrs	r3, r1
 80054c4:	f000 8762 	beq.w	800638c <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 80054c8:	f248 0301 	movw	r3, #32769	@ 0x8001
 80054cc:	4298      	cmp	r0, r3
 80054ce:	f171 0300 	sbcs.w	r3, r1, #0
 80054d2:	f080 80d7 	bcs.w	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80054d6:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80054da:	430b      	orrs	r3, r1
 80054dc:	f000 819f 	beq.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80054e0:	f242 0301 	movw	r3, #8193	@ 0x2001
 80054e4:	4298      	cmp	r0, r3
 80054e6:	f171 0300 	sbcs.w	r3, r1, #0
 80054ea:	f080 84b8 	bcs.w	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 80054ee:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80054f2:	430b      	orrs	r3, r1
 80054f4:	f000 8648 	beq.w	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80054f8:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 80054fc:	4308      	orrs	r0, r1
        frequency = 0U;
 80054fe:	bf18      	it	ne
 8005500:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005502:	d180      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005504:	495e      	ldr	r1, [pc, #376]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005506:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800550a:	f012 62e0 	ands.w	r2, r2, #117440512	@ 0x7000000
 800550e:	f000 8160 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005512:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005516:	f000 8293 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800551a:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800551e:	f000 8294 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	0798      	lsls	r0, r3, #30
 8005526:	d503      	bpl.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005528:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800552c:	f001 8269 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1656>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005530:	4b53      	ldr	r3, [pc, #332]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	0599      	lsls	r1, r3, #22
 8005536:	d503      	bpl.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005538:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800553c:	f001 82cf 	beq.w	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x1732>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005540:	4b4f      	ldr	r3, [pc, #316]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005542:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005546:	f010 0002 	ands.w	r0, r0, #2
 800554a:	f43f af5c 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800554e:	f1a2 63a0 	sub.w	r3, r2, #83886080	@ 0x5000000
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	03d8      	lsls	r0, r3, #15
 800555a:	e754      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 800555c:	2240      	movs	r2, #64	@ 0x40
 800555e:	4291      	cmp	r1, r2
 8005560:	bf08      	it	eq
 8005562:	4298      	cmpeq	r0, r3
 8005564:	f000 85ef 	beq.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005568:	4283      	cmp	r3, r0
 800556a:	418a      	sbcs	r2, r1
 800556c:	f0c0 8102 	bcc.w	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005570:	2210      	movs	r2, #16
 8005572:	4291      	cmp	r1, r2
 8005574:	bf08      	it	eq
 8005576:	4298      	cmpeq	r0, r3
 8005578:	f000 81d1 	beq.w	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 800557c:	4283      	cmp	r3, r0
 800557e:	418a      	sbcs	r2, r1
 8005580:	f0c0 84d8 	bcc.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8005584:	2904      	cmp	r1, #4
 8005586:	bf08      	it	eq
 8005588:	4298      	cmpeq	r0, r3
 800558a:	f000 84f3 	beq.w	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800558e:	2300      	movs	r3, #0
 8005590:	2908      	cmp	r1, #8
 8005592:	bf08      	it	eq
 8005594:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005596:	bf18      	it	ne
 8005598:	4618      	movne	r0, r3
    switch (PeriphClk)
 800559a:	f47f af34 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800559e:	4b38      	ldr	r3, [pc, #224]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80055a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80055a8:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80055ac:	0798      	lsls	r0, r3, #30
 80055ae:	d502      	bpl.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	f001 8000 	beq.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x120a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80055b6:	4b32      	ldr	r3, [pc, #200]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055bc:	0119      	lsls	r1, r3, #4
 80055be:	d502      	bpl.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80055c0:	2a40      	cmp	r2, #64	@ 0x40
 80055c2:	f001 8196 	beq.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80055c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 80055ce:	f43f af1a 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80055d2:	2a80      	cmp	r2, #128	@ 0x80
 80055d4:	f248 0012 	movw	r0, #32786	@ 0x8012
 80055d8:	bf18      	it	ne
 80055da:	2000      	movne	r0, #0
 80055dc:	e713      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80055de:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f000 81be 	beq.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80055e8:	f240 1301 	movw	r3, #257	@ 0x101
 80055ec:	4298      	cmp	r0, r3
 80055ee:	f171 0300 	sbcs.w	r3, r1, #0
 80055f2:	f080 8463 	bcs.w	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80055f6:	f1a0 0340 	sub.w	r3, r0, #64	@ 0x40
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f000 8631 	beq.w	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
 8005600:	3880      	subs	r0, #128	@ 0x80
 8005602:	4308      	orrs	r0, r1
        frequency = 0U;
 8005604:	bf18      	it	ne
 8005606:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005608:	f47f aefd 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800560c:	491c      	ldr	r1, [pc, #112]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800560e:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005612:	f412 0260 	ands.w	r2, r2, #14680064	@ 0xe00000
 8005616:	f000 8136 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800561a:	680b      	ldr	r3, [r1, #0]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	d503      	bpl.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005620:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8005624:	f000 820c 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005628:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0098      	lsls	r0, r3, #2
 800562e:	d503      	bpl.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 8005630:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005634:	f000 8209 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005638:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	0789      	lsls	r1, r1, #30
 800563e:	d503      	bpl.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005640:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8005644:	f001 8139 	beq.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8005648:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0598      	lsls	r0, r3, #22
 800564e:	d503      	bpl.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005650:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005654:	f001 8222 	beq.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x16f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8005658:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800565a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800565e:	f010 0002 	ands.w	r0, r0, #2
 8005662:	f43f aed0 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005666:	f5a2 0320 	sub.w	r3, r2, #10485760	@ 0xa00000
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	03d8      	lsls	r0, r3, #15
 8005672:	e6c8      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005674:	00100001 	.word	0x00100001
 8005678:	10000001 	.word	0x10000001
 800567c:	00800001 	.word	0x00800001
 8005680:	44020c00 	.word	0x44020c00
    switch (PeriphClk)
 8005684:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 8005688:	430b      	orrs	r3, r1
 800568a:	f000 80e6 	beq.w	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800568e:	4bb0      	ldr	r3, [pc, #704]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005690:	4298      	cmp	r0, r3
 8005692:	f171 0300 	sbcs.w	r3, r1, #0
 8005696:	f080 83b6 	bcs.w	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
 800569a:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800569e:	430b      	orrs	r3, r1
 80056a0:	f000 847e 	beq.w	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80056a4:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
 80056a8:	4308      	orrs	r0, r1
        frequency = 0U;
 80056aa:	bf18      	it	ne
 80056ac:	2000      	movne	r0, #0
    switch (PeriphClk)
 80056ae:	f47f aeaa 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80056b2:	4aa8      	ldr	r2, [pc, #672]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80056b4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80056b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
        switch (srcclk)
 80056bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c0:	f000 8797 	beq.w	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80056c4:	f200 870d 	bhi.w	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80056c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056cc:	f000 817c 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80056d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d4:	f000 867d 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d07a      	beq.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 80056dc:	2000      	movs	r0, #0
 80056de:	e692      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80056e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056e4:	4299      	cmp	r1, r3
 80056e6:	bf08      	it	eq
 80056e8:	4290      	cmpeq	r0, r2
 80056ea:	f000 80e7 	beq.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80056ee:	4282      	cmp	r2, r0
 80056f0:	eb73 0201 	sbcs.w	r2, r3, r1
 80056f4:	f0c0 8326 	bcc.w	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80056f8:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
 80056fc:	430b      	orrs	r3, r1
 80056fe:	f000 8574 	beq.w	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
 8005702:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
 8005706:	4308      	orrs	r0, r1
        frequency = 0U;
 8005708:	bf18      	it	ne
 800570a:	2000      	movne	r0, #0
    switch (PeriphClk)
 800570c:	f47f ae7b 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8005710:	4990      	ldr	r1, [pc, #576]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005712:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005716:	f412 6260 	ands.w	r2, r2, #3584	@ 0xe00
 800571a:	f000 8655 	beq.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800571e:	680b      	ldr	r3, [r1, #0]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	d503      	bpl.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005724:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005728:	f000 818a 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800572c:	4b89      	ldr	r3, [pc, #548]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	0098      	lsls	r0, r3, #2
 8005732:	d503      	bpl.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005734:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005738:	f000 8187 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800573c:	4b85      	ldr	r3, [pc, #532]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	0789      	lsls	r1, r1, #30
 8005742:	d503      	bpl.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
 8005744:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8005748:	f001 80ec 	beq.w	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800574c:	4b81      	ldr	r3, [pc, #516]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0598      	lsls	r0, r3, #22
 8005752:	d503      	bpl.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 8005754:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005758:	f001 8191 	beq.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800575c:	4b7d      	ldr	r3, [pc, #500]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005764:	f43f ae4f 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005768:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
 800576c:	487a      	ldr	r0, [pc, #488]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800576e:	bf18      	it	ne
 8005770:	2000      	movne	r0, #0
 8005772:	e648      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005778:	4291      	cmp	r1, r2
 800577a:	bf08      	it	eq
 800577c:	4298      	cmpeq	r0, r3
 800577e:	f000 8087 	beq.w	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8005782:	4283      	cmp	r3, r0
 8005784:	418a      	sbcs	r2, r1
 8005786:	f0c0 8317 	bcc.w	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 800578a:	2980      	cmp	r1, #128	@ 0x80
 800578c:	bf08      	it	eq
 800578e:	4298      	cmpeq	r0, r3
 8005790:	f000 854e 	beq.w	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 8005794:	2300      	movs	r3, #0
 8005796:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800579a:	bf08      	it	eq
 800579c:	4298      	cmpeq	r0, r3
        frequency = 0U;
 800579e:	bf18      	it	ne
 80057a0:	4618      	movne	r0, r3
    switch (PeriphClk)
 80057a2:	f47f ae30 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80057a6:	496b      	ldr	r1, [pc, #428]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057a8:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
 80057ac:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
        switch (srcclk)
 80057b0:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 80057b4:	f000 8762 	beq.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 80057b8:	f200 8644 	bhi.w	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80057bc:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80057c0:	f000 8102 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80057c4:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80057c8:	f000 8603 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	f041 8106 	bne.w	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
}
 80057d2:	b005      	add	sp, #20
 80057d4:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 80057d8:	f7fe b93e 	b.w	8003a58 <HAL_RCC_GetPCLK3Freq>
      frequency = LSE_VALUE;
 80057dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80057e0:	4770      	bx	lr
      frequency = LSI_VALUE;
 80057e2:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 80057e6:	4770      	bx	lr
    switch (PeriphClk)
 80057e8:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 80057ec:	430b      	orrs	r3, r1
 80057ee:	f000 85a5 	beq.w	800633c <HAL_RCCEx_GetPeriphCLKFreq+0xf90>
 80057f2:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
 80057f6:	4308      	orrs	r0, r1
        frequency = 0U;
 80057f8:	bf18      	it	ne
 80057fa:	2000      	movne	r0, #0
    switch (PeriphClk)
 80057fc:	f47f ae03 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005800:	4b54      	ldr	r3, [pc, #336]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005806:	f003 0307 	and.w	r3, r3, #7
        switch (srcclk)
 800580a:	2b04      	cmp	r3, #4
 800580c:	f201 818e 	bhi.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>
 8005810:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005814:	00da00df 	.word	0x00da00df
 8005818:	00e900e4 	.word	0x00e900e4
 800581c:	00eb      	.short	0x00eb
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800581e:	4b4d      	ldr	r3, [pc, #308]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005820:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005824:	f412 3240 	ands.w	r2, r2, #196608	@ 0x30000
 8005828:	d02d      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800582a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800582e:	f000 85d6 	beq.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005832:	4b48      	ldr	r3, [pc, #288]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	0789      	lsls	r1, r1, #30
 8005838:	d503      	bpl.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800583a:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800583e:	f001 8051 	beq.w	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005842:	4b44      	ldr	r3, [pc, #272]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 800584a:	f43f addc 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800584e:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8005852:	4842      	ldr	r0, [pc, #264]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005854:	bf18      	it	ne
 8005856:	2000      	movne	r0, #0
 8005858:	e5d5      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800585a:	4a3e      	ldr	r2, [pc, #248]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800585c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8005860:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
        switch (srcclk)
 8005864:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005868:	f000 86d4 	beq.w	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 800586c:	f200 8604 	bhi.w	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	f000 80a8 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587c:	f000 85a9 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005880:	2b00      	cmp	r3, #0
 8005882:	f041 80af 	bne.w	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
}
 8005886:	b005      	add	sp, #20
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 800588c:	f7fe b850 	b.w	8003930 <HAL_RCC_GetPCLK1Freq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005890:	4a30      	ldr	r2, [pc, #192]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005892:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005896:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800589a:	f003 0308 	and.w	r3, r3, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800589e:	0789      	lsls	r1, r1, #30
 80058a0:	f140 85a3 	bpl.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8682 	beq.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80058aa:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80058ae:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80058b2:	bf14      	ite	ne
 80058b4:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80058b8:	2000      	moveq	r0, #0
 80058ba:	e5a4      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80058bc:	4925      	ldr	r1, [pc, #148]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058be:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80058c2:	f412 42e0 	ands.w	r2, r2, #28672	@ 0x7000
 80058c6:	d084      	beq.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	0119      	lsls	r1, r3, #4
 80058cc:	d503      	bpl.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80058ce:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80058d2:	f000 80b5 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80058d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	d503      	bpl.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 80058de:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80058e2:	f000 80b2 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80058e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	0788      	lsls	r0, r1, #30
 80058ec:	d503      	bpl.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80058ee:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80058f2:	f000 87d4 	beq.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80058f6:	4b17      	ldr	r3, [pc, #92]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	0599      	lsls	r1, r3, #22
 80058fc:	d503      	bpl.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80058fe:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8005902:	f001 80c8 	beq.w	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x16ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8005906:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800590e:	f43f ad7a 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005912:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 8005916:	4810      	ldr	r0, [pc, #64]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005918:	bf18      	it	ne
 800591a:	2000      	movne	r0, #0
 800591c:	e573      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800591e:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005920:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005924:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005928:	2a10      	cmp	r2, #16
 800592a:	f000 8084 	beq.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	d502      	bpl.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005934:	2a20      	cmp	r2, #32
 8005936:	f000 8088 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f410 5000 	ands.w	r0, r0, #8192	@ 0x2000
 8005942:	f43f ad60 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005946:	2a30      	cmp	r2, #48	@ 0x30
 8005948:	4805      	ldr	r0, [pc, #20]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800594a:	bf18      	it	ne
 800594c:	2000      	movne	r0, #0
 800594e:	e55a      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005950:	00040001 	.word	0x00040001
 8005954:	44020c00 	.word	0x44020c00
 8005958:	007a1200 	.word	0x007a1200
 800595c:	003d0900 	.word	0x003d0900
 8005960:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8005964:	49a5      	ldr	r1, [pc, #660]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005966:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800596a:	f012 62e0 	ands.w	r2, r2, #117440512	@ 0x7000000
 800596e:	d08a      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005970:	680b      	ldr	r3, [r1, #0]
 8005972:	0119      	lsls	r1, r3, #4
 8005974:	d502      	bpl.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8005976:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800597a:	d061      	beq.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800597c:	4b9f      	ldr	r3, [pc, #636]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	d502      	bpl.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 8005984:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8005988:	d05f      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800598a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	0788      	lsls	r0, r1, #30
 8005990:	d503      	bpl.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005992:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8005996:	f001 8004 	beq.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800599a:	4b98      	ldr	r3, [pc, #608]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	0599      	lsls	r1, r3, #22
 80059a0:	d503      	bpl.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80059a2:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80059a6:	f001 8058 	beq.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x16ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80059aa:	4b94      	ldr	r3, [pc, #592]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80059ac:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80059b0:	f010 0002 	ands.w	r0, r0, #2
 80059b4:	f43f ad27 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80059b8:	f1a2 63a0 	sub.w	r3, r2, #83886080	@ 0x5000000
 80059bc:	fab3 f383 	clz	r3, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	03d8      	lsls	r0, r3, #15
 80059c4:	e51f      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80059c6:	b123      	cbz	r3, 80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c8:	a801      	add	r0, sp, #4
 80059ca:	f7ff fb97 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80059ce:	9801      	ldr	r0, [sp, #4]
            break;
 80059d0:	e519      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059d2:	a801      	add	r0, sp, #4
 80059d4:	f7ff fae6 	bl	8004fa4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80059d8:	9802      	ldr	r0, [sp, #8]
            break;
 80059da:	e514      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059dc:	a801      	add	r0, sp, #4
 80059de:	f7ff fc39 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80059e2:	9801      	ldr	r0, [sp, #4]
            break;
 80059e4:	e50f      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 80059e6:	4886      	ldr	r0, [pc, #536]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80059e8:	e50d      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059ea:	4b84      	ldr	r3, [pc, #528]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80059ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059f0:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059f2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059f6:	0789      	lsls	r1, r1, #30
 80059f8:	f140 8683 	bpl.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x1356>
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	f040 8680 	bne.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x1356>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	487f      	ldr	r0, [pc, #508]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005a06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a0a:	40d8      	lsrs	r0, r3
 8005a0c:	e4fb      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a0e:	69d3      	ldr	r3, [r2, #28]
 8005a10:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a18:	f4ff ad4e 	bcc.w	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a1c:	69d3      	ldr	r3, [r2, #28]
 8005a1e:	487a      	ldr	r0, [pc, #488]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005a20:	f3c3 2305 	ubfx	r3, r3, #8, #6
 8005a24:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a28:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005a2a:	4b74      	ldr	r3, [pc, #464]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	f53f ad1d 	bmi.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a36:	a801      	add	r0, sp, #4
 8005a38:	f7ff fab4 	bl	8004fa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a3c:	9802      	ldr	r0, [sp, #8]
 8005a3e:	e4e2      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a40:	a801      	add	r0, sp, #4
 8005a42:	f7ff fb5b 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a46:	9802      	ldr	r0, [sp, #8]
 8005a48:	e4dd      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a4a:	a801      	add	r0, sp, #4
 8005a4c:	f7ff fc02 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a50:	9802      	ldr	r0, [sp, #8]
 8005a52:	e4d8      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005a54:	281f      	cmp	r0, #31
 8005a56:	f63f acd5 	bhi.w	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a5a:	a301      	add	r3, pc, #4	@ (adr r3, 8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>)
 8005a5c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8005a60:	08005b9d 	.word	0x08005b9d
 8005a64:	08005b45 	.word	0x08005b45
 8005a68:	08005405 	.word	0x08005405
 8005a6c:	08005c77 	.word	0x08005c77
 8005a70:	08005405 	.word	0x08005405
 8005a74:	08005405 	.word	0x08005405
 8005a78:	08005405 	.word	0x08005405
 8005a7c:	08005c0d 	.word	0x08005c0d
 8005a80:	08005405 	.word	0x08005405
 8005a84:	08005405 	.word	0x08005405
 8005a88:	08005405 	.word	0x08005405
 8005a8c:	08005405 	.word	0x08005405
 8005a90:	08005405 	.word	0x08005405
 8005a94:	08005405 	.word	0x08005405
 8005a98:	08005405 	.word	0x08005405
 8005a9c:	08005cdb 	.word	0x08005cdb
 8005aa0:	08005405 	.word	0x08005405
 8005aa4:	08005405 	.word	0x08005405
 8005aa8:	08005405 	.word	0x08005405
 8005aac:	08005405 	.word	0x08005405
 8005ab0:	08005405 	.word	0x08005405
 8005ab4:	08005405 	.word	0x08005405
 8005ab8:	08005405 	.word	0x08005405
 8005abc:	08005405 	.word	0x08005405
 8005ac0:	08005405 	.word	0x08005405
 8005ac4:	08005405 	.word	0x08005405
 8005ac8:	08005405 	.word	0x08005405
 8005acc:	08005405 	.word	0x08005405
 8005ad0:	08005405 	.word	0x08005405
 8005ad4:	08005405 	.word	0x08005405
 8005ad8:	08005405 	.word	0x08005405
 8005adc:	08005ae1 	.word	0x08005ae1
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005ae0:	4946      	ldr	r1, [pc, #280]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ae2:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005ae6:	f412 3260 	ands.w	r2, r2, #229376	@ 0x38000
 8005aea:	f43f aecc 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005aee:	680b      	ldr	r3, [r1, #0]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	d502      	bpl.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005af4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005af8:	d0a2      	beq.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005afa:	4b40      	ldr	r3, [pc, #256]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	0098      	lsls	r0, r3, #2
 8005b00:	d502      	bpl.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8005b02:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005b06:	d0a0      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005b08:	4b3c      	ldr	r3, [pc, #240]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b0a:	6819      	ldr	r1, [r3, #0]
 8005b0c:	0789      	lsls	r1, r1, #30
 8005b0e:	d503      	bpl.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005b10:	f5b2 3fc0 	cmp.w	r2, #98304	@ 0x18000
 8005b14:	f000 8729 	beq.w	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x15be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005b18:	4b38      	ldr	r3, [pc, #224]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0598      	lsls	r0, r3, #22
 8005b1e:	d503      	bpl.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 8005b20:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005b24:	f000 87cf 	beq.w	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x171a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005b28:	4b34      	ldr	r3, [pc, #208]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b2a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005b2e:	f010 0002 	ands.w	r0, r0, #2
 8005b32:	f43f ac68 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005b36:	f5a2 3320 	sub.w	r3, r2, #163840	@ 0x28000
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	03d8      	lsls	r0, r3, #15
 8005b42:	e460      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b44:	492d      	ldr	r1, [pc, #180]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b46:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005b4a:	f012 0238 	ands.w	r2, r2, #56	@ 0x38
 8005b4e:	f43f ae9a 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005b52:	680b      	ldr	r3, [r1, #0]
 8005b54:	0118      	lsls	r0, r3, #4
 8005b56:	d502      	bpl.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005b58:	2a08      	cmp	r2, #8
 8005b5a:	f43f af71 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005b5e:	2a10      	cmp	r2, #16
 8005b60:	f43f af73 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005b64:	4b25      	ldr	r3, [pc, #148]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b66:	6819      	ldr	r1, [r3, #0]
 8005b68:	0789      	lsls	r1, r1, #30
 8005b6a:	d502      	bpl.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8005b6c:	2a18      	cmp	r2, #24
 8005b6e:	f000 871f 	beq.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005b72:	4b22      	ldr	r3, [pc, #136]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	0598      	lsls	r0, r3, #22
 8005b78:	d502      	bpl.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005b7a:	2a20      	cmp	r2, #32
 8005b7c:	f000 87ac 	beq.w	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x172c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005b80:	4b1e      	ldr	r3, [pc, #120]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b82:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005b86:	f010 0002 	ands.w	r0, r0, #2
 8005b8a:	f43f ac3c 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005b8e:	f1a2 0328 	sub.w	r3, r2, #40	@ 0x28
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	03d8      	lsls	r0, r3, #15
 8005b9a:	e434      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b9c:	4917      	ldr	r1, [pc, #92]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b9e:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005ba2:	f012 0207 	ands.w	r2, r2, #7
 8005ba6:	f000 840f 	beq.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005baa:	680b      	ldr	r3, [r1, #0]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	d502      	bpl.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005bb0:	2a01      	cmp	r2, #1
 8005bb2:	f43f af45 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005bb6:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	0098      	lsls	r0, r3, #2
 8005bbc:	d502      	bpl.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005bbe:	2a02      	cmp	r2, #2
 8005bc0:	f43f af43 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	0789      	lsls	r1, r1, #30
 8005bca:	d502      	bpl.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8005bcc:	2a03      	cmp	r2, #3
 8005bce:	f000 86be 	beq.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x15a2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	059b      	lsls	r3, r3, #22
 8005bd8:	d502      	bpl.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005bda:	2a04      	cmp	r2, #4
 8005bdc:	f000 8770 	beq.w	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1714>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005be2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005be6:	f010 0002 	ands.w	r0, r0, #2
 8005bea:	f43f ac0c 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005bee:	f1a2 0305 	sub.w	r3, r2, #5
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	03d8      	lsls	r0, r3, #15
 8005bfa:	e404      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005bfc:	44020c00 	.word	0x44020c00
 8005c00:	00bb8000 	.word	0x00bb8000
 8005c04:	03d09000 	.word	0x03d09000
 8005c08:	007a1200 	.word	0x007a1200
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c0c:	49a7      	ldr	r1, [pc, #668]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c0e:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005c12:	f412 6260 	ands.w	r2, r2, #3584	@ 0xe00
 8005c16:	f43f ae36 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005c1a:	680b      	ldr	r3, [r1, #0]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	d503      	bpl.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005c20:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005c24:	f43f af0c 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005c28:	4ba0      	ldr	r3, [pc, #640]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	0098      	lsls	r0, r3, #2
 8005c2e:	d503      	bpl.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005c30:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005c34:	f43f af09 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005c38:	4b9c      	ldr	r3, [pc, #624]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c3a:	6819      	ldr	r1, [r3, #0]
 8005c3c:	0789      	lsls	r1, r1, #30
 8005c3e:	d503      	bpl.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8005c40:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8005c44:	f000 868a 	beq.w	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005c48:	4b98      	ldr	r3, [pc, #608]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	0598      	lsls	r0, r3, #22
 8005c4e:	d503      	bpl.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8005c50:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005c54:	f000 873a 	beq.w	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x1720>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005c58:	4b94      	ldr	r3, [pc, #592]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c5a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005c5e:	f010 0002 	ands.w	r0, r0, #2
 8005c62:	f43f abd0 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c66:	f5a2 6320 	sub.w	r3, r2, #2560	@ 0xa00
 8005c6a:	fab3 f383 	clz	r3, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	03d8      	lsls	r0, r3, #15
 8005c72:	f7ff bbc8 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c76:	498d      	ldr	r1, [pc, #564]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c78:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005c7c:	f412 72e0 	ands.w	r2, r2, #448	@ 0x1c0
 8005c80:	f43f ae01 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005c84:	680b      	ldr	r3, [r1, #0]
 8005c86:	0119      	lsls	r1, r3, #4
 8005c88:	d502      	bpl.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005c8a:	2a40      	cmp	r2, #64	@ 0x40
 8005c8c:	f43f aed8 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005c90:	4b86      	ldr	r3, [pc, #536]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	d502      	bpl.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005c98:	2a80      	cmp	r2, #128	@ 0x80
 8005c9a:	f43f aed6 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005c9e:	4b83      	ldr	r3, [pc, #524]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	0788      	lsls	r0, r1, #30
 8005ca4:	d502      	bpl.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 8005ca6:	2ac0      	cmp	r2, #192	@ 0xc0
 8005ca8:	f000 8666 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005cac:	4b7f      	ldr	r3, [pc, #508]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	0599      	lsls	r1, r3, #22
 8005cb2:	d503      	bpl.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
 8005cb4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005cb8:	f000 86ff 	beq.w	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x170e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cbe:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005cc2:	f010 0002 	ands.w	r0, r0, #2
 8005cc6:	f43f ab9e 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005cca:	f5a2 73a0 	sub.w	r3, r2, #320	@ 0x140
 8005cce:	fab3 f383 	clz	r3, r3
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	03d8      	lsls	r0, r3, #15
 8005cd6:	f7ff bb96 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005cda:	4974      	ldr	r1, [pc, #464]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cdc:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005ce0:	f412 42e0 	ands.w	r2, r2, #28672	@ 0x7000
 8005ce4:	f43f adcf 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005ce8:	680b      	ldr	r3, [r1, #0]
 8005cea:	0119      	lsls	r1, r3, #4
 8005cec:	d503      	bpl.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8005cee:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8005cf2:	f43f aea5 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	d503      	bpl.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005cfe:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005d02:	f43f aea2 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005d06:	4b69      	ldr	r3, [pc, #420]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	0788      	lsls	r0, r1, #30
 8005d0c:	d503      	bpl.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005d0e:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8005d12:	f000 8615 	beq.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005d16:	4b65      	ldr	r3, [pc, #404]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	0599      	lsls	r1, r3, #22
 8005d1c:	d503      	bpl.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005d1e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8005d22:	f000 8691 	beq.w	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005d26:	4b61      	ldr	r3, [pc, #388]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d28:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005d2c:	f010 0002 	ands.w	r0, r0, #2
 8005d30:	f43f ab69 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005d34:	f5a2 43a0 	sub.w	r3, r2, #20480	@ 0x5000
 8005d38:	fab3 f383 	clz	r3, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	03d8      	lsls	r0, r3, #15
 8005d40:	f7ff bb61 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005d44:	2901      	cmp	r1, #1
 8005d46:	bf08      	it	eq
 8005d48:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005d4a:	bf18      	it	ne
 8005d4c:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005d4e:	f47f ab5a 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005d52:	4956      	ldr	r1, [pc, #344]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d54:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8005d58:	f412 3260 	ands.w	r2, r2, #229376	@ 0x38000
 8005d5c:	f000 8334 	beq.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005d60:	680b      	ldr	r3, [r1, #0]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	d503      	bpl.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005d66:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005d6a:	f43f ae69 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0098      	lsls	r0, r3, #2
 8005d74:	d503      	bpl.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8005d76:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005d7a:	f43f ae66 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d80:	6819      	ldr	r1, [r3, #0]
 8005d82:	0789      	lsls	r1, r1, #30
 8005d84:	d503      	bpl.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8005d86:	f5b2 3fc0 	cmp.w	r2, #98304	@ 0x18000
 8005d8a:	f000 85bd 	beq.w	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8005d8e:	4b47      	ldr	r3, [pc, #284]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	059b      	lsls	r3, r3, #22
 8005d94:	d503      	bpl.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8005d96:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005d9a:	f000 8661 	beq.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8005d9e:	4b43      	ldr	r3, [pc, #268]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005da6:	f43f ab2e 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005daa:	f5b2 3f20 	cmp.w	r2, #163840	@ 0x28000
 8005dae:	4840      	ldr	r0, [pc, #256]	@ (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005db0:	bf18      	it	ne
 8005db2:	2000      	movne	r0, #0
 8005db4:	f7ff bb27 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005db8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005dbc:	bf08      	it	eq
 8005dbe:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005dc0:	bf18      	it	ne
 8005dc2:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005dc4:	f47f ab1f 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005dc8:	4938      	ldr	r1, [pc, #224]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dca:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005dce:	f412 0240 	ands.w	r2, r2, #12582912	@ 0xc00000
 8005dd2:	f43f acfe 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005dd6:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005dda:	f000 8300 	beq.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005dde:	680b      	ldr	r3, [r1, #0]
 8005de0:	079b      	lsls	r3, r3, #30
 8005de2:	d503      	bpl.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8005de4:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005de8:	f000 8575 	beq.w	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005dec:	4b2f      	ldr	r3, [pc, #188]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005df4:	f43f ab07 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005df8:	f5b2 0f40 	cmp.w	r2, #12582912	@ 0xc00000
 8005dfc:	482d      	ldr	r0, [pc, #180]	@ (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005dfe:	bf18      	it	ne
 8005e00:	2000      	movne	r0, #0
 8005e02:	f7ff bb00 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005e06:	f5a0 2000 	sub.w	r0, r0, #524288	@ 0x80000
 8005e0a:	4308      	orrs	r0, r1
        frequency = 0U;
 8005e0c:	bf18      	it	ne
 8005e0e:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005e10:	f47f aaf9 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e14:	4a25      	ldr	r2, [pc, #148]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005e16:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8005e1a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8005e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e22:	f43f addb 	beq.w	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005e26:	f67f adce 	bls.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8005e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e2e:	f000 83c6 	beq.w	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x1212>
 8005e32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e36:	f040 85c5 	bne.w	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e3a:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e3e:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e40:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e44:	0798      	lsls	r0, r3, #30
 8005e46:	f140 8447 	bpl.w	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	f040 8444 	bne.w	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	4819      	ldr	r0, [pc, #100]	@ (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>)
 8005e54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005e58:	40d8      	lsrs	r0, r3
 8005e5a:	f7ff bad4 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005e5e:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 8005e62:	4308      	orrs	r0, r1
        frequency = 0U;
 8005e64:	bf18      	it	ne
 8005e66:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005e68:	f47f aacd 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005e6c:	490f      	ldr	r1, [pc, #60]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005e6e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005e72:	f412 2240 	ands.w	r2, r2, #786432	@ 0xc0000
 8005e76:	f43f ad06 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005e7a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005e7e:	f000 82ae 	beq.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005e82:	680b      	ldr	r3, [r1, #0]
 8005e84:	079b      	lsls	r3, r3, #30
 8005e86:	d503      	bpl.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005e88:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8005e8c:	f000 857b 	beq.w	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005e98:	f43f aab5 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005e9c:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8005ea0:	4804      	ldr	r0, [pc, #16]	@ (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005ea2:	bf18      	it	ne
 8005ea4:	2000      	movne	r0, #0
 8005ea6:	f7ff baae 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005eaa:	bf00      	nop
 8005eac:	44020c00 	.word	0x44020c00
 8005eb0:	007a1200 	.word	0x007a1200
 8005eb4:	003d0900 	.word	0x003d0900
 8005eb8:	03d09000 	.word	0x03d09000
    switch (PeriphClk)
 8005ebc:	f5a0 7000 	sub.w	r0, r0, #512	@ 0x200
 8005ec0:	4308      	orrs	r0, r1
        frequency = 0U;
 8005ec2:	bf18      	it	ne
 8005ec4:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005ec6:	f47f aa9e 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005eca:	4bab      	ldr	r3, [pc, #684]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ecc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005ed0:	f012 5260 	ands.w	r2, r2, #939524096	@ 0x38000000
 8005ed4:	f43f acd7 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	d503      	bpl.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 8005ede:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8005ee2:	f43f adad 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005ee6:	4ba4      	ldr	r3, [pc, #656]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	0098      	lsls	r0, r3, #2
 8005eec:	d503      	bpl.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005eee:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8005ef2:	f43f adaa 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005ef6:	4ba0      	ldr	r3, [pc, #640]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ef8:	6819      	ldr	r1, [r3, #0]
 8005efa:	0789      	lsls	r1, r1, #30
 8005efc:	d503      	bpl.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005efe:	f1b2 5fc0 	cmp.w	r2, #402653184	@ 0x18000000
 8005f02:	f000 84e1 	beq.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005f06:	4b9c      	ldr	r3, [pc, #624]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	0598      	lsls	r0, r3, #22
 8005f0c:	d503      	bpl.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8005f0e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005f12:	f000 85b7 	beq.w	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005f16:	4b98      	ldr	r3, [pc, #608]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f18:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005f1c:	f010 0002 	ands.w	r0, r0, #2
 8005f20:	f43f aa71 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005f24:	f1a2 5320 	sub.w	r3, r2, #671088640	@ 0x28000000
 8005f28:	fab3 f383 	clz	r3, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	03d8      	lsls	r0, r3, #15
 8005f30:	f7ff ba69 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005f34:	2920      	cmp	r1, #32
 8005f36:	bf08      	it	eq
 8005f38:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005f3a:	bf18      	it	ne
 8005f3c:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005f3e:	f47f aa62 	bne.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005f42:	4a8d      	ldr	r2, [pc, #564]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f44:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8005f48:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8005f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f50:	f000 8371 	beq.w	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x128a>
 8005f54:	f200 82ab 	bhi.w	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f5c:	f43f ad34 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f64:	f000 8235 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f43f ac32 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7ff ba49 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f74:	4a80      	ldr	r2, [pc, #512]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f76:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005f7a:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005f80:	0390      	lsls	r0, r2, #14
 8005f82:	d502      	bpl.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 830c 	beq.w	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f8e:	f43f ad52 	beq.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f96:	f43f ad53 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        frequency = 0U;
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7ff ba33 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005fa0:	4975      	ldr	r1, [pc, #468]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005fa2:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005fa6:	f012 7240 	ands.w	r2, r2, #50331648	@ 0x3000000
 8005faa:	f43f ac6c 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005fae:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005fb2:	f000 8214 	beq.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005fb6:	6808      	ldr	r0, [r1, #0]
 8005fb8:	f010 0002 	ands.w	r0, r0, #2
 8005fbc:	f43f aa23 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005fc0:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8005fc4:	f000 84b5 	beq.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        frequency = 0U;
 8005fc8:	2000      	movs	r0, #0
 8005fca:	f7ff ba1c 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8005fce:	496a      	ldr	r1, [pc, #424]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005fd0:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8005fd4:	f012 0207 	ands.w	r2, r2, #7
 8005fd8:	f43f ac55 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8005fdc:	680b      	ldr	r3, [r1, #0]
 8005fde:	0119      	lsls	r1, r3, #4
 8005fe0:	d502      	bpl.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	f43f ad2c 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8005fe8:	4b63      	ldr	r3, [pc, #396]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	d502      	bpl.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8005ff0:	2a02      	cmp	r2, #2
 8005ff2:	f43f ad2a 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8005ff6:	4b60      	ldr	r3, [pc, #384]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	0788      	lsls	r0, r1, #30
 8005ffc:	d502      	bpl.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 8005ffe:	2a03      	cmp	r2, #3
 8006000:	f000 847b 	beq.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006004:	4b5c      	ldr	r3, [pc, #368]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	0599      	lsls	r1, r3, #22
 800600a:	d502      	bpl.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800600c:	2a04      	cmp	r2, #4
 800600e:	f000 8548 	beq.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006012:	4b59      	ldr	r3, [pc, #356]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006014:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8006018:	f010 0002 	ands.w	r0, r0, #2
 800601c:	f43f a9f3 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006020:	f1a2 0305 	sub.w	r3, r2, #5
 8006024:	fab3 f383 	clz	r3, r3
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	03d8      	lsls	r0, r3, #15
 800602c:	f7ff b9eb 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006030:	4b51      	ldr	r3, [pc, #324]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
        switch (srcclk)
 800603a:	2b20      	cmp	r3, #32
 800603c:	d844      	bhi.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	080059d3 	.word	0x080059d3
 8006048:	080060c9 	.word	0x080060c9
 800604c:	080060c9 	.word	0x080060c9
 8006050:	080060c9 	.word	0x080060c9
 8006054:	080060c9 	.word	0x080060c9
 8006058:	080060c9 	.word	0x080060c9
 800605c:	080060c9 	.word	0x080060c9
 8006060:	080060c9 	.word	0x080060c9
 8006064:	080059c9 	.word	0x080059c9
 8006068:	080060c9 	.word	0x080060c9
 800606c:	080060c9 	.word	0x080060c9
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060c9 	.word	0x080060c9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060c9 	.word	0x080060c9
 8006080:	080060c9 	.word	0x080060c9
 8006084:	080059dd 	.word	0x080059dd
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
 8006094:	080060c9 	.word	0x080060c9
 8006098:	080060c9 	.word	0x080060c9
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	080060c9 	.word	0x080060c9
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060c9 	.word	0x080060c9
 80060b4:	080060c9 	.word	0x080060c9
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060c9 	.word	0x080060c9
 80060c0:	080060c9 	.word	0x080060c9
 80060c4:	080060cf 	.word	0x080060cf
        frequency = 0U;
 80060c8:	2000      	movs	r0, #0
 80060ca:	f7ff b99c 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 80060d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060d4:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060d6:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060da:	0789      	lsls	r1, r1, #30
 80060dc:	f140 8326 	bpl.w	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	f040 8323 	bne.w	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4824      	ldr	r0, [pc, #144]	@ (800617c <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>)
 80060ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060ee:	40d8      	lsrs	r0, r3
 80060f0:	f7ff b989 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 80060f4:	4822      	ldr	r0, [pc, #136]	@ (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>)
 80060f6:	f7ff b986 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80060fa:	491f      	ldr	r1, [pc, #124]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 80060fc:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006100:	f012 0207 	ands.w	r2, r2, #7
 8006104:	f000 8115 	beq.w	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006108:	2a01      	cmp	r2, #1
 800610a:	f000 82c8 	beq.w	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800610e:	2a02      	cmp	r2, #2
 8006110:	f000 836b 	beq.w	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006114:	680b      	ldr	r3, [r1, #0]
 8006116:	039b      	lsls	r3, r3, #14
 8006118:	d502      	bpl.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 800611a:	2a03      	cmp	r2, #3
 800611c:	f000 84d9 	beq.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1726>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006120:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	0788      	lsls	r0, r1, #30
 8006126:	d502      	bpl.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
 8006128:	2a04      	cmp	r2, #4
 800612a:	f000 8477 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800612e:	4b12      	ldr	r3, [pc, #72]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8006136:	f43f a966 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800613a:	2a05      	cmp	r2, #5
 800613c:	4811      	ldr	r0, [pc, #68]	@ (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0xdd8>)
 800613e:	bf18      	it	ne
 8006140:	2000      	movne	r0, #0
 8006142:	f7ff b960 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006146:	4a0c      	ldr	r2, [pc, #48]	@ (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006148:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 800614c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
        switch (srcclk)
 8006150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006154:	f000 823c 	beq.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8006158:	f200 8153 	bhi.w	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 800615c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006160:	f43f ac32 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006168:	f000 8133 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800616c:	2b00      	cmp	r3, #0
 800616e:	f43f ab30 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 8006172:	2000      	movs	r0, #0
 8006174:	f7ff b947 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006178:	44020c00 	.word	0x44020c00
 800617c:	03d09000 	.word	0x03d09000
 8006180:	00bb8000 	.word	0x00bb8000
 8006184:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006188:	49ab      	ldr	r1, [pc, #684]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800618a:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800618e:	f012 0270 	ands.w	r2, r2, #112	@ 0x70
 8006192:	f43f ab78 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	d502      	bpl.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800619c:	2a10      	cmp	r2, #16
 800619e:	f43f ac4f 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80061a2:	4ba5      	ldr	r3, [pc, #660]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	0098      	lsls	r0, r3, #2
 80061a8:	d502      	bpl.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 80061aa:	2a20      	cmp	r2, #32
 80061ac:	f43f ac4d 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80061b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	0789      	lsls	r1, r1, #30
 80061b6:	d502      	bpl.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
 80061b8:	2a30      	cmp	r2, #48	@ 0x30
 80061ba:	f000 8377 	beq.w	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80061be:	4b9e      	ldr	r3, [pc, #632]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	059b      	lsls	r3, r3, #22
 80061c4:	d502      	bpl.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
 80061c6:	2a40      	cmp	r2, #64	@ 0x40
 80061c8:	f000 846e 	beq.w	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80061cc:	4b9a      	ldr	r3, [pc, #616]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061ce:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80061d2:	f010 0002 	ands.w	r0, r0, #2
 80061d6:	f43f a916 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80061da:	f1a2 0350 	sub.w	r3, r2, #80	@ 0x50
 80061de:	fab3 f383 	clz	r3, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	03d8      	lsls	r0, r3, #15
 80061e6:	f7ff b90e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80061ea:	4a93      	ldr	r2, [pc, #588]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80061f0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
        switch (srcclk)
 80061f4:	2b80      	cmp	r3, #128	@ 0x80
 80061f6:	f43f abf1 	beq.w	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80061fa:	f67f abe4 	bls.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80061fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006200:	f000 81e0 	beq.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
 8006204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006208:	f040 83df 	bne.w	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x161e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800620c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006210:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006212:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006216:	0798      	lsls	r0, r3, #30
 8006218:	f140 82a8 	bpl.w	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
 800621c:	2900      	cmp	r1, #0
 800621e:	f040 82a5 	bne.w	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	4885      	ldr	r0, [pc, #532]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 8006226:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800622a:	40d8      	lsrs	r0, r3
 800622c:	f7ff b8eb 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006230:	4a81      	ldr	r2, [pc, #516]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006232:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8006236:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
        switch (srcclk)
 800623a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800623e:	f000 820c 	beq.w	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8006242:	f200 8168 	bhi.w	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
 8006246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800624a:	f43f abbd 	beq.w	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800624e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006252:	f000 80be 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006256:	2b00      	cmp	r3, #0
 8006258:	f43f aabb 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 800625c:	2000      	movs	r0, #0
 800625e:	f7ff b8d2 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006262:	4b75      	ldr	r3, [pc, #468]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006264:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006268:	f412 12e0 	ands.w	r2, r2, #1835008	@ 0x1c0000
 800626c:	f43f ab0b 	beq.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	0119      	lsls	r1, r3, #4
 8006274:	d503      	bpl.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 8006276:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800627a:	f43f abe1 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800627e:	4b6e      	ldr	r3, [pc, #440]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	d503      	bpl.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8006286:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800628a:	f43f abde 	beq.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800628e:	4b6a      	ldr	r3, [pc, #424]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	0788      	lsls	r0, r1, #30
 8006294:	d503      	bpl.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006296:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 800629a:	f000 837b 	beq.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800629e:	4b66      	ldr	r3, [pc, #408]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	0599      	lsls	r1, r3, #22
 80062a4:	d503      	bpl.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 80062a6:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80062aa:	f000 8400 	beq.w	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x1702>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80062ae:	4b62      	ldr	r3, [pc, #392]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062b0:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80062b4:	f010 0002 	ands.w	r0, r0, #2
 80062b8:	f43f a8a5 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80062bc:	f5a2 13a0 	sub.w	r3, r2, #1310720	@ 0x140000
 80062c0:	fab3 f383 	clz	r3, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	03d8      	lsls	r0, r3, #15
 80062c8:	f7ff b89d 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80062cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062ce:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80062d2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
        switch (srcclk)
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062da:	f43f ab7f 	beq.w	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80062de:	f67f ab72 	bls.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80062e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80062e6:	f000 8170 	beq.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 80062ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062ee:	f040 8366 	bne.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062f2:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062f6:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062f8:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062fc:	079b      	lsls	r3, r3, #30
 80062fe:	f140 81d3 	bpl.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12fc>
 8006302:	2900      	cmp	r1, #0
 8006304:	f040 81d0 	bne.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12fc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	484c      	ldr	r0, [pc, #304]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 800630c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006310:	40d8      	lsrs	r0, r3
 8006312:	f7ff b878 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006316:	4a48      	ldr	r2, [pc, #288]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006318:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800631c:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 8006320:	2b02      	cmp	r3, #2
 8006322:	f000 8111 	beq.w	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 8006326:	2b03      	cmp	r3, #3
 8006328:	f000 8117 	beq.w	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x11ae>
 800632c:	2b01      	cmp	r3, #1
 800632e:	f43f ab50 	beq.w	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
}
 8006332:	b005      	add	sp, #20
 8006334:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 8006338:	f7fd babc 	b.w	80038b4 <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800633c:	4b3e      	ldr	r3, [pc, #248]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800633e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006342:	681b      	ldr	r3, [r3, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006344:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006348:	049b      	lsls	r3, r3, #18
 800634a:	d502      	bpl.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 800634c:	2a00      	cmp	r2, #0
 800634e:	f000 812b 	beq.w	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006352:	4b39      	ldr	r3, [pc, #228]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	0198      	lsls	r0, r3, #6
 8006358:	d502      	bpl.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>
 800635a:	2a10      	cmp	r2, #16
 800635c:	f43f ab6b 	beq.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006360:	4b35      	ldr	r3, [pc, #212]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006366:	0799      	lsls	r1, r3, #30
 8006368:	d502      	bpl.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>
 800636a:	2a20      	cmp	r2, #32
 800636c:	f000 8333 	beq.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006370:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006372:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8006376:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800637a:	f43f a844 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800637e:	2a30      	cmp	r2, #48	@ 0x30
 8006380:	bf0c      	ite	eq
 8006382:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8006386:	2000      	movne	r0, #0
 8006388:	f7ff b83d 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800638c:	492a      	ldr	r1, [pc, #168]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800638e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006392:	f412 1240 	ands.w	r2, r2, #3145728	@ 0x300000
 8006396:	f43f aa1c 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800639a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800639e:	d01e      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	0798      	lsls	r0, r3, #30
 80063a4:	d503      	bpl.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x1002>
 80063a6:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 80063aa:	f000 82b4 	beq.w	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x156a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80063ae:	4b22      	ldr	r3, [pc, #136]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 80063b6:	f43f a826 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80063ba:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 80063be:	4820      	ldr	r0, [pc, #128]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>)
 80063c0:	bf18      	it	ne
 80063c2:	2000      	movne	r0, #0
 80063c4:	f7ff b81f 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
}
 80063c8:	b005      	add	sp, #20
 80063ca:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 80063ce:	f7fd baf9 	b.w	80039c4 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063d2:	a801      	add	r0, sp, #4
 80063d4:	f7fe ff3e 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80063d8:	9803      	ldr	r0, [sp, #12]
            break;
 80063da:	f7ff b814 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063de:	a801      	add	r0, sp, #4
 80063e0:	f7fe ff38 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80063e4:	9803      	ldr	r0, [sp, #12]
 80063e6:	f7ff b80e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80063ea:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80063ee:	0112      	lsls	r2, r2, #4
 80063f0:	f140 80b0 	bpl.w	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        frequency = 0U;
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bf14      	ite	ne
 80063f8:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80063fc:	2000      	moveq	r0, #0
 80063fe:	f7ff b802 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8006402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006406:	f000 8140 	beq.w	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800640a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800640e:	f040 82ec 	bne.w	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006412:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006414:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006418:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800641a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800641e:	0789      	lsls	r1, r1, #30
 8006420:	f140 8213 	bpl.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
 8006424:	2a00      	cmp	r2, #0
 8006426:	f040 8210 	bne.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4803      	ldr	r0, [pc, #12]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 800642e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006432:	40d8      	lsrs	r0, r3
 8006434:	f7fe bfe7 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006438:	44020c00 	.word	0x44020c00
 800643c:	03d09000 	.word	0x03d09000
 8006440:	003d0900 	.word	0x003d0900
        switch (srcclk)
 8006444:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006448:	f000 80eb 	beq.w	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800644c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8006450:	f040 82d4 	bne.w	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006454:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006458:	680b      	ldr	r3, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800645a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800645e:	0798      	lsls	r0, r3, #30
 8006460:	f140 81ae 	bpl.w	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
 8006464:	2a00      	cmp	r2, #0
 8006466:	f040 81ab 	bne.w	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800646a:	680b      	ldr	r3, [r1, #0]
 800646c:	48ba      	ldr	r0, [pc, #744]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800646e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006472:	40d8      	lsrs	r0, r3
 8006474:	f7fe bfc7 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8006478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800647c:	f000 80e2 	beq.w	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8006480:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006484:	f040 82c4 	bne.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006488:	4bb4      	ldr	r3, [pc, #720]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800648a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800648e:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006490:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006494:	0788      	lsls	r0, r1, #30
 8006496:	f140 81ed 	bpl.w	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x14c8>
 800649a:	2a00      	cmp	r2, #0
 800649c:	f040 81ea 	bne.w	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x14c8>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	48ad      	ldr	r0, [pc, #692]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80064a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064a8:	40d8      	lsrs	r0, r3
 80064aa:	f7fe bfac 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80064ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b2:	f000 80a5 	beq.w	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80064b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064ba:	f040 829c 	bne.w	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x164a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064be:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064c2:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064c4:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064c8:	079b      	lsls	r3, r3, #30
 80064ca:	f140 81a9 	bpl.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1474>
 80064ce:	2900      	cmp	r1, #0
 80064d0:	f040 81a6 	bne.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1474>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	48a0      	ldr	r0, [pc, #640]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80064d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064dc:	40d8      	lsrs	r0, r3
 80064de:	f7fe bf92 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80064e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e6:	f000 80bf 	beq.w	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80064ea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80064ee:	f040 8292 	bne.w	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064f2:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064f6:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064f8:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064fc:	0798      	lsls	r0, r3, #30
 80064fe:	f140 814a 	bpl.w	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
 8006502:	2900      	cmp	r1, #0
 8006504:	f040 8147 	bne.w	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006508:	6813      	ldr	r3, [r2, #0]
 800650a:	4893      	ldr	r0, [pc, #588]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800650c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006510:	40d8      	lsrs	r0, r3
 8006512:	f7fe bf78 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8006516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800651a:	d060      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
 800651c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006520:	f040 8266 	bne.w	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006524:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006528:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800652a:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800652e:	0798      	lsls	r0, r3, #30
 8006530:	f140 8161 	bpl.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
 8006534:	2900      	cmp	r1, #0
 8006536:	f040 815e 	bne.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	4886      	ldr	r0, [pc, #536]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800653e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006542:	40d8      	lsrs	r0, r3
 8006544:	f7fe bf5f 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006548:	a801      	add	r0, sp, #4
 800654a:	f7fe fdd7 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800654e:	9803      	ldr	r0, [sp, #12]
            break;
 8006550:	f7fe bf59 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006554:	2000      	movs	r0, #0
 8006556:	f7fe bf56 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800655a:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800655e:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006560:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006564:	0798      	lsls	r0, r3, #30
 8006566:	d507      	bpl.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x11cc>
 8006568:	b931      	cbnz	r1, 8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x11cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	487a      	ldr	r0, [pc, #488]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800656e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006572:	40d8      	lsrs	r0, r3
 8006574:	f7fe bf47 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006578:	4b78      	ldr	r3, [pc, #480]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	059b      	lsls	r3, r3, #22
 800657e:	d503      	bpl.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 8006580:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006584:	f000 82ae 	beq.w	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1738>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006588:	4b74      	ldr	r3, [pc, #464]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006590:	f000 821e 	beq.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1624>
        frequency = 0U;
 8006594:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006598:	4871      	ldr	r0, [pc, #452]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800659a:	bf18      	it	ne
 800659c:	2000      	movne	r0, #0
 800659e:	f7fe bf32 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = HSE_VALUE;
 80065a2:	486f      	ldr	r0, [pc, #444]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80065a4:	f7fe bf2f 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSI48_VALUE;
 80065a8:	486e      	ldr	r0, [pc, #440]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80065aa:	f7fe bf2c 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSE_VALUE;
 80065ae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80065b2:	f7fe bf28 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80065b6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80065ba:	f7fe bf24 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 80065be:	486a      	ldr	r0, [pc, #424]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80065c0:	f7fe bf21 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80065c4:	4868      	ldr	r0, [pc, #416]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80065c6:	f7fe bf1e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80065ca:	4867      	ldr	r0, [pc, #412]	@ (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80065cc:	f7fe bf1b 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065d0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80065d4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80065d8:	03c0      	lsls	r0, r0, #15
 80065da:	f7fe bf14 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065de:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80065e2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80065e6:	bf14      	ite	ne
 80065e8:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80065ec:	2000      	moveq	r0, #0
 80065ee:	f7fe bf0a 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065f2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80065f6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80065fa:	03c0      	lsls	r0, r0, #15
 80065fc:	f7fe bf03 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006600:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 8006604:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006608:	bf14      	ite	ne
 800660a:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800660e:	2000      	moveq	r0, #0
 8006610:	f7fe bef9 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006614:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006618:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800661c:	03c0      	lsls	r0, r0, #15
 800661e:	f7fe bef2 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006622:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
        frequency = 0U;
 8006626:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800662a:	bf14      	ite	ne
 800662c:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006630:	2000      	moveq	r0, #0
 8006632:	f7fe bee8 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006636:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800663a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800663e:	03c0      	lsls	r0, r0, #15
 8006640:	f7fe bee1 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006644:	4b45      	ldr	r3, [pc, #276]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = 0U;
 800664a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800664e:	bf14      	ite	ne
 8006650:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006654:	2000      	moveq	r0, #0
 8006656:	f7fe bed6 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800665a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800665e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006662:	03c0      	lsls	r0, r0, #15
 8006664:	f7fe becf 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006668:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 800666c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006670:	bf14      	ite	ne
 8006672:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006676:	2000      	moveq	r0, #0
 8006678:	f7fe bec5 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800667c:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 8006680:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006684:	03c0      	lsls	r0, r0, #15
 8006686:	f7fe bebe 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800668a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 800668e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006692:	bf14      	ite	ne
 8006694:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006698:	2000      	moveq	r0, #0
 800669a:	f7fe beb4 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
}
 800669e:	b005      	add	sp, #20
 80066a0:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 80066a4:	f7fd b8d8 	b.w	8003858 <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066a8:	4b2c      	ldr	r3, [pc, #176]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	0598      	lsls	r0, r3, #22
 80066ae:	d503      	bpl.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 80066b0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80066b4:	f000 8219 	beq.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066b8:	4b28      	ldr	r3, [pc, #160]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80066c0:	f000 81b3 	beq.w	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x167e>
        frequency = 0U;
 80066c4:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80066c8:	4825      	ldr	r0, [pc, #148]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80066ca:	bf18      	it	ne
 80066cc:	2000      	movne	r0, #0
 80066ce:	f7fe be9a 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fe be97 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066d8:	4b20      	ldr	r3, [pc, #128]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	059a      	lsls	r2, r3, #22
 80066de:	d503      	bpl.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 80066e0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80066e4:	f000 8204 	beq.w	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066e8:	4b1c      	ldr	r3, [pc, #112]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80066f0:	f000 81a1 	beq.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x168a>
        frequency = 0U;
 80066f4:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80066f8:	4819      	ldr	r0, [pc, #100]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80066fa:	bf18      	it	ne
 80066fc:	2000      	movne	r0, #0
 80066fe:	f7fe be82 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006702:	4b16      	ldr	r3, [pc, #88]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	0598      	lsls	r0, r3, #22
 8006708:	d503      	bpl.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800670a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800670e:	f000 8201 	beq.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1768>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800671a:	f000 818f 	beq.w	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>
        frequency = 0U;
 800671e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006722:	480f      	ldr	r0, [pc, #60]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006724:	bf18      	it	ne
 8006726:	2000      	movne	r0, #0
 8006728:	f7fe be6d 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800672c:	4b0b      	ldr	r3, [pc, #44]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	059b      	lsls	r3, r3, #22
 8006732:	d503      	bpl.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 8006734:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006738:	f000 81ef 	beq.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800673c:	4b07      	ldr	r3, [pc, #28]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006744:	f000 817d 	beq.w	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x1696>
        frequency = 0U;
 8006748:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800674c:	4804      	ldr	r0, [pc, #16]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800674e:	bf18      	it	ne
 8006750:	2000      	movne	r0, #0
 8006752:	f7fe be58 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006756:	bf00      	nop
 8006758:	03d09000 	.word	0x03d09000
 800675c:	44020c00 	.word	0x44020c00
 8006760:	007a1200 	.word	0x007a1200
 8006764:	02dc6c00 	.word	0x02dc6c00
 8006768:	00bb8000 	.word	0x00bb8000
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800676c:	4bbe      	ldr	r3, [pc, #760]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	059a      	lsls	r2, r3, #22
 8006772:	d503      	bpl.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8006774:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006778:	f000 81d2 	beq.w	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800677c:	4bba      	ldr	r3, [pc, #744]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006784:	f000 8154 	beq.w	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1684>
        frequency = 0U;
 8006788:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800678c:	48b7      	ldr	r0, [pc, #732]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800678e:	bf18      	it	ne
 8006790:	2000      	movne	r0, #0
 8006792:	f7fe be38 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006796:	4bb4      	ldr	r3, [pc, #720]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	059b      	lsls	r3, r3, #22
 800679c:	d503      	bpl.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13fa>
 800679e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80067a2:	f000 81c0 	beq.w	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x177a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067a6:	4bb0      	ldr	r3, [pc, #704]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067ae:	f000 8151 	beq.w	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
        frequency = 0U;
 80067b2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80067b6:	48ad      	ldr	r0, [pc, #692]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067b8:	bf18      	it	ne
 80067ba:	2000      	movne	r0, #0
 80067bc:	f7fe be23 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067c0:	4ba9      	ldr	r3, [pc, #676]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	059b      	lsls	r3, r3, #22
 80067c6:	d503      	bpl.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 80067c8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80067cc:	f000 8193 	beq.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067d0:	4ba5      	ldr	r3, [pc, #660]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067d8:	f000 816c 	beq.w	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
        frequency = 0U;
 80067dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80067e0:	48a2      	ldr	r0, [pc, #648]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067e2:	bf18      	it	ne
 80067e4:	2000      	movne	r0, #0
 80067e6:	f7fe be0e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ea:	a801      	add	r0, sp, #4
 80067ec:	f7fe fc86 	bl	80050fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067f0:	9803      	ldr	r0, [sp, #12]
 80067f2:	f7fe be08 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	059b      	lsls	r3, r3, #22
 80067fc:	d503      	bpl.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 80067fe:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006802:	f000 817b 	beq.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x1750>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006806:	4b98      	ldr	r3, [pc, #608]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800680e:	f000 811e 	beq.w	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
        frequency = 0U;
 8006812:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006816:	4895      	ldr	r0, [pc, #596]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006818:	bf18      	it	ne
 800681a:	2000      	movne	r0, #0
 800681c:	f7fe bdf3 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006820:	4b91      	ldr	r3, [pc, #580]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	0598      	lsls	r0, r3, #22
 8006826:	d503      	bpl.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1484>
 8006828:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800682c:	f000 8169 	beq.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1756>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006830:	4b8d      	ldr	r3, [pc, #564]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006838:	f000 812a 	beq.w	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16e4>
        frequency = 0U;
 800683c:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006840:	488a      	ldr	r0, [pc, #552]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006842:	bf18      	it	ne
 8006844:	2000      	movne	r0, #0
 8006846:	f7fe bdde 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800684a:	4b87      	ldr	r3, [pc, #540]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	059b      	lsls	r3, r3, #22
 8006850:	d503      	bpl.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x14ae>
 8006852:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006856:	f000 8157 	beq.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800685a:	4b83      	ldr	r3, [pc, #524]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006862:	f000 8109 	beq.w	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x16cc>
        frequency = 0U;
 8006866:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800686a:	4880      	ldr	r0, [pc, #512]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800686c:	bf18      	it	ne
 800686e:	2000      	movne	r0, #0
 8006870:	f7fe bdc9 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006874:	4b7c      	ldr	r3, [pc, #496]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	0599      	lsls	r1, r3, #22
 800687a:	d503      	bpl.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x14d8>
 800687c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006880:	f000 8145 	beq.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006884:	4b78      	ldr	r3, [pc, #480]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800688c:	f000 80fd 	beq.w	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
        frequency = 0U;
 8006890:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006894:	4875      	ldr	r0, [pc, #468]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006896:	bf18      	it	ne
 8006898:	2000      	movne	r0, #0
 800689a:	f7fe bdb4 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4873      	ldr	r0, [pc, #460]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068a6:	40d8      	lsrs	r0, r3
 80068a8:	f7fe bdad 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4870      	ldr	r0, [pc, #448]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068b4:	40d8      	lsrs	r0, r3
 80068b6:	f7fe bda6 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	486c      	ldr	r0, [pc, #432]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068c2:	40d8      	lsrs	r0, r3
 80068c4:	f7fe bd9f 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4869      	ldr	r0, [pc, #420]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068d0:	40d8      	lsrs	r0, r3
 80068d2:	f7fe bd98 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068d6:	680b      	ldr	r3, [r1, #0]
 80068d8:	4865      	ldr	r0, [pc, #404]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068de:	40d8      	lsrs	r0, r3
 80068e0:	f7fe bd91 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4862      	ldr	r0, [pc, #392]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068ec:	40d8      	lsrs	r0, r3
 80068ee:	f7fe bd8a 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSI_VALUE;
 80068f2:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 80068f6:	f7fe bd86 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	485c      	ldr	r0, [pc, #368]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006902:	40d8      	lsrs	r0, r3
 8006904:	f7fe bd7f 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4859      	ldr	r0, [pc, #356]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800690c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006910:	40d8      	lsrs	r0, r3
 8006912:	f7fe bd78 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006916:	680b      	ldr	r3, [r1, #0]
 8006918:	4855      	ldr	r0, [pc, #340]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800691a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800691e:	40d8      	lsrs	r0, r3
 8006920:	f7fe bd71 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4852      	ldr	r0, [pc, #328]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006928:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800692c:	40d8      	lsrs	r0, r3
 800692e:	f7fe bd6a 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006932:	680b      	ldr	r3, [r1, #0]
 8006934:	484e      	ldr	r0, [pc, #312]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006936:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800693a:	40d8      	lsrs	r0, r3
 800693c:	f7fe bd63 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	484b      	ldr	r0, [pc, #300]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006944:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006948:	40d8      	lsrs	r0, r3
 800694a:	f7fe bd5c 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4847      	ldr	r0, [pc, #284]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006952:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006956:	40d8      	lsrs	r0, r3
 8006958:	f7fe bd55 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4844      	ldr	r0, [pc, #272]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006960:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006964:	40d8      	lsrs	r0, r3
 8006966:	f7fe bd4e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4840      	ldr	r0, [pc, #256]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800696e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006972:	40d8      	lsrs	r0, r3
 8006974:	f7fe bd47 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	483d      	ldr	r0, [pc, #244]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800697c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006980:	40d8      	lsrs	r0, r3
 8006982:	f7fe bd40 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006986:	680b      	ldr	r3, [r1, #0]
 8006988:	4839      	ldr	r0, [pc, #228]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800698a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800698e:	40d8      	lsrs	r0, r3
 8006990:	f7fe bd39 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4836      	ldr	r0, [pc, #216]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006998:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800699c:	40d8      	lsrs	r0, r3
 800699e:	f7fe bd32 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4832      	ldr	r0, [pc, #200]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80069a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069aa:	40d8      	lsrs	r0, r3
 80069ac:	f7fe bd2b 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	482f      	ldr	r0, [pc, #188]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80069b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069b8:	40d8      	lsrs	r0, r3
 80069ba:	f7fe bd24 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fe bd21 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7fe bd1e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069ca:	2000      	movs	r0, #0
 80069cc:	f7fe bd1b 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe bd18 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSE_VALUE;
 80069d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80069da:	f7fe bd14 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe bd11 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7fe bd0e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069ea:	2000      	movs	r0, #0
 80069ec:	f7fe bd0b 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069f0:	2000      	movs	r0, #0
 80069f2:	f7fe bd08 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069f6:	2000      	movs	r0, #0
 80069f8:	f7fe bd05 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe bd02 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a02:	680b      	ldr	r3, [r1, #0]
 8006a04:	481a      	ldr	r0, [pc, #104]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006a06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a0a:	40d8      	lsrs	r0, r3
 8006a0c:	f7fe bcfb 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a10:	2000      	movs	r0, #0
 8006a12:	f7fe bcf8 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a16:	2000      	movs	r0, #0
 8006a18:	f7fe bcf5 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4814      	ldr	r0, [pc, #80]	@ (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006a20:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a24:	40d8      	lsrs	r0, r3
 8006a26:	f7fe bcee 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe bceb 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe bce8 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe bce5 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe bce2 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe bcdf 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a48:	480a      	ldr	r0, [pc, #40]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 8006a4a:	f7fe bcdc 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe bcd9 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe bcd6 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a5a:	4806      	ldr	r0, [pc, #24]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 8006a5c:	f7fe bcd3 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a60:	4804      	ldr	r0, [pc, #16]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 8006a62:	f7fe bcd0 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a66:	bf00      	nop
 8006a68:	44020c00 	.word	0x44020c00
 8006a6c:	007a1200 	.word	0x007a1200
 8006a70:	03d09000 	.word	0x03d09000
 8006a74:	003d0900 	.word	0x003d0900
        frequency = 0U;
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe bcc4 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a7e:	482d      	ldr	r0, [pc, #180]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a80:	f7fe bcc1 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a84:	482b      	ldr	r0, [pc, #172]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a86:	f7fe bcbe 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe bcbb 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe bcb8 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a96:	4827      	ldr	r0, [pc, #156]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a98:	f7fe bcb5 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a9c:	4825      	ldr	r0, [pc, #148]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a9e:	f7fe bcb2 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aa2:	4824      	ldr	r0, [pc, #144]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006aa4:	f7fe bcaf 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aa8:	4822      	ldr	r0, [pc, #136]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006aaa:	f7fe bcac 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aae:	4821      	ldr	r0, [pc, #132]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ab0:	f7fe bca9 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe bca6 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006aba:	481e      	ldr	r0, [pc, #120]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006abc:	f7fe bca3 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ac0:	481c      	ldr	r0, [pc, #112]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ac2:	f7fe bca0 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ac6:	481b      	ldr	r0, [pc, #108]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ac8:	f7fe bc9d 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006acc:	4819      	ldr	r0, [pc, #100]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ace:	f7fe bc9a 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = HSE_VALUE;
 8006ad2:	4819      	ldr	r0, [pc, #100]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x178c>)
 8006ad4:	f7fe bc97 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006ad8:	4816      	ldr	r0, [pc, #88]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ada:	f7fe bc94 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ade:	4815      	ldr	r0, [pc, #84]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ae0:	f7fe bc91 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ae4:	4813      	ldr	r0, [pc, #76]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ae6:	f7fe bc8e 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aea:	4812      	ldr	r0, [pc, #72]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006aec:	f7fe bc8b 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006af0:	4810      	ldr	r0, [pc, #64]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006af2:	f7fe bc88 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006af6:	480f      	ldr	r0, [pc, #60]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006af8:	f7fe bc85 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006afc:	480d      	ldr	r0, [pc, #52]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006afe:	f7fe bc82 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b02:	480c      	ldr	r0, [pc, #48]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b04:	f7fe bc7f 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b08:	480a      	ldr	r0, [pc, #40]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b0a:	f7fe bc7c 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b0e:	4809      	ldr	r0, [pc, #36]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b10:	f7fe bc79 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b14:	4807      	ldr	r0, [pc, #28]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b16:	f7fe bc76 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b1a:	4806      	ldr	r0, [pc, #24]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b1c:	f7fe bc73 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b20:	4804      	ldr	r0, [pc, #16]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b22:	f7fe bc70 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b26:	4803      	ldr	r0, [pc, #12]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b28:	f7fe bc6d 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f7fe bc6a 	b.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b32:	bf00      	nop
 8006b34:	003d0900 	.word	0x003d0900
 8006b38:	007a1200 	.word	0x007a1200

08006b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	4616      	mov	r6, r2
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b42:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8006b46:	2a20      	cmp	r2, #32
 8006b48:	d16a      	bne.n	8006c20 <HAL_UART_Transmit+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d03d      	beq.n	8006bcc <HAL_UART_Transmit+0x90>
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	d03b      	beq.n	8006bcc <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006b54:	461f      	mov	r7, r3
 8006b56:	6803      	ldr	r3, [r0, #0]
 8006b58:	4604      	mov	r4, r0
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	0612      	lsls	r2, r2, #24
 8006b5e:	d462      	bmi.n	8006c26 <HAL_UART_Transmit+0xea>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b60:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b6a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b6e:	f7fb f91f 	bl	8001db0 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b72:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006b74:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize  = Size;
 8006b7a:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b7e:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b82:	d055      	beq.n	8006c30 <HAL_UART_Transmit+0xf4>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8006b84:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b88:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d055      	beq.n	8006c3c <HAL_UART_Transmit+0x100>
 8006b90:	1c7b      	adds	r3, r7, #1
 8006b92:	d12d      	bne.n	8006bf0 <HAL_UART_Transmit+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b94:	69d3      	ldr	r3, [r2, #28]
 8006b96:	061f      	lsls	r7, r3, #24
 8006b98:	d5fc      	bpl.n	8006b94 <HAL_UART_Transmit+0x58>
      if (pdata8bits == NULL)
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	d03b      	beq.n	8006c16 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b9e:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ba2:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006ba4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bb0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1ec      	bne.n	8006b94 <HAL_UART_Transmit+0x58>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bba:	69d3      	ldr	r3, [r2, #28]
 8006bbc:	0659      	lsls	r1, r3, #25
 8006bbe:	d5fc      	bpl.n	8006bba <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8006bc0:	2320      	movs	r3, #32
    return HAL_OK;
 8006bc2:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8006bc4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006bcc:	2001      	movs	r0, #1
}
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	d045      	beq.n	8006c62 <HAL_UART_Transmit+0x126>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bda:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006bdc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006be8:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	b33b      	cbz	r3, 8006c40 <HAL_UART_Transmit+0x104>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf0:	69d3      	ldr	r3, [r2, #28]
 8006bf2:	061e      	lsls	r6, r3, #24
 8006bf4:	d4ed      	bmi.n	8006bd2 <HAL_UART_Transmit+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fb f8db 	bl	8001db0 <HAL_GetTick>
 8006bfa:	eba0 0309 	sub.w	r3, r0, r9
 8006bfe:	429f      	cmp	r7, r3
 8006c00:	d303      	bcc.n	8006c0a <HAL_UART_Transmit+0xce>
 8006c02:	b117      	cbz	r7, 8006c0a <HAL_UART_Transmit+0xce>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	6813      	ldr	r3, [r2, #0]
 8006c08:	e7f2      	b.n	8006bf0 <HAL_UART_Transmit+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 8006c0a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8006c0c:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8006c0e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c16:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	e7c0      	b.n	8006ba2 <HAL_UART_Transmit+0x66>
    return HAL_BUSY;
 8006c20:	2002      	movs	r0, #2
}
 8006c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c2c:	609a      	str	r2, [r3, #8]
 8006c2e:	e797      	b.n	8006b60 <HAL_UART_Transmit+0x24>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1a6      	bne.n	8006b84 <HAL_UART_Transmit+0x48>
      pdata16bits = (const uint16_t *) pData;
 8006c36:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006c38:	461d      	mov	r5, r3
 8006c3a:	e7a3      	b.n	8006b84 <HAL_UART_Transmit+0x48>
 8006c3c:	1c78      	adds	r0, r7, #1
 8006c3e:	d0bc      	beq.n	8006bba <HAL_UART_Transmit+0x7e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c40:	69d3      	ldr	r3, [r2, #28]
 8006c42:	065b      	lsls	r3, r3, #25
 8006c44:	d4bc      	bmi.n	8006bc0 <HAL_UART_Transmit+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c46:	f7fb f8b3 	bl	8001db0 <HAL_GetTick>
 8006c4a:	eba0 0309 	sub.w	r3, r0, r9
 8006c4e:	429f      	cmp	r7, r3
 8006c50:	d3db      	bcc.n	8006c0a <HAL_UART_Transmit+0xce>
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d0d9      	beq.n	8006c0a <HAL_UART_Transmit+0xce>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c56:	6822      	ldr	r2, [r4, #0]
 8006c58:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5a:	69d3      	ldr	r3, [r2, #28]
 8006c5c:	065b      	lsls	r3, r3, #25
 8006c5e:	d5f2      	bpl.n	8006c46 <HAL_UART_Transmit+0x10a>
 8006c60:	e7ae      	b.n	8006bc0 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c62:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	e7b6      	b.n	8006bda <HAL_UART_Transmit+0x9e>

08006c6c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8006c6e:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c70:	071a      	lsls	r2, r3, #28
 8006c72:	d506      	bpl.n	8006c82 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c74:	6801      	ldr	r1, [r0, #0]
 8006c76:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006c78:	684a      	ldr	r2, [r1, #4]
 8006c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c7e:	4322      	orrs	r2, r4
 8006c80:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c82:	07dc      	lsls	r4, r3, #31
 8006c84:	d506      	bpl.n	8006c94 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c86:	6801      	ldr	r1, [r0, #0]
 8006c88:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006c8a:	684a      	ldr	r2, [r1, #4]
 8006c8c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006c90:	4322      	orrs	r2, r4
 8006c92:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c94:	0799      	lsls	r1, r3, #30
 8006c96:	d506      	bpl.n	8006ca6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c98:	6801      	ldr	r1, [r0, #0]
 8006c9a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006c9c:	684a      	ldr	r2, [r1, #4]
 8006c9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006ca2:	4322      	orrs	r2, r4
 8006ca4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca6:	075a      	lsls	r2, r3, #29
 8006ca8:	d506      	bpl.n	8006cb8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006caa:	6801      	ldr	r1, [r0, #0]
 8006cac:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006cae:	684a      	ldr	r2, [r1, #4]
 8006cb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006cb4:	4322      	orrs	r2, r4
 8006cb6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb8:	06dc      	lsls	r4, r3, #27
 8006cba:	d506      	bpl.n	8006cca <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cbc:	6801      	ldr	r1, [r0, #0]
 8006cbe:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006cc0:	688a      	ldr	r2, [r1, #8]
 8006cc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cc6:	4322      	orrs	r2, r4
 8006cc8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cca:	0699      	lsls	r1, r3, #26
 8006ccc:	d506      	bpl.n	8006cdc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cce:	6801      	ldr	r1, [r0, #0]
 8006cd0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006cd2:	688a      	ldr	r2, [r1, #8]
 8006cd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cd8:	4322      	orrs	r2, r4
 8006cda:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cdc:	065a      	lsls	r2, r3, #25
 8006cde:	d50a      	bpl.n	8006cf6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce0:	6801      	ldr	r1, [r0, #0]
 8006ce2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006ce4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ce6:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cea:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006cee:	ea42 0204 	orr.w	r2, r2, r4
 8006cf2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf4:	d00b      	beq.n	8006d0e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf6:	061b      	lsls	r3, r3, #24
 8006cf8:	d506      	bpl.n	8006d08 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfa:	6802      	ldr	r2, [r0, #0]
 8006cfc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006cfe:	6853      	ldr	r3, [r2, #4]
 8006d00:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6053      	str	r3, [r2, #4]
}
 8006d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d0c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d0e:	684a      	ldr	r2, [r1, #4]
 8006d10:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006d12:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006d16:	4322      	orrs	r2, r4
 8006d18:	604a      	str	r2, [r1, #4]
 8006d1a:	e7ec      	b.n	8006cf6 <UART_AdvFeatureConfig+0x8a>

08006d1c <UART_CheckIdleState>:
{
 8006d1c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1e:	2300      	movs	r3, #0
{
 8006d20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d22:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006d26:	f7fb f843 	bl	8001db0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006d2c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2e:	6813      	ldr	r3, [r2, #0]
 8006d30:	071b      	lsls	r3, r3, #28
 8006d32:	d40f      	bmi.n	8006d54 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	0759      	lsls	r1, r3, #29
 8006d38:	d431      	bmi.n	8006d9e <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d3c:	2220      	movs	r2, #32
  return HAL_OK;
 8006d3e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006d40:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d44:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d48:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d4a:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d54:	69d3      	ldr	r3, [r2, #28]
 8006d56:	0298      	lsls	r0, r3, #10
 8006d58:	d4ec      	bmi.n	8006d34 <UART_CheckIdleState+0x18>
 8006d5a:	e00c      	b.n	8006d76 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d5c:	6819      	ldr	r1, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	0749      	lsls	r1, r1, #29
 8006d62:	d505      	bpl.n	8006d70 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d64:	69d9      	ldr	r1, [r3, #28]
 8006d66:	0708      	lsls	r0, r1, #28
 8006d68:	d44a      	bmi.n	8006e00 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d6a:	69d9      	ldr	r1, [r3, #28]
 8006d6c:	0509      	lsls	r1, r1, #20
 8006d6e:	d475      	bmi.n	8006e5c <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	0298      	lsls	r0, r3, #10
 8006d74:	d4de      	bmi.n	8006d34 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fb f81b 	bl	8001db0 <HAL_GetTick>
 8006d7a:	1b43      	subs	r3, r0, r5
 8006d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d80:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d82:	d3eb      	bcc.n	8006d5c <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	e843 2100 	strex	r1, r2, [r3]
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d1f7      	bne.n	8006d84 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8006d94:	2320      	movs	r3, #32
 8006d96:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8006d9a:	2003      	movs	r0, #3
 8006d9c:	e7d6      	b.n	8006d4c <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d9e:	69d3      	ldr	r3, [r2, #28]
 8006da0:	025b      	lsls	r3, r3, #9
 8006da2:	d4ca      	bmi.n	8006d3a <UART_CheckIdleState+0x1e>
 8006da4:	e00d      	b.n	8006dc2 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	0750      	lsls	r0, r2, #29
 8006daa:	d507      	bpl.n	8006dbc <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	0711      	lsls	r1, r2, #28
 8006db0:	f100 8082 	bmi.w	8006eb8 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006db4:	69da      	ldr	r2, [r3, #28]
 8006db6:	0512      	lsls	r2, r2, #20
 8006db8:	f100 80ac 	bmi.w	8006f14 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	d4bb      	bmi.n	8006d3a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc2:	f7fa fff5 	bl	8001db0 <HAL_GetTick>
 8006dc6:	1b43      	subs	r3, r0, r5
 8006dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	d3ea      	bcc.n	8006da6 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	e843 2100 	strex	r1, r2, [r3]
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	d1f7      	bne.n	8006dd0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	f103 0208 	add.w	r2, r3, #8
 8006de4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	f103 0008 	add.w	r0, r3, #8
 8006df0:	e840 2100 	strex	r1, r2, [r0]
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d1f3      	bne.n	8006de0 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8006df8:	2320      	movs	r3, #32
 8006dfa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8006dfe:	e7cc      	b.n	8006d9a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e00:	2208      	movs	r2, #8
 8006e02:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e08:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	e843 2100 	strex	r1, r2, [r3]
 8006e10:	2900      	cmp	r1, #0
 8006e12:	d1f7      	bne.n	8006e04 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e14:	4856      	ldr	r0, [pc, #344]	@ (8006f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	f103 0208 	add.w	r2, r3, #8
 8006e1a:	e852 2f00 	ldrex	r2, [r2]
 8006e1e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	f103 0508 	add.w	r5, r3, #8
 8006e24:	e845 2100 	strex	r1, r2, [r5]
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d1f4      	bne.n	8006e16 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006e2e:	2a01      	cmp	r2, #1
 8006e30:	d00b      	beq.n	8006e4a <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e34:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e36:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006e38:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e3c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006e40:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e44:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006e48:	e79c      	b.n	8006d84 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	e843 2100 	strex	r1, r2, [r3]
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d1f7      	bne.n	8006e4a <UART_CheckIdleState+0x12e>
 8006e5a:	e7ea      	b.n	8006e32 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e60:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e66:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	e843 2100 	strex	r1, r2, [r3]
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d1f7      	bne.n	8006e62 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e72:	483f      	ldr	r0, [pc, #252]	@ (8006f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	f103 0208 	add.w	r2, r3, #8
 8006e78:	e852 2f00 	ldrex	r2, [r2]
 8006e7c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	f103 0508 	add.w	r5, r3, #8
 8006e82:	e845 2100 	strex	r1, r2, [r5]
 8006e86:	2900      	cmp	r1, #0
 8006e88:	d1f4      	bne.n	8006e74 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006e8c:	2a01      	cmp	r2, #1
 8006e8e:	d00a      	beq.n	8006ea6 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e90:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e92:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006e94:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e96:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006e9a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ea0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006ea4:	e76e      	b.n	8006d84 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eaa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	e843 2100 	strex	r1, r2, [r3]
 8006eb2:	2900      	cmp	r1, #0
 8006eb4:	d1f7      	bne.n	8006ea6 <UART_CheckIdleState+0x18a>
 8006eb6:	e7eb      	b.n	8006e90 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eb8:	2208      	movs	r2, #8
 8006eba:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ec0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	e843 2100 	strex	r1, r2, [r3]
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	d1f7      	bne.n	8006ebc <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ecc:	4828      	ldr	r0, [pc, #160]	@ (8006f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	f103 0208 	add.w	r2, r3, #8
 8006ed2:	e852 2f00 	ldrex	r2, [r2]
 8006ed6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	f103 0508 	add.w	r5, r3, #8
 8006edc:	e845 2100 	strex	r1, r2, [r5]
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	d1f4      	bne.n	8006ece <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006ee6:	2a01      	cmp	r2, #1
 8006ee8:	d00b      	beq.n	8006f02 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eee:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006ef4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006ef8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006efc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006f00:	e766      	b.n	8006dd0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f06:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	e843 2100 	strex	r1, r2, [r3]
 8006f0e:	2900      	cmp	r1, #0
 8006f10:	d1f7      	bne.n	8006f02 <UART_CheckIdleState+0x1e6>
 8006f12:	e7ea      	b.n	8006eea <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f18:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f1e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	e843 2100 	strex	r1, r2, [r3]
 8006f26:	2900      	cmp	r1, #0
 8006f28:	d1f7      	bne.n	8006f1a <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f2a:	4811      	ldr	r0, [pc, #68]	@ (8006f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	f103 0208 	add.w	r2, r3, #8
 8006f30:	e852 2f00 	ldrex	r2, [r2]
 8006f34:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	f103 0508 	add.w	r5, r3, #8
 8006f3a:	e845 2100 	strex	r1, r2, [r5]
 8006f3e:	2900      	cmp	r1, #0
 8006f40:	d1f4      	bne.n	8006f2c <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f42:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006f44:	2a01      	cmp	r2, #1
 8006f46:	d00a      	beq.n	8006f5e <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f48:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006f4c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006f52:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f56:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f58:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006f5c:	e738      	b.n	8006dd0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	e843 2100 	strex	r1, r2, [r3]
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	d1f7      	bne.n	8006f5e <UART_CheckIdleState+0x242>
 8006f6e:	e7eb      	b.n	8006f48 <UART_CheckIdleState+0x22c>
 8006f70:	effffffe 	.word	0xeffffffe

08006f74 <HAL_UART_Init>:
  if (huart == NULL)
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f000 80ef 	beq.w	8007158 <HAL_UART_Init+0x1e4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f7a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006f7e:	b570      	push	{r4, r5, r6, lr}
 8006f80:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d070      	beq.n	8007068 <HAL_UART_Init+0xf4>
  huart->gState = HAL_UART_STATE_BUSY;
 8006f86:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8006f88:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006f8a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006f8e:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f90:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	d161      	bne.n	8007060 <HAL_UART_Init+0xec>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006fa0:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fa2:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006faa:	49a5      	ldr	r1, [pc, #660]	@ (8007240 <HAL_UART_Init+0x2cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fac:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fae:	4001      	ands	r1, r0
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb4:	686b      	ldr	r3, [r5, #4]
 8006fb6:	68e1      	ldr	r1, [r4, #12]
 8006fb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006fbc:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fbe:	49a1      	ldr	r1, [pc, #644]	@ (8007244 <HAL_UART_Init+0x2d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc0:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc2:	428d      	cmp	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fc4:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fc6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc8:	f000 812a 	beq.w	8007220 <HAL_UART_Init+0x2ac>
 8006fcc:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006fd0:	428d      	cmp	r5, r1
 8006fd2:	f000 80c6 	beq.w	8007162 <HAL_UART_Init+0x1ee>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd6:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006fd8:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fda:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8006fde:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006fe2:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fe8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fea:	4997      	ldr	r1, [pc, #604]	@ (8007248 <HAL_UART_Init+0x2d4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fec:	f023 030f 	bic.w	r3, r3, #15
 8006ff0:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff2:	428d      	cmp	r5, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff4:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff6:	d03c      	beq.n	8007072 <HAL_UART_Init+0xfe>
 8006ff8:	4b94      	ldr	r3, [pc, #592]	@ (800724c <HAL_UART_Init+0x2d8>)
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	d072      	beq.n	80070e4 <HAL_UART_Init+0x170>
 8006ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007002:	429d      	cmp	r5, r3
 8007004:	f000 80a5 	beq.w	8007152 <HAL_UART_Init+0x1de>
 8007008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800700c:	429d      	cmp	r5, r3
 800700e:	f000 8095 	beq.w	800713c <HAL_UART_Init+0x1c8>
 8007012:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007016:	429d      	cmp	r5, r3
 8007018:	f000 80a0 	beq.w	800715c <HAL_UART_Init+0x1e8>
 800701c:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8007020:	429d      	cmp	r5, r3
 8007022:	f000 80e7 	beq.w	80071f4 <HAL_UART_Init+0x280>
 8007026:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800702a:	429d      	cmp	r5, r3
 800702c:	f000 80e5 	beq.w	80071fa <HAL_UART_Init+0x286>
 8007030:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007034:	429d      	cmp	r5, r3
 8007036:	f000 80d3 	beq.w	80071e0 <HAL_UART_Init+0x26c>
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	429d      	cmp	r5, r3
 8007040:	f000 80de 	beq.w	8007200 <HAL_UART_Init+0x28c>
 8007044:	f5a3 53c0 	sub.w	r3, r3, #6144	@ 0x1800
 8007048:	429d      	cmp	r5, r3
 800704a:	f000 80dd 	beq.w	8007208 <HAL_UART_Init+0x294>
 800704e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007052:	429d      	cmp	r5, r3
 8007054:	f040 80dc 	bne.w	8007210 <HAL_UART_Init+0x29c>
 8007058:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800705c:	2100      	movs	r1, #0
 800705e:	e00a      	b.n	8007076 <HAL_UART_Init+0x102>
    UART_AdvFeatureConfig(huart);
 8007060:	4620      	mov	r0, r4
 8007062:	f7ff fe03 	bl	8006c6c <UART_AdvFeatureConfig>
 8007066:	e799      	b.n	8006f9c <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8007068:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800706c:	f7fa fd04 	bl	8001a78 <HAL_UART_MspInit>
 8007070:	e789      	b.n	8006f86 <HAL_UART_Init+0x12>
 8007072:	2001      	movs	r0, #1
 8007074:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007076:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800707a:	d03a      	beq.n	80070f2 <HAL_UART_Init+0x17e>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800707c:	f7fe f996 	bl	80053ac <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8007080:	b1c8      	cbz	r0, 80070b6 <HAL_UART_Init+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007082:	4a73      	ldr	r2, [pc, #460]	@ (8007250 <HAL_UART_Init+0x2dc>)
 8007084:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800708c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007090:	fbb0 f0f1 	udiv	r0, r0, r1
 8007094:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007098:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709c:	f1a0 0310 	sub.w	r3, r0, #16
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d84e      	bhi.n	8007142 <HAL_UART_Init+0x1ce>
  huart->RxISR = NULL;
 80070a4:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80070a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80070ae:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80070b0:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80070b2:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ret;
 80070b4:	e005      	b.n	80070c2 <HAL_UART_Init+0x14e>
  huart->NbRxDataToProcess = 1;
 80070b6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 80070ba:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
        huart->Instance->BRR = brrtemp;
 80070be:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80070c0:	66a3      	str	r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c2:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 80070c4:	4620      	mov	r0, r4
}
 80070c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ca:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80070ce:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d0:	6893      	ldr	r3, [r2, #8]
 80070d2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80070d6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80070d8:	6813      	ldr	r3, [r2, #0]
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80070e0:	f7ff be1c 	b.w	8006d1c <UART_CheckIdleState>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070e4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80070e8:	f04f 0002 	mov.w	r0, #2
 80070ec:	f04f 0100 	mov.w	r1, #0
 80070f0:	d1c4      	bne.n	800707c <HAL_UART_Init+0x108>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80070f2:	f7fe f95b 	bl	80053ac <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d0dd      	beq.n	80070b6 <HAL_UART_Init+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fa:	4b55      	ldr	r3, [pc, #340]	@ (8007250 <HAL_UART_Init+0x2dc>)
 80070fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80070fe:	6862      	ldr	r2, [r4, #4]
 8007100:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007104:	0853      	lsrs	r3, r2, #1
 8007106:	fbb0 f0f1 	udiv	r0, r0, r1
 800710a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800710e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007112:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 8007116:	f1a3 0210 	sub.w	r2, r3, #16
 800711a:	428a      	cmp	r2, r1
 800711c:	d811      	bhi.n	8007142 <HAL_UART_Init+0x1ce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800711e:	f023 010f 	bic.w	r1, r3, #15
 8007122:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007124:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007128:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 800712a:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800712e:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8007134:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007136:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007138:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 800713a:	e7c2      	b.n	80070c2 <HAL_UART_Init+0x14e>
 800713c:	2008      	movs	r0, #8
 800713e:	2100      	movs	r1, #0
 8007140:	e799      	b.n	8007076 <HAL_UART_Init+0x102>
  huart->RxISR = NULL;
 8007142:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007144:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 8007148:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800714a:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800714c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800714e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8007150:	bd70      	pop	{r4, r5, r6, pc}
 8007152:	2004      	movs	r0, #4
 8007154:	2100      	movs	r1, #0
 8007156:	e78e      	b.n	8007076 <HAL_UART_Init+0x102>
 8007158:	2001      	movs	r0, #1
 800715a:	4770      	bx	lr
 800715c:	2010      	movs	r0, #16
 800715e:	2100      	movs	r1, #0
 8007160:	e789      	b.n	8007076 <HAL_UART_Init+0x102>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007162:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007164:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007166:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800716a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800716e:	431a      	orrs	r2, r3
 8007170:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007172:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007174:	f023 030f 	bic.w	r3, r3, #15
 8007178:	4303      	orrs	r3, r0
 800717a:	2000      	movs	r0, #0
 800717c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800717e:	f7fe f915 	bl	80053ac <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8007182:	b380      	cbz	r0, 80071e6 <HAL_UART_Init+0x272>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007184:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007186:	4a32      	ldr	r2, [pc, #200]	@ (8007250 <HAL_UART_Init+0x2dc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007188:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800718a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800718e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007192:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007196:	428b      	cmp	r3, r1
 8007198:	d3d3      	bcc.n	8007142 <HAL_UART_Init+0x1ce>
 800719a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800719e:	d8d0      	bhi.n	8007142 <HAL_UART_Init+0x1ce>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a0:	2600      	movs	r6, #0
 80071a2:	4633      	mov	r3, r6
 80071a4:	4631      	mov	r1, r6
 80071a6:	f7f9 fd0f 	bl	8000bc8 <__aeabi_uldivmod>
 80071aa:	0209      	lsls	r1, r1, #8
 80071ac:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 80071b0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80071b4:	0200      	lsls	r0, r0, #8
 80071b6:	eb10 000c 	adds.w	r0, r0, ip
 80071ba:	462a      	mov	r2, r5
 80071bc:	4633      	mov	r3, r6
 80071be:	f141 0100 	adc.w	r1, r1, #0
 80071c2:	f7f9 fd01 	bl	8000bc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071c6:	4b23      	ldr	r3, [pc, #140]	@ (8007254 <HAL_UART_Init+0x2e0>)
 80071c8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d8b8      	bhi.n	8007142 <HAL_UART_Init+0x1ce>
  huart->NbRxDataToProcess = 1;
 80071d0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80071d8:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80071dc:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 80071de:	e770      	b.n	80070c2 <HAL_UART_Init+0x14e>
 80071e0:	2080      	movs	r0, #128	@ 0x80
 80071e2:	2100      	movs	r1, #0
 80071e4:	e747      	b.n	8007076 <HAL_UART_Init+0x102>
  huart->NbRxDataToProcess = 1;
 80071e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  huart->TxISR = NULL;
 80071ea:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
          huart->Instance->BRR = usartdiv;
 80071ee:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80071f0:	66a1      	str	r1, [r4, #104]	@ 0x68
  return ret;
 80071f2:	e766      	b.n	80070c2 <HAL_UART_Init+0x14e>
 80071f4:	2020      	movs	r0, #32
 80071f6:	2100      	movs	r1, #0
 80071f8:	e73d      	b.n	8007076 <HAL_UART_Init+0x102>
 80071fa:	2040      	movs	r0, #64	@ 0x40
 80071fc:	2100      	movs	r1, #0
 80071fe:	e73a      	b.n	8007076 <HAL_UART_Init+0x102>
 8007200:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007204:	2100      	movs	r1, #0
 8007206:	e736      	b.n	8007076 <HAL_UART_Init+0x102>
 8007208:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800720c:	2100      	movs	r1, #0
 800720e:	e732      	b.n	8007076 <HAL_UART_Init+0x102>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007210:	4811      	ldr	r0, [pc, #68]	@ (8007258 <HAL_UART_Init+0x2e4>)
 8007212:	2100      	movs	r1, #0
 8007214:	1a28      	subs	r0, r5, r0
 8007216:	fab0 f080 	clz	r0, r0
 800721a:	0940      	lsrs	r0, r0, #5
 800721c:	02c0      	lsls	r0, r0, #11
 800721e:	e72a      	b.n	8007076 <HAL_UART_Init+0x102>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007220:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007222:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007224:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8007228:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800722c:	431a      	orrs	r2, r3
 800722e:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007230:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007232:	f023 030f 	bic.w	r3, r3, #15
 8007236:	4303      	orrs	r3, r0
 8007238:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800723a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800723e:	e79e      	b.n	800717e <HAL_UART_Init+0x20a>
 8007240:	cfff69f3 	.word	0xcfff69f3
 8007244:	44002400 	.word	0x44002400
 8007248:	40013800 	.word	0x40013800
 800724c:	40004400 	.word	0x40004400
 8007250:	0800f9b4 	.word	0x0800f9b4
 8007254:	000ffcff 	.word	0x000ffcff
 8007258:	40008400 	.word	0x40008400

0800725c <HAL_UARTEx_EnableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007260:	2a01      	cmp	r2, #1
 8007262:	d032      	beq.n	80072ca <HAL_UARTEx_EnableFifoMode+0x6e>

  huart->gState = HAL_UART_STATE_BUSY;
 8007264:	4603      	mov	r3, r0
 8007266:	2124      	movs	r1, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007268:	f04f 5c00 	mov.w	ip, #536870912	@ 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800726c:	6802      	ldr	r2, [r0, #0]
{
 800726e:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007274:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007276:	6814      	ldr	r4, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007278:	ea41 010c 	orr.w	r1, r1, ip
  __HAL_UART_DISABLE(huart);
 800727c:	f024 0401 	bic.w	r4, r4, #1
 8007280:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007282:	f8c3 c064 	str.w	ip, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007286:	6011      	str	r1, [r2, #0]
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007288:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800728a:	6892      	ldr	r2, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800728c:	4e10      	ldr	r6, [pc, #64]	@ (80072d0 <HAL_UARTEx_EnableFifoMode+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800728e:	ea4f 7e52 	mov.w	lr, r2, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007292:	f3c1 6c42 	ubfx	ip, r1, #25, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007296:	4d0f      	ldr	r5, [pc, #60]	@ (80072d4 <HAL_UARTEx_EnableFifoMode+0x78>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007298:	f816 100e 	ldrb.w	r1, [r6, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800729c:	f816 200c 	ldrb.w	r2, [r6, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 80072a0:	f815 400c 	ldrb.w	r4, [r5, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80072a4:	f815 600e 	ldrb.w	r6, [r5, lr]
  __HAL_UNLOCK(huart);
 80072a8:	2000      	movs	r0, #0
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072aa:	00c9      	lsls	r1, r1, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ac:	00d2      	lsls	r2, r2, #3
  huart->gState = HAL_UART_STATE_READY;
 80072ae:	2720      	movs	r7, #32
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b0:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072b4:	fbb2 f2f4 	udiv	r2, r2, r4
  __HAL_UNLOCK(huart);
 80072b8:	f883 0084 	strb.w	r0, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80072bc:	f8c3 7088 	str.w	r7, [r3, #136]	@ 0x88
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c0:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80072ca:	2002      	movs	r0, #2
}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	0800f9d4 	.word	0x0800f9d4
 80072d4:	0800f9cc 	.word	0x0800f9cc

080072d8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80072d8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80072dc:	2a01      	cmp	r2, #1
 80072de:	d017      	beq.n	8007310 <HAL_UARTEx_DisableFifoMode+0x38>
 80072e0:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80072e2:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072e4:	2100      	movs	r1, #0
{
 80072e6:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_READY;
 80072e8:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ea:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072ec:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f0:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80072f2:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072f4:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80072f8:	f024 0401 	bic.w	r4, r4, #1
 80072fc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072fe:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007300:	6010      	str	r0, [r2, #0]
  __HAL_UNLOCK(huart);
 8007302:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007306:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007308:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800730c:	bc30      	pop	{r4, r5}
 800730e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007310:	2002      	movs	r0, #2
}
 8007312:	4770      	bx	lr

08007314 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8007314:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007318:	2a01      	cmp	r2, #1
 800731a:	d037      	beq.n	800738c <HAL_UARTEx_SetTxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800731c:	4603      	mov	r3, r0
 800731e:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007320:	681a      	ldr	r2, [r3, #0]
{
 8007322:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007324:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007328:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800732a:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800732c:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800732e:	f020 0001 	bic.w	r0, r0, #1
 8007332:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007334:	6890      	ldr	r0, [r2, #8]
 8007336:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800733a:	4301      	orrs	r1, r0
 800733c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800733e:	b315      	cbz	r5, 8007386 <HAL_UARTEx_SetTxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007340:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007342:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007344:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007348:	4911      	ldr	r1, [pc, #68]	@ (8007390 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800734a:	4d12      	ldr	r5, [pc, #72]	@ (8007394 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734c:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007350:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007354:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007358:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800735c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007360:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007362:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007364:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007368:	fbb1 f1f5 	udiv	r1, r1, r5
 800736c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007370:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007372:	2520      	movs	r5, #32
 8007374:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007378:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800737a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800737e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007380:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007384:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007386:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007388:	4608      	mov	r0, r1
 800738a:	e7ef      	b.n	800736c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800738c:	2002      	movs	r0, #2
}
 800738e:	4770      	bx	lr
 8007390:	0800f9d4 	.word	0x0800f9d4
 8007394:	0800f9cc 	.word	0x0800f9cc

08007398 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007398:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800739c:	2a01      	cmp	r2, #1
 800739e:	d037      	beq.n	8007410 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80073a0:	4603      	mov	r3, r0
 80073a2:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073a4:	681a      	ldr	r2, [r3, #0]
{
 80073a6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80073a8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ac:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80073ae:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073b0:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 80073b2:	f020 0001 	bic.w	r0, r0, #1
 80073b6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073b8:	6890      	ldr	r0, [r2, #8]
 80073ba:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80073be:	4301      	orrs	r1, r0
 80073c0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073c2:	b315      	cbz	r5, 800740a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073c4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073c6:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c8:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073cc:	4911      	ldr	r1, [pc, #68]	@ (8007414 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ce:	4d12      	ldr	r5, [pc, #72]	@ (8007418 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073d0:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073d4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073d8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073dc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80073e0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ec:	fbb1 f1f5 	udiv	r1, r1, r5
 80073f0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80073f4:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	2520      	movs	r5, #32
 80073f8:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80073fe:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007402:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007404:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007408:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800740a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800740c:	4608      	mov	r0, r1
 800740e:	e7ef      	b.n	80073f0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007410:	2002      	movs	r0, #2
}
 8007412:	4770      	bx	lr
 8007414:	0800f9d4 	.word	0x0800f9d4
 8007418:	0800f9cc 	.word	0x0800f9cc
 800741c:	00000000 	.word	0x00000000

08007420 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8007420:	b530      	push	{r4, r5, lr}
 8007422:	460d      	mov	r5, r1
 8007424:	b0a3      	sub	sp, #140	@ 0x8c
 8007426:	4604      	mov	r4, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8007428:	f002 fd9a 	bl	8009f60 <ai_platform_context_acquire>

  if (report && net_ctx)
 800742c:	2d00      	cmp	r5, #0
 800742e:	d03a      	beq.n	80074a6 <ai_network_get_info+0x86>
 8007430:	2800      	cmp	r0, #0
 8007432:	d034      	beq.n	800749e <ai_network_get_info+0x7e>
  {
    ai_network_report r = {
 8007434:	2278      	movs	r2, #120	@ 0x78
 8007436:	2100      	movs	r1, #0
 8007438:	a804      	add	r0, sp, #16
 800743a:	f006 f8fc 	bl	800d636 <memset>
 800743e:	491e      	ldr	r1, [pc, #120]	@ (80074b8 <ai_network_get_info+0x98>)
 8007440:	4a1e      	ldr	r2, [pc, #120]	@ (80074bc <ai_network_get_info+0x9c>)
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <ai_network_get_info+0xa0>)
 8007444:	481f      	ldr	r0, [pc, #124]	@ (80074c4 <ai_network_get_info+0xa4>)
 8007446:	e9cd 1200 	strd	r1, r2, [sp]
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	9003      	str	r0, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800744e:	f002 fd3b 	bl	8009ec8 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8007452:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8007454:	f002 fd3c 	bl	8009ed0 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8007458:	f240 2302 	movw	r3, #514	@ 0x202
 800745c:	4a1a      	ldr	r2, [pc, #104]	@ (80074c8 <ai_network_get_info+0xa8>)
 800745e:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8007462:	e9cd 0205 	strd	r0, r2, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8007466:	f002 fd4b 	bl	8009f00 <ai_platform_api_get_version>
 800746a:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800746c:	f002 fd60 	bl	8009f30 <ai_platform_interface_api_get_version>
 8007470:	4603      	mov	r3, r0
    ai_network_report r = {
 8007472:	a10f      	add	r1, pc, #60	@ (adr r1, 80074b0 <ai_network_get_info+0x90>)
 8007474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007478:	4a14      	ldr	r2, [pc, #80]	@ (80074cc <ai_network_get_info+0xac>)
 800747a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x8b0009c2,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800747e:	4620      	mov	r0, r4
 8007480:	4669      	mov	r1, sp
    ai_network_report r = {
 8007482:	9220      	str	r2, [sp, #128]	@ 0x80
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8007484:	930a      	str	r3, [sp, #40]	@ 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8007486:	f002 fe6d 	bl	800a164 <ai_platform_api_get_network_report>
 800748a:	4604      	mov	r4, r0
 800748c:	b140      	cbz	r0, 80074a0 <ai_network_get_info+0x80>

    *report = r;
 800748e:	2288      	movs	r2, #136	@ 0x88
 8007490:	4669      	mov	r1, sp
 8007492:	4628      	mov	r0, r5
 8007494:	f006 f9cb 	bl	800d82e <memcpy>
    return true;
  }
  return false;
}
 8007498:	4620      	mov	r0, r4
 800749a:	b023      	add	sp, #140	@ 0x8c
 800749c:	bd30      	pop	{r4, r5, pc}
  return false;
 800749e:	4604      	mov	r4, r0
}
 80074a0:	4620      	mov	r0, r4
 80074a2:	b023      	add	sp, #140	@ 0x8c
 80074a4:	bd30      	pop	{r4, r5, pc}
  return false;
 80074a6:	462c      	mov	r4, r5
}
 80074a8:	4620      	mov	r0, r4
 80074aa:	b023      	add	sp, #140	@ 0x8c
 80074ac:	bd30      	pop	{r4, r5, pc}
 80074ae:	bf00      	nop
 80074b0:	003d505b 	.word	0x003d505b
 80074b4:	00000000 	.word	0x00000000
 80074b8:	0800f92c 	.word	0x0800f92c
 80074bc:	0800f934 	.word	0x0800f934
 80074c0:	0800f958 	.word	0x0800f958
 80074c4:	0800f974 	.word	0x0800f974
 80074c8:	0800f89c 	.word	0x0800f89c
 80074cc:	8b0009c2 	.word	0x8b0009c2

080074d0 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80074d0:	f002 bd4e 	b.w	8009f70 <ai_platform_network_get_error>

080074d4 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80074d4:	b108      	cbz	r0, 80074da <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 80074d6:	f002 bd5d 	b.w	8009f94 <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80074da:	4b03      	ldr	r3, [pc, #12]	@ (80074e8 <ai_network_inputs_get+0x14>)
 80074dc:	4a03      	ldr	r2, [pc, #12]	@ (80074ec <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80074de:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80074e0:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 80074e2:	f002 bd57 	b.w	8009f94 <ai_platform_inputs_get>
 80074e6:	bf00      	nop
 80074e8:	2000000c 	.word	0x2000000c
 80074ec:	a1c00100 	.word	0xa1c00100

080074f0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80074f0:	b108      	cbz	r0, 80074f6 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 80074f2:	f002 bdc5 	b.w	800a080 <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80074f6:	4b03      	ldr	r3, [pc, #12]	@ (8007504 <ai_network_outputs_get+0x14>)
 80074f8:	4a03      	ldr	r2, [pc, #12]	@ (8007508 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80074fa:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80074fc:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 80074fe:	f002 bdbf 	b.w	800a080 <ai_platform_outputs_get>
 8007502:	bf00      	nop
 8007504:	2000000c 	.word	0x2000000c
 8007508:	a1c00100 	.word	0xa1c00100

0800750c <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800750c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	4683      	mov	fp, r0
 8007512:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8007514:	f003 f814 	bl	800a540 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8007518:	4604      	mov	r4, r0
 800751a:	2800      	cmp	r0, #0
 800751c:	f000 80d4 	beq.w	80076c8 <ai_network_init+0x1bc>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8007520:	4e70      	ldr	r6, [pc, #448]	@ (80076e4 <ai_network_init+0x1d8>)
 8007522:	462a      	mov	r2, r5
 8007524:	2101      	movs	r1, #1
 8007526:	4630      	mov	r0, r6
 8007528:	f002 fc0a 	bl	8009d40 <ai_platform_get_weights_map>
 800752c:	4680      	mov	r8, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	f000 80cc 	beq.w	80076cc <ai_network_init+0x1c0>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007534:	f8df 9204 	ldr.w	r9, [pc, #516]	@ 800773c <ai_network_init+0x230>
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8007538:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800753a:	f8d9 2000 	ldr.w	r2, [r9]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800753e:	4e6a      	ldr	r6, [pc, #424]	@ (80076e8 <ai_network_init+0x1dc>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007540:	486a      	ldr	r0, [pc, #424]	@ (80076ec <ai_network_init+0x1e0>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007542:	f042 4a80 	orr.w	sl, r2, #1073741824	@ 0x40000000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007546:	6832      	ldr	r2, [r6, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007548:	4969      	ldr	r1, [pc, #420]	@ (80076f0 <ai_network_init+0x1e4>)
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800754a:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800754e:	f8c9 a000 	str.w	sl, [r9]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007552:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007556:	6802      	ldr	r2, [r0, #0]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007558:	f8c6 9000 	str.w	r9, [r6]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800755c:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007560:	680a      	ldr	r2, [r1, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007562:	f8c0 9000 	str.w	r9, [r0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007566:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800756a:	4a62      	ldr	r2, [pc, #392]	@ (80076f4 <ai_network_init+0x1e8>)
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800756c:	4f62      	ldr	r7, [pc, #392]	@ (80076f8 <ai_network_init+0x1ec>)
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800756e:	6812      	ldr	r2, [r2, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007570:	f8c1 9000 	str.w	r9, [r1]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8007574:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
 8007578:	4a5e      	ldr	r2, [pc, #376]	@ (80076f4 <ai_network_init+0x1e8>)
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800757a:	f8df c1c4 	ldr.w	ip, [pc, #452]	@ 8007740 <ai_network_init+0x234>
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800757e:	f8c2 9000 	str.w	r9, [r2]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8007582:	683a      	ldr	r2, [r7, #0]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8007584:	f8df e1bc 	ldr.w	lr, [pc, #444]	@ 8007744 <ai_network_init+0x238>
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8007588:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800758c:	f8dc 2000 	ldr.w	r2, [ip]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8007590:	f8c7 9000 	str.w	r9, [r7]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8007594:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8007598:	f8de 2000 	ldr.w	r2, [lr]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800759c:	f8cc 9000 	str.w	r9, [ip]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80075a0:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 320);
 80075a4:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80075a8:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 384);
 80075ac:	f503 76c0 	add.w	r6, r3, #384	@ 0x180
 80075b0:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 10752);
 80075b4:	4a4f      	ldr	r2, [pc, #316]	@ (80076f4 <ai_network_init+0x1e8>)
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 10624);
 80075b6:	f503 5026 	add.w	r0, r3, #10624	@ 0x2980
 80075ba:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 10752);
 80075be:	f503 5128 	add.w	r1, r3, #10752	@ 0x2a00
 80075c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 51712);
 80075c6:	f503 424a 	add.w	r2, r3, #51712	@ 0xca00
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80075ca:	f8df a17c 	ldr.w	sl, [pc, #380]	@ 8007748 <ai_network_init+0x23c>
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 51712);
 80075ce:	e9c7 2202 	strd	r2, r2, [r7, #8]
    gemm_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 51968);
 80075d2:	f503 424b 	add.w	r2, r3, #51968	@ 0xcb00
 80075d6:	e9cc 2202 	strd	r2, r2, [ip, #8]
    gemm_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 60160);
 80075da:	f503 426b 	add.w	r2, r3, #60160	@ 0xeb00
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80075de:	f8ce 9000 	str.w	r9, [lr]
    gemm_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 60160);
 80075e2:	e9ce 2202 	strd	r2, r2, [lr, #8]
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80075e6:	f8da 2000 	ldr.w	r2, [sl]
    gemm_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80075ea:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 800774c <ai_network_init+0x240>
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80075ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80075f2:	f8ca 2000 	str.w	r2, [sl]
    gemm_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80075f6:	f8d9 2000 	ldr.w	r2, [r9]
 80075fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80075fe:	f8c9 2000 	str.w	r2, [r9]
    gemm_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 60288);
 8007602:	f503 426b 	add.w	r2, r3, #60160	@ 0xeb00
 8007606:	3280      	adds	r2, #128	@ 0x80
    gemm_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 60416);
 8007608:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
    gemm_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 60288);
 800760c:	e9ca 2202 	strd	r2, r2, [sl, #8]
    gemm_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 60416);
 8007610:	e9c9 3302 	strd	r3, r3, [r9, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8007614:	4e39      	ldr	r6, [pc, #228]	@ (80076fc <ai_network_init+0x1f0>)
 8007616:	462a      	mov	r2, r5
 8007618:	2101      	movs	r1, #1
 800761a:	4630      	mov	r0, r6
 800761c:	f002 fbe0 	bl	8009de0 <ai_platform_get_activations_map>
 8007620:	4605      	mov	r5, r0
 8007622:	2800      	cmp	r0, #0
 8007624:	d058      	beq.n	80076d8 <ai_network_init+0x1cc>
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 28320);
 8007626:	6833      	ldr	r3, [r6, #0]
 8007628:	4935      	ldr	r1, [pc, #212]	@ (8007700 <ai_network_init+0x1f4>)
 800762a:	f503 42dd 	add.w	r2, r3, #28288	@ 0x6e80
 800762e:	3220      	adds	r2, #32
 8007630:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 28300);
 8007634:	4933      	ldr	r1, [pc, #204]	@ (8007704 <ai_network_init+0x1f8>)
 8007636:	f503 42dd 	add.w	r2, r3, #28288	@ 0x6e80
 800763a:	320c      	adds	r2, #12
 800763c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007640:	4931      	ldr	r1, [pc, #196]	@ (8007708 <ai_network_init+0x1fc>)
 8007642:	f503 42fc 	add.w	r2, r3, #32256	@ 0x7e00
 8007646:	3240      	adds	r2, #64	@ 0x40
 8007648:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 800764c:	492f      	ldr	r1, [pc, #188]	@ (800770c <ai_network_init+0x200>)
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 800764e:	f8df e100 	ldr.w	lr, [pc, #256]	@ 8007750 <ai_network_init+0x244>
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007652:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007656:	492e      	ldr	r1, [pc, #184]	@ (8007710 <ai_network_init+0x204>)
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 8007658:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8007754 <ai_network_init+0x248>
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800765c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007660:	492c      	ldr	r1, [pc, #176]	@ (8007714 <ai_network_init+0x208>)
    pool_4_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 8007662:	4f2d      	ldr	r7, [pc, #180]	@ (8007718 <ai_network_init+0x20c>)
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007664:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007668:	492c      	ldr	r1, [pc, #176]	@ (800771c <ai_network_init+0x210>)
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 32000);
 800766a:	4e2d      	ldr	r6, [pc, #180]	@ (8007720 <ai_network_init+0x214>)
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 800766c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007670:	4a2c      	ldr	r2, [pc, #176]	@ (8007724 <ai_network_init+0x218>)
    gemm_16_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8007672:	4c2d      	ldr	r4, [pc, #180]	@ (8007728 <ai_network_init+0x21c>)
    pool_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007674:	e9c2 3302 	strd	r3, r3, [r2, #8]
    pool_15_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007678:	4a2c      	ldr	r2, [pc, #176]	@ (800772c <ai_network_init+0x220>)
    gemm_17_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 800767a:	482d      	ldr	r0, [pc, #180]	@ (8007730 <ai_network_init+0x224>)
    pool_15_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800767c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007680:	4a2c      	ldr	r2, [pc, #176]	@ (8007734 <ai_network_init+0x228>)
    nl_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007682:	492d      	ldr	r1, [pc, #180]	@ (8007738 <ai_network_init+0x22c>)
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007684:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 8007688:	f503 42ff 	add.w	r2, r3, #32640	@ 0x7f80
 800768c:	e9ce 2202 	strd	r2, r2, [lr, #8]
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 8007690:	e9cc 2202 	strd	r2, r2, [ip, #8]
    pool_4_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 8007694:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8007698:	e9c7 2202 	strd	r2, r2, [r7, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 32000);
 800769c:	f503 42fa 	add.w	r2, r3, #32000	@ 0x7d00
 80076a0:	e9c6 2202 	strd	r2, r2, [r6, #8]
    gemm_16_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 80076a4:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 80076a8:	e9c4 2202 	strd	r2, r2, [r4, #8]
    gemm_17_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 80076ac:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80076b0:	e9c0 2202 	strd	r2, r2, [r0, #8]
    nl_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80076b4:	e9c1 3302 	strd	r3, r3, [r1, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80076b8:	4658      	mov	r0, fp
 80076ba:	f002 ffd9 	bl	800a670 <ai_platform_network_post_init>
 80076be:	4028      	ands	r0, r5
 80076c0:	ea08 0800 	and.w	r8, r8, r0
 80076c4:	fa5f f088 	uxtb.w	r0, r8

  return ok;
}
 80076c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80076cc:	2212      	movs	r2, #18
 80076ce:	2130      	movs	r1, #48	@ 0x30
 80076d0:	4620      	mov	r0, r4
 80076d2:	f002 fc59 	bl	8009f88 <ai_platform_network_set_error>
  return false;
 80076d6:	e79d      	b.n	8007614 <ai_network_init+0x108>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80076d8:	2213      	movs	r2, #19
 80076da:	4620      	mov	r0, r4
 80076dc:	2130      	movs	r1, #48	@ 0x30
 80076de:	f002 fc53 	bl	8009f88 <ai_platform_network_set_error>
  return false;
 80076e2:	e7e9      	b.n	80076b8 <ai_network_init+0x1ac>
 80076e4:	200619c4 	.word	0x200619c4
 80076e8:	20000e08 	.word	0x20000e08
 80076ec:	20000df8 	.word	0x20000df8
 80076f0:	20000de8 	.word	0x20000de8
 80076f4:	20000dd8 	.word	0x20000dd8
 80076f8:	20000dc8 	.word	0x20000dc8
 80076fc:	200619c8 	.word	0x200619c8
 8007700:	20000ef8 	.word	0x20000ef8
 8007704:	20000d78 	.word	0x20000d78
 8007708:	20000ee8 	.word	0x20000ee8
 800770c:	20000ed8 	.word	0x20000ed8
 8007710:	20000d68 	.word	0x20000d68
 8007714:	20000eb8 	.word	0x20000eb8
 8007718:	20000ec8 	.word	0x20000ec8
 800771c:	20000ea8 	.word	0x20000ea8
 8007720:	20000d58 	.word	0x20000d58
 8007724:	20000e98 	.word	0x20000e98
 8007728:	20000e58 	.word	0x20000e58
 800772c:	20000e68 	.word	0x20000e68
 8007730:	20000e38 	.word	0x20000e38
 8007734:	20000e48 	.word	0x20000e48
 8007738:	20000e28 	.word	0x20000e28
 800773c:	20000e18 	.word	0x20000e18
 8007740:	20000db8 	.word	0x20000db8
 8007744:	20000da8 	.word	0x20000da8
 8007748:	20000d98 	.word	0x20000d98
 800774c:	20000d88 	.word	0x20000d88
 8007750:	20000e88 	.word	0x20000e88
 8007754:	20000e78 	.word	0x20000e78

08007758 <ai_network_create_and_init>:
{
 8007758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 800775c:	2300      	movs	r3, #0
 800775e:	2405      	movs	r4, #5
{
 8007760:	b091      	sub	sp, #68	@ 0x44
  return ai_platform_network_create(
 8007762:	e9cd 4300 	strd	r4, r3, [sp]
{
 8007766:	4689      	mov	r9, r1
 8007768:	4616      	mov	r6, r2
  return ai_platform_network_create(
 800776a:	4619      	mov	r1, r3
 800776c:	4a26      	ldr	r2, [pc, #152]	@ (8007808 <ai_network_create_and_init+0xb0>)
 800776e:	2301      	movs	r3, #1
{
 8007770:	4607      	mov	r7, r0
  return ai_platform_network_create(
 8007772:	f002 fea3 	bl	800a4bc <ai_platform_network_create>
  if (err.type != AI_ERROR_NONE) {
 8007776:	f010 08ff 	ands.w	r8, r0, #255	@ 0xff
  return ai_platform_network_create(
 800777a:	4605      	mov	r5, r0
  if (err.type != AI_ERROR_NONE) {
 800777c:	d003      	beq.n	8007786 <ai_network_create_and_init+0x2e>
}
 800777e:	4628      	mov	r0, r5
 8007780:	b011      	add	sp, #68	@ 0x44
 8007782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 8007786:	a802      	add	r0, sp, #8
 8007788:	f000 f842 	bl	8007810 <ai_network_data_params_get>
 800778c:	2800      	cmp	r0, #0
 800778e:	d035      	beq.n	80077fc <ai_network_create_and_init+0xa4>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8007790:	f1b9 0f00 	cmp.w	r9, #0
 8007794:	d00f      	beq.n	80077b6 <ai_network_create_and_init+0x5e>
 8007796:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800779a:	4644      	mov	r4, r8
 800779c:	b15b      	cbz	r3, 80077b6 <ai_network_create_and_init+0x5e>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800779e:	b2a1      	uxth	r1, r4
 80077a0:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 80077a4:	a805      	add	r0, sp, #20
 80077a6:	f002 fabd 	bl	8009d24 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80077aa:	3401      	adds	r4, #1
 80077ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80077b0:	b2a3      	uxth	r3, r4
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d8f3      	bhi.n	800779e <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80077b6:	b17e      	cbz	r6, 80077d8 <ai_network_create_and_init+0x80>
 80077b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80077bc:	2400      	movs	r4, #0
 80077be:	b15b      	cbz	r3, 80077d8 <ai_network_create_and_init+0x80>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80077c0:	b2a1      	uxth	r1, r4
 80077c2:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80077c6:	a803      	add	r0, sp, #12
 80077c8:	f002 faac 	bl	8009d24 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80077cc:	3401      	adds	r4, #1
 80077ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80077d2:	b2a3      	uxth	r3, r4
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d8f3      	bhi.n	80077c0 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 80077d8:	6838      	ldr	r0, [r7, #0]
 80077da:	a902      	add	r1, sp, #8
 80077dc:	f7ff fe96 	bl	800750c <ai_network_init>
 80077e0:	b128      	cbz	r0, 80077ee <ai_network_create_and_init+0x96>
  return err;
 80077e2:	f368 0507 	bfi	r5, r8, #0, #8
}
 80077e6:	4628      	mov	r0, r5
 80077e8:	b011      	add	sp, #68	@ 0x44
 80077ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 80077ee:	6838      	ldr	r0, [r7, #0]
 80077f0:	f002 fbbe 	bl	8009f70 <ai_platform_network_get_error>
 80077f4:	4605      	mov	r5, r0
 80077f6:	fa5f f880 	uxtb.w	r8, r0
 80077fa:	e7f2      	b.n	80077e2 <ai_network_create_and_init+0x8a>
 80077fc:	6838      	ldr	r0, [r7, #0]
 80077fe:	f002 fbb7 	bl	8009f70 <ai_platform_network_get_error>
 8007802:	4605      	mov	r5, r0
    return err;
 8007804:	e7bb      	b.n	800777e <ai_network_create_and_init+0x26>
 8007806:	bf00      	nop
 8007808:	2000000c 	.word	0x2000000c

0800780c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800780c:	f002 bf5c 	b.w	800a6c8 <ai_platform_network_process>

08007810 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8007810:	4603      	mov	r3, r0
 8007812:	b1a0      	cbz	r0, 800783e <ai_network_data_params_get+0x2e>
{
 8007814:	b510      	push	{r4, lr}
 8007816:	b084      	sub	sp, #16
  
  const ai_buffer_array map_activations = 
 8007818:	466a      	mov	r2, sp
 800781a:	4c09      	ldr	r4, [pc, #36]	@ (8007840 <ai_network_data_params_get+0x30>)
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800781c:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 8007820:	e894 0003 	ldmia.w	r4, {r0, r1}
  const ai_buffer_array map_weights = 
 8007824:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 8007826:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800782a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800782e:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8007832:	4661      	mov	r1, ip
 8007834:	4618      	mov	r0, r3
 8007836:	f002 fb25 	bl	8009e84 <ai_platform_bind_network_params>
}
 800783a:	b004      	add	sp, #16
 800783c:	bd10      	pop	{r4, pc}
 800783e:	4770      	bx	lr
 8007840:	0800f7a0 	.word	0x0800f7a0

08007844 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007844:	f04f 31ff 	mov.w	r1, #4294967295
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007848:	2200      	movs	r2, #0
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800784a:	f100 0308 	add.w	r3, r0, #8
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800784e:	e9c0 3101 	strd	r3, r1, [r0, #4]
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8007852:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007856:	6002      	str	r2, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop

0800785c <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop

08007864 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8007864:	b410      	push	{r4}
    pxIndex->pxPrevious = pxNewListItem;

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8007866:	e9d0 3200 	ldrd	r3, r2, [r0]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800786a:	6894      	ldr	r4, [r2, #8]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800786c:	3301      	adds	r3, #1
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800786e:	e9c1 2401 	strd	r2, r4, [r1, #4]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007872:	6061      	str	r1, [r4, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8007874:	6091      	str	r1, [r2, #8]

    traceRETURN_vListInsertEnd();
}
 8007876:	f85d 4b04 	ldr.w	r4, [sp], #4
    pxNewListItem->pxContainer = pxList;
 800787a:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800787c:	6003      	str	r3, [r0, #0]
}
 800787e:	4770      	bx	lr

08007880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007880:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007882:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007884:	1c6b      	adds	r3, r5, #1
 8007886:	d010      	beq.n	80078aa <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8007888:	f100 0308 	add.w	r3, r0, #8
 800788c:	461c      	mov	r4, r3
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	42aa      	cmp	r2, r5
 8007894:	d9fa      	bls.n	800788c <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8007896:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 8007898:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800789a:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800789c:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800789e:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80078a0:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 80078a2:	6108      	str	r0, [r1, #16]

    traceRETURN_vListInsert();
}
 80078a4:	bc30      	pop	{r4, r5}
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80078a6:	6002      	str	r2, [r0, #0]
}
 80078a8:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80078aa:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80078ac:	6863      	ldr	r3, [r4, #4]
 80078ae:	e7f2      	b.n	8007896 <vListInsert+0x16>

080078b0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078b0:	4603      	mov	r3, r0
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80078b2:	6902      	ldr	r2, [r0, #16]
{
 80078b4:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80078b6:	6854      	ldr	r4, [r2, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078b8:	6840      	ldr	r0, [r0, #4]
 80078ba:	6899      	ldr	r1, [r3, #8]
    if( pxList->pxIndex == pxItemToRemove )
 80078bc:	429c      	cmp	r4, r3
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078be:	6081      	str	r1, [r0, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078c0:	6048      	str	r0, [r1, #4]
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078c2:	bf08      	it	eq
 80078c4:	6051      	streq	r1, [r2, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80078c6:	2100      	movs	r1, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80078c8:	6810      	ldr	r0, [r2, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 80078ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80078ce:	3801      	subs	r0, #1
    pxItemToRemove->pxContainer = NULL;
 80078d0:	6119      	str	r1, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80078d2:	6010      	str	r0, [r2, #0]
}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4616      	mov	r6, r2

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078dc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 80078de:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078e2:	b92a      	cbnz	r2, 80078f0 <prvCopyDataToQueue+0x18>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078e4:	6806      	ldr	r6, [r0, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80078e6:	3501      	adds	r5, #1
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078e8:	b34e      	cbz	r6, 800793e <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 80078ea:	4610      	mov	r0, r2
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80078ec:	63a5      	str	r5, [r4, #56]	@ 0x38

    return xReturn;
}
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 80078f0:	b98e      	cbnz	r6, 8007916 <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80078f2:	6840      	ldr	r0, [r0, #4]
 80078f4:	f005 ff9b 	bl	800d82e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80078fc:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80078fe:	440b      	add	r3, r1
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8007900:	4293      	cmp	r3, r2
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007902:	6063      	str	r3, [r4, #4]
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007904:	bf28      	it	cs
 8007906:	6823      	ldrcs	r3, [r4, #0]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007908:	f105 0501 	add.w	r5, r5, #1
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800790c:	bf28      	it	cs
 800790e:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8007910:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007912:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007914:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8007916:	68c0      	ldr	r0, [r0, #12]
 8007918:	f005 ff89 	bl	800d82e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800791c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800791e:	68e3      	ldr	r3, [r4, #12]
 8007920:	4251      	negs	r1, r2
 8007922:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8007924:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007926:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8007928:	4293      	cmp	r3, r2
 800792a:	d202      	bcs.n	8007932 <prvCopyDataToQueue+0x5a>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	440b      	add	r3, r1
 8007930:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8007932:	2e02      	cmp	r6, #2
 8007934:	d008      	beq.n	8007948 <prvCopyDataToQueue+0x70>
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007936:	3501      	adds	r5, #1
    BaseType_t xReturn = pdFALSE;
 8007938:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800793a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800793c:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800793e:	6880      	ldr	r0, [r0, #8]
 8007940:	f001 fc46 	bl	80091d0 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007944:	60a6      	str	r6, [r4, #8]
 8007946:	e7d1      	b.n	80078ec <prvCopyDataToQueue+0x14>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007948:	2d01      	cmp	r5, #1
 800794a:	bf38      	it	cc
 800794c:	2501      	movcc	r5, #1
 800794e:	e7df      	b.n	8007910 <prvCopyDataToQueue+0x38>

08007950 <xQueueGenericCreate>:
    {
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	b082      	sub	sp, #8
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007954:	b140      	cbz	r0, 8007968 <xQueueGenericCreate+0x18>
 8007956:	4604      	mov	r4, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007958:	fba1 0304 	umull	r0, r3, r1, r4
 800795c:	b923      	cbnz	r3, 8007968 <xQueueGenericCreate+0x18>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800795e:	fb01 f004 	mul.w	r0, r1, r4
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007962:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 8007966:	d902      	bls.n	800796e <xQueueGenericCreate+0x1e>
            configASSERT( pxNewQueue );
 8007968:	f002 f824 	bl	80099b4 <ulSetInterruptMask>
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreate+0x1c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800796e:	3050      	adds	r0, #80	@ 0x50
 8007970:	4616      	mov	r6, r2
 8007972:	9101      	str	r1, [sp, #4]
 8007974:	f002 f86c 	bl	8009a50 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8007978:	4605      	mov	r5, r0
 800797a:	b330      	cbz	r0, 80079ca <xQueueGenericCreate+0x7a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 800797c:	9901      	ldr	r1, [sp, #4]
 800797e:	b339      	cbz	r1, 80079d0 <xQueueGenericCreate+0x80>
                pucQueueStorage += sizeof( Queue_t );
 8007980:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    pxNewQueue->uxItemSize = uxItemSize;
 8007984:	e9c5 410f 	strd	r4, r1, [r5, #60]	@ 0x3c
 8007988:	602b      	str	r3, [r5, #0]
        taskENTER_CRITICAL();
 800798a:	f001 fee1 	bl	8009750 <vPortEnterCritical>
            pxQueue->cRxLock = queueUNLOCKED;
 800798e:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007990:	2100      	movs	r1, #0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007992:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007994:	63a9      	str	r1, [r5, #56]	@ 0x38
            pxQueue->cRxLock = queueUNLOCKED;
 8007996:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800799a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800799e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80079a0:	6829      	ldr	r1, [r5, #0]
 80079a2:	fb04 f303 	mul.w	r3, r4, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80079a6:	1b1c      	subs	r4, r3, r4
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a8:	6069      	str	r1, [r5, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80079aa:	440b      	add	r3, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80079ac:	4421      	add	r1, r4
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80079ae:	60ab      	str	r3, [r5, #8]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80079b0:	60e9      	str	r1, [r5, #12]
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079b2:	f105 0010 	add.w	r0, r5, #16
 80079b6:	f7ff ff45 	bl	8007844 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079ba:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80079be:	f7ff ff41 	bl	8007844 <vListInitialise>
        taskEXIT_CRITICAL();
 80079c2:	f001 fed3 	bl	800976c <vPortExitCritical>
        pxNewQueue->ucQueueType = ucQueueType;
 80079c6:	f885 604c 	strb.w	r6, [r5, #76]	@ 0x4c
    }
 80079ca:	4628      	mov	r0, r5
 80079cc:	b002      	add	sp, #8
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079d0:	4603      	mov	r3, r0
 80079d2:	e7d7      	b.n	8007984 <xQueueGenericCreate+0x34>

080079d4 <xQueueGenericSend>:
{
 80079d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079d8:	b085      	sub	sp, #20
 80079da:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80079dc:	2800      	cmp	r0, #0
 80079de:	f000 810d 	beq.w	8007bfc <xQueueGenericSend+0x228>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e2:	4604      	mov	r4, r0
 80079e4:	4688      	mov	r8, r1
 80079e6:	461f      	mov	r7, r3
 80079e8:	2900      	cmp	r1, #0
 80079ea:	f000 80f3 	beq.w	8007bd4 <xQueueGenericSend+0x200>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079ee:	2f02      	cmp	r7, #2
 80079f0:	d103      	bne.n	80079fa <xQueueGenericSend+0x26>
 80079f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	f040 80f4 	bne.w	8007be2 <xQueueGenericSend+0x20e>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079fa:	f001 fb91 	bl	8009120 <xTaskGetSchedulerState>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	f000 8090 	beq.w	8007b24 <xQueueGenericSend+0x150>
        taskENTER_CRITICAL();
 8007a04:	f001 fea4 	bl	8009750 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a0a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d379      	bcc.n	8007b04 <xQueueGenericSend+0x130>
 8007a10:	2f02      	cmp	r7, #2
 8007a12:	d077      	beq.n	8007b04 <xQueueGenericSend+0x130>
 8007a14:	2300      	movs	r3, #0
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a16:	f104 0624 	add.w	r6, r4, #36	@ 0x24
                if( xTicksToWait == ( TickType_t ) 0 )
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	f000 80f0 	beq.w	8007c02 <xQueueGenericSend+0x22e>
                else if( xEntryTimeSet == pdFALSE )
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80d2 	beq.w	8007bcc <xQueueGenericSend+0x1f8>
        taskEXIT_CRITICAL();
 8007a28:	f001 fea0 	bl	800976c <vPortExitCritical>
        vTaskSuspendAll();
 8007a2c:	f001 f9d0 	bl	8008dd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007a30:	f001 fe8e 	bl	8009750 <vPortEnterCritical>
 8007a34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007a38:	2bff      	cmp	r3, #255	@ 0xff
 8007a3a:	bf04      	itt	eq
 8007a3c:	2300      	moveq	r3, #0
 8007a3e:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007a42:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007a46:	2bff      	cmp	r3, #255	@ 0xff
 8007a48:	bf04      	itt	eq
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007a50:	f001 fe8c 	bl	800976c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a54:	a802      	add	r0, sp, #8
 8007a56:	a901      	add	r1, sp, #4
 8007a58:	f001 fb24 	bl	80090a4 <xTaskCheckForTimeOut>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f040 80d6 	bne.w	8007c0e <xQueueGenericSend+0x23a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007a62:	f001 fe75 	bl	8009750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a66:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d061      	beq.n	8007b32 <xQueueGenericSend+0x15e>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8007a6e:	f001 fe7d 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007a72:	f001 fe6d 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007a76:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8007a7a:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	dc04      	bgt.n	8007a8a <xQueueGenericSend+0xb6>
 8007a80:	e011      	b.n	8007aa6 <xQueueGenericSend+0xd2>
            --cTxLock;
 8007a82:	1e6a      	subs	r2, r5, #1
 8007a84:	b2d3      	uxtb	r3, r2
 8007a86:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a88:	b16b      	cbz	r3, 8007aa6 <xQueueGenericSend+0xd2>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a8c:	b15b      	cbz	r3, 8007aa6 <xQueueGenericSend+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f001 fa92 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d0f4      	beq.n	8007a82 <xQueueGenericSend+0xae>
                        vTaskMissedYield();
 8007a98:	f001 fb3c 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 8007a9c:	1e6a      	subs	r2, r5, #1
 8007a9e:	b2d3      	uxtb	r3, r2
 8007aa0:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f1      	bne.n	8007a8a <xQueueGenericSend+0xb6>
        pxQueue->cTxLock = queueUNLOCKED;
 8007aa6:	23ff      	movs	r3, #255	@ 0xff
 8007aa8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007aac:	f001 fe5e 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007ab0:	f001 fe4e 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007ab4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8007ab8:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	dd14      	ble.n	8007ae8 <xQueueGenericSend+0x114>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007abe:	f104 0910 	add.w	r9, r4, #16
 8007ac2:	e003      	b.n	8007acc <xQueueGenericSend+0xf8>
                --cRxLock;
 8007ac4:	1e6a      	subs	r2, r5, #1
 8007ac6:	b2d3      	uxtb	r3, r2
 8007ac8:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aca:	b16b      	cbz	r3, 8007ae8 <xQueueGenericSend+0x114>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	b15b      	cbz	r3, 8007ae8 <xQueueGenericSend+0x114>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f001 fa71 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d0f4      	beq.n	8007ac4 <xQueueGenericSend+0xf0>
                    vTaskMissedYield();
 8007ada:	f001 fb1b 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 8007ade:	1e6a      	subs	r2, r5, #1
 8007ae0:	b2d3      	uxtb	r3, r2
 8007ae2:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f1      	bne.n	8007acc <xQueueGenericSend+0xf8>
        pxQueue->cRxLock = queueUNLOCKED;
 8007ae8:	23ff      	movs	r3, #255	@ 0xff
 8007aea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007aee:	f001 fe3d 	bl	800976c <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8007af2:	f001 f975 	bl	8008de0 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8007af6:	f001 fe2b 	bl	8009750 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007afa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007afc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007afe:	2301      	movs	r3, #1
 8007b00:	4291      	cmp	r1, r2
 8007b02:	d28a      	bcs.n	8007a1a <xQueueGenericSend+0x46>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b04:	463a      	mov	r2, r7
 8007b06:	4641      	mov	r1, r8
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7ff fee5 	bl	80078d8 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d16c      	bne.n	8007bee <xQueueGenericSend+0x21a>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d167      	bne.n	8007be8 <xQueueGenericSend+0x214>
                taskEXIT_CRITICAL();
 8007b18:	f001 fe28 	bl	800976c <vPortExitCritical>
                return pdPASS;
 8007b1c:	2001      	movs	r0, #1
}
 8007b1e:	b005      	add	sp, #20
 8007b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f43f af6c 	beq.w	8007a04 <xQueueGenericSend+0x30>
 8007b2c:	f001 ff42 	bl	80099b4 <ulSetInterruptMask>
 8007b30:	e7fe      	b.n	8007b30 <xQueueGenericSend+0x15c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b32:	f104 0910 	add.w	r9, r4, #16
    taskEXIT_CRITICAL();
 8007b36:	f001 fe19 	bl	800976c <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b3a:	4648      	mov	r0, r9
 8007b3c:	9901      	ldr	r1, [sp, #4]
 8007b3e:	f001 f983 	bl	8008e48 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8007b42:	f001 fe05 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007b46:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b4a:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	dc04      	bgt.n	8007b5a <xQueueGenericSend+0x186>
 8007b50:	e011      	b.n	8007b76 <xQueueGenericSend+0x1a2>
            --cTxLock;
 8007b52:	1e6b      	subs	r3, r5, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b58:	b16a      	cbz	r2, 8007b76 <xQueueGenericSend+0x1a2>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b5c:	b15b      	cbz	r3, 8007b76 <xQueueGenericSend+0x1a2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f001 fa2a 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d0f4      	beq.n	8007b52 <xQueueGenericSend+0x17e>
                        vTaskMissedYield();
 8007b68:	f001 fad4 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 8007b6c:	1e6b      	subs	r3, r5, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	d1f1      	bne.n	8007b5a <xQueueGenericSend+0x186>
        pxQueue->cTxLock = queueUNLOCKED;
 8007b76:	23ff      	movs	r3, #255	@ 0xff
 8007b78:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007b7c:	f001 fdf6 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007b80:	f001 fde6 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007b84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b88:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	dc04      	bgt.n	8007b98 <xQueueGenericSend+0x1c4>
 8007b8e:	e011      	b.n	8007bb4 <xQueueGenericSend+0x1e0>
                --cRxLock;
 8007b90:	1e6b      	subs	r3, r5, #1
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b96:	b16a      	cbz	r2, 8007bb4 <xQueueGenericSend+0x1e0>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	b15b      	cbz	r3, 8007bb4 <xQueueGenericSend+0x1e0>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	f001 fa0b 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0f4      	beq.n	8007b90 <xQueueGenericSend+0x1bc>
                    vTaskMissedYield();
 8007ba6:	f001 fab5 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 8007baa:	1e6b      	subs	r3, r5, #1
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d1f1      	bne.n	8007b98 <xQueueGenericSend+0x1c4>
        pxQueue->cRxLock = queueUNLOCKED;
 8007bb4:	23ff      	movs	r3, #255	@ 0xff
 8007bb6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007bba:	f001 fdd7 	bl	800976c <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8007bbe:	f001 f90f 	bl	8008de0 <xTaskResumeAll>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d197      	bne.n	8007af6 <xQueueGenericSend+0x122>
                    taskYIELD_WITHIN_API();
 8007bc6:	f001 fdb7 	bl	8009738 <vPortYield>
 8007bca:	e794      	b.n	8007af6 <xQueueGenericSend+0x122>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007bcc:	a802      	add	r0, sp, #8
 8007bce:	f001 fa5d 	bl	800908c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007bd2:	e729      	b.n	8007a28 <xQueueGenericSend+0x54>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f43f af09 	beq.w	80079ee <xQueueGenericSend+0x1a>
 8007bdc:	f001 feea 	bl	80099b4 <ulSetInterruptMask>
 8007be0:	e7fe      	b.n	8007be0 <xQueueGenericSend+0x20c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007be2:	f001 fee7 	bl	80099b4 <ulSetInterruptMask>
 8007be6:	e7fe      	b.n	8007be6 <xQueueGenericSend+0x212>
                            queueYIELD_IF_USING_PREEMPTION();
 8007be8:	f001 fda6 	bl	8009738 <vPortYield>
 8007bec:	e794      	b.n	8007b18 <xQueueGenericSend+0x144>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007bf2:	f001 f9e1 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d08e      	beq.n	8007b18 <xQueueGenericSend+0x144>
 8007bfa:	e7f5      	b.n	8007be8 <xQueueGenericSend+0x214>
    configASSERT( pxQueue );
 8007bfc:	f001 feda 	bl	80099b4 <ulSetInterruptMask>
 8007c00:	e7fe      	b.n	8007c00 <xQueueGenericSend+0x22c>
                    taskEXIT_CRITICAL();
 8007c02:	f001 fdb3 	bl	800976c <vPortExitCritical>
                    return errQUEUE_FULL;
 8007c06:	2000      	movs	r0, #0
}
 8007c08:	b005      	add	sp, #20
 8007c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskENTER_CRITICAL();
 8007c0e:	f001 fd9f 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007c12:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007c16:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	dd10      	ble.n	8007c3e <xQueueGenericSend+0x26a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c1c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8007c20:	e003      	b.n	8007c2a <xQueueGenericSend+0x256>
            --cTxLock;
 8007c22:	1e6b      	subs	r3, r5, #1
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c28:	b14a      	cbz	r2, 8007c3e <xQueueGenericSend+0x26a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c2c:	b13b      	cbz	r3, 8007c3e <xQueueGenericSend+0x26a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f001 f9c2 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0f4      	beq.n	8007c22 <xQueueGenericSend+0x24e>
                        vTaskMissedYield();
 8007c38:	f001 fa6c 	bl	8009114 <vTaskMissedYield>
 8007c3c:	e7f1      	b.n	8007c22 <xQueueGenericSend+0x24e>
        pxQueue->cTxLock = queueUNLOCKED;
 8007c3e:	23ff      	movs	r3, #255	@ 0xff
 8007c40:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007c44:	f001 fd92 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007c48:	f001 fd82 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007c4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007c50:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c52:	2d00      	cmp	r5, #0
 8007c54:	dd10      	ble.n	8007c78 <xQueueGenericSend+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c56:	f104 0610 	add.w	r6, r4, #16
 8007c5a:	e003      	b.n	8007c64 <xQueueGenericSend+0x290>
                --cRxLock;
 8007c5c:	1e6b      	subs	r3, r5, #1
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c62:	b14a      	cbz	r2, 8007c78 <xQueueGenericSend+0x2a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	b13b      	cbz	r3, 8007c78 <xQueueGenericSend+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f001 f9a5 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0f4      	beq.n	8007c5c <xQueueGenericSend+0x288>
                    vTaskMissedYield();
 8007c72:	f001 fa4f 	bl	8009114 <vTaskMissedYield>
 8007c76:	e7f1      	b.n	8007c5c <xQueueGenericSend+0x288>
        pxQueue->cRxLock = queueUNLOCKED;
 8007c78:	23ff      	movs	r3, #255	@ 0xff
 8007c7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007c7e:	f001 fd75 	bl	800976c <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8007c82:	f001 f8ad 	bl	8008de0 <xTaskResumeAll>
            return errQUEUE_FULL;
 8007c86:	e7be      	b.n	8007c06 <xQueueGenericSend+0x232>

08007c88 <xQueueCreateMutex>:
    {
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4605      	mov	r5, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007c8c:	2050      	movs	r0, #80	@ 0x50
 8007c8e:	f001 fedf 	bl	8009a50 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8007c92:	4604      	mov	r4, r0
 8007c94:	b368      	cbz	r0, 8007cf2 <xQueueCreateMutex+0x6a>
    pxNewQueue->uxLength = uxQueueLength;
 8007c96:	2600      	movs	r6, #0
 8007c98:	2301      	movs	r3, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c9a:	6020      	str	r0, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8007c9c:	e9c0 360f 	strd	r3, r6, [r0, #60]	@ 0x3c
        taskENTER_CRITICAL();
 8007ca0:	f001 fd56 	bl	8009750 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ca4:	e9d4 2c0f 	ldrd	r2, ip, [r4, #60]	@ 0x3c
            pxQueue->cRxLock = queueUNLOCKED;
 8007ca8:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007caa:	fb02 f20c 	mul.w	r2, r2, ip
 8007cae:	6821      	ldr	r1, [r4, #0]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007cb0:	eba2 0c0c 	sub.w	ip, r2, ip
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cb4:	6061      	str	r1, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007cb6:	440a      	add	r2, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007cb8:	4461      	add	r1, ip
 8007cba:	e9c4 2102 	strd	r2, r1, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cbe:	63a6      	str	r6, [r4, #56]	@ 0x38
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cc0:	f104 0010 	add.w	r0, r4, #16
            pxQueue->cRxLock = queueUNLOCKED;
 8007cc4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007cc8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ccc:	f7ff fdba 	bl	8007844 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cd0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007cd4:	f7ff fdb6 	bl	8007844 <vListInitialise>
        taskEXIT_CRITICAL();
 8007cd8:	f001 fd48 	bl	800976c <vPortExitCritical>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007cdc:	4633      	mov	r3, r6
 8007cde:	4632      	mov	r2, r6
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
 8007ce4:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ce8:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007cea:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007cec:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007cee:	f7ff fe71 	bl	80079d4 <xQueueGenericSend>
    }
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	bf00      	nop

08007cf8 <xQueueReceive>:
{
 8007cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f000 8135 	beq.w	8007f70 <xQueueReceive+0x278>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d06:	4604      	mov	r4, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	f000 8122 	beq.w	8007f54 <xQueueReceive+0x25c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d10:	f001 fa06 	bl	8009120 <xTaskGetSchedulerState>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f000 8124 	beq.w	8007f62 <xQueueReceive+0x26a>
        taskENTER_CRITICAL();
 8007d1a:	f001 fd19 	bl	8009750 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d1e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	f040 8128 	bne.w	8007f76 <xQueueReceive+0x27e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80be 	beq.w	8007eaa <xQueueReceive+0x1b2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007d2e:	a802      	add	r0, sp, #8
 8007d30:	f001 f9ac 	bl	800908c <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
 8007d34:	46a8      	mov	r8, r5
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d36:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        taskEXIT_CRITICAL();
 8007d3a:	f001 fd17 	bl	800976c <vPortExitCritical>
        vTaskSuspendAll();
 8007d3e:	f001 f847 	bl	8008dd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007d42:	f001 fd05 	bl	8009750 <vPortEnterCritical>
 8007d46:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d4a:	2bff      	cmp	r3, #255	@ 0xff
 8007d4c:	bf08      	it	eq
 8007d4e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007d52:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d56:	2bff      	cmp	r3, #255	@ 0xff
 8007d58:	bf08      	it	eq
 8007d5a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007d5e:	f001 fd05 	bl	800976c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d62:	a901      	add	r1, sp, #4
 8007d64:	a802      	add	r0, sp, #8
 8007d66:	f001 f99d 	bl	80090a4 <xTaskCheckForTimeOut>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d14c      	bne.n	8007e08 <xQueueReceive+0x110>
    taskENTER_CRITICAL();
 8007d6e:	f001 fcef 	bl	8009750 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007d72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 809e 	beq.w	8007eb6 <xQueueReceive+0x1be>
    taskEXIT_CRITICAL();
 8007d7a:	f001 fcf7 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007d7e:	f001 fce7 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007d82:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d86:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d88:	2d00      	cmp	r5, #0
 8007d8a:	dd14      	ble.n	8007db6 <xQueueReceive+0xbe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d8c:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8007d90:	e003      	b.n	8007d9a <xQueueReceive+0xa2>
            --cTxLock;
 8007d92:	1e6b      	subs	r3, r5, #1
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d98:	b16a      	cbz	r2, 8007db6 <xQueueReceive+0xbe>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d9c:	b15b      	cbz	r3, 8007db6 <xQueueReceive+0xbe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d9e:	4648      	mov	r0, r9
 8007da0:	f001 f90a 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d0f4      	beq.n	8007d92 <xQueueReceive+0x9a>
                        vTaskMissedYield();
 8007da8:	f001 f9b4 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 8007dac:	1e6b      	subs	r3, r5, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	d1f1      	bne.n	8007d9a <xQueueReceive+0xa2>
        pxQueue->cTxLock = queueUNLOCKED;
 8007db6:	23ff      	movs	r3, #255	@ 0xff
 8007db8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007dbc:	f001 fcd6 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007dc0:	f001 fcc6 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007dc8:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	dd14      	ble.n	8007df8 <xQueueReceive+0x100>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dce:	f104 0910 	add.w	r9, r4, #16
 8007dd2:	e003      	b.n	8007ddc <xQueueReceive+0xe4>
                --cRxLock;
 8007dd4:	1e6b      	subs	r3, r5, #1
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dda:	b16a      	cbz	r2, 8007df8 <xQueueReceive+0x100>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	b15b      	cbz	r3, 8007df8 <xQueueReceive+0x100>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007de0:	4648      	mov	r0, r9
 8007de2:	f001 f8e9 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d0f4      	beq.n	8007dd4 <xQueueReceive+0xdc>
                    vTaskMissedYield();
 8007dea:	f001 f993 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 8007dee:	1e6b      	subs	r3, r5, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	d1f1      	bne.n	8007ddc <xQueueReceive+0xe4>
        pxQueue->cRxLock = queueUNLOCKED;
 8007df8:	23ff      	movs	r3, #255	@ 0xff
 8007dfa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007dfe:	f001 fcb5 	bl	800976c <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8007e02:	f000 ffed 	bl	8008de0 <xTaskResumeAll>
 8007e06:	e047      	b.n	8007e98 <xQueueReceive+0x1a0>
    taskENTER_CRITICAL();
 8007e08:	f001 fca2 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007e0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007e10:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e12:	2d00      	cmp	r5, #0
 8007e14:	dc04      	bgt.n	8007e20 <xQueueReceive+0x128>
 8007e16:	e011      	b.n	8007e3c <xQueueReceive+0x144>
            --cTxLock;
 8007e18:	1e6b      	subs	r3, r5, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1e:	b16a      	cbz	r2, 8007e3c <xQueueReceive+0x144>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e22:	b15b      	cbz	r3, 8007e3c <xQueueReceive+0x144>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e24:	4630      	mov	r0, r6
 8007e26:	f001 f8c7 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d0f4      	beq.n	8007e18 <xQueueReceive+0x120>
                        vTaskMissedYield();
 8007e2e:	f001 f971 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 8007e32:	1e6b      	subs	r3, r5, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d1f1      	bne.n	8007e20 <xQueueReceive+0x128>
        pxQueue->cTxLock = queueUNLOCKED;
 8007e3c:	23ff      	movs	r3, #255	@ 0xff
 8007e3e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007e42:	f001 fc93 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007e46:	f001 fc83 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007e4a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007e4e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	dd14      	ble.n	8007e7e <xQueueReceive+0x186>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e54:	f104 0910 	add.w	r9, r4, #16
 8007e58:	e003      	b.n	8007e62 <xQueueReceive+0x16a>
                --cRxLock;
 8007e5a:	1e6b      	subs	r3, r5, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e60:	b16a      	cbz	r2, 8007e7e <xQueueReceive+0x186>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	b15b      	cbz	r3, 8007e7e <xQueueReceive+0x186>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e66:	4648      	mov	r0, r9
 8007e68:	f001 f8a6 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d0f4      	beq.n	8007e5a <xQueueReceive+0x162>
                    vTaskMissedYield();
 8007e70:	f001 f950 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 8007e74:	1e6b      	subs	r3, r5, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d1f1      	bne.n	8007e62 <xQueueReceive+0x16a>
        pxQueue->cRxLock = queueUNLOCKED;
 8007e7e:	23ff      	movs	r3, #255	@ 0xff
 8007e80:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007e84:	f001 fc72 	bl	800976c <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8007e88:	f000 ffaa 	bl	8008de0 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8007e8c:	f001 fc60 	bl	8009750 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007e90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007e92:	b153      	cbz	r3, 8007eaa <xQueueReceive+0x1b2>
    taskEXIT_CRITICAL();
 8007e94:	f001 fc6a 	bl	800976c <vPortExitCritical>
        taskENTER_CRITICAL();
 8007e98:	f001 fc5a 	bl	8009750 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e9c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	d169      	bne.n	8007f76 <xQueueReceive+0x27e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f47f af48 	bne.w	8007d3a <xQueueReceive+0x42>
                    taskEXIT_CRITICAL();
 8007eaa:	f001 fc5f 	bl	800976c <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8007eae:	2000      	movs	r0, #0
}
 8007eb0:	b005      	add	sp, #20
 8007eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eb6:	f104 0924 	add.w	r9, r4, #36	@ 0x24
    taskEXIT_CRITICAL();
 8007eba:	f001 fc57 	bl	800976c <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ebe:	4648      	mov	r0, r9
 8007ec0:	9901      	ldr	r1, [sp, #4]
 8007ec2:	f000 ffc1 	bl	8008e48 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8007ec6:	f001 fc43 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007eca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ece:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	dc04      	bgt.n	8007ede <xQueueReceive+0x1e6>
 8007ed4:	e011      	b.n	8007efa <xQueueReceive+0x202>
            --cTxLock;
 8007ed6:	1e6b      	subs	r3, r5, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007edc:	b16a      	cbz	r2, 8007efa <xQueueReceive+0x202>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ede:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ee0:	b15b      	cbz	r3, 8007efa <xQueueReceive+0x202>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ee2:	4648      	mov	r0, r9
 8007ee4:	f001 f868 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d0f4      	beq.n	8007ed6 <xQueueReceive+0x1de>
                        vTaskMissedYield();
 8007eec:	f001 f912 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 8007ef0:	1e6b      	subs	r3, r5, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	d1f1      	bne.n	8007ede <xQueueReceive+0x1e6>
        pxQueue->cTxLock = queueUNLOCKED;
 8007efa:	23ff      	movs	r3, #255	@ 0xff
 8007efc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007f00:	f001 fc34 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8007f04:	f001 fc24 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007f08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f0c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	dd14      	ble.n	8007f3c <xQueueReceive+0x244>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f12:	f104 0910 	add.w	r9, r4, #16
 8007f16:	e003      	b.n	8007f20 <xQueueReceive+0x228>
                --cRxLock;
 8007f18:	1e6b      	subs	r3, r5, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f1e:	b16a      	cbz	r2, 8007f3c <xQueueReceive+0x244>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	b15b      	cbz	r3, 8007f3c <xQueueReceive+0x244>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f24:	4648      	mov	r0, r9
 8007f26:	f001 f847 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d0f4      	beq.n	8007f18 <xQueueReceive+0x220>
                    vTaskMissedYield();
 8007f2e:	f001 f8f1 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 8007f32:	1e6b      	subs	r3, r5, #1
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	d1f1      	bne.n	8007f20 <xQueueReceive+0x228>
        pxQueue->cRxLock = queueUNLOCKED;
 8007f3c:	23ff      	movs	r3, #255	@ 0xff
 8007f3e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007f42:	f001 fc13 	bl	800976c <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8007f46:	f000 ff4b 	bl	8008de0 <xTaskResumeAll>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d1a4      	bne.n	8007e98 <xQueueReceive+0x1a0>
                    taskYIELD_WITHIN_API();
 8007f4e:	f001 fbf3 	bl	8009738 <vPortYield>
 8007f52:	e7a1      	b.n	8007e98 <xQueueReceive+0x1a0>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f43f aeda 	beq.w	8007d10 <xQueueReceive+0x18>
 8007f5c:	f001 fd2a 	bl	80099b4 <ulSetInterruptMask>
 8007f60:	e7fe      	b.n	8007f60 <xQueueReceive+0x268>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f43f aed8 	beq.w	8007d1a <xQueueReceive+0x22>
 8007f6a:	f001 fd23 	bl	80099b4 <ulSetInterruptMask>
 8007f6e:	e7fe      	b.n	8007f6e <xQueueReceive+0x276>
    configASSERT( ( pxQueue ) );
 8007f70:	f001 fd20 	bl	80099b4 <ulSetInterruptMask>
 8007f74:	e7fe      	b.n	8007f74 <xQueueReceive+0x27c>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f76:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007f78:	b15a      	cbz	r2, 8007f92 <xQueueReceive+0x29a>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007f7a:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8007f7c:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007f7e:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8007f80:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007f82:	60e1      	str	r1, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f84:	bf28      	it	cs
 8007f86:	6821      	ldrcs	r1, [r4, #0]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8007f88:	4638      	mov	r0, r7
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f8a:	bf28      	it	cs
 8007f8c:	60e1      	strcs	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8007f8e:	f005 fc4e 	bl	800d82e <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f92:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8007f94:	3d01      	subs	r5, #1
 8007f96:	63a5      	str	r5, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f98:	b91b      	cbnz	r3, 8007fa2 <xQueueReceive+0x2aa>
                taskEXIT_CRITICAL();
 8007f9a:	f001 fbe7 	bl	800976c <vPortExitCritical>
                return pdPASS;
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e786      	b.n	8007eb0 <xQueueReceive+0x1b8>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa2:	f104 0010 	add.w	r0, r4, #16
 8007fa6:	f001 f807 	bl	8008fb8 <xTaskRemoveFromEventList>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d0f5      	beq.n	8007f9a <xQueueReceive+0x2a2>
                        queueYIELD_IF_USING_PREEMPTION();
 8007fae:	f001 fbc3 	bl	8009738 <vPortYield>
 8007fb2:	e7f2      	b.n	8007f9a <xQueueReceive+0x2a2>

08007fb4 <xQueueSemaphoreTake>:
{
 8007fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f000 8142 	beq.w	8008246 <xQueueSemaphoreTake+0x292>
    configASSERT( pxQueue->uxItemSize == 0 );
 8007fc2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f040 8088 	bne.w	80080dc <xQueueSemaphoreTake+0x128>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fcc:	f001 f8a8 	bl	8009120 <xTaskGetSchedulerState>
 8007fd0:	b918      	cbnz	r0, 8007fda <xQueueSemaphoreTake+0x26>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 8133 	bne.w	8008240 <xQueueSemaphoreTake+0x28c>
        taskENTER_CRITICAL();
 8007fda:	f001 fbb9 	bl	8009750 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fde:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	f040 8141 	bne.w	8008268 <xQueueSemaphoreTake+0x2b4>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8126 	beq.w	800823a <xQueueSemaphoreTake+0x286>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007fee:	a802      	add	r0, sp, #8
 8007ff0:	f001 f84c 	bl	800908c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007ff4:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 8007ff6:	46a8      	mov	r8, r5
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        taskEXIT_CRITICAL();
 8007ffc:	f001 fbb6 	bl	800976c <vPortExitCritical>
        vTaskSuspendAll();
 8008000:	f000 fee6 	bl	8008dd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008004:	f001 fba4 	bl	8009750 <vPortEnterCritical>
 8008008:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800800c:	2bff      	cmp	r3, #255	@ 0xff
 800800e:	bf08      	it	eq
 8008010:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008014:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008018:	2bff      	cmp	r3, #255	@ 0xff
 800801a:	bf08      	it	eq
 800801c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008020:	f001 fba4 	bl	800976c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008024:	a901      	add	r1, sp, #4
 8008026:	a802      	add	r0, sp, #8
 8008028:	f001 f83c 	bl	80090a4 <xTaskCheckForTimeOut>
 800802c:	2800      	cmp	r0, #0
 800802e:	d158      	bne.n	80080e2 <xQueueSemaphoreTake+0x12e>
    taskENTER_CRITICAL();
 8008030:	f001 fb8e 	bl	8009750 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008034:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80a2 	beq.w	8008180 <xQueueSemaphoreTake+0x1cc>
    taskEXIT_CRITICAL();
 800803c:	f001 fb96 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8008040:	f001 fb86 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8008044:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008048:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800804a:	2d00      	cmp	r5, #0
 800804c:	dd14      	ble.n	8008078 <xQueueSemaphoreTake+0xc4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804e:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8008052:	e003      	b.n	800805c <xQueueSemaphoreTake+0xa8>
            --cTxLock;
 8008054:	1e6b      	subs	r3, r5, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800805a:	b16a      	cbz	r2, 8008078 <xQueueSemaphoreTake+0xc4>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800805c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800805e:	b15b      	cbz	r3, 8008078 <xQueueSemaphoreTake+0xc4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008060:	4648      	mov	r0, r9
 8008062:	f000 ffa9 	bl	8008fb8 <xTaskRemoveFromEventList>
 8008066:	2800      	cmp	r0, #0
 8008068:	d0f4      	beq.n	8008054 <xQueueSemaphoreTake+0xa0>
                        vTaskMissedYield();
 800806a:	f001 f853 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 800806e:	1e6b      	subs	r3, r5, #1
 8008070:	b2da      	uxtb	r2, r3
 8008072:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008074:	2a00      	cmp	r2, #0
 8008076:	d1f1      	bne.n	800805c <xQueueSemaphoreTake+0xa8>
        pxQueue->cTxLock = queueUNLOCKED;
 8008078:	23ff      	movs	r3, #255	@ 0xff
 800807a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 800807e:	f001 fb75 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8008082:	f001 fb65 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8008086:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800808a:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800808c:	2d00      	cmp	r5, #0
 800808e:	dd14      	ble.n	80080ba <xQueueSemaphoreTake+0x106>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008090:	f104 0910 	add.w	r9, r4, #16
 8008094:	e003      	b.n	800809e <xQueueSemaphoreTake+0xea>
                --cRxLock;
 8008096:	1e6b      	subs	r3, r5, #1
 8008098:	b2da      	uxtb	r2, r3
 800809a:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800809c:	b16a      	cbz	r2, 80080ba <xQueueSemaphoreTake+0x106>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	b15b      	cbz	r3, 80080ba <xQueueSemaphoreTake+0x106>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a2:	4648      	mov	r0, r9
 80080a4:	f000 ff88 	bl	8008fb8 <xTaskRemoveFromEventList>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0f4      	beq.n	8008096 <xQueueSemaphoreTake+0xe2>
                    vTaskMissedYield();
 80080ac:	f001 f832 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 80080b0:	1e6b      	subs	r3, r5, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d1f1      	bne.n	800809e <xQueueSemaphoreTake+0xea>
        pxQueue->cRxLock = queueUNLOCKED;
 80080ba:	23ff      	movs	r3, #255	@ 0xff
 80080bc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 80080c0:	f001 fb54 	bl	800976c <vPortExitCritical>
                ( void ) xTaskResumeAll();
 80080c4:	f000 fe8c 	bl	8008de0 <xTaskResumeAll>
        taskENTER_CRITICAL();
 80080c8:	f001 fb42 	bl	8009750 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080cc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	f040 80ca 	bne.w	8008268 <xQueueSemaphoreTake+0x2b4>
                if( xTicksToWait == ( TickType_t ) 0 )
 80080d4:	9b01      	ldr	r3, [sp, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d190      	bne.n	8007ffc <xQueueSemaphoreTake+0x48>
 80080da:	e0ae      	b.n	800823a <xQueueSemaphoreTake+0x286>
    configASSERT( pxQueue->uxItemSize == 0 );
 80080dc:	f001 fc6a 	bl	80099b4 <ulSetInterruptMask>
 80080e0:	e7fe      	b.n	80080e0 <xQueueSemaphoreTake+0x12c>
    taskENTER_CRITICAL();
 80080e2:	f001 fb35 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80080e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80080ea:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	dc04      	bgt.n	80080fa <xQueueSemaphoreTake+0x146>
 80080f0:	e011      	b.n	8008116 <xQueueSemaphoreTake+0x162>
            --cTxLock;
 80080f2:	1e6b      	subs	r3, r5, #1
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80080f8:	b16a      	cbz	r2, 8008116 <xQueueSemaphoreTake+0x162>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080fc:	b15b      	cbz	r3, 8008116 <xQueueSemaphoreTake+0x162>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080fe:	4630      	mov	r0, r6
 8008100:	f000 ff5a 	bl	8008fb8 <xTaskRemoveFromEventList>
 8008104:	2800      	cmp	r0, #0
 8008106:	d0f4      	beq.n	80080f2 <xQueueSemaphoreTake+0x13e>
                        vTaskMissedYield();
 8008108:	f001 f804 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 800810c:	1e6b      	subs	r3, r5, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008112:	2a00      	cmp	r2, #0
 8008114:	d1f1      	bne.n	80080fa <xQueueSemaphoreTake+0x146>
        pxQueue->cTxLock = queueUNLOCKED;
 8008116:	23ff      	movs	r3, #255	@ 0xff
 8008118:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 800811c:	f001 fb26 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8008120:	f001 fb16 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8008124:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008128:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800812a:	2d00      	cmp	r5, #0
 800812c:	dd14      	ble.n	8008158 <xQueueSemaphoreTake+0x1a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800812e:	f104 0910 	add.w	r9, r4, #16
 8008132:	e003      	b.n	800813c <xQueueSemaphoreTake+0x188>
                --cRxLock;
 8008134:	1e6b      	subs	r3, r5, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800813a:	b16a      	cbz	r2, 8008158 <xQueueSemaphoreTake+0x1a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	b15b      	cbz	r3, 8008158 <xQueueSemaphoreTake+0x1a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008140:	4648      	mov	r0, r9
 8008142:	f000 ff39 	bl	8008fb8 <xTaskRemoveFromEventList>
 8008146:	2800      	cmp	r0, #0
 8008148:	d0f4      	beq.n	8008134 <xQueueSemaphoreTake+0x180>
                    vTaskMissedYield();
 800814a:	f000 ffe3 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 800814e:	1e6b      	subs	r3, r5, #1
 8008150:	b2da      	uxtb	r2, r3
 8008152:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008154:	2a00      	cmp	r2, #0
 8008156:	d1f1      	bne.n	800813c <xQueueSemaphoreTake+0x188>
        pxQueue->cRxLock = queueUNLOCKED;
 8008158:	23ff      	movs	r3, #255	@ 0xff
 800815a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 800815e:	f001 fb05 	bl	800976c <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8008162:	f000 fe3d 	bl	8008de0 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8008166:	f001 faf3 	bl	8009750 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800816a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800816c:	2b00      	cmp	r3, #0
 800816e:	d15a      	bne.n	8008226 <xQueueSemaphoreTake+0x272>
    taskEXIT_CRITICAL();
 8008170:	f001 fafc 	bl	800976c <vPortExitCritical>
                    if( xInheritanceOccurred != pdFALSE )
 8008174:	2f00      	cmp	r7, #0
 8008176:	d159      	bne.n	800822c <xQueueSemaphoreTake+0x278>
                    return errQUEUE_EMPTY;
 8008178:	2000      	movs	r0, #0
}
 800817a:	b005      	add	sp, #20
 800817c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskEXIT_CRITICAL();
 8008180:	f001 faf4 	bl	800976c <vPortExitCritical>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d065      	beq.n	8008256 <xQueueSemaphoreTake+0x2a2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800818a:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 800818e:	4648      	mov	r0, r9
 8008190:	9901      	ldr	r1, [sp, #4]
 8008192:	f000 fe59 	bl	8008e48 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8008196:	f001 fadb 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800819a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800819e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	dc04      	bgt.n	80081ae <xQueueSemaphoreTake+0x1fa>
 80081a4:	e011      	b.n	80081ca <xQueueSemaphoreTake+0x216>
            --cTxLock;
 80081a6:	1e6b      	subs	r3, r5, #1
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ac:	b16a      	cbz	r2, 80081ca <xQueueSemaphoreTake+0x216>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081b0:	b15b      	cbz	r3, 80081ca <xQueueSemaphoreTake+0x216>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 ff00 	bl	8008fb8 <xTaskRemoveFromEventList>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d0f4      	beq.n	80081a6 <xQueueSemaphoreTake+0x1f2>
                        vTaskMissedYield();
 80081bc:	f000 ffaa 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 80081c0:	1e6b      	subs	r3, r5, #1
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d1f1      	bne.n	80081ae <xQueueSemaphoreTake+0x1fa>
        pxQueue->cTxLock = queueUNLOCKED;
 80081ca:	23ff      	movs	r3, #255	@ 0xff
 80081cc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 80081d0:	f001 facc 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 80081d4:	f001 fabc 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80081d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80081dc:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80081de:	2d00      	cmp	r5, #0
 80081e0:	dd14      	ble.n	800820c <xQueueSemaphoreTake+0x258>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e2:	f104 0910 	add.w	r9, r4, #16
 80081e6:	e003      	b.n	80081f0 <xQueueSemaphoreTake+0x23c>
                --cRxLock;
 80081e8:	1e6b      	subs	r3, r5, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ee:	b16a      	cbz	r2, 800820c <xQueueSemaphoreTake+0x258>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081f0:	6923      	ldr	r3, [r4, #16]
 80081f2:	b15b      	cbz	r3, 800820c <xQueueSemaphoreTake+0x258>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f4:	4648      	mov	r0, r9
 80081f6:	f000 fedf 	bl	8008fb8 <xTaskRemoveFromEventList>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d0f4      	beq.n	80081e8 <xQueueSemaphoreTake+0x234>
                    vTaskMissedYield();
 80081fe:	f000 ff89 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 8008202:	1e6b      	subs	r3, r5, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008208:	2a00      	cmp	r2, #0
 800820a:	d1f1      	bne.n	80081f0 <xQueueSemaphoreTake+0x23c>
        pxQueue->cRxLock = queueUNLOCKED;
 800820c:	23ff      	movs	r3, #255	@ 0xff
 800820e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8008212:	f001 faab 	bl	800976c <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8008216:	f000 fde3 	bl	8008de0 <xTaskResumeAll>
 800821a:	2800      	cmp	r0, #0
 800821c:	f47f af54 	bne.w	80080c8 <xQueueSemaphoreTake+0x114>
                    taskYIELD_WITHIN_API();
 8008220:	f001 fa8a 	bl	8009738 <vPortYield>
 8008224:	e750      	b.n	80080c8 <xQueueSemaphoreTake+0x114>
    taskEXIT_CRITICAL();
 8008226:	f001 faa1 	bl	800976c <vPortExitCritical>
    return xReturn;
 800822a:	e74d      	b.n	80080c8 <xQueueSemaphoreTake+0x114>
                        taskENTER_CRITICAL();
 800822c:	f001 fa90 	bl	8009750 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008230:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008232:	b959      	cbnz	r1, 800824c <xQueueSemaphoreTake+0x298>
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008234:	68a0      	ldr	r0, [r4, #8]
 8008236:	f001 f80f 	bl	8009258 <vTaskPriorityDisinheritAfterTimeout>
                        taskEXIT_CRITICAL();
 800823a:	f001 fa97 	bl	800976c <vPortExitCritical>
 800823e:	e79b      	b.n	8008178 <xQueueSemaphoreTake+0x1c4>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008240:	f001 fbb8 	bl	80099b4 <ulSetInterruptMask>
 8008244:	e7fe      	b.n	8008244 <xQueueSemaphoreTake+0x290>
    configASSERT( ( pxQueue ) );
 8008246:	f001 fbb5 	bl	80099b4 <ulSetInterruptMask>
 800824a:	e7fe      	b.n	800824a <xQueueSemaphoreTake+0x296>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800824c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 8008254:	e7ee      	b.n	8008234 <xQueueSemaphoreTake+0x280>
                        taskENTER_CRITICAL();
 8008256:	f001 fa7b 	bl	8009750 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800825a:	68a0      	ldr	r0, [r4, #8]
 800825c:	f000 ff70 	bl	8009140 <xTaskPriorityInherit>
 8008260:	4607      	mov	r7, r0
                        taskEXIT_CRITICAL();
 8008262:	f001 fa83 	bl	800976c <vPortExitCritical>
 8008266:	e790      	b.n	800818a <xQueueSemaphoreTake+0x1d6>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008268:	6823      	ldr	r3, [r4, #0]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800826a:	3d01      	subs	r5, #1
 800826c:	63a5      	str	r5, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800826e:	b173      	cbz	r3, 800828e <xQueueSemaphoreTake+0x2da>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	b91b      	cbnz	r3, 800827c <xQueueSemaphoreTake+0x2c8>
                taskEXIT_CRITICAL();
 8008274:	f001 fa7a 	bl	800976c <vPortExitCritical>
                return pdPASS;
 8008278:	2001      	movs	r0, #1
 800827a:	e77e      	b.n	800817a <xQueueSemaphoreTake+0x1c6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800827c:	f104 0010 	add.w	r0, r4, #16
 8008280:	f000 fe9a 	bl	8008fb8 <xTaskRemoveFromEventList>
 8008284:	2800      	cmp	r0, #0
 8008286:	d0f5      	beq.n	8008274 <xQueueSemaphoreTake+0x2c0>
                        queueYIELD_IF_USING_PREEMPTION();
 8008288:	f001 fa56 	bl	8009738 <vPortYield>
 800828c:	e7f2      	b.n	8008274 <xQueueSemaphoreTake+0x2c0>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800828e:	f001 f82d 	bl	80092ec <pvTaskIncrementMutexHeldCount>
 8008292:	60a0      	str	r0, [r4, #8]
 8008294:	e7ec      	b.n	8008270 <xQueueSemaphoreTake+0x2bc>
 8008296:	bf00      	nop

08008298 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8008298:	b510      	push	{r4, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800829a:	2800      	cmp	r0, #0
 800829c:	d032      	beq.n	8008304 <vQueueAddToRegistry+0x6c>

        if( pcQueueName != NULL )
 800829e:	2900      	cmp	r1, #0
 80082a0:	d02f      	beq.n	8008302 <vQueueAddToRegistry+0x6a>
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082a2:	4b40      	ldr	r3, [pc, #256]	@ (80083a4 <vQueueAddToRegistry+0x10c>)
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4290      	cmp	r0, r2
 80082a8:	d06a      	beq.n	8008380 <vQueueAddToRegistry+0xe8>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
                    break;
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d02c      	beq.n	800830a <vQueueAddToRegistry+0x72>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	4290      	cmp	r0, r2
 80082b4:	d074      	beq.n	80083a0 <vQueueAddToRegistry+0x108>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d041      	beq.n	8008340 <vQueueAddToRegistry+0xa8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	4290      	cmp	r0, r2
 80082c0:	d06c      	beq.n	800839c <vQueueAddToRegistry+0x104>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d041      	beq.n	800834c <vQueueAddToRegistry+0xb4>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082c8:	69da      	ldr	r2, [r3, #28]
 80082ca:	4290      	cmp	r0, r2
 80082cc:	d05c      	beq.n	8008388 <vQueueAddToRegistry+0xf0>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082ce:	699a      	ldr	r2, [r3, #24]
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	d041      	beq.n	8008358 <vQueueAddToRegistry+0xc0>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082d6:	4290      	cmp	r0, r2
 80082d8:	d058      	beq.n	800838c <vQueueAddToRegistry+0xf4>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082da:	6a1a      	ldr	r2, [r3, #32]
 80082dc:	2a00      	cmp	r2, #0
 80082de:	d040      	beq.n	8008362 <vQueueAddToRegistry+0xca>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e2:	4290      	cmp	r0, r2
 80082e4:	d054      	beq.n	8008390 <vQueueAddToRegistry+0xf8>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d03f      	beq.n	800836c <vQueueAddToRegistry+0xd4>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ee:	4290      	cmp	r0, r2
 80082f0:	d050      	beq.n	8008394 <vQueueAddToRegistry+0xfc>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	d03e      	beq.n	8008376 <vQueueAddToRegistry+0xde>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082fa:	4290      	cmp	r0, r2
 80082fc:	d04c      	beq.n	8008398 <vQueueAddToRegistry+0x100>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	b1e3      	cbz	r3, 800833c <vQueueAddToRegistry+0xa4>

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8008302:	bd10      	pop	{r4, pc}
        configASSERT( xQueue );
 8008304:	f001 fb56 	bl	80099b4 <ulSetInterruptMask>
 8008308:	e7fe      	b.n	8008308 <vQueueAddToRegistry+0x70>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	4290      	cmp	r0, r2
 800830e:	d047      	beq.n	80083a0 <vQueueAddToRegistry+0x108>
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	4290      	cmp	r0, r2
 8008314:	d042      	beq.n	800839c <vQueueAddToRegistry+0x104>
 8008316:	461a      	mov	r2, r3
 8008318:	69dc      	ldr	r4, [r3, #28]
 800831a:	42a0      	cmp	r0, r4
 800831c:	d034      	beq.n	8008388 <vQueueAddToRegistry+0xf0>
 800831e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008320:	42a0      	cmp	r0, r4
 8008322:	d033      	beq.n	800838c <vQueueAddToRegistry+0xf4>
 8008324:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8008326:	42a0      	cmp	r0, r4
 8008328:	d032      	beq.n	8008390 <vQueueAddToRegistry+0xf8>
 800832a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800832c:	42a0      	cmp	r0, r4
 800832e:	d031      	beq.n	8008394 <vQueueAddToRegistry+0xfc>
 8008330:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8008332:	42a0      	cmp	r0, r4
 8008334:	d030      	beq.n	8008398 <vQueueAddToRegistry+0x100>
            pxEntryToWrite->xHandle = xQueue;
 8008336:	e9c2 1000 	strd	r1, r0, [r2]
    }
 800833a:	bd10      	pop	{r4, pc}
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800833c:	4a1a      	ldr	r2, [pc, #104]	@ (80083a8 <vQueueAddToRegistry+0x110>)
 800833e:	e7fa      	b.n	8008336 <vQueueAddToRegistry+0x9e>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	4290      	cmp	r0, r2
 8008344:	d02a      	beq.n	800839c <vQueueAddToRegistry+0x104>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008346:	f103 0208 	add.w	r2, r3, #8
 800834a:	e7e5      	b.n	8008318 <vQueueAddToRegistry+0x80>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	4290      	cmp	r0, r2
 8008350:	d01a      	beq.n	8008388 <vQueueAddToRegistry+0xf0>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008352:	f103 0210 	add.w	r2, r3, #16
 8008356:	e7e2      	b.n	800831e <vQueueAddToRegistry+0x86>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800835a:	4290      	cmp	r0, r2
 800835c:	d016      	beq.n	800838c <vQueueAddToRegistry+0xf4>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800835e:	4a13      	ldr	r2, [pc, #76]	@ (80083ac <vQueueAddToRegistry+0x114>)
 8008360:	e7e0      	b.n	8008324 <vQueueAddToRegistry+0x8c>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008364:	4290      	cmp	r0, r2
 8008366:	d013      	beq.n	8008390 <vQueueAddToRegistry+0xf8>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008368:	4a11      	ldr	r2, [pc, #68]	@ (80083b0 <vQueueAddToRegistry+0x118>)
 800836a:	e7de      	b.n	800832a <vQueueAddToRegistry+0x92>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800836c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800836e:	4290      	cmp	r0, r2
 8008370:	d010      	beq.n	8008394 <vQueueAddToRegistry+0xfc>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008372:	4a10      	ldr	r2, [pc, #64]	@ (80083b4 <vQueueAddToRegistry+0x11c>)
 8008374:	e7dc      	b.n	8008330 <vQueueAddToRegistry+0x98>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008378:	4290      	cmp	r0, r2
 800837a:	d00d      	beq.n	8008398 <vQueueAddToRegistry+0x100>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800837c:	4a0e      	ldr	r2, [pc, #56]	@ (80083b8 <vQueueAddToRegistry+0x120>)
        if( pxEntryToWrite != NULL )
 800837e:	e7da      	b.n	8008336 <vQueueAddToRegistry+0x9e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008380:	2200      	movs	r2, #0
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008382:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if( pxEntryToWrite != NULL )
 8008386:	e7d6      	b.n	8008336 <vQueueAddToRegistry+0x9e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008388:	2203      	movs	r2, #3
 800838a:	e7fa      	b.n	8008382 <vQueueAddToRegistry+0xea>
 800838c:	2204      	movs	r2, #4
 800838e:	e7f8      	b.n	8008382 <vQueueAddToRegistry+0xea>
 8008390:	2205      	movs	r2, #5
 8008392:	e7f6      	b.n	8008382 <vQueueAddToRegistry+0xea>
 8008394:	2206      	movs	r2, #6
 8008396:	e7f4      	b.n	8008382 <vQueueAddToRegistry+0xea>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008398:	2207      	movs	r2, #7
 800839a:	e7f2      	b.n	8008382 <vQueueAddToRegistry+0xea>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800839c:	2202      	movs	r2, #2
 800839e:	e7f0      	b.n	8008382 <vQueueAddToRegistry+0xea>
 80083a0:	2201      	movs	r2, #1
 80083a2:	e7ee      	b.n	8008382 <vQueueAddToRegistry+0xea>
 80083a4:	200619d0 	.word	0x200619d0
 80083a8:	20061a08 	.word	0x20061a08
 80083ac:	200619e8 	.word	0x200619e8
 80083b0:	200619f0 	.word	0x200619f0
 80083b4:	200619f8 	.word	0x200619f8
 80083b8:	20061a00 	.word	0x20061a00

080083bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	4605      	mov	r5, r0
 80083c0:	460e      	mov	r6, r1
 80083c2:	4614      	mov	r4, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80083c4:	f001 f9c4 	bl	8009750 <vPortEnterCritical>
 80083c8:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 80083cc:	2bff      	cmp	r3, #255	@ 0xff
 80083ce:	bf04      	itt	eq
 80083d0:	2300      	moveq	r3, #0
 80083d2:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 80083d6:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80083da:	2bff      	cmp	r3, #255	@ 0xff
 80083dc:	bf04      	itt	eq
 80083de:	2300      	moveq	r3, #0
 80083e0:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 80083e4:	f001 f9c2 	bl	800976c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083e8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d043      	beq.n	8008476 <vQueueWaitForMessageRestricted+0xba>
    taskENTER_CRITICAL();
 80083ee:	f001 f9af 	bl	8009750 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80083f2:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80083f6:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80083f8:	2c00      	cmp	r4, #0
 80083fa:	dd14      	ble.n	8008426 <vQueueWaitForMessageRestricted+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083fc:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8008400:	e003      	b.n	800840a <vQueueWaitForMessageRestricted+0x4e>
            --cTxLock;
 8008402:	1e63      	subs	r3, r4, #1
 8008404:	b2da      	uxtb	r2, r3
 8008406:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008408:	b16a      	cbz	r2, 8008426 <vQueueWaitForMessageRestricted+0x6a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800840a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800840c:	b15b      	cbz	r3, 8008426 <vQueueWaitForMessageRestricted+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800840e:	4630      	mov	r0, r6
 8008410:	f000 fdd2 	bl	8008fb8 <xTaskRemoveFromEventList>
 8008414:	2800      	cmp	r0, #0
 8008416:	d0f4      	beq.n	8008402 <vQueueWaitForMessageRestricted+0x46>
                        vTaskMissedYield();
 8008418:	f000 fe7c 	bl	8009114 <vTaskMissedYield>
            --cTxLock;
 800841c:	1e63      	subs	r3, r4, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008422:	2a00      	cmp	r2, #0
 8008424:	d1f1      	bne.n	800840a <vQueueWaitForMessageRestricted+0x4e>
        pxQueue->cTxLock = queueUNLOCKED;
 8008426:	23ff      	movs	r3, #255	@ 0xff
 8008428:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
    taskEXIT_CRITICAL();
 800842c:	f001 f99e 	bl	800976c <vPortExitCritical>
    taskENTER_CRITICAL();
 8008430:	f001 f98e 	bl	8009750 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8008434:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8008438:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800843a:	2c00      	cmp	r4, #0
 800843c:	dd14      	ble.n	8008468 <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800843e:	f105 0610 	add.w	r6, r5, #16
 8008442:	e003      	b.n	800844c <vQueueWaitForMessageRestricted+0x90>
                --cRxLock;
 8008444:	1e63      	subs	r3, r4, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800844a:	b16a      	cbz	r2, 8008468 <vQueueWaitForMessageRestricted+0xac>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800844c:	692b      	ldr	r3, [r5, #16]
 800844e:	b15b      	cbz	r3, 8008468 <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008450:	4630      	mov	r0, r6
 8008452:	f000 fdb1 	bl	8008fb8 <xTaskRemoveFromEventList>
 8008456:	2800      	cmp	r0, #0
 8008458:	d0f4      	beq.n	8008444 <vQueueWaitForMessageRestricted+0x88>
                    vTaskMissedYield();
 800845a:	f000 fe5b 	bl	8009114 <vTaskMissedYield>
                --cRxLock;
 800845e:	1e63      	subs	r3, r4, #1
 8008460:	b2da      	uxtb	r2, r3
 8008462:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008464:	2a00      	cmp	r2, #0
 8008466:	d1f1      	bne.n	800844c <vQueueWaitForMessageRestricted+0x90>
        pxQueue->cRxLock = queueUNLOCKED;
 8008468:	23ff      	movs	r3, #255	@ 0xff
 800846a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        }

        prvUnlockQueue( pxQueue );

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800846e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8008472:	f001 b97b 	b.w	800976c <vPortExitCritical>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008476:	4622      	mov	r2, r4
 8008478:	4631      	mov	r1, r6
 800847a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800847e:	f000 fd33 	bl	8008ee8 <vTaskPlaceOnEventListRestricted>
 8008482:	e7b4      	b.n	80083ee <vQueueWaitForMessageRestricted+0x32>

08008484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8008484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008488:	4605      	mov	r5, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800848a:	f001 f961 	bl	8009750 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800848e:	4a37      	ldr	r2, [pc, #220]	@ (800856c <prvAddNewTaskToReadyList+0xe8>)

            if( pxCurrentTCB == NULL )
 8008490:	4f37      	ldr	r7, [pc, #220]	@ (8008570 <prvAddNewTaskToReadyList+0xec>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	6013      	str	r3, [r2, #0]
            if( pxCurrentTCB == NULL )
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d035      	beq.n	800850a <prvAddNewTaskToReadyList+0x86>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800849e:	4c35      	ldr	r4, [pc, #212]	@ (8008574 <prvAddNewTaskToReadyList+0xf0>)
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084a0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
                if( xSchedulerRunning == pdFALSE )
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	b352      	cbz	r2, 80084fc <prvAddNewTaskToReadyList+0x78>
 80084a6:	4e34      	ldr	r6, [pc, #208]	@ (8008578 <prvAddNewTaskToReadyList+0xf4>)
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80084a8:	4934      	ldr	r1, [pc, #208]	@ (800857c <prvAddNewTaskToReadyList+0xf8>)
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80084aa:	4835      	ldr	r0, [pc, #212]	@ (8008580 <prvAddNewTaskToReadyList+0xfc>)
            uxTaskNumber++;
 80084ac:	680a      	ldr	r2, [r1, #0]
            prvAddTaskToReadyList( pxNewTCB );
 80084ae:	f105 0c04 	add.w	ip, r5, #4
            uxTaskNumber++;
 80084b2:	3201      	adds	r2, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084b4:	646a      	str	r2, [r5, #68]	@ 0x44
            uxTaskNumber++;
 80084b6:	600a      	str	r2, [r1, #0]
            prvAddTaskToReadyList( pxNewTCB );
 80084b8:	6802      	ldr	r2, [r0, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	bf38      	it	cc
 80084be:	6003      	strcc	r3, [r0, #0]
 80084c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084c4:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80084c8:	6841      	ldr	r1, [r0, #4]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	58f2      	ldr	r2, [r6, r3]
 80084ce:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80084d2:	60a9      	str	r1, [r5, #8]
 80084d4:	f8c5 e00c 	str.w	lr, [r5, #12]
 80084d8:	3201      	adds	r2, #1
 80084da:	f8ce c004 	str.w	ip, [lr, #4]
 80084de:	f8c1 c008 	str.w	ip, [r1, #8]
 80084e2:	6168      	str	r0, [r5, #20]
 80084e4:	50f2      	str	r2, [r6, r3]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80084e6:	f001 f941 	bl	800976c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	b123      	cbz	r3, 80084f8 <prvAddNewTaskToReadyList+0x74>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80084f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d310      	bcc.n	800851a <prvAddNewTaskToReadyList+0x96>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80084f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	4e1e      	ldr	r6, [pc, #120]	@ (8008578 <prvAddNewTaskToReadyList+0xf4>)
 8008500:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008502:	429a      	cmp	r2, r3
                        pxCurrentTCB = pxNewTCB;
 8008504:	bf98      	it	ls
 8008506:	603d      	strls	r5, [r7, #0]
 8008508:	e7ce      	b.n	80084a8 <prvAddNewTaskToReadyList+0x24>
                pxCurrentTCB = pxNewTCB;
 800850a:	603d      	str	r5, [r7, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800850c:	6813      	ldr	r3, [r2, #0]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d007      	beq.n	8008522 <prvAddNewTaskToReadyList+0x9e>
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008512:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008514:	4e18      	ldr	r6, [pc, #96]	@ (8008578 <prvAddNewTaskToReadyList+0xf4>)
 8008516:	4c17      	ldr	r4, [pc, #92]	@ (8008574 <prvAddNewTaskToReadyList+0xf0>)
 8008518:	e7c6      	b.n	80084a8 <prvAddNewTaskToReadyList+0x24>
    }
 800851a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800851e:	f001 b90b 	b.w	8009738 <vPortYield>
 8008522:	4e15      	ldr	r6, [pc, #84]	@ (8008578 <prvAddNewTaskToReadyList+0xf4>)
 8008524:	4634      	mov	r4, r6
 8008526:	f506 688c 	add.w	r8, r6, #1120	@ 0x460
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800852a:	4620      	mov	r0, r4
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800852c:	3414      	adds	r4, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800852e:	f7ff f989 	bl	8007844 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008532:	4544      	cmp	r4, r8
 8008534:	d1f9      	bne.n	800852a <prvAddNewTaskToReadyList+0xa6>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008536:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800859c <prvAddNewTaskToReadyList+0x118>
    vListInitialise( &xDelayedTaskList2 );
 800853a:	4c12      	ldr	r4, [pc, #72]	@ (8008584 <prvAddNewTaskToReadyList+0x100>)
    vListInitialise( &xDelayedTaskList1 );
 800853c:	4640      	mov	r0, r8
 800853e:	f7ff f981 	bl	8007844 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008542:	4620      	mov	r0, r4
 8008544:	f7ff f97e 	bl	8007844 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008548:	480f      	ldr	r0, [pc, #60]	@ (8008588 <prvAddNewTaskToReadyList+0x104>)
 800854a:	f7ff f97b 	bl	8007844 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800854e:	480f      	ldr	r0, [pc, #60]	@ (800858c <prvAddNewTaskToReadyList+0x108>)
 8008550:	f7ff f978 	bl	8007844 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008554:	480e      	ldr	r0, [pc, #56]	@ (8008590 <prvAddNewTaskToReadyList+0x10c>)
 8008556:	f7ff f975 	bl	8007844 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800855a:	4b0e      	ldr	r3, [pc, #56]	@ (8008594 <prvAddNewTaskToReadyList+0x110>)
 800855c:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008560:	4b0d      	ldr	r3, [pc, #52]	@ (8008598 <prvAddNewTaskToReadyList+0x114>)
 8008562:	601c      	str	r4, [r3, #0]
            prvAddTaskToReadyList( pxNewTCB );
 8008564:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008566:	4c03      	ldr	r4, [pc, #12]	@ (8008574 <prvAddNewTaskToReadyList+0xf0>)
}
 8008568:	e79e      	b.n	80084a8 <prvAddNewTaskToReadyList+0x24>
 800856a:	bf00      	nop
 800856c:	20061a38 	.word	0x20061a38
 8008570:	20061f0c 	.word	0x20061f0c
 8008574:	20061a2c 	.word	0x20061a2c
 8008578:	20061aac 	.word	0x20061aac
 800857c:	20061a1c 	.word	0x20061a1c
 8008580:	20061a30 	.word	0x20061a30
 8008584:	20061a84 	.word	0x20061a84
 8008588:	20061a68 	.word	0x20061a68
 800858c:	20061a54 	.word	0x20061a54
 8008590:	20061a3c 	.word	0x20061a3c
 8008594:	20061a80 	.word	0x20061a80
 8008598:	20061a7c 	.word	0x20061a7c
 800859c:	20061a98 	.word	0x20061a98

080085a0 <vTaskSwitchContext.part.0>:
            xYieldPendings[ 0 ] = pdFALSE;
 80085a0:	2200      	movs	r2, #0
 80085a2:	4b24      	ldr	r3, [pc, #144]	@ (8008634 <vTaskSwitchContext.part.0+0x94>)
    void vTaskSwitchContext( void )
 80085a4:	b570      	push	{r4, r5, r6, lr}
            taskCHECK_FOR_STACK_OVERFLOW();
 80085a6:	4c24      	ldr	r4, [pc, #144]	@ (8008638 <vTaskSwitchContext.part.0+0x98>)
            xYieldPendings[ 0 ] = pdFALSE;
 80085a8:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80085b4:	d103      	bne.n	80085be <vTaskSwitchContext.part.0+0x1e>
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80085bc:	d031      	beq.n	8008622 <vTaskSwitchContext.part.0+0x82>
 80085be:	6821      	ldr	r1, [r4, #0]
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	3134      	adds	r1, #52	@ 0x34
 80085c4:	f7f8 ffa6 	bl	8001514 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80085c8:	4d1c      	ldr	r5, [pc, #112]	@ (800863c <vTaskSwitchContext.part.0+0x9c>)
 80085ca:	481d      	ldr	r0, [pc, #116]	@ (8008640 <vTaskSwitchContext.part.0+0xa0>)
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80085d2:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 80085d6:	0099      	lsls	r1, r3, #2
 80085d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80085dc:	b95e      	cbnz	r6, 80085f6 <vTaskSwitchContext.part.0+0x56>
 80085de:	b133      	cbz	r3, 80085ee <vTaskSwitchContext.part.0+0x4e>
 80085e0:	f852 1c14 	ldr.w	r1, [r2, #-20]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b929      	cbnz	r1, 80085f4 <vTaskSwitchContext.part.0+0x54>
 80085e8:	3a14      	subs	r2, #20
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f8      	bne.n	80085e0 <vTaskSwitchContext.part.0+0x40>
 80085ee:	f001 f9e1 	bl	80099b4 <ulSetInterruptMask>
 80085f2:	e7fe      	b.n	80085f2 <vTaskSwitchContext.part.0+0x52>
 80085f4:	0099      	lsls	r1, r3, #2
 80085f6:	4419      	add	r1, r3
 80085f8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 80085fc:	4632      	mov	r2, r6
 80085fe:	6871      	ldr	r1, [r6, #4]
 8008600:	3208      	adds	r2, #8
 8008602:	6849      	ldr	r1, [r1, #4]
 8008604:	4291      	cmp	r1, r2
 8008606:	6071      	str	r1, [r6, #4]
 8008608:	bf08      	it	eq
 800860a:	68f1      	ldreq	r1, [r6, #12]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800860c:	4a0d      	ldr	r2, [pc, #52]	@ (8008644 <vTaskSwitchContext.part.0+0xa4>)
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800860e:	bf08      	it	eq
 8008610:	6071      	streq	r1, [r6, #4]
 8008612:	68c9      	ldr	r1, [r1, #12]
 8008614:	6021      	str	r1, [r4, #0]
 8008616:	602b      	str	r3, [r5, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8008618:	6823      	ldr	r3, [r4, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	3354      	adds	r3, #84	@ 0x54
 800861e:	6013      	str	r3, [r2, #0]
    }
 8008620:	bd70      	pop	{r4, r5, r6, pc}
            taskCHECK_FOR_STACK_OVERFLOW();
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008628:	d1c9      	bne.n	80085be <vTaskSwitchContext.part.0+0x1e>
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8008630:	d1c5      	bne.n	80085be <vTaskSwitchContext.part.0+0x1e>
 8008632:	e7c9      	b.n	80085c8 <vTaskSwitchContext.part.0+0x28>
 8008634:	20061a24 	.word	0x20061a24
 8008638:	20061f0c 	.word	0x20061f0c
 800863c:	20061a30 	.word	0x20061a30
 8008640:	20061aac 	.word	0x20061aac
 8008644:	20000f88 	.word	0x20000f88

08008648 <prvIdleTask>:
{
 8008648:	b580      	push	{r7, lr}
 800864a:	4d14      	ldr	r5, [pc, #80]	@ (800869c <prvIdleTask+0x54>)
 800864c:	4f14      	ldr	r7, [pc, #80]	@ (80086a0 <prvIdleTask+0x58>)
 800864e:	4e15      	ldr	r6, [pc, #84]	@ (80086a4 <prvIdleTask+0x5c>)
 8008650:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 80086a8 <prvIdleTask+0x60>
 8008654:	e018      	b.n	8008688 <prvIdleTask+0x40>
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8008656:	f001 f87b 	bl	8009750 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68dc      	ldr	r4, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800865e:	1d20      	adds	r0, r4, #4
 8008660:	f7ff f926 	bl	80078b0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	3b01      	subs	r3, #1
 800866e:	602b      	str	r3, [r5, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8008670:	f001 f87c 	bl	800976c <vPortExitCritical>
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 8008674:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008678:	f004 fffa 	bl	800d670 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800867c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800867e:	f001 fa9b 	bl	8009bb8 <vPortFree>
            vPortFree( pxTCB );
 8008682:	4620      	mov	r0, r4
 8008684:	f001 fa98 	bl	8009bb8 <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e3      	bne.n	8008656 <prvIdleTask+0xe>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800868e:	f8d8 3000 	ldr.w	r3, [r8]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d9f8      	bls.n	8008688 <prvIdleTask+0x40>
                taskYIELD();
 8008696:	f001 f84f 	bl	8009738 <vPortYield>
 800869a:	e7f5      	b.n	8008688 <prvIdleTask+0x40>
 800869c:	20061a50 	.word	0x20061a50
 80086a0:	20061a54 	.word	0x20061a54
 80086a4:	20061a38 	.word	0x20061a38
 80086a8:	20061aac 	.word	0x20061aac

080086ac <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 80086ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086b0:	4b60      	ldr	r3, [pc, #384]	@ (8008834 <xTaskIncrementTick.part.0+0x188>)
BaseType_t xTaskIncrementTick( void )
 80086b2:	b085      	sub	sp, #20
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086b4:	681c      	ldr	r4, [r3, #0]
 80086b6:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 80086b8:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	d075      	beq.n	80087aa <xTaskIncrementTick.part.0+0xfe>
 80086be:	495e      	ldr	r1, [pc, #376]	@ (8008838 <xTaskIncrementTick.part.0+0x18c>)
        if( xConstTickCount >= xNextTaskUnblockTime )
 80086c0:	680b      	ldr	r3, [r1, #0]
 80086c2:	429c      	cmp	r4, r3
 80086c4:	f0c0 808a 	bcc.w	80087dc <xTaskIncrementTick.part.0+0x130>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086c8:	4d5c      	ldr	r5, [pc, #368]	@ (800883c <xTaskIncrementTick.part.0+0x190>)
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80ab 	beq.w	800882a <xTaskIncrementTick.part.0+0x17e>
    BaseType_t xSwitchRequired = pdFALSE;
 80086d4:	f04f 0e00 	mov.w	lr, #0
 80086d8:	4b59      	ldr	r3, [pc, #356]	@ (8008840 <xTaskIncrementTick.part.0+0x194>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086da:	4676      	mov	r6, lr
 80086dc:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80086e0:	4858      	ldr	r0, [pc, #352]	@ (8008844 <xTaskIncrementTick.part.0+0x198>)
                    prvAddTaskToReadyList( pxTCB );
 80086e2:	4f59      	ldr	r7, [pc, #356]	@ (8008848 <xTaskIncrementTick.part.0+0x19c>)
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	e053      	b.n	8008790 <xTaskIncrementTick.part.0+0xe4>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086e8:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80086ec:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 80086f0:	f8c2 9008 	str.w	r9, [r2, #8]
 80086f4:	f8c9 2004 	str.w	r2, [r9, #4]
 80086f8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80086fc:	428a      	cmp	r2, r1
 80086fe:	f8dc 2000 	ldr.w	r2, [ip]
 8008702:	bf08      	it	eq
 8008704:	f8cc 9004 	streq.w	r9, [ip, #4]
 8008708:	3a01      	subs	r2, #1
 800870a:	615e      	str	r6, [r3, #20]
 800870c:	f8cc 2000 	str.w	r2, [ip]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008710:	f8d3 c028 	ldr.w	ip, [r3, #40]	@ 0x28
 8008714:	f1bc 0f00 	cmp.w	ip, #0
 8008718:	d011      	beq.n	800873e <xTaskIncrementTick.part.0+0x92>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800871a:	e9d3 2907 	ldrd	r2, r9, [r3, #28]
 800871e:	f8c2 9008 	str.w	r9, [r2, #8]
 8008722:	f8c9 2004 	str.w	r2, [r9, #4]
 8008726:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800872a:	4542      	cmp	r2, r8
 800872c:	f8dc 2000 	ldr.w	r2, [ip]
 8008730:	bf08      	it	eq
 8008732:	f8cc 9004 	streq.w	r9, [ip, #4]
 8008736:	3a01      	subs	r2, #1
 8008738:	629e      	str	r6, [r3, #40]	@ 0x28
 800873a:	f8cc 2000 	str.w	r2, [ip]
                    prvAddTaskToReadyList( pxTCB );
 800873e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008740:	f8d7 8000 	ldr.w	r8, [r7]
 8008744:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8008748:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
 800874c:	f8da 9004 	ldr.w	r9, [sl, #4]
 8008750:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 8008754:	f8d9 b008 	ldr.w	fp, [r9, #8]
 8008758:	f8c3 9008 	str.w	r9, [r3, #8]
 800875c:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008760:	4542      	cmp	r2, r8
 8008762:	f8cb 1004 	str.w	r1, [fp, #4]
 8008766:	f8c9 1008 	str.w	r1, [r9, #8]
 800876a:	f8c3 a014 	str.w	sl, [r3, #20]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800876e:	9b01      	ldr	r3, [sp, #4]
                    prvAddTaskToReadyList( pxTCB );
 8008770:	bf88      	it	hi
 8008772:	603a      	strhi	r2, [r7, #0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008774:	6819      	ldr	r1, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008776:	f104 0801 	add.w	r8, r4, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877a:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 800877c:	f840 802c 	str.w	r8, [r0, ip, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008780:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008782:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 8008784:	428a      	cmp	r2, r1
 8008786:	bf88      	it	hi
 8008788:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800878c:	2b00      	cmp	r3, #0
 800878e:	d047      	beq.n	8008820 <xTaskIncrementTick.part.0+0x174>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008790:	682b      	ldr	r3, [r5, #0]
                    if( xConstTickCount < xItemValue )
 8008792:	9c02      	ldr	r4, [sp, #8]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008798:	685a      	ldr	r2, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800879a:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
 800879c:	4294      	cmp	r4, r2
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800879e:	f103 0818 	add.w	r8, r3, #24
                    if( xConstTickCount < xItemValue )
 80087a2:	d2a1      	bcs.n	80086e8 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
 80087a4:	9903      	ldr	r1, [sp, #12]
 80087a6:	600a      	str	r2, [r1, #0]
                        break;
 80087a8:	e01d      	b.n	80087e6 <xTaskIncrementTick.part.0+0x13a>
            taskSWITCH_DELAYED_LISTS();
 80087aa:	4b24      	ldr	r3, [pc, #144]	@ (800883c <xTaskIncrementTick.part.0+0x190>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	d132      	bne.n	800881a <xTaskIncrementTick.part.0+0x16e>
 80087b4:	4a25      	ldr	r2, [pc, #148]	@ (800884c <xTaskIncrementTick.part.0+0x1a0>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	6811      	ldr	r1, [r2, #0]
 80087ba:	6019      	str	r1, [r3, #0]
 80087bc:	4924      	ldr	r1, [pc, #144]	@ (8008850 <xTaskIncrementTick.part.0+0x1a4>)
 80087be:	6010      	str	r0, [r2, #0]
 80087c0:	680a      	ldr	r2, [r1, #0]
 80087c2:	3201      	adds	r2, #1
 80087c4:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	bb02      	cbnz	r2, 800880e <xTaskIncrementTick.part.0+0x162>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80087cc:	f04f 33ff 	mov.w	r3, #4294967295
 80087d0:	4919      	ldr	r1, [pc, #100]	@ (8008838 <xTaskIncrementTick.part.0+0x18c>)
 80087d2:	600b      	str	r3, [r1, #0]
        if( xConstTickCount >= xNextTaskUnblockTime )
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	429c      	cmp	r4, r3
 80087d8:	f4bf af76 	bcs.w	80086c8 <xTaskIncrementTick.part.0+0x1c>
    BaseType_t xSwitchRequired = pdFALSE;
 80087dc:	f04f 0e00 	mov.w	lr, #0
 80087e0:	4b17      	ldr	r3, [pc, #92]	@ (8008840 <xTaskIncrementTick.part.0+0x194>)
 80087e2:	4818      	ldr	r0, [pc, #96]	@ (8008844 <xTaskIncrementTick.part.0+0x198>)
 80087e4:	9301      	str	r3, [sp, #4]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80087e6:	9b01      	ldr	r3, [sp, #4]
                if( xYieldPendings[ 0 ] != pdFALSE )
 80087e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008854 <xTaskIncrementTick.part.0+0x1a8>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80087ea:	681b      	ldr	r3, [r3, #0]
                if( xYieldPendings[ 0 ] != pdFALSE )
 80087ec:	6812      	ldr	r2, [r2, #0]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80087f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                    xSwitchRequired = pdTRUE;
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	bf28      	it	cs
 80087fc:	f04f 0e01 	movcs.w	lr, #1
                    xSwitchRequired = pdTRUE;
 8008800:	2a00      	cmp	r2, #0
}
 8008802:	bf0c      	ite	eq
 8008804:	4670      	moveq	r0, lr
 8008806:	2001      	movne	r0, #1
 8008808:	b005      	add	sp, #20
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4909      	ldr	r1, [pc, #36]	@ (8008838 <xTaskIncrementTick.part.0+0x18c>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	600b      	str	r3, [r1, #0]
    }
}
 8008818:	e752      	b.n	80086c0 <xTaskIncrementTick.part.0+0x14>
            taskSWITCH_DELAYED_LISTS();
 800881a:	f001 f8cb 	bl	80099b4 <ulSetInterruptMask>
 800881e:	e7fe      	b.n	800881e <xTaskIncrementTick.part.0+0x172>
 8008820:	9903      	ldr	r1, [sp, #12]
                    xNextTaskUnblockTime = portMAX_DELAY;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	600b      	str	r3, [r1, #0]
                    break;
 8008828:	e7dd      	b.n	80087e6 <xTaskIncrementTick.part.0+0x13a>
    BaseType_t xSwitchRequired = pdFALSE;
 800882a:	469e      	mov	lr, r3
 800882c:	4b04      	ldr	r3, [pc, #16]	@ (8008840 <xTaskIncrementTick.part.0+0x194>)
 800882e:	4805      	ldr	r0, [pc, #20]	@ (8008844 <xTaskIncrementTick.part.0+0x198>)
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	e7f6      	b.n	8008822 <xTaskIncrementTick.part.0+0x176>
 8008834:	20061a34 	.word	0x20061a34
 8008838:	20061a18 	.word	0x20061a18
 800883c:	20061a80 	.word	0x20061a80
 8008840:	20061f0c 	.word	0x20061f0c
 8008844:	20061aac 	.word	0x20061aac
 8008848:	20061a30 	.word	0x20061a30
 800884c:	20061a7c 	.word	0x20061a7c
 8008850:	20061a20 	.word	0x20061a20
 8008854:	20061a24 	.word	0x20061a24

08008858 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800885c:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 80089c8 <xTaskResumeAll.part.0+0x170>
BaseType_t xTaskResumeAll( void )
 8008860:	b083      	sub	sp, #12
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8008862:	f8d8 3000 	ldr.w	r3, [r8]
 8008866:	3b01      	subs	r3, #1
 8008868:	f8c8 3000 	str.w	r3, [r8]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800886c:	f8d8 e000 	ldr.w	lr, [r8]
 8008870:	f1be 0f00 	cmp.w	lr, #0
 8008874:	f040 8081 	bne.w	800897a <xTaskResumeAll.part.0+0x122>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008878:	4b4c      	ldr	r3, [pc, #304]	@ (80089ac <xTaskResumeAll.part.0+0x154>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d07c      	beq.n	800897a <xTaskResumeAll.part.0+0x122>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008880:	f8df c148 	ldr.w	ip, [pc, #328]	@ 80089cc <xTaskResumeAll.part.0+0x174>
 8008884:	f8dc 3000 	ldr.w	r3, [ip]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 808b 	beq.w	80089a4 <xTaskResumeAll.part.0+0x14c>
 800888e:	4b48      	ldr	r3, [pc, #288]	@ (80089b0 <xTaskResumeAll.part.0+0x158>)
 8008890:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80089d0 <xTaskResumeAll.part.0+0x178>
 8008894:	4e47      	ldr	r6, [pc, #284]	@ (80089b4 <xTaskResumeAll.part.0+0x15c>)
 8008896:	9301      	str	r3, [sp, #4]
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008898:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800889e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088a0:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 80088a4:	6854      	ldr	r4, [r2, #4]
 80088a6:	6081      	str	r1, [r0, #8]
 80088a8:	6048      	str	r0, [r1, #4]
 80088aa:	f103 0018 	add.w	r0, r3, #24
 80088ae:	4284      	cmp	r4, r0
 80088b0:	bf08      	it	eq
 80088b2:	6051      	streq	r1, [r2, #4]
 80088b4:	6811      	ldr	r1, [r2, #0]
 80088b6:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 80088ba:	3901      	subs	r1, #1
 80088bc:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 80088c4:	60a1      	str	r1, [r4, #8]
 80088c6:	604c      	str	r4, [r1, #4]
 80088c8:	6854      	ldr	r4, [r2, #4]
 80088ca:	1d1d      	adds	r5, r3, #4
 80088cc:	42ac      	cmp	r4, r5
 80088ce:	bf08      	it	eq
 80088d0:	6051      	streq	r1, [r2, #4]
 80088d2:	6811      	ldr	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 80088d4:	f8d9 0000 	ldr.w	r0, [r9]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088d8:	3901      	subs	r1, #1
 80088da:	6011      	str	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 80088dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088de:	4282      	cmp	r2, r0
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088e0:	4835      	ldr	r0, [pc, #212]	@ (80089b8 <xTaskResumeAll.part.0+0x160>)
                        prvAddTaskToReadyList( pxTCB );
 80088e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80088e6:	bf88      	it	hi
 80088e8:	f8c9 2000 	strhi.w	r2, [r9]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088ec:	6800      	ldr	r0, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 80088ee:	eb06 0781 	add.w	r7, r6, r1, lsl #2
 80088f2:	687c      	ldr	r4, [r7, #4]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f4:	f8d0 a02c 	ldr.w	sl, [r0, #44]	@ 0x2c
                        prvAddTaskToReadyList( pxTCB );
 80088f8:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 80088fc:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8008900:	3001      	adds	r0, #1
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008902:	4552      	cmp	r2, sl
                        prvAddTaskToReadyList( pxTCB );
 8008904:	609c      	str	r4, [r3, #8]
 8008906:	f8c3 b00c 	str.w	fp, [r3, #12]
 800890a:	f8cb 5004 	str.w	r5, [fp, #4]
 800890e:	60a5      	str	r5, [r4, #8]
 8008910:	615f      	str	r7, [r3, #20]
 8008912:	f846 0021 	str.w	r0, [r6, r1, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008916:	d937      	bls.n	8008988 <xTaskResumeAll.part.0+0x130>
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8008918:	2201      	movs	r2, #1
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	601a      	str	r2, [r3, #0]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800891e:	f8dc 3000 	ldr.w	r3, [ip]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1b8      	bne.n	8008898 <xTaskResumeAll.part.0+0x40>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008926:	4b25      	ldr	r3, [pc, #148]	@ (80089bc <xTaskResumeAll.part.0+0x164>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	2a00      	cmp	r2, #0
 800892e:	d034      	beq.n	800899a <xTaskResumeAll.part.0+0x142>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	4b23      	ldr	r3, [pc, #140]	@ (80089c0 <xTaskResumeAll.part.0+0x168>)
 8008934:	68d2      	ldr	r2, [r2, #12]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	601a      	str	r2, [r3, #0]
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800893a:	4d22      	ldr	r5, [pc, #136]	@ (80089c4 <xTaskResumeAll.part.0+0x16c>)
 800893c:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 800893e:	b19c      	cbz	r4, 8008968 <xTaskResumeAll.part.0+0x110>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8008940:	2601      	movs	r6, #1
 8008942:	9f01      	ldr	r7, [sp, #4]
 8008944:	e005      	b.n	8008952 <xTaskResumeAll.part.0+0xfa>
 8008946:	f7ff feb1 	bl	80086ac <xTaskIncrementTick.part.0>
                                if( xTaskIncrementTick() != pdFALSE )
 800894a:	b100      	cbz	r0, 800894e <xTaskResumeAll.part.0+0xf6>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800894c:	603e      	str	r6, [r7, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800894e:	3c01      	subs	r4, #1
 8008950:	d009      	beq.n	8008966 <xTaskResumeAll.part.0+0x10e>
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008952:	f8d8 3000 	ldr.w	r3, [r8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f5      	beq.n	8008946 <xTaskResumeAll.part.0+0xee>
        xPendedTicks += 1U;
 800895a:	682b      	ldr	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800895c:	3c01      	subs	r4, #1
        xPendedTicks += 1U;
 800895e:	f103 0301 	add.w	r3, r3, #1
 8008962:	602b      	str	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8008964:	d1f5      	bne.n	8008952 <xTaskResumeAll.part.0+0xfa>
                            xPendedTicks = 0;
 8008966:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	b12b      	cbz	r3, 800897a <xTaskResumeAll.part.0+0x122>
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800896e:	4b12      	ldr	r3, [pc, #72]	@ (80089b8 <xTaskResumeAll.part.0+0x160>)
                            xAlreadyYielded = pdTRUE;
 8008970:	2401      	movs	r4, #1
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f000 fee0 	bl	8009738 <vPortYield>
 8008978:	e000      	b.n	800897c <xTaskResumeAll.part.0+0x124>
    BaseType_t xAlreadyYielded = pdFALSE;
 800897a:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
 800897c:	f000 fef6 	bl	800976c <vPortExitCritical>
}
 8008980:	4620      	mov	r0, r4
 8008982:	b003      	add	sp, #12
 8008984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008988:	f8dc 3000 	ldr.w	r3, [ip]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d183      	bne.n	8008898 <xTaskResumeAll.part.0+0x40>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008990:	4b0a      	ldr	r3, [pc, #40]	@ (80089bc <xTaskResumeAll.part.0+0x164>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	2a00      	cmp	r2, #0
 8008998:	d1ca      	bne.n	8008930 <xTaskResumeAll.part.0+0xd8>
        xNextTaskUnblockTime = portMAX_DELAY;
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	4b08      	ldr	r3, [pc, #32]	@ (80089c0 <xTaskResumeAll.part.0+0x168>)
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e7ca      	b.n	800893a <xTaskResumeAll.part.0+0xe2>
 80089a4:	4b02      	ldr	r3, [pc, #8]	@ (80089b0 <xTaskResumeAll.part.0+0x158>)
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	e7c7      	b.n	800893a <xTaskResumeAll.part.0+0xe2>
 80089aa:	bf00      	nop
 80089ac:	20061a38 	.word	0x20061a38
 80089b0:	20061a24 	.word	0x20061a24
 80089b4:	20061aac 	.word	0x20061aac
 80089b8:	20061f0c 	.word	0x20061f0c
 80089bc:	20061a80 	.word	0x20061a80
 80089c0:	20061a18 	.word	0x20061a18
 80089c4:	20061a28 	.word	0x20061a28
 80089c8:	20061a10 	.word	0x20061a10
 80089cc:	20061a68 	.word	0x20061a68
 80089d0:	20061a30 	.word	0x20061a30

080089d4 <xTaskCreate>:
    {
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80089d8:	0096      	lsls	r6, r2, #2
    {
 80089da:	4680      	mov	r8, r0
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80089dc:	4630      	mov	r0, r6
    {
 80089de:	460d      	mov	r5, r1
 80089e0:	4699      	mov	r9, r3
 80089e2:	f8dd a020 	ldr.w	sl, [sp, #32]
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80089e6:	f001 f833 	bl	8009a50 <pvPortMalloc>
            if( pxStack != NULL )
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f000 808d 	beq.w	8008b0a <xTaskCreate+0x136>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80089f0:	4607      	mov	r7, r0
 80089f2:	20a8      	movs	r0, #168	@ 0xa8
 80089f4:	f001 f82c 	bl	8009a50 <pvPortMalloc>
                if( pxNewTCB != NULL )
 80089f8:	4604      	mov	r4, r0
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f000 8082 	beq.w	8008b04 <xTaskCreate+0x130>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008a00:	22a8      	movs	r2, #168	@ 0xa8
 8008a02:	2100      	movs	r1, #0
 8008a04:	f004 fe17 	bl	800d636 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008a08:	4638      	mov	r0, r7
                    pxNewTCB->pxStack = pxStack;
 8008a0a:	6327      	str	r7, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008a0c:	21a5      	movs	r1, #165	@ 0xa5
 8008a0e:	4632      	mov	r2, r6
 8008a10:	f004 fe11 	bl	800d636 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008a14:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    if( pcName != NULL )
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	d03e      	beq.n	8008a98 <xTaskCreate+0xc4>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a1a:	782b      	ldrb	r3, [r5, #0]
 8008a1c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
            if( pcName[ x ] == ( char ) 0x00 )
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d036      	beq.n	8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a24:	786b      	ldrb	r3, [r5, #1]
 8008a26:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            if( pcName[ x ] == ( char ) 0x00 )
 8008a2a:	b393      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a2c:	78ab      	ldrb	r3, [r5, #2]
 8008a2e:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
            if( pcName[ x ] == ( char ) 0x00 )
 8008a32:	b373      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a34:	78eb      	ldrb	r3, [r5, #3]
 8008a36:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
            if( pcName[ x ] == ( char ) 0x00 )
 8008a3a:	b353      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a3c:	792b      	ldrb	r3, [r5, #4]
 8008a3e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            if( pcName[ x ] == ( char ) 0x00 )
 8008a42:	b333      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a44:	796b      	ldrb	r3, [r5, #5]
 8008a46:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
            if( pcName[ x ] == ( char ) 0x00 )
 8008a4a:	b313      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a4c:	79ab      	ldrb	r3, [r5, #6]
 8008a4e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
            if( pcName[ x ] == ( char ) 0x00 )
 8008a52:	b1f3      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a54:	79eb      	ldrb	r3, [r5, #7]
 8008a56:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
            if( pcName[ x ] == ( char ) 0x00 )
 8008a5a:	b1d3      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a5c:	7a2b      	ldrb	r3, [r5, #8]
 8008a5e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
            if( pcName[ x ] == ( char ) 0x00 )
 8008a62:	b1b3      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a64:	7a6b      	ldrb	r3, [r5, #9]
 8008a66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            if( pcName[ x ] == ( char ) 0x00 )
 8008a6a:	b193      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a6c:	7aab      	ldrb	r3, [r5, #10]
 8008a6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            if( pcName[ x ] == ( char ) 0x00 )
 8008a72:	b173      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a74:	7aeb      	ldrb	r3, [r5, #11]
 8008a76:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
            if( pcName[ x ] == ( char ) 0x00 )
 8008a7a:	b153      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a7c:	7b2b      	ldrb	r3, [r5, #12]
 8008a7e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            if( pcName[ x ] == ( char ) 0x00 )
 8008a82:	b133      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a84:	7b6b      	ldrb	r3, [r5, #13]
 8008a86:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
            if( pcName[ x ] == ( char ) 0x00 )
 8008a8a:	b113      	cbz	r3, 8008a92 <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a8c:	7bab      	ldrb	r3, [r5, #14]
 8008a8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008a92:	2300      	movs	r3, #0
 8008a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008a98:	f1ba 0f37 	cmp.w	sl, #55	@ 0x37
 8008a9c:	d82f      	bhi.n	8008afe <xTaskCreate+0x12a>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a9e:	1d20      	adds	r0, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 8008aa0:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8008aa4:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aa8:	f7fe fed8 	bl	800785c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008aac:	f104 0018 	add.w	r0, r4, #24
 8008ab0:	f7fe fed4 	bl	800785c <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008ab4:	f1ca 0338 	rsb	r3, sl, #56	@ 0x38
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ab8:	224c      	movs	r2, #76	@ 0x4c
 8008aba:	2100      	movs	r1, #0
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008abc:	61a3      	str	r3, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008abe:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ac0:	6264      	str	r4, [r4, #36]	@ 0x24
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ac2:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008ac6:	f004 fdb6 	bl	800d636 <memset>
 8008aca:	4912      	ldr	r1, [pc, #72]	@ (8008b14 <xTaskCreate+0x140>)
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008acc:	3e04      	subs	r6, #4
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ace:	f101 0368 	add.w	r3, r1, #104	@ 0x68
 8008ad2:	65a1      	str	r1, [r4, #88]	@ 0x58
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008ad4:	19b8      	adds	r0, r7, r6
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ad6:	31d0      	adds	r1, #208	@ 0xd0
 8008ad8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8008ada:	6621      	str	r1, [r4, #96]	@ 0x60
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008adc:	464b      	mov	r3, r9
 8008ade:	4642      	mov	r2, r8
 8008ae0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008ae2:	f020 0007 	bic.w	r0, r0, #7
 8008ae6:	f000 fe83 	bl	80097f0 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8008aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008aec:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8008aee:	b103      	cbz	r3, 8008af2 <xTaskCreate+0x11e>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008af0:	601c      	str	r4, [r3, #0]
            prvAddNewTaskToReadyList( pxNewTCB );
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7ff fcc6 	bl	8008484 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008af8:	2001      	movs	r0, #1
    }
 8008afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008afe:	f000 ff59 	bl	80099b4 <ulSetInterruptMask>
 8008b02:	e7fe      	b.n	8008b02 <xTaskCreate+0x12e>
                    vPortFreeStack( pxStack );
 8008b04:	4638      	mov	r0, r7
 8008b06:	f001 f857 	bl	8009bb8 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8008b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b12:	bf00      	nop
 8008b14:	2007af78 	.word	0x2007af78

08008b18 <vTaskDelete>:
    {
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	4604      	mov	r4, r0
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008b1c:	4e2a      	ldr	r6, [pc, #168]	@ (8008bc8 <vTaskDelete+0xb0>)
        taskENTER_CRITICAL();
 8008b1e:	f000 fe17 	bl	8009750 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008b22:	2c00      	cmp	r4, #0
 8008b24:	d043      	beq.n	8008bae <vTaskDelete+0x96>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b26:	1d27      	adds	r7, r4, #4
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7fe fec1 	bl	80078b0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b30:	b11b      	cbz	r3, 8008b3a <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b32:	f104 0018 	add.w	r0, r4, #24
 8008b36:	f7fe febb 	bl	80078b0 <uxListRemove>
            uxTaskNumber++;
 8008b3a:	4a24      	ldr	r2, [pc, #144]	@ (8008bcc <vTaskDelete+0xb4>)
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008b3c:	4d24      	ldr	r5, [pc, #144]	@ (8008bd0 <vTaskDelete+0xb8>)
            uxTaskNumber++;
 8008b3e:	6813      	ldr	r3, [r2, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	6013      	str	r3, [r2, #0]
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008b44:	6833      	ldr	r3, [r6, #0]
 8008b46:	42a3      	cmp	r3, r4
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008b48:	682b      	ldr	r3, [r5, #0]
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008b4a:	d023      	beq.n	8008b94 <vTaskDelete+0x7c>
                --uxCurrentNumberOfTasks;
 8008b4c:	4a21      	ldr	r2, [pc, #132]	@ (8008bd4 <vTaskDelete+0xbc>)
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	6013      	str	r3, [r2, #0]
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b54:	4b20      	ldr	r3, [pc, #128]	@ (8008bd8 <vTaskDelete+0xc0>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	b1b2      	cbz	r2, 8008b8a <vTaskDelete+0x72>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8008bdc <vTaskDelete+0xc4>)
 8008b60:	68d2      	ldr	r2, [r2, #12]
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	601a      	str	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8008b66:	f000 fe01 	bl	800976c <vPortExitCritical>
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 8008b6a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008b6e:	f004 fd7f 	bl	800d670 <_reclaim_reent>
            vPortFreeStack( pxTCB->pxStack );
 8008b72:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008b74:	f001 f820 	bl	8009bb8 <vPortFree>
            vPortFree( pxTCB );
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f001 f81d 	bl	8009bb8 <vPortFree>
            if( xSchedulerRunning != pdFALSE )
 8008b7e:	682b      	ldr	r3, [r5, #0]
 8008b80:	b113      	cbz	r3, 8008b88 <vTaskDelete+0x70>
                if( pxTCB == pxCurrentTCB )
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	d014      	beq.n	8008bb2 <vTaskDelete+0x9a>
    }
 8008b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
 8008b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8e:	4b13      	ldr	r3, [pc, #76]	@ (8008bdc <vTaskDelete+0xc4>)
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	e7e8      	b.n	8008b66 <vTaskDelete+0x4e>
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0d9      	beq.n	8008b4c <vTaskDelete+0x34>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4811      	ldr	r0, [pc, #68]	@ (8008be0 <vTaskDelete+0xc8>)
 8008b9c:	f7fe fe62 	bl	8007864 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8008ba0:	4a10      	ldr	r2, [pc, #64]	@ (8008be4 <vTaskDelete+0xcc>)
 8008ba2:	6813      	ldr	r3, [r2, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8008ba8:	f000 fde0 	bl	800976c <vPortExitCritical>
        if( xDeleteTCBInIdleTask != pdTRUE )
 8008bac:	e7e7      	b.n	8008b7e <vTaskDelete+0x66>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008bae:	6834      	ldr	r4, [r6, #0]
 8008bb0:	e7b9      	b.n	8008b26 <vTaskDelete+0xe>
                    configASSERT( uxSchedulerSuspended == 0 );
 8008bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008be8 <vTaskDelete+0xd0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	b113      	cbz	r3, 8008bbe <vTaskDelete+0xa6>
 8008bb8:	f000 fefc 	bl	80099b4 <ulSetInterruptMask>
 8008bbc:	e7fe      	b.n	8008bbc <vTaskDelete+0xa4>
    }
 8008bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    taskYIELD_WITHIN_API();
 8008bc2:	f000 bdb9 	b.w	8009738 <vPortYield>
 8008bc6:	bf00      	nop
 8008bc8:	20061f0c 	.word	0x20061f0c
 8008bcc:	20061a1c 	.word	0x20061a1c
 8008bd0:	20061a2c 	.word	0x20061a2c
 8008bd4:	20061a38 	.word	0x20061a38
 8008bd8:	20061a80 	.word	0x20061a80
 8008bdc:	20061a18 	.word	0x20061a18
 8008be0:	20061a54 	.word	0x20061a54
 8008be4:	20061a50 	.word	0x20061a50
 8008be8:	20061a10 	.word	0x20061a10

08008bec <xTaskDelayUntil>:
    {
 8008bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        configASSERT( pxPreviousWakeTime );
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d041      	beq.n	8008c78 <xTaskDelayUntil+0x8c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d038      	beq.n	8008c6a <xTaskDelayUntil+0x7e>
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008bf8:	4d2a      	ldr	r5, [pc, #168]	@ (8008ca4 <xTaskDelayUntil+0xb8>)
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	602b      	str	r3, [r5, #0]
            const TickType_t xConstTickCount = xTickCount;
 8008c00:	4e29      	ldr	r6, [pc, #164]	@ (8008ca8 <xTaskDelayUntil+0xbc>)
 8008c02:	6832      	ldr	r2, [r6, #0]
            configASSERT( uxSchedulerSuspended == 1U );
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d12c      	bne.n	8008c64 <xTaskDelayUntil+0x78>
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008c0a:	6803      	ldr	r3, [r0, #0]
 8008c0c:	185c      	adds	r4, r3, r1
 8008c0e:	bf2c      	ite	cs
 8008c10:	2101      	movcs	r1, #1
 8008c12:	2100      	movcc	r1, #0
            if( xConstTickCount < *pxPreviousWakeTime )
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d82b      	bhi.n	8008c70 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008c18:	b389      	cbz	r1, 8008c7e <xTaskDelayUntil+0x92>
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008c1a:	4b24      	ldr	r3, [pc, #144]	@ (8008cac <xTaskDelayUntil+0xc0>)
    const TickType_t xConstTickCount = xTickCount;
 8008c1c:	f8d6 8000 	ldr.w	r8, [r6]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c20:	4f23      	ldr	r7, [pc, #140]	@ (8008cb0 <xTaskDelayUntil+0xc4>)
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008c22:	f8d3 9000 	ldr.w	r9, [r3]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008c26:	4b23      	ldr	r3, [pc, #140]	@ (8008cb4 <xTaskDelayUntil+0xc8>)
            *pxPreviousWakeTime = xTimeToWake;
 8008c28:	6004      	str	r4, [r0, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008c2a:	f8d3 a000 	ldr.w	sl, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2e:	6838      	ldr	r0, [r7, #0]
 8008c30:	eba8 0602 	sub.w	r6, r8, r2
 8008c34:	3004      	adds	r0, #4
 8008c36:	f7fe fe3b 	bl	80078b0 <uxListRemove>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008c3a:	4434      	add	r4, r6

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c3c:	683b      	ldr	r3, [r7, #0]

            if( xTimeToWake < xConstTickCount )
 8008c3e:	45a0      	cmp	r8, r4
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008c40:	6839      	ldr	r1, [r7, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c42:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008c44:	d921      	bls.n	8008c8a <xTaskDelayUntil+0x9e>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008c46:	4650      	mov	r0, sl
 8008c48:	3104      	adds	r1, #4
 8008c4a:	f7fe fe19 	bl	8007880 <vListInsert>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008c4e:	2601      	movs	r6, #1
        taskENTER_CRITICAL();
 8008c50:	f000 fd7e 	bl	8009750 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b1ab      	cbz	r3, 8008c84 <xTaskDelayUntil+0x98>
 8008c58:	f7ff fdfe 	bl	8008858 <xTaskResumeAll.part.0>
        if( xAlreadyYielded == pdFALSE )
 8008c5c:	b1f8      	cbz	r0, 8008c9e <xTaskDelayUntil+0xb2>
    }
 8008c5e:	4630      	mov	r0, r6
 8008c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            configASSERT( uxSchedulerSuspended == 1U );
 8008c64:	f000 fea6 	bl	80099b4 <ulSetInterruptMask>
 8008c68:	e7fe      	b.n	8008c68 <xTaskDelayUntil+0x7c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8008c6a:	f000 fea3 	bl	80099b4 <ulSetInterruptMask>
 8008c6e:	e7fe      	b.n	8008c6e <xTaskDelayUntil+0x82>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008c70:	b929      	cbnz	r1, 8008c7e <xTaskDelayUntil+0x92>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008c72:	2600      	movs	r6, #0
            *pxPreviousWakeTime = xTimeToWake;
 8008c74:	6004      	str	r4, [r0, #0]
 8008c76:	e7eb      	b.n	8008c50 <xTaskDelayUntil+0x64>
        configASSERT( pxPreviousWakeTime );
 8008c78:	f000 fe9c 	bl	80099b4 <ulSetInterruptMask>
 8008c7c:	e7fe      	b.n	8008c7c <xTaskDelayUntil+0x90>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008c7e:	42a2      	cmp	r2, r4
 8008c80:	d3cb      	bcc.n	8008c1a <xTaskDelayUntil+0x2e>
 8008c82:	e7f6      	b.n	8008c72 <xTaskDelayUntil+0x86>
            configASSERT( uxSchedulerSuspended != 0U );
 8008c84:	f000 fe96 	bl	80099b4 <ulSetInterruptMask>
 8008c88:	e7fe      	b.n	8008c88 <xTaskDelayUntil+0x9c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008c8a:	4648      	mov	r0, r9
 8008c8c:	3104      	adds	r1, #4
 8008c8e:	f7fe fdf7 	bl	8007880 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 8008c92:	4b09      	ldr	r3, [pc, #36]	@ (8008cb8 <xTaskDelayUntil+0xcc>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4294      	cmp	r4, r2
 8008c98:	d2d9      	bcs.n	8008c4e <xTaskDelayUntil+0x62>
                {
                    xNextTaskUnblockTime = xTimeToWake;
 8008c9a:	601c      	str	r4, [r3, #0]
 8008c9c:	e7d7      	b.n	8008c4e <xTaskDelayUntil+0x62>
            taskYIELD_WITHIN_API();
 8008c9e:	f000 fd4b 	bl	8009738 <vPortYield>
        return xShouldDelay;
 8008ca2:	e7dc      	b.n	8008c5e <xTaskDelayUntil+0x72>
 8008ca4:	20061a10 	.word	0x20061a10
 8008ca8:	20061a34 	.word	0x20061a34
 8008cac:	20061a80 	.word	0x20061a80
 8008cb0:	20061f0c 	.word	0x20061f0c
 8008cb4:	20061a7c 	.word	0x20061a7c
 8008cb8:	20061a18 	.word	0x20061a18

08008cbc <vTaskStartScheduler>:
{
 8008cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008cc0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008cc4:	f000 fec4 	bl	8009a50 <pvPortMalloc>
            if( pxStack != NULL )
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d056      	beq.n	8008d7a <vTaskStartScheduler+0xbe>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008ccc:	4606      	mov	r6, r0
 8008cce:	20a8      	movs	r0, #168	@ 0xa8
 8008cd0:	f000 febe 	bl	8009a50 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d04c      	beq.n	8008d74 <vTaskStartScheduler+0xb8>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008cda:	2500      	movs	r5, #0
 8008cdc:	22a8      	movs	r2, #168	@ 0xa8
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 8008dcc <vTaskStartScheduler+0x110>
 8008ce4:	f004 fca7 	bl	800d636 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cec:	21a5      	movs	r1, #165	@ 0xa5
 8008cee:	4630      	mov	r0, r6
                    pxNewTCB->pxStack = pxStack;
 8008cf0:	6326      	str	r6, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008cf2:	f004 fca0 	bl	800d636 <memset>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cf6:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008cfa:	f884 5043 	strb.w	r5, [r4, #67]	@ 0x43
    pxNewTCB->uxPriority = uxPriority;
 8008cfe:	62e5      	str	r5, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8008d00:	64e5      	str	r5, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d02:	1d20      	adds	r0, r4, #4
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d04:	f8c4 9034 	str.w	r9, [r4, #52]	@ 0x34
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008d08:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d0a:	f7fe fda7 	bl	800785c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d0e:	f104 0018 	add.w	r0, r4, #24
 8008d12:	f7fe fda3 	bl	800785c <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008d16:	2338      	movs	r3, #56	@ 0x38
 8008d18:	4f23      	ldr	r7, [pc, #140]	@ (8008da8 <vTaskStartScheduler+0xec>)
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	224c      	movs	r2, #76	@ 0x4c
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008d1e:	61a3      	str	r3, [r4, #24]
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008d20:	f506 76fe 	add.w	r6, r6, #508	@ 0x1fc
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d24:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d26:	6264      	str	r4, [r4, #36]	@ 0x24
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d28:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008d2c:	f004 fc83 	bl	800d636 <memset>
 8008d30:	f107 0868 	add.w	r8, r7, #104	@ 0x68
 8008d34:	f107 0cd0 	add.w	ip, r7, #208	@ 0xd0
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008d38:	f026 0607 	bic.w	r6, r6, #7
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d40:	f8c4 c060 	str.w	ip, [r4, #96]	@ 0x60
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d44:	4a19      	ldr	r2, [pc, #100]	@ (8008dac <vTaskStartScheduler+0xf0>)
 8008d46:	4630      	mov	r0, r6
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d48:	e9c4 7816 	strd	r7, r8, [r4, #88]	@ 0x58
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d4c:	f000 fd50 	bl	80097f0 <pxPortInitialiseStack>
 8008d50:	4602      	mov	r2, r0
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d52:	4b17      	ldr	r3, [pc, #92]	@ (8008db0 <vTaskStartScheduler+0xf4>)
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d54:	6022      	str	r2, [r4, #0]
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d56:	4620      	mov	r0, r4
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d58:	601c      	str	r4, [r3, #0]
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8008d5a:	2501      	movs	r5, #1
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d5c:	f7ff fb92 	bl	8008484 <prvAddNewTaskToReadyList>
            xReturn = xTimerCreateTimerTask();
 8008d60:	f000 fc76 	bl	8009650 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8008d64:	42a8      	cmp	r0, r5
 8008d66:	d00b      	beq.n	8008d80 <vTaskStartScheduler+0xc4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d006      	beq.n	8008d7a <vTaskStartScheduler+0xbe>
    ( void ) uxTopUsedPriority;
 8008d6c:	4b11      	ldr	r3, [pc, #68]	@ (8008db4 <vTaskStartScheduler+0xf8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
}
 8008d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 8008d74:	4630      	mov	r0, r6
 8008d76:	f000 ff1f 	bl	8009bb8 <vPortFree>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d7a:	f000 fe1b 	bl	80099b4 <ulSetInterruptMask>
 8008d7e:	e7fe      	b.n	8008d7e <vTaskStartScheduler+0xc2>
        portDISABLE_INTERRUPTS();
 8008d80:	f000 fe18 	bl	80099b4 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 8008d84:	f04f 34ff 	mov.w	r4, #4294967295
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d88:	2200      	movs	r2, #0
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008db8 <vTaskStartScheduler+0xfc>)
 8008d8c:	490b      	ldr	r1, [pc, #44]	@ (8008dbc <vTaskStartScheduler+0x100>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8008d90:	480b      	ldr	r0, [pc, #44]	@ (8008dc0 <vTaskStartScheduler+0x104>)
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008d92:	3354      	adds	r3, #84	@ 0x54
 8008d94:	600b      	str	r3, [r1, #0]
        xSchedulerRunning = pdTRUE;
 8008d96:	490b      	ldr	r1, [pc, #44]	@ (8008dc4 <vTaskStartScheduler+0x108>)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d98:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc8 <vTaskStartScheduler+0x10c>)
        xNextTaskUnblockTime = portMAX_DELAY;
 8008d9a:	6004      	str	r4, [r0, #0]
        xSchedulerRunning = pdTRUE;
 8008d9c:	600d      	str	r5, [r1, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d9e:	601a      	str	r2, [r3, #0]
        ( void ) xPortStartScheduler();
 8008da0:	f000 fd62 	bl	8009868 <xPortStartScheduler>
 8008da4:	e7e2      	b.n	8008d6c <vTaskStartScheduler+0xb0>
 8008da6:	bf00      	nop
 8008da8:	2007af78 	.word	0x2007af78
 8008dac:	08008649 	.word	0x08008649
 8008db0:	20061a14 	.word	0x20061a14
 8008db4:	0801e668 	.word	0x0801e668
 8008db8:	20061f0c 	.word	0x20061f0c
 8008dbc:	20000f88 	.word	0x20000f88
 8008dc0:	20061a18 	.word	0x20061a18
 8008dc4:	20061a2c 	.word	0x20061a2c
 8008dc8:	20061a34 	.word	0x20061a34
 8008dcc:	454c4449 	.word	0x454c4449

08008dd0 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008dd0:	4a02      	ldr	r2, [pc, #8]	@ (8008ddc <vTaskSuspendAll+0xc>)
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	6013      	str	r3, [r2, #0]
}
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20061a10 	.word	0x20061a10

08008de0 <xTaskResumeAll>:
{
 8008de0:	b508      	push	{r3, lr}
        taskENTER_CRITICAL();
 8008de2:	f000 fcb5 	bl	8009750 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8008de6:	4b05      	ldr	r3, [pc, #20]	@ (8008dfc <xTaskResumeAll+0x1c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	b11b      	cbz	r3, 8008df4 <xTaskResumeAll+0x14>
}
 8008dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008df0:	f7ff bd32 	b.w	8008858 <xTaskResumeAll.part.0>
            configASSERT( uxSchedulerSuspended != 0U );
 8008df4:	f000 fdde 	bl	80099b4 <ulSetInterruptMask>
 8008df8:	e7fe      	b.n	8008df8 <xTaskResumeAll+0x18>
 8008dfa:	bf00      	nop
 8008dfc:	20061a10 	.word	0x20061a10

08008e00 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8008e00:	4b01      	ldr	r3, [pc, #4]	@ (8008e08 <xTaskGetTickCount+0x8>)
 8008e02:	6818      	ldr	r0, [r3, #0]
}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20061a34 	.word	0x20061a34

08008e0c <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <xTaskIncrementTick+0x18>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	b90b      	cbnz	r3, 8008e16 <xTaskIncrementTick+0xa>
 8008e12:	f7ff bc4b 	b.w	80086ac <xTaskIncrementTick.part.0>
        xPendedTicks += 1U;
 8008e16:	4a04      	ldr	r2, [pc, #16]	@ (8008e28 <xTaskIncrementTick+0x1c>)
}
 8008e18:	2000      	movs	r0, #0
        xPendedTicks += 1U;
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	6013      	str	r3, [r2, #0]
}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20061a10 	.word	0x20061a10
 8008e28:	20061a28 	.word	0x20061a28

08008e2c <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8008e2c:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <vTaskSwitchContext+0x14>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	b11b      	cbz	r3, 8008e3a <vTaskSwitchContext+0xe>
            xYieldPendings[ 0 ] = pdTRUE;
 8008e32:	2201      	movs	r2, #1
 8008e34:	4b03      	ldr	r3, [pc, #12]	@ (8008e44 <vTaskSwitchContext+0x18>)
 8008e36:	601a      	str	r2, [r3, #0]
    }
 8008e38:	4770      	bx	lr
 8008e3a:	f7ff bbb1 	b.w	80085a0 <vTaskSwitchContext.part.0>
 8008e3e:	bf00      	nop
 8008e40:	20061a10 	.word	0x20061a10
 8008e44:	20061a24 	.word	0x20061a24

08008e48 <vTaskPlaceOnEventList>:
{
 8008e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( pxEventList );
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d031      	beq.n	8008eb4 <vTaskPlaceOnEventList+0x6c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e50:	460c      	mov	r4, r1
 8008e52:	4d1f      	ldr	r5, [pc, #124]	@ (8008ed0 <vTaskPlaceOnEventList+0x88>)
 8008e54:	6829      	ldr	r1, [r5, #0]
 8008e56:	3118      	adds	r1, #24
 8008e58:	f7fe fd12 	bl	8007880 <vListInsert>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <vTaskPlaceOnEventList+0x8c>)
    const TickType_t xConstTickCount = xTickCount;
 8008e5e:	491e      	ldr	r1, [pc, #120]	@ (8008ed8 <vTaskPlaceOnEventList+0x90>)
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008e60:	4a1e      	ldr	r2, [pc, #120]	@ (8008edc <vTaskPlaceOnEventList+0x94>)
    const TickType_t xConstTickCount = xTickCount;
 8008e62:	680e      	ldr	r6, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008e64:	6817      	ldr	r7, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008e66:	f8d3 8000 	ldr.w	r8, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e6a:	6828      	ldr	r0, [r5, #0]
 8008e6c:	3004      	adds	r0, #4
 8008e6e:	f7fe fd1f 	bl	80078b0 <uxListRemove>
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e72:	1c63      	adds	r3, r4, #1
 8008e74:	d00a      	beq.n	8008e8c <vTaskPlaceOnEventList+0x44>
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	19a4      	adds	r4, r4, r6
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e7a:	6829      	ldr	r1, [r5, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e7c:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008e7e:	d31c      	bcc.n	8008eba <vTaskPlaceOnEventList+0x72>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e80:	4640      	mov	r0, r8
}
 8008e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e86:	3104      	adds	r1, #4
 8008e88:	f7fe bcfa 	b.w	8007880 <vListInsert>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e8c:	4b14      	ldr	r3, [pc, #80]	@ (8008ee0 <vTaskPlaceOnEventList+0x98>)
 8008e8e:	6829      	ldr	r1, [r5, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	681c      	ldr	r4, [r3, #0]
 8008e94:	608a      	str	r2, [r1, #8]
 8008e96:	682e      	ldr	r6, [r5, #0]
 8008e98:	3401      	adds	r4, #1
 8008e9a:	6828      	ldr	r0, [r5, #0]
 8008e9c:	6829      	ldr	r1, [r5, #0]
 8008e9e:	601c      	str	r4, [r3, #0]
 8008ea0:	682d      	ldr	r5, [r5, #0]
 8008ea2:	6894      	ldr	r4, [r2, #8]
 8008ea4:	3004      	adds	r0, #4
 8008ea6:	3104      	adds	r1, #4
 8008ea8:	60f4      	str	r4, [r6, #12]
 8008eaa:	6060      	str	r0, [r4, #4]
 8008eac:	6091      	str	r1, [r2, #8]
 8008eae:	616b      	str	r3, [r5, #20]
}
 8008eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( pxEventList );
 8008eb4:	f000 fd7e 	bl	80099b4 <ulSetInterruptMask>
 8008eb8:	e7fe      	b.n	8008eb8 <vTaskPlaceOnEventList+0x70>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008eba:	4638      	mov	r0, r7
 8008ebc:	3104      	adds	r1, #4
 8008ebe:	f7fe fcdf 	bl	8007880 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008ec2:	4b08      	ldr	r3, [pc, #32]	@ (8008ee4 <vTaskPlaceOnEventList+0x9c>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4294      	cmp	r4, r2
                    xNextTaskUnblockTime = xTimeToWake;
 8008ec8:	bf38      	it	cc
 8008eca:	601c      	strcc	r4, [r3, #0]
}
 8008ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed0:	20061f0c 	.word	0x20061f0c
 8008ed4:	20061a7c 	.word	0x20061a7c
 8008ed8:	20061a34 	.word	0x20061a34
 8008edc:	20061a80 	.word	0x20061a80
 8008ee0:	20061a3c 	.word	0x20061a3c
 8008ee4:	20061a18 	.word	0x20061a18

08008ee8 <vTaskPlaceOnEventListRestricted>:
    {
 8008ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        configASSERT( pxEventList );
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d054      	beq.n	8008f9a <vTaskPlaceOnEventListRestricted+0xb2>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ef0:	4694      	mov	ip, r2
 8008ef2:	4c2b      	ldr	r4, [pc, #172]	@ (8008fa0 <vTaskPlaceOnEventListRestricted+0xb8>)
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	6841      	ldr	r1, [r0, #4]
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	f8d4 e000 	ldr.w	lr, [r4]
 8008efe:	6827      	ldr	r7, [r4, #0]
 8008f00:	688a      	ldr	r2, [r1, #8]
 8008f02:	61d9      	str	r1, [r3, #28]
 8008f04:	6826      	ldr	r6, [r4, #0]
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	3718      	adds	r7, #24
 8008f0a:	f8ce 2020 	str.w	r2, [lr, #32]
 8008f0e:	6057      	str	r7, [r2, #4]
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	3301      	adds	r3, #1
 8008f14:	3618      	adds	r6, #24
 8008f16:	608e      	str	r6, [r1, #8]
 8008f18:	6290      	str	r0, [r2, #40]	@ 0x28
    const TickType_t xConstTickCount = xTickCount;
 8008f1a:	4922      	ldr	r1, [pc, #136]	@ (8008fa4 <vTaskPlaceOnEventListRestricted+0xbc>)
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f1c:	6003      	str	r3, [r0, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008f1e:	4a22      	ldr	r2, [pc, #136]	@ (8008fa8 <vTaskPlaceOnEventListRestricted+0xc0>)
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008f20:	4b22      	ldr	r3, [pc, #136]	@ (8008fac <vTaskPlaceOnEventListRestricted+0xc4>)
        if( xWaitIndefinitely != pdFALSE )
 8008f22:	f1bc 0f00 	cmp.w	ip, #0
 8008f26:	d01a      	beq.n	8008f5e <vTaskPlaceOnEventListRestricted+0x76>
    const TickType_t xConstTickCount = xTickCount;
 8008f28:	6809      	ldr	r1, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008f2a:	6812      	ldr	r2, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008f2c:	681b      	ldr	r3, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f2e:	6820      	ldr	r0, [r4, #0]
 8008f30:	3004      	adds	r0, #4
 8008f32:	f7fe fcbd 	bl	80078b0 <uxListRemove>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f36:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb0 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008f38:	6819      	ldr	r1, [r3, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	3101      	adds	r1, #1
 8008f3e:	6019      	str	r1, [r3, #0]
 8008f40:	6821      	ldr	r1, [r4, #0]
 8008f42:	6890      	ldr	r0, [r2, #8]
 8008f44:	608a      	str	r2, [r1, #8]
 8008f46:	6821      	ldr	r1, [r4, #0]
 8008f48:	60c8      	str	r0, [r1, #12]
 8008f4a:	6821      	ldr	r1, [r4, #0]
 8008f4c:	3104      	adds	r1, #4
 8008f4e:	6041      	str	r1, [r0, #4]
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	3104      	adds	r1, #4
 8008f56:	6091      	str	r1, [r2, #8]
 8008f58:	6143      	str	r3, [r0, #20]
    }
 8008f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const TickType_t xConstTickCount = xTickCount;
 8008f5e:	680e      	ldr	r6, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008f60:	6817      	ldr	r7, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008f62:	f8d3 8000 	ldr.w	r8, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f66:	6820      	ldr	r0, [r4, #0]
 8008f68:	3004      	adds	r0, #4
 8008f6a:	f7fe fca1 	bl	80078b0 <uxListRemove>
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	19ad      	adds	r5, r5, r6
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f72:	6821      	ldr	r1, [r4, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f74:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008f76:	d305      	bcc.n	8008f84 <vTaskPlaceOnEventListRestricted+0x9c>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f78:	4640      	mov	r0, r8
    }
 8008f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f7e:	3104      	adds	r1, #4
 8008f80:	f7fe bc7e 	b.w	8007880 <vListInsert>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f84:	4638      	mov	r0, r7
 8008f86:	3104      	adds	r1, #4
 8008f88:	f7fe fc7a 	bl	8007880 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008f8c:	4b09      	ldr	r3, [pc, #36]	@ (8008fb4 <vTaskPlaceOnEventListRestricted+0xcc>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	4295      	cmp	r5, r2
                    xNextTaskUnblockTime = xTimeToWake;
 8008f92:	bf38      	it	cc
 8008f94:	601d      	strcc	r5, [r3, #0]
    }
 8008f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( pxEventList );
 8008f9a:	f000 fd0b 	bl	80099b4 <ulSetInterruptMask>
 8008f9e:	e7fe      	b.n	8008f9e <vTaskPlaceOnEventListRestricted+0xb6>
 8008fa0:	20061f0c 	.word	0x20061f0c
 8008fa4:	20061a34 	.word	0x20061a34
 8008fa8:	20061a80 	.word	0x20061a80
 8008fac:	20061a7c 	.word	0x20061a7c
 8008fb0:	20061a3c 	.word	0x20061a3c
 8008fb4:	20061a18 	.word	0x20061a18

08008fb8 <xTaskRemoveFromEventList>:
{
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008fba:	68c3      	ldr	r3, [r0, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d054      	beq.n	800906c <xTaskRemoveFromEventList+0xb4>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008fc2:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fca:	6081      	str	r1, [r0, #8]
 8008fcc:	6048      	str	r0, [r1, #4]
 8008fce:	6850      	ldr	r0, [r2, #4]
 8008fd0:	f103 0418 	add.w	r4, r3, #24
 8008fd4:	42a0      	cmp	r0, r4
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008fd6:	4827      	ldr	r0, [pc, #156]	@ (8009074 <xTaskRemoveFromEventList+0xbc>)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008fd8:	bf08      	it	eq
 8008fda:	6051      	streq	r1, [r2, #4]
 8008fdc:	6811      	ldr	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008fde:	6805      	ldr	r5, [r0, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008fe0:	3901      	subs	r1, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fe2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008fe4:	629e      	str	r6, [r3, #40]	@ 0x28
 8008fe6:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008fe8:	b1a5      	cbz	r5, 8009014 <xTaskRemoveFromEventList+0x5c>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fea:	4a23      	ldr	r2, [pc, #140]	@ (8009078 <xTaskRemoveFromEventList+0xc0>)
 8008fec:	6815      	ldr	r5, [r2, #0]
 8008fee:	6851      	ldr	r1, [r2, #4]
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	6015      	str	r5, [r2, #0]
 8008ff4:	688d      	ldr	r5, [r1, #8]
 8008ff6:	61d9      	str	r1, [r3, #28]
 8008ff8:	621d      	str	r5, [r3, #32]
 8008ffa:	606c      	str	r4, [r5, #4]
 8008ffc:	608c      	str	r4, [r1, #8]
 8008ffe:	629a      	str	r2, [r3, #40]	@ 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009000:	4b1e      	ldr	r3, [pc, #120]	@ (800907c <xTaskRemoveFromEventList+0xc4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	4283      	cmp	r3, r0
 8009008:	d22e      	bcs.n	8009068 <xTaskRemoveFromEventList+0xb0>
            xYieldPendings[ 0 ] = pdTRUE;
 800900a:	2301      	movs	r3, #1
 800900c:	4a1c      	ldr	r2, [pc, #112]	@ (8009080 <xTaskRemoveFromEventList+0xc8>)
            xReturn = pdTRUE;
 800900e:	4618      	mov	r0, r3
            xYieldPendings[ 0 ] = pdTRUE;
 8009010:	6013      	str	r3, [r2, #0]
}
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009014:	695a      	ldr	r2, [r3, #20]
 8009016:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 800901a:	60a1      	str	r1, [r4, #8]
 800901c:	604c      	str	r4, [r1, #4]
 800901e:	6854      	ldr	r4, [r2, #4]
 8009020:	1d1e      	adds	r6, r3, #4
 8009022:	42b4      	cmp	r4, r6
 8009024:	bf08      	it	eq
 8009026:	6051      	streq	r1, [r2, #4]
 8009028:	6811      	ldr	r1, [r2, #0]
 800902a:	3901      	subs	r1, #1
 800902c:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800902e:	4a15      	ldr	r2, [pc, #84]	@ (8009084 <xTaskRemoveFromEventList+0xcc>)
 8009030:	6811      	ldr	r1, [r2, #0]
 8009032:	4281      	cmp	r1, r0
 8009034:	4914      	ldr	r1, [pc, #80]	@ (8009088 <xTaskRemoveFromEventList+0xd0>)
 8009036:	bf38      	it	cc
 8009038:	6010      	strcc	r0, [r2, #0]
 800903a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800903e:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8009042:	687d      	ldr	r5, [r7, #4]
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800904a:	588c      	ldr	r4, [r1, r2]
 800904c:	609d      	str	r5, [r3, #8]
 800904e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009052:	f8cc 6004 	str.w	r6, [ip, #4]
 8009056:	60ae      	str	r6, [r5, #8]
 8009058:	615f      	str	r7, [r3, #20]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800905a:	4b08      	ldr	r3, [pc, #32]	@ (800907c <xTaskRemoveFromEventList+0xc4>)
        prvAddTaskToReadyList( pxUnblockedTCB );
 800905c:	3401      	adds	r4, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800905e:	681b      	ldr	r3, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009060:	508c      	str	r4, [r1, r2]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009064:	4283      	cmp	r3, r0
 8009066:	d3d0      	bcc.n	800900a <xTaskRemoveFromEventList+0x52>
            xReturn = pdFALSE;
 8009068:	2000      	movs	r0, #0
}
 800906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( pxUnblockedTCB );
 800906c:	f000 fca2 	bl	80099b4 <ulSetInterruptMask>
 8009070:	e7fe      	b.n	8009070 <xTaskRemoveFromEventList+0xb8>
 8009072:	bf00      	nop
 8009074:	20061a10 	.word	0x20061a10
 8009078:	20061a68 	.word	0x20061a68
 800907c:	20061f0c 	.word	0x20061f0c
 8009080:	20061a24 	.word	0x20061a24
 8009084:	20061a30 	.word	0x20061a30
 8009088:	20061aac 	.word	0x20061aac

0800908c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800908c:	4a03      	ldr	r2, [pc, #12]	@ (800909c <vTaskInternalSetTimeOutState+0x10>)
    pxTimeOut->xTimeOnEntering = xTickCount;
 800908e:	4b04      	ldr	r3, [pc, #16]	@ (80090a0 <vTaskInternalSetTimeOutState+0x14>)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009090:	6812      	ldr	r2, [r2, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	e9c0 2300 	strd	r2, r3, [r0]
}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20061a20 	.word	0x20061a20
 80090a0:	20061a34 	.word	0x20061a34

080090a4 <xTaskCheckForTimeOut>:
{
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxTimeOut );
 80090a6:	b368      	cbz	r0, 8009104 <xTaskCheckForTimeOut+0x60>
    configASSERT( pxTicksToWait );
 80090a8:	460d      	mov	r5, r1
 80090aa:	b341      	cbz	r1, 80090fe <xTaskCheckForTimeOut+0x5a>
 80090ac:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80090ae:	f000 fb4f 	bl	8009750 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 80090b2:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 80090b4:	4a15      	ldr	r2, [pc, #84]	@ (800910c <xTaskCheckForTimeOut+0x68>)
            if( *pxTicksToWait == portMAX_DELAY )
 80090b6:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 80090b8:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80090ba:	d01b      	beq.n	80090f4 <xTaskCheckForTimeOut+0x50>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80090bc:	e9d4 6000 	ldrd	r6, r0, [r4]
 80090c0:	f8df c04c 	ldr.w	ip, [pc, #76]	@ 8009110 <xTaskCheckForTimeOut+0x6c>
 80090c4:	f8dc 7000 	ldr.w	r7, [ip]
 80090c8:	42be      	cmp	r6, r7
 80090ca:	d008      	beq.n	80090de <xTaskCheckForTimeOut+0x3a>
 80090cc:	4288      	cmp	r0, r1
 80090ce:	d806      	bhi.n	80090de <xTaskCheckForTimeOut+0x3a>
            *pxTicksToWait = ( TickType_t ) 0;
 80090d0:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 80090d2:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80090d4:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80090d6:	f000 fb49 	bl	800976c <vPortExitCritical>
}
 80090da:	4620      	mov	r0, r4
 80090dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090de:	1a0f      	subs	r7, r1, r0
        else if( xElapsedTime < *pxTicksToWait )
 80090e0:	42bb      	cmp	r3, r7
 80090e2:	d9f5      	bls.n	80090d0 <xTaskCheckForTimeOut+0x2c>
            *pxTicksToWait -= xElapsedTime;
 80090e4:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090e6:	f8dc 1000 	ldr.w	r1, [ip]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80090ea:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 80090ec:	4403      	add	r3, r0
 80090ee:	602b      	str	r3, [r5, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80090f0:	e9c4 1200 	strd	r1, r2, [r4]
                xReturn = pdFALSE;
 80090f4:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80090f6:	f000 fb39 	bl	800976c <vPortExitCritical>
}
 80090fa:	4620      	mov	r0, r4
 80090fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( pxTicksToWait );
 80090fe:	f000 fc59 	bl	80099b4 <ulSetInterruptMask>
 8009102:	e7fe      	b.n	8009102 <xTaskCheckForTimeOut+0x5e>
    configASSERT( pxTimeOut );
 8009104:	f000 fc56 	bl	80099b4 <ulSetInterruptMask>
 8009108:	e7fe      	b.n	8009108 <xTaskCheckForTimeOut+0x64>
 800910a:	bf00      	nop
 800910c:	20061a34 	.word	0x20061a34
 8009110:	20061a20 	.word	0x20061a20

08009114 <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8009114:	2201      	movs	r2, #1
 8009116:	4b01      	ldr	r3, [pc, #4]	@ (800911c <vTaskMissedYield+0x8>)
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	4770      	bx	lr
 800911c:	20061a24 	.word	0x20061a24

08009120 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8009120:	4b05      	ldr	r3, [pc, #20]	@ (8009138 <xTaskGetSchedulerState+0x18>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b133      	cbz	r3, 8009134 <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009126:	4b05      	ldr	r3, [pc, #20]	@ (800913c <xTaskGetSchedulerState+0x1c>)
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	fab0 f080 	clz	r0, r0
 800912e:	0940      	lsrs	r0, r0, #5
 8009130:	0040      	lsls	r0, r0, #1
 8009132:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009134:	2001      	movs	r0, #1
    }
 8009136:	4770      	bx	lr
 8009138:	20061a2c 	.word	0x20061a2c
 800913c:	20061a10 	.word	0x20061a10

08009140 <xTaskPriorityInherit>:
    {
 8009140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8009142:	4604      	mov	r4, r0
 8009144:	b1c8      	cbz	r0, 800917a <xTaskPriorityInherit+0x3a>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009146:	4d1f      	ldr	r5, [pc, #124]	@ (80091c4 <xTaskPriorityInherit+0x84>)
 8009148:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800914a:	682a      	ldr	r2, [r5, #0]
 800914c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800914e:	4293      	cmp	r3, r2
 8009150:	d214      	bcs.n	800917c <xTaskPriorityInherit+0x3c>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8009152:	6982      	ldr	r2, [r0, #24]
 8009154:	2a00      	cmp	r2, #0
 8009156:	db04      	blt.n	8009162 <xTaskPriorityInherit+0x22>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8009158:	682a      	ldr	r2, [r5, #0]
 800915a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800915c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8009160:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009162:	4e19      	ldr	r6, [pc, #100]	@ (80091c8 <xTaskPriorityInherit+0x88>)
 8009164:	6962      	ldr	r2, [r4, #20]
 8009166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800916a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800916e:	429a      	cmp	r2, r3
 8009170:	d00c      	beq.n	800918c <xTaskPriorityInherit+0x4c>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	62e3      	str	r3, [r4, #44]	@ 0x2c
                xReturn = pdTRUE;
 8009178:	2001      	movs	r0, #1
    }
 800917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8009180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009182:	4298      	cmp	r0, r3
 8009184:	bf2c      	ite	cs
 8009186:	2000      	movcs	r0, #0
 8009188:	2001      	movcc	r0, #1
    }
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800918c:	1d27      	adds	r7, r4, #4
 800918e:	4638      	mov	r0, r7
 8009190:	f7fe fb8e 	bl	80078b0 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009194:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8009196:	4a0d      	ldr	r2, [pc, #52]	@ (80091cc <xTaskPriorityInherit+0x8c>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800919a:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800919c:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800919e:	428b      	cmp	r3, r1
 80091a0:	bf88      	it	hi
 80091a2:	6013      	strhi	r3, [r2, #0]
 80091a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091a8:	0098      	lsls	r0, r3, #2
 80091aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091ae:	6859      	ldr	r1, [r3, #4]
 80091b0:	5832      	ldr	r2, [r6, r0]
 80091b2:	688d      	ldr	r5, [r1, #8]
 80091b4:	3201      	adds	r2, #1
 80091b6:	60a1      	str	r1, [r4, #8]
 80091b8:	60e5      	str	r5, [r4, #12]
 80091ba:	606f      	str	r7, [r5, #4]
 80091bc:	608f      	str	r7, [r1, #8]
 80091be:	6163      	str	r3, [r4, #20]
 80091c0:	5032      	str	r2, [r6, r0]
 80091c2:	e7d9      	b.n	8009178 <xTaskPriorityInherit+0x38>
 80091c4:	20061f0c 	.word	0x20061f0c
 80091c8:	20061aac 	.word	0x20061aac
 80091cc:	20061a30 	.word	0x20061a30

080091d0 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 80091d0:	b198      	cbz	r0, 80091fa <xTaskPriorityDisinherit+0x2a>
    {
 80091d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB == pxCurrentTCB );
 80091d4:	4b1d      	ldr	r3, [pc, #116]	@ (800924c <xTaskPriorityDisinherit+0x7c>)
 80091d6:	4604      	mov	r4, r0
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4283      	cmp	r3, r0
 80091dc:	d002      	beq.n	80091e4 <xTaskPriorityDisinherit+0x14>
 80091de:	f000 fbe9 	bl	80099b4 <ulSetInterruptMask>
 80091e2:	e7fe      	b.n	80091e2 <xTaskPriorityDisinherit+0x12>
            configASSERT( pxTCB->uxMutexesHeld );
 80091e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e6:	b153      	cbz	r3, 80091fe <xTaskPriorityDisinherit+0x2e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091e8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80091ea:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
 80091ec:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091ee:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 80091f0:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091f2:	d000      	beq.n	80091f6 <xTaskPriorityDisinherit+0x26>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091f4:	b133      	cbz	r3, 8009204 <xTaskPriorityDisinherit+0x34>
        BaseType_t xReturn = pdFALSE;
 80091f6:	2000      	movs	r0, #0
    }
 80091f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BaseType_t xReturn = pdFALSE;
 80091fa:	2000      	movs	r0, #0
    }
 80091fc:	4770      	bx	lr
            configASSERT( pxTCB->uxMutexesHeld );
 80091fe:	f000 fbd9 	bl	80099b4 <ulSetInterruptMask>
 8009202:	e7fe      	b.n	8009202 <xTaskPriorityDisinherit+0x32>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009204:	1d05      	adds	r5, r0, #4
 8009206:	4628      	mov	r0, r5
 8009208:	f7fe fb52 	bl	80078b0 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800920c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    prvAddTaskToReadyList( pxTCB );
 800920e:	4a10      	ldr	r2, [pc, #64]	@ (8009250 <xTaskPriorityDisinherit+0x80>)
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8009210:	f1c3 0038 	rsb	r0, r3, #56	@ 0x38
 8009214:	61a0      	str	r0, [r4, #24]
                    xReturn = pdTRUE;
 8009216:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
 8009218:	6811      	ldr	r1, [r2, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800921a:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
 800921c:	428b      	cmp	r3, r1
 800921e:	bf88      	it	hi
 8009220:	6013      	strhi	r3, [r2, #0]
 8009222:	4a0c      	ldr	r2, [pc, #48]	@ (8009254 <xTaskPriorityDisinherit+0x84>)
 8009224:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009228:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800922c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009230:	685f      	ldr	r7, [r3, #4]
 8009232:	f852 100e 	ldr.w	r1, [r2, lr]
 8009236:	68be      	ldr	r6, [r7, #8]
 8009238:	4401      	add	r1, r0
 800923a:	60a7      	str	r7, [r4, #8]
 800923c:	60e6      	str	r6, [r4, #12]
 800923e:	6075      	str	r5, [r6, #4]
 8009240:	60bd      	str	r5, [r7, #8]
 8009242:	6163      	str	r3, [r4, #20]
 8009244:	f842 100e 	str.w	r1, [r2, lr]
    }
 8009248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800924a:	bf00      	nop
 800924c:	20061f0c 	.word	0x20061f0c
 8009250:	20061a30 	.word	0x20061a30
 8009254:	20061aac 	.word	0x20061aac

08009258 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 8009258:	b180      	cbz	r0, 800927c <vTaskPriorityDisinheritAfterTimeout+0x24>
    {
 800925a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB->uxMutexesHeld );
 800925c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800925e:	4604      	mov	r4, r0
 8009260:	b14b      	cbz	r3, 8009276 <vTaskPriorityDisinheritAfterTimeout+0x1e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009262:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
            if( pxTCB->uxPriority != uxPriorityToUse )
 8009264:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009266:	4281      	cmp	r1, r0
 8009268:	bf38      	it	cc
 800926a:	4601      	movcc	r1, r0
            if( pxTCB->uxPriority != uxPriorityToUse )
 800926c:	428a      	cmp	r2, r1
 800926e:	d001      	beq.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0x1c>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009270:	2b01      	cmp	r3, #1
 8009272:	d004      	beq.n	800927e <vTaskPriorityDisinheritAfterTimeout+0x26>
    }
 8009274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB->uxMutexesHeld );
 8009276:	f000 fb9d 	bl	80099b4 <ulSetInterruptMask>
 800927a:	e7fe      	b.n	800927a <vTaskPriorityDisinheritAfterTimeout+0x22>
 800927c:	4770      	bx	lr
                    configASSERT( pxTCB != pxCurrentTCB );
 800927e:	4b18      	ldr	r3, [pc, #96]	@ (80092e0 <vTaskPriorityDisinheritAfterTimeout+0x88>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	42a3      	cmp	r3, r4
 8009284:	d029      	beq.n	80092da <vTaskPriorityDisinheritAfterTimeout+0x82>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8009286:	69a3      	ldr	r3, [r4, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8009288:	62e1      	str	r1, [r4, #44]	@ 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800928a:	2b00      	cmp	r3, #0
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800928c:	bfa8      	it	ge
 800928e:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009292:	4d14      	ldr	r5, [pc, #80]	@ (80092e4 <vTaskPriorityDisinheritAfterTimeout+0x8c>)
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8009294:	bfa8      	it	ge
 8009296:	61a1      	strge	r1, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009298:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800929c:	6961      	ldr	r1, [r4, #20]
 800929e:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80092a2:	4299      	cmp	r1, r3
 80092a4:	d1e6      	bne.n	8009274 <vTaskPriorityDisinheritAfterTimeout+0x1c>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a6:	1d26      	adds	r6, r4, #4
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7fe fb01 	bl	80078b0 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 80092ae:	4a0e      	ldr	r2, [pc, #56]	@ (80092e8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80092b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80092b2:	6811      	ldr	r1, [r2, #0]
 80092b4:	428b      	cmp	r3, r1
 80092b6:	bf88      	it	hi
 80092b8:	6013      	strhi	r3, [r2, #0]
 80092ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092be:	0098      	lsls	r0, r3, #2
 80092c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80092c4:	6859      	ldr	r1, [r3, #4]
 80092c6:	582a      	ldr	r2, [r5, r0]
 80092c8:	688f      	ldr	r7, [r1, #8]
 80092ca:	3201      	adds	r2, #1
 80092cc:	60a1      	str	r1, [r4, #8]
 80092ce:	60e7      	str	r7, [r4, #12]
 80092d0:	607e      	str	r6, [r7, #4]
 80092d2:	608e      	str	r6, [r1, #8]
 80092d4:	6163      	str	r3, [r4, #20]
 80092d6:	502a      	str	r2, [r5, r0]
    }
 80092d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 80092da:	f000 fb6b 	bl	80099b4 <ulSetInterruptMask>
 80092de:	e7fe      	b.n	80092de <vTaskPriorityDisinheritAfterTimeout+0x86>
 80092e0:	20061f0c 	.word	0x20061f0c
 80092e4:	20061aac 	.word	0x20061aac
 80092e8:	20061a30 	.word	0x20061a30

080092ec <pvTaskIncrementMutexHeldCount>:
        pxTCB = pxCurrentTCB;
 80092ec:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <pvTaskIncrementMutexHeldCount+0x10>)
 80092ee:	6818      	ldr	r0, [r3, #0]
        if( pxTCB != NULL )
 80092f0:	b110      	cbz	r0, 80092f8 <pvTaskIncrementMutexHeldCount+0xc>
            ( pxTCB->uxMutexesHeld )++;
 80092f2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80092f4:	3301      	adds	r3, #1
 80092f6:	6503      	str	r3, [r0, #80]	@ 0x50
    }
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20061f0c 	.word	0x20061f0c

08009300 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4fb6      	ldr	r7, [pc, #728]	@ (80095e0 <prvTimerTask+0x2e0>)
 8009306:	f8df b2e0 	ldr.w	fp, [pc, #736]	@ 80095e8 <prvTimerTask+0x2e8>
 800930a:	f8df 82e0 	ldr.w	r8, [pc, #736]	@ 80095ec <prvTimerTask+0x2ec>
 800930e:	4db5      	ldr	r5, [pc, #724]	@ (80095e4 <prvTimerTask+0x2e4>)
 8009310:	b087      	sub	sp, #28
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681c      	ldr	r4, [r3, #0]
 8009316:	2c00      	cmp	r4, #0
 8009318:	f040 811c 	bne.w	8009554 <prvTimerTask+0x254>
        vTaskSuspendAll();
 800931c:	f7ff fd58 	bl	8008dd0 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8009320:	f7ff fd6e 	bl	8008e00 <xTaskGetTickCount>

        if( xTimeNow < xLastTime )
 8009324:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 8009328:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800932a:	4283      	cmp	r3, r0
 800932c:	d848      	bhi.n	80093c0 <prvTimerTask+0xc0>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800932e:	f8d8 3000 	ldr.w	r3, [r8]
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
 8009332:	f8cb 0000 	str.w	r0, [fp]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	fab2 f282 	clz	r2, r2
 800933c:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800933e:	6828      	ldr	r0, [r5, #0]
 8009340:	eba4 0109 	sub.w	r1, r4, r9
 8009344:	f7ff f83a 	bl	80083bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009348:	f7ff fd4a 	bl	8008de0 <xTaskResumeAll>
 800934c:	2800      	cmp	r0, #0
 800934e:	f000 8123 	beq.w	8009598 <prvTimerTask+0x298>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
 8009352:	2300      	movs	r3, #0
 8009354:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009358:	e9cd 3304 	strd	r3, r3, [sp, #16]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800935c:	2200      	movs	r2, #0
 800935e:	6828      	ldr	r0, [r5, #0]
 8009360:	a902      	add	r1, sp, #8
 8009362:	f7fe fcc9 	bl	8007cf8 <xQueueReceive>
 8009366:	2800      	cmp	r0, #0
 8009368:	d0d3      	beq.n	8009312 <prvTimerTask+0x12>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800936a:	9b02      	ldr	r3, [sp, #8]
                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800936c:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800936e:	2b00      	cmp	r3, #0
 8009370:	f2c0 80e8 	blt.w	8009544 <prvTimerTask+0x244>
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009374:	f8dd a010 	ldr.w	sl, [sp, #16]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009378:	f8da 3014 	ldr.w	r3, [sl, #20]
 800937c:	b11b      	cbz	r3, 8009386 <prvTimerTask+0x86>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800937e:	f10a 0004 	add.w	r0, sl, #4
 8009382:	f7fe fa95 	bl	80078b0 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 8009386:	f7ff fd3b 	bl	8008e00 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800938a:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 800938e:	9001      	str	r0, [sp, #4]
        if( xTimeNow < xLastTime )
 8009390:	4298      	cmp	r0, r3
 8009392:	d343      	bcc.n	800941c <prvTimerTask+0x11c>
        xLastTime = xTimeNow;
 8009394:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
 8009398:	3b01      	subs	r3, #1
        xLastTime = xTimeNow;
 800939a:	f8cb 2000 	str.w	r2, [fp]
                switch( xMessage.xMessageID )
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d8dc      	bhi.n	800935c <prvTimerTask+0x5c>
 80093a2:	e8df f003 	tbb	[pc, r3]
 80093a6:	6161      	.short	0x6161
 80093a8:	61c6a5bf 	.word	0x61c6a5bf
 80093ac:	bf61      	.short	0xbf61
 80093ae:	a5          	.byte	0xa5
 80093af:	00          	.byte	0x00
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80093b0:	f022 0201 	bic.w	r2, r2, #1
 80093b4:	f88a 2028 	strb.w	r2, [sl, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b8:	4650      	mov	r0, sl
 80093ba:	f8da 3020 	ldr.w	r3, [sl, #32]
 80093be:	4798      	blx	r3

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	2a00      	cmp	r2, #0
 80093c6:	f000 80d7 	beq.w	8009578 <prvTimerTask+0x278>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093ca:	68da      	ldr	r2, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093cc:	f8d2 a00c 	ldr.w	sl, [r2, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093d0:	6814      	ldr	r4, [r2, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093d2:	f10a 0604 	add.w	r6, sl, #4
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7fe fa6a 	bl	80078b0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80093dc:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 80093e0:	0751      	lsls	r1, r2, #29
 80093e2:	d5e5      	bpl.n	80093b0 <prvTimerTask+0xb0>
 80093e4:	e003      	b.n	80093ee <prvTimerTask+0xee>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093e6:	4650      	mov	r0, sl
 80093e8:	f8da 2020 	ldr.w	r2, [sl, #32]
 80093ec:	4790      	blx	r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80093ee:	f8da 2018 	ldr.w	r2, [sl, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093f2:	f8ca a010 	str.w	sl, [sl, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80093f6:	18a1      	adds	r1, r4, r2
 80093f8:	18a4      	adds	r4, r4, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093fa:	f8ca 1004 	str.w	r1, [sl, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80093fe:	d3f2      	bcc.n	80093e6 <prvTimerTask+0xe6>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009400:	4631      	mov	r1, r6
 8009402:	f8d8 0000 	ldr.w	r0, [r8]
 8009406:	f7fe fa3b 	bl	8007880 <vListInsert>
        return xProcessTimerNow;
 800940a:	e7d5      	b.n	80093b8 <prvTimerTask+0xb8>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800940c:	f021 0101 	bic.w	r1, r1, #1
 8009410:	f889 1028 	strb.w	r1, [r9, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009414:	4648      	mov	r0, r9
 8009416:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800941a:	4798      	blx	r3
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	2900      	cmp	r1, #0
 8009422:	f000 80b3 	beq.w	800958c <prvTimerTask+0x28c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009426:	68d9      	ldr	r1, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009428:	f8d1 900c 	ldr.w	r9, [r1, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800942c:	680c      	ldr	r4, [r1, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800942e:	f109 0604 	add.w	r6, r9, #4
 8009432:	4630      	mov	r0, r6
 8009434:	f7fe fa3c 	bl	80078b0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009438:	f899 1028 	ldrb.w	r1, [r9, #40]	@ 0x28
 800943c:	0748      	lsls	r0, r1, #29
 800943e:	d5e5      	bpl.n	800940c <prvTimerTask+0x10c>
 8009440:	e003      	b.n	800944a <prvTimerTask+0x14a>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009442:	4648      	mov	r0, r9
 8009444:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8009448:	4788      	blx	r1
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800944a:	f8d9 1018 	ldr.w	r1, [r9, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800944e:	f8c9 9010 	str.w	r9, [r9, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009452:	1860      	adds	r0, r4, r1
 8009454:	1864      	adds	r4, r4, r1
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009456:	f8c9 0004 	str.w	r0, [r9, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800945a:	d3f2      	bcc.n	8009442 <prvTimerTask+0x142>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800945c:	4631      	mov	r1, r6
 800945e:	f8d8 0000 	ldr.w	r0, [r8]
 8009462:	f7fe fa0d 	bl	8007880 <vListInsert>
        return xProcessTimerNow;
 8009466:	e7d5      	b.n	8009414 <prvTimerTask+0x114>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009468:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800946c:	9903      	ldr	r1, [sp, #12]
 800946e:	f8da 4018 	ldr.w	r4, [sl, #24]
        if( xNextExpiryTime <= xTimeNow )
 8009472:	9a01      	ldr	r2, [sp, #4]
 8009474:	190b      	adds	r3, r1, r4
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009476:	f040 0601 	orr.w	r6, r0, #1
 800947a:	f88a 6028 	strb.w	r6, [sl, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800947e:	bf2c      	ite	cs
 8009480:	2601      	movcs	r6, #1
 8009482:	2600      	movcc	r6, #0
        if( xNextExpiryTime <= xTimeNow )
 8009484:	4293      	cmp	r3, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009486:	f8ca 3004 	str.w	r3, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800948a:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 800948e:	f200 8086 	bhi.w	800959e <prvTimerTask+0x29e>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009492:	1a51      	subs	r1, r2, r1
 8009494:	428c      	cmp	r4, r1
 8009496:	d83e      	bhi.n	8009516 <prvTimerTask+0x216>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009498:	0741      	lsls	r1, r0, #29
 800949a:	d412      	bmi.n	80094c2 <prvTimerTask+0x1c2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800949c:	f020 0001 	bic.w	r0, r0, #1
 80094a0:	f88a 0028 	strb.w	r0, [sl, #40]	@ 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a4:	4650      	mov	r0, sl
 80094a6:	f8da 3020 	ldr.w	r3, [sl, #32]
 80094aa:	4798      	blx	r3
 80094ac:	e756      	b.n	800935c <prvTimerTask+0x5c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094ae:	428c      	cmp	r4, r1
 80094b0:	f200 80c4 	bhi.w	800963c <prvTimerTask+0x33c>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094b4:	f8da 3020 	ldr.w	r3, [sl, #32]
 80094b8:	4650      	mov	r0, sl
 80094ba:	4798      	blx	r3
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80094bc:	4633      	mov	r3, r6
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80094be:	f8da 4018 	ldr.w	r4, [sl, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	18e6      	adds	r6, r4, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094c6:	bf2c      	ite	cs
 80094c8:	2001      	movcs	r0, #1
 80094ca:	2000      	movcc	r0, #0
        if( xNextExpiryTime <= xTimeNow )
 80094cc:	42b2      	cmp	r2, r6
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094ce:	eba2 0103 	sub.w	r1, r2, r3
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094d2:	f8ca 6004 	str.w	r6, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094d6:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 80094da:	d2e8      	bcs.n	80094ae <prvTimerTask+0x1ae>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094dc:	429a      	cmp	r2, r3
 80094de:	d201      	bcs.n	80094e4 <prvTimerTask+0x1e4>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d0e7      	beq.n	80094b4 <prvTimerTask+0x1b4>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094e4:	6838      	ldr	r0, [r7, #0]
 80094e6:	f10a 0104 	add.w	r1, sl, #4
 80094ea:	f7fe f9c9 	bl	8007880 <vListInsert>
        return xProcessTimerNow;
 80094ee:	e7d9      	b.n	80094a4 <prvTimerTask+0x1a4>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80094f0:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094f4:	9b03      	ldr	r3, [sp, #12]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80094f6:	f041 0101 	orr.w	r1, r1, #1
 80094fa:	f88a 1028 	strb.w	r1, [sl, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094fe:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80a1 	beq.w	800964a <prvTimerTask+0x34a>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009508:	4413      	add	r3, r2
        if( xNextExpiryTime <= xTimeNow )
 800950a:	4293      	cmp	r3, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800950c:	f8ca 3004 	str.w	r3, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009510:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 8009514:	d848      	bhi.n	80095a8 <prvTimerTask+0x2a8>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009516:	f8d8 0000 	ldr.w	r0, [r8]
 800951a:	f10a 0104 	add.w	r1, sl, #4
 800951e:	f7fe f9af 	bl	8007880 <vListInsert>
 8009522:	e71b      	b.n	800935c <prvTimerTask+0x5c>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009524:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 8009528:	f023 0301 	bic.w	r3, r3, #1
 800952c:	f88a 3028 	strb.w	r3, [sl, #40]	@ 0x28
                        break;
 8009530:	e714      	b.n	800935c <prvTimerTask+0x5c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009532:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 8009536:	079a      	lsls	r2, r3, #30
 8009538:	d576      	bpl.n	8009628 <prvTimerTask+0x328>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800953a:	f023 0301 	bic.w	r3, r3, #1
 800953e:	f88a 3028 	strb.w	r3, [sl, #40]	@ 0x28
 8009542:	e70b      	b.n	800935c <prvTimerTask+0x5c>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	9905      	ldr	r1, [sp, #20]
 8009548:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f6ff af05 	blt.w	800935c <prvTimerTask+0x5c>
 8009552:	e70f      	b.n	8009374 <prvTimerTask+0x74>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	681c      	ldr	r4, [r3, #0]
        vTaskSuspendAll();
 8009558:	f7ff fc3a 	bl	8008dd0 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800955c:	f7ff fc50 	bl	8008e00 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8009560:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 8009564:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 8009566:	4298      	cmp	r0, r3
 8009568:	f4ff af2a 	bcc.w	80093c0 <prvTimerTask+0xc0>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800956c:	4284      	cmp	r4, r0
        xLastTime = xTimeNow;
 800956e:	f8cb 0000 	str.w	r0, [fp]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009572:	d91f      	bls.n	80095b4 <prvTimerTask+0x2b4>
 8009574:	2200      	movs	r2, #0
 8009576:	e6e2      	b.n	800933e <prvTimerTask+0x3e>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 8009578:	f8d8 2000 	ldr.w	r2, [r8]
        xLastTime = xTimeNow;
 800957c:	f8cb 9000 	str.w	r9, [fp]
        pxCurrentTimerList = pxOverflowTimerList;
 8009580:	603a      	str	r2, [r7, #0]
        pxOverflowTimerList = pxTemp;
 8009582:	f8c8 3000 	str.w	r3, [r8]
                ( void ) xTaskResumeAll();
 8009586:	f7ff fc2b 	bl	8008de0 <xTaskResumeAll>
 800958a:	e6e2      	b.n	8009352 <prvTimerTask+0x52>
        pxCurrentTimerList = pxOverflowTimerList;
 800958c:	f8d8 1000 	ldr.w	r1, [r8]
        pxOverflowTimerList = pxTemp;
 8009590:	f8c8 3000 	str.w	r3, [r8]
        pxCurrentTimerList = pxOverflowTimerList;
 8009594:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 8009596:	e6fd      	b.n	8009394 <prvTimerTask+0x94>
                        taskYIELD_WITHIN_API();
 8009598:	f000 f8ce 	bl	8009738 <vPortYield>
 800959c:	e6d9      	b.n	8009352 <prvTimerTask+0x52>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800959e:	4291      	cmp	r1, r2
 80095a0:	d902      	bls.n	80095a8 <prvTimerTask+0x2a8>
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	f43f af78 	beq.w	8009498 <prvTimerTask+0x198>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095a8:	6838      	ldr	r0, [r7, #0]
 80095aa:	f10a 0104 	add.w	r1, sl, #4
 80095ae:	f7fe f967 	bl	8007880 <vListInsert>
 80095b2:	e6d3      	b.n	800935c <prvTimerTask+0x5c>
                    ( void ) xTaskResumeAll();
 80095b4:	f7ff fc14 	bl	8008de0 <xTaskResumeAll>
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	68de      	ldr	r6, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095be:	1d33      	adds	r3, r6, #4
 80095c0:	4618      	mov	r0, r3
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	f7fe f974 	bl	80078b0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80095c8:	f896 2028 	ldrb.w	r2, [r6, #40]	@ 0x28
 80095cc:	0753      	lsls	r3, r2, #29
 80095ce:	d415      	bmi.n	80095fc <prvTimerTask+0x2fc>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80095d0:	f022 0201 	bic.w	r2, r2, #1
 80095d4:	f886 2028 	strb.w	r2, [r6, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095d8:	4630      	mov	r0, r6
 80095da:	6a33      	ldr	r3, [r6, #32]
 80095dc:	4798      	blx	r3
    }
 80095de:	e6b8      	b.n	8009352 <prvTimerTask+0x52>
 80095e0:	20061f20 	.word	0x20061f20
 80095e4:	20061f18 	.word	0x20061f18
 80095e8:	20061f10 	.word	0x20061f10
 80095ec:	20061f1c 	.word	0x20061f1c
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80095f0:	4281      	cmp	r1, r0
 80095f2:	d81d      	bhi.n	8009630 <prvTimerTask+0x330>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095f4:	4630      	mov	r0, r6
 80095f6:	6a31      	ldr	r1, [r6, #32]
 80095f8:	4788      	blx	r1
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80095fa:	4654      	mov	r4, sl
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80095fc:	69b1      	ldr	r1, [r6, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80095fe:	eba9 0004 	sub.w	r0, r9, r4
 8009602:	eb14 0a01 	adds.w	sl, r4, r1
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009606:	bf2c      	ite	cs
 8009608:	2301      	movcs	r3, #1
 800960a:	2300      	movcc	r3, #0
        if( xNextExpiryTime <= xTimeNow )
 800960c:	45d1      	cmp	r9, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800960e:	f8c6 a004 	str.w	sl, [r6, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009612:	6136      	str	r6, [r6, #16]
        if( xNextExpiryTime <= xTimeNow )
 8009614:	d2ec      	bcs.n	80095f0 <prvTimerTask+0x2f0>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009616:	45a1      	cmp	r9, r4
 8009618:	d201      	bcs.n	800961e <prvTimerTask+0x31e>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0ea      	beq.n	80095f4 <prvTimerTask+0x2f4>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800961e:	9901      	ldr	r1, [sp, #4]
 8009620:	6838      	ldr	r0, [r7, #0]
 8009622:	f7fe f92d 	bl	8007880 <vListInsert>
        return xProcessTimerNow;
 8009626:	e7d7      	b.n	80095d8 <prvTimerTask+0x2d8>
                                vPortFree( pxTimer );
 8009628:	4650      	mov	r0, sl
 800962a:	f000 fac5 	bl	8009bb8 <vPortFree>
 800962e:	e695      	b.n	800935c <prvTimerTask+0x5c>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009630:	9901      	ldr	r1, [sp, #4]
 8009632:	f8d8 0000 	ldr.w	r0, [r8]
 8009636:	f7fe f923 	bl	8007880 <vListInsert>
        return xProcessTimerNow;
 800963a:	e7cd      	b.n	80095d8 <prvTimerTask+0x2d8>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800963c:	f8d8 0000 	ldr.w	r0, [r8]
 8009640:	f10a 0104 	add.w	r1, sl, #4
 8009644:	f7fe f91c 	bl	8007880 <vListInsert>
        return xProcessTimerNow;
 8009648:	e72c      	b.n	80094a4 <prvTimerTask+0x1a4>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800964a:	f000 f9b3 	bl	80099b4 <ulSetInterruptMask>
 800964e:	e7fe      	b.n	800964e <prvTimerTask+0x34e>

08009650 <xTimerCreateTimerTask>:
    {
 8009650:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 8009652:	4c19      	ldr	r4, [pc, #100]	@ (80096b8 <xTimerCreateTimerTask+0x68>)
    {
 8009654:	b083      	sub	sp, #12
        taskENTER_CRITICAL();
 8009656:	f000 f87b 	bl	8009750 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	b1a5      	cbz	r5, 8009688 <xTimerCreateTimerTask+0x38>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800965e:	f000 f885 	bl	800976c <vPortExitCritical>
        if( xTimerQueue != NULL )
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	b15b      	cbz	r3, 800967e <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
 8009666:	2402      	movs	r4, #2
 8009668:	4814      	ldr	r0, [pc, #80]	@ (80096bc <xTimerCreateTimerTask+0x6c>)
 800966a:	2300      	movs	r3, #0
 800966c:	9001      	str	r0, [sp, #4]
 800966e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009672:	4913      	ldr	r1, [pc, #76]	@ (80096c0 <xTimerCreateTimerTask+0x70>)
 8009674:	4813      	ldr	r0, [pc, #76]	@ (80096c4 <xTimerCreateTimerTask+0x74>)
 8009676:	9400      	str	r4, [sp, #0]
 8009678:	f7ff f9ac 	bl	80089d4 <xTaskCreate>
        configASSERT( xReturn );
 800967c:	b910      	cbnz	r0, 8009684 <xTimerCreateTimerTask+0x34>
 800967e:	f000 f999 	bl	80099b4 <ulSetInterruptMask>
 8009682:	e7fe      	b.n	8009682 <xTimerCreateTimerTask+0x32>
    }
 8009684:	b003      	add	sp, #12
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}
                vListInitialise( &xActiveTimerList1 );
 8009688:	4e0f      	ldr	r6, [pc, #60]	@ (80096c8 <xTimerCreateTimerTask+0x78>)
                vListInitialise( &xActiveTimerList2 );
 800968a:	4f10      	ldr	r7, [pc, #64]	@ (80096cc <xTimerCreateTimerTask+0x7c>)
                vListInitialise( &xActiveTimerList1 );
 800968c:	4630      	mov	r0, r6
 800968e:	f7fe f8d9 	bl	8007844 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8009692:	4638      	mov	r0, r7
 8009694:	f7fe f8d6 	bl	8007844 <vListInitialise>
                pxOverflowTimerList = &xActiveTimerList2;
 8009698:	4a0d      	ldr	r2, [pc, #52]	@ (80096d0 <xTimerCreateTimerTask+0x80>)
                pxCurrentTimerList = &xActiveTimerList1;
 800969a:	4b0e      	ldr	r3, [pc, #56]	@ (80096d4 <xTimerCreateTimerTask+0x84>)
                pxOverflowTimerList = &xActiveTimerList2;
 800969c:	6017      	str	r7, [r2, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800969e:	2110      	movs	r1, #16
 80096a0:	462a      	mov	r2, r5
 80096a2:	200a      	movs	r0, #10
                pxCurrentTimerList = &xActiveTimerList1;
 80096a4:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80096a6:	f7fe f953 	bl	8007950 <xQueueGenericCreate>
 80096aa:	6020      	str	r0, [r4, #0]
                    if( xTimerQueue != NULL )
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d0d6      	beq.n	800965e <xTimerCreateTimerTask+0xe>
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096b0:	4909      	ldr	r1, [pc, #36]	@ (80096d8 <xTimerCreateTimerTask+0x88>)
 80096b2:	f7fe fdf1 	bl	8008298 <vQueueAddToRegistry>
 80096b6:	e7d2      	b.n	800965e <xTimerCreateTimerTask+0xe>
 80096b8:	20061f18 	.word	0x20061f18
 80096bc:	20061f14 	.word	0x20061f14
 80096c0:	0800f994 	.word	0x0800f994
 80096c4:	08009301 	.word	0x08009301
 80096c8:	20061f38 	.word	0x20061f38
 80096cc:	20061f24 	.word	0x20061f24
 80096d0:	20061f1c 	.word	0x20061f1c
 80096d4:	20061f20 	.word	0x20061f20
 80096d8:	0800f98c 	.word	0x0800f98c

080096dc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 80096dc:	2200      	movs	r2, #0
{
 80096de:	b500      	push	{lr}
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 80096e0:	4b08      	ldr	r3, [pc, #32]	@ (8009704 <prvTaskExitError+0x28>)
{
 80096e2:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0UL;
 80096e4:	9201      	str	r2, [sp, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	d002      	beq.n	80096f2 <prvTaskExitError+0x16>
 80096ec:	f000 f962 	bl	80099b4 <ulSetInterruptMask>
 80096f0:	e7fe      	b.n	80096f0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80096f2:	f000 f95f 	bl	80099b4 <ulSetInterruptMask>

    while( ulDummy == 0 )
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0fc      	beq.n	80096f6 <prvTaskExitError+0x1a>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 80096fc:	b003      	add	sp, #12
 80096fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009702:	bf00      	nop
 8009704:	20000f78 	.word	0x20000f78

08009708 <vPortSetupTimerInterrupt>:
{
 8009708:	b430      	push	{r4, r5}
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 800970a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800970e:	2504      	movs	r5, #4
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009710:	2400      	movs	r4, #0
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009712:	2007      	movs	r0, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <vPortSetupTimerInterrupt+0x28>)
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 8009716:	6115      	str	r5, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009718:	6194      	str	r4, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4905      	ldr	r1, [pc, #20]	@ (8009734 <vPortSetupTimerInterrupt+0x2c>)
}
 800971e:	bc30      	pop	{r4, r5}
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009720:	fba1 1303 	umull	r1, r3, r1, r3
 8009724:	099b      	lsrs	r3, r3, #6
 8009726:	3b01      	subs	r3, #1
 8009728:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800972a:	6110      	str	r0, [r2, #16]
}
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	20000000 	.word	0x20000000
 8009734:	10624dd3 	.word	0x10624dd3

08009738 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800973c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009740:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8009744:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009748:	f3bf 8f6f 	isb	sy
}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop

08009750 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8009750:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
 8009752:	f000 f92f 	bl	80099b4 <ulSetInterruptMask>
    ulCriticalNesting++;
 8009756:	4a04      	ldr	r2, [pc, #16]	@ (8009768 <vPortEnterCritical+0x18>)
 8009758:	6813      	ldr	r3, [r2, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800975e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009762:	f3bf 8f6f 	isb	sy
}
 8009766:	bd08      	pop	{r3, pc}
 8009768:	20000f78 	.word	0x20000f78

0800976c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800976c:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
 800976e:	4b08      	ldr	r3, [pc, #32]	@ (8009790 <vPortExitCritical+0x24>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	b14a      	cbz	r2, 8009788 <vPortExitCritical+0x1c>
    ulCriticalNesting--;
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	3a01      	subs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 800977a:	6818      	ldr	r0, [r3, #0]
 800977c:	b100      	cbz	r0, 8009780 <vPortExitCritical+0x14>
    {
        portENABLE_INTERRUPTS();
    }
}
 800977e:	bd08      	pop	{r3, pc}
 8009780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
 8009784:	f000 b922 	b.w	80099cc <vClearInterruptMask>
    configASSERT( ulCriticalNesting );
 8009788:	f000 f914 	bl	80099b4 <ulSetInterruptMask>
 800978c:	e7fe      	b.n	800978c <vPortExitCritical+0x20>
 800978e:	bf00      	nop
 8009790:	20000f78 	.word	0x20000f78

08009794 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8009794:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009796:	f000 f90d 	bl	80099b4 <ulSetInterruptMask>
 800979a:	4604      	mov	r4, r0
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800979c:	f7ff fb36 	bl	8008e0c <xTaskIncrementTick>
 80097a0:	b128      	cbz	r0, 80097ae <SysTick_Handler+0x1a>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80097ae:	4620      	mov	r0, r4
}
 80097b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80097b4:	f000 b90a 	b.w	80099cc <vClearInterruptMask>

080097b8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80097b8:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80097ba:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
 80097bc:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80097c0:	2b66      	cmp	r3, #102	@ 0x66
 80097c2:	d002      	beq.n	80097ca <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 80097c4:	f000 f8f6 	bl	80099b4 <ulSetInterruptMask>
 80097c8:	e7fe      	b.n	80097c8 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 80097ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097ce:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
 80097d2:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80097d6:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80097da:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
 80097de:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80097e2:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34
    }
}
 80097e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
 80097ea:	f000 b8bd 	b.w	8009968 <vRestoreContextOfFirstTask>
 80097ee:	bf00      	nop

080097f0 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80097f4:	f04f 3e11 	mov.w	lr, #286331153	@ 0x11111111
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 80097f8:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80097fc:	e940 e309 	strd	lr, r3, [r0, #-36]	@ 0x24
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8009800:	f04f 3307 	mov.w	r3, #117901063	@ 0x7070707
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8009804:	f840 4c04 	str.w	r4, [r0, #-4]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8009808:	4c16      	ldr	r4, [pc, #88]	@ (8009864 <pxPortInitialiseStack+0x74>)
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800980a:	f840 3c34 	str.w	r3, [r0, #-52]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800980e:	e940 4203 	strd	r4, r2, [r0, #-12]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8009812:	f04f 3305 	mov.w	r3, #84215045	@ 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8009816:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800981a:	f04f 3b12 	mov.w	fp, #303174162	@ 0x12121212
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800981e:	e940 320f 	strd	r3, r2, [r0, #-60]	@ 0x3c
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8009822:	f04f 3a03 	mov.w	sl, #50529027	@ 0x3030303
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8009826:	f04f 3902 	mov.w	r9, #33686018	@ 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800982a:	f04f 3801 	mov.w	r8, #16843009	@ 0x1010101
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800982e:	f04f 3710 	mov.w	r7, #269488144	@ 0x10101010
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8009832:	f04f 3609 	mov.w	r6, #151587081	@ 0x9090909
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8009836:	f04f 3508 	mov.w	r5, #134744072	@ 0x8080808
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800983a:	f04f 3404 	mov.w	r4, #67372036	@ 0x4040404
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800983e:	f06f 0343 	mvn.w	r3, #67	@ 0x43
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8009842:	e940 ab05 	strd	sl, fp, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8009846:	e940 8907 	strd	r8, r9, [r0, #-28]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800984a:	e940 670b 	strd	r6, r7, [r0, #-44]	@ 0x2c
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800984e:	f840 5c30 	str.w	r5, [r0, #-48]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8009852:	f840 4c40 	str.w	r4, [r0, #-64]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8009856:	f840 3c44 	str.w	r3, [r0, #-68]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 800985a:	f840 1d48 	str.w	r1, [r0, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
 800985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009862:	bf00      	nop
 8009864:	080096dd 	.word	0x080096dd

08009868 <xPortStartScheduler>:
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8009868:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800986c:	b530      	push	{r4, r5, lr}
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800986e:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8009872:	4938      	ldr	r1, [pc, #224]	@ (8009954 <xPortStartScheduler+0xec>)
 8009874:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
{
 8009876:	b085      	sub	sp, #20
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8009878:	4288      	cmp	r0, r1
 800987a:	d002      	beq.n	8009882 <xPortStartScheduler+0x1a>
 800987c:	f000 f89a 	bl	80099b4 <ulSetInterruptMask>
 8009880:	e7fe      	b.n	8009880 <xPortStartScheduler+0x18>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 8009882:	4935      	ldr	r1, [pc, #212]	@ (8009958 <xPortStartScheduler+0xf0>)
 8009884:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009886:	428a      	cmp	r2, r1
 8009888:	d002      	beq.n	8009890 <xPortStartScheduler+0x28>
 800988a:	f000 f893 	bl	80099b4 <ulSetInterruptMask>
 800988e:	e7fe      	b.n	800988e <xPortStartScheduler+0x26>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 8009890:	2000      	movs	r0, #0
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8009892:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        volatile uint32_t ulImplementedPrioBits = 0;
 8009896:	9002      	str	r0, [sp, #8]
        portNVIC_SHPR2_REG = 0xFF000000;
 8009898:	f8c3 1d1c 	str.w	r1, [r3, #3356]	@ 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800989c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098a0:	4a2e      	ldr	r2, [pc, #184]	@ (800995c <xPortStartScheduler+0xf4>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 80098a2:	0e1b      	lsrs	r3, r3, #24
 80098a4:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098b0:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d03e      	beq.n	8009934 <xPortStartScheduler+0xcc>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 80098b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098ba:	43db      	mvns	r3, r3
 80098bc:	f013 0f50 	tst.w	r3, #80	@ 0x50
 80098c0:	d009      	beq.n	80098d6 <xPortStartScheduler+0x6e>
 80098c2:	e03a      	b.n	800993a <xPortStartScheduler+0xd2>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80098c4:	9b02      	ldr	r3, [sp, #8]
 80098c6:	3301      	adds	r3, #1
 80098c8:	9302      	str	r3, [sp, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098da:	061b      	lsls	r3, r3, #24
 80098dc:	d4f2      	bmi.n	80098c4 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d035      	beq.n	8009950 <xPortStartScheduler+0xe8>
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	f1c3 0307 	rsb	r3, r3, #7
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098ea:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80098f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    portNVIC_SHPR2_REG = 0;
 80098f4:	2400      	movs	r4, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098f6:	491a      	ldr	r1, [pc, #104]	@ (8009960 <xPortStartScheduler+0xf8>)
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 80098f8:	4d1a      	ldr	r5, [pc, #104]	@ (8009964 <xPortStartScheduler+0xfc>)
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098fa:	600b      	str	r3, [r1, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80098fc:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	@ 0xd20
 8009900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009904:	f8c2 3d20 	str.w	r3, [r2, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009908:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	@ 0xd20
 800990c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009910:	f8c2 3d20 	str.w	r3, [r2, #3360]	@ 0xd20
    portNVIC_SHPR2_REG = 0;
 8009914:	f8c2 4d1c 	str.w	r4, [r2, #3356]	@ 0xd1c
    vPortSetupTimerInterrupt();
 8009918:	f7ff fef6 	bl	8009708 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
 800991c:	602c      	str	r4, [r5, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 800991e:	f000 f839 	bl	8009994 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009922:	f7ff fa83 	bl	8008e2c <vTaskSwitchContext>
    volatile uint32_t ulDummy = 0UL;
 8009926:	9403      	str	r4, [sp, #12]
    configASSERT( ulCriticalNesting == ~0UL );
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	d008      	beq.n	8009940 <xPortStartScheduler+0xd8>
 800992e:	f000 f841 	bl	80099b4 <ulSetInterruptMask>
 8009932:	e7fe      	b.n	8009932 <xPortStartScheduler+0xca>
        configASSERT( ucMaxSysCallPriority );
 8009934:	f000 f83e 	bl	80099b4 <ulSetInterruptMask>
 8009938:	e7fe      	b.n	8009938 <xPortStartScheduler+0xd0>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 800993a:	f000 f83b 	bl	80099b4 <ulSetInterruptMask>
 800993e:	e7fe      	b.n	800993e <xPortStartScheduler+0xd6>
    portDISABLE_INTERRUPTS();
 8009940:	f000 f838 	bl	80099b4 <ulSetInterruptMask>
    while( ulDummy == 0 )
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0fc      	beq.n	8009944 <xPortStartScheduler+0xdc>
    prvTaskExitError();

    /* Should not get here. */
    return 0;
}
 800994a:	2000      	movs	r0, #0
 800994c:	b005      	add	sp, #20
 800994e:	bd30      	pop	{r4, r5, pc}
 8009950:	2300      	movs	r3, #0
 8009952:	e7cd      	b.n	80098f0 <xPortStartScheduler+0x88>
 8009954:	08009a39 	.word	0x08009a39
 8009958:	080099dd 	.word	0x080099dd
 800995c:	20061f50 	.word	0x20061f50
 8009960:	20061f4c 	.word	0x20061f4c
 8009964:	20000f78 	.word	0x20000f78

08009968 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009968:	4a09      	ldr	r2, [pc, #36]	@ (8009990 <vRestoreContextOfFirstTask+0x28>)
 800996a:	6811      	ldr	r1, [r2, #0]
 800996c:	6808      	ldr	r0, [r1, #0]
 800996e:	c806      	ldmia	r0!, {r1, r2}
 8009970:	f381 880b 	msr	PSPLIM, r1
 8009974:	2102      	movs	r1, #2
 8009976:	f381 8814 	msr	CONTROL, r1
 800997a:	3020      	adds	r0, #32
 800997c:	f380 8809 	msr	PSP, r0
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f04f 0000 	mov.w	r0, #0
 8009988:	f380 8811 	msr	BASEPRI, r0
 800998c:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 800998e:	0000      	.short	0x0000
 8009990:	20061f0c 	.word	0x20061f0c

08009994 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009994:	4806      	ldr	r0, [pc, #24]	@ (80099b0 <vStartFirstTask+0x1c>)
 8009996:	6800      	ldr	r0, [r0, #0]
 8009998:	6800      	ldr	r0, [r0, #0]
 800999a:	f380 8808 	msr	MSP, r0
 800999e:	b662      	cpsie	i
 80099a0:	b661      	cpsie	f
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	df66      	svc	102	@ 0x66
 80099ac:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80099ae:	0000      	.short	0x0000
 80099b0:	e000ed08 	.word	0xe000ed08

080099b4 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80099b4:	f3ef 8011 	mrs	r0, BASEPRI
 80099b8:	f04f 0150 	mov.w	r1, #80	@ 0x50
 80099bc:	f381 8811 	msr	BASEPRI, r1
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop

080099cc <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80099cc:	f380 8811 	msr	BASEPRI, r0
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop

080099dc <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80099dc:	f3ef 8009 	mrs	r0, PSP
 80099e0:	f01e 0f10 	tst.w	lr, #16
 80099e4:	bf08      	it	eq
 80099e6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099ea:	f3ef 820b 	mrs	r2, PSPLIM
 80099ee:	4673      	mov	r3, lr
 80099f0:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80099f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009a34 <PendSV_Handler+0x58>)
 80099f6:	6811      	ldr	r1, [r2, #0]
 80099f8:	6008      	str	r0, [r1, #0]
 80099fa:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80099fe:	f380 8811 	msr	BASEPRI, r0
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f7ff fa0f 	bl	8008e2c <vTaskSwitchContext>
 8009a0e:	f04f 0000 	mov.w	r0, #0
 8009a12:	f380 8811 	msr	BASEPRI, r0
 8009a16:	4a07      	ldr	r2, [pc, #28]	@ (8009a34 <PendSV_Handler+0x58>)
 8009a18:	6811      	ldr	r1, [r2, #0]
 8009a1a:	6808      	ldr	r0, [r1, #0]
 8009a1c:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009a20:	f013 0f10 	tst.w	r3, #16
 8009a24:	bf08      	it	eq
 8009a26:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a2a:	f382 880b 	msr	PSPLIM, r2
 8009a2e:	f380 8809 	msr	PSP, r0
 8009a32:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8009a34:	20061f0c 	.word	0x20061f0c

08009a38 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009a38:	f01e 0f04 	tst.w	lr, #4
 8009a3c:	bf0c      	ite	eq
 8009a3e:	f3ef 8008 	mrseq	r0, MSP
 8009a42:	f3ef 8009 	mrsne	r0, PSP
 8009a46:	4901      	ldr	r1, [pc, #4]	@ (8009a4c <SVC_Handler+0x14>)
 8009a48:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 8009a4a:	0000      	.short	0x0000
 8009a4c:	080097b9 	.word	0x080097b9

08009a50 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8009a52:	1e43      	subs	r3, r0, #1
 8009a54:	330a      	adds	r3, #10
 8009a56:	d811      	bhi.n	8009a7c <pvPortMalloc+0x2c>
        {
            xWantedSize += xHeapStructSize;

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a58:	f010 0307 	ands.w	r3, r0, #7
            xWantedSize += xHeapStructSize;
 8009a5c:	f100 0408 	add.w	r4, r0, #8
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a60:	d04f      	beq.n	8009b02 <pvPortMalloc+0xb2>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009a62:	f1a3 0209 	sub.w	r2, r3, #9
 8009a66:	42a2      	cmp	r2, r4
 8009a68:	d308      	bcc.n	8009a7c <pvPortMalloc+0x2c>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8009a6a:	3010      	adds	r0, #16
 8009a6c:	1ac4      	subs	r4, r0, r3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8009a6e:	f7ff f9af 	bl	8008dd0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009a72:	4a49      	ldr	r2, [pc, #292]	@ (8009b98 <pvPortMalloc+0x148>)

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009a74:	4626      	mov	r6, r4
        if( pxEnd == NULL )
 8009a76:	6815      	ldr	r5, [r2, #0]
 8009a78:	bb25      	cbnz	r5, 8009ac4 <pvPortMalloc+0x74>
 8009a7a:	e00b      	b.n	8009a94 <pvPortMalloc+0x44>
    vTaskSuspendAll();
 8009a7c:	f7ff f9a8 	bl	8008dd0 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8009a80:	4a45      	ldr	r2, [pc, #276]	@ (8009b98 <pvPortMalloc+0x148>)
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	b123      	cbz	r3, 8009a90 <pvPortMalloc+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009a86:	f7ff f9ab 	bl	8008de0 <xTaskResumeAll>
    void * pvReturn = NULL;
 8009a8a:	2500      	movs	r5, #0
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
 8009a90:	2600      	movs	r6, #0
 8009a92:	4634      	mov	r4, r6
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009a94:	4b41      	ldr	r3, [pc, #260]	@ (8009b9c <pvPortMalloc+0x14c>)
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;
 8009a96:	2000      	movs	r0, #0
    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a98:	075d      	lsls	r5, r3, #29
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a9a:	bf1c      	itt	ne
 8009a9c:	3307      	addne	r3, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009a9e:	f023 0307 	bicne.w	r3, r3, #7
 8009aa2:	4619      	mov	r1, r3

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8009aa4:	4d3e      	ldr	r5, [pc, #248]	@ (8009ba0 <pvPortMalloc+0x150>)
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009aa6:	f025 0507 	bic.w	r5, r5, #7
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8009aaa:	6015      	str	r5, [r2, #0]
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8009aac:	4a3d      	ldr	r2, [pc, #244]	@ (8009ba4 <pvPortMalloc+0x154>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009aae:	1aeb      	subs	r3, r5, r3
    xStart.xBlockSize = ( size_t ) 0;
 8009ab0:	e9c2 1000 	strd	r1, r0, [r2]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ba8 <pvPortMalloc+0x158>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8009ab6:	e9c5 0000 	strd	r0, r0, [r5]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aba:	6013      	str	r3, [r2, #0]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009abc:	e9c1 5300 	strd	r5, r3, [r1]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8009bac <pvPortMalloc+0x15c>)
 8009ac2:	6013      	str	r3, [r2, #0]
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009ac4:	2e00      	cmp	r6, #0
 8009ac6:	dbde      	blt.n	8009a86 <pvPortMalloc+0x36>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ac8:	2c00      	cmp	r4, #0
 8009aca:	d0dc      	beq.n	8009a86 <pvPortMalloc+0x36>
 8009acc:	4f37      	ldr	r7, [pc, #220]	@ (8009bac <pvPortMalloc+0x15c>)
 8009ace:	683e      	ldr	r6, [r7, #0]
 8009ad0:	42a6      	cmp	r6, r4
 8009ad2:	d3d8      	bcc.n	8009a86 <pvPortMalloc+0x36>
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8009ad4:	4a33      	ldr	r2, [pc, #204]	@ (8009ba4 <pvPortMalloc+0x154>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009ad6:	4b31      	ldr	r3, [pc, #196]	@ (8009b9c <pvPortMalloc+0x14c>)
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8009ad8:	6811      	ldr	r1, [r2, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009ada:	4299      	cmp	r1, r3
 8009adc:	d30e      	bcc.n	8009afc <pvPortMalloc+0xac>
 8009ade:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8009bb4 <pvPortMalloc+0x164>
 8009ae2:	4571      	cmp	r1, lr
 8009ae4:	d80a      	bhi.n	8009afc <pvPortMalloc+0xac>
                pxPreviousBlock = &xStart;
 8009ae6:	4694      	mov	ip, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8009ae8:	6848      	ldr	r0, [r1, #4]
 8009aea:	42a0      	cmp	r0, r4
 8009aec:	d218      	bcs.n	8009b20 <pvPortMalloc+0xd0>
 8009aee:	680a      	ldr	r2, [r1, #0]
 8009af0:	b1b2      	cbz	r2, 8009b20 <pvPortMalloc+0xd0>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d20f      	bcs.n	8009b16 <pvPortMalloc+0xc6>
 8009af6:	f7ff ff5d 	bl	80099b4 <ulSetInterruptMask>
 8009afa:	e7fe      	b.n	8009afa <pvPortMalloc+0xaa>
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009afc:	f7ff ff5a 	bl	80099b4 <ulSetInterruptMask>
 8009b00:	e7fe      	b.n	8009b00 <pvPortMalloc+0xb0>
    vTaskSuspendAll();
 8009b02:	f7ff f965 	bl	8008dd0 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8009b06:	4a24      	ldr	r2, [pc, #144]	@ (8009b98 <pvPortMalloc+0x148>)
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009b08:	4626      	mov	r6, r4
        if( pxEnd == NULL )
 8009b0a:	6815      	ldr	r5, [r2, #0]
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	d0c1      	beq.n	8009a94 <pvPortMalloc+0x44>
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009b10:	2c00      	cmp	r4, #0
 8009b12:	dadb      	bge.n	8009acc <pvPortMalloc+0x7c>
 8009b14:	e7b7      	b.n	8009a86 <pvPortMalloc+0x36>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009b16:	4572      	cmp	r2, lr
 8009b18:	d8ed      	bhi.n	8009af6 <pvPortMalloc+0xa6>
                    pxPreviousBlock = pxBlock;
 8009b1a:	468c      	mov	ip, r1
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	e7e3      	b.n	8009ae8 <pvPortMalloc+0x98>
                if( pxBlock != pxEnd )
 8009b20:	42a9      	cmp	r1, r5
 8009b22:	d0b0      	beq.n	8009a86 <pvPortMalloc+0x36>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8009b24:	f101 0508 	add.w	r5, r1, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8009b28:	429d      	cmp	r5, r3
 8009b2a:	d32b      	bcc.n	8009b84 <pvPortMalloc+0x134>
 8009b2c:	4575      	cmp	r5, lr
 8009b2e:	d829      	bhi.n	8009b84 <pvPortMalloc+0x134>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b30:	680a      	ldr	r2, [r1, #0]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009b32:	42a0      	cmp	r0, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b34:	f8cc 2000 	str.w	r2, [ip]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009b38:	d327      	bcc.n	8009b8a <pvPortMalloc+0x13a>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b3a:	eba0 0e04 	sub.w	lr, r0, r4
 8009b3e:	f1be 0f10 	cmp.w	lr, #16
 8009b42:	d908      	bls.n	8009b56 <pvPortMalloc+0x106>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b44:	190b      	adds	r3, r1, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b46:	0758      	lsls	r0, r3, #29
 8009b48:	d122      	bne.n	8009b90 <pvPortMalloc+0x140>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f8c3 e004 	str.w	lr, [r3, #4]
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8009b50:	510a      	str	r2, [r1, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8009b52:	f8cc 3000 	str.w	r3, [ip]
                    pxBlock->pxNextFreeBlock = NULL;
 8009b56:	2400      	movs	r4, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b58:	4b13      	ldr	r3, [pc, #76]	@ (8009ba8 <pvPortMalloc+0x158>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b5a:	1a36      	subs	r6, r6, r0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b5c:	681a      	ldr	r2, [r3, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009b5e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b62:	4296      	cmp	r6, r2
                    xNumberOfSuccessfulAllocations++;
 8009b64:	4a12      	ldr	r2, [pc, #72]	@ (8009bb0 <pvPortMalloc+0x160>)
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b66:	bf38      	it	cc
 8009b68:	601e      	strcc	r6, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009b6a:	6813      	ldr	r3, [r2, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009b6c:	6048      	str	r0, [r1, #4]
                    xNumberOfSuccessfulAllocations++;
 8009b6e:	3301      	adds	r3, #1
                    pxBlock->pxNextFreeBlock = NULL;
 8009b70:	600c      	str	r4, [r1, #0]
                    xNumberOfSuccessfulAllocations++;
 8009b72:	6013      	str	r3, [r2, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b74:	603e      	str	r6, [r7, #0]
    ( void ) xTaskResumeAll();
 8009b76:	f7ff f933 	bl	8008de0 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b7a:	076b      	lsls	r3, r5, #29
 8009b7c:	d086      	beq.n	8009a8c <pvPortMalloc+0x3c>
 8009b7e:	f7ff ff19 	bl	80099b4 <ulSetInterruptMask>
 8009b82:	e7fe      	b.n	8009b82 <pvPortMalloc+0x132>
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8009b84:	f7ff ff16 	bl	80099b4 <ulSetInterruptMask>
 8009b88:	e7fe      	b.n	8009b88 <pvPortMalloc+0x138>
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009b8a:	f7ff ff13 	bl	80099b4 <ulSetInterruptMask>
 8009b8e:	e7fe      	b.n	8009b8e <pvPortMalloc+0x13e>
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b90:	f7ff ff10 	bl	80099b4 <ulSetInterruptMask>
 8009b94:	e7fe      	b.n	8009b94 <pvPortMalloc+0x144>
 8009b96:	bf00      	nop
 8009b98:	20061f64 	.word	0x20061f64
 8009b9c:	20061f70 	.word	0x20061f70
 8009ba0:	2007af68 	.word	0x2007af68
 8009ba4:	20061f68 	.word	0x20061f68
 8009ba8:	20061f5c 	.word	0x20061f5c
 8009bac:	20061f60 	.word	0x20061f60
 8009bb0:	20061f58 	.word	0x20061f58
 8009bb4:	2007af6f 	.word	0x2007af6f

08009bb8 <vPortFree>:
    if( pv != NULL )
 8009bb8:	b1b0      	cbz	r0, 8009be8 <vPortFree+0x30>
{
 8009bba:	b5f0      	push	{r4, r5, r6, r7, lr}
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bbc:	4d32      	ldr	r5, [pc, #200]	@ (8009c88 <vPortFree+0xd0>)
        puc -= xHeapStructSize;
 8009bbe:	f1a0 0408 	sub.w	r4, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bc2:	42ac      	cmp	r4, r5
{
 8009bc4:	b083      	sub	sp, #12
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bc6:	d30c      	bcc.n	8009be2 <vPortFree+0x2a>
 8009bc8:	4e30      	ldr	r6, [pc, #192]	@ (8009c8c <vPortFree+0xd4>)
 8009bca:	42b4      	cmp	r4, r6
 8009bcc:	d809      	bhi.n	8009be2 <vPortFree+0x2a>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009bce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da09      	bge.n	8009bea <vPortFree+0x32>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bd6:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8009bda:	b14a      	cbz	r2, 8009bf0 <vPortFree+0x38>
 8009bdc:	f7ff feea 	bl	80099b4 <ulSetInterruptMask>
 8009be0:	e7fe      	b.n	8009be0 <vPortFree+0x28>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009be2:	f7ff fee7 	bl	80099b4 <ulSetInterruptMask>
 8009be6:	e7fe      	b.n	8009be6 <vPortFree+0x2e>
 8009be8:	4770      	bx	lr
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009bea:	f7ff fee3 	bl	80099b4 <ulSetInterruptMask>
 8009bee:	e7fe      	b.n	8009bee <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
 8009bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009bf4:	4f26      	ldr	r7, [pc, #152]	@ (8009c90 <vPortFree+0xd8>)
                heapFREE_BLOCK( pxLink );
 8009bf6:	f840 3c04 	str.w	r3, [r0, #-4]
 8009bfa:	9001      	str	r0, [sp, #4]
                vTaskSuspendAll();
 8009bfc:	f7ff f8e8 	bl	8008dd0 <vTaskSuspendAll>
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c00:	463b      	mov	r3, r7
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009c02:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8009c9c <vPortFree+0xe4>
 8009c06:	9801      	ldr	r0, [sp, #4]
 8009c08:	f8de 2000 	ldr.w	r2, [lr]
 8009c0c:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8009c10:	440a      	add	r2, r1
 8009c12:	f8ce 2000 	str.w	r2, [lr]
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c16:	461a      	mov	r2, r3
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429c      	cmp	r4, r3
 8009c1c:	d8fb      	bhi.n	8009c16 <vPortFree+0x5e>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8009c1e:	42ba      	cmp	r2, r7
 8009c20:	d006      	beq.n	8009c30 <vPortFree+0x78>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8009c22:	42aa      	cmp	r2, r5
 8009c24:	d301      	bcc.n	8009c2a <vPortFree+0x72>
 8009c26:	42b2      	cmp	r2, r6
 8009c28:	d902      	bls.n	8009c30 <vPortFree+0x78>
 8009c2a:	f7ff fec3 	bl	80099b4 <ulSetInterruptMask>
 8009c2e:	e7fe      	b.n	8009c2e <vPortFree+0x76>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c30:	6855      	ldr	r5, [r2, #4]
 8009c32:	1956      	adds	r6, r2, r5
 8009c34:	42b4      	cmp	r4, r6
 8009c36:	d010      	beq.n	8009c5a <vPortFree+0xa2>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c38:	1865      	adds	r5, r4, r1
 8009c3a:	42ab      	cmp	r3, r5
 8009c3c:	d01d      	beq.n	8009c7a <vPortFree+0xc2>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c3e:	f840 3c08 	str.w	r3, [r0, #-8]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009c42:	42a2      	cmp	r2, r4
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8009c44:	bf18      	it	ne
 8009c46:	6014      	strne	r4, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8009c48:	4a12      	ldr	r2, [pc, #72]	@ (8009c94 <vPortFree+0xdc>)
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	6013      	str	r3, [r2, #0]
}
 8009c50:	b003      	add	sp, #12
 8009c52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 8009c56:	f7ff b8c3 	b.w	8008de0 <xTaskResumeAll>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c5a:	4429      	add	r1, r5
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c5c:	1850      	adds	r0, r2, r1
 8009c5e:	4283      	cmp	r3, r0
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c60:	6051      	str	r1, [r2, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c62:	d1f1      	bne.n	8009c48 <vPortFree+0x90>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009c64:	480c      	ldr	r0, [pc, #48]	@ (8009c98 <vPortFree+0xe0>)
 8009c66:	6800      	ldr	r0, [r0, #0]
 8009c68:	4283      	cmp	r3, r0
 8009c6a:	d00b      	beq.n	8009c84 <vPortFree+0xcc>
        pxBlockToInsert = pxIterator;
 8009c6c:	4614      	mov	r4, r2
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009c6e:	e9d3 5000 	ldrd	r5, r0, [r3]
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8009c72:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009c74:	e9c4 5100 	strd	r5, r1, [r4]
 8009c78:	e7e3      	b.n	8009c42 <vPortFree+0x8a>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009c7a:	4d07      	ldr	r5, [pc, #28]	@ (8009c98 <vPortFree+0xe0>)
 8009c7c:	682d      	ldr	r5, [r5, #0]
 8009c7e:	42ab      	cmp	r3, r5
 8009c80:	d1f5      	bne.n	8009c6e <vPortFree+0xb6>
 8009c82:	e7dc      	b.n	8009c3e <vPortFree+0x86>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009c84:	6013      	str	r3, [r2, #0]
    if( pxIterator != pxBlockToInsert )
 8009c86:	e7df      	b.n	8009c48 <vPortFree+0x90>
 8009c88:	20061f70 	.word	0x20061f70
 8009c8c:	2007af6f 	.word	0x2007af6f
 8009c90:	20061f68 	.word	0x20061f68
 8009c94:	20061f54 	.word	0x20061f54
 8009c98:	20061f64 	.word	0x20061f64
 8009c9c:	20061f60 	.word	0x20061f60

08009ca0 <xPortGetFreeHeapSize>:
    return xFreeBytesRemaining;
 8009ca0:	4b01      	ldr	r3, [pc, #4]	@ (8009ca8 <xPortGetFreeHeapSize+0x8>)
}
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20061f60 	.word	0x20061f60

08009cac <ai_buffer_get_size>:
 8009cac:	b360      	cbz	r0, 8009d08 <ai_buffer_get_size+0x5c>
 8009cae:	b430      	push	{r4, r5}
 8009cb0:	6803      	ldr	r3, [r0, #0]
 8009cb2:	4d16      	ldr	r5, [pc, #88]	@ (8009d0c <ai_buffer_get_size+0x60>)
 8009cb4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009cb8:	6984      	ldr	r4, [r0, #24]
 8009cba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009cbe:	42ab      	cmp	r3, r5
 8009cc0:	6862      	ldr	r2, [r4, #4]
 8009cc2:	d01b      	beq.n	8009cfc <ai_buffer_get_size+0x50>
 8009cc4:	7d03      	ldrb	r3, [r0, #20]
 8009cc6:	6941      	ldr	r1, [r0, #20]
 8009cc8:	f1a3 0301 	sub.w	r3, r3, #1
 8009ccc:	fab3 f383 	clz	r3, r3
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009cd6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009cda:	da0b      	bge.n	8009cf4 <ai_buffer_get_size+0x48>
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d102      	bne.n	8009ce6 <ai_buffer_get_size+0x3a>
 8009ce0:	2802      	cmp	r0, #2
 8009ce2:	d007      	beq.n	8009cf4 <ai_buffer_get_size+0x48>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4298      	cmp	r0, r3
 8009cee:	fb01 f202 	mul.w	r2, r1, r2
 8009cf2:	d1f3      	bne.n	8009cdc <ai_buffer_get_size+0x30>
 8009cf4:	bc30      	pop	{r4, r5}
 8009cf6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009cfa:	4770      	bx	lr
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d0e1      	beq.n	8009cc4 <ai_buffer_get_size+0x18>
 8009d00:	321f      	adds	r2, #31
 8009d02:	f022 021f 	bic.w	r2, r2, #31
 8009d06:	e7dd      	b.n	8009cc4 <ai_buffer_get_size+0x18>
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	000400c0 	.word	0x000400c0

08009d10 <ai_buffer_array_sane>:
 8009d10:	b138      	cbz	r0, 8009d22 <ai_buffer_array_sane+0x12>
 8009d12:	6843      	ldr	r3, [r0, #4]
 8009d14:	b123      	cbz	r3, 8009d20 <ai_buffer_array_sane+0x10>
 8009d16:	8840      	ldrh	r0, [r0, #2]
 8009d18:	3800      	subs	r0, #0
 8009d1a:	bf18      	it	ne
 8009d1c:	2001      	movne	r0, #1
 8009d1e:	4770      	bx	lr
 8009d20:	4618      	mov	r0, r3
 8009d22:	4770      	bx	lr

08009d24 <ai_buffer_array_item_set_address>:
 8009d24:	b158      	cbz	r0, 8009d3e <ai_buffer_array_item_set_address+0x1a>
 8009d26:	6843      	ldr	r3, [r0, #4]
 8009d28:	b143      	cbz	r3, 8009d3c <ai_buffer_array_item_set_address+0x18>
 8009d2a:	8840      	ldrh	r0, [r0, #2]
 8009d2c:	b138      	cbz	r0, 8009d3e <ai_buffer_array_item_set_address+0x1a>
 8009d2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009d32:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009d36:	2001      	movs	r0, #1
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	4770      	bx	lr
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	4770      	bx	lr

08009d40 <ai_platform_get_weights_map>:
 8009d40:	b1f2      	cbz	r2, 8009d80 <ai_platform_get_weights_map+0x40>
 8009d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d44:	4606      	mov	r6, r0
 8009d46:	b1c8      	cbz	r0, 8009d7c <ai_platform_get_weights_map+0x3c>
 8009d48:	460c      	mov	r4, r1
 8009d4a:	b1b9      	cbz	r1, 8009d7c <ai_platform_get_weights_map+0x3c>
 8009d4c:	4615      	mov	r5, r2
 8009d4e:	4b23      	ldr	r3, [pc, #140]	@ (8009ddc <ai_platform_get_weights_map+0x9c>)
 8009d50:	6812      	ldr	r2, [r2, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d00b      	beq.n	8009d6e <ai_platform_get_weights_map+0x2e>
 8009d56:	686d      	ldr	r5, [r5, #4]
 8009d58:	b185      	cbz	r5, 8009d7c <ai_platform_get_weights_map+0x3c>
 8009d5a:	682f      	ldr	r7, [r5, #0]
 8009d5c:	429f      	cmp	r7, r3
 8009d5e:	d011      	beq.n	8009d84 <ai_platform_get_weights_map+0x44>
 8009d60:	f1a1 0001 	sub.w	r0, r1, #1
 8009d64:	fab0 f080 	clz	r0, r0
 8009d68:	6035      	str	r5, [r6, #0]
 8009d6a:	0940      	lsrs	r0, r0, #5
 8009d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d6e:	1d28      	adds	r0, r5, #4
 8009d70:	f7ff ffce 	bl	8009d10 <ai_buffer_array_sane>
 8009d74:	b110      	cbz	r0, 8009d7c <ai_platform_get_weights_map+0x3c>
 8009d76:	88eb      	ldrh	r3, [r5, #6]
 8009d78:	429c      	cmp	r4, r3
 8009d7a:	d01b      	beq.n	8009db4 <ai_platform_get_weights_map+0x74>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d80:	2000      	movs	r0, #0
 8009d82:	4770      	bx	lr
 8009d84:	4629      	mov	r1, r5
 8009d86:	2300      	movs	r3, #0
 8009d88:	3804      	subs	r0, #4
 8009d8a:	e004      	b.n	8009d96 <ai_platform_get_weights_map+0x56>
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	f840 2f04 	str.w	r2, [r0, #4]!
 8009d94:	d005      	beq.n	8009da2 <ai_platform_get_weights_map+0x62>
 8009d96:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009d9a:	42ba      	cmp	r2, r7
 8009d9c:	d1f6      	bne.n	8009d8c <ai_platform_get_weights_map+0x4c>
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	d1ec      	bne.n	8009d7c <ai_platform_get_weights_map+0x3c>
 8009da2:	3401      	adds	r4, #1
 8009da4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8009da8:	4b0c      	ldr	r3, [pc, #48]	@ (8009ddc <ai_platform_get_weights_map+0x9c>)
 8009daa:	1ac0      	subs	r0, r0, r3
 8009dac:	fab0 f080 	clz	r0, r0
 8009db0:	0940      	lsrs	r0, r0, #5
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	2200      	movs	r2, #0
 8009db6:	1f30      	subs	r0, r6, #4
 8009db8:	4611      	mov	r1, r2
 8009dba:	e004      	b.n	8009dc6 <ai_platform_get_weights_map+0x86>
 8009dbc:	3101      	adds	r1, #1
 8009dbe:	428c      	cmp	r4, r1
 8009dc0:	f840 3f04 	str.w	r3, [r0, #4]!
 8009dc4:	d005      	beq.n	8009dd2 <ai_platform_get_weights_map+0x92>
 8009dc6:	68ab      	ldr	r3, [r5, #8]
 8009dc8:	4413      	add	r3, r2
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	321c      	adds	r2, #28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1f4      	bne.n	8009dbc <ai_platform_get_weights_map+0x7c>
 8009dd2:	1a60      	subs	r0, r4, r1
 8009dd4:	fab0 f080 	clz	r0, r0
 8009dd8:	0940      	lsrs	r0, r0, #5
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ddc:	a1facade 	.word	0xa1facade

08009de0 <ai_platform_get_activations_map>:
 8009de0:	b1fa      	cbz	r2, 8009e22 <ai_platform_get_activations_map+0x42>
 8009de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de4:	4606      	mov	r6, r0
 8009de6:	b1d0      	cbz	r0, 8009e1e <ai_platform_get_activations_map+0x3e>
 8009de8:	460c      	mov	r4, r1
 8009dea:	b1c1      	cbz	r1, 8009e1e <ai_platform_get_activations_map+0x3e>
 8009dec:	4615      	mov	r5, r2
 8009dee:	4b24      	ldr	r3, [pc, #144]	@ (8009e80 <ai_platform_get_activations_map+0xa0>)
 8009df0:	6812      	ldr	r2, [r2, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d00b      	beq.n	8009e0e <ai_platform_get_activations_map+0x2e>
 8009df6:	6a2d      	ldr	r5, [r5, #32]
 8009df8:	b18d      	cbz	r5, 8009e1e <ai_platform_get_activations_map+0x3e>
 8009dfa:	682f      	ldr	r7, [r5, #0]
 8009dfc:	429f      	cmp	r7, r3
 8009dfe:	d012      	beq.n	8009e26 <ai_platform_get_activations_map+0x46>
 8009e00:	f1a1 0001 	sub.w	r0, r1, #1
 8009e04:	fab0 f080 	clz	r0, r0
 8009e08:	6035      	str	r5, [r6, #0]
 8009e0a:	0940      	lsrs	r0, r0, #5
 8009e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e0e:	f105 000c 	add.w	r0, r5, #12
 8009e12:	f7ff ff7d 	bl	8009d10 <ai_buffer_array_sane>
 8009e16:	b110      	cbz	r0, 8009e1e <ai_platform_get_activations_map+0x3e>
 8009e18:	89eb      	ldrh	r3, [r5, #14]
 8009e1a:	429c      	cmp	r4, r3
 8009e1c:	d01b      	beq.n	8009e56 <ai_platform_get_activations_map+0x76>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e22:	2000      	movs	r0, #0
 8009e24:	4770      	bx	lr
 8009e26:	4629      	mov	r1, r5
 8009e28:	2300      	movs	r3, #0
 8009e2a:	3804      	subs	r0, #4
 8009e2c:	e004      	b.n	8009e38 <ai_platform_get_activations_map+0x58>
 8009e2e:	3301      	adds	r3, #1
 8009e30:	429c      	cmp	r4, r3
 8009e32:	f840 2f04 	str.w	r2, [r0, #4]!
 8009e36:	d005      	beq.n	8009e44 <ai_platform_get_activations_map+0x64>
 8009e38:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009e3c:	42ba      	cmp	r2, r7
 8009e3e:	d1f6      	bne.n	8009e2e <ai_platform_get_activations_map+0x4e>
 8009e40:	429c      	cmp	r4, r3
 8009e42:	d1ec      	bne.n	8009e1e <ai_platform_get_activations_map+0x3e>
 8009e44:	3401      	adds	r4, #1
 8009e46:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <ai_platform_get_activations_map+0xa0>)
 8009e4c:	1ac0      	subs	r0, r0, r3
 8009e4e:	fab0 f080 	clz	r0, r0
 8009e52:	0940      	lsrs	r0, r0, #5
 8009e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e56:	2200      	movs	r2, #0
 8009e58:	1f30      	subs	r0, r6, #4
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	e004      	b.n	8009e68 <ai_platform_get_activations_map+0x88>
 8009e5e:	3101      	adds	r1, #1
 8009e60:	428c      	cmp	r4, r1
 8009e62:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e66:	d005      	beq.n	8009e74 <ai_platform_get_activations_map+0x94>
 8009e68:	692b      	ldr	r3, [r5, #16]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	321c      	adds	r2, #28
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1f4      	bne.n	8009e5e <ai_platform_get_activations_map+0x7e>
 8009e74:	1a60      	subs	r0, r4, r1
 8009e76:	fab0 f080 	clz	r0, r0
 8009e7a:	0940      	lsrs	r0, r0, #5
 8009e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	a1facade 	.word	0xa1facade

08009e84 <ai_platform_bind_network_params>:
 8009e84:	4603      	mov	r3, r0
 8009e86:	b198      	cbz	r0, 8009eb0 <ai_platform_bind_network_params+0x2c>
 8009e88:	b1a9      	cbz	r1, 8009eb6 <ai_platform_bind_network_params+0x32>
 8009e8a:	b1ba      	cbz	r2, 8009ebc <ai_platform_bind_network_params+0x38>
 8009e8c:	f04f 0c01 	mov.w	ip, #1
 8009e90:	b500      	push	{lr}
 8009e92:	480c      	ldr	r0, [pc, #48]	@ (8009ec4 <ai_platform_bind_network_params+0x40>)
 8009e94:	f103 0e0c 	add.w	lr, r3, #12
 8009e98:	f843 0b04 	str.w	r0, [r3], #4
 8009e9c:	c903      	ldmia	r1, {r0, r1}
 8009e9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ea6:	e88e 0003 	stmia.w	lr, {r0, r1}
 8009eaa:	4660      	mov	r0, ip
 8009eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8009eb0:	4684      	mov	ip, r0
 8009eb2:	4660      	mov	r0, ip
 8009eb4:	4770      	bx	lr
 8009eb6:	468c      	mov	ip, r1
 8009eb8:	4660      	mov	r0, ip
 8009eba:	4770      	bx	lr
 8009ebc:	4694      	mov	ip, r2
 8009ebe:	4660      	mov	r0, ip
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	a1facade 	.word	0xa1facade

08009ec8 <ai_platform_runtime_get_revision>:
 8009ec8:	4800      	ldr	r0, [pc, #0]	@ (8009ecc <ai_platform_runtime_get_revision+0x4>)
 8009eca:	4770      	bx	lr
 8009ecc:	0800f89c 	.word	0x0800f89c

08009ed0 <ai_platform_runtime_get_version>:
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8009efc <ai_platform_runtime_get_version+0x2c>)
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	fa5f fc83 	uxtb.w	ip, r3
 8009edc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009ee0:	f36c 0007 	bfi	r0, ip, #0, #8
 8009ee4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009ee8:	f361 200f 	bfi	r0, r1, #8, #8
 8009eec:	0e1b      	lsrs	r3, r3, #24
 8009eee:	f362 4017 	bfi	r0, r2, #16, #8
 8009ef2:	f363 601f 	bfi	r0, r3, #24, #8
 8009ef6:	b002      	add	sp, #8
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	0801e674 	.word	0x0801e674

08009f00 <ai_platform_api_get_version>:
 8009f00:	2000      	movs	r0, #0
 8009f02:	4b0a      	ldr	r3, [pc, #40]	@ (8009f2c <ai_platform_api_get_version+0x2c>)
 8009f04:	b082      	sub	sp, #8
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	fa5f fc83 	uxtb.w	ip, r3
 8009f0c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009f10:	f36c 0007 	bfi	r0, ip, #0, #8
 8009f14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f18:	f361 200f 	bfi	r0, r1, #8, #8
 8009f1c:	0e1b      	lsrs	r3, r3, #24
 8009f1e:	f362 4017 	bfi	r0, r2, #16, #8
 8009f22:	f363 601f 	bfi	r0, r3, #24, #8
 8009f26:	b002      	add	sp, #8
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	0801e670 	.word	0x0801e670

08009f30 <ai_platform_interface_api_get_version>:
 8009f30:	2000      	movs	r0, #0
 8009f32:	4b0a      	ldr	r3, [pc, #40]	@ (8009f5c <ai_platform_interface_api_get_version+0x2c>)
 8009f34:	b082      	sub	sp, #8
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	fa5f fc83 	uxtb.w	ip, r3
 8009f3c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009f40:	f36c 0007 	bfi	r0, ip, #0, #8
 8009f44:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f48:	f361 200f 	bfi	r0, r1, #8, #8
 8009f4c:	0e1b      	lsrs	r3, r3, #24
 8009f4e:	f362 4017 	bfi	r0, r2, #16, #8
 8009f52:	f363 601f 	bfi	r0, r3, #24, #8
 8009f56:	b002      	add	sp, #8
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	0801e66c 	.word	0x0801e66c

08009f60 <ai_platform_context_acquire>:
 8009f60:	6802      	ldr	r2, [r0, #0]
 8009f62:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <ai_platform_context_acquire+0xc>)
 8009f64:	4393      	bics	r3, r2
 8009f66:	bf18      	it	ne
 8009f68:	2000      	movne	r0, #0
 8009f6a:	4770      	bx	lr
 8009f6c:	a1c00100 	.word	0xa1c00100

08009f70 <ai_platform_network_get_error>:
 8009f70:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <ai_platform_network_get_error+0x14>)
 8009f72:	6802      	ldr	r2, [r0, #0]
 8009f74:	4393      	bics	r3, r2
 8009f76:	d102      	bne.n	8009f7e <ai_platform_network_get_error+0xe>
 8009f78:	300c      	adds	r0, #12
 8009f7a:	f000 bdc3 	b.w	800ab04 <core_get_error>
 8009f7e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8009f82:	4770      	bx	lr
 8009f84:	a1c00100 	.word	0xa1c00100

08009f88 <ai_platform_network_set_error>:
 8009f88:	b110      	cbz	r0, 8009f90 <ai_platform_network_set_error+0x8>
 8009f8a:	300c      	adds	r0, #12
 8009f8c:	f000 bdc0 	b.w	800ab10 <core_set_error>
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop

08009f94 <ai_platform_inputs_get>:
 8009f94:	4b39      	ldr	r3, [pc, #228]	@ (800a07c <ai_platform_inputs_get+0xe8>)
 8009f96:	6802      	ldr	r2, [r0, #0]
 8009f98:	4393      	bics	r3, r2
 8009f9a:	d163      	bne.n	800a064 <ai_platform_inputs_get+0xd0>
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d04e      	beq.n	800a04a <ai_platform_inputs_get+0xb6>
 8009fac:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8009fae:	2f00      	cmp	r7, #0
 8009fb0:	d04b      	beq.n	800a04a <ai_platform_inputs_get+0xb6>
 8009fb2:	f04f 0b00 	mov.w	fp, #0
 8009fb6:	46ba      	mov	sl, r7
 8009fb8:	465e      	mov	r6, fp
 8009fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fbe:	e016      	b.n	8009fee <ai_platform_inputs_get+0x5a>
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	9901      	ldr	r1, [sp, #4]
 8009fc4:	507a      	str	r2, [r7, r1]
 8009fc6:	69a1      	ldr	r1, [r4, #24]
 8009fc8:	f04f 0201 	mov.w	r2, #1
 8009fcc:	684c      	ldr	r4, [r1, #4]
 8009fce:	60ab      	str	r3, [r5, #8]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	752a      	strb	r2, [r5, #20]
 8009fd4:	6028      	str	r0, [r5, #0]
 8009fd6:	6968      	ldr	r0, [r5, #20]
 8009fd8:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8009fdc:	f368 201f 	bfi	r0, r8, #8, #24
 8009fe0:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8009fe4:	f8c5 c004 	str.w	ip, [r5, #4]
 8009fe8:	3601      	adds	r6, #1
 8009fea:	f10b 0b1c 	add.w	fp, fp, #28
 8009fee:	f8ba 3000 	ldrh.w	r3, [sl]
 8009ff2:	00f2      	lsls	r2, r6, #3
 8009ff4:	42b3      	cmp	r3, r6
 8009ff6:	9201      	str	r2, [sp, #4]
 8009ff8:	d936      	bls.n	800a068 <ai_platform_inputs_get+0xd4>
 8009ffa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d032      	beq.n	800a068 <ai_platform_inputs_get+0xd4>
 800a002:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a006:	b37c      	cbz	r4, 800a068 <ai_platform_inputs_get+0xd4>
 800a008:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a00c:	69a2      	ldr	r2, [r4, #24]
 800a00e:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 800a012:	68a3      	ldr	r3, [r4, #8]
 800a014:	6810      	ldr	r0, [r2, #0]
 800a016:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800a01a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800a01e:	f002 fa73 	bl	800c508 <ai_array_to_buffer_fmt>
 800a022:	69a1      	ldr	r1, [r4, #24]
 800a024:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a028:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a02c:	445d      	add	r5, fp
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0ca      	beq.n	8009fc8 <ai_platform_inputs_get+0x34>
 800a032:	2100      	movs	r1, #0
 800a034:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 800a038:	6821      	ldr	r1, [r4, #0]
 800a03a:	6059      	str	r1, [r3, #4]
 800a03c:	b111      	cbz	r1, 800a044 <ai_platform_inputs_get+0xb0>
 800a03e:	8849      	ldrh	r1, [r1, #2]
 800a040:	2900      	cmp	r1, #0
 800a042:	d1bd      	bne.n	8009fc0 <ai_platform_inputs_get+0x2c>
 800a044:	2300      	movs	r3, #0
 800a046:	69a1      	ldr	r1, [r4, #24]
 800a048:	e7be      	b.n	8009fc8 <ai_platform_inputs_get+0x34>
 800a04a:	2600      	movs	r6, #0
 800a04c:	2218      	movs	r2, #24
 800a04e:	2111      	movs	r1, #17
 800a050:	f105 000c 	add.w	r0, r5, #12
 800a054:	f000 fd5c 	bl	800ab10 <core_set_error>
 800a058:	4630      	mov	r0, r6
 800a05a:	b104      	cbz	r4, 800a05e <ai_platform_inputs_get+0xca>
 800a05c:	8026      	strh	r6, [r4, #0]
 800a05e:	b005      	add	sp, #20
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a064:	2000      	movs	r0, #0
 800a066:	4770      	bx	lr
 800a068:	b2b6      	uxth	r6, r6
 800a06a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d0eb      	beq.n	800a04a <ai_platform_inputs_get+0xb6>
 800a072:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a076:	6858      	ldr	r0, [r3, #4]
 800a078:	e7ef      	b.n	800a05a <ai_platform_inputs_get+0xc6>
 800a07a:	bf00      	nop
 800a07c:	a1c00100 	.word	0xa1c00100

0800a080 <ai_platform_outputs_get>:
 800a080:	4b37      	ldr	r3, [pc, #220]	@ (800a160 <ai_platform_outputs_get+0xe0>)
 800a082:	6802      	ldr	r2, [r0, #0]
 800a084:	4393      	bics	r3, r2
 800a086:	d169      	bne.n	800a15c <ai_platform_outputs_get+0xdc>
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a08e:	4605      	mov	r5, r0
 800a090:	2b01      	cmp	r3, #1
 800a092:	460c      	mov	r4, r1
 800a094:	b085      	sub	sp, #20
 800a096:	d94b      	bls.n	800a130 <ai_platform_outputs_get+0xb0>
 800a098:	f04f 0b00 	mov.w	fp, #0
 800a09c:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 800a09e:	465e      	mov	r6, fp
 800a0a0:	46d8      	mov	r8, fp
 800a0a2:	46ba      	mov	sl, r7
 800a0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a8:	e016      	b.n	800a0d8 <ai_platform_outputs_get+0x58>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	9901      	ldr	r1, [sp, #4]
 800a0ae:	507a      	str	r2, [r7, r1]
 800a0b0:	69a9      	ldr	r1, [r5, #24]
 800a0b2:	f04f 0201 	mov.w	r2, #1
 800a0b6:	684d      	ldr	r5, [r1, #4]
 800a0b8:	7522      	strb	r2, [r4, #20]
 800a0ba:	6020      	str	r0, [r4, #0]
 800a0bc:	6960      	ldr	r0, [r4, #20]
 800a0be:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800a0c2:	f369 201f 	bfi	r0, r9, #8, #24
 800a0c6:	e9c4 5004 	strd	r5, r0, [r4, #16]
 800a0ca:	9b00      	ldr	r3, [sp, #0]
 800a0cc:	f8c4 c004 	str.w	ip, [r4, #4]
 800a0d0:	61a3      	str	r3, [r4, #24]
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	f10b 0b1c 	add.w	fp, fp, #28
 800a0d8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a0dc:	00f2      	lsls	r2, r6, #3
 800a0de:	42b3      	cmp	r3, r6
 800a0e0:	9201      	str	r2, [sp, #4]
 800a0e2:	d932      	bls.n	800a14a <ai_platform_outputs_get+0xca>
 800a0e4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a0e8:	b37b      	cbz	r3, 800a14a <ai_platform_outputs_get+0xca>
 800a0ea:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a0ee:	b365      	cbz	r5, 800a14a <ai_platform_outputs_get+0xca>
 800a0f0:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a0f4:	69aa      	ldr	r2, [r5, #24]
 800a0f6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a0fa:	68ab      	ldr	r3, [r5, #8]
 800a0fc:	6810      	ldr	r0, [r2, #0]
 800a0fe:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a102:	68eb      	ldr	r3, [r5, #12]
 800a104:	445c      	add	r4, fp
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	f002 f9fe 	bl	800c508 <ai_array_to_buffer_fmt>
 800a10c:	69a9      	ldr	r1, [r5, #24]
 800a10e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a112:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0cb      	beq.n	800a0b2 <ai_platform_outputs_get+0x32>
 800a11a:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 800a11e:	6829      	ldr	r1, [r5, #0]
 800a120:	6059      	str	r1, [r3, #4]
 800a122:	b111      	cbz	r1, 800a12a <ai_platform_outputs_get+0xaa>
 800a124:	8849      	ldrh	r1, [r1, #2]
 800a126:	2900      	cmp	r1, #0
 800a128:	d1bf      	bne.n	800a0aa <ai_platform_outputs_get+0x2a>
 800a12a:	2300      	movs	r3, #0
 800a12c:	69a9      	ldr	r1, [r5, #24]
 800a12e:	e7c0      	b.n	800a0b2 <ai_platform_outputs_get+0x32>
 800a130:	2600      	movs	r6, #0
 800a132:	2218      	movs	r2, #24
 800a134:	2111      	movs	r1, #17
 800a136:	f105 000c 	add.w	r0, r5, #12
 800a13a:	f000 fce9 	bl	800ab10 <core_set_error>
 800a13e:	4630      	mov	r0, r6
 800a140:	b104      	cbz	r4, 800a144 <ai_platform_outputs_get+0xc4>
 800a142:	8026      	strh	r6, [r4, #0]
 800a144:	b005      	add	sp, #20
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	b2b6      	uxth	r6, r6
 800a14c:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800a150:	2e00      	cmp	r6, #0
 800a152:	d0ed      	beq.n	800a130 <ai_platform_outputs_get+0xb0>
 800a154:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a158:	6858      	ldr	r0, [r3, #4]
 800a15a:	e7f1      	b.n	800a140 <ai_platform_outputs_get+0xc0>
 800a15c:	2000      	movs	r0, #0
 800a15e:	4770      	bx	lr
 800a160:	a1c00100 	.word	0xa1c00100

0800a164 <ai_platform_api_get_network_report>:
 800a164:	4b9f      	ldr	r3, [pc, #636]	@ (800a3e4 <ai_platform_api_get_network_report+0x280>)
 800a166:	6802      	ldr	r2, [r0, #0]
 800a168:	4393      	bics	r3, r2
 800a16a:	f040 8181 	bne.w	800a470 <ai_platform_api_get_network_report+0x30c>
 800a16e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a172:	460d      	mov	r5, r1
 800a174:	b089      	sub	sp, #36	@ 0x24
 800a176:	2900      	cmp	r1, #0
 800a178:	d075      	beq.n	800a266 <ai_platform_api_get_network_report+0x102>
 800a17a:	2300      	movs	r3, #0
 800a17c:	67cb      	str	r3, [r1, #124]	@ 0x7c
 800a17e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a180:	4682      	mov	sl, r0
 800a182:	2201      	movs	r2, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 8125 	beq.w	800a3d4 <ai_platform_api_get_network_report+0x270>
 800a18a:	4619      	mov	r1, r3
 800a18c:	67ea      	str	r2, [r5, #124]	@ 0x7c
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	428b      	cmp	r3, r1
 800a192:	d007      	beq.n	800a1a4 <ai_platform_api_get_network_report+0x40>
 800a194:	1c51      	adds	r1, r2, #1
 800a196:	b12b      	cbz	r3, 800a1a4 <ai_platform_api_get_network_report+0x40>
 800a198:	460a      	mov	r2, r1
 800a19a:	4619      	mov	r1, r3
 800a19c:	67ea      	str	r2, [r5, #124]	@ 0x7c
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	428b      	cmp	r3, r1
 800a1a2:	d1f7      	bne.n	800a194 <ai_platform_api_get_network_report+0x30>
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	f000 8115 	beq.w	800a3d4 <ai_platform_api_get_network_report+0x270>
 800a1aa:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d050      	beq.n	800a254 <ai_platform_api_get_network_report+0xf0>
 800a1b2:	f8da 7034 	ldr.w	r7, [sl, #52]	@ 0x34
 800a1b6:	2f00      	cmp	r7, #0
 800a1b8:	d04c      	beq.n	800a254 <ai_platform_api_get_network_report+0xf0>
 800a1ba:	f04f 0b00 	mov.w	fp, #0
 800a1be:	f8cd a008 	str.w	sl, [sp, #8]
 800a1c2:	465e      	mov	r6, fp
 800a1c4:	46ba      	mov	sl, r7
 800a1c6:	9503      	str	r5, [sp, #12]
 800a1c8:	e016      	b.n	800a1f8 <ai_platform_api_get_network_report+0x94>
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	00f1      	lsls	r1, r6, #3
 800a1ce:	507a      	str	r2, [r7, r1]
 800a1d0:	69a9      	ldr	r1, [r5, #24]
 800a1d2:	684d      	ldr	r5, [r1, #4]
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	f04f 0301 	mov.w	r3, #1
 800a1da:	7523      	strb	r3, [r4, #20]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a1e2:	6963      	ldr	r3, [r4, #20]
 800a1e4:	e9c4 0c00 	strd	r0, ip, [r4]
 800a1e8:	f369 231f 	bfi	r3, r9, #8, #24
 800a1ec:	f8c4 8018 	str.w	r8, [r4, #24]
 800a1f0:	6163      	str	r3, [r4, #20]
 800a1f2:	3601      	adds	r6, #1
 800a1f4:	f10b 0b1c 	add.w	fp, fp, #28
 800a1f8:	f8ba 3000 	ldrh.w	r3, [sl]
 800a1fc:	42b3      	cmp	r3, r6
 800a1fe:	d936      	bls.n	800a26e <ai_platform_api_get_network_report+0x10a>
 800a200:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d032      	beq.n	800a26e <ai_platform_api_get_network_report+0x10a>
 800a208:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a20c:	b37d      	cbz	r5, 800a26e <ai_platform_api_get_network_report+0x10a>
 800a20e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a212:	00f1      	lsls	r1, r6, #3
 800a214:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a218:	69ab      	ldr	r3, [r5, #24]
 800a21a:	9101      	str	r1, [sp, #4]
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	68ab      	ldr	r3, [r5, #8]
 800a220:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800a224:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a228:	f002 f96e 	bl	800c508 <ai_array_to_buffer_fmt>
 800a22c:	69a9      	ldr	r1, [r5, #24]
 800a22e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a232:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a236:	445c      	add	r4, fp
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d0ca      	beq.n	800a1d2 <ai_platform_api_get_network_report+0x6e>
 800a23c:	2200      	movs	r2, #0
 800a23e:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
 800a242:	6829      	ldr	r1, [r5, #0]
 800a244:	6059      	str	r1, [r3, #4]
 800a246:	b111      	cbz	r1, 800a24e <ai_platform_api_get_network_report+0xea>
 800a248:	8849      	ldrh	r1, [r1, #2]
 800a24a:	2900      	cmp	r1, #0
 800a24c:	d1bd      	bne.n	800a1ca <ai_platform_api_get_network_report+0x66>
 800a24e:	2300      	movs	r3, #0
 800a250:	69a9      	ldr	r1, [r5, #24]
 800a252:	e7be      	b.n	800a1d2 <ai_platform_api_get_network_report+0x6e>
 800a254:	2300      	movs	r3, #0
 800a256:	2218      	movs	r2, #24
 800a258:	2112      	movs	r1, #18
 800a25a:	f10a 000c 	add.w	r0, sl, #12
 800a25e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800a260:	872b      	strh	r3, [r5, #56]	@ 0x38
 800a262:	f000 fc55 	bl	800ab10 <core_set_error>
 800a266:	2000      	movs	r0, #0
 800a268:	b009      	add	sp, #36	@ 0x24
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	b2b6      	uxth	r6, r6
 800a270:	4657      	mov	r7, sl
 800a272:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800a276:	2e00      	cmp	r6, #0
 800a278:	d0ec      	beq.n	800a254 <ai_platform_api_get_network_report+0xf0>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	872e      	strh	r6, [r5, #56]	@ 0x38
 800a280:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800a282:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 800a286:	2b01      	cmp	r3, #1
 800a288:	f240 809a 	bls.w	800a3c0 <ai_platform_api_get_network_report+0x25c>
 800a28c:	f04f 0900 	mov.w	r9, #0
 800a290:	e9cd a502 	strd	sl, r5, [sp, #8]
 800a294:	464f      	mov	r7, r9
 800a296:	46cb      	mov	fp, r9
 800a298:	f8da 8034 	ldr.w	r8, [sl, #52]	@ 0x34
 800a29c:	e016      	b.n	800a2cc <ai_platform_api_get_network_report+0x168>
 800a29e:	2101      	movs	r1, #1
 800a2a0:	f84a 100e 	str.w	r1, [sl, lr]
 800a2a4:	69a9      	ldr	r1, [r5, #24]
 800a2a6:	6849      	ldr	r1, [r1, #4]
 800a2a8:	60a3      	str	r3, [r4, #8]
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	e9c4 0200 	strd	r0, r2, [r4]
 800a2b0:	61a3      	str	r3, [r4, #24]
 800a2b2:	f04f 0301 	mov.w	r3, #1
 800a2b6:	7523      	strb	r3, [r4, #20]
 800a2b8:	6963      	ldr	r3, [r4, #20]
 800a2ba:	6121      	str	r1, [r4, #16]
 800a2bc:	f366 231f 	bfi	r3, r6, #8, #24
 800a2c0:	f8c4 b00c 	str.w	fp, [r4, #12]
 800a2c4:	3701      	adds	r7, #1
 800a2c6:	f109 091c 	add.w	r9, r9, #28
 800a2ca:	6163      	str	r3, [r4, #20]
 800a2cc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a2d0:	429f      	cmp	r7, r3
 800a2d2:	d226      	bcs.n	800a322 <ai_platform_api_get_network_report+0x1be>
 800a2d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a2d8:	b31b      	cbz	r3, 800a322 <ai_platform_api_get_network_report+0x1be>
 800a2da:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800a2de:	b305      	cbz	r5, 800a322 <ai_platform_api_get_network_report+0x1be>
 800a2e0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a2e4:	68ae      	ldr	r6, [r5, #8]
 800a2e6:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 800a2ea:	69ab      	ldr	r3, [r5, #24]
 800a2ec:	444c      	add	r4, r9
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	68eb      	ldr	r3, [r5, #12]
 800a2f2:	f3c6 2617 	ubfx	r6, r6, #8, #24
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	f002 f906 	bl	800c508 <ai_array_to_buffer_fmt>
 800a2fc:	69a9      	ldr	r1, [r5, #24]
 800a2fe:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 800a302:	688a      	ldr	r2, [r1, #8]
 800a304:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0cc      	beq.n	800a2a6 <ai_platform_api_get_network_report+0x142>
 800a30c:	f84a b037 	str.w	fp, [sl, r7, lsl #3]
 800a310:	6829      	ldr	r1, [r5, #0]
 800a312:	6059      	str	r1, [r3, #4]
 800a314:	b111      	cbz	r1, 800a31c <ai_platform_api_get_network_report+0x1b8>
 800a316:	8849      	ldrh	r1, [r1, #2]
 800a318:	2900      	cmp	r1, #0
 800a31a:	d1c0      	bne.n	800a29e <ai_platform_api_get_network_report+0x13a>
 800a31c:	2300      	movs	r3, #0
 800a31e:	69a9      	ldr	r1, [r5, #24]
 800a320:	e7c1      	b.n	800a2a6 <ai_platform_api_get_network_report+0x142>
 800a322:	b2bf      	uxth	r7, r7
 800a324:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800a328:	2f00      	cmp	r7, #0
 800a32a:	d049      	beq.n	800a3c0 <ai_platform_api_get_network_report+0x25c>
 800a32c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a330:	f10a 0828 	add.w	r8, sl, #40	@ 0x28
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	4640      	mov	r0, r8
 800a338:	876f      	strh	r7, [r5, #58]	@ 0x3a
 800a33a:	642b      	str	r3, [r5, #64]	@ 0x40
 800a33c:	f7ff fce8 	bl	8009d10 <ai_buffer_array_sane>
 800a340:	b968      	cbnz	r0, 800a35e <ai_platform_api_get_network_report+0x1fa>
 800a342:	4640      	mov	r0, r8
 800a344:	f7ff fce4 	bl	8009d10 <ai_buffer_array_sane>
 800a348:	b148      	cbz	r0, 800a35e <ai_platform_api_get_network_report+0x1fa>
 800a34a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	@ 0x2a
 800a34e:	b133      	cbz	r3, 800a35e <ai_platform_api_get_network_report+0x1fa>
 800a350:	2213      	movs	r2, #19
 800a352:	2111      	movs	r1, #17
 800a354:	f10a 000c 	add.w	r0, sl, #12
 800a358:	f000 fbda 	bl	800ab10 <core_set_error>
 800a35c:	e783      	b.n	800a266 <ai_platform_api_get_network_report+0x102>
 800a35e:	f10a 0720 	add.w	r7, sl, #32
 800a362:	4638      	mov	r0, r7
 800a364:	f7ff fcd4 	bl	8009d10 <ai_buffer_array_sane>
 800a368:	b920      	cbnz	r0, 800a374 <ai_platform_api_get_network_report+0x210>
 800a36a:	4638      	mov	r0, r7
 800a36c:	f7ff fcd0 	bl	8009d10 <ai_buffer_array_sane>
 800a370:	2800      	cmp	r0, #0
 800a372:	d172      	bne.n	800a45a <ai_platform_api_get_network_report+0x2f6>
 800a374:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a378:	f240 2201 	movw	r2, #513	@ 0x201
 800a37c:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 800a380:	4b19      	ldr	r3, [pc, #100]	@ (800a3e8 <ai_platform_api_get_network_report+0x284>)
 800a382:	626a      	str	r2, [r5, #36]	@ 0x24
 800a384:	612b      	str	r3, [r5, #16]
 800a386:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 800a38a:	616b      	str	r3, [r5, #20]
 800a38c:	f240 5301 	movw	r3, #1281	@ 0x501
 800a390:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a392:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a396:	f002 f93d 	bl	800c614 <ai_platform_version_get>
 800a39a:	4b14      	ldr	r3, [pc, #80]	@ (800a3ec <ai_platform_api_get_network_report+0x288>)
 800a39c:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800a39e:	6228      	str	r0, [r5, #32]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d125      	bne.n	800a3f0 <ai_platform_api_get_network_report+0x28c>
 800a3a4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a3a8:	f105 0350 	add.w	r3, r5, #80	@ 0x50
 800a3ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3b0:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 800a3b4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a3b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3bc:	2001      	movs	r0, #1
 800a3be:	e753      	b.n	800a268 <ai_platform_api_get_network_report+0x104>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2218      	movs	r2, #24
 800a3c4:	2113      	movs	r1, #19
 800a3c6:	f10a 000c 	add.w	r0, sl, #12
 800a3ca:	642b      	str	r3, [r5, #64]	@ 0x40
 800a3cc:	876b      	strh	r3, [r5, #58]	@ 0x3a
 800a3ce:	f000 fb9f 	bl	800ab10 <core_set_error>
 800a3d2:	e748      	b.n	800a266 <ai_platform_api_get_network_report+0x102>
 800a3d4:	2218      	movs	r2, #24
 800a3d6:	2111      	movs	r1, #17
 800a3d8:	f10a 000c 	add.w	r0, sl, #12
 800a3dc:	f000 fb98 	bl	800ab10 <core_set_error>
 800a3e0:	e741      	b.n	800a266 <ai_platform_api_get_network_report+0x102>
 800a3e2:	bf00      	nop
 800a3e4:	a1c00100 	.word	0xa1c00100
 800a3e8:	0800f89c 	.word	0x0800f89c
 800a3ec:	a1facade 	.word	0xa1facade
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f240 4101 	movw	r1, #1025	@ 0x401
 800a3f6:	f105 0b60 	add.w	fp, r5, #96	@ 0x60
 800a3fa:	f105 0944 	add.w	r9, r5, #68	@ 0x44
 800a3fe:	465c      	mov	r4, fp
 800a400:	464e      	mov	r6, r9
 800a402:	e9c5 2212 	strd	r2, r2, [r5, #72]	@ 0x48
 800a406:	e9c5 2214 	strd	r2, r2, [r5, #80]	@ 0x50
 800a40a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4b4 <ai_platform_api_get_network_report+0x350>)
 800a40c:	f10d 0c10 	add.w	ip, sp, #16
 800a410:	4b29      	ldr	r3, [pc, #164]	@ (800a4b8 <ai_platform_api_get_network_report+0x354>)
 800a412:	65a9      	str	r1, [r5, #88]	@ 0x58
 800a414:	646a      	str	r2, [r5, #68]	@ 0x44
 800a416:	f8c5 c05c 	str.w	ip, [r5, #92]	@ 0x5c
 800a41a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a41c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a424:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a42c:	4640      	mov	r0, r8
 800a42e:	f7ff fc6f 	bl	8009d10 <ai_buffer_array_sane>
 800a432:	b9f8      	cbnz	r0, 800a474 <ai_platform_api_get_network_report+0x310>
 800a434:	4638      	mov	r0, r7
 800a436:	f7ff fc6b 	bl	8009d10 <ai_buffer_array_sane>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d0be      	beq.n	800a3bc <ai_platform_api_get_network_report+0x258>
 800a43e:	4638      	mov	r0, r7
 800a440:	f7ff fc66 	bl	8009d10 <ai_buffer_array_sane>
 800a444:	b320      	cbz	r0, 800a490 <ai_platform_api_get_network_report+0x32c>
 800a446:	f8da 4024 	ldr.w	r4, [sl, #36]	@ 0x24
 800a44a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a44c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800a450:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a454:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800a458:	e7b0      	b.n	800a3bc <ai_platform_api_get_network_report+0x258>
 800a45a:	f8ba 3022 	ldrh.w	r3, [sl, #34]	@ 0x22
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d088      	beq.n	800a374 <ai_platform_api_get_network_report+0x210>
 800a462:	2212      	movs	r2, #18
 800a464:	2111      	movs	r1, #17
 800a466:	f10a 000c 	add.w	r0, sl, #12
 800a46a:	f000 fb51 	bl	800ab10 <core_set_error>
 800a46e:	e6fa      	b.n	800a266 <ai_platform_api_get_network_report+0x102>
 800a470:	2000      	movs	r0, #0
 800a472:	4770      	bx	lr
 800a474:	4640      	mov	r0, r8
 800a476:	f7ff fc4b 	bl	8009d10 <ai_buffer_array_sane>
 800a47a:	b190      	cbz	r0, 800a4a2 <ai_platform_api_get_network_report+0x33e>
 800a47c:	f8da 402c 	ldr.w	r4, [sl, #44]	@ 0x2c
 800a480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a482:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800a486:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a48a:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a48e:	e7d1      	b.n	800a434 <ai_platform_api_get_network_report+0x2d0>
 800a490:	4604      	mov	r4, r0
 800a492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a494:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800a498:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a49c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800a4a0:	deff      	udf	#255	@ 0xff
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4a6:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800a4aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a4ae:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a4b2:	deff      	udf	#255	@ 0xff
 800a4b4:	00040440 	.word	0x00040440
 800a4b8:	0800f7b0 	.word	0x0800f7b0

0800a4bc <ai_platform_network_create>:
 800a4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800a4c6:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800a4ca:	b320      	cbz	r0, 800a516 <ai_platform_network_create+0x5a>
 800a4cc:	6002      	str	r2, [r0, #0]
 800a4ce:	4616      	mov	r6, r2
 800a4d0:	461f      	mov	r7, r3
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	f000 fb14 	bl	800ab00 <core_init>
 800a4d8:	b970      	cbnz	r0, 800a4f8 <ai_platform_network_create+0x3c>
 800a4da:	2530      	movs	r5, #48	@ 0x30
 800a4dc:	2300      	movs	r3, #0
 800a4de:	6023      	str	r3, [r4, #0]
 800a4e0:	2410      	movs	r4, #16
 800a4e2:	464a      	mov	r2, r9
 800a4e4:	4641      	mov	r1, r8
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f002 f88e 	bl	800c608 <ai_version_get>
 800a4ec:	60b0      	str	r0, [r6, #8]
 800a4ee:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800a4f2:	b003      	add	sp, #12
 800a4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	f002 f883 	bl	800c608 <ai_version_get>
 800a502:	2200      	movs	r2, #0
 800a504:	4605      	mov	r5, r0
 800a506:	2105      	movs	r1, #5
 800a508:	2001      	movs	r0, #1
 800a50a:	f002 f87d 	bl	800c608 <ai_version_get>
 800a50e:	4285      	cmp	r5, r0
 800a510:	d008      	beq.n	800a524 <ai_platform_network_create+0x68>
 800a512:	2501      	movs	r5, #1
 800a514:	e7e2      	b.n	800a4dc <ai_platform_network_create+0x20>
 800a516:	2510      	movs	r5, #16
 800a518:	462c      	mov	r4, r5
 800a51a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800a51e:	b003      	add	sp, #12
 800a520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a524:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <ai_platform_network_create+0x80>)
 800a526:	a801      	add	r0, sp, #4
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	f000 fafd 	bl	800ab28 <ai_check_custom_types>
 800a52e:	b110      	cbz	r0, 800a536 <ai_platform_network_create+0x7a>
 800a530:	2400      	movs	r4, #0
 800a532:	4625      	mov	r5, r4
 800a534:	e7d5      	b.n	800a4e2 <ai_platform_network_create+0x26>
 800a536:	2502      	movs	r5, #2
 800a538:	e7d0      	b.n	800a4dc <ai_platform_network_create+0x20>
 800a53a:	bf00      	nop
 800a53c:	84048403 	.word	0x84048403

0800a540 <ai_platform_network_init>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	4a48      	ldr	r2, [pc, #288]	@ (800a668 <ai_platform_network_init+0x128>)
 800a546:	460b      	mov	r3, r1
 800a548:	6801      	ldr	r1, [r0, #0]
 800a54a:	4604      	mov	r4, r0
 800a54c:	ea01 0002 	and.w	r0, r1, r2
 800a550:	438a      	bics	r2, r1
 800a552:	d13b      	bne.n	800a5cc <ai_platform_network_init+0x8c>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d078      	beq.n	800a64a <ai_platform_network_init+0x10a>
 800a558:	4a44      	ldr	r2, [pc, #272]	@ (800a66c <ai_platform_network_init+0x12c>)
 800a55a:	681d      	ldr	r5, [r3, #0]
 800a55c:	4295      	cmp	r5, r2
 800a55e:	d10a      	bne.n	800a576 <ai_platform_network_init+0x36>
 800a560:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 800a564:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 800a568:	4281      	cmp	r1, r0
 800a56a:	d03d      	beq.n	800a5e8 <ai_platform_network_init+0xa8>
 800a56c:	2303      	movs	r3, #3
 800a56e:	4620      	mov	r0, r4
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a576:	461d      	mov	r5, r3
 800a578:	2101      	movs	r1, #1
 800a57a:	4618      	mov	r0, r3
 800a57c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800a580:	f7ff fb94 	bl	8009cac <ai_buffer_get_size>
 800a584:	f105 071c 	add.w	r7, r5, #28
 800a588:	4606      	mov	r6, r0
 800a58a:	2101      	movs	r1, #1
 800a58c:	4638      	mov	r0, r7
 800a58e:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a592:	f7ff fb8b 	bl	8009cac <ai_buffer_get_size>
 800a596:	2e00      	cmp	r6, #0
 800a598:	bf0a      	itet	eq
 800a59a:	4631      	moveq	r1, r6
 800a59c:	2101      	movne	r1, #1
 800a59e:	4635      	moveq	r5, r6
 800a5a0:	b1b0      	cbz	r0, 800a5d0 <ai_platform_network_init+0x90>
 800a5a2:	f1b9 0f00 	cmp.w	r9, #0
 800a5a6:	d057      	beq.n	800a658 <ai_platform_network_init+0x118>
 800a5a8:	f04f 0e01 	mov.w	lr, #1
 800a5ac:	f1b8 0f00 	cmp.w	r8, #0
 800a5b0:	d011      	beq.n	800a5d6 <ai_platform_network_init+0x96>
 800a5b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a668 <ai_platform_network_init+0x128>)
 800a5b4:	6822      	ldr	r2, [r4, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d1d8      	bne.n	800a56c <ai_platform_network_init+0x2c>
 800a5ba:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800a5bc:	428b      	cmp	r3, r1
 800a5be:	d21b      	bcs.n	800a5f8 <ai_platform_network_init+0xb8>
 800a5c0:	2212      	movs	r2, #18
 800a5c2:	2116      	movs	r1, #22
 800a5c4:	f104 000c 	add.w	r0, r4, #12
 800a5c8:	f000 faa2 	bl	800ab10 <core_set_error>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e7d0      	b.n	800a572 <ai_platform_network_init+0x32>
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	4686      	mov	lr, r0
 800a5d4:	e7ea      	b.n	800a5ac <ai_platform_network_init+0x6c>
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d0eb      	beq.n	800a5b2 <ai_platform_network_init+0x72>
 800a5da:	2212      	movs	r2, #18
 800a5dc:	2110      	movs	r1, #16
 800a5de:	f104 000c 	add.w	r0, r4, #12
 800a5e2:	f000 fa95 	bl	800ab10 <core_set_error>
 800a5e6:	e7f1      	b.n	800a5cc <ai_platform_network_init+0x8c>
 800a5e8:	e9c4 6308 	strd	r6, r3, [r4, #32]
 800a5ec:	62e5      	str	r5, [r4, #44]	@ 0x2c
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	62a2      	str	r2, [r4, #40]	@ 0x28
 800a5f2:	f000 fac1 	bl	800ab78 <ai_layers_init_all>
 800a5f6:	e7b9      	b.n	800a56c <ai_platform_network_init+0x2c>
 800a5f8:	b1e1      	cbz	r1, 800a634 <ai_platform_network_init+0xf4>
 800a5fa:	46ac      	mov	ip, r5
 800a5fc:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800a600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a604:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a608:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a60c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a610:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a612:	6226      	str	r6, [r4, #32]
 800a614:	4573      	cmp	r3, lr
 800a616:	d311      	bcc.n	800a63c <ai_platform_network_init+0xfc>
 800a618:	f1be 0f00 	cmp.w	lr, #0
 800a61c:	d007      	beq.n	800a62e <ai_platform_network_init+0xee>
 800a61e:	463e      	mov	r6, r7
 800a620:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800a622:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a626:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a62a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a62e:	ea4f 420e 	mov.w	r2, lr, lsl #16
 800a632:	e7dc      	b.n	800a5ee <ai_platform_network_init+0xae>
 800a634:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a636:	6221      	str	r1, [r4, #32]
 800a638:	4573      	cmp	r3, lr
 800a63a:	d2ed      	bcs.n	800a618 <ai_platform_network_init+0xd8>
 800a63c:	2213      	movs	r2, #19
 800a63e:	2116      	movs	r1, #22
 800a640:	f104 000c 	add.w	r0, r4, #12
 800a644:	f000 fa64 	bl	800ab10 <core_set_error>
 800a648:	e7c0      	b.n	800a5cc <ai_platform_network_init+0x8c>
 800a64a:	2211      	movs	r2, #17
 800a64c:	2110      	movs	r1, #16
 800a64e:	f104 000c 	add.w	r0, r4, #12
 800a652:	f000 fa5d 	bl	800ab10 <core_set_error>
 800a656:	e7b9      	b.n	800a5cc <ai_platform_network_init+0x8c>
 800a658:	2213      	movs	r2, #19
 800a65a:	2110      	movs	r1, #16
 800a65c:	f104 000c 	add.w	r0, r4, #12
 800a660:	f000 fa56 	bl	800ab10 <core_set_error>
 800a664:	e7b2      	b.n	800a5cc <ai_platform_network_init+0x8c>
 800a666:	bf00      	nop
 800a668:	a1c00100 	.word	0xa1c00100
 800a66c:	a1facade 	.word	0xa1facade

0800a670 <ai_platform_network_post_init>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4b14      	ldr	r3, [pc, #80]	@ (800a6c4 <ai_platform_network_post_init+0x54>)
 800a674:	6802      	ldr	r2, [r0, #0]
 800a676:	ea02 0103 	and.w	r1, r2, r3
 800a67a:	4393      	bics	r3, r2
 800a67c:	d10c      	bne.n	800a698 <ai_platform_network_post_init+0x28>
 800a67e:	6903      	ldr	r3, [r0, #16]
 800a680:	4604      	mov	r4, r0
 800a682:	079b      	lsls	r3, r3, #30
 800a684:	d503      	bpl.n	800a68e <ai_platform_network_post_init+0x1e>
 800a686:	428a      	cmp	r2, r1
 800a688:	d008      	beq.n	800a69c <ai_platform_network_post_init+0x2c>
 800a68a:	2001      	movs	r0, #1
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
 800a68e:	2210      	movs	r2, #16
 800a690:	2111      	movs	r1, #17
 800a692:	300c      	adds	r0, #12
 800a694:	f000 fa3c 	bl	800ab10 <core_set_error>
 800a698:	2000      	movs	r0, #0
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	f000 fa7c 	bl	800ab98 <ai_layers_post_init_all>
 800a6a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0f1      	beq.n	800a68a <ai_platform_network_post_init+0x1a>
 800a6a6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	d0ee      	beq.n	800a68a <ai_platform_network_post_init+0x1a>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a6b2:	4798      	blx	r3
 800a6b4:	692b      	ldr	r3, [r5, #16]
 800a6b6:	42ab      	cmp	r3, r5
 800a6b8:	d0e7      	beq.n	800a68a <ai_platform_network_post_init+0x1a>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0e5      	beq.n	800a68a <ai_platform_network_post_init+0x1a>
 800a6be:	461d      	mov	r5, r3
 800a6c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6c2:	e7f3      	b.n	800a6ac <ai_platform_network_post_init+0x3c>
 800a6c4:	a1c00100 	.word	0xa1c00100

0800a6c8 <ai_platform_network_process>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	4bb7      	ldr	r3, [pc, #732]	@ (800a9ac <ai_platform_network_process+0x2e4>)
 800a6ce:	4690      	mov	r8, r2
 800a6d0:	6802      	ldr	r2, [r0, #0]
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	4393      	bics	r3, r2
 800a6d6:	f040 812d 	bne.w	800a934 <ai_platform_network_process+0x26c>
 800a6da:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a6dc:	4607      	mov	r7, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 811c 	beq.w	800a91c <ai_platform_network_process+0x254>
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	6903      	ldr	r3, [r0, #16]
 800a6e8:	f8d0 9034 	ldr.w	r9, [r0, #52]	@ 0x34
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	6186      	str	r6, [r0, #24]
 800a6f4:	f040 8128 	bne.w	800a948 <ai_platform_network_process+0x280>
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	f000 8115 	beq.w	800a928 <ai_platform_network_process+0x260>
 800a6fe:	f1b9 0f00 	cmp.w	r9, #0
 800a702:	f000 8111 	beq.w	800a928 <ai_platform_network_process+0x260>
 800a706:	f8b9 3000 	ldrh.w	r3, [r9]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 810c 	beq.w	800a928 <ai_platform_network_process+0x260>
 800a710:	460c      	mov	r4, r1
 800a712:	698b      	ldr	r3, [r1, #24]
 800a714:	e9cd 0802 	strd	r0, r8, [sp, #8]
 800a718:	f8d3 b000 	ldr.w	fp, [r3]
 800a71c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d071      	beq.n	800a808 <ai_platform_network_process+0x140>
 800a724:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a728:	2d00      	cmp	r5, #0
 800a72a:	d06d      	beq.n	800a808 <ai_platform_network_process+0x140>
 800a72c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a730:	f8d3 a000 	ldr.w	sl, [r3]
 800a734:	0133      	lsls	r3, r6, #4
 800a736:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	f000 81b8 	beq.w	800aab0 <ai_platform_network_process+0x3e8>
 800a740:	69ab      	ldr	r3, [r5, #24]
 800a742:	2101      	movs	r1, #1
 800a744:	4620      	mov	r0, r4
 800a746:	685f      	ldr	r7, [r3, #4]
 800a748:	f7ff fab0 	bl	8009cac <ai_buffer_get_size>
 800a74c:	4287      	cmp	r7, r0
 800a74e:	f0c0 8102 	bcc.w	800a956 <ai_platform_network_process+0x28e>
 800a752:	68e8      	ldr	r0, [r5, #12]
 800a754:	69a1      	ldr	r1, [r4, #24]
 800a756:	68c2      	ldr	r2, [r0, #12]
 800a758:	68cb      	ldr	r3, [r1, #12]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	f040 80fb 	bne.w	800a956 <ai_platform_network_process+0x28e>
 800a760:	6882      	ldr	r2, [r0, #8]
 800a762:	688b      	ldr	r3, [r1, #8]
 800a764:	429a      	cmp	r2, r3
 800a766:	f040 80f6 	bne.w	800a956 <ai_platform_network_process+0x28e>
 800a76a:	6842      	ldr	r2, [r0, #4]
 800a76c:	684b      	ldr	r3, [r1, #4]
 800a76e:	429a      	cmp	r2, r3
 800a770:	f040 80f1 	bne.w	800a956 <ai_platform_network_process+0x28e>
 800a774:	69ab      	ldr	r3, [r5, #24]
 800a776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a77a:	f001 ff35 	bl	800c5e8 <ai_array_get_data_byte_size>
 800a77e:	4603      	mov	r3, r0
 800a780:	4628      	mov	r0, r5
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	f001 ff58 	bl	800c638 <get_tensor_byte_size>
 800a788:	9b01      	ldr	r3, [sp, #4]
 800a78a:	4283      	cmp	r3, r0
 800a78c:	f0c0 80e3 	bcc.w	800a956 <ai_platform_network_process+0x28e>
 800a790:	69ab      	ldr	r3, [r5, #24]
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	f001 feb8 	bl	800c508 <ai_array_to_buffer_fmt>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	4058      	eors	r0, r3
 800a79c:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 800a7a0:	f040 8190 	bne.w	800aac4 <ai_platform_network_process+0x3fc>
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 8182 	beq.w	800aab0 <ai_platform_network_process+0x3e8>
 800a7ac:	69a3      	ldr	r3, [r4, #24]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 817f 	beq.w	800aab4 <ai_platform_network_process+0x3ec>
 800a7b6:	459b      	cmp	fp, r3
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	bf38      	it	cc
 800a7bc:	469b      	movcc	fp, r3
 800a7be:	f001 ff3b 	bl	800c638 <get_tensor_byte_size>
 800a7c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7c6:	69a3      	ldr	r3, [r4, #24]
 800a7c8:	0132      	lsls	r2, r6, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3601      	adds	r6, #1
 800a7ce:	fb00 f303 	mul.w	r3, r0, r3
 800a7d2:	f8c8 300c 	str.w	r3, [r8, #12]
 800a7d6:	6861      	ldr	r1, [r4, #4]
 800a7d8:	341c      	adds	r4, #28
 800a7da:	440b      	add	r3, r1
 800a7dc:	f8c8 1004 	str.w	r1, [r8, #4]
 800a7e0:	f84a 3002 	str.w	r3, [sl, r2]
 800a7e4:	69a8      	ldr	r0, [r5, #24]
 800a7e6:	6803      	ldr	r3, [r0, #0]
 800a7e8:	009a      	lsls	r2, r3, #2
 800a7ea:	f100 80a7 	bmi.w	800a93c <ai_platform_network_process+0x274>
 800a7ee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a7f2:	1a9b      	subs	r3, r3, r2
 800a7f4:	4419      	add	r1, r3
 800a7f6:	6081      	str	r1, [r0, #8]
 800a7f8:	69ab      	ldr	r3, [r5, #24]
 800a7fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a7fe:	60da      	str	r2, [r3, #12]
 800a800:	f8b9 3000 	ldrh.w	r3, [r9]
 800a804:	42b3      	cmp	r3, r6
 800a806:	d889      	bhi.n	800a71c <ai_platform_network_process+0x54>
 800a808:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 800a80c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a80e:	f1b8 0f00 	cmp.w	r8, #0
 800a812:	f000 80b5 	beq.w	800a980 <ai_platform_network_process+0x2b8>
 800a816:	2b01      	cmp	r3, #1
 800a818:	f240 80a5 	bls.w	800a966 <ai_platform_network_process+0x29e>
 800a81c:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 800a820:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 809e 	beq.w	800a966 <ai_platform_network_process+0x29e>
 800a82a:	4645      	mov	r5, r8
 800a82c:	2600      	movs	r6, #0
 800a82e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 80a3 	beq.w	800a97e <ai_platform_network_process+0x2b6>
 800a838:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a83c:	2c00      	cmp	r4, #0
 800a83e:	f000 809e 	beq.w	800a97e <ai_platform_network_process+0x2b6>
 800a842:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a846:	f8d3 a000 	ldr.w	sl, [r3]
 800a84a:	0133      	lsls	r3, r6, #4
 800a84c:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	f000 813f 	beq.w	800aad4 <ai_platform_network_process+0x40c>
 800a856:	69a3      	ldr	r3, [r4, #24]
 800a858:	2101      	movs	r1, #1
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4628      	mov	r0, r5
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	f7ff fa24 	bl	8009cac <ai_buffer_get_size>
 800a864:	9b01      	ldr	r3, [sp, #4]
 800a866:	4283      	cmp	r3, r0
 800a868:	d37d      	bcc.n	800a966 <ai_platform_network_process+0x29e>
 800a86a:	68e0      	ldr	r0, [r4, #12]
 800a86c:	69a9      	ldr	r1, [r5, #24]
 800a86e:	68c2      	ldr	r2, [r0, #12]
 800a870:	68cb      	ldr	r3, [r1, #12]
 800a872:	429a      	cmp	r2, r3
 800a874:	d177      	bne.n	800a966 <ai_platform_network_process+0x29e>
 800a876:	6882      	ldr	r2, [r0, #8]
 800a878:	688b      	ldr	r3, [r1, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d173      	bne.n	800a966 <ai_platform_network_process+0x29e>
 800a87e:	6842      	ldr	r2, [r0, #4]
 800a880:	684b      	ldr	r3, [r1, #4]
 800a882:	429a      	cmp	r2, r3
 800a884:	d16f      	bne.n	800a966 <ai_platform_network_process+0x29e>
 800a886:	69a3      	ldr	r3, [r4, #24]
 800a888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a88c:	f001 feac 	bl	800c5e8 <ai_array_get_data_byte_size>
 800a890:	4603      	mov	r3, r0
 800a892:	4620      	mov	r0, r4
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	f001 fecf 	bl	800c638 <get_tensor_byte_size>
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	4283      	cmp	r3, r0
 800a89e:	d362      	bcc.n	800a966 <ai_platform_network_process+0x29e>
 800a8a0:	69a3      	ldr	r3, [r4, #24]
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	f001 fe30 	bl	800c508 <ai_array_to_buffer_fmt>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	4043      	eors	r3, r0
 800a8ac:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800a8b0:	f040 8117 	bne.w	800aae2 <ai_platform_network_process+0x41a>
 800a8b4:	686b      	ldr	r3, [r5, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 810c 	beq.w	800aad4 <ai_platform_network_process+0x40c>
 800a8bc:	69ab      	ldr	r3, [r5, #24]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 8115 	beq.w	800aaf0 <ai_platform_network_process+0x428>
 800a8c6:	459b      	cmp	fp, r3
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	bf38      	it	cc
 800a8cc:	469b      	movcc	fp, r3
 800a8ce:	f001 feb3 	bl	800c638 <get_tensor_byte_size>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8d8:	69aa      	ldr	r2, [r5, #24]
 800a8da:	351c      	adds	r5, #28
 800a8dc:	6812      	ldr	r2, [r2, #0]
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	f8c8 300c 	str.w	r3, [r8, #12]
 800a8e6:	f855 1c18 	ldr.w	r1, [r5, #-24]
 800a8ea:	0132      	lsls	r2, r6, #4
 800a8ec:	440b      	add	r3, r1
 800a8ee:	f8c8 1004 	str.w	r1, [r8, #4]
 800a8f2:	f84a 3002 	str.w	r3, [sl, r2]
 800a8f6:	69a0      	ldr	r0, [r4, #24]
 800a8f8:	3601      	adds	r6, #1
 800a8fa:	6803      	ldr	r3, [r0, #0]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	d439      	bmi.n	800a974 <ai_platform_network_process+0x2ac>
 800a900:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	4419      	add	r1, r3
 800a908:	6081      	str	r1, [r0, #8]
 800a90a:	69a3      	ldr	r3, [r4, #24]
 800a90c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a910:	60da      	str	r2, [r3, #12]
 800a912:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a916:	429e      	cmp	r6, r3
 800a918:	d389      	bcc.n	800a82e <ai_platform_network_process+0x166>
 800a91a:	e030      	b.n	800a97e <ai_platform_network_process+0x2b6>
 800a91c:	6902      	ldr	r2, [r0, #16]
 800a91e:	6183      	str	r3, [r0, #24]
 800a920:	f002 0203 	and.w	r2, r2, #3
 800a924:	2a03      	cmp	r2, #3
 800a926:	d10f      	bne.n	800a948 <ai_platform_network_process+0x280>
 800a928:	2217      	movs	r2, #23
 800a92a:	2112      	movs	r1, #18
 800a92c:	f107 000c 	add.w	r0, r7, #12
 800a930:	f000 f8ee 	bl	800ab10 <core_set_error>
 800a934:	2000      	movs	r0, #0
 800a936:	b005      	add	sp, #20
 800a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	f8b9 3000 	ldrh.w	r3, [r9]
 800a940:	429e      	cmp	r6, r3
 800a942:	f4ff aeeb 	bcc.w	800a71c <ai_platform_network_process+0x54>
 800a946:	e75f      	b.n	800a808 <ai_platform_network_process+0x140>
 800a948:	2230      	movs	r2, #48	@ 0x30
 800a94a:	2111      	movs	r1, #17
 800a94c:	f107 000c 	add.w	r0, r7, #12
 800a950:	f000 f8de 	bl	800ab10 <core_set_error>
 800a954:	e7ee      	b.n	800a934 <ai_platform_network_process+0x26c>
 800a956:	9f02      	ldr	r7, [sp, #8]
 800a958:	2218      	movs	r2, #24
 800a95a:	2112      	movs	r1, #18
 800a95c:	f107 000c 	add.w	r0, r7, #12
 800a960:	f000 f8d6 	bl	800ab10 <core_set_error>
 800a964:	e7e6      	b.n	800a934 <ai_platform_network_process+0x26c>
 800a966:	2218      	movs	r2, #24
 800a968:	2113      	movs	r1, #19
 800a96a:	f107 000c 	add.w	r0, r7, #12
 800a96e:	f000 f8cf 	bl	800ab10 <core_set_error>
 800a972:	e7df      	b.n	800a934 <ai_platform_network_process+0x26c>
 800a974:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a978:	429e      	cmp	r6, r3
 800a97a:	f4ff af58 	bcc.w	800a82e <ai_platform_network_process+0x166>
 800a97e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a980:	fa1f fb8b 	uxth.w	fp, fp
 800a984:	f8a7 b018 	strh.w	fp, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 808b 	beq.w	800aaa4 <ai_platform_network_process+0x3dc>
 800a98e:	2b01      	cmp	r3, #1
 800a990:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800a992:	f000 808a 	beq.w	800aaaa <ai_platform_network_process+0x3e2>
 800a996:	f106 080c 	add.w	r8, r6, #12
 800a99a:	8b78      	ldrh	r0, [r7, #26]
 800a99c:	4583      	cmp	fp, r0
 800a99e:	d9ca      	bls.n	800a936 <ai_platform_network_process+0x26e>
 800a9a0:	4645      	mov	r5, r8
 800a9a2:	46bb      	mov	fp, r7
 800a9a4:	f04f 0800 	mov.w	r8, #0
 800a9a8:	b9b6      	cbnz	r6, 800a9d8 <ai_platform_network_process+0x310>
 800a9aa:	e02e      	b.n	800aa0a <ai_platform_network_process+0x342>
 800a9ac:	a1c00100 	.word	0xa1c00100
 800a9b0:	68df      	ldr	r7, [r3, #12]
 800a9b2:	1bc9      	subs	r1, r1, r7
 800a9b4:	4408      	add	r0, r1
 800a9b6:	6098      	str	r0, [r3, #8]
 800a9b8:	6993      	ldr	r3, [r2, #24]
 800a9ba:	6862      	ldr	r2, [r4, #4]
 800a9bc:	60da      	str	r2, [r3, #12]
 800a9be:	f859 200a 	ldr.w	r2, [r9, sl]
 800a9c2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a9c6:	440b      	add	r3, r1
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	bf28      	it	cs
 800a9cc:	68e3      	ldrcs	r3, [r4, #12]
 800a9ce:	f108 0801 	add.w	r8, r8, #1
 800a9d2:	bf28      	it	cs
 800a9d4:	1ad3      	subcs	r3, r2, r3
 800a9d6:	6063      	str	r3, [r4, #4]
 800a9d8:	8833      	ldrh	r3, [r6, #0]
 800a9da:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a9de:	4543      	cmp	r3, r8
 800a9e0:	d913      	bls.n	800aa0a <ai_platform_network_process+0x342>
 800a9e2:	6873      	ldr	r3, [r6, #4]
 800a9e4:	b18b      	cbz	r3, 800aa0a <ai_platform_network_process+0x342>
 800a9e6:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800a9ea:	b172      	cbz	r2, 800aa0a <ai_platform_network_process+0x342>
 800a9ec:	68b1      	ldr	r1, [r6, #8]
 800a9ee:	6993      	ldr	r3, [r2, #24]
 800a9f0:	f8d1 9000 	ldr.w	r9, [r1]
 800a9f4:	681f      	ldr	r7, [r3, #0]
 800a9f6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a9fa:	00bf      	lsls	r7, r7, #2
 800a9fc:	6860      	ldr	r0, [r4, #4]
 800a9fe:	6899      	ldr	r1, [r3, #8]
 800aa00:	d5d6      	bpl.n	800a9b0 <ai_platform_network_process+0x2e8>
 800aa02:	68a2      	ldr	r2, [r4, #8]
 800aa04:	f001 fce2 	bl	800c3cc <st_int8_copy>
 800aa08:	e7d9      	b.n	800a9be <ai_platform_network_process+0x2f6>
 800aa0a:	4658      	mov	r0, fp
 800aa0c:	f000 f8e0 	bl	800abd0 <ai_layers_forward_all>
 800aa10:	2400      	movs	r4, #0
 800aa12:	b9ad      	cbnz	r5, 800aa40 <ai_platform_network_process+0x378>
 800aa14:	e039      	b.n	800aa8a <ai_platform_network_process+0x3c2>
 800aa16:	f859 300a 	ldr.w	r3, [r9, sl]
 800aa1a:	4411      	add	r1, r2
 800aa1c:	4299      	cmp	r1, r3
 800aa1e:	bf24      	itt	cs
 800aa20:	f8d8 100c 	ldrcs.w	r1, [r8, #12]
 800aa24:	1a59      	subcs	r1, r3, r1
 800aa26:	f8c8 1004 	str.w	r1, [r8, #4]
 800aa2a:	6982      	ldr	r2, [r0, #24]
 800aa2c:	e9d2 3702 	ldrd	r3, r7, [r2, #8]
 800aa30:	1bdb      	subs	r3, r3, r7
 800aa32:	4419      	add	r1, r3
 800aa34:	6091      	str	r1, [r2, #8]
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aa3c:	60da      	str	r2, [r3, #12]
 800aa3e:	3401      	adds	r4, #1
 800aa40:	882b      	ldrh	r3, [r5, #0]
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	d921      	bls.n	800aa8a <ai_platform_network_process+0x3c2>
 800aa46:	686b      	ldr	r3, [r5, #4]
 800aa48:	b1fb      	cbz	r3, 800aa8a <ai_platform_network_process+0x3c2>
 800aa4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800aa4e:	b1e0      	cbz	r0, 800aa8a <ai_platform_network_process+0x3c2>
 800aa50:	68aa      	ldr	r2, [r5, #8]
 800aa52:	6983      	ldr	r3, [r0, #24]
 800aa54:	f8d2 9000 	ldr.w	r9, [r2]
 800aa58:	681f      	ldr	r7, [r3, #0]
 800aa5a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800aa5e:	00bf      	lsls	r7, r7, #2
 800aa60:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800aa64:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800aa68:	d5d5      	bpl.n	800aa16 <ai_platform_network_process+0x34e>
 800aa6a:	6898      	ldr	r0, [r3, #8]
 800aa6c:	f001 fcae 	bl	800c3cc <st_int8_copy>
 800aa70:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800aa74:	f859 200a 	ldr.w	r2, [r9, sl]
 800aa78:	440b      	add	r3, r1
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	bf24      	itt	cs
 800aa7e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800aa82:	1ad3      	subcs	r3, r2, r3
 800aa84:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa88:	e7d9      	b.n	800aa3e <ai_platform_network_process+0x376>
 800aa8a:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 800aa8e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800aa92:	3001      	adds	r0, #1
 800aa94:	b280      	uxth	r0, r0
 800aa96:	4283      	cmp	r3, r0
 800aa98:	f8ab 001a 	strh.w	r0, [fp, #26]
 800aa9c:	d882      	bhi.n	800a9a4 <ai_platform_network_process+0x2dc>
 800aa9e:	b005      	add	sp, #20
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	461e      	mov	r6, r3
 800aaa6:	4698      	mov	r8, r3
 800aaa8:	e777      	b.n	800a99a <ai_platform_network_process+0x2d2>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	e774      	b.n	800a99a <ai_platform_network_process+0x2d2>
 800aab0:	9f02      	ldr	r7, [sp, #8]
 800aab2:	e739      	b.n	800a928 <ai_platform_network_process+0x260>
 800aab4:	9f02      	ldr	r7, [sp, #8]
 800aab6:	2221      	movs	r2, #33	@ 0x21
 800aab8:	2112      	movs	r1, #18
 800aaba:	f107 000c 	add.w	r0, r7, #12
 800aabe:	f000 f827 	bl	800ab10 <core_set_error>
 800aac2:	e737      	b.n	800a934 <ai_platform_network_process+0x26c>
 800aac4:	9f02      	ldr	r7, [sp, #8]
 800aac6:	2219      	movs	r2, #25
 800aac8:	2112      	movs	r1, #18
 800aaca:	f107 000c 	add.w	r0, r7, #12
 800aace:	f000 f81f 	bl	800ab10 <core_set_error>
 800aad2:	e72f      	b.n	800a934 <ai_platform_network_process+0x26c>
 800aad4:	2217      	movs	r2, #23
 800aad6:	2113      	movs	r1, #19
 800aad8:	f107 000c 	add.w	r0, r7, #12
 800aadc:	f000 f818 	bl	800ab10 <core_set_error>
 800aae0:	e728      	b.n	800a934 <ai_platform_network_process+0x26c>
 800aae2:	2219      	movs	r2, #25
 800aae4:	2113      	movs	r1, #19
 800aae6:	f107 000c 	add.w	r0, r7, #12
 800aaea:	f000 f811 	bl	800ab10 <core_set_error>
 800aaee:	e721      	b.n	800a934 <ai_platform_network_process+0x26c>
 800aaf0:	2221      	movs	r2, #33	@ 0x21
 800aaf2:	2113      	movs	r1, #19
 800aaf4:	f107 000c 	add.w	r0, r7, #12
 800aaf8:	f000 f80a 	bl	800ab10 <core_set_error>
 800aafc:	e71a      	b.n	800a934 <ai_platform_network_process+0x26c>
 800aafe:	bf00      	nop

0800ab00 <core_init>:
 800ab00:	2001      	movs	r0, #1
 800ab02:	4770      	bx	lr

0800ab04 <core_get_error>:
 800ab04:	4603      	mov	r3, r0
 800ab06:	2200      	movs	r2, #0
 800ab08:	6800      	ldr	r0, [r0, #0]
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop

0800ab10 <core_set_error>:
 800ab10:	4603      	mov	r3, r0
 800ab12:	7800      	ldrb	r0, [r0, #0]
 800ab14:	b108      	cbz	r0, 800ab1a <core_set_error+0xa>
 800ab16:	2000      	movs	r0, #0
 800ab18:	4770      	bx	lr
 800ab1a:	7019      	strb	r1, [r3, #0]
 800ab1c:	6819      	ldr	r1, [r3, #0]
 800ab1e:	2001      	movs	r0, #1
 800ab20:	f362 211f 	bfi	r1, r2, #8, #24
 800ab24:	6019      	str	r1, [r3, #0]
 800ab26:	4770      	bx	lr

0800ab28 <ai_check_custom_types>:
 800ab28:	4b12      	ldr	r3, [pc, #72]	@ (800ab74 <ai_check_custom_types+0x4c>)
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	b118      	cbz	r0, 800ab38 <ai_check_custom_types+0x10>
 800ab30:	7803      	ldrb	r3, [r0, #0]
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d002      	beq.n	800ab3c <ai_check_custom_types+0x14>
 800ab36:	2000      	movs	r0, #0
 800ab38:	b002      	add	sp, #8
 800ab3a:	4770      	bx	lr
 800ab3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d004      	beq.n	800ab4e <ai_check_custom_types+0x26>
 800ab44:	2001      	movs	r0, #1
 800ab46:	f080 0001 	eor.w	r0, r0, #1
 800ab4a:	b002      	add	sp, #8
 800ab4c:	4770      	bx	lr
 800ab4e:	7842      	ldrb	r2, [r0, #1]
 800ab50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab54:	3001      	adds	r0, #1
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d1f4      	bne.n	800ab44 <ai_check_custom_types+0x1c>
 800ab5a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ab5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d1ee      	bne.n	800ab44 <ai_check_custom_types+0x1c>
 800ab66:	7842      	ldrb	r2, [r0, #1]
 800ab68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d1e9      	bne.n	800ab44 <ai_check_custom_types+0x1c>
 800ab70:	2000      	movs	r0, #0
 800ab72:	e7e8      	b.n	800ab46 <ai_check_custom_types+0x1e>
 800ab74:	84048403 	.word	0x84048403

0800ab78 <ai_layers_init_all>:
 800ab78:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	b14b      	cbz	r3, 800ab92 <ai_layers_init_all+0x1a>
 800ab7e:	2000      	movs	r0, #0
 800ab80:	461a      	mov	r2, r3
 800ab82:	60d9      	str	r1, [r3, #12]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	3001      	adds	r0, #1
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <ai_layers_init_all+0x1c>
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1f7      	bne.n	800ab80 <ai_layers_init_all+0x8>
 800ab90:	4770      	bx	lr
 800ab92:	4618      	mov	r0, r3
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop

0800ab98 <ai_layers_post_init_all>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ab9c:	b1ac      	cbz	r4, 800abca <ai_layers_post_init_all+0x32>
 800ab9e:	6863      	ldr	r3, [r4, #4]
 800aba0:	2500      	movs	r5, #0
 800aba2:	07db      	lsls	r3, r3, #31
 800aba4:	d504      	bpl.n	800abb0 <ai_layers_post_init_all+0x18>
 800aba6:	6a23      	ldr	r3, [r4, #32]
 800aba8:	b113      	cbz	r3, 800abb0 <ai_layers_post_init_all+0x18>
 800abaa:	4620      	mov	r0, r4
 800abac:	4798      	blx	r3
 800abae:	3501      	adds	r5, #1
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	42a3      	cmp	r3, r4
 800abb4:	d007      	beq.n	800abc6 <ai_layers_post_init_all+0x2e>
 800abb6:	b133      	cbz	r3, 800abc6 <ai_layers_post_init_all+0x2e>
 800abb8:	461c      	mov	r4, r3
 800abba:	6863      	ldr	r3, [r4, #4]
 800abbc:	07db      	lsls	r3, r3, #31
 800abbe:	d4f2      	bmi.n	800aba6 <ai_layers_post_init_all+0xe>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	42a3      	cmp	r3, r4
 800abc4:	d1f7      	bne.n	800abb6 <ai_layers_post_init_all+0x1e>
 800abc6:	4628      	mov	r0, r5
 800abc8:	bd38      	pop	{r3, r4, r5, pc}
 800abca:	4625      	mov	r5, r4
 800abcc:	4628      	mov	r0, r5
 800abce:	bd38      	pop	{r3, r4, r5, pc}

0800abd0 <ai_layers_forward_all>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800abd6:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800abda:	4604      	mov	r4, r0
 800abdc:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	d02b      	beq.n	800ac3c <ai_layers_forward_all+0x6c>
 800abe4:	b335      	cbz	r5, 800ac34 <ai_layers_forward_all+0x64>
 800abe6:	4629      	mov	r1, r5
 800abe8:	2001      	movs	r0, #1
 800abea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800abec:	47c0      	blx	r8
 800abee:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800abf0:	b306      	cbz	r6, 800ac34 <ai_layers_forward_all+0x64>
 800abf2:	2700      	movs	r7, #0
 800abf4:	4631      	mov	r1, r6
 800abf6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800abf8:	2002      	movs	r0, #2
 800abfa:	47c0      	blx	r8
 800abfc:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800abfe:	4628      	mov	r0, r5
 800ac00:	696b      	ldr	r3, [r5, #20]
 800ac02:	4798      	blx	r3
 800ac04:	692e      	ldr	r6, [r5, #16]
 800ac06:	42b5      	cmp	r5, r6
 800ac08:	d00a      	beq.n	800ac20 <ai_layers_forward_all+0x50>
 800ac0a:	2003      	movs	r0, #3
 800ac0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac0e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ac10:	47c0      	blx	r8
 800ac12:	3701      	adds	r7, #1
 800ac14:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d1ec      	bne.n	800abf4 <ai_layers_forward_all+0x24>
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac20:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac22:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ac24:	2003      	movs	r0, #3
 800ac26:	47c0      	blx	r8
 800ac28:	2300      	movs	r3, #0
 800ac2a:	3701      	adds	r7, #1
 800ac2c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ac2e:	4638      	mov	r0, r7
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	2700      	movs	r7, #0
 800ac36:	4638      	mov	r0, r7
 800ac38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	d0f9      	beq.n	800ac34 <ai_layers_forward_all+0x64>
 800ac40:	4647      	mov	r7, r8
 800ac42:	696b      	ldr	r3, [r5, #20]
 800ac44:	4628      	mov	r0, r5
 800ac46:	4798      	blx	r3
 800ac48:	462b      	mov	r3, r5
 800ac4a:	692d      	ldr	r5, [r5, #16]
 800ac4c:	429d      	cmp	r5, r3
 800ac4e:	d004      	beq.n	800ac5a <ai_layers_forward_all+0x8a>
 800ac50:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800ac52:	3701      	adds	r7, #1
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	d1f4      	bne.n	800ac42 <ai_layers_forward_all+0x72>
 800ac58:	e7df      	b.n	800ac1a <ai_layers_forward_all+0x4a>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	3701      	adds	r7, #1
 800ac5e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ac60:	e7db      	b.n	800ac1a <ai_layers_forward_all+0x4a>
 800ac62:	bf00      	nop

0800ac64 <forward_conv2d_if32of32wf32>:
 800ac64:	6982      	ldr	r2, [r0, #24]
 800ac66:	8813      	ldrh	r3, [r2, #0]
 800ac68:	b90b      	cbnz	r3, 800ac6e <forward_conv2d_if32of32wf32+0xa>
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	deff      	udf	#255	@ 0xff
 800ac6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac72:	6857      	ldr	r7, [r2, #4]
 800ac74:	4686      	mov	lr, r0
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	b0a3      	sub	sp, #140	@ 0x8c
 800ac7a:	b102      	cbz	r2, 800ac7e <forward_conv2d_if32of32wf32+0x1a>
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	f000 80bf 	beq.w	800ae02 <forward_conv2d_if32of32wf32+0x19e>
 800ac84:	6938      	ldr	r0, [r7, #16]
 800ac86:	b100      	cbz	r0, 800ac8a <forward_conv2d_if32of32wf32+0x26>
 800ac88:	6800      	ldr	r0, [r0, #0]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	f000 80b4 	beq.w	800adf8 <forward_conv2d_if32of32wf32+0x194>
 800ac90:	69fe      	ldr	r6, [r7, #28]
 800ac92:	2e00      	cmp	r6, #0
 800ac94:	f000 80b3 	beq.w	800adfe <forward_conv2d_if32of32wf32+0x19a>
 800ac98:	8b39      	ldrh	r1, [r7, #24]
 800ac9a:	6834      	ldr	r4, [r6, #0]
 800ac9c:	2901      	cmp	r1, #1
 800ac9e:	f240 80b3 	bls.w	800ae08 <forward_conv2d_if32of32wf32+0x1a4>
 800aca2:	6876      	ldr	r6, [r6, #4]
 800aca4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800aca8:	6992      	ldr	r2, [r2, #24]
 800acaa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800acae:	6892      	ldr	r2, [r2, #8]
 800acb0:	68e1      	ldr	r1, [r4, #12]
 800acb2:	9220      	str	r2, [sp, #128]	@ 0x80
 800acb4:	69a2      	ldr	r2, [r4, #24]
 800acb6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800acba:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 800acbe:	9413      	str	r4, [sp, #76]	@ 0x4c
 800acc0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800acc4:	e9de 5a0c 	ldrd	r5, sl, [lr, #48]	@ 0x30
 800acc8:	9415      	str	r4, [sp, #84]	@ 0x54
 800acca:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800acce:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 800acd2:	9416      	str	r4, [sp, #88]	@ 0x58
 800acd4:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800acd8:	9417      	str	r4, [sp, #92]	@ 0x5c
 800acda:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800acde:	9418      	str	r4, [sp, #96]	@ 0x60
 800ace0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ace4:	9419      	str	r4, [sp, #100]	@ 0x64
 800ace6:	f8be 402c 	ldrh.w	r4, [lr, #44]	@ 0x2c
 800acea:	941a      	str	r4, [sp, #104]	@ 0x68
 800acec:	f8de 401c 	ldr.w	r4, [lr, #28]
 800acf0:	941f      	str	r4, [sp, #124]	@ 0x7c
 800acf2:	f8bc 4000 	ldrh.w	r4, [ip]
 800acf6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800acf8:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 800acfc:	941c      	str	r4, [sp, #112]	@ 0x70
 800acfe:	b2ac      	uxth	r4, r5
 800ad00:	e9d1 9801 	ldrd	r9, r8, [r1, #4]
 800ad04:	941d      	str	r4, [sp, #116]	@ 0x74
 800ad06:	fa1f f48a 	uxth.w	r4, sl
 800ad0a:	6891      	ldr	r1, [r2, #8]
 800ad0c:	941e      	str	r4, [sp, #120]	@ 0x78
 800ad0e:	b10e      	cbz	r6, 800ad14 <forward_conv2d_if32of32wf32+0xb0>
 800ad10:	69b6      	ldr	r6, [r6, #24]
 800ad12:	68b6      	ldr	r6, [r6, #8]
 800ad14:	6980      	ldr	r0, [r0, #24]
 800ad16:	fa1f f48a 	uxth.w	r4, sl
 800ad1a:	6880      	ldr	r0, [r0, #8]
 800ad1c:	b2ad      	uxth	r5, r5
 800ad1e:	3c01      	subs	r4, #1
 800ad20:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad22:	f108 30ff 	add.w	r0, r8, #4294967295
 800ad26:	fb00 8404 	mla	r4, r0, r4, r8
 800ad2a:	3d01      	subs	r5, #1
 800ad2c:	f109 30ff 	add.w	r0, r9, #4294967295
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	fb00 9505 	mla	r5, r0, r5, r9
 800ad36:	d074      	beq.n	800ae22 <forward_conv2d_if32of32wf32+0x1be>
 800ad38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d03e      	beq.n	800adbc <forward_conv2d_if32of32wf32+0x158>
 800ad3e:	f8d3 a000 	ldr.w	sl, [r3]
 800ad42:	f1ba 0f00 	cmp.w	sl, #0
 800ad46:	d003      	beq.n	800ad50 <forward_conv2d_if32of32wf32+0xec>
 800ad48:	f8da 0018 	ldr.w	r0, [sl, #24]
 800ad4c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800ad50:	6858      	ldr	r0, [r3, #4]
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d033      	beq.n	800adbe <forward_conv2d_if32of32wf32+0x15a>
 800ad56:	6983      	ldr	r3, [r0, #24]
 800ad58:	f8d2 c000 	ldr.w	ip, [r2]
 800ad5c:	689f      	ldr	r7, [r3, #8]
 800ad5e:	f3cc 4343 	ubfx	r3, ip, #17, #4
 800ad62:	2b08      	cmp	r3, #8
 800ad64:	d052      	beq.n	800ae0c <forward_conv2d_if32of32wf32+0x1a8>
 800ad66:	2f00      	cmp	r7, #0
 800ad68:	bf08      	it	eq
 800ad6a:	460f      	moveq	r7, r1
 800ad6c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ad6e:	463a      	mov	r2, r7
 800ad70:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 800ad74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ad76:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ad78:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad7a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ad7c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800ad7e:	e9cd 8308 	strd	r8, r3, [sp, #32]
 800ad82:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad84:	940d      	str	r4, [sp, #52]	@ 0x34
 800ad86:	9306      	str	r3, [sp, #24]
 800ad88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad8a:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad8e:	9305      	str	r3, [sp, #20]
 800ad90:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800ad92:	950e      	str	r5, [sp, #56]	@ 0x38
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ada0:	e9cd a300 	strd	sl, r3, [sp]
 800ada4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ada6:	9311      	str	r3, [sp, #68]	@ 0x44
 800ada8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800adaa:	9310      	str	r3, [sp, #64]	@ 0x40
 800adac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adb0:	4633      	mov	r3, r6
 800adb2:	f000 fb81 	bl	800b4b8 <forward_lite_conv2d_if32of32wf32>
 800adb6:	b023      	add	sp, #140	@ 0x8c
 800adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbc:	469a      	mov	sl, r3
 800adbe:	6810      	ldr	r0, [r2, #0]
 800adc0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	d001      	beq.n	800adcc <forward_conv2d_if32of32wf32+0x168>
 800adc8:	460f      	mov	r7, r1
 800adca:	e7cf      	b.n	800ad6c <forward_conv2d_if32of32wf32+0x108>
 800adcc:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800add0:	68d2      	ldr	r2, [r2, #12]
 800add2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800add6:	4103      	asrs	r3, r0
 800add8:	b29b      	uxth	r3, r3
 800adda:	2a00      	cmp	r2, #0
 800addc:	d0f4      	beq.n	800adc8 <forward_conv2d_if32of32wf32+0x164>
 800adde:	2700      	movs	r7, #0
 800ade0:	4638      	mov	r0, r7
 800ade2:	6980      	ldr	r0, [r0, #24]
 800ade4:	9121      	str	r1, [sp, #132]	@ 0x84
 800ade6:	6840      	ldr	r0, [r0, #4]
 800ade8:	9001      	str	r0, [sp, #4]
 800adea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800adec:	9000      	str	r0, [sp, #0]
 800adee:	4638      	mov	r0, r7
 800adf0:	f000 fea8 	bl	800bb44 <lite_decompress_ilutof32>
 800adf4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800adf6:	e7b6      	b.n	800ad66 <forward_conv2d_if32of32wf32+0x102>
 800adf8:	2300      	movs	r3, #0
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	deff      	udf	#255	@ 0xff
 800adfe:	4634      	mov	r4, r6
 800ae00:	e750      	b.n	800aca4 <forward_conv2d_if32of32wf32+0x40>
 800ae02:	2300      	movs	r3, #0
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	deff      	udf	#255	@ 0xff
 800ae08:	2600      	movs	r6, #0
 800ae0a:	e74b      	b.n	800aca4 <forward_conv2d_if32of32wf32+0x40>
 800ae0c:	68d2      	ldr	r2, [r2, #12]
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	d0a9      	beq.n	800ad66 <forward_conv2d_if32of32wf32+0x102>
 800ae12:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 800ae16:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 800ae1a:	fa43 f30c 	asr.w	r3, r3, ip
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	e7df      	b.n	800ade2 <forward_conv2d_if32of32wf32+0x17e>
 800ae22:	2300      	movs	r3, #0
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	deff      	udf	#255	@ 0xff

0800ae28 <forward_dense>:
 800ae28:	6982      	ldr	r2, [r0, #24]
 800ae2a:	8813      	ldrh	r3, [r2, #0]
 800ae2c:	b90b      	cbnz	r3, 800ae32 <forward_dense+0xa>
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	deff      	udf	#255	@ 0xff
 800ae32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae36:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800ae3a:	b08e      	sub	sp, #56	@ 0x38
 800ae3c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ae40:	b100      	cbz	r0, 800ae44 <forward_dense+0x1c>
 800ae42:	6800      	ldr	r0, [r0, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d061      	beq.n	800af0c <forward_dense+0xe4>
 800ae48:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ae4c:	b102      	cbz	r2, 800ae50 <forward_dense+0x28>
 800ae4e:	6812      	ldr	r2, [r2, #0]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d035      	beq.n	800aec0 <forward_dense+0x98>
 800ae54:	f8da 501c 	ldr.w	r5, [sl, #28]
 800ae58:	2d00      	cmp	r5, #0
 800ae5a:	d055      	beq.n	800af08 <forward_dense+0xe0>
 800ae5c:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 800ae60:	6829      	ldr	r1, [r5, #0]
 800ae62:	2c01      	cmp	r4, #1
 800ae64:	d955      	bls.n	800af12 <forward_dense+0xea>
 800ae66:	686d      	ldr	r5, [r5, #4]
 800ae68:	698e      	ldr	r6, [r1, #24]
 800ae6a:	68c4      	ldr	r4, [r0, #12]
 800ae6c:	68d1      	ldr	r1, [r2, #12]
 800ae6e:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800ae72:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800ae76:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 800ae7a:	6831      	ldr	r1, [r6, #0]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	fb07 f804 	mul.w	r8, r7, r4
 800ae82:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800ae86:	d046      	beq.n	800af16 <forward_dense+0xee>
 800ae88:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 800ae8c:	b11c      	cbz	r4, 800ae96 <forward_dense+0x6e>
 800ae8e:	6824      	ldr	r4, [r4, #0]
 800ae90:	b10c      	cbz	r4, 800ae96 <forward_dense+0x6e>
 800ae92:	69a3      	ldr	r3, [r4, #24]
 800ae94:	689c      	ldr	r4, [r3, #8]
 800ae96:	6983      	ldr	r3, [r0, #24]
 800ae98:	6992      	ldr	r2, [r2, #24]
 800ae9a:	6899      	ldr	r1, [r3, #8]
 800ae9c:	6890      	ldr	r0, [r2, #8]
 800ae9e:	b10d      	cbz	r5, 800aea4 <forward_dense+0x7c>
 800aea0:	69ab      	ldr	r3, [r5, #24]
 800aea2:	689d      	ldr	r5, [r3, #8]
 800aea4:	4f1d      	ldr	r7, [pc, #116]	@ (800af1c <forward_dense+0xf4>)
 800aea6:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800aeaa:	45bc      	cmp	ip, r7
 800aeac:	d022      	beq.n	800aef4 <forward_dense+0xcc>
 800aeae:	4e1c      	ldr	r6, [pc, #112]	@ (800af20 <forward_dense+0xf8>)
 800aeb0:	45b4      	cmp	ip, r6
 800aeb2:	d015      	beq.n	800aee0 <forward_dense+0xb8>
 800aeb4:	4b1b      	ldr	r3, [pc, #108]	@ (800af24 <forward_dense+0xfc>)
 800aeb6:	459c      	cmp	ip, r3
 800aeb8:	d005      	beq.n	800aec6 <forward_dense+0x9e>
 800aeba:	b00e      	add	sp, #56	@ 0x38
 800aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec0:	2300      	movs	r3, #0
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	deff      	udf	#255	@ 0xff
 800aec6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800aeca:	a807      	add	r0, sp, #28
 800aecc:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 800aed0:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 800aed4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aed6:	f000 fe8b 	bl	800bbf0 <forward_lite_dense_if32of32wf32>
 800aeda:	b00e      	add	sp, #56	@ 0x38
 800aedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee0:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800aee4:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800aee8:	9400      	str	r4, [sp, #0]
 800aeea:	f000 ffdd 	bl	800bea8 <forward_lite_dense_if32of32wf32_lut4>
 800aeee:	b00e      	add	sp, #56	@ 0x38
 800aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef4:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800aef8:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800aefc:	9400      	str	r4, [sp, #0]
 800aefe:	f001 f917 	bl	800c130 <forward_lite_dense_if32of32wf32_lut8>
 800af02:	b00e      	add	sp, #56	@ 0x38
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	4629      	mov	r1, r5
 800af0a:	e7ad      	b.n	800ae68 <forward_dense+0x40>
 800af0c:	2300      	movs	r3, #0
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	deff      	udf	#255	@ 0xff
 800af12:	2500      	movs	r5, #0
 800af14:	e7a8      	b.n	800ae68 <forward_dense+0x40>
 800af16:	2300      	movs	r3, #0
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	deff      	udf	#255	@ 0xff
 800af1c:	00d01040 	.word	0x00d01040
 800af20:	00f01040 	.word	0x00f01040
 800af24:	00821040 	.word	0x00821040

0800af28 <forward_sigmoid>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	ed2d 8b02 	vpush	{d8}
 800af2e:	6982      	ldr	r2, [r0, #24]
 800af30:	8813      	ldrh	r3, [r2, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d03b      	beq.n	800afae <forward_sigmoid+0x86>
 800af36:	6852      	ldr	r2, [r2, #4]
 800af38:	6854      	ldr	r4, [r2, #4]
 800af3a:	b104      	cbz	r4, 800af3e <forward_sigmoid+0x16>
 800af3c:	6824      	ldr	r4, [r4, #0]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d034      	beq.n	800afac <forward_sigmoid+0x84>
 800af42:	6915      	ldr	r5, [r2, #16]
 800af44:	b105      	cbz	r5, 800af48 <forward_sigmoid+0x20>
 800af46:	682d      	ldr	r5, [r5, #0]
 800af48:	68a3      	ldr	r3, [r4, #8]
 800af4a:	0a1b      	lsrs	r3, r3, #8
 800af4c:	d031      	beq.n	800afb2 <forward_sigmoid+0x8a>
 800af4e:	2201      	movs	r2, #1
 800af50:	68e0      	ldr	r0, [r4, #12]
 800af52:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800af56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af5a:	4298      	cmp	r0, r3
 800af5c:	fb01 f202 	mul.w	r2, r1, r2
 800af60:	d1f9      	bne.n	800af56 <forward_sigmoid+0x2e>
 800af62:	69a7      	ldr	r7, [r4, #24]
 800af64:	69a9      	ldr	r1, [r5, #24]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800af6c:	3a01      	subs	r2, #1
 800af6e:	688e      	ldr	r6, [r1, #8]
 800af70:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800af74:	42ab      	cmp	r3, r5
 800af76:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800af7a:	d814      	bhi.n	800afa6 <forward_sigmoid+0x7e>
 800af7c:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800af80:	3504      	adds	r5, #4
 800af82:	3604      	adds	r6, #4
 800af84:	462c      	mov	r4, r5
 800af86:	ed35 0a01 	vldmdb	r5!, {s0}
 800af8a:	eeb1 0a40 	vneg.f32	s0, s0
 800af8e:	f001 fb6b 	bl	800c668 <expf>
 800af92:	ee30 0a08 	vadd.f32	s0, s0, s16
 800af96:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800af9a:	ed66 7a01 	vstmdb	r6!, {s15}
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	3c08      	subs	r4, #8
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	d9ee      	bls.n	800af84 <forward_sigmoid+0x5c>
 800afa6:	ecbd 8b02 	vpop	{d8}
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afac:	2300      	movs	r3, #0
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	deff      	udf	#255	@ 0xff
 800afb2:	69ab      	ldr	r3, [r5, #24]
 800afb4:	69a7      	ldr	r7, [r4, #24]
 800afb6:	689e      	ldr	r6, [r3, #8]
 800afb8:	68bd      	ldr	r5, [r7, #8]
 800afba:	e7df      	b.n	800af7c <forward_sigmoid+0x54>

0800afbc <forward_relu>:
 800afbc:	6982      	ldr	r2, [r0, #24]
 800afbe:	8813      	ldrh	r3, [r2, #0]
 800afc0:	b90b      	cbnz	r3, 800afc6 <forward_relu+0xa>
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	deff      	udf	#255	@ 0xff
 800afc6:	b470      	push	{r4, r5, r6}
 800afc8:	6852      	ldr	r2, [r2, #4]
 800afca:	6854      	ldr	r4, [r2, #4]
 800afcc:	b104      	cbz	r4, 800afd0 <forward_relu+0x14>
 800afce:	6824      	ldr	r4, [r4, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	f000 8083 	beq.w	800b0dc <forward_relu+0x120>
 800afd6:	6913      	ldr	r3, [r2, #16]
 800afd8:	b103      	cbz	r3, 800afdc <forward_relu+0x20>
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6999      	ldr	r1, [r3, #24]
 800afde:	69a2      	ldr	r2, [r4, #24]
 800afe0:	68a3      	ldr	r3, [r4, #8]
 800afe2:	69c6      	ldr	r6, [r0, #28]
 800afe4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800afe8:	6888      	ldr	r0, [r1, #8]
 800afea:	6891      	ldr	r1, [r2, #8]
 800afec:	b196      	cbz	r6, 800b014 <forward_relu+0x58>
 800afee:	6872      	ldr	r2, [r6, #4]
 800aff0:	2a01      	cmp	r2, #1
 800aff2:	d036      	beq.n	800b062 <forward_relu+0xa6>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d068      	beq.n	800b0ca <forward_relu+0x10e>
 800aff8:	2201      	movs	r2, #1
 800affa:	68e5      	ldr	r5, [r4, #12]
 800affc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b000:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b004:	429d      	cmp	r5, r3
 800b006:	fb04 f202 	mul.w	r2, r4, r2
 800b00a:	d1f9      	bne.n	800b000 <forward_relu+0x44>
 800b00c:	68b3      	ldr	r3, [r6, #8]
 800b00e:	bc70      	pop	{r4, r5, r6}
 800b010:	f000 bd28 	b.w	800ba64 <forward_lite_nl_relu_generic_if32of32_kernel>
 800b014:	2b00      	cmp	r3, #0
 800b016:	d05a      	beq.n	800b0ce <forward_relu+0x112>
 800b018:	2201      	movs	r2, #1
 800b01a:	68e5      	ldr	r5, [r4, #12]
 800b01c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b020:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b024:	429d      	cmp	r5, r3
 800b026:	fb04 f202 	mul.w	r2, r4, r2
 800b02a:	d1f9      	bne.n	800b020 <forward_relu+0x64>
 800b02c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b030:	3a01      	subs	r2, #1
 800b032:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b036:	428c      	cmp	r4, r1
 800b038:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b03c:	d30f      	bcc.n	800b05e <forward_relu+0xa2>
 800b03e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800b0e4 <forward_relu+0x128>
 800b042:	1a61      	subs	r1, r4, r1
 800b044:	f021 0103 	bic.w	r1, r1, #3
 800b048:	1d23      	adds	r3, r4, #4
 800b04a:	3004      	adds	r0, #4
 800b04c:	1a62      	subs	r2, r4, r1
 800b04e:	ed73 7a01 	vldmdb	r3!, {s15}
 800b052:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b056:	429a      	cmp	r2, r3
 800b058:	ed60 7a01 	vstmdb	r0!, {s15}
 800b05c:	d1f7      	bne.n	800b04e <forward_relu+0x92>
 800b05e:	bc70      	pop	{r4, r5, r6}
 800b060:	4770      	bx	lr
 800b062:	b3b3      	cbz	r3, 800b0d2 <forward_relu+0x116>
 800b064:	68e5      	ldr	r5, [r4, #12]
 800b066:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b06a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b06e:	429d      	cmp	r5, r3
 800b070:	fb04 f202 	mul.w	r2, r4, r2
 800b074:	d1f9      	bne.n	800b06a <forward_relu+0xae>
 800b076:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b07a:	3a01      	subs	r2, #1
 800b07c:	68b3      	ldr	r3, [r6, #8]
 800b07e:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b082:	428c      	cmp	r4, r1
 800b084:	ed93 7a00 	vldr	s14, [r3]
 800b088:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b08c:	d3e7      	bcc.n	800b05e <forward_relu+0xa2>
 800b08e:	2500      	movs	r5, #0
 800b090:	1a61      	subs	r1, r4, r1
 800b092:	f021 0103 	bic.w	r1, r1, #3
 800b096:	1d23      	adds	r3, r4, #4
 800b098:	1a62      	subs	r2, r4, r1
 800b09a:	3004      	adds	r0, #4
 800b09c:	ed73 7a01 	vldmdb	r3!, {s15}
 800b0a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a8:	d50a      	bpl.n	800b0c0 <forward_relu+0x104>
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	ed60 7a01 	vstmdb	r0!, {s15}
 800b0b0:	d0d5      	beq.n	800b05e <forward_relu+0xa2>
 800b0b2:	ed73 7a01 	vldmdb	r3!, {s15}
 800b0b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	d4f4      	bmi.n	800b0aa <forward_relu+0xee>
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	f840 5d04 	str.w	r5, [r0, #-4]!
 800b0c6:	d1e9      	bne.n	800b09c <forward_relu+0xe0>
 800b0c8:	e7c9      	b.n	800b05e <forward_relu+0xa2>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	e79e      	b.n	800b00c <forward_relu+0x50>
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	e7b5      	b.n	800b03e <forward_relu+0x82>
 800b0d2:	68b3      	ldr	r3, [r6, #8]
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	ed93 7a00 	vldr	s14, [r3]
 800b0da:	e7d8      	b.n	800b08e <forward_relu+0xd2>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	deff      	udf	#255	@ 0xff
 800b0e2:	bf00      	nop
 800b0e4:	00000000 	.word	0x00000000

0800b0e8 <forward_mp>:
 800b0e8:	6983      	ldr	r3, [r0, #24]
 800b0ea:	881a      	ldrh	r2, [r3, #0]
 800b0ec:	b90a      	cbnz	r2, 800b0f2 <forward_mp+0xa>
 800b0ee:	6853      	ldr	r3, [r2, #4]
 800b0f0:	deff      	udf	#255	@ 0xff
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	6858      	ldr	r0, [r3, #4]
 800b0f6:	6843      	ldr	r3, [r0, #4]
 800b0f8:	b103      	cbz	r3, 800b0fc <forward_mp+0x14>
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2a01      	cmp	r2, #1
 800b0fe:	f000 80cc 	beq.w	800b29a <forward_mp+0x1b2>
 800b102:	6902      	ldr	r2, [r0, #16]
 800b104:	2a00      	cmp	r2, #0
 800b106:	f000 80c6 	beq.w	800b296 <forward_mp+0x1ae>
 800b10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10e:	6810      	ldr	r0, [r2, #0]
 800b110:	68dc      	ldr	r4, [r3, #12]
 800b112:	68c2      	ldr	r2, [r0, #12]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	6980      	ldr	r0, [r0, #24]
 800b118:	68d5      	ldr	r5, [r2, #12]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	6897      	ldr	r7, [r2, #8]
 800b11e:	6882      	ldr	r2, [r0, #8]
 800b120:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 800b122:	b093      	sub	sp, #76	@ 0x4c
 800b124:	6866      	ldr	r6, [r4, #4]
 800b126:	930c      	str	r3, [sp, #48]	@ 0x30
 800b128:	e9d0 3000 	ldrd	r3, r0, [r0]
 800b12c:	9005      	str	r0, [sp, #20]
 800b12e:	e9d4 b002 	ldrd	fp, r0, [r4, #8]
 800b132:	69cc      	ldr	r4, [r1, #28]
 800b134:	9509      	str	r5, [sp, #36]	@ 0x24
 800b136:	940a      	str	r4, [sp, #40]	@ 0x28
 800b138:	6a0c      	ldr	r4, [r1, #32]
 800b13a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b13c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800b13e:	9404      	str	r4, [sp, #16]
 800b140:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800b142:	4259      	negs	r1, r3
 800b144:	2d00      	cmp	r5, #0
 800b146:	f000 80a3 	beq.w	800b290 <forward_mp+0x1a8>
 800b14a:	eb00 0c03 	add.w	ip, r0, r3
 800b14e:	fb06 f30b 	mul.w	r3, r6, fp
 800b152:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800b156:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800b15a:	fb07 f309 	mul.w	r3, r7, r9
 800b15e:	9805      	ldr	r0, [sp, #20]
 800b160:	930d      	str	r3, [sp, #52]	@ 0x34
 800b162:	4243      	negs	r3, r0
 800b164:	930e      	str	r3, [sp, #56]	@ 0x38
 800b166:	f04f 0800 	mov.w	r8, #0
 800b16a:	4663      	mov	r3, ip
 800b16c:	9707      	str	r7, [sp, #28]
 800b16e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b170:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800b174:	4298      	cmp	r0, r3
 800b176:	bf94      	ite	ls
 800b178:	eb01 0e00 	addls.w	lr, r1, r0
 800b17c:	eb01 0e03 	addhi.w	lr, r1, r3
 800b180:	9807      	ldr	r0, [sp, #28]
 800b182:	9506      	str	r5, [sp, #24]
 800b184:	2800      	cmp	r0, #0
 800b186:	d07a      	beq.n	800b27e <forward_mp+0x196>
 800b188:	2000      	movs	r0, #0
 800b18a:	9003      	str	r0, [sp, #12]
 800b18c:	fb0b f005 	mul.w	r0, fp, r5
 800b190:	9002      	str	r0, [sp, #8]
 800b192:	9805      	ldr	r0, [sp, #20]
 800b194:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 800b198:	4458      	add	r0, fp
 800b19a:	460d      	mov	r5, r1
 800b19c:	9001      	str	r0, [sp, #4]
 800b19e:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800b1a2:	4617      	mov	r7, r2
 800b1a4:	46a3      	mov	fp, r4
 800b1a6:	4641      	mov	r1, r8
 800b1a8:	4660      	mov	r0, ip
 800b1aa:	9200      	str	r2, [sp, #0]
 800b1ac:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	bfaa      	itet	ge
 800b1b4:	9c02      	ldrge	r4, [sp, #8]
 800b1b6:	f8dd 8008 	ldrlt.w	r8, [sp, #8]
 800b1ba:	eb04 0800 	addge.w	r8, r4, r0
 800b1be:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b1c0:	9a01      	ldr	r2, [sp, #4]
 800b1c2:	fb08 4809 	mla	r8, r8, r9, r4
 800b1c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1c8:	bfb8      	it	lt
 800b1ca:	2000      	movlt	r0, #0
 800b1cc:	4294      	cmp	r4, r2
 800b1ce:	bf94      	ite	ls
 800b1d0:	191c      	addls	r4, r3, r4
 800b1d2:	189c      	addhi	r4, r3, r2
 800b1d4:	1a22      	subs	r2, r4, r0
 800b1d6:	9208      	str	r2, [sp, #32]
 800b1d8:	b15e      	cbz	r6, 800b1f2 <forward_mp+0x10a>
 800b1da:	4640      	mov	r0, r8
 800b1dc:	463c      	mov	r4, r7
 800b1de:	9a00      	ldr	r2, [sp, #0]
 800b1e0:	eb09 0c08 	add.w	ip, r9, r8
 800b1e4:	ecf0 7a01 	vldmia	r0!, {s15}
 800b1e8:	4584      	cmp	ip, r0
 800b1ea:	ece4 7a01 	vstmia	r4!, {s15}
 800b1ee:	d1f9      	bne.n	800b1e4 <forward_mp+0xfc>
 800b1f0:	9200      	str	r2, [sp, #0]
 800b1f2:	9a06      	ldr	r2, [sp, #24]
 800b1f4:	4596      	cmp	lr, r2
 800b1f6:	dd2c      	ble.n	800b252 <forward_mp+0x16a>
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	9a08      	ldr	r2, [sp, #32]
 800b1fe:	9511      	str	r5, [sp, #68]	@ 0x44
 800b200:	fb09 8c02 	mla	ip, r9, r2, r8
 800b204:	9a00      	ldr	r2, [sp, #0]
 800b206:	f8cd b020 	str.w	fp, [sp, #32]
 800b20a:	45e0      	cmp	r8, ip
 800b20c:	d217      	bcs.n	800b23e <forward_mp+0x156>
 800b20e:	b1b6      	cbz	r6, 800b23e <forward_mp+0x156>
 800b210:	46c3      	mov	fp, r8
 800b212:	eb08 0509 	add.w	r5, r8, r9
 800b216:	f8cd a000 	str.w	sl, [sp]
 800b21a:	46da      	mov	sl, fp
 800b21c:	4639      	mov	r1, r7
 800b21e:	ecfa 7a01 	vldmia	sl!, {s15}
 800b222:	ed91 7a00 	vldr	s14, [r1]
 800b226:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b22a:	45aa      	cmp	sl, r5
 800b22c:	ece1 7a01 	vstmia	r1!, {s15}
 800b230:	d1f5      	bne.n	800b21e <forward_mp+0x136>
 800b232:	44cb      	add	fp, r9
 800b234:	45e3      	cmp	fp, ip
 800b236:	444d      	add	r5, r9
 800b238:	d3ef      	bcc.n	800b21a <forward_mp+0x132>
 800b23a:	f8dd a000 	ldr.w	sl, [sp]
 800b23e:	3001      	adds	r0, #1
 800b240:	4586      	cmp	lr, r0
 800b242:	44d0      	add	r8, sl
 800b244:	44d4      	add	ip, sl
 800b246:	d1e0      	bne.n	800b20a <forward_mp+0x122>
 800b248:	4621      	mov	r1, r4
 800b24a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b24e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b250:	9200      	str	r2, [sp, #0]
 800b252:	9804      	ldr	r0, [sp, #16]
 800b254:	9a01      	ldr	r2, [sp, #4]
 800b256:	4418      	add	r0, r3
 800b258:	9b04      	ldr	r3, [sp, #16]
 800b25a:	9c03      	ldr	r4, [sp, #12]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	9b07      	ldr	r3, [sp, #28]
 800b262:	3401      	adds	r4, #1
 800b264:	42a3      	cmp	r3, r4
 800b266:	9403      	str	r4, [sp, #12]
 800b268:	444f      	add	r7, r9
 800b26a:	d1a0      	bne.n	800b1ae <forward_mp+0xc6>
 800b26c:	4688      	mov	r8, r1
 800b26e:	4629      	mov	r1, r5
 800b270:	9a00      	ldr	r2, [sp, #0]
 800b272:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b274:	465c      	mov	r4, fp
 800b276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b278:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800b27c:	4402      	add	r2, r0
 800b27e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b280:	f108 0801 	add.w	r8, r8, #1
 800b284:	4540      	cmp	r0, r8
 800b286:	4421      	add	r1, r4
 800b288:	eba3 0304 	sub.w	r3, r3, r4
 800b28c:	f47f af6f 	bne.w	800b16e <forward_mp+0x86>
 800b290:	b013      	add	sp, #76	@ 0x4c
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b296:	68d3      	ldr	r3, [r2, #12]
 800b298:	deff      	udf	#255	@ 0xff
 800b29a:	2300      	movs	r3, #0
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	deff      	udf	#255	@ 0xff

0800b2a0 <forward_ap>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	6983      	ldr	r3, [r0, #24]
 800b2a6:	b09d      	sub	sp, #116	@ 0x74
 800b2a8:	881a      	ldrh	r2, [r3, #0]
 800b2aa:	900d      	str	r0, [sp, #52]	@ 0x34
 800b2ac:	b90a      	cbnz	r2, 800b2b2 <forward_ap+0x12>
 800b2ae:	6853      	ldr	r3, [r2, #4]
 800b2b0:	deff      	udf	#255	@ 0xff
 800b2b2:	6859      	ldr	r1, [r3, #4]
 800b2b4:	684b      	ldr	r3, [r1, #4]
 800b2b6:	b103      	cbz	r3, 800b2ba <forward_ap+0x1a>
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2a01      	cmp	r2, #1
 800b2bc:	f000 80f7 	beq.w	800b4ae <forward_ap+0x20e>
 800b2c0:	690a      	ldr	r2, [r1, #16]
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	f000 80f6 	beq.w	800b4b4 <forward_ap+0x214>
 800b2c8:	6811      	ldr	r1, [r2, #0]
 800b2ca:	68dc      	ldr	r4, [r3, #12]
 800b2cc:	68ca      	ldr	r2, [r1, #12]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	68d5      	ldr	r5, [r2, #12]
 800b2d2:	6892      	ldr	r2, [r2, #8]
 800b2d4:	6989      	ldr	r1, [r1, #24]
 800b2d6:	9205      	str	r2, [sp, #20]
 800b2d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	6888      	ldr	r0, [r1, #8]
 800b2de:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b2e0:	6867      	ldr	r7, [r4, #4]
 800b2e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2e4:	e9d1 6300 	ldrd	r6, r3, [r1]
 800b2e8:	e9d4 8102 	ldrd	r8, r1, [r4, #8]
 800b2ec:	69d4      	ldr	r4, [r2, #28]
 800b2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2f0:	9408      	str	r4, [sp, #32]
 800b2f2:	e9d2 c308 	ldrd	ip, r3, [r2, #32]
 800b2f6:	950e      	str	r5, [sp, #56]	@ 0x38
 800b2f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2fa:	4274      	negs	r4, r6
 800b2fc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	f000 80cc 	beq.w	800b49c <forward_ap+0x1fc>
 800b304:	2500      	movs	r5, #0
 800b306:	fb07 f208 	mul.w	r2, r7, r8
 800b30a:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800b30e:	950a      	str	r5, [sp, #40]	@ 0x28
 800b310:	0095      	lsls	r5, r2, #2
 800b312:	9502      	str	r5, [sp, #8]
 800b314:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b318:	463d      	mov	r5, r7
 800b31a:	46cb      	mov	fp, r9
 800b31c:	440e      	add	r6, r1
 800b31e:	9908      	ldr	r1, [sp, #32]
 800b320:	9a05      	ldr	r2, [sp, #20]
 800b322:	fb0c f101 	mul.w	r1, ip, r1
 800b326:	9111      	str	r1, [sp, #68]	@ 0x44
 800b328:	fb09 f102 	mul.w	r1, r9, r2
 800b32c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b32e:	9114      	str	r1, [sp, #80]	@ 0x50
 800b330:	4252      	negs	r2, r2
 800b332:	9212      	str	r2, [sp, #72]	@ 0x48
 800b334:	45b4      	cmp	ip, r6
 800b336:	bf94      	ite	ls
 800b338:	eb04 020c 	addls.w	r2, r4, ip
 800b33c:	19a2      	addhi	r2, r4, r6
 800b33e:	9905      	ldr	r1, [sp, #20]
 800b340:	9201      	str	r2, [sp, #4]
 800b342:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 800b346:	2900      	cmp	r1, #0
 800b348:	f000 809e 	beq.w	800b488 <forward_ap+0x1e8>
 800b34c:	2100      	movs	r1, #0
 800b34e:	4681      	mov	r9, r0
 800b350:	ebaa 0202 	sub.w	r2, sl, r2
 800b354:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b356:	fb08 f10a 	mul.w	r1, r8, sl
 800b35a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b35c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b35e:	e9cd 8c15 	strd	r8, ip, [sp, #84]	@ 0x54
 800b362:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
 800b366:	4442      	add	r2, r8
 800b368:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b36a:	9107      	str	r1, [sp, #28]
 800b36c:	9206      	str	r2, [sp, #24]
 800b36e:	eb00 010b 	add.w	r1, r0, fp
 800b372:	9019      	str	r0, [sp, #100]	@ 0x64
 800b374:	2f00      	cmp	r7, #0
 800b376:	bfaa      	itet	ge
 800b378:	9b07      	ldrge	r3, [sp, #28]
 800b37a:	9807      	ldrlt	r0, [sp, #28]
 800b37c:	19d8      	addge	r0, r3, r7
 800b37e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b380:	970c      	str	r7, [sp, #48]	@ 0x30
 800b382:	9a06      	ldr	r2, [sp, #24]
 800b384:	fb00 300b 	mla	r0, r0, fp, r3
 800b388:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b38a:	9b08      	ldr	r3, [sp, #32]
 800b38c:	bfb8      	it	lt
 800b38e:	2700      	movlt	r7, #0
 800b390:	4293      	cmp	r3, r2
 800b392:	bf94      	ite	ls
 800b394:	18e4      	addls	r4, r4, r3
 800b396:	18a4      	addhi	r4, r4, r2
 800b398:	eba7 0e04 	sub.w	lr, r7, r4
 800b39c:	1be2      	subs	r2, r4, r7
 800b39e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b3a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3a2:	fb04 fe0e 	mul.w	lr, r4, lr
 800b3a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b3aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bf08      	it	eq
 800b3b0:	4674      	moveq	r4, lr
 800b3b2:	9b01      	ldr	r3, [sp, #4]
 800b3b4:	9404      	str	r4, [sp, #16]
 800b3b6:	459a      	cmp	sl, r3
 800b3b8:	da50      	bge.n	800b45c <forward_ap+0x1bc>
 800b3ba:	46d4      	mov	ip, sl
 800b3bc:	2301      	movs	r3, #1
 800b3be:	2700      	movs	r7, #0
 800b3c0:	4690      	mov	r8, r2
 800b3c2:	fb0b f402 	mul.w	r4, fp, r2
 800b3c6:	e9cd a61a 	strd	sl, r6, [sp, #104]	@ 0x68
 800b3ca:	9403      	str	r4, [sp, #12]
 800b3cc:	9a03      	ldr	r2, [sp, #12]
 800b3ce:	4447      	add	r7, r8
 800b3d0:	45be      	cmp	lr, r7
 800b3d2:	eb00 0602 	add.w	r6, r0, r2
 800b3d6:	d064      	beq.n	800b4a2 <forward_ap+0x202>
 800b3d8:	42b0      	cmp	r0, r6
 800b3da:	bf38      	it	cc
 800b3dc:	2200      	movcc	r2, #0
 800b3de:	d232      	bcs.n	800b446 <forward_ap+0x1a6>
 800b3e0:	eb0b 0a00 	add.w	sl, fp, r0
 800b3e4:	b14d      	cbz	r5, 800b3fa <forward_ap+0x15a>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d05f      	beq.n	800b4aa <forward_ap+0x20a>
 800b3ea:	464c      	mov	r4, r9
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	ecf3 7a01 	vldmia	r3!, {s15}
 800b3f2:	459a      	cmp	sl, r3
 800b3f4:	ece4 7a01 	vstmia	r4!, {s15}
 800b3f8:	d1f9      	bne.n	800b3ee <forward_ap+0x14e>
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	44da      	add	sl, fp
 800b3fe:	45b2      	cmp	sl, r6
 800b400:	d210      	bcs.n	800b424 <forward_ap+0x184>
 800b402:	2d00      	cmp	r5, #0
 800b404:	d0fa      	beq.n	800b3fc <forward_ap+0x15c>
 800b406:	464b      	mov	r3, r9
 800b408:	4654      	mov	r4, sl
 800b40a:	edd3 7a00 	vldr	s15, [r3]
 800b40e:	ecb4 7a01 	vldmia	r4!, {s14}
 800b412:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b416:	ece3 7a01 	vstmia	r3!, {s15}
 800b41a:	4299      	cmp	r1, r3
 800b41c:	d1f5      	bne.n	800b40a <forward_ap+0x16a>
 800b41e:	44da      	add	sl, fp
 800b420:	45b2      	cmp	sl, r6
 800b422:	d3ee      	bcc.n	800b402 <forward_ap+0x162>
 800b424:	b17a      	cbz	r2, 800b446 <forward_ap+0x1a6>
 800b426:	ee07 2a90 	vmov	s15, r2
 800b42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b432:	b145      	cbz	r5, 800b446 <forward_ap+0x1a6>
 800b434:	464b      	mov	r3, r9
 800b436:	edd3 7a00 	vldr	s15, [r3]
 800b43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43e:	ece3 7a01 	vstmia	r3!, {s15}
 800b442:	428b      	cmp	r3, r1
 800b444:	d1f7      	bne.n	800b436 <forward_ap+0x196>
 800b446:	9a01      	ldr	r2, [sp, #4]
 800b448:	9b02      	ldr	r3, [sp, #8]
 800b44a:	f10c 0c01 	add.w	ip, ip, #1
 800b44e:	4562      	cmp	r2, ip
 800b450:	4418      	add	r0, r3
 800b452:	f04f 0300 	mov.w	r3, #0
 800b456:	d1b9      	bne.n	800b3cc <forward_ap+0x12c>
 800b458:	e9dd a61a 	ldrd	sl, r6, [sp, #104]	@ 0x68
 800b45c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b45e:	9806      	ldr	r0, [sp, #24]
 800b460:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800b462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b464:	4417      	add	r7, r2
 800b466:	1a82      	subs	r2, r0, r2
 800b468:	9206      	str	r2, [sp, #24]
 800b46a:	9a05      	ldr	r2, [sp, #20]
 800b46c:	3301      	adds	r3, #1
 800b46e:	429a      	cmp	r2, r3
 800b470:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b472:	44d9      	add	r9, fp
 800b474:	4459      	add	r1, fp
 800b476:	f47f af7d 	bne.w	800b374 <forward_ap+0xd4>
 800b47a:	e9dd 8c15 	ldrd	r8, ip, [sp, #84]	@ 0x54
 800b47e:	e9dd 3417 	ldrd	r3, r4, [sp, #92]	@ 0x5c
 800b482:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b484:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b486:	4410      	add	r0, r2
 800b488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b48a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b48c:	3201      	adds	r2, #1
 800b48e:	4291      	cmp	r1, r2
 800b490:	920a      	str	r2, [sp, #40]	@ 0x28
 800b492:	441c      	add	r4, r3
 800b494:	eba6 0603 	sub.w	r6, r6, r3
 800b498:	f47f af4c 	bne.w	800b334 <forward_ap+0x94>
 800b49c:	b01d      	add	sp, #116	@ 0x74
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	42b0      	cmp	r0, r6
 800b4a4:	9a04      	ldr	r2, [sp, #16]
 800b4a6:	d39b      	bcc.n	800b3e0 <forward_ap+0x140>
 800b4a8:	e7bc      	b.n	800b424 <forward_ap+0x184>
 800b4aa:	4682      	mov	sl, r0
 800b4ac:	e7ab      	b.n	800b406 <forward_ap+0x166>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	deff      	udf	#255	@ 0xff
 800b4b4:	68d3      	ldr	r3, [r2, #12]
 800b4b6:	deff      	udf	#255	@ 0xff

0800b4b8 <forward_lite_conv2d_if32of32wf32>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	ed2d 8b10 	vpush	{d8-d15}
 800b4c0:	b0a3      	sub	sp, #140	@ 0x8c
 800b4c2:	468c      	mov	ip, r1
 800b4c4:	4690      	mov	r8, r2
 800b4c6:	f8bd 6114 	ldrh.w	r6, [sp, #276]	@ 0x114
 800b4ca:	f8bd 711c 	ldrh.w	r7, [sp, #284]	@ 0x11c
 800b4ce:	f8bd 1120 	ldrh.w	r1, [sp, #288]	@ 0x120
 800b4d2:	9212      	str	r2, [sp, #72]	@ 0x48
 800b4d4:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800b4d6:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4d8:	f8bd 4118 	ldrh.w	r4, [sp, #280]	@ 0x118
 800b4dc:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
 800b4de:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 800b4e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4e2:	9613      	str	r6, [sp, #76]	@ 0x4c
 800b4e4:	9706      	str	r7, [sp, #24]
 800b4e6:	9114      	str	r1, [sp, #80]	@ 0x50
 800b4e8:	2a00      	cmp	r2, #0
 800b4ea:	f000 817e 	beq.w	800b7ea <forward_lite_conv2d_if32of32wf32+0x332>
 800b4ee:	4681      	mov	r9, r0
 800b4f0:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b4f2:	46a6      	mov	lr, r4
 800b4f4:	fb02 f303 	mul.w	r3, r2, r3
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800b4fc:	4261      	negs	r1, r4
 800b4fe:	fb02 f303 	mul.w	r3, r2, r3
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b506:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800b508:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800b50a:	fb02 f303 	mul.w	r3, r2, r3
 800b50e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b510:	fb02 f205 	mul.w	r2, r2, r5
 800b514:	00ad      	lsls	r5, r5, #2
 800b516:	9503      	str	r5, [sp, #12]
 800b518:	0095      	lsls	r5, r2, #2
 800b51a:	fb04 f203 	mul.w	r2, r4, r3
 800b51e:	fb01 f303 	mul.w	r3, r1, r3
 800b522:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b526:	9310      	str	r3, [sp, #64]	@ 0x40
 800b528:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800b52a:	0094      	lsls	r4, r2, #2
 800b52c:	fb07 f303 	mul.w	r3, r7, r3
 800b530:	9418      	str	r4, [sp, #96]	@ 0x60
 800b532:	9c3d      	ldr	r4, [sp, #244]	@ 0xf4
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	00a4      	lsls	r4, r4, #2
 800b538:	9305      	str	r3, [sp, #20]
 800b53a:	4273      	negs	r3, r6
 800b53c:	fb04 f703 	mul.w	r7, r4, r3
 800b540:	9516      	str	r5, [sp, #88]	@ 0x58
 800b542:	9311      	str	r3, [sp, #68]	@ 0x44
 800b544:	9404      	str	r4, [sp, #16]
 800b546:	f108 4378 	add.w	r3, r8, #4160749568	@ 0xf8000000
 800b54a:	4606      	mov	r6, r0
 800b54c:	46b8      	mov	r8, r7
 800b54e:	4675      	mov	r5, lr
 800b550:	460f      	mov	r7, r1
 800b552:	4664      	mov	r4, ip
 800b554:	9315      	str	r3, [sp, #84]	@ 0x54
 800b556:	2f00      	cmp	r7, #0
 800b558:	f2c0 827d 	blt.w	800ba56 <forward_lite_conv2d_if32of32wf32+0x59e>
 800b55c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b55e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b560:	2300      	movs	r3, #0
 800b562:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800b564:	9949      	ldr	r1, [sp, #292]	@ 0x124
 800b566:	442a      	add	r2, r5
 800b568:	428a      	cmp	r2, r1
 800b56a:	bf94      	ite	ls
 800b56c:	ebc3 0202 	rsbls	r2, r3, r2
 800b570:	ebc3 0201 	rsbhi	r2, r3, r1
 800b574:	4610      	mov	r0, r2
 800b576:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 800b578:	2a00      	cmp	r2, #0
 800b57a:	f000 8143 	beq.w	800b804 <forward_lite_conv2d_if32of32wf32+0x34c>
 800b57e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b580:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b584:	f0c0 813e 	bcc.w	800b804 <forward_lite_conv2d_if32of32wf32+0x34c>
 800b588:	9a03      	ldr	r2, [sp, #12]
 800b58a:	18a2      	adds	r2, r4, r2
 800b58c:	4294      	cmp	r4, r2
 800b58e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b590:	f080 811d 	bcs.w	800b7ce <forward_lite_conv2d_if32of32wf32+0x316>
 800b594:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b596:	e9cd 761b 	strd	r7, r6, [sp, #108]	@ 0x6c
 800b59a:	fb02 f303 	mul.w	r3, r2, r3
 800b59e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5a2:	e9cd 581d 	strd	r5, r8, [sp, #116]	@ 0x74
 800b5a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5aa:	4626      	mov	r6, r4
 800b5ac:	4443      	add	r3, r8
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 800b5b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5b6:	941f      	str	r4, [sp, #124]	@ 0x7c
 800b5b8:	4648      	mov	r0, r9
 800b5ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5bc:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 800b5be:	f000 ff05 	bl	800c3cc <st_int8_copy>
 800b5c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 811a 	beq.w	800b7fe <forward_lite_conv2d_if32of32wf32+0x346>
 800b5ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5cc:	ecb3 6a01 	vldmia	r3!, {s12}
 800b5d0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 80ee 	beq.w	800b7b6 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5de:	e9cd 9620 	strd	r9, r6, [sp, #128]	@ 0x80
 800b5e2:	9202      	str	r2, [sp, #8]
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5ec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b5ee:	2d00      	cmp	r5, #0
 800b5f0:	f2c0 8100 	blt.w	800b7f4 <forward_lite_conv2d_if32of32wf32+0x33c>
 800b5f4:	f04f 0e00 	mov.w	lr, #0
 800b5f8:	9902      	ldr	r1, [sp, #8]
 800b5fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5fc:	9e3c      	ldr	r6, [sp, #240]	@ 0xf0
 800b5fe:	9f04      	ldr	r7, [sp, #16]
 800b600:	eeb0 7a46 	vmov.f32	s14, s12
 800b604:	fb02 6207 	mla	r2, r2, r7, r6
 800b608:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800b60a:	9201      	str	r2, [sp, #4]
 800b60c:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b60e:	441e      	add	r6, r3
 800b610:	4296      	cmp	r6, r2
 800b612:	bf94      	ite	ls
 800b614:	ebce 0e06 	rsbls	lr, lr, r6
 800b618:	ebce 0e02 	rsbhi	lr, lr, r2
 800b61c:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	fb0e f602 	mul.w	r6, lr, r2
 800b626:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b628:	eba2 0b0e 	sub.w	fp, r2, lr
 800b62c:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b62e:	eba2 0e0e 	sub.w	lr, r2, lr
 800b632:	f340 80ae 	ble.w	800b792 <forward_lite_conv2d_if32of32wf32+0x2da>
 800b636:	f04f 0c00 	mov.w	ip, #0
 800b63a:	fb07 fb0b 	mul.w	fp, r7, fp
 800b63e:	fb07 fe0e 	mul.w	lr, r7, lr
 800b642:	f026 070f 	bic.w	r7, r6, #15
 800b646:	f107 3aff 	add.w	sl, r7, #4294967295
 800b64a:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800b64e:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800b652:	f10a 0a01 	add.w	sl, sl, #1
 800b656:	9a01      	ldr	r2, [sp, #4]
 800b658:	ea4f 198a 	mov.w	r9, sl, lsl #6
 800b65c:	9409      	str	r4, [sp, #36]	@ 0x24
 800b65e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800b662:	930a      	str	r3, [sp, #40]	@ 0x28
 800b664:	2f00      	cmp	r7, #0
 800b666:	bfd8      	it	le
 800b668:	2000      	movle	r0, #0
 800b66a:	dd74      	ble.n	800b756 <forward_lite_conv2d_if32of32wf32+0x29e>
 800b66c:	2400      	movs	r4, #0
 800b66e:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b672:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800b676:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800b67a:	ed50 6a0f 	vldr	s13, [r0, #-60]	@ 0xffffffc4
 800b67e:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800b682:	ed53 fa10 	vldr	s31, [r3, #-64]	@ 0xffffffc0
 800b686:	ed10 fa10 	vldr	s30, [r0, #-64]	@ 0xffffffc0
 800b68a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b68e:	ed10 ea0e 	vldr	s28, [r0, #-56]	@ 0xffffffc8
 800b692:	ed53 ea0e 	vldr	s29, [r3, #-56]	@ 0xffffffc8
 800b696:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800b69a:	ed10 da0d 	vldr	s26, [r0, #-52]	@ 0xffffffcc
 800b69e:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800b6a2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800b6a6:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800b6aa:	ed10 ca0c 	vldr	s24, [r0, #-48]	@ 0xffffffd0
 800b6ae:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b6b2:	ed50 ba0b 	vldr	s23, [r0, #-44]	@ 0xffffffd4
 800b6b6:	ed13 ba0b 	vldr	s22, [r3, #-44]	@ 0xffffffd4
 800b6ba:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b6be:	ed50 aa0a 	vldr	s21, [r0, #-40]	@ 0xffffffd8
 800b6c2:	ed13 aa0a 	vldr	s20, [r3, #-40]	@ 0xffffffd8
 800b6c6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b6ca:	ed50 9a09 	vldr	s19, [r0, #-36]	@ 0xffffffdc
 800b6ce:	ed13 9a09 	vldr	s18, [r3, #-36]	@ 0xffffffdc
 800b6d2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b6d6:	ed53 8a08 	vldr	s17, [r3, #-32]	@ 0xffffffe0
 800b6da:	ed10 8a08 	vldr	s16, [r0, #-32]	@ 0xffffffe0
 800b6de:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b6e2:	ed10 0a07 	vldr	s0, [r0, #-28]	@ 0xffffffe4
 800b6e6:	ed53 0a07 	vldr	s1, [r3, #-28]	@ 0xffffffe4
 800b6ea:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b6ee:	ed10 1a06 	vldr	s2, [r0, #-24]	@ 0xffffffe8
 800b6f2:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800b6f6:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b6fa:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800b6fe:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800b702:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b706:	ed13 3a04 	vldr	s6, [r3, #-16]
 800b70a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b70e:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b712:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b716:	ed13 4a03 	vldr	s8, [r3, #-12]
 800b71a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b71e:	ed10 5a02 	vldr	s10, [r0, #-8]
 800b722:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b726:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b72a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b72e:	ed53 6a01 	vldr	s13, [r3, #-4]
 800b732:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b736:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b73a:	3410      	adds	r4, #16
 800b73c:	42bc      	cmp	r4, r7
 800b73e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b742:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b746:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b74a:	db96      	blt.n	800b67a <forward_lite_conv2d_if32of32wf32+0x1c2>
 800b74c:	ed9d 6a01 	vldr	s12, [sp, #4]
 800b750:	4650      	mov	r0, sl
 800b752:	4449      	add	r1, r9
 800b754:	444a      	add	r2, r9
 800b756:	4286      	cmp	r6, r0
 800b758:	dd10      	ble.n	800b77c <forward_lite_conv2d_if32of32wf32+0x2c4>
 800b75a:	4603      	mov	r3, r0
 800b75c:	460d      	mov	r5, r1
 800b75e:	4614      	mov	r4, r2
 800b760:	ecf4 6a01 	vldmia	r4!, {s13}
 800b764:	ecf5 7a01 	vldmia	r5!, {s15}
 800b768:	3301      	adds	r3, #1
 800b76a:	429e      	cmp	r6, r3
 800b76c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b770:	d1f6      	bne.n	800b760 <forward_lite_conv2d_if32of32wf32+0x2a8>
 800b772:	1a30      	subs	r0, r6, r0
 800b774:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b778:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b77c:	f10c 0c01 	add.w	ip, ip, #1
 800b780:	45e0      	cmp	r8, ip
 800b782:	4459      	add	r1, fp
 800b784:	4472      	add	r2, lr
 800b786:	f47f af6d 	bne.w	800b664 <forward_lite_conv2d_if32of32wf32+0x1ac>
 800b78a:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800b78e:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	@ 0x24
 800b792:	9a06      	ldr	r2, [sp, #24]
 800b794:	9903      	ldr	r1, [sp, #12]
 800b796:	ed80 7a00 	vstr	s14, [r0]
 800b79a:	4415      	add	r5, r2
 800b79c:	4408      	add	r0, r1
 800b79e:	1a9b      	subs	r3, r3, r2
 800b7a0:	9905      	ldr	r1, [sp, #20]
 800b7a2:	9a02      	ldr	r2, [sp, #8]
 800b7a4:	3401      	adds	r4, #1
 800b7a6:	440a      	add	r2, r1
 800b7a8:	9202      	str	r2, [sp, #8]
 800b7aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b7ac:	42a2      	cmp	r2, r4
 800b7ae:	f47f af1e 	bne.w	800b5ee <forward_lite_conv2d_if32of32wf32+0x136>
 800b7b2:	e9dd 9620 	ldrd	r9, r6, [sp, #128]	@ 0x80
 800b7b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7b8:	3604      	adds	r6, #4
 800b7ba:	4499      	add	r9, r3
 800b7bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7be:	429e      	cmp	r6, r3
 800b7c0:	f4ff aefa 	bcc.w	800b5b8 <forward_lite_conv2d_if32of32wf32+0x100>
 800b7c4:	e9dd 761b 	ldrd	r7, r6, [sp, #108]	@ 0x6c
 800b7c8:	e9dd 581d 	ldrd	r5, r8, [sp, #116]	@ 0x74
 800b7cc:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800b7ce:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7d0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b7d2:	441c      	add	r4, r3
 800b7d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7d6:	3601      	adds	r6, #1
 800b7d8:	441f      	add	r7, r3
 800b7da:	1aed      	subs	r5, r5, r3
 800b7dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7de:	4413      	add	r3, r2
 800b7e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7e2:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800b7e4:	42b3      	cmp	r3, r6
 800b7e6:	f47f aeb6 	bne.w	800b556 <forward_lite_conv2d_if32of32wf32+0x9e>
 800b7ea:	b023      	add	sp, #140	@ 0x8c
 800b7ec:	ecbd 8b10 	vpop	{d8-d15}
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7f6:	469e      	mov	lr, r3
 800b7f8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b7fa:	441a      	add	r2, r3
 800b7fc:	e6fe      	b.n	800b5fc <forward_lite_conv2d_if32of32wf32+0x144>
 800b7fe:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 800ba60 <forward_lite_conv2d_if32of32wf32+0x5a8>
 800b802:	e6e6      	b.n	800b5d2 <forward_lite_conv2d_if32of32wf32+0x11a>
 800b804:	9a03      	ldr	r2, [sp, #12]
 800b806:	eb04 0c02 	add.w	ip, r4, r2
 800b80a:	4564      	cmp	r4, ip
 800b80c:	d2df      	bcs.n	800b7ce <forward_lite_conv2d_if32of32wf32+0x316>
 800b80e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b810:	4683      	mov	fp, r0
 800b812:	fb02 f303 	mul.w	r3, r2, r3
 800b816:	4622      	mov	r2, r4
 800b818:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b81a:	e9cd 541b 	strd	r5, r4, [sp, #108]	@ 0x6c
 800b81e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b820:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b822:	930c      	str	r3, [sp, #48]	@ 0x30
 800b824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b826:	eb01 0e08 	add.w	lr, r1, r8
 800b82a:	9717      	str	r7, [sp, #92]	@ 0x5c
 800b82c:	9619      	str	r6, [sp, #100]	@ 0x64
 800b82e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b830:	2900      	cmp	r1, #0
 800b832:	f000 810d 	beq.w	800ba50 <forward_lite_conv2d_if32of32wf32+0x598>
 800b836:	ecb3 6a01 	vldmia	r3!, {s12}
 800b83a:	9941      	ldr	r1, [sp, #260]	@ 0x104
 800b83c:	2900      	cmp	r1, #0
 800b83e:	f000 80f5 	beq.w	800ba2c <forward_lite_conv2d_if32of32wf32+0x574>
 800b842:	2100      	movs	r1, #0
 800b844:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
 800b848:	460b      	mov	r3, r1
 800b84a:	4611      	mov	r1, r2
 800b84c:	461c      	mov	r4, r3
 800b84e:	e9cd c81f 	strd	ip, r8, [sp, #124]	@ 0x7c
 800b852:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b854:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b856:	f8cd e008 	str.w	lr, [sp, #8]
 800b85a:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
 800b85e:	2d00      	cmp	r5, #0
 800b860:	f2c0 80f1 	blt.w	800ba46 <forward_lite_conv2d_if32of32wf32+0x58e>
 800b864:	f04f 0e00 	mov.w	lr, #0
 800b868:	9a02      	ldr	r2, [sp, #8]
 800b86a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b86c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b86e:	9f04      	ldr	r7, [sp, #16]
 800b870:	eeb0 7a46 	vmov.f32	s14, s12
 800b874:	fb03 6307 	mla	r3, r3, r7, r6
 800b878:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b87e:	4406      	add	r6, r0
 800b880:	429e      	cmp	r6, r3
 800b882:	bf94      	ite	ls
 800b884:	ebce 0e06 	rsbls	lr, lr, r6
 800b888:	ebce 0e03 	rsbhi	lr, lr, r3
 800b88c:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800b88e:	f1bb 0f00 	cmp.w	fp, #0
 800b892:	fb0e f603 	mul.w	r6, lr, r3
 800b896:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800b898:	eba3 0a0e 	sub.w	sl, r3, lr
 800b89c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b89e:	eba3 0e0e 	sub.w	lr, r3, lr
 800b8a2:	f340 80ad 	ble.w	800ba00 <forward_lite_conv2d_if32of32wf32+0x548>
 800b8a6:	fb07 fa0a 	mul.w	sl, r7, sl
 800b8aa:	fb07 fe0e 	mul.w	lr, r7, lr
 800b8ae:	2700      	movs	r7, #0
 800b8b0:	f026 0c0f 	bic.w	ip, r6, #15
 800b8b4:	f10c 39ff 	add.w	r9, ip, #4294967295
 800b8b8:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800b8bc:	e9cd 1507 	strd	r1, r5, [sp, #28]
 800b8c0:	f109 0901 	add.w	r9, r9, #1
 800b8c4:	9b01      	ldr	r3, [sp, #4]
 800b8c6:	ea4f 1889 	mov.w	r8, r9, lsl #6
 800b8ca:	9409      	str	r4, [sp, #36]	@ 0x24
 800b8cc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800b8d0:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8d2:	f1bc 0f00 	cmp.w	ip, #0
 800b8d6:	bfd8      	it	le
 800b8d8:	2100      	movle	r1, #0
 800b8da:	dd74      	ble.n	800b9c6 <forward_lite_conv2d_if32of32wf32+0x50e>
 800b8dc:	2400      	movs	r4, #0
 800b8de:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b8e2:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800b8e6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b8ea:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 800b8ee:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800b8f2:	ed51 fa10 	vldr	s31, [r1, #-64]	@ 0xffffffc0
 800b8f6:	ed10 fa10 	vldr	s30, [r0, #-64]	@ 0xffffffc0
 800b8fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8fe:	ed10 ea0e 	vldr	s28, [r0, #-56]	@ 0xffffffc8
 800b902:	ed51 ea0e 	vldr	s29, [r1, #-56]	@ 0xffffffc8
 800b906:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800b90a:	ed10 da0d 	vldr	s26, [r0, #-52]	@ 0xffffffcc
 800b90e:	ed51 da0d 	vldr	s27, [r1, #-52]	@ 0xffffffcc
 800b912:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800b916:	ed50 ca0c 	vldr	s25, [r0, #-48]	@ 0xffffffd0
 800b91a:	ed11 ca0c 	vldr	s24, [r1, #-48]	@ 0xffffffd0
 800b91e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b922:	ed50 ba0b 	vldr	s23, [r0, #-44]	@ 0xffffffd4
 800b926:	ed11 ba0b 	vldr	s22, [r1, #-44]	@ 0xffffffd4
 800b92a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b92e:	ed50 aa0a 	vldr	s21, [r0, #-40]	@ 0xffffffd8
 800b932:	ed11 aa0a 	vldr	s20, [r1, #-40]	@ 0xffffffd8
 800b936:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b93a:	ed50 9a09 	vldr	s19, [r0, #-36]	@ 0xffffffdc
 800b93e:	ed11 9a09 	vldr	s18, [r1, #-36]	@ 0xffffffdc
 800b942:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b946:	ed51 8a08 	vldr	s17, [r1, #-32]	@ 0xffffffe0
 800b94a:	ed10 8a08 	vldr	s16, [r0, #-32]	@ 0xffffffe0
 800b94e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b952:	ed50 0a07 	vldr	s1, [r0, #-28]	@ 0xffffffe4
 800b956:	ed11 0a07 	vldr	s0, [r1, #-28]	@ 0xffffffe4
 800b95a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b95e:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 800b962:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800b966:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b96a:	ed50 2a05 	vldr	s5, [r0, #-20]	@ 0xffffffec
 800b96e:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800b972:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b976:	ed10 3a04 	vldr	s6, [r0, #-16]
 800b97a:	ed51 3a04 	vldr	s7, [r1, #-16]
 800b97e:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b982:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b986:	ed11 4a03 	vldr	s8, [r1, #-12]
 800b98a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b98e:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b992:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b996:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b99a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b99e:	ed51 6a01 	vldr	s13, [r1, #-4]
 800b9a2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b9a6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b9aa:	3410      	adds	r4, #16
 800b9ac:	4564      	cmp	r4, ip
 800b9ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9b2:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b9b6:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800b9ba:	db96      	blt.n	800b8ea <forward_lite_conv2d_if32of32wf32+0x432>
 800b9bc:	ed9d 6a01 	vldr	s12, [sp, #4]
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	4442      	add	r2, r8
 800b9c4:	4443      	add	r3, r8
 800b9c6:	428e      	cmp	r6, r1
 800b9c8:	dd10      	ble.n	800b9ec <forward_lite_conv2d_if32of32wf32+0x534>
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4615      	mov	r5, r2
 800b9ce:	461c      	mov	r4, r3
 800b9d0:	ecf4 6a01 	vldmia	r4!, {s13}
 800b9d4:	ecf5 7a01 	vldmia	r5!, {s15}
 800b9d8:	3001      	adds	r0, #1
 800b9da:	4286      	cmp	r6, r0
 800b9dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b9e0:	d1f6      	bne.n	800b9d0 <forward_lite_conv2d_if32of32wf32+0x518>
 800b9e2:	1a71      	subs	r1, r6, r1
 800b9e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b9e8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b9ec:	3701      	adds	r7, #1
 800b9ee:	45bb      	cmp	fp, r7
 800b9f0:	4452      	add	r2, sl
 800b9f2:	4473      	add	r3, lr
 800b9f4:	f47f af6d 	bne.w	800b8d2 <forward_lite_conv2d_if32of32wf32+0x41a>
 800b9f8:	e9dd 1507 	ldrd	r1, r5, [sp, #28]
 800b9fc:	e9dd 4009 	ldrd	r4, r0, [sp, #36]	@ 0x24
 800ba00:	9b06      	ldr	r3, [sp, #24]
 800ba02:	9a03      	ldr	r2, [sp, #12]
 800ba04:	ed81 7a00 	vstr	s14, [r1]
 800ba08:	441d      	add	r5, r3
 800ba0a:	4411      	add	r1, r2
 800ba0c:	1ac0      	subs	r0, r0, r3
 800ba0e:	9a05      	ldr	r2, [sp, #20]
 800ba10:	9b02      	ldr	r3, [sp, #8]
 800ba12:	3401      	adds	r4, #1
 800ba14:	4413      	add	r3, r2
 800ba16:	9302      	str	r3, [sp, #8]
 800ba18:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	f47f af1f 	bne.w	800b85e <forward_lite_conv2d_if32of32wf32+0x3a6>
 800ba20:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	@ 0x74
 800ba24:	e9dd c81f 	ldrd	ip, r8, [sp, #124]	@ 0x7c
 800ba28:	f8dd e084 	ldr.w	lr, [sp, #132]	@ 0x84
 800ba2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba2e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ba30:	3204      	adds	r2, #4
 800ba32:	4401      	add	r1, r0
 800ba34:	4562      	cmp	r2, ip
 800ba36:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba38:	f4ff aef9 	bcc.w	800b82e <forward_lite_conv2d_if32of32wf32+0x376>
 800ba3c:	e9dd 541b 	ldrd	r5, r4, [sp, #108]	@ 0x6c
 800ba40:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ba42:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800ba44:	e6c3      	b.n	800b7ce <forward_lite_conv2d_if32of32wf32+0x316>
 800ba46:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
 800ba4a:	4686      	mov	lr, r0
 800ba4c:	4403      	add	r3, r0
 800ba4e:	e70d      	b.n	800b86c <forward_lite_conv2d_if32of32wf32+0x3b4>
 800ba50:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800ba60 <forward_lite_conv2d_if32of32wf32+0x5a8>
 800ba54:	e6f1      	b.n	800b83a <forward_lite_conv2d_if32of32wf32+0x382>
 800ba56:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba58:	462b      	mov	r3, r5
 800ba5a:	920d      	str	r2, [sp, #52]	@ 0x34
 800ba5c:	e581      	b.n	800b562 <forward_lite_conv2d_if32of32wf32+0xaa>
 800ba5e:	bf00      	nop
 800ba60:	00000000 	.word	0x00000000

0800ba64 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800ba64:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ba6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba70:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800ba74:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba78:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800ba7c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ba80:	edd3 6a00 	vldr	s13, [r3]
 800ba84:	ed93 6a01 	vldr	s12, [r3, #4]
 800ba88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ba8c:	d421      	bmi.n	800bad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800ba8e:	428a      	cmp	r2, r1
 800ba90:	d31e      	bcc.n	800bad0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800ba92:	1d13      	adds	r3, r2, #4
 800ba94:	3004      	adds	r0, #4
 800ba96:	eba2 020c 	sub.w	r2, r2, ip
 800ba9a:	e00c      	b.n	800bab6 <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800ba9c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800baa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa4:	db03      	blt.n	800baae <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 800baa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800baaa:	ee67 7a86 	vmul.f32	s15, s15, s12
 800baae:	4293      	cmp	r3, r2
 800bab0:	ed60 7a01 	vstmdb	r0!, {s15}
 800bab4:	d00c      	beq.n	800bad0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800bab6:	ed73 7a01 	vldmdb	r3!, {s15}
 800baba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac2:	daeb      	bge.n	800ba9c <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 800bac4:	eef0 7a47 	vmov.f32	s15, s14
 800bac8:	4293      	cmp	r3, r2
 800baca:	ed60 7a01 	vstmdb	r0!, {s15}
 800bace:	d1f2      	bne.n	800bab6 <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800bad0:	4770      	bx	lr
 800bad2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bada:	d015      	beq.n	800bb08 <forward_lite_nl_relu_generic_if32of32_kernel+0xa4>
 800badc:	428a      	cmp	r2, r1
 800bade:	d3f7      	bcc.n	800bad0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800bae0:	1d13      	adds	r3, r2, #4
 800bae2:	3004      	adds	r0, #4
 800bae4:	eba2 020c 	sub.w	r2, r2, ip
 800bae8:	ed73 7a01 	vldmdb	r3!, {s15}
 800baec:	eef4 7ae6 	vcmpe.f32	s15, s13
 800baf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf4:	d81b      	bhi.n	800bb2e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800baf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bafa:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bafe:	4293      	cmp	r3, r2
 800bb00:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb04:	d1f0      	bne.n	800bae8 <forward_lite_nl_relu_generic_if32of32_kernel+0x84>
 800bb06:	4770      	bx	lr
 800bb08:	428a      	cmp	r2, r1
 800bb0a:	d3e1      	bcc.n	800bad0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	1d13      	adds	r3, r2, #4
 800bb10:	3004      	adds	r0, #4
 800bb12:	eba2 020c 	sub.w	r2, r2, ip
 800bb16:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb1a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb22:	dd09      	ble.n	800bb38 <forward_lite_nl_relu_generic_if32of32_kernel+0xd4>
 800bb24:	429a      	cmp	r2, r3
 800bb26:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb2a:	d1f4      	bne.n	800bb16 <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 800bb2c:	4770      	bx	lr
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb34:	d1d8      	bne.n	800bae8 <forward_lite_nl_relu_generic_if32of32_kernel+0x84>
 800bb36:	4770      	bx	lr
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	f840 1d04 	str.w	r1, [r0, #-4]!
 800bb3e:	d1ea      	bne.n	800bb16 <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop

0800bb44 <lite_decompress_ilutof32>:
 800bb44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb48:	4604      	mov	r4, r0
 800bb4a:	9d08      	ldr	r5, [sp, #32]
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800bb52:	4608      	mov	r0, r1
 800bb54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bb58:	d012      	beq.n	800bb80 <lite_decompress_ilutof32+0x3c>
 800bb5a:	2b08      	cmp	r3, #8
 800bb5c:	d10e      	bne.n	800bb7c <lite_decompress_ilutof32+0x38>
 800bb5e:	42ac      	cmp	r4, r5
 800bb60:	d20c      	bcs.n	800bb7c <lite_decompress_ilutof32+0x38>
 800bb62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f844 3b04 	str.w	r3, [r4], #4
 800bb70:	42a5      	cmp	r5, r4
 800bb72:	d8f6      	bhi.n	800bb62 <lite_decompress_ilutof32+0x1e>
 800bb74:	3e01      	subs	r6, #1
 800bb76:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 800bb7a:	1c70      	adds	r0, r6, #1
 800bb7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb80:	9b07      	ldr	r3, [sp, #28]
 800bb82:	085f      	lsrs	r7, r3, #1
 800bb84:	f003 0601 	and.w	r6, r3, #1
 800bb88:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800bb8c:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb90:	42ac      	cmp	r4, r5
 800bb92:	d2f3      	bcs.n	800bb7c <lite_decompress_ilutof32+0x38>
 800bb94:	b30f      	cbz	r7, 800bbda <lite_decompress_ilutof32+0x96>
 800bb96:	f104 0e08 	add.w	lr, r4, #8
 800bb9a:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb9e:	eb00 0108 	add.w	r1, r0, r8
 800bba2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800bba6:	f10e 0e08 	add.w	lr, lr, #8
 800bbaa:	091b      	lsrs	r3, r3, #4
 800bbac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4561      	cmp	r1, ip
 800bbb4:	f84e 3c10 	str.w	r3, [lr, #-16]
 800bbb8:	f89c 3000 	ldrb.w	r3, [ip]
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800bbca:	d1ea      	bne.n	800bba2 <lite_decompress_ilutof32+0x5e>
 800bbcc:	4438      	add	r0, r7
 800bbce:	444c      	add	r4, r9
 800bbd0:	b92e      	cbnz	r6, 800bbde <lite_decompress_ilutof32+0x9a>
 800bbd2:	42a5      	cmp	r5, r4
 800bbd4:	d8df      	bhi.n	800bb96 <lite_decompress_ilutof32+0x52>
 800bbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbda:	b906      	cbnz	r6, 800bbde <lite_decompress_ilutof32+0x9a>
 800bbdc:	e7fe      	b.n	800bbdc <lite_decompress_ilutof32+0x98>
 800bbde:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbe2:	091b      	lsrs	r3, r3, #4
 800bbe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f844 3b04 	str.w	r3, [r4], #4
 800bbee:	e7cf      	b.n	800bb90 <lite_decompress_ilutof32+0x4c>

0800bbf0 <forward_lite_dense_if32of32wf32>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	ed2d 8b10 	vpush	{d8-d15}
 800bbf8:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800bbfc:	fb06 f303 	mul.w	r3, r6, r3
 800bc00:	6801      	ldr	r1, [r0, #0]
 800bc02:	4602      	mov	r2, r0
 800bc04:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bc08:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bc0c:	4281      	cmp	r1, r0
 800bc0e:	b083      	sub	sp, #12
 800bc10:	f080 811d 	bcs.w	800be4e <forward_lite_dense_if32of32wf32+0x25e>
 800bc14:	6915      	ldr	r5, [r2, #16]
 800bc16:	00b7      	lsls	r7, r6, #2
 800bc18:	eb01 0907 	add.w	r9, r1, r7
 800bc1c:	4589      	cmp	r9, r1
 800bc1e:	6897      	ldr	r7, [r2, #8]
 800bc20:	f240 8109 	bls.w	800be36 <forward_lite_dense_if32of32wf32+0x246>
 800bc24:	460e      	mov	r6, r1
 800bc26:	f1a5 0e10 	sub.w	lr, r5, #16
 800bc2a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800bc2e:	e9cd 0100 	strd	r0, r1, [sp]
 800bc32:	f10e 0e01 	add.w	lr, lr, #1
 800bc36:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 800bc3a:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800bc3e:	eb08 1e8e 	add.w	lr, r8, lr, lsl #6
 800bc42:	2d0f      	cmp	r5, #15
 800bc44:	f240 8108 	bls.w	800be58 <forward_lite_dense_if32of32wf32+0x268>
 800bc48:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800bea4 <forward_lite_dense_if32of32wf32+0x2b4>
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f108 0140 	add.w	r1, r8, #64	@ 0x40
 800bc52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc56:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 800bc5a:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800bc5e:	ed51 fa10 	vldr	s31, [r1, #-64]	@ 0xffffffc0
 800bc62:	ed13 fa10 	vldr	s30, [r3, #-64]	@ 0xffffffc0
 800bc66:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bc6a:	ed51 ea0e 	vldr	s29, [r1, #-56]	@ 0xffffffc8
 800bc6e:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800bc72:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800bc76:	ed11 da0d 	vldr	s26, [r1, #-52]	@ 0xffffffcc
 800bc7a:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800bc7e:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800bc82:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800bc86:	ed11 ca0c 	vldr	s24, [r1, #-48]	@ 0xffffffd0
 800bc8a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800bc8e:	ed11 ba0b 	vldr	s22, [r1, #-44]	@ 0xffffffd4
 800bc92:	ed53 ba0b 	vldr	s23, [r3, #-44]	@ 0xffffffd4
 800bc96:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800bc9a:	ed11 aa0a 	vldr	s20, [r1, #-40]	@ 0xffffffd8
 800bc9e:	ed53 aa0a 	vldr	s21, [r3, #-40]	@ 0xffffffd8
 800bca2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800bca6:	ed11 9a09 	vldr	s18, [r1, #-36]	@ 0xffffffdc
 800bcaa:	ed53 9a09 	vldr	s19, [r3, #-36]	@ 0xffffffdc
 800bcae:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800bcb2:	ed51 8a08 	vldr	s17, [r1, #-32]	@ 0xffffffe0
 800bcb6:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 800bcba:	eee9 7a89 	vfma.f32	s15, s19, s18
 800bcbe:	ed11 0a07 	vldr	s0, [r1, #-28]	@ 0xffffffe4
 800bcc2:	ed53 0a07 	vldr	s1, [r3, #-28]	@ 0xffffffe4
 800bcc6:	eee8 7a88 	vfma.f32	s15, s17, s16
 800bcca:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800bcce:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800bcd2:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bcd6:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800bcda:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800bcde:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bce2:	ed11 3a04 	vldr	s6, [r1, #-16]
 800bce6:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bcea:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bcee:	ed51 4a03 	vldr	s9, [r1, #-12]
 800bcf2:	ed13 4a03 	vldr	s8, [r3, #-12]
 800bcf6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bcfa:	ed51 5a02 	vldr	s11, [r1, #-8]
 800bcfe:	ed13 5a02 	vldr	s10, [r3, #-8]
 800bd02:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd06:	ed51 6a01 	vldr	s13, [r1, #-4]
 800bd0a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800bd0e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd12:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd16:	3810      	subs	r0, #16
 800bd18:	280f      	cmp	r0, #15
 800bd1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd1e:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800bd22:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800bd26:	d896      	bhi.n	800bc56 <forward_lite_dense_if32of32wf32+0x66>
 800bd28:	4673      	mov	r3, lr
 800bd2a:	eb07 010b 	add.w	r1, r7, fp
 800bd2e:	f005 000f 	and.w	r0, r5, #15
 800bd32:	2803      	cmp	r0, #3
 800bd34:	d95f      	bls.n	800bdf6 <forward_lite_dense_if32of32wf32+0x206>
 800bd36:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd3a:	edd1 3a01 	vldr	s7, [r1, #4]
 800bd3e:	ed93 4a00 	vldr	s8, [r3]
 800bd42:	edd1 4a00 	vldr	s9, [r1]
 800bd46:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bd4a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd4e:	ed93 5a02 	vldr	s10, [r3, #8]
 800bd52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd56:	edd1 5a02 	vldr	s11, [r1, #8]
 800bd5a:	ed93 6a03 	vldr	s12, [r3, #12]
 800bd5e:	edd1 6a03 	vldr	s13, [r1, #12]
 800bd62:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd66:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd6a:	1f04      	subs	r4, r0, #4
 800bd6c:	2c03      	cmp	r4, #3
 800bd6e:	eeb0 7a67 	vmov.f32	s14, s15
 800bd72:	d938      	bls.n	800bde6 <forward_lite_dense_if32of32wf32+0x1f6>
 800bd74:	edd3 7a05 	vldr	s15, [r3, #20]
 800bd78:	edd1 3a05 	vldr	s7, [r1, #20]
 800bd7c:	ed93 4a04 	vldr	s8, [r3, #16]
 800bd80:	edd1 4a04 	vldr	s9, [r1, #16]
 800bd84:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bd88:	ed93 5a06 	vldr	s10, [r3, #24]
 800bd8c:	edd1 5a06 	vldr	s11, [r1, #24]
 800bd90:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd94:	ed93 6a07 	vldr	s12, [r3, #28]
 800bd98:	edd1 6a07 	vldr	s13, [r1, #28]
 800bd9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bda0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bda4:	f1a0 0c08 	sub.w	ip, r0, #8
 800bda8:	f1bc 0f03 	cmp.w	ip, #3
 800bdac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdb0:	d919      	bls.n	800bde6 <forward_lite_dense_if32of32wf32+0x1f6>
 800bdb2:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 800bdb6:	edd3 3a09 	vldr	s7, [r3, #36]	@ 0x24
 800bdba:	ed91 4a08 	vldr	s8, [r1, #32]
 800bdbe:	edd3 4a08 	vldr	s9, [r3, #32]
 800bdc2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bdc6:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 800bdca:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800bdce:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bdd2:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 800bdd6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800bdda:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bdde:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bde2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bde6:	08a4      	lsrs	r4, r4, #2
 800bde8:	3401      	adds	r4, #1
 800bdea:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800bdee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800bdf2:	f000 0003 	and.w	r0, r0, #3
 800bdf6:	b1a8      	cbz	r0, 800be24 <forward_lite_dense_if32of32wf32+0x234>
 800bdf8:	edd3 6a00 	vldr	s13, [r3]
 800bdfc:	edd1 7a00 	vldr	s15, [r1]
 800be00:	2801      	cmp	r0, #1
 800be02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be06:	d00d      	beq.n	800be24 <forward_lite_dense_if32of32wf32+0x234>
 800be08:	edd3 6a01 	vldr	s13, [r3, #4]
 800be0c:	edd1 7a01 	vldr	s15, [r1, #4]
 800be10:	2802      	cmp	r0, #2
 800be12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be16:	d005      	beq.n	800be24 <forward_lite_dense_if32of32wf32+0x234>
 800be18:	edd1 6a02 	vldr	s13, [r1, #8]
 800be1c:	edd3 7a02 	vldr	s15, [r3, #8]
 800be20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be24:	eca6 7a01 	vstmia	r6!, {s14}
 800be28:	45b1      	cmp	r9, r6
 800be2a:	4457      	add	r7, sl
 800be2c:	f63f af09 	bhi.w	800bc42 <forward_lite_dense_if32of32wf32+0x52>
 800be30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be34:	6956      	ldr	r6, [r2, #20]
 800be36:	68d3      	ldr	r3, [r2, #12]
 800be38:	b9a3      	cbnz	r3, 800be64 <forward_lite_dense_if32of32wf32+0x274>
 800be3a:	6915      	ldr	r5, [r2, #16]
 800be3c:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800be40:	4288      	cmp	r0, r1
 800be42:	eb08 0885 	add.w	r8, r8, r5, lsl #2
 800be46:	ea4f 0786 	mov.w	r7, r6, lsl #2
 800be4a:	f63f aee5 	bhi.w	800bc18 <forward_lite_dense_if32of32wf32+0x28>
 800be4e:	b003      	add	sp, #12
 800be50:	ecbd 8b10 	vpop	{d8-d15}
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	4628      	mov	r0, r5
 800be5a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bea4 <forward_lite_dense_if32of32wf32+0x2b4>
 800be5e:	4639      	mov	r1, r7
 800be60:	4643      	mov	r3, r8
 800be62:	e766      	b.n	800bd32 <forward_lite_dense_if32of32wf32+0x142>
 800be64:	2e00      	cmp	r6, #0
 800be66:	d0e8      	beq.n	800be3a <forward_lite_dense_if32of32wf32+0x24a>
 800be68:	edd1 7a00 	vldr	s15, [r1]
 800be6c:	ed93 7a00 	vldr	s14, [r3]
 800be70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be74:	edc1 7a00 	vstr	s15, [r1]
 800be78:	6956      	ldr	r6, [r2, #20]
 800be7a:	2e01      	cmp	r6, #1
 800be7c:	d9dd      	bls.n	800be3a <forward_lite_dense_if32of32wf32+0x24a>
 800be7e:	2301      	movs	r3, #1
 800be80:	1d0d      	adds	r5, r1, #4
 800be82:	68d4      	ldr	r4, [r2, #12]
 800be84:	ed95 7a00 	vldr	s14, [r5]
 800be88:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800be8c:	edd4 7a00 	vldr	s15, [r4]
 800be90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be94:	ece5 7a01 	vstmia	r5!, {s15}
 800be98:	6956      	ldr	r6, [r2, #20]
 800be9a:	3301      	adds	r3, #1
 800be9c:	429e      	cmp	r6, r3
 800be9e:	d8f0      	bhi.n	800be82 <forward_lite_dense_if32of32wf32+0x292>
 800bea0:	e7cb      	b.n	800be3a <forward_lite_dense_if32of32wf32+0x24a>
 800bea2:	bf00      	nop
 800bea4:	00000000 	.word	0x00000000

0800bea8 <forward_lite_dense_if32of32wf32_lut4>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	b08d      	sub	sp, #52	@ 0x34
 800beae:	e9dd 5419 	ldrd	r5, r4, [sp, #100]	@ 0x64
 800beb2:	fb04 fc05 	mul.w	ip, r4, r5
 800beb6:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 800beba:	4604      	mov	r4, r0
 800bebc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bec0:	4618      	mov	r0, r3
 800bec2:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800bec6:	460d      	mov	r5, r1
 800bec8:	920a      	str	r2, [sp, #40]	@ 0x28
 800beca:	9308      	str	r3, [sp, #32]
 800becc:	f1b8 0f00 	cmp.w	r8, #0
 800bed0:	d004      	beq.n	800bedc <forward_lite_dense_if32of32wf32_lut4+0x34>
 800bed2:	2240      	movs	r2, #64	@ 0x40
 800bed4:	4641      	mov	r1, r8
 800bed6:	f000 fa79 	bl	800c3cc <st_int8_copy>
 800beda:	4640      	mov	r0, r8
 800bedc:	9b08      	ldr	r3, [sp, #32]
 800bede:	429c      	cmp	r4, r3
 800bee0:	f080 8108 	bcs.w	800c0f4 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800bee4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bee6:	08fa      	lsrs	r2, r7, #3
 800bee8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800beec:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 800bef0:	9405      	str	r4, [sp, #20]
 800bef2:	46e6      	mov	lr, ip
 800bef4:	465c      	mov	r4, fp
 800bef6:	f007 0301 	and.w	r3, r7, #1
 800befa:	9303      	str	r3, [sp, #12]
 800befc:	00bb      	lsls	r3, r7, #2
 800befe:	9202      	str	r2, [sp, #8]
 800bf00:	f027 0901 	bic.w	r9, r7, #1
 800bf04:	0092      	lsls	r2, r2, #2
 800bf06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf08:	9b05      	ldr	r3, [sp, #20]
 800bf0a:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800bf0e:	f105 0120 	add.w	r1, r5, #32
 800bf12:	9204      	str	r2, [sp, #16]
 800bf14:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf18:	9617      	str	r6, [sp, #92]	@ 0x5c
 800bf1a:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800bf1e:	9a07      	ldr	r2, [sp, #28]
 800bf20:	eb03 0a02 	add.w	sl, r3, r2
 800bf24:	459a      	cmp	sl, r3
 800bf26:	f1a1 0220 	sub.w	r2, r1, #32
 800bf2a:	9206      	str	r2, [sp, #24]
 800bf2c:	f240 80e5 	bls.w	800c0fa <forward_lite_dense_if32of32wf32_lut4+0x252>
 800bf30:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf34:	4698      	mov	r8, r3
 800bf36:	465d      	mov	r5, fp
 800bf38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf3a:	9b02      	ldr	r3, [sp, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 80bc 	beq.w	800c0ba <forward_lite_dense_if32of32wf32_lut4+0x212>
 800bf42:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800c12c <forward_lite_dense_if32of32wf32_lut4+0x284>
 800bf46:	460b      	mov	r3, r1
 800bf48:	9e04      	ldr	r6, [sp, #16]
 800bf4a:	eb02 0c06 	add.w	ip, r2, r6
 800bf4e:	7817      	ldrb	r7, [r2, #0]
 800bf50:	ed13 6a07 	vldr	s12, [r3, #-28]	@ 0xffffffe4
 800bf54:	f007 0e0f 	and.w	lr, r7, #15
 800bf58:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800bf5c:	edde 7a00 	vldr	s15, [lr]
 800bf60:	093f      	lsrs	r7, r7, #4
 800bf62:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bf66:	ed53 0a08 	vldr	s1, [r3, #-32]	@ 0xffffffe0
 800bf6a:	ed97 0a00 	vldr	s0, [r7]
 800bf6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bf72:	7856      	ldrb	r6, [r2, #1]
 800bf74:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800bf78:	0937      	lsrs	r7, r6, #4
 800bf7a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bf7e:	ed97 1a00 	vldr	s2, [r7]
 800bf82:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bf86:	f006 060f 	and.w	r6, r6, #15
 800bf8a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bf8e:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800bf92:	ed96 2a00 	vldr	s4, [r6]
 800bf96:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bf9a:	7897      	ldrb	r7, [r2, #2]
 800bf9c:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bfa0:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 800bfa4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800bfa8:	ed9e 3a00 	vldr	s6, [lr]
 800bfac:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bfb0:	f007 070f 	and.w	r7, r7, #15
 800bfb4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bfb8:	ed53 4a03 	vldr	s9, [r3, #-12]
 800bfbc:	ed97 4a00 	vldr	s8, [r7]
 800bfc0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bfc4:	78d6      	ldrb	r6, [r2, #3]
 800bfc6:	ed53 5a02 	vldr	s11, [r3, #-8]
 800bfca:	0937      	lsrs	r7, r6, #4
 800bfcc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bfd0:	ed97 5a00 	vldr	s10, [r7]
 800bfd4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bfd8:	f006 060f 	and.w	r6, r6, #15
 800bfdc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bfe0:	ed53 6a01 	vldr	s13, [r3, #-4]
 800bfe4:	ed96 6a00 	vldr	s12, [r6]
 800bfe8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bfec:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bff0:	3204      	adds	r2, #4
 800bff2:	4562      	cmp	r2, ip
 800bff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bff8:	f103 0320 	add.w	r3, r3, #32
 800bffc:	d1a7      	bne.n	800bf4e <forward_lite_dense_if32of32wf32_lut4+0xa6>
 800bffe:	46a6      	mov	lr, r4
 800c000:	45ce      	cmp	lr, r9
 800c002:	d261      	bcs.n	800c0c8 <forward_lite_dense_if32of32wf32_lut4+0x220>
 800c004:	eba5 070e 	sub.w	r7, r5, lr
 800c008:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 800c00c:	f10e 0208 	add.w	r2, lr, #8
 800c010:	f10c 36ff 	add.w	r6, ip, #4294967295
 800c014:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 800c018:	f8cd a004 	str.w	sl, [sp, #4]
 800c01c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c020:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c024:	f003 0a0f 	and.w	sl, r3, #15
 800c028:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800c02c:	edda 7a00 	vldr	s15, [sl]
 800c030:	091b      	lsrs	r3, r3, #4
 800c032:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c036:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c03a:	ed93 6a00 	vldr	s12, [r3]
 800c03e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c042:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c046:	42b7      	cmp	r7, r6
 800c048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c04c:	f102 0208 	add.w	r2, r2, #8
 800c050:	d1e4      	bne.n	800c01c <forward_lite_dense_if32of32wf32_lut4+0x174>
 800c052:	f10b 0b01 	add.w	fp, fp, #1
 800c056:	f8dd a004 	ldr.w	sl, [sp, #4]
 800c05a:	eb0c 020b 	add.w	r2, ip, fp
 800c05e:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 800c062:	9b03      	ldr	r3, [sp, #12]
 800c064:	b30b      	cbz	r3, 800c0aa <forward_lite_dense_if32of32wf32_lut4+0x202>
 800c066:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c06a:	edde 7a00 	vldr	s15, [lr]
 800c06e:	091b      	lsrs	r3, r3, #4
 800c070:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c074:	edd3 6a00 	vldr	s13, [r3]
 800c078:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c07c:	eca8 7a01 	vstmia	r8!, {s14}
 800c080:	45c2      	cmp	sl, r8
 800c082:	f63f af5a 	bhi.w	800bf3a <forward_lite_dense_if32of32wf32_lut4+0x92>
 800c086:	9b05      	ldr	r3, [sp, #20]
 800c088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c08a:	189d      	adds	r5, r3, r2
 800c08c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c08e:	b9eb      	cbnz	r3, 800c0cc <forward_lite_dense_if32of32wf32_lut4+0x224>
 800c090:	9b08      	ldr	r3, [sp, #32]
 800c092:	42ab      	cmp	r3, r5
 800c094:	d92e      	bls.n	800c0f4 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800c096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c098:	4499      	add	r9, r3
 800c09a:	441c      	add	r4, r3
 800c09c:	4419      	add	r1, r3
 800c09e:	9b05      	ldr	r3, [sp, #20]
 800c0a0:	459a      	cmp	sl, r3
 800c0a2:	d92c      	bls.n	800c0fe <forward_lite_dense_if32of32wf32_lut4+0x256>
 800c0a4:	462b      	mov	r3, r5
 800c0a6:	9505      	str	r5, [sp, #20]
 800c0a8:	e739      	b.n	800bf1e <forward_lite_dense_if32of32wf32_lut4+0x76>
 800c0aa:	eca8 7a01 	vstmia	r8!, {s14}
 800c0ae:	45c2      	cmp	sl, r8
 800c0b0:	d9e9      	bls.n	800c086 <forward_lite_dense_if32of32wf32_lut4+0x1de>
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f47f af44 	bne.w	800bf42 <forward_lite_dense_if32of32wf32_lut4+0x9a>
 800c0ba:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c0be:	4694      	mov	ip, r2
 800c0c0:	45ce      	cmp	lr, r9
 800c0c2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800c12c <forward_lite_dense_if32of32wf32_lut4+0x284>
 800c0c6:	d39d      	bcc.n	800c004 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 800c0c8:	4662      	mov	r2, ip
 800c0ca:	e7ca      	b.n	800c062 <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 800c0cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0de      	beq.n	800c090 <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 800c0d2:	9b07      	ldr	r3, [sp, #28]
 800c0d4:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800c0d8:	1aea      	subs	r2, r5, r3
 800c0da:	edd2 7a00 	vldr	s15, [r2]
 800c0de:	ecbc 7a01 	vldmia	ip!, {s14}
 800c0e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0e6:	ece2 7a01 	vstmia	r2!, {s15}
 800c0ea:	42aa      	cmp	r2, r5
 800c0ec:	d1f5      	bne.n	800c0da <forward_lite_dense_if32of32wf32_lut4+0x232>
 800c0ee:	9b08      	ldr	r3, [sp, #32]
 800c0f0:	42ab      	cmp	r3, r5
 800c0f2:	d8d0      	bhi.n	800c096 <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 800c0f4:	b00d      	add	sp, #52	@ 0x34
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	461d      	mov	r5, r3
 800c0fc:	e7c6      	b.n	800c08c <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 800c0fe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c102:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c104:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800c106:	eba5 0c0c 	sub.w	ip, r5, ip
 800c10a:	b169      	cbz	r1, 800c128 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c10c:	4663      	mov	r3, ip
 800c10e:	4632      	mov	r2, r6
 800c110:	ed93 7a00 	vldr	s14, [r3]
 800c114:	ecf2 7a01 	vldmia	r2!, {s15}
 800c118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c11c:	ece3 7a01 	vstmia	r3!, {s15}
 800c120:	429d      	cmp	r5, r3
 800c122:	d1f5      	bne.n	800c110 <forward_lite_dense_if32of32wf32_lut4+0x268>
 800c124:	2900      	cmp	r1, #0
 800c126:	d1f1      	bne.n	800c10c <forward_lite_dense_if32of32wf32_lut4+0x264>
 800c128:	e7fe      	b.n	800c128 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c12a:	bf00      	nop
 800c12c:	00000000 	.word	0x00000000

0800c130 <forward_lite_dense_if32of32wf32_lut8>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	b087      	sub	sp, #28
 800c136:	e9dd 6513 	ldrd	r6, r5, [sp, #76]	@ 0x4c
 800c13a:	fb05 fc06 	mul.w	ip, r5, r6
 800c13e:	e9dd b511 	ldrd	fp, r5, [sp, #68]	@ 0x44
 800c142:	4606      	mov	r6, r0
 800c144:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c146:	4618      	mov	r0, r3
 800c148:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 800c14c:	460f      	mov	r7, r1
 800c14e:	9205      	str	r2, [sp, #20]
 800c150:	9303      	str	r3, [sp, #12]
 800c152:	b12c      	cbz	r4, 800c160 <forward_lite_dense_if32of32wf32_lut8+0x30>
 800c154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c158:	4621      	mov	r1, r4
 800c15a:	f000 f937 	bl	800c3cc <st_int8_copy>
 800c15e:	4620      	mov	r0, r4
 800c160:	9b03      	ldr	r3, [sp, #12]
 800c162:	429e      	cmp	r6, r3
 800c164:	f080 8118 	bcs.w	800c398 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c168:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c16a:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 800c16e:	0099      	lsls	r1, r3, #2
 800c170:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800c174:	9600      	str	r6, [sp, #0]
 800c176:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800c17a:	464e      	mov	r6, r9
 800c17c:	4689      	mov	r9, r1
 800c17e:	9b00      	ldr	r3, [sp, #0]
 800c180:	00aa      	lsls	r2, r5, #2
 800c182:	9104      	str	r1, [sp, #16]
 800c184:	4611      	mov	r1, r2
 800c186:	465a      	mov	r2, fp
 800c188:	eb03 0b09 	add.w	fp, r3, r9
 800c18c:	3720      	adds	r7, #32
 800c18e:	459b      	cmp	fp, r3
 800c190:	f005 0407 	and.w	r4, r5, #7
 800c194:	f1a7 0e20 	sub.w	lr, r7, #32
 800c198:	f240 80d7 	bls.w	800c34a <forward_lite_dense_if32of32wf32_lut8+0x21a>
 800c19c:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 800c1a0:	469c      	mov	ip, r3
 800c1a2:	9b05      	ldr	r3, [sp, #20]
 800c1a4:	2e00      	cmp	r6, #0
 800c1a6:	f000 80de 	beq.w	800c366 <forward_lite_dense_if32of32wf32_lut8+0x236>
 800c1aa:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800c3c8 <forward_lite_dense_if32of32wf32_lut8+0x298>
 800c1ae:	463d      	mov	r5, r7
 800c1b0:	eb03 090a 	add.w	r9, r3, sl
 800c1b4:	f893 e001 	ldrb.w	lr, [r3, #1]
 800c1b8:	ed15 5a07 	vldr	s10, [r5, #-28]	@ 0xffffffe4
 800c1bc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1c0:	edde 7a00 	vldr	s15, [lr]
 800c1c4:	f893 e000 	ldrb.w	lr, [r3]
 800c1c8:	ed15 6a08 	vldr	s12, [r5, #-32]	@ 0xffffffe0
 800c1cc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1d0:	edde 0a00 	vldr	s1, [lr]
 800c1d4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c1d8:	f893 e002 	ldrb.w	lr, [r3, #2]
 800c1dc:	ed55 1a06 	vldr	s3, [r5, #-24]	@ 0xffffffe8
 800c1e0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1e4:	ed9e 1a00 	vldr	s2, [lr]
 800c1e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c1ec:	f893 e003 	ldrb.w	lr, [r3, #3]
 800c1f0:	ed55 2a05 	vldr	s5, [r5, #-20]	@ 0xffffffec
 800c1f4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1f8:	ed9e 2a00 	vldr	s4, [lr]
 800c1fc:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c200:	f893 e004 	ldrb.w	lr, [r3, #4]
 800c204:	ed55 3a04 	vldr	s7, [r5, #-16]
 800c208:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c20c:	ed9e 3a00 	vldr	s6, [lr]
 800c210:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c214:	f893 e005 	ldrb.w	lr, [r3, #5]
 800c218:	ed55 4a03 	vldr	s9, [r5, #-12]
 800c21c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c220:	ed9e 4a00 	vldr	s8, [lr]
 800c224:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c228:	f893 e006 	ldrb.w	lr, [r3, #6]
 800c22c:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c230:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c234:	ed9e 5a00 	vldr	s10, [lr]
 800c238:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c23c:	f893 e007 	ldrb.w	lr, [r3, #7]
 800c240:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c244:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c248:	ed9e 6a00 	vldr	s12, [lr]
 800c24c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c250:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c254:	3308      	adds	r3, #8
 800c256:	454b      	cmp	r3, r9
 800c258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c25c:	f105 0520 	add.w	r5, r5, #32
 800c260:	d1a8      	bne.n	800c1b4 <forward_lite_dense_if32of32wf32_lut8+0x84>
 800c262:	4643      	mov	r3, r8
 800c264:	2c00      	cmp	r4, #0
 800c266:	d07c      	beq.n	800c362 <forward_lite_dense_if32of32wf32_lut8+0x232>
 800c268:	f899 5000 	ldrb.w	r5, [r9]
 800c26c:	edd3 7a00 	vldr	s15, [r3]
 800c270:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c274:	edd5 6a00 	vldr	s13, [r5]
 800c278:	2c01      	cmp	r4, #1
 800c27a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c27e:	d045      	beq.n	800c30c <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c280:	f899 5001 	ldrb.w	r5, [r9, #1]
 800c284:	edd3 7a01 	vldr	s15, [r3, #4]
 800c288:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c28c:	edd5 6a00 	vldr	s13, [r5]
 800c290:	2c02      	cmp	r4, #2
 800c292:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c296:	d039      	beq.n	800c30c <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c298:	f899 5002 	ldrb.w	r5, [r9, #2]
 800c29c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c2a0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2a4:	edd5 6a00 	vldr	s13, [r5]
 800c2a8:	2c03      	cmp	r4, #3
 800c2aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2ae:	d02d      	beq.n	800c30c <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2b0:	f899 5003 	ldrb.w	r5, [r9, #3]
 800c2b4:	edd3 6a03 	vldr	s13, [r3, #12]
 800c2b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2bc:	edd5 7a00 	vldr	s15, [r5]
 800c2c0:	2c04      	cmp	r4, #4
 800c2c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2c6:	d021      	beq.n	800c30c <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2c8:	f899 5004 	ldrb.w	r5, [r9, #4]
 800c2cc:	edd3 6a04 	vldr	s13, [r3, #16]
 800c2d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2d4:	edd5 7a00 	vldr	s15, [r5]
 800c2d8:	2c05      	cmp	r4, #5
 800c2da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2de:	d015      	beq.n	800c30c <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2e0:	f899 5005 	ldrb.w	r5, [r9, #5]
 800c2e4:	edd3 6a05 	vldr	s13, [r3, #20]
 800c2e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2ec:	edd5 7a00 	vldr	s15, [r5]
 800c2f0:	2c06      	cmp	r4, #6
 800c2f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2f6:	d009      	beq.n	800c30c <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2f8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2fc:	f899 3006 	ldrb.w	r3, [r9, #6]
 800c300:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c304:	edd3 6a00 	vldr	s13, [r3]
 800c308:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c30c:	eb09 0304 	add.w	r3, r9, r4
 800c310:	ecac 7a01 	vstmia	ip!, {s14}
 800c314:	45e3      	cmp	fp, ip
 800c316:	f63f af45 	bhi.w	800c1a4 <forward_lite_dense_if32of32wf32_lut8+0x74>
 800c31a:	e9dd 3900 	ldrd	r3, r9, [sp]
 800c31e:	9d04      	ldr	r5, [sp, #16]
 800c320:	eb03 0e05 	add.w	lr, r3, r5
 800c324:	bb2a      	cbnz	r2, 800c372 <forward_lite_dense_if32of32wf32_lut8+0x242>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	4573      	cmp	r3, lr
 800c32a:	d935      	bls.n	800c398 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	4488      	add	r8, r1
 800c330:	459b      	cmp	fp, r3
 800c332:	440f      	add	r7, r1
 800c334:	d944      	bls.n	800c3c0 <forward_lite_dense_if32of32wf32_lut8+0x290>
 800c336:	4673      	mov	r3, lr
 800c338:	eb03 0b09 	add.w	fp, r3, r9
 800c33c:	459b      	cmp	fp, r3
 800c33e:	f8cd e000 	str.w	lr, [sp]
 800c342:	f1a7 0e20 	sub.w	lr, r7, #32
 800c346:	f63f af29 	bhi.w	800c19c <forward_lite_dense_if32of32wf32_lut8+0x6c>
 800c34a:	b98a      	cbnz	r2, 800c370 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800c34c:	461e      	mov	r6, r3
 800c34e:	9b03      	ldr	r3, [sp, #12]
 800c350:	4649      	mov	r1, r9
 800c352:	42b3      	cmp	r3, r6
 800c354:	4693      	mov	fp, r2
 800c356:	d91f      	bls.n	800c398 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c358:	465b      	mov	r3, fp
 800c35a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c35c:	4249      	negs	r1, r1
 800c35e:	b9f3      	cbnz	r3, 800c39e <forward_lite_dense_if32of32wf32_lut8+0x26e>
 800c360:	e7fe      	b.n	800c360 <forward_lite_dense_if32of32wf32_lut8+0x230>
 800c362:	464b      	mov	r3, r9
 800c364:	e7d4      	b.n	800c310 <forward_lite_dense_if32of32wf32_lut8+0x1e0>
 800c366:	4699      	mov	r9, r3
 800c368:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800c3c8 <forward_lite_dense_if32of32wf32_lut8+0x298>
 800c36c:	9b02      	ldr	r3, [sp, #8]
 800c36e:	e779      	b.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x134>
 800c370:	469e      	mov	lr, r3
 800c372:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0d6      	beq.n	800c326 <forward_lite_dense_if32of32wf32_lut8+0x1f6>
 800c378:	4615      	mov	r5, r2
 800c37a:	ebae 0309 	sub.w	r3, lr, r9
 800c37e:	edd3 7a00 	vldr	s15, [r3]
 800c382:	ecb5 7a01 	vldmia	r5!, {s14}
 800c386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c38a:	ece3 7a01 	vstmia	r3!, {s15}
 800c38e:	4573      	cmp	r3, lr
 800c390:	d1f5      	bne.n	800c37e <forward_lite_dense_if32of32wf32_lut8+0x24e>
 800c392:	9b03      	ldr	r3, [sp, #12]
 800c394:	4573      	cmp	r3, lr
 800c396:	d8c9      	bhi.n	800c32c <forward_lite_dense_if32of32wf32_lut8+0x1fc>
 800c398:	b007      	add	sp, #28
 800c39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	d0dd      	beq.n	800c35e <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800c3a2:	469b      	mov	fp, r3
 800c3a4:	4431      	add	r1, r6
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	465a      	mov	r2, fp
 800c3aa:	ed93 7a00 	vldr	s14, [r3]
 800c3ae:	ecf2 7a01 	vldmia	r2!, {s15}
 800c3b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3b6:	ece3 7a01 	vstmia	r3!, {s15}
 800c3ba:	42b3      	cmp	r3, r6
 800c3bc:	d1f5      	bne.n	800c3aa <forward_lite_dense_if32of32wf32_lut8+0x27a>
 800c3be:	e7f2      	b.n	800c3a6 <forward_lite_dense_if32of32wf32_lut8+0x276>
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	4693      	mov	fp, r2
 800c3c4:	4676      	mov	r6, lr
 800c3c6:	e7c7      	b.n	800c358 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800c3c8:	00000000 	.word	0x00000000

0800c3cc <st_int8_copy>:
 800c3cc:	4288      	cmp	r0, r1
 800c3ce:	d021      	beq.n	800c414 <st_int8_copy+0x48>
 800c3d0:	b302      	cbz	r2, 800c414 <st_int8_copy+0x48>
 800c3d2:	4288      	cmp	r0, r1
 800c3d4:	d313      	bcc.n	800c3fe <st_int8_copy+0x32>
 800c3d6:	2a03      	cmp	r2, #3
 800c3d8:	d81d      	bhi.n	800c416 <st_int8_copy+0x4a>
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c3e0:	f801 3b01 	strb.w	r3, [r1], #1
 800c3e4:	b1b2      	cbz	r2, 800c414 <st_int8_copy+0x48>
 800c3e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c3ea:	f801 3b01 	strb.w	r3, [r1], #1
 800c3ee:	2a01      	cmp	r2, #1
 800c3f0:	f000 8088 	beq.w	800c504 <st_int8_copy+0x138>
 800c3f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c3f8:	f801 3b01 	strb.w	r3, [r1], #1
 800c3fc:	4770      	bx	lr
 800c3fe:	1883      	adds	r3, r0, r2
 800c400:	428b      	cmp	r3, r1
 800c402:	d9e8      	bls.n	800c3d6 <st_int8_copy+0xa>
 800c404:	440a      	add	r2, r1
 800c406:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800c40a:	4298      	cmp	r0, r3
 800c40c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800c410:	d1f9      	bne.n	800c406 <st_int8_copy+0x3a>
 800c412:	4770      	bx	lr
 800c414:	4770      	bx	lr
 800c416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c41a:	f001 0e03 	and.w	lr, r1, #3
 800c41e:	f1ce 0304 	rsb	r3, lr, #4
 800c422:	eba2 0c03 	sub.w	ip, r2, r3
 800c426:	f000 0803 	and.w	r8, r0, #3
 800c42a:	f1ce 0203 	rsb	r2, lr, #3
 800c42e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c432:	f801 3b01 	strb.w	r3, [r1], #1
 800c436:	b182      	cbz	r2, 800c45a <st_int8_copy+0x8e>
 800c438:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c43c:	f801 3b01 	strb.w	r3, [r1], #1
 800c440:	2a01      	cmp	r2, #1
 800c442:	d00a      	beq.n	800c45a <st_int8_copy+0x8e>
 800c444:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c448:	f801 3b01 	strb.w	r3, [r1], #1
 800c44c:	f1be 0f01 	cmp.w	lr, #1
 800c450:	d003      	beq.n	800c45a <st_int8_copy+0x8e>
 800c452:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c456:	f801 3b01 	strb.w	r3, [r1], #1
 800c45a:	45c6      	cmp	lr, r8
 800c45c:	d02a      	beq.n	800c4b4 <st_int8_copy+0xe8>
 800c45e:	ea5f 121c 	movs.w	r2, ip, lsr #4
 800c462:	d00a      	beq.n	800c47a <st_int8_copy+0xae>
 800c464:	f850 3b04 	ldr.w	r3, [r0], #4
 800c468:	f850 4b04 	ldr.w	r4, [r0], #4
 800c46c:	f850 5b04 	ldr.w	r5, [r0], #4
 800c470:	f850 6b04 	ldr.w	r6, [r0], #4
 800c474:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c476:	3a01      	subs	r2, #1
 800c478:	d1f4      	bne.n	800c464 <st_int8_copy+0x98>
 800c47a:	f01c 0f08 	tst.w	ip, #8
 800c47e:	d004      	beq.n	800c48a <st_int8_copy+0xbe>
 800c480:	f850 3b04 	ldr.w	r3, [r0], #4
 800c484:	f850 4b04 	ldr.w	r4, [r0], #4
 800c488:	c118      	stmia	r1!, {r3, r4}
 800c48a:	f01c 0f04 	tst.w	ip, #4
 800c48e:	d003      	beq.n	800c498 <st_int8_copy+0xcc>
 800c490:	f850 3b04 	ldr.w	r3, [r0], #4
 800c494:	f841 3b04 	str.w	r3, [r1], #4
 800c498:	f01c 0f02 	tst.w	ip, #2
 800c49c:	d003      	beq.n	800c4a6 <st_int8_copy+0xda>
 800c49e:	f830 3b02 	ldrh.w	r3, [r0], #2
 800c4a2:	f821 3b02 	strh.w	r3, [r1], #2
 800c4a6:	f01c 0f01 	tst.w	ip, #1
 800c4aa:	d001      	beq.n	800c4b0 <st_int8_copy+0xe4>
 800c4ac:	7803      	ldrb	r3, [r0, #0]
 800c4ae:	700b      	strb	r3, [r1, #0]
 800c4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b4:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800c4b8:	d00e      	beq.n	800c4d8 <st_int8_copy+0x10c>
 800c4ba:	4688      	mov	r8, r1
 800c4bc:	4686      	mov	lr, r0
 800c4be:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4c2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4c6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4ca:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4ce:	f1b9 0901 	subs.w	r9, r9, #1
 800c4d2:	4641      	mov	r1, r8
 800c4d4:	4670      	mov	r0, lr
 800c4d6:	d1f0      	bne.n	800c4ba <st_int8_copy+0xee>
 800c4d8:	f01c 0f20 	tst.w	ip, #32
 800c4dc:	d007      	beq.n	800c4ee <st_int8_copy+0x122>
 800c4de:	4688      	mov	r8, r1
 800c4e0:	4686      	mov	lr, r0
 800c4e2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4e6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4ea:	4641      	mov	r1, r8
 800c4ec:	4670      	mov	r0, lr
 800c4ee:	f01c 0f10 	tst.w	ip, #16
 800c4f2:	d001      	beq.n	800c4f8 <st_int8_copy+0x12c>
 800c4f4:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800c4f6:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c4f8:	f01c 0f08 	tst.w	ip, #8
 800c4fc:	d0c5      	beq.n	800c48a <st_int8_copy+0xbe>
 800c4fe:	c818      	ldmia	r0!, {r3, r4}
 800c500:	c118      	stmia	r1!, {r3, r4}
 800c502:	e7c2      	b.n	800c48a <st_int8_copy+0xbe>
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop

0800c508 <ai_array_to_buffer_fmt>:
 800c508:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d055      	beq.n	800c5bc <ai_array_to_buffer_fmt+0xb4>
 800c510:	4a2d      	ldr	r2, [pc, #180]	@ (800c5c8 <ai_array_to_buffer_fmt+0xc0>)
 800c512:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800c516:	4293      	cmp	r3, r2
 800c518:	d010      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c51a:	dc21      	bgt.n	800c560 <ai_array_to_buffer_fmt+0x58>
 800c51c:	4a2b      	ldr	r2, [pc, #172]	@ (800c5cc <ai_array_to_buffer_fmt+0xc4>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00c      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c522:	dd0f      	ble.n	800c544 <ai_array_to_buffer_fmt+0x3c>
 800c524:	4a2a      	ldr	r2, [pc, #168]	@ (800c5d0 <ai_array_to_buffer_fmt+0xc8>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d008      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c52a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800c52e:	4293      	cmp	r3, r2
 800c530:	d004      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c532:	4a28      	ldr	r2, [pc, #160]	@ (800c5d4 <ai_array_to_buffer_fmt+0xcc>)
 800c534:	4293      	cmp	r3, r2
 800c536:	bf0c      	ite	eq
 800c538:	4613      	moveq	r3, r2
 800c53a:	2340      	movne	r3, #64	@ 0x40
 800c53c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c540:	4318      	orrs	r0, r3
 800c542:	4770      	bx	lr
 800c544:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c548:	4293      	cmp	r3, r2
 800c54a:	d0f7      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c54c:	dd2c      	ble.n	800c5a8 <ai_array_to_buffer_fmt+0xa0>
 800c54e:	4a22      	ldr	r2, [pc, #136]	@ (800c5d8 <ai_array_to_buffer_fmt+0xd0>)
 800c550:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c554:	4293      	cmp	r3, r2
 800c556:	bf0c      	ite	eq
 800c558:	4613      	moveq	r3, r2
 800c55a:	2340      	movne	r3, #64	@ 0x40
 800c55c:	4318      	orrs	r0, r3
 800c55e:	4770      	bx	lr
 800c560:	4a1e      	ldr	r2, [pc, #120]	@ (800c5dc <ai_array_to_buffer_fmt+0xd4>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d0ea      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c566:	dd10      	ble.n	800c58a <ai_array_to_buffer_fmt+0x82>
 800c568:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e0 <ai_array_to_buffer_fmt+0xd8>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d0e6      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c56e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800c572:	4293      	cmp	r3, r2
 800c574:	d0e2      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c576:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800c57a:	4293      	cmp	r3, r2
 800c57c:	bf0c      	ite	eq
 800c57e:	4613      	moveq	r3, r2
 800c580:	2340      	movne	r3, #64	@ 0x40
 800c582:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c586:	4318      	orrs	r0, r3
 800c588:	4770      	bx	lr
 800c58a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800c58e:	4293      	cmp	r3, r2
 800c590:	d0d4      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c592:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800c596:	4293      	cmp	r3, r2
 800c598:	d0d0      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c59a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	bf0c      	ite	eq
 800c5a2:	4613      	moveq	r3, r2
 800c5a4:	2340      	movne	r3, #64	@ 0x40
 800c5a6:	e7c9      	b.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c5a8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d0c5      	beq.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c5b0:	3280      	adds	r2, #128	@ 0x80
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	bf0c      	ite	eq
 800c5b6:	4613      	moveq	r3, r2
 800c5b8:	2340      	movne	r3, #64	@ 0x40
 800c5ba:	e7bf      	b.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c5bc:	4b09      	ldr	r3, [pc, #36]	@ (800c5e4 <ai_array_to_buffer_fmt+0xdc>)
 800c5be:	4003      	ands	r3, r0
 800c5c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c5c4:	e7ba      	b.n	800c53c <ai_array_to_buffer_fmt+0x34>
 800c5c6:	bf00      	nop
 800c5c8:	00821040 	.word	0x00821040
 800c5cc:	00040840 	.word	0x00040840
 800c5d0:	00041040 	.word	0x00041040
 800c5d4:	0004084f 	.word	0x0004084f
 800c5d8:	00040447 	.word	0x00040447
 800c5dc:	00840447 	.word	0x00840447
 800c5e0:	0084084f 	.word	0x0084084f
 800c5e4:	00803fff 	.word	0x00803fff

0800c5e8 <ai_array_get_data_byte_size>:
 800c5e8:	b161      	cbz	r1, 800c604 <ai_array_get_data_byte_size+0x1c>
 800c5ea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c5ee:	fb03 f101 	mul.w	r1, r3, r1
 800c5f2:	f3c0 5341 	ubfx	r3, r0, #21, #2
 800c5f6:	1dc8      	adds	r0, r1, #7
 800c5f8:	f020 0007 	bic.w	r0, r0, #7
 800c5fc:	40d8      	lsrs	r0, r3
 800c5fe:	3007      	adds	r0, #7
 800c600:	08c0      	lsrs	r0, r0, #3
 800c602:	4770      	bx	lr
 800c604:	4608      	mov	r0, r1
 800c606:	4770      	bx	lr

0800c608 <ai_version_get>:
 800c608:	0212      	lsls	r2, r2, #8
 800c60a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c60e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c612:	4770      	bx	lr

0800c614 <ai_platform_version_get>:
 800c614:	2300      	movs	r3, #0
 800c616:	0e02      	lsrs	r2, r0, #24
 800c618:	f362 0307 	bfi	r3, r2, #0, #8
 800c61c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800c620:	f362 230f 	bfi	r3, r2, #8, #8
 800c624:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c628:	f360 4317 	bfi	r3, r0, #16, #8
 800c62c:	b082      	sub	sp, #8
 800c62e:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 800c632:	b002      	add	sp, #8
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop

0800c638 <get_tensor_byte_size>:
 800c638:	b410      	push	{r4}
 800c63a:	68c4      	ldr	r4, [r0, #12]
 800c63c:	6941      	ldr	r1, [r0, #20]
 800c63e:	6983      	ldr	r3, [r0, #24]
 800c640:	68c9      	ldr	r1, [r1, #12]
 800c642:	68e0      	ldr	r0, [r4, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	fb01 f000 	mul.w	r0, r1, r0
 800c64a:	4a06      	ldr	r2, [pc, #24]	@ (800c664 <get_tensor_byte_size+0x2c>)
 800c64c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c650:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c654:	4293      	cmp	r3, r2
 800c656:	bf04      	itt	eq
 800c658:	3007      	addeq	r0, #7
 800c65a:	08c0      	lsreq	r0, r0, #3
 800c65c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	000400c0 	.word	0x000400c0

0800c668 <expf>:
 800c668:	b508      	push	{r3, lr}
 800c66a:	ed2d 8b02 	vpush	{d8}
 800c66e:	eef0 8a40 	vmov.f32	s17, s0
 800c672:	f000 f881 	bl	800c778 <__ieee754_expf>
 800c676:	eeb0 8a40 	vmov.f32	s16, s0
 800c67a:	eeb0 0a68 	vmov.f32	s0, s17
 800c67e:	f000 f847 	bl	800c710 <finitef>
 800c682:	b160      	cbz	r0, 800c69e <expf+0x36>
 800c684:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c6c4 <expf+0x5c>
 800c688:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c690:	dd0a      	ble.n	800c6a8 <expf+0x40>
 800c692:	f001 f891 	bl	800d7b8 <__errno>
 800c696:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c6c8 <expf+0x60>
 800c69a:	2322      	movs	r3, #34	@ 0x22
 800c69c:	6003      	str	r3, [r0, #0]
 800c69e:	eeb0 0a48 	vmov.f32	s0, s16
 800c6a2:	ecbd 8b02 	vpop	{d8}
 800c6a6:	bd08      	pop	{r3, pc}
 800c6a8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c6cc <expf+0x64>
 800c6ac:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b4:	d5f3      	bpl.n	800c69e <expf+0x36>
 800c6b6:	f001 f87f 	bl	800d7b8 <__errno>
 800c6ba:	2322      	movs	r3, #34	@ 0x22
 800c6bc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c6d0 <expf+0x68>
 800c6c0:	6003      	str	r3, [r0, #0]
 800c6c2:	e7ec      	b.n	800c69e <expf+0x36>
 800c6c4:	42b17217 	.word	0x42b17217
 800c6c8:	7f800000 	.word	0x7f800000
 800c6cc:	c2cff1b5 	.word	0xc2cff1b5
 800c6d0:	00000000 	.word	0x00000000

0800c6d4 <sqrtf>:
 800c6d4:	b508      	push	{r3, lr}
 800c6d6:	ed2d 8b02 	vpush	{d8}
 800c6da:	eeb0 8a40 	vmov.f32	s16, s0
 800c6de:	f000 f847 	bl	800c770 <__ieee754_sqrtf>
 800c6e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ea:	d60c      	bvs.n	800c706 <sqrtf+0x32>
 800c6ec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c70c <sqrtf+0x38>
 800c6f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f8:	d505      	bpl.n	800c706 <sqrtf+0x32>
 800c6fa:	f001 f85d 	bl	800d7b8 <__errno>
 800c6fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c702:	2321      	movs	r3, #33	@ 0x21
 800c704:	6003      	str	r3, [r0, #0]
 800c706:	ecbd 8b02 	vpop	{d8}
 800c70a:	bd08      	pop	{r3, pc}
 800c70c:	00000000 	.word	0x00000000

0800c710 <finitef>:
 800c710:	ee10 3a10 	vmov	r3, s0
 800c714:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c718:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c71c:	bfac      	ite	ge
 800c71e:	2000      	movge	r0, #0
 800c720:	2001      	movlt	r0, #1
 800c722:	4770      	bx	lr

0800c724 <with_errnof>:
 800c724:	b510      	push	{r4, lr}
 800c726:	ed2d 8b02 	vpush	{d8}
 800c72a:	eeb0 8a40 	vmov.f32	s16, s0
 800c72e:	4604      	mov	r4, r0
 800c730:	f001 f842 	bl	800d7b8 <__errno>
 800c734:	6004      	str	r4, [r0, #0]
 800c736:	eeb0 0a48 	vmov.f32	s0, s16
 800c73a:	ecbd 8b02 	vpop	{d8}
 800c73e:	bd10      	pop	{r4, pc}

0800c740 <xflowf>:
 800c740:	b130      	cbz	r0, 800c750 <xflowf+0x10>
 800c742:	eef1 7a40 	vneg.f32	s15, s0
 800c746:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c74a:	2022      	movs	r0, #34	@ 0x22
 800c74c:	f7ff bfea 	b.w	800c724 <with_errnof>
 800c750:	eef0 7a40 	vmov.f32	s15, s0
 800c754:	e7f7      	b.n	800c746 <xflowf+0x6>
	...

0800c758 <__math_uflowf>:
 800c758:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c760 <__math_uflowf+0x8>
 800c75c:	f7ff bff0 	b.w	800c740 <xflowf>
 800c760:	10000000 	.word	0x10000000

0800c764 <__math_oflowf>:
 800c764:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c76c <__math_oflowf+0x8>
 800c768:	f7ff bfea 	b.w	800c740 <xflowf>
 800c76c:	70000000 	.word	0x70000000

0800c770 <__ieee754_sqrtf>:
 800c770:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c774:	4770      	bx	lr
	...

0800c778 <__ieee754_expf>:
 800c778:	ee10 2a10 	vmov	r2, s0
 800c77c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c780:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c784:	d902      	bls.n	800c78c <__ieee754_expf+0x14>
 800c786:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c78a:	4770      	bx	lr
 800c78c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c790:	d105      	bne.n	800c79e <__ieee754_expf+0x26>
 800c792:	2900      	cmp	r1, #0
 800c794:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c8cc <__ieee754_expf+0x154>
 800c798:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800c79c:	4770      	bx	lr
 800c79e:	484c      	ldr	r0, [pc, #304]	@ (800c8d0 <__ieee754_expf+0x158>)
 800c7a0:	4282      	cmp	r2, r0
 800c7a2:	dd02      	ble.n	800c7aa <__ieee754_expf+0x32>
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	f7ff bfdd 	b.w	800c764 <__math_oflowf>
 800c7aa:	2a00      	cmp	r2, #0
 800c7ac:	da05      	bge.n	800c7ba <__ieee754_expf+0x42>
 800c7ae:	4a49      	ldr	r2, [pc, #292]	@ (800c8d4 <__ieee754_expf+0x15c>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d902      	bls.n	800c7ba <__ieee754_expf+0x42>
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	f7ff bfcf 	b.w	800c758 <__math_uflowf>
 800c7ba:	4a47      	ldr	r2, [pc, #284]	@ (800c8d8 <__ieee754_expf+0x160>)
 800c7bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d952      	bls.n	800c86a <__ieee754_expf+0xf2>
 800c7c4:	4a45      	ldr	r2, [pc, #276]	@ (800c8dc <__ieee754_expf+0x164>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c7cc:	d834      	bhi.n	800c838 <__ieee754_expf+0xc0>
 800c7ce:	4b44      	ldr	r3, [pc, #272]	@ (800c8e0 <__ieee754_expf+0x168>)
 800c7d0:	4413      	add	r3, r2
 800c7d2:	ed93 7a00 	vldr	s14, [r3]
 800c7d6:	4b43      	ldr	r3, [pc, #268]	@ (800c8e4 <__ieee754_expf+0x16c>)
 800c7d8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c7dc:	4413      	add	r3, r2
 800c7de:	f081 0201 	eor.w	r2, r1, #1
 800c7e2:	edd3 7a00 	vldr	s15, [r3]
 800c7e6:	1a52      	subs	r2, r2, r1
 800c7e8:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c7ec:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c7f0:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c8e8 <__ieee754_expf+0x170>
 800c7f4:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c8ec <__ieee754_expf+0x174>
 800c7f8:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c7fc:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c8f0 <__ieee754_expf+0x178>
 800c800:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c804:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c8f4 <__ieee754_expf+0x17c>
 800c808:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c80c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c8f8 <__ieee754_expf+0x180>
 800c810:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c814:	eef0 6a40 	vmov.f32	s13, s0
 800c818:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c81c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c820:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c824:	bb92      	cbnz	r2, 800c88c <__ieee754_expf+0x114>
 800c826:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c82a:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c82e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c832:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c836:	4770      	bx	lr
 800c838:	4b30      	ldr	r3, [pc, #192]	@ (800c8fc <__ieee754_expf+0x184>)
 800c83a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c900 <__ieee754_expf+0x188>
 800c83e:	4413      	add	r3, r2
 800c840:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c904 <__ieee754_expf+0x18c>
 800c844:	edd3 7a00 	vldr	s15, [r3]
 800c848:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c84c:	eeb0 7a40 	vmov.f32	s14, s0
 800c850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c854:	ee17 2a90 	vmov	r2, s15
 800c858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c85c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c860:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c908 <__ieee754_expf+0x190>
 800c864:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c868:	e7be      	b.n	800c7e8 <__ieee754_expf+0x70>
 800c86a:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c86e:	d20b      	bcs.n	800c888 <__ieee754_expf+0x110>
 800c870:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c90c <__ieee754_expf+0x194>
 800c874:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c878:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c880:	dd02      	ble.n	800c888 <__ieee754_expf+0x110>
 800c882:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c886:	4770      	bx	lr
 800c888:	2200      	movs	r2, #0
 800c88a:	e7af      	b.n	800c7ec <__ieee754_expf+0x74>
 800c88c:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c890:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c894:	bfb8      	it	lt
 800c896:	3264      	addlt	r2, #100	@ 0x64
 800c898:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c89c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c8a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8a4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c8a8:	ee17 3a90 	vmov	r3, s15
 800c8ac:	bfb5      	itete	lt
 800c8ae:	eddf 7a18 	vldrlt	s15, [pc, #96]	@ 800c910 <__ieee754_expf+0x198>
 800c8b2:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c8b6:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c8ba:	ee00 3a10 	vmovge	s0, r3
 800c8be:	bfbc      	itt	lt
 800c8c0:	ee00 3a10 	vmovlt	s0, r3
 800c8c4:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	00000000 	.word	0x00000000
 800c8d0:	42b17217 	.word	0x42b17217
 800c8d4:	42cff1b5 	.word	0x42cff1b5
 800c8d8:	3eb17218 	.word	0x3eb17218
 800c8dc:	3f851591 	.word	0x3f851591
 800c8e0:	0801e680 	.word	0x0801e680
 800c8e4:	0801e678 	.word	0x0801e678
 800c8e8:	3331bb4c 	.word	0x3331bb4c
 800c8ec:	b5ddea0e 	.word	0xb5ddea0e
 800c8f0:	388ab355 	.word	0x388ab355
 800c8f4:	bb360b61 	.word	0xbb360b61
 800c8f8:	3e2aaaab 	.word	0x3e2aaaab
 800c8fc:	0801e688 	.word	0x0801e688
 800c900:	3fb8aa3b 	.word	0x3fb8aa3b
 800c904:	3f317180 	.word	0x3f317180
 800c908:	3717f7d1 	.word	0x3717f7d1
 800c90c:	7149f2ca 	.word	0x7149f2ca
 800c910:	0d800000 	.word	0x0d800000

0800c914 <malloc>:
 800c914:	4b02      	ldr	r3, [pc, #8]	@ (800c920 <malloc+0xc>)
 800c916:	4601      	mov	r1, r0
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	f000 b825 	b.w	800c968 <_malloc_r>
 800c91e:	bf00      	nop
 800c920:	20000f88 	.word	0x20000f88

0800c924 <sbrk_aligned>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	4e0f      	ldr	r6, [pc, #60]	@ (800c964 <sbrk_aligned+0x40>)
 800c928:	460c      	mov	r4, r1
 800c92a:	4605      	mov	r5, r0
 800c92c:	6831      	ldr	r1, [r6, #0]
 800c92e:	b911      	cbnz	r1, 800c936 <sbrk_aligned+0x12>
 800c930:	f000 ff20 	bl	800d774 <_sbrk_r>
 800c934:	6030      	str	r0, [r6, #0]
 800c936:	4621      	mov	r1, r4
 800c938:	4628      	mov	r0, r5
 800c93a:	f000 ff1b 	bl	800d774 <_sbrk_r>
 800c93e:	1c43      	adds	r3, r0, #1
 800c940:	d103      	bne.n	800c94a <sbrk_aligned+0x26>
 800c942:	f04f 34ff 	mov.w	r4, #4294967295
 800c946:	4620      	mov	r0, r4
 800c948:	bd70      	pop	{r4, r5, r6, pc}
 800c94a:	1cc4      	adds	r4, r0, #3
 800c94c:	f024 0403 	bic.w	r4, r4, #3
 800c950:	42a0      	cmp	r0, r4
 800c952:	d0f8      	beq.n	800c946 <sbrk_aligned+0x22>
 800c954:	1a21      	subs	r1, r4, r0
 800c956:	4628      	mov	r0, r5
 800c958:	f000 ff0c 	bl	800d774 <_sbrk_r>
 800c95c:	3001      	adds	r0, #1
 800c95e:	d1f2      	bne.n	800c946 <sbrk_aligned+0x22>
 800c960:	e7ef      	b.n	800c942 <sbrk_aligned+0x1e>
 800c962:	bf00      	nop
 800c964:	2007af70 	.word	0x2007af70

0800c968 <_malloc_r>:
 800c968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c96c:	1ccd      	adds	r5, r1, #3
 800c96e:	4606      	mov	r6, r0
 800c970:	f025 0503 	bic.w	r5, r5, #3
 800c974:	3508      	adds	r5, #8
 800c976:	2d0c      	cmp	r5, #12
 800c978:	bf38      	it	cc
 800c97a:	250c      	movcc	r5, #12
 800c97c:	2d00      	cmp	r5, #0
 800c97e:	db01      	blt.n	800c984 <_malloc_r+0x1c>
 800c980:	42a9      	cmp	r1, r5
 800c982:	d904      	bls.n	800c98e <_malloc_r+0x26>
 800c984:	230c      	movs	r3, #12
 800c986:	6033      	str	r3, [r6, #0]
 800c988:	2000      	movs	r0, #0
 800c98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c98e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca64 <_malloc_r+0xfc>
 800c992:	f000 f869 	bl	800ca68 <__malloc_lock>
 800c996:	f8d8 3000 	ldr.w	r3, [r8]
 800c99a:	461c      	mov	r4, r3
 800c99c:	bb44      	cbnz	r4, 800c9f0 <_malloc_r+0x88>
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f7ff ffbf 	bl	800c924 <sbrk_aligned>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	d158      	bne.n	800ca5e <_malloc_r+0xf6>
 800c9ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c9b0:	4627      	mov	r7, r4
 800c9b2:	2f00      	cmp	r7, #0
 800c9b4:	d143      	bne.n	800ca3e <_malloc_r+0xd6>
 800c9b6:	2c00      	cmp	r4, #0
 800c9b8:	d04b      	beq.n	800ca52 <_malloc_r+0xea>
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	4639      	mov	r1, r7
 800c9be:	4630      	mov	r0, r6
 800c9c0:	eb04 0903 	add.w	r9, r4, r3
 800c9c4:	f000 fed6 	bl	800d774 <_sbrk_r>
 800c9c8:	4581      	cmp	r9, r0
 800c9ca:	d142      	bne.n	800ca52 <_malloc_r+0xea>
 800c9cc:	6821      	ldr	r1, [r4, #0]
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	1a6d      	subs	r5, r5, r1
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	f7ff ffa6 	bl	800c924 <sbrk_aligned>
 800c9d8:	3001      	adds	r0, #1
 800c9da:	d03a      	beq.n	800ca52 <_malloc_r+0xea>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	442b      	add	r3, r5
 800c9e0:	6023      	str	r3, [r4, #0]
 800c9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c9e6:	685a      	ldr	r2, [r3, #4]
 800c9e8:	bb62      	cbnz	r2, 800ca44 <_malloc_r+0xdc>
 800c9ea:	f8c8 7000 	str.w	r7, [r8]
 800c9ee:	e00f      	b.n	800ca10 <_malloc_r+0xa8>
 800c9f0:	6822      	ldr	r2, [r4, #0]
 800c9f2:	1b52      	subs	r2, r2, r5
 800c9f4:	d420      	bmi.n	800ca38 <_malloc_r+0xd0>
 800c9f6:	2a0b      	cmp	r2, #11
 800c9f8:	d917      	bls.n	800ca2a <_malloc_r+0xc2>
 800c9fa:	1961      	adds	r1, r4, r5
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	6025      	str	r5, [r4, #0]
 800ca00:	bf18      	it	ne
 800ca02:	6059      	strne	r1, [r3, #4]
 800ca04:	6863      	ldr	r3, [r4, #4]
 800ca06:	bf08      	it	eq
 800ca08:	f8c8 1000 	streq.w	r1, [r8]
 800ca0c:	5162      	str	r2, [r4, r5]
 800ca0e:	604b      	str	r3, [r1, #4]
 800ca10:	4630      	mov	r0, r6
 800ca12:	f000 f82f 	bl	800ca74 <__malloc_unlock>
 800ca16:	f104 000b 	add.w	r0, r4, #11
 800ca1a:	1d23      	adds	r3, r4, #4
 800ca1c:	f020 0007 	bic.w	r0, r0, #7
 800ca20:	1ac2      	subs	r2, r0, r3
 800ca22:	bf1c      	itt	ne
 800ca24:	1a1b      	subne	r3, r3, r0
 800ca26:	50a3      	strne	r3, [r4, r2]
 800ca28:	e7af      	b.n	800c98a <_malloc_r+0x22>
 800ca2a:	6862      	ldr	r2, [r4, #4]
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	bf0c      	ite	eq
 800ca30:	f8c8 2000 	streq.w	r2, [r8]
 800ca34:	605a      	strne	r2, [r3, #4]
 800ca36:	e7eb      	b.n	800ca10 <_malloc_r+0xa8>
 800ca38:	4623      	mov	r3, r4
 800ca3a:	6864      	ldr	r4, [r4, #4]
 800ca3c:	e7ae      	b.n	800c99c <_malloc_r+0x34>
 800ca3e:	463c      	mov	r4, r7
 800ca40:	687f      	ldr	r7, [r7, #4]
 800ca42:	e7b6      	b.n	800c9b2 <_malloc_r+0x4a>
 800ca44:	461a      	mov	r2, r3
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	d1fb      	bne.n	800ca44 <_malloc_r+0xdc>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6053      	str	r3, [r2, #4]
 800ca50:	e7de      	b.n	800ca10 <_malloc_r+0xa8>
 800ca52:	230c      	movs	r3, #12
 800ca54:	4630      	mov	r0, r6
 800ca56:	6033      	str	r3, [r6, #0]
 800ca58:	f000 f80c 	bl	800ca74 <__malloc_unlock>
 800ca5c:	e794      	b.n	800c988 <_malloc_r+0x20>
 800ca5e:	6005      	str	r5, [r0, #0]
 800ca60:	e7d6      	b.n	800ca10 <_malloc_r+0xa8>
 800ca62:	bf00      	nop
 800ca64:	2007af74 	.word	0x2007af74

0800ca68 <__malloc_lock>:
 800ca68:	4801      	ldr	r0, [pc, #4]	@ (800ca70 <__malloc_lock+0x8>)
 800ca6a:	f000 bed0 	b.w	800d80e <__retarget_lock_acquire_recursive>
 800ca6e:	bf00      	nop
 800ca70:	2007b0b8 	.word	0x2007b0b8

0800ca74 <__malloc_unlock>:
 800ca74:	4801      	ldr	r0, [pc, #4]	@ (800ca7c <__malloc_unlock+0x8>)
 800ca76:	f000 becb 	b.w	800d810 <__retarget_lock_release_recursive>
 800ca7a:	bf00      	nop
 800ca7c:	2007b0b8 	.word	0x2007b0b8

0800ca80 <_realloc_r>:
 800ca80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca84:	4607      	mov	r7, r0
 800ca86:	4614      	mov	r4, r2
 800ca88:	460d      	mov	r5, r1
 800ca8a:	b921      	cbnz	r1, 800ca96 <_realloc_r+0x16>
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca92:	f7ff bf69 	b.w	800c968 <_malloc_r>
 800ca96:	b92a      	cbnz	r2, 800caa4 <_realloc_r+0x24>
 800ca98:	4625      	mov	r5, r4
 800ca9a:	f001 fd37 	bl	800e50c <_free_r>
 800ca9e:	4628      	mov	r0, r5
 800caa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa4:	f002 f8fe 	bl	800eca4 <_malloc_usable_size_r>
 800caa8:	4284      	cmp	r4, r0
 800caaa:	4606      	mov	r6, r0
 800caac:	d802      	bhi.n	800cab4 <_realloc_r+0x34>
 800caae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cab2:	d8f4      	bhi.n	800ca9e <_realloc_r+0x1e>
 800cab4:	4621      	mov	r1, r4
 800cab6:	4638      	mov	r0, r7
 800cab8:	f7ff ff56 	bl	800c968 <_malloc_r>
 800cabc:	4680      	mov	r8, r0
 800cabe:	b908      	cbnz	r0, 800cac4 <_realloc_r+0x44>
 800cac0:	4645      	mov	r5, r8
 800cac2:	e7ec      	b.n	800ca9e <_realloc_r+0x1e>
 800cac4:	42b4      	cmp	r4, r6
 800cac6:	4622      	mov	r2, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	bf28      	it	cs
 800cacc:	4632      	movcs	r2, r6
 800cace:	f000 feae 	bl	800d82e <memcpy>
 800cad2:	4629      	mov	r1, r5
 800cad4:	4638      	mov	r0, r7
 800cad6:	f001 fd19 	bl	800e50c <_free_r>
 800cada:	e7f1      	b.n	800cac0 <_realloc_r+0x40>

0800cadc <__cvt>:
 800cadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cae0:	ec57 6b10 	vmov	r6, r7, d0
 800cae4:	2f00      	cmp	r7, #0
 800cae6:	460c      	mov	r4, r1
 800cae8:	4619      	mov	r1, r3
 800caea:	463b      	mov	r3, r7
 800caec:	bfb4      	ite	lt
 800caee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800caf2:	2300      	movge	r3, #0
 800caf4:	4691      	mov	r9, r2
 800caf6:	bfbf      	itttt	lt
 800caf8:	4632      	movlt	r2, r6
 800cafa:	461f      	movlt	r7, r3
 800cafc:	232d      	movlt	r3, #45	@ 0x2d
 800cafe:	4616      	movlt	r6, r2
 800cb00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb04:	700b      	strb	r3, [r1, #0]
 800cb06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb08:	f023 0820 	bic.w	r8, r3, #32
 800cb0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb10:	d005      	beq.n	800cb1e <__cvt+0x42>
 800cb12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb16:	d100      	bne.n	800cb1a <__cvt+0x3e>
 800cb18:	3401      	adds	r4, #1
 800cb1a:	2102      	movs	r1, #2
 800cb1c:	e000      	b.n	800cb20 <__cvt+0x44>
 800cb1e:	2103      	movs	r1, #3
 800cb20:	ab03      	add	r3, sp, #12
 800cb22:	4622      	mov	r2, r4
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	ab02      	add	r3, sp, #8
 800cb28:	ec47 6b10 	vmov	d0, r6, r7
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	4653      	mov	r3, sl
 800cb30:	f000 ff1a 	bl	800d968 <_dtoa_r>
 800cb34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb38:	4605      	mov	r5, r0
 800cb3a:	d119      	bne.n	800cb70 <__cvt+0x94>
 800cb3c:	f019 0f01 	tst.w	r9, #1
 800cb40:	d00e      	beq.n	800cb60 <__cvt+0x84>
 800cb42:	eb00 0904 	add.w	r9, r0, r4
 800cb46:	2200      	movs	r2, #0
 800cb48:	2300      	movs	r3, #0
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	f7f3 ffcb 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb52:	b108      	cbz	r0, 800cb58 <__cvt+0x7c>
 800cb54:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb58:	2230      	movs	r2, #48	@ 0x30
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	454b      	cmp	r3, r9
 800cb5e:	d31e      	bcc.n	800cb9e <__cvt+0xc2>
 800cb60:	9b03      	ldr	r3, [sp, #12]
 800cb62:	4628      	mov	r0, r5
 800cb64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb66:	1b5b      	subs	r3, r3, r5
 800cb68:	6013      	str	r3, [r2, #0]
 800cb6a:	b004      	add	sp, #16
 800cb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb74:	eb00 0904 	add.w	r9, r0, r4
 800cb78:	d1e5      	bne.n	800cb46 <__cvt+0x6a>
 800cb7a:	7803      	ldrb	r3, [r0, #0]
 800cb7c:	2b30      	cmp	r3, #48	@ 0x30
 800cb7e:	d10a      	bne.n	800cb96 <__cvt+0xba>
 800cb80:	2200      	movs	r2, #0
 800cb82:	2300      	movs	r3, #0
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f7f3 ffae 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb8c:	b918      	cbnz	r0, 800cb96 <__cvt+0xba>
 800cb8e:	f1c4 0401 	rsb	r4, r4, #1
 800cb92:	f8ca 4000 	str.w	r4, [sl]
 800cb96:	f8da 3000 	ldr.w	r3, [sl]
 800cb9a:	4499      	add	r9, r3
 800cb9c:	e7d3      	b.n	800cb46 <__cvt+0x6a>
 800cb9e:	1c59      	adds	r1, r3, #1
 800cba0:	9103      	str	r1, [sp, #12]
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e7d9      	b.n	800cb5a <__cvt+0x7e>

0800cba6 <__exponent>:
 800cba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	7002      	strb	r2, [r0, #0]
 800cbac:	bfba      	itte	lt
 800cbae:	4249      	neglt	r1, r1
 800cbb0:	232d      	movlt	r3, #45	@ 0x2d
 800cbb2:	232b      	movge	r3, #43	@ 0x2b
 800cbb4:	2909      	cmp	r1, #9
 800cbb6:	7043      	strb	r3, [r0, #1]
 800cbb8:	dd28      	ble.n	800cc0c <__exponent+0x66>
 800cbba:	f10d 0307 	add.w	r3, sp, #7
 800cbbe:	270a      	movs	r7, #10
 800cbc0:	461d      	mov	r5, r3
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	fbb1 f6f7 	udiv	r6, r1, r7
 800cbca:	fb07 1416 	mls	r4, r7, r6, r1
 800cbce:	3430      	adds	r4, #48	@ 0x30
 800cbd0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	2c63      	cmp	r4, #99	@ 0x63
 800cbda:	dcf2      	bgt.n	800cbc2 <__exponent+0x1c>
 800cbdc:	3130      	adds	r1, #48	@ 0x30
 800cbde:	1e94      	subs	r4, r2, #2
 800cbe0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cbe4:	1c41      	adds	r1, r0, #1
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	d30a      	bcc.n	800cc02 <__exponent+0x5c>
 800cbec:	f10d 0309 	add.w	r3, sp, #9
 800cbf0:	1a9b      	subs	r3, r3, r2
 800cbf2:	42ac      	cmp	r4, r5
 800cbf4:	bf88      	it	hi
 800cbf6:	2300      	movhi	r3, #0
 800cbf8:	3302      	adds	r3, #2
 800cbfa:	4403      	add	r3, r0
 800cbfc:	1a18      	subs	r0, r3, r0
 800cbfe:	b003      	add	sp, #12
 800cc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc02:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc06:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc0a:	e7ed      	b.n	800cbe8 <__exponent+0x42>
 800cc0c:	2330      	movs	r3, #48	@ 0x30
 800cc0e:	3130      	adds	r1, #48	@ 0x30
 800cc10:	7083      	strb	r3, [r0, #2]
 800cc12:	1d03      	adds	r3, r0, #4
 800cc14:	70c1      	strb	r1, [r0, #3]
 800cc16:	e7f1      	b.n	800cbfc <__exponent+0x56>

0800cc18 <_printf_float>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	b08d      	sub	sp, #52	@ 0x34
 800cc1e:	460c      	mov	r4, r1
 800cc20:	4616      	mov	r6, r2
 800cc22:	461f      	mov	r7, r3
 800cc24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc28:	4605      	mov	r5, r0
 800cc2a:	f000 fd0d 	bl	800d648 <_localeconv_r>
 800cc2e:	6803      	ldr	r3, [r0, #0]
 800cc30:	4618      	mov	r0, r3
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	f7f3 fb2c 	bl	8000290 <strlen>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	9005      	str	r0, [sp, #20]
 800cc3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc42:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc46:	3307      	adds	r3, #7
 800cc48:	f8d4 b000 	ldr.w	fp, [r4]
 800cc4c:	f023 0307 	bic.w	r3, r3, #7
 800cc50:	f103 0208 	add.w	r2, r3, #8
 800cc54:	f8c8 2000 	str.w	r2, [r8]
 800cc58:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc64:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc68:	9307      	str	r3, [sp, #28]
 800cc6a:	4b9d      	ldr	r3, [pc, #628]	@ (800cee0 <_printf_float+0x2c8>)
 800cc6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc70:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc74:	f7f3 ff6a 	bl	8000b4c <__aeabi_dcmpun>
 800cc78:	bb70      	cbnz	r0, 800ccd8 <_printf_float+0xc0>
 800cc7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc7e:	4b98      	ldr	r3, [pc, #608]	@ (800cee0 <_printf_float+0x2c8>)
 800cc80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc84:	f7f3 ff44 	bl	8000b10 <__aeabi_dcmple>
 800cc88:	bb30      	cbnz	r0, 800ccd8 <_printf_float+0xc0>
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4640      	mov	r0, r8
 800cc90:	4649      	mov	r1, r9
 800cc92:	f7f3 ff33 	bl	8000afc <__aeabi_dcmplt>
 800cc96:	b110      	cbz	r0, 800cc9e <_printf_float+0x86>
 800cc98:	232d      	movs	r3, #45	@ 0x2d
 800cc9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc9e:	4a91      	ldr	r2, [pc, #580]	@ (800cee4 <_printf_float+0x2cc>)
 800cca0:	4b91      	ldr	r3, [pc, #580]	@ (800cee8 <_printf_float+0x2d0>)
 800cca2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cca6:	bf8c      	ite	hi
 800cca8:	4690      	movhi	r8, r2
 800ccaa:	4698      	movls	r8, r3
 800ccac:	2303      	movs	r3, #3
 800ccae:	f04f 0900 	mov.w	r9, #0
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	f02b 0304 	bic.w	r3, fp, #4
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	4633      	mov	r3, r6
 800ccbc:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	9700      	str	r7, [sp, #0]
 800ccc4:	f000 f9d2 	bl	800d06c <_printf_common>
 800ccc8:	3001      	adds	r0, #1
 800ccca:	f040 808d 	bne.w	800cde8 <_printf_float+0x1d0>
 800ccce:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd2:	b00d      	add	sp, #52	@ 0x34
 800ccd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd8:	4642      	mov	r2, r8
 800ccda:	464b      	mov	r3, r9
 800ccdc:	4640      	mov	r0, r8
 800ccde:	4649      	mov	r1, r9
 800cce0:	f7f3 ff34 	bl	8000b4c <__aeabi_dcmpun>
 800cce4:	b140      	cbz	r0, 800ccf8 <_printf_float+0xe0>
 800cce6:	464b      	mov	r3, r9
 800cce8:	4a80      	ldr	r2, [pc, #512]	@ (800ceec <_printf_float+0x2d4>)
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	bfbc      	itt	lt
 800ccee:	232d      	movlt	r3, #45	@ 0x2d
 800ccf0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ccf4:	4b7e      	ldr	r3, [pc, #504]	@ (800cef0 <_printf_float+0x2d8>)
 800ccf6:	e7d4      	b.n	800cca2 <_printf_float+0x8a>
 800ccf8:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ccfc:	6863      	ldr	r3, [r4, #4]
 800ccfe:	9206      	str	r2, [sp, #24]
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	d13b      	bne.n	800cd7c <_printf_float+0x164>
 800cd04:	2306      	movs	r3, #6
 800cd06:	6063      	str	r3, [r4, #4]
 800cd08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4628      	mov	r0, r5
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	9303      	str	r3, [sp, #12]
 800cd14:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd16:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd1a:	ab09      	add	r3, sp, #36	@ 0x24
 800cd1c:	ec49 8b10 	vmov	d0, r8, r9
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd26:	6861      	ldr	r1, [r4, #4]
 800cd28:	f7ff fed8 	bl	800cadc <__cvt>
 800cd2c:	9b06      	ldr	r3, [sp, #24]
 800cd2e:	4680      	mov	r8, r0
 800cd30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd32:	2b47      	cmp	r3, #71	@ 0x47
 800cd34:	d129      	bne.n	800cd8a <_printf_float+0x172>
 800cd36:	1cc8      	adds	r0, r1, #3
 800cd38:	db02      	blt.n	800cd40 <_printf_float+0x128>
 800cd3a:	6863      	ldr	r3, [r4, #4]
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	dd41      	ble.n	800cdc4 <_printf_float+0x1ac>
 800cd40:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd44:	fa5f fa8a 	uxtb.w	sl, sl
 800cd48:	3901      	subs	r1, #1
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd50:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd52:	f7ff ff28 	bl	800cba6 <__exponent>
 800cd56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd58:	4681      	mov	r9, r0
 800cd5a:	1813      	adds	r3, r2, r0
 800cd5c:	2a01      	cmp	r2, #1
 800cd5e:	6123      	str	r3, [r4, #16]
 800cd60:	dc02      	bgt.n	800cd68 <_printf_float+0x150>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	07d2      	lsls	r2, r2, #31
 800cd66:	d501      	bpl.n	800cd6c <_printf_float+0x154>
 800cd68:	3301      	adds	r3, #1
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d0a2      	beq.n	800ccba <_printf_float+0xa2>
 800cd74:	232d      	movs	r3, #45	@ 0x2d
 800cd76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd7a:	e79e      	b.n	800ccba <_printf_float+0xa2>
 800cd7c:	9a06      	ldr	r2, [sp, #24]
 800cd7e:	2a47      	cmp	r2, #71	@ 0x47
 800cd80:	d1c2      	bne.n	800cd08 <_printf_float+0xf0>
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1c0      	bne.n	800cd08 <_printf_float+0xf0>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e7bd      	b.n	800cd06 <_printf_float+0xee>
 800cd8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd8e:	d9db      	bls.n	800cd48 <_printf_float+0x130>
 800cd90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cd94:	d118      	bne.n	800cdc8 <_printf_float+0x1b0>
 800cd96:	2900      	cmp	r1, #0
 800cd98:	6863      	ldr	r3, [r4, #4]
 800cd9a:	dd0b      	ble.n	800cdb4 <_printf_float+0x19c>
 800cd9c:	6121      	str	r1, [r4, #16]
 800cd9e:	b913      	cbnz	r3, 800cda6 <_printf_float+0x18e>
 800cda0:	6822      	ldr	r2, [r4, #0]
 800cda2:	07d0      	lsls	r0, r2, #31
 800cda4:	d502      	bpl.n	800cdac <_printf_float+0x194>
 800cda6:	3301      	adds	r3, #1
 800cda8:	440b      	add	r3, r1
 800cdaa:	6123      	str	r3, [r4, #16]
 800cdac:	f04f 0900 	mov.w	r9, #0
 800cdb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdb2:	e7db      	b.n	800cd6c <_printf_float+0x154>
 800cdb4:	b913      	cbnz	r3, 800cdbc <_printf_float+0x1a4>
 800cdb6:	6822      	ldr	r2, [r4, #0]
 800cdb8:	07d2      	lsls	r2, r2, #31
 800cdba:	d501      	bpl.n	800cdc0 <_printf_float+0x1a8>
 800cdbc:	3302      	adds	r3, #2
 800cdbe:	e7f4      	b.n	800cdaa <_printf_float+0x192>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e7f2      	b.n	800cdaa <_printf_float+0x192>
 800cdc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cdc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdca:	4299      	cmp	r1, r3
 800cdcc:	db05      	blt.n	800cdda <_printf_float+0x1c2>
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	6121      	str	r1, [r4, #16]
 800cdd2:	07d8      	lsls	r0, r3, #31
 800cdd4:	d5ea      	bpl.n	800cdac <_printf_float+0x194>
 800cdd6:	1c4b      	adds	r3, r1, #1
 800cdd8:	e7e7      	b.n	800cdaa <_printf_float+0x192>
 800cdda:	2900      	cmp	r1, #0
 800cddc:	bfd4      	ite	le
 800cdde:	f1c1 0202 	rsble	r2, r1, #2
 800cde2:	2201      	movgt	r2, #1
 800cde4:	4413      	add	r3, r2
 800cde6:	e7e0      	b.n	800cdaa <_printf_float+0x192>
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	055a      	lsls	r2, r3, #21
 800cdec:	d407      	bmi.n	800cdfe <_printf_float+0x1e6>
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	4642      	mov	r2, r8
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	47b8      	blx	r7
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d12b      	bne.n	800ce54 <_printf_float+0x23c>
 800cdfc:	e767      	b.n	800ccce <_printf_float+0xb6>
 800cdfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce02:	f240 80dd 	bls.w	800cfc0 <_printf_float+0x3a8>
 800ce06:	2200      	movs	r2, #0
 800ce08:	2300      	movs	r3, #0
 800ce0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce0e:	f7f3 fe6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d033      	beq.n	800ce7e <_printf_float+0x266>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4a36      	ldr	r2, [pc, #216]	@ (800cef4 <_printf_float+0x2dc>)
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	f43f af54 	beq.w	800ccce <_printf_float+0xb6>
 800ce26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce2a:	4543      	cmp	r3, r8
 800ce2c:	db02      	blt.n	800ce34 <_printf_float+0x21c>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	07d8      	lsls	r0, r3, #31
 800ce32:	d50f      	bpl.n	800ce54 <_printf_float+0x23c>
 800ce34:	4631      	mov	r1, r6
 800ce36:	4628      	mov	r0, r5
 800ce38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce3c:	47b8      	blx	r7
 800ce3e:	3001      	adds	r0, #1
 800ce40:	f43f af45 	beq.w	800ccce <_printf_float+0xb6>
 800ce44:	f04f 0900 	mov.w	r9, #0
 800ce48:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce4c:	f104 0a1a 	add.w	sl, r4, #26
 800ce50:	45c8      	cmp	r8, r9
 800ce52:	dc09      	bgt.n	800ce68 <_printf_float+0x250>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	079b      	lsls	r3, r3, #30
 800ce58:	f100 8103 	bmi.w	800d062 <_printf_float+0x44a>
 800ce5c:	68e0      	ldr	r0, [r4, #12]
 800ce5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce60:	4298      	cmp	r0, r3
 800ce62:	bfb8      	it	lt
 800ce64:	4618      	movlt	r0, r3
 800ce66:	e734      	b.n	800ccd2 <_printf_float+0xba>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4628      	mov	r0, r5
 800ce70:	47b8      	blx	r7
 800ce72:	3001      	adds	r0, #1
 800ce74:	f43f af2b 	beq.w	800ccce <_printf_float+0xb6>
 800ce78:	f109 0901 	add.w	r9, r9, #1
 800ce7c:	e7e8      	b.n	800ce50 <_printf_float+0x238>
 800ce7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dc39      	bgt.n	800cef8 <_printf_float+0x2e0>
 800ce84:	2301      	movs	r3, #1
 800ce86:	4a1b      	ldr	r2, [pc, #108]	@ (800cef4 <_printf_float+0x2dc>)
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	47b8      	blx	r7
 800ce8e:	3001      	adds	r0, #1
 800ce90:	f43f af1d 	beq.w	800ccce <_printf_float+0xb6>
 800ce94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ce98:	ea59 0303 	orrs.w	r3, r9, r3
 800ce9c:	d102      	bne.n	800cea4 <_printf_float+0x28c>
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	07d9      	lsls	r1, r3, #31
 800cea2:	d5d7      	bpl.n	800ce54 <_printf_float+0x23c>
 800cea4:	4631      	mov	r1, r6
 800cea6:	4628      	mov	r0, r5
 800cea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ceac:	47b8      	blx	r7
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f43f af0d 	beq.w	800ccce <_printf_float+0xb6>
 800ceb4:	f04f 0a00 	mov.w	sl, #0
 800ceb8:	f104 0b1a 	add.w	fp, r4, #26
 800cebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cebe:	425b      	negs	r3, r3
 800cec0:	4553      	cmp	r3, sl
 800cec2:	dc01      	bgt.n	800cec8 <_printf_float+0x2b0>
 800cec4:	464b      	mov	r3, r9
 800cec6:	e793      	b.n	800cdf0 <_printf_float+0x1d8>
 800cec8:	2301      	movs	r3, #1
 800ceca:	465a      	mov	r2, fp
 800cecc:	4631      	mov	r1, r6
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	f43f aefb 	beq.w	800ccce <_printf_float+0xb6>
 800ced8:	f10a 0a01 	add.w	sl, sl, #1
 800cedc:	e7ee      	b.n	800cebc <_printf_float+0x2a4>
 800cede:	bf00      	nop
 800cee0:	7fefffff 	.word	0x7fefffff
 800cee4:	0801e694 	.word	0x0801e694
 800cee8:	0801e690 	.word	0x0801e690
 800ceec:	0801e69c 	.word	0x0801e69c
 800cef0:	0801e698 	.word	0x0801e698
 800cef4:	0801e6a0 	.word	0x0801e6a0
 800cef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cefa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cefe:	4553      	cmp	r3, sl
 800cf00:	bfa8      	it	ge
 800cf02:	4653      	movge	r3, sl
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	4699      	mov	r9, r3
 800cf08:	dc36      	bgt.n	800cf78 <_printf_float+0x360>
 800cf0a:	f04f 0b00 	mov.w	fp, #0
 800cf0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf12:	f104 021a 	add.w	r2, r4, #26
 800cf16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf18:	9306      	str	r3, [sp, #24]
 800cf1a:	eba3 0309 	sub.w	r3, r3, r9
 800cf1e:	455b      	cmp	r3, fp
 800cf20:	dc31      	bgt.n	800cf86 <_printf_float+0x36e>
 800cf22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf24:	459a      	cmp	sl, r3
 800cf26:	dc3a      	bgt.n	800cf9e <_printf_float+0x386>
 800cf28:	6823      	ldr	r3, [r4, #0]
 800cf2a:	07da      	lsls	r2, r3, #31
 800cf2c:	d437      	bmi.n	800cf9e <_printf_float+0x386>
 800cf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf30:	ebaa 0903 	sub.w	r9, sl, r3
 800cf34:	9b06      	ldr	r3, [sp, #24]
 800cf36:	ebaa 0303 	sub.w	r3, sl, r3
 800cf3a:	4599      	cmp	r9, r3
 800cf3c:	bfa8      	it	ge
 800cf3e:	4699      	movge	r9, r3
 800cf40:	f1b9 0f00 	cmp.w	r9, #0
 800cf44:	dc33      	bgt.n	800cfae <_printf_float+0x396>
 800cf46:	f04f 0800 	mov.w	r8, #0
 800cf4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf4e:	f104 0b1a 	add.w	fp, r4, #26
 800cf52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf54:	ebaa 0303 	sub.w	r3, sl, r3
 800cf58:	eba3 0309 	sub.w	r3, r3, r9
 800cf5c:	4543      	cmp	r3, r8
 800cf5e:	f77f af79 	ble.w	800ce54 <_printf_float+0x23c>
 800cf62:	2301      	movs	r3, #1
 800cf64:	465a      	mov	r2, fp
 800cf66:	4631      	mov	r1, r6
 800cf68:	4628      	mov	r0, r5
 800cf6a:	47b8      	blx	r7
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	f43f aeae 	beq.w	800ccce <_printf_float+0xb6>
 800cf72:	f108 0801 	add.w	r8, r8, #1
 800cf76:	e7ec      	b.n	800cf52 <_printf_float+0x33a>
 800cf78:	4642      	mov	r2, r8
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	47b8      	blx	r7
 800cf80:	3001      	adds	r0, #1
 800cf82:	d1c2      	bne.n	800cf0a <_printf_float+0x2f2>
 800cf84:	e6a3      	b.n	800ccce <_printf_float+0xb6>
 800cf86:	2301      	movs	r3, #1
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	9206      	str	r2, [sp, #24]
 800cf8e:	47b8      	blx	r7
 800cf90:	3001      	adds	r0, #1
 800cf92:	f43f ae9c 	beq.w	800ccce <_printf_float+0xb6>
 800cf96:	f10b 0b01 	add.w	fp, fp, #1
 800cf9a:	9a06      	ldr	r2, [sp, #24]
 800cf9c:	e7bb      	b.n	800cf16 <_printf_float+0x2fe>
 800cf9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b8      	blx	r7
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d1c0      	bne.n	800cf2e <_printf_float+0x316>
 800cfac:	e68f      	b.n	800ccce <_printf_float+0xb6>
 800cfae:	9a06      	ldr	r2, [sp, #24]
 800cfb0:	464b      	mov	r3, r9
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	4442      	add	r2, r8
 800cfb8:	47b8      	blx	r7
 800cfba:	3001      	adds	r0, #1
 800cfbc:	d1c3      	bne.n	800cf46 <_printf_float+0x32e>
 800cfbe:	e686      	b.n	800ccce <_printf_float+0xb6>
 800cfc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfc4:	f1ba 0f01 	cmp.w	sl, #1
 800cfc8:	dc01      	bgt.n	800cfce <_printf_float+0x3b6>
 800cfca:	07db      	lsls	r3, r3, #31
 800cfcc:	d536      	bpl.n	800d03c <_printf_float+0x424>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4642      	mov	r2, r8
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b8      	blx	r7
 800cfd8:	3001      	adds	r0, #1
 800cfda:	f43f ae78 	beq.w	800ccce <_printf_float+0xb6>
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfe6:	47b8      	blx	r7
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f43f ae70 	beq.w	800ccce <_printf_float+0xb6>
 800cfee:	2200      	movs	r2, #0
 800cff0:	2300      	movs	r3, #0
 800cff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cff6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cffa:	f7f3 fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 800cffe:	b9c0      	cbnz	r0, 800d032 <_printf_float+0x41a>
 800d000:	4653      	mov	r3, sl
 800d002:	f108 0201 	add.w	r2, r8, #1
 800d006:	4631      	mov	r1, r6
 800d008:	4628      	mov	r0, r5
 800d00a:	47b8      	blx	r7
 800d00c:	3001      	adds	r0, #1
 800d00e:	d10c      	bne.n	800d02a <_printf_float+0x412>
 800d010:	e65d      	b.n	800ccce <_printf_float+0xb6>
 800d012:	2301      	movs	r3, #1
 800d014:	465a      	mov	r2, fp
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	f43f ae56 	beq.w	800ccce <_printf_float+0xb6>
 800d022:	f108 0801 	add.w	r8, r8, #1
 800d026:	45d0      	cmp	r8, sl
 800d028:	dbf3      	blt.n	800d012 <_printf_float+0x3fa>
 800d02a:	464b      	mov	r3, r9
 800d02c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d030:	e6df      	b.n	800cdf2 <_printf_float+0x1da>
 800d032:	f04f 0800 	mov.w	r8, #0
 800d036:	f104 0b1a 	add.w	fp, r4, #26
 800d03a:	e7f4      	b.n	800d026 <_printf_float+0x40e>
 800d03c:	2301      	movs	r3, #1
 800d03e:	4642      	mov	r2, r8
 800d040:	e7e1      	b.n	800d006 <_printf_float+0x3ee>
 800d042:	2301      	movs	r3, #1
 800d044:	464a      	mov	r2, r9
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	f43f ae3e 	beq.w	800ccce <_printf_float+0xb6>
 800d052:	f108 0801 	add.w	r8, r8, #1
 800d056:	68e3      	ldr	r3, [r4, #12]
 800d058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d05a:	1a5b      	subs	r3, r3, r1
 800d05c:	4543      	cmp	r3, r8
 800d05e:	dcf0      	bgt.n	800d042 <_printf_float+0x42a>
 800d060:	e6fc      	b.n	800ce5c <_printf_float+0x244>
 800d062:	f04f 0800 	mov.w	r8, #0
 800d066:	f104 0919 	add.w	r9, r4, #25
 800d06a:	e7f4      	b.n	800d056 <_printf_float+0x43e>

0800d06c <_printf_common>:
 800d06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d070:	4616      	mov	r6, r2
 800d072:	4698      	mov	r8, r3
 800d074:	688a      	ldr	r2, [r1, #8]
 800d076:	4607      	mov	r7, r0
 800d078:	690b      	ldr	r3, [r1, #16]
 800d07a:	460c      	mov	r4, r1
 800d07c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d080:	4293      	cmp	r3, r2
 800d082:	bfb8      	it	lt
 800d084:	4613      	movlt	r3, r2
 800d086:	6033      	str	r3, [r6, #0]
 800d088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d08c:	b10a      	cbz	r2, 800d092 <_printf_common+0x26>
 800d08e:	3301      	adds	r3, #1
 800d090:	6033      	str	r3, [r6, #0]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	0699      	lsls	r1, r3, #26
 800d096:	bf42      	ittt	mi
 800d098:	6833      	ldrmi	r3, [r6, #0]
 800d09a:	3302      	addmi	r3, #2
 800d09c:	6033      	strmi	r3, [r6, #0]
 800d09e:	6825      	ldr	r5, [r4, #0]
 800d0a0:	f015 0506 	ands.w	r5, r5, #6
 800d0a4:	d106      	bne.n	800d0b4 <_printf_common+0x48>
 800d0a6:	f104 0a19 	add.w	sl, r4, #25
 800d0aa:	68e3      	ldr	r3, [r4, #12]
 800d0ac:	6832      	ldr	r2, [r6, #0]
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	42ab      	cmp	r3, r5
 800d0b2:	dc2b      	bgt.n	800d10c <_printf_common+0xa0>
 800d0b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	3b00      	subs	r3, #0
 800d0bc:	bf18      	it	ne
 800d0be:	2301      	movne	r3, #1
 800d0c0:	0692      	lsls	r2, r2, #26
 800d0c2:	d430      	bmi.n	800d126 <_printf_common+0xba>
 800d0c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0c8:	4641      	mov	r1, r8
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	47c8      	blx	r9
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	d023      	beq.n	800d11a <_printf_common+0xae>
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	341a      	adds	r4, #26
 800d0d6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d0da:	f003 0306 	and.w	r3, r3, #6
 800d0de:	2b04      	cmp	r3, #4
 800d0e0:	bf0a      	itet	eq
 800d0e2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d0e6:	2500      	movne	r5, #0
 800d0e8:	6833      	ldreq	r3, [r6, #0]
 800d0ea:	f04f 0600 	mov.w	r6, #0
 800d0ee:	bf08      	it	eq
 800d0f0:	1aed      	subeq	r5, r5, r3
 800d0f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d0f6:	bf08      	it	eq
 800d0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	bfc4      	itt	gt
 800d100:	1a9b      	subgt	r3, r3, r2
 800d102:	18ed      	addgt	r5, r5, r3
 800d104:	42b5      	cmp	r5, r6
 800d106:	d11a      	bne.n	800d13e <_printf_common+0xd2>
 800d108:	2000      	movs	r0, #0
 800d10a:	e008      	b.n	800d11e <_printf_common+0xb2>
 800d10c:	2301      	movs	r3, #1
 800d10e:	4652      	mov	r2, sl
 800d110:	4641      	mov	r1, r8
 800d112:	4638      	mov	r0, r7
 800d114:	47c8      	blx	r9
 800d116:	3001      	adds	r0, #1
 800d118:	d103      	bne.n	800d122 <_printf_common+0xb6>
 800d11a:	f04f 30ff 	mov.w	r0, #4294967295
 800d11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d122:	3501      	adds	r5, #1
 800d124:	e7c1      	b.n	800d0aa <_printf_common+0x3e>
 800d126:	18e1      	adds	r1, r4, r3
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	2030      	movs	r0, #48	@ 0x30
 800d12c:	3302      	adds	r3, #2
 800d12e:	4422      	add	r2, r4
 800d130:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d13c:	e7c2      	b.n	800d0c4 <_printf_common+0x58>
 800d13e:	2301      	movs	r3, #1
 800d140:	4622      	mov	r2, r4
 800d142:	4641      	mov	r1, r8
 800d144:	4638      	mov	r0, r7
 800d146:	47c8      	blx	r9
 800d148:	3001      	adds	r0, #1
 800d14a:	d0e6      	beq.n	800d11a <_printf_common+0xae>
 800d14c:	3601      	adds	r6, #1
 800d14e:	e7d9      	b.n	800d104 <_printf_common+0x98>

0800d150 <_printf_i>:
 800d150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	7e0f      	ldrb	r7, [r1, #24]
 800d156:	4691      	mov	r9, r2
 800d158:	4680      	mov	r8, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	2f78      	cmp	r7, #120	@ 0x78
 800d15e:	469a      	mov	sl, r3
 800d160:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d166:	d807      	bhi.n	800d178 <_printf_i+0x28>
 800d168:	2f62      	cmp	r7, #98	@ 0x62
 800d16a:	d80a      	bhi.n	800d182 <_printf_i+0x32>
 800d16c:	2f00      	cmp	r7, #0
 800d16e:	f000 80d1 	beq.w	800d314 <_printf_i+0x1c4>
 800d172:	2f58      	cmp	r7, #88	@ 0x58
 800d174:	f000 80b8 	beq.w	800d2e8 <_printf_i+0x198>
 800d178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d17c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d180:	e03a      	b.n	800d1f8 <_printf_i+0xa8>
 800d182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d186:	2b15      	cmp	r3, #21
 800d188:	d8f6      	bhi.n	800d178 <_printf_i+0x28>
 800d18a:	a101      	add	r1, pc, #4	@ (adr r1, 800d190 <_printf_i+0x40>)
 800d18c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d190:	0800d1e9 	.word	0x0800d1e9
 800d194:	0800d1fd 	.word	0x0800d1fd
 800d198:	0800d179 	.word	0x0800d179
 800d19c:	0800d179 	.word	0x0800d179
 800d1a0:	0800d179 	.word	0x0800d179
 800d1a4:	0800d179 	.word	0x0800d179
 800d1a8:	0800d1fd 	.word	0x0800d1fd
 800d1ac:	0800d179 	.word	0x0800d179
 800d1b0:	0800d179 	.word	0x0800d179
 800d1b4:	0800d179 	.word	0x0800d179
 800d1b8:	0800d179 	.word	0x0800d179
 800d1bc:	0800d2fb 	.word	0x0800d2fb
 800d1c0:	0800d227 	.word	0x0800d227
 800d1c4:	0800d2b5 	.word	0x0800d2b5
 800d1c8:	0800d179 	.word	0x0800d179
 800d1cc:	0800d179 	.word	0x0800d179
 800d1d0:	0800d31d 	.word	0x0800d31d
 800d1d4:	0800d179 	.word	0x0800d179
 800d1d8:	0800d227 	.word	0x0800d227
 800d1dc:	0800d179 	.word	0x0800d179
 800d1e0:	0800d179 	.word	0x0800d179
 800d1e4:	0800d2bd 	.word	0x0800d2bd
 800d1e8:	6833      	ldr	r3, [r6, #0]
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6032      	str	r2, [r6, #0]
 800d1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e09c      	b.n	800d336 <_printf_i+0x1e6>
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	6820      	ldr	r0, [r4, #0]
 800d200:	1d19      	adds	r1, r3, #4
 800d202:	6031      	str	r1, [r6, #0]
 800d204:	0606      	lsls	r6, r0, #24
 800d206:	d501      	bpl.n	800d20c <_printf_i+0xbc>
 800d208:	681d      	ldr	r5, [r3, #0]
 800d20a:	e003      	b.n	800d214 <_printf_i+0xc4>
 800d20c:	0645      	lsls	r5, r0, #25
 800d20e:	d5fb      	bpl.n	800d208 <_printf_i+0xb8>
 800d210:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d214:	2d00      	cmp	r5, #0
 800d216:	da03      	bge.n	800d220 <_printf_i+0xd0>
 800d218:	232d      	movs	r3, #45	@ 0x2d
 800d21a:	426d      	negs	r5, r5
 800d21c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d220:	4858      	ldr	r0, [pc, #352]	@ (800d384 <_printf_i+0x234>)
 800d222:	230a      	movs	r3, #10
 800d224:	e011      	b.n	800d24a <_printf_i+0xfa>
 800d226:	6821      	ldr	r1, [r4, #0]
 800d228:	6833      	ldr	r3, [r6, #0]
 800d22a:	0608      	lsls	r0, r1, #24
 800d22c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d230:	d402      	bmi.n	800d238 <_printf_i+0xe8>
 800d232:	0649      	lsls	r1, r1, #25
 800d234:	bf48      	it	mi
 800d236:	b2ad      	uxthmi	r5, r5
 800d238:	2f6f      	cmp	r7, #111	@ 0x6f
 800d23a:	6033      	str	r3, [r6, #0]
 800d23c:	4851      	ldr	r0, [pc, #324]	@ (800d384 <_printf_i+0x234>)
 800d23e:	bf14      	ite	ne
 800d240:	230a      	movne	r3, #10
 800d242:	2308      	moveq	r3, #8
 800d244:	2100      	movs	r1, #0
 800d246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d24a:	6866      	ldr	r6, [r4, #4]
 800d24c:	2e00      	cmp	r6, #0
 800d24e:	60a6      	str	r6, [r4, #8]
 800d250:	db05      	blt.n	800d25e <_printf_i+0x10e>
 800d252:	6821      	ldr	r1, [r4, #0]
 800d254:	432e      	orrs	r6, r5
 800d256:	f021 0104 	bic.w	r1, r1, #4
 800d25a:	6021      	str	r1, [r4, #0]
 800d25c:	d04b      	beq.n	800d2f6 <_printf_i+0x1a6>
 800d25e:	4616      	mov	r6, r2
 800d260:	fbb5 f1f3 	udiv	r1, r5, r3
 800d264:	fb03 5711 	mls	r7, r3, r1, r5
 800d268:	5dc7      	ldrb	r7, [r0, r7]
 800d26a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d26e:	462f      	mov	r7, r5
 800d270:	460d      	mov	r5, r1
 800d272:	42bb      	cmp	r3, r7
 800d274:	d9f4      	bls.n	800d260 <_printf_i+0x110>
 800d276:	2b08      	cmp	r3, #8
 800d278:	d10b      	bne.n	800d292 <_printf_i+0x142>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	07df      	lsls	r7, r3, #31
 800d27e:	d508      	bpl.n	800d292 <_printf_i+0x142>
 800d280:	6923      	ldr	r3, [r4, #16]
 800d282:	6861      	ldr	r1, [r4, #4]
 800d284:	4299      	cmp	r1, r3
 800d286:	bfde      	ittt	le
 800d288:	2330      	movle	r3, #48	@ 0x30
 800d28a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d28e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d292:	1b92      	subs	r2, r2, r6
 800d294:	6122      	str	r2, [r4, #16]
 800d296:	464b      	mov	r3, r9
 800d298:	aa03      	add	r2, sp, #12
 800d29a:	4621      	mov	r1, r4
 800d29c:	4640      	mov	r0, r8
 800d29e:	f8cd a000 	str.w	sl, [sp]
 800d2a2:	f7ff fee3 	bl	800d06c <_printf_common>
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	d14a      	bne.n	800d340 <_printf_i+0x1f0>
 800d2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ae:	b004      	add	sp, #16
 800d2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	f043 0320 	orr.w	r3, r3, #32
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	2778      	movs	r7, #120	@ 0x78
 800d2be:	4832      	ldr	r0, [pc, #200]	@ (800d388 <_printf_i+0x238>)
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2c6:	061f      	lsls	r7, r3, #24
 800d2c8:	6831      	ldr	r1, [r6, #0]
 800d2ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2ce:	d402      	bmi.n	800d2d6 <_printf_i+0x186>
 800d2d0:	065f      	lsls	r7, r3, #25
 800d2d2:	bf48      	it	mi
 800d2d4:	b2ad      	uxthmi	r5, r5
 800d2d6:	6031      	str	r1, [r6, #0]
 800d2d8:	07d9      	lsls	r1, r3, #31
 800d2da:	bf44      	itt	mi
 800d2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d2e0:	6023      	strmi	r3, [r4, #0]
 800d2e2:	b11d      	cbz	r5, 800d2ec <_printf_i+0x19c>
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	e7ad      	b.n	800d244 <_printf_i+0xf4>
 800d2e8:	4826      	ldr	r0, [pc, #152]	@ (800d384 <_printf_i+0x234>)
 800d2ea:	e7e9      	b.n	800d2c0 <_printf_i+0x170>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	f023 0320 	bic.w	r3, r3, #32
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	e7f6      	b.n	800d2e4 <_printf_i+0x194>
 800d2f6:	4616      	mov	r6, r2
 800d2f8:	e7bd      	b.n	800d276 <_printf_i+0x126>
 800d2fa:	6833      	ldr	r3, [r6, #0]
 800d2fc:	6825      	ldr	r5, [r4, #0]
 800d2fe:	1d18      	adds	r0, r3, #4
 800d300:	6961      	ldr	r1, [r4, #20]
 800d302:	6030      	str	r0, [r6, #0]
 800d304:	062e      	lsls	r6, r5, #24
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	d501      	bpl.n	800d30e <_printf_i+0x1be>
 800d30a:	6019      	str	r1, [r3, #0]
 800d30c:	e002      	b.n	800d314 <_printf_i+0x1c4>
 800d30e:	0668      	lsls	r0, r5, #25
 800d310:	d5fb      	bpl.n	800d30a <_printf_i+0x1ba>
 800d312:	8019      	strh	r1, [r3, #0]
 800d314:	2300      	movs	r3, #0
 800d316:	4616      	mov	r6, r2
 800d318:	6123      	str	r3, [r4, #16]
 800d31a:	e7bc      	b.n	800d296 <_printf_i+0x146>
 800d31c:	6833      	ldr	r3, [r6, #0]
 800d31e:	2100      	movs	r1, #0
 800d320:	1d1a      	adds	r2, r3, #4
 800d322:	6032      	str	r2, [r6, #0]
 800d324:	681e      	ldr	r6, [r3, #0]
 800d326:	6862      	ldr	r2, [r4, #4]
 800d328:	4630      	mov	r0, r6
 800d32a:	f000 fa72 	bl	800d812 <memchr>
 800d32e:	b108      	cbz	r0, 800d334 <_printf_i+0x1e4>
 800d330:	1b80      	subs	r0, r0, r6
 800d332:	6060      	str	r0, [r4, #4]
 800d334:	6863      	ldr	r3, [r4, #4]
 800d336:	6123      	str	r3, [r4, #16]
 800d338:	2300      	movs	r3, #0
 800d33a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d33e:	e7aa      	b.n	800d296 <_printf_i+0x146>
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	4632      	mov	r2, r6
 800d344:	4649      	mov	r1, r9
 800d346:	4640      	mov	r0, r8
 800d348:	47d0      	blx	sl
 800d34a:	3001      	adds	r0, #1
 800d34c:	d0ad      	beq.n	800d2aa <_printf_i+0x15a>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	079b      	lsls	r3, r3, #30
 800d352:	d413      	bmi.n	800d37c <_printf_i+0x22c>
 800d354:	68e0      	ldr	r0, [r4, #12]
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	4298      	cmp	r0, r3
 800d35a:	bfb8      	it	lt
 800d35c:	4618      	movlt	r0, r3
 800d35e:	e7a6      	b.n	800d2ae <_printf_i+0x15e>
 800d360:	2301      	movs	r3, #1
 800d362:	4632      	mov	r2, r6
 800d364:	4649      	mov	r1, r9
 800d366:	4640      	mov	r0, r8
 800d368:	47d0      	blx	sl
 800d36a:	3001      	adds	r0, #1
 800d36c:	d09d      	beq.n	800d2aa <_printf_i+0x15a>
 800d36e:	3501      	adds	r5, #1
 800d370:	68e3      	ldr	r3, [r4, #12]
 800d372:	9903      	ldr	r1, [sp, #12]
 800d374:	1a5b      	subs	r3, r3, r1
 800d376:	42ab      	cmp	r3, r5
 800d378:	dcf2      	bgt.n	800d360 <_printf_i+0x210>
 800d37a:	e7eb      	b.n	800d354 <_printf_i+0x204>
 800d37c:	2500      	movs	r5, #0
 800d37e:	f104 0619 	add.w	r6, r4, #25
 800d382:	e7f5      	b.n	800d370 <_printf_i+0x220>
 800d384:	0801e6a2 	.word	0x0801e6a2
 800d388:	0801e6b3 	.word	0x0801e6b3

0800d38c <std>:
 800d38c:	2300      	movs	r3, #0
 800d38e:	b510      	push	{r4, lr}
 800d390:	4604      	mov	r4, r0
 800d392:	6083      	str	r3, [r0, #8]
 800d394:	8181      	strh	r1, [r0, #12]
 800d396:	4619      	mov	r1, r3
 800d398:	6643      	str	r3, [r0, #100]	@ 0x64
 800d39a:	81c2      	strh	r2, [r0, #14]
 800d39c:	2208      	movs	r2, #8
 800d39e:	6183      	str	r3, [r0, #24]
 800d3a0:	e9c0 3300 	strd	r3, r3, [r0]
 800d3a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3a8:	305c      	adds	r0, #92	@ 0x5c
 800d3aa:	f000 f944 	bl	800d636 <memset>
 800d3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e4 <std+0x58>)
 800d3b0:	6224      	str	r4, [r4, #32]
 800d3b2:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e8 <std+0x5c>)
 800d3b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800d3ec <std+0x60>)
 800d3ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f0 <std+0x64>)
 800d3be:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f4 <std+0x68>)
 800d3c2:	429c      	cmp	r4, r3
 800d3c4:	d006      	beq.n	800d3d4 <std+0x48>
 800d3c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d3ca:	4294      	cmp	r4, r2
 800d3cc:	d002      	beq.n	800d3d4 <std+0x48>
 800d3ce:	33d0      	adds	r3, #208	@ 0xd0
 800d3d0:	429c      	cmp	r4, r3
 800d3d2:	d105      	bne.n	800d3e0 <std+0x54>
 800d3d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3dc:	f000 ba16 	b.w	800d80c <__retarget_lock_init_recursive>
 800d3e0:	bd10      	pop	{r4, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800d57d 	.word	0x0800d57d
 800d3e8:	0800d59f 	.word	0x0800d59f
 800d3ec:	0800d5d7 	.word	0x0800d5d7
 800d3f0:	0800d5fb 	.word	0x0800d5fb
 800d3f4:	2007af78 	.word	0x2007af78

0800d3f8 <stdio_exit_handler>:
 800d3f8:	4a02      	ldr	r2, [pc, #8]	@ (800d404 <stdio_exit_handler+0xc>)
 800d3fa:	4903      	ldr	r1, [pc, #12]	@ (800d408 <stdio_exit_handler+0x10>)
 800d3fc:	4803      	ldr	r0, [pc, #12]	@ (800d40c <stdio_exit_handler+0x14>)
 800d3fe:	f000 b869 	b.w	800d4d4 <_fwalk_sglue>
 800d402:	bf00      	nop
 800d404:	20000f7c 	.word	0x20000f7c
 800d408:	0800f06d 	.word	0x0800f06d
 800d40c:	20000f8c 	.word	0x20000f8c

0800d410 <cleanup_stdio>:
 800d410:	6841      	ldr	r1, [r0, #4]
 800d412:	4b0c      	ldr	r3, [pc, #48]	@ (800d444 <cleanup_stdio+0x34>)
 800d414:	4299      	cmp	r1, r3
 800d416:	b510      	push	{r4, lr}
 800d418:	4604      	mov	r4, r0
 800d41a:	d001      	beq.n	800d420 <cleanup_stdio+0x10>
 800d41c:	f001 fe26 	bl	800f06c <_fflush_r>
 800d420:	68a1      	ldr	r1, [r4, #8]
 800d422:	4b09      	ldr	r3, [pc, #36]	@ (800d448 <cleanup_stdio+0x38>)
 800d424:	4299      	cmp	r1, r3
 800d426:	d002      	beq.n	800d42e <cleanup_stdio+0x1e>
 800d428:	4620      	mov	r0, r4
 800d42a:	f001 fe1f 	bl	800f06c <_fflush_r>
 800d42e:	68e1      	ldr	r1, [r4, #12]
 800d430:	4b06      	ldr	r3, [pc, #24]	@ (800d44c <cleanup_stdio+0x3c>)
 800d432:	4299      	cmp	r1, r3
 800d434:	d004      	beq.n	800d440 <cleanup_stdio+0x30>
 800d436:	4620      	mov	r0, r4
 800d438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d43c:	f001 be16 	b.w	800f06c <_fflush_r>
 800d440:	bd10      	pop	{r4, pc}
 800d442:	bf00      	nop
 800d444:	2007af78 	.word	0x2007af78
 800d448:	2007afe0 	.word	0x2007afe0
 800d44c:	2007b048 	.word	0x2007b048

0800d450 <global_stdio_init.part.0>:
 800d450:	b510      	push	{r4, lr}
 800d452:	4b0b      	ldr	r3, [pc, #44]	@ (800d480 <global_stdio_init.part.0+0x30>)
 800d454:	2104      	movs	r1, #4
 800d456:	4c0b      	ldr	r4, [pc, #44]	@ (800d484 <global_stdio_init.part.0+0x34>)
 800d458:	4a0b      	ldr	r2, [pc, #44]	@ (800d488 <global_stdio_init.part.0+0x38>)
 800d45a:	4620      	mov	r0, r4
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	2200      	movs	r2, #0
 800d460:	f7ff ff94 	bl	800d38c <std>
 800d464:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d468:	2201      	movs	r2, #1
 800d46a:	2109      	movs	r1, #9
 800d46c:	f7ff ff8e 	bl	800d38c <std>
 800d470:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d474:	2202      	movs	r2, #2
 800d476:	2112      	movs	r1, #18
 800d478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d47c:	f7ff bf86 	b.w	800d38c <std>
 800d480:	2007b0b0 	.word	0x2007b0b0
 800d484:	2007af78 	.word	0x2007af78
 800d488:	0800d3f9 	.word	0x0800d3f9

0800d48c <__sfp_lock_acquire>:
 800d48c:	4801      	ldr	r0, [pc, #4]	@ (800d494 <__sfp_lock_acquire+0x8>)
 800d48e:	f000 b9be 	b.w	800d80e <__retarget_lock_acquire_recursive>
 800d492:	bf00      	nop
 800d494:	2007b0b9 	.word	0x2007b0b9

0800d498 <__sfp_lock_release>:
 800d498:	4801      	ldr	r0, [pc, #4]	@ (800d4a0 <__sfp_lock_release+0x8>)
 800d49a:	f000 b9b9 	b.w	800d810 <__retarget_lock_release_recursive>
 800d49e:	bf00      	nop
 800d4a0:	2007b0b9 	.word	0x2007b0b9

0800d4a4 <__sinit>:
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	f7ff fff0 	bl	800d48c <__sfp_lock_acquire>
 800d4ac:	6a23      	ldr	r3, [r4, #32]
 800d4ae:	b11b      	cbz	r3, 800d4b8 <__sinit+0x14>
 800d4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4b4:	f7ff bff0 	b.w	800d498 <__sfp_lock_release>
 800d4b8:	4b04      	ldr	r3, [pc, #16]	@ (800d4cc <__sinit+0x28>)
 800d4ba:	6223      	str	r3, [r4, #32]
 800d4bc:	4b04      	ldr	r3, [pc, #16]	@ (800d4d0 <__sinit+0x2c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1f5      	bne.n	800d4b0 <__sinit+0xc>
 800d4c4:	f7ff ffc4 	bl	800d450 <global_stdio_init.part.0>
 800d4c8:	e7f2      	b.n	800d4b0 <__sinit+0xc>
 800d4ca:	bf00      	nop
 800d4cc:	0800d411 	.word	0x0800d411
 800d4d0:	2007b0b0 	.word	0x2007b0b0

0800d4d4 <_fwalk_sglue>:
 800d4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d8:	4607      	mov	r7, r0
 800d4da:	4688      	mov	r8, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	2600      	movs	r6, #0
 800d4e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4e4:	f1b9 0901 	subs.w	r9, r9, #1
 800d4e8:	d505      	bpl.n	800d4f6 <_fwalk_sglue+0x22>
 800d4ea:	6824      	ldr	r4, [r4, #0]
 800d4ec:	2c00      	cmp	r4, #0
 800d4ee:	d1f7      	bne.n	800d4e0 <_fwalk_sglue+0xc>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d907      	bls.n	800d50c <_fwalk_sglue+0x38>
 800d4fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d500:	3301      	adds	r3, #1
 800d502:	d003      	beq.n	800d50c <_fwalk_sglue+0x38>
 800d504:	4629      	mov	r1, r5
 800d506:	4638      	mov	r0, r7
 800d508:	47c0      	blx	r8
 800d50a:	4306      	orrs	r6, r0
 800d50c:	3568      	adds	r5, #104	@ 0x68
 800d50e:	e7e9      	b.n	800d4e4 <_fwalk_sglue+0x10>

0800d510 <sniprintf>:
 800d510:	b40c      	push	{r2, r3}
 800d512:	4b19      	ldr	r3, [pc, #100]	@ (800d578 <sniprintf+0x68>)
 800d514:	b530      	push	{r4, r5, lr}
 800d516:	1e0c      	subs	r4, r1, #0
 800d518:	b09d      	sub	sp, #116	@ 0x74
 800d51a:	681d      	ldr	r5, [r3, #0]
 800d51c:	da08      	bge.n	800d530 <sniprintf+0x20>
 800d51e:	238b      	movs	r3, #139	@ 0x8b
 800d520:	f04f 30ff 	mov.w	r0, #4294967295
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	b01d      	add	sp, #116	@ 0x74
 800d528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d52c:	b002      	add	sp, #8
 800d52e:	4770      	bx	lr
 800d530:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d534:	9002      	str	r0, [sp, #8]
 800d536:	9006      	str	r0, [sp, #24]
 800d538:	a902      	add	r1, sp, #8
 800d53a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d53e:	f04f 0300 	mov.w	r3, #0
 800d542:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d544:	4628      	mov	r0, r5
 800d546:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d548:	bf14      	ite	ne
 800d54a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d54e:	4623      	moveq	r3, r4
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	9307      	str	r3, [sp, #28]
 800d554:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d558:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d55c:	ab21      	add	r3, sp, #132	@ 0x84
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	f001 fc04 	bl	800ed6c <_svfiprintf_r>
 800d564:	1c43      	adds	r3, r0, #1
 800d566:	bfbc      	itt	lt
 800d568:	238b      	movlt	r3, #139	@ 0x8b
 800d56a:	602b      	strlt	r3, [r5, #0]
 800d56c:	2c00      	cmp	r4, #0
 800d56e:	d0da      	beq.n	800d526 <sniprintf+0x16>
 800d570:	9b02      	ldr	r3, [sp, #8]
 800d572:	2200      	movs	r2, #0
 800d574:	701a      	strb	r2, [r3, #0]
 800d576:	e7d6      	b.n	800d526 <sniprintf+0x16>
 800d578:	20000f88 	.word	0x20000f88

0800d57c <__sread>:
 800d57c:	b510      	push	{r4, lr}
 800d57e:	460c      	mov	r4, r1
 800d580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d584:	f000 f8e4 	bl	800d750 <_read_r>
 800d588:	2800      	cmp	r0, #0
 800d58a:	bfab      	itete	ge
 800d58c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d58e:	89a3      	ldrhlt	r3, [r4, #12]
 800d590:	181b      	addge	r3, r3, r0
 800d592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d596:	bfac      	ite	ge
 800d598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d59a:	81a3      	strhlt	r3, [r4, #12]
 800d59c:	bd10      	pop	{r4, pc}

0800d59e <__swrite>:
 800d59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a2:	461f      	mov	r7, r3
 800d5a4:	898b      	ldrh	r3, [r1, #12]
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	05db      	lsls	r3, r3, #23
 800d5ac:	4616      	mov	r6, r2
 800d5ae:	d505      	bpl.n	800d5bc <__swrite+0x1e>
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b8:	f000 f8b8 	bl	800d72c <_lseek_r>
 800d5bc:	89a3      	ldrh	r3, [r4, #12]
 800d5be:	4632      	mov	r2, r6
 800d5c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	463b      	mov	r3, r7
 800d5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d2:	f000 b8df 	b.w	800d794 <_write_r>

0800d5d6 <__sseek>:
 800d5d6:	b510      	push	{r4, lr}
 800d5d8:	460c      	mov	r4, r1
 800d5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5de:	f000 f8a5 	bl	800d72c <_lseek_r>
 800d5e2:	1c43      	adds	r3, r0, #1
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	bf15      	itete	ne
 800d5e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d5ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d5ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d5f2:	81a3      	strheq	r3, [r4, #12]
 800d5f4:	bf18      	it	ne
 800d5f6:	81a3      	strhne	r3, [r4, #12]
 800d5f8:	bd10      	pop	{r4, pc}

0800d5fa <__sclose>:
 800d5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fe:	f000 b827 	b.w	800d650 <_close_r>

0800d602 <memmove>:
 800d602:	4288      	cmp	r0, r1
 800d604:	b510      	push	{r4, lr}
 800d606:	eb01 0402 	add.w	r4, r1, r2
 800d60a:	d902      	bls.n	800d612 <memmove+0x10>
 800d60c:	4284      	cmp	r4, r0
 800d60e:	4623      	mov	r3, r4
 800d610:	d807      	bhi.n	800d622 <memmove+0x20>
 800d612:	1e43      	subs	r3, r0, #1
 800d614:	42a1      	cmp	r1, r4
 800d616:	d008      	beq.n	800d62a <memmove+0x28>
 800d618:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d61c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d620:	e7f8      	b.n	800d614 <memmove+0x12>
 800d622:	4402      	add	r2, r0
 800d624:	4601      	mov	r1, r0
 800d626:	428a      	cmp	r2, r1
 800d628:	d100      	bne.n	800d62c <memmove+0x2a>
 800d62a:	bd10      	pop	{r4, pc}
 800d62c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d630:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d634:	e7f7      	b.n	800d626 <memmove+0x24>

0800d636 <memset>:
 800d636:	4402      	add	r2, r0
 800d638:	4603      	mov	r3, r0
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d100      	bne.n	800d640 <memset+0xa>
 800d63e:	4770      	bx	lr
 800d640:	f803 1b01 	strb.w	r1, [r3], #1
 800d644:	e7f9      	b.n	800d63a <memset+0x4>
	...

0800d648 <_localeconv_r>:
 800d648:	4800      	ldr	r0, [pc, #0]	@ (800d64c <_localeconv_r+0x4>)
 800d64a:	4770      	bx	lr
 800d64c:	200010c8 	.word	0x200010c8

0800d650 <_close_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	2300      	movs	r3, #0
 800d654:	4d05      	ldr	r5, [pc, #20]	@ (800d66c <_close_r+0x1c>)
 800d656:	4604      	mov	r4, r0
 800d658:	4608      	mov	r0, r1
 800d65a:	602b      	str	r3, [r5, #0]
 800d65c:	f002 f836 	bl	800f6cc <_close>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d102      	bne.n	800d66a <_close_r+0x1a>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b103      	cbz	r3, 800d66a <_close_r+0x1a>
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	2007b0b4 	.word	0x2007b0b4

0800d670 <_reclaim_reent>:
 800d670:	4b2d      	ldr	r3, [pc, #180]	@ (800d728 <_reclaim_reent+0xb8>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4283      	cmp	r3, r0
 800d676:	b570      	push	{r4, r5, r6, lr}
 800d678:	4604      	mov	r4, r0
 800d67a:	d053      	beq.n	800d724 <_reclaim_reent+0xb4>
 800d67c:	69c3      	ldr	r3, [r0, #28]
 800d67e:	b31b      	cbz	r3, 800d6c8 <_reclaim_reent+0x58>
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	b163      	cbz	r3, 800d69e <_reclaim_reent+0x2e>
 800d684:	2500      	movs	r5, #0
 800d686:	69e3      	ldr	r3, [r4, #28]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	5959      	ldr	r1, [r3, r5]
 800d68c:	b9b1      	cbnz	r1, 800d6bc <_reclaim_reent+0x4c>
 800d68e:	3504      	adds	r5, #4
 800d690:	2d80      	cmp	r5, #128	@ 0x80
 800d692:	d1f8      	bne.n	800d686 <_reclaim_reent+0x16>
 800d694:	69e3      	ldr	r3, [r4, #28]
 800d696:	4620      	mov	r0, r4
 800d698:	68d9      	ldr	r1, [r3, #12]
 800d69a:	f000 ff37 	bl	800e50c <_free_r>
 800d69e:	69e3      	ldr	r3, [r4, #28]
 800d6a0:	6819      	ldr	r1, [r3, #0]
 800d6a2:	b111      	cbz	r1, 800d6aa <_reclaim_reent+0x3a>
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f000 ff31 	bl	800e50c <_free_r>
 800d6aa:	69e3      	ldr	r3, [r4, #28]
 800d6ac:	689d      	ldr	r5, [r3, #8]
 800d6ae:	b15d      	cbz	r5, 800d6c8 <_reclaim_reent+0x58>
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	682d      	ldr	r5, [r5, #0]
 800d6b6:	f000 ff29 	bl	800e50c <_free_r>
 800d6ba:	e7f8      	b.n	800d6ae <_reclaim_reent+0x3e>
 800d6bc:	680e      	ldr	r6, [r1, #0]
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f000 ff24 	bl	800e50c <_free_r>
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	e7e1      	b.n	800d68c <_reclaim_reent+0x1c>
 800d6c8:	6961      	ldr	r1, [r4, #20]
 800d6ca:	b111      	cbz	r1, 800d6d2 <_reclaim_reent+0x62>
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f000 ff1d 	bl	800e50c <_free_r>
 800d6d2:	69e1      	ldr	r1, [r4, #28]
 800d6d4:	b111      	cbz	r1, 800d6dc <_reclaim_reent+0x6c>
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 ff18 	bl	800e50c <_free_r>
 800d6dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d6de:	b111      	cbz	r1, 800d6e6 <_reclaim_reent+0x76>
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 ff13 	bl	800e50c <_free_r>
 800d6e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6e8:	b111      	cbz	r1, 800d6f0 <_reclaim_reent+0x80>
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f000 ff0e 	bl	800e50c <_free_r>
 800d6f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d6f2:	b111      	cbz	r1, 800d6fa <_reclaim_reent+0x8a>
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 ff09 	bl	800e50c <_free_r>
 800d6fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d6fc:	b111      	cbz	r1, 800d704 <_reclaim_reent+0x94>
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 ff04 	bl	800e50c <_free_r>
 800d704:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d706:	b111      	cbz	r1, 800d70e <_reclaim_reent+0x9e>
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 feff 	bl	800e50c <_free_r>
 800d70e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d710:	b111      	cbz	r1, 800d718 <_reclaim_reent+0xa8>
 800d712:	4620      	mov	r0, r4
 800d714:	f000 fefa 	bl	800e50c <_free_r>
 800d718:	6a23      	ldr	r3, [r4, #32]
 800d71a:	b11b      	cbz	r3, 800d724 <_reclaim_reent+0xb4>
 800d71c:	4620      	mov	r0, r4
 800d71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d722:	4718      	bx	r3
 800d724:	bd70      	pop	{r4, r5, r6, pc}
 800d726:	bf00      	nop
 800d728:	20000f88 	.word	0x20000f88

0800d72c <_lseek_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4604      	mov	r4, r0
 800d730:	4d06      	ldr	r5, [pc, #24]	@ (800d74c <_lseek_r+0x20>)
 800d732:	4608      	mov	r0, r1
 800d734:	4611      	mov	r1, r2
 800d736:	2200      	movs	r2, #0
 800d738:	602a      	str	r2, [r5, #0]
 800d73a:	461a      	mov	r2, r3
 800d73c:	f001 ffee 	bl	800f71c <_lseek>
 800d740:	1c43      	adds	r3, r0, #1
 800d742:	d102      	bne.n	800d74a <_lseek_r+0x1e>
 800d744:	682b      	ldr	r3, [r5, #0]
 800d746:	b103      	cbz	r3, 800d74a <_lseek_r+0x1e>
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	bd38      	pop	{r3, r4, r5, pc}
 800d74c:	2007b0b4 	.word	0x2007b0b4

0800d750 <_read_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4604      	mov	r4, r0
 800d754:	4d06      	ldr	r5, [pc, #24]	@ (800d770 <_read_r+0x20>)
 800d756:	4608      	mov	r0, r1
 800d758:	4611      	mov	r1, r2
 800d75a:	2200      	movs	r2, #0
 800d75c:	602a      	str	r2, [r5, #0]
 800d75e:	461a      	mov	r2, r3
 800d760:	f001 ffe4 	bl	800f72c <_read>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_read_r+0x1e>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_read_r+0x1e>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	2007b0b4 	.word	0x2007b0b4

0800d774 <_sbrk_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	2300      	movs	r3, #0
 800d778:	4d05      	ldr	r5, [pc, #20]	@ (800d790 <_sbrk_r+0x1c>)
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	f001 ffdc 	bl	800f73c <_sbrk>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_sbrk_r+0x1a>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_sbrk_r+0x1a>
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	2007b0b4 	.word	0x2007b0b4

0800d794 <_write_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4604      	mov	r4, r0
 800d798:	4d06      	ldr	r5, [pc, #24]	@ (800d7b4 <_write_r+0x20>)
 800d79a:	4608      	mov	r0, r1
 800d79c:	4611      	mov	r1, r2
 800d79e:	2200      	movs	r2, #0
 800d7a0:	602a      	str	r2, [r5, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f001 ffd8 	bl	800f758 <_write>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_write_r+0x1e>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_write_r+0x1e>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	2007b0b4 	.word	0x2007b0b4

0800d7b8 <__errno>:
 800d7b8:	4b01      	ldr	r3, [pc, #4]	@ (800d7c0 <__errno+0x8>)
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	20000f88 	.word	0x20000f88

0800d7c4 <__libc_init_array>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d7fc <__libc_init_array+0x38>)
 800d7c8:	2600      	movs	r6, #0
 800d7ca:	4c0d      	ldr	r4, [pc, #52]	@ (800d800 <__libc_init_array+0x3c>)
 800d7cc:	1b64      	subs	r4, r4, r5
 800d7ce:	10a4      	asrs	r4, r4, #2
 800d7d0:	42a6      	cmp	r6, r4
 800d7d2:	d109      	bne.n	800d7e8 <__libc_init_array+0x24>
 800d7d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d804 <__libc_init_array+0x40>)
 800d7d6:	2600      	movs	r6, #0
 800d7d8:	4c0b      	ldr	r4, [pc, #44]	@ (800d808 <__libc_init_array+0x44>)
 800d7da:	f001 ffc7 	bl	800f76c <_init>
 800d7de:	1b64      	subs	r4, r4, r5
 800d7e0:	10a4      	asrs	r4, r4, #2
 800d7e2:	42a6      	cmp	r6, r4
 800d7e4:	d105      	bne.n	800d7f2 <__libc_init_array+0x2e>
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}
 800d7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7ec:	3601      	adds	r6, #1
 800d7ee:	4798      	blx	r3
 800d7f0:	e7ee      	b.n	800d7d0 <__libc_init_array+0xc>
 800d7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7f6:	3601      	adds	r6, #1
 800d7f8:	4798      	blx	r3
 800d7fa:	e7f2      	b.n	800d7e2 <__libc_init_array+0x1e>
 800d7fc:	0801ea0c 	.word	0x0801ea0c
 800d800:	0801ea0c 	.word	0x0801ea0c
 800d804:	0801ea0c 	.word	0x0801ea0c
 800d808:	0801ea10 	.word	0x0801ea10

0800d80c <__retarget_lock_init_recursive>:
 800d80c:	4770      	bx	lr

0800d80e <__retarget_lock_acquire_recursive>:
 800d80e:	4770      	bx	lr

0800d810 <__retarget_lock_release_recursive>:
 800d810:	4770      	bx	lr

0800d812 <memchr>:
 800d812:	b2c9      	uxtb	r1, r1
 800d814:	4603      	mov	r3, r0
 800d816:	4402      	add	r2, r0
 800d818:	b510      	push	{r4, lr}
 800d81a:	4293      	cmp	r3, r2
 800d81c:	4618      	mov	r0, r3
 800d81e:	d101      	bne.n	800d824 <memchr+0x12>
 800d820:	2000      	movs	r0, #0
 800d822:	e003      	b.n	800d82c <memchr+0x1a>
 800d824:	7804      	ldrb	r4, [r0, #0]
 800d826:	3301      	adds	r3, #1
 800d828:	428c      	cmp	r4, r1
 800d82a:	d1f6      	bne.n	800d81a <memchr+0x8>
 800d82c:	bd10      	pop	{r4, pc}

0800d82e <memcpy>:
 800d82e:	440a      	add	r2, r1
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	4291      	cmp	r1, r2
 800d834:	d100      	bne.n	800d838 <memcpy+0xa>
 800d836:	4770      	bx	lr
 800d838:	b510      	push	{r4, lr}
 800d83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d83e:	4291      	cmp	r1, r2
 800d840:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d844:	d1f9      	bne.n	800d83a <memcpy+0xc>
 800d846:	bd10      	pop	{r4, pc}

0800d848 <quorem>:
 800d848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	6903      	ldr	r3, [r0, #16]
 800d84e:	4607      	mov	r7, r0
 800d850:	690c      	ldr	r4, [r1, #16]
 800d852:	42a3      	cmp	r3, r4
 800d854:	f2c0 8083 	blt.w	800d95e <quorem+0x116>
 800d858:	3c01      	subs	r4, #1
 800d85a:	f100 0514 	add.w	r5, r0, #20
 800d85e:	f101 0814 	add.w	r8, r1, #20
 800d862:	00a3      	lsls	r3, r4, #2
 800d864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d872:	9301      	str	r3, [sp, #4]
 800d874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d878:	3301      	adds	r3, #1
 800d87a:	429a      	cmp	r2, r3
 800d87c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d880:	d331      	bcc.n	800d8e6 <quorem+0x9e>
 800d882:	f04f 0a00 	mov.w	sl, #0
 800d886:	46c4      	mov	ip, r8
 800d888:	46ae      	mov	lr, r5
 800d88a:	46d3      	mov	fp, sl
 800d88c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d890:	b298      	uxth	r0, r3
 800d892:	45e1      	cmp	r9, ip
 800d894:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d898:	fb06 a000 	mla	r0, r6, r0, sl
 800d89c:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d8a0:	b280      	uxth	r0, r0
 800d8a2:	fb06 2303 	mla	r3, r6, r3, r2
 800d8a6:	f8de 2000 	ldr.w	r2, [lr]
 800d8aa:	b292      	uxth	r2, r2
 800d8ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8b0:	eba2 0200 	sub.w	r2, r2, r0
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	f8de 0000 	ldr.w	r0, [lr]
 800d8ba:	445a      	add	r2, fp
 800d8bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d8c0:	b292      	uxth	r2, r2
 800d8c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d8c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d8ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d8ce:	f84e 2b04 	str.w	r2, [lr], #4
 800d8d2:	d2db      	bcs.n	800d88c <quorem+0x44>
 800d8d4:	9b00      	ldr	r3, [sp, #0]
 800d8d6:	58eb      	ldr	r3, [r5, r3]
 800d8d8:	b92b      	cbnz	r3, 800d8e6 <quorem+0x9e>
 800d8da:	9b01      	ldr	r3, [sp, #4]
 800d8dc:	3b04      	subs	r3, #4
 800d8de:	429d      	cmp	r5, r3
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	d330      	bcc.n	800d946 <quorem+0xfe>
 800d8e4:	613c      	str	r4, [r7, #16]
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	f001 f8d0 	bl	800ea8c <__mcmp>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	db26      	blt.n	800d93e <quorem+0xf6>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8f8:	f8d1 c000 	ldr.w	ip, [r1]
 800d8fc:	fa1f fe82 	uxth.w	lr, r2
 800d900:	45c1      	cmp	r9, r8
 800d902:	fa1f f38c 	uxth.w	r3, ip
 800d906:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d90a:	eba3 030e 	sub.w	r3, r3, lr
 800d90e:	4403      	add	r3, r0
 800d910:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d914:	b29b      	uxth	r3, r3
 800d916:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d91a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d91e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d922:	f841 3b04 	str.w	r3, [r1], #4
 800d926:	d2e5      	bcs.n	800d8f4 <quorem+0xac>
 800d928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d92c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d930:	b922      	cbnz	r2, 800d93c <quorem+0xf4>
 800d932:	3b04      	subs	r3, #4
 800d934:	429d      	cmp	r5, r3
 800d936:	461a      	mov	r2, r3
 800d938:	d30b      	bcc.n	800d952 <quorem+0x10a>
 800d93a:	613c      	str	r4, [r7, #16]
 800d93c:	3601      	adds	r6, #1
 800d93e:	4630      	mov	r0, r6
 800d940:	b003      	add	sp, #12
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	6812      	ldr	r2, [r2, #0]
 800d948:	3b04      	subs	r3, #4
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	d1ca      	bne.n	800d8e4 <quorem+0x9c>
 800d94e:	3c01      	subs	r4, #1
 800d950:	e7c5      	b.n	800d8de <quorem+0x96>
 800d952:	6812      	ldr	r2, [r2, #0]
 800d954:	3b04      	subs	r3, #4
 800d956:	2a00      	cmp	r2, #0
 800d958:	d1ef      	bne.n	800d93a <quorem+0xf2>
 800d95a:	3c01      	subs	r4, #1
 800d95c:	e7ea      	b.n	800d934 <quorem+0xec>
 800d95e:	2000      	movs	r0, #0
 800d960:	e7ee      	b.n	800d940 <quorem+0xf8>
 800d962:	0000      	movs	r0, r0
 800d964:	0000      	movs	r0, r0
	...

0800d968 <_dtoa_r>:
 800d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	69c7      	ldr	r7, [r0, #28]
 800d96e:	b097      	sub	sp, #92	@ 0x5c
 800d970:	4681      	mov	r9, r0
 800d972:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d974:	9107      	str	r1, [sp, #28]
 800d976:	920c      	str	r2, [sp, #48]	@ 0x30
 800d978:	9311      	str	r3, [sp, #68]	@ 0x44
 800d97a:	ec55 4b10 	vmov	r4, r5, d0
 800d97e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d982:	b97f      	cbnz	r7, 800d9a4 <_dtoa_r+0x3c>
 800d984:	2010      	movs	r0, #16
 800d986:	f7fe ffc5 	bl	800c914 <malloc>
 800d98a:	4602      	mov	r2, r0
 800d98c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d990:	b920      	cbnz	r0, 800d99c <_dtoa_r+0x34>
 800d992:	4ba9      	ldr	r3, [pc, #676]	@ (800dc38 <_dtoa_r+0x2d0>)
 800d994:	21ef      	movs	r1, #239	@ 0xef
 800d996:	48a9      	ldr	r0, [pc, #676]	@ (800dc3c <_dtoa_r+0x2d4>)
 800d998:	f001 fb90 	bl	800f0bc <__assert_func>
 800d99c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d9a0:	6007      	str	r7, [r0, #0]
 800d9a2:	60c7      	str	r7, [r0, #12]
 800d9a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d9a8:	6819      	ldr	r1, [r3, #0]
 800d9aa:	b159      	cbz	r1, 800d9c4 <_dtoa_r+0x5c>
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	4648      	mov	r0, r9
 800d9b2:	4093      	lsls	r3, r2
 800d9b4:	604a      	str	r2, [r1, #4]
 800d9b6:	608b      	str	r3, [r1, #8]
 800d9b8:	f000 fe32 	bl	800e620 <_Bfree>
 800d9bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	1e2b      	subs	r3, r5, #0
 800d9c6:	bfb7      	itett	lt
 800d9c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d9cc:	2300      	movge	r3, #0
 800d9ce:	2201      	movlt	r2, #1
 800d9d0:	9305      	strlt	r3, [sp, #20]
 800d9d2:	bfa8      	it	ge
 800d9d4:	6033      	strge	r3, [r6, #0]
 800d9d6:	9f05      	ldr	r7, [sp, #20]
 800d9d8:	4b99      	ldr	r3, [pc, #612]	@ (800dc40 <_dtoa_r+0x2d8>)
 800d9da:	bfb8      	it	lt
 800d9dc:	6032      	strlt	r2, [r6, #0]
 800d9de:	43bb      	bics	r3, r7
 800d9e0:	d112      	bne.n	800da08 <_dtoa_r+0xa0>
 800d9e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d9e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d9e8:	6013      	str	r3, [r2, #0]
 800d9ea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d9ee:	4323      	orrs	r3, r4
 800d9f0:	f000 855a 	beq.w	800e4a8 <_dtoa_r+0xb40>
 800d9f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d9f6:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dc54 <_dtoa_r+0x2ec>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f000 855c 	beq.w	800e4b8 <_dtoa_r+0xb50>
 800da00:	f10a 0303 	add.w	r3, sl, #3
 800da04:	f000 bd56 	b.w	800e4b4 <_dtoa_r+0xb4c>
 800da08:	ed9d 7b04 	vldr	d7, [sp, #16]
 800da0c:	2200      	movs	r2, #0
 800da0e:	2300      	movs	r3, #0
 800da10:	ec51 0b17 	vmov	r0, r1, d7
 800da14:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800da18:	f7f3 f866 	bl	8000ae8 <__aeabi_dcmpeq>
 800da1c:	4680      	mov	r8, r0
 800da1e:	b158      	cbz	r0, 800da38 <_dtoa_r+0xd0>
 800da20:	2301      	movs	r3, #1
 800da22:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da28:	b113      	cbz	r3, 800da30 <_dtoa_r+0xc8>
 800da2a:	4b86      	ldr	r3, [pc, #536]	@ (800dc44 <_dtoa_r+0x2dc>)
 800da2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800dc58 <_dtoa_r+0x2f0>
 800da34:	f000 bd40 	b.w	800e4b8 <_dtoa_r+0xb50>
 800da38:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800da3c:	aa14      	add	r2, sp, #80	@ 0x50
 800da3e:	a915      	add	r1, sp, #84	@ 0x54
 800da40:	4648      	mov	r0, r9
 800da42:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800da46:	f001 f8d5 	bl	800ebf4 <__d2b>
 800da4a:	9002      	str	r0, [sp, #8]
 800da4c:	2e00      	cmp	r6, #0
 800da4e:	d076      	beq.n	800db3e <_dtoa_r+0x1d6>
 800da50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da52:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800da56:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800da5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da5e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800da62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da66:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800da6a:	4619      	mov	r1, r3
 800da6c:	2200      	movs	r2, #0
 800da6e:	4b76      	ldr	r3, [pc, #472]	@ (800dc48 <_dtoa_r+0x2e0>)
 800da70:	f7f2 fc1a 	bl	80002a8 <__aeabi_dsub>
 800da74:	a36a      	add	r3, pc, #424	@ (adr r3, 800dc20 <_dtoa_r+0x2b8>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	f7f2 fdcd 	bl	8000618 <__aeabi_dmul>
 800da7e:	a36a      	add	r3, pc, #424	@ (adr r3, 800dc28 <_dtoa_r+0x2c0>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	f7f2 fc12 	bl	80002ac <__adddf3>
 800da88:	4604      	mov	r4, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7f2 fd59 	bl	8000544 <__aeabi_i2d>
 800da92:	a367      	add	r3, pc, #412	@ (adr r3, 800dc30 <_dtoa_r+0x2c8>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f7f2 fdbe 	bl	8000618 <__aeabi_dmul>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	4620      	mov	r0, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	f7f2 fc02 	bl	80002ac <__adddf3>
 800daa8:	4604      	mov	r4, r0
 800daaa:	460d      	mov	r5, r1
 800daac:	f7f3 f864 	bl	8000b78 <__aeabi_d2iz>
 800dab0:	2200      	movs	r2, #0
 800dab2:	4607      	mov	r7, r0
 800dab4:	2300      	movs	r3, #0
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f3 f81f 	bl	8000afc <__aeabi_dcmplt>
 800dabe:	b140      	cbz	r0, 800dad2 <_dtoa_r+0x16a>
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7f2 fd3f 	bl	8000544 <__aeabi_i2d>
 800dac6:	4622      	mov	r2, r4
 800dac8:	462b      	mov	r3, r5
 800daca:	f7f3 f80d 	bl	8000ae8 <__aeabi_dcmpeq>
 800dace:	b900      	cbnz	r0, 800dad2 <_dtoa_r+0x16a>
 800dad0:	3f01      	subs	r7, #1
 800dad2:	2f16      	cmp	r7, #22
 800dad4:	d852      	bhi.n	800db7c <_dtoa_r+0x214>
 800dad6:	4b5d      	ldr	r3, [pc, #372]	@ (800dc4c <_dtoa_r+0x2e4>)
 800dad8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dadc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f7f3 f80a 	bl	8000afc <__aeabi_dcmplt>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d049      	beq.n	800db80 <_dtoa_r+0x218>
 800daec:	3f01      	subs	r7, #1
 800daee:	2300      	movs	r3, #0
 800daf0:	9310      	str	r3, [sp, #64]	@ 0x40
 800daf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800daf4:	1b9b      	subs	r3, r3, r6
 800daf6:	1e5a      	subs	r2, r3, #1
 800daf8:	bf4c      	ite	mi
 800dafa:	f1c3 0301 	rsbmi	r3, r3, #1
 800dafe:	2300      	movpl	r3, #0
 800db00:	9206      	str	r2, [sp, #24]
 800db02:	bf45      	ittet	mi
 800db04:	9300      	strmi	r3, [sp, #0]
 800db06:	2300      	movmi	r3, #0
 800db08:	9300      	strpl	r3, [sp, #0]
 800db0a:	9306      	strmi	r3, [sp, #24]
 800db0c:	2f00      	cmp	r7, #0
 800db0e:	db39      	blt.n	800db84 <_dtoa_r+0x21c>
 800db10:	9b06      	ldr	r3, [sp, #24]
 800db12:	970d      	str	r7, [sp, #52]	@ 0x34
 800db14:	443b      	add	r3, r7
 800db16:	9306      	str	r3, [sp, #24]
 800db18:	2300      	movs	r3, #0
 800db1a:	9308      	str	r3, [sp, #32]
 800db1c:	9b07      	ldr	r3, [sp, #28]
 800db1e:	2b09      	cmp	r3, #9
 800db20:	d863      	bhi.n	800dbea <_dtoa_r+0x282>
 800db22:	2b05      	cmp	r3, #5
 800db24:	bfc5      	ittet	gt
 800db26:	3b04      	subgt	r3, #4
 800db28:	2400      	movgt	r4, #0
 800db2a:	2401      	movle	r4, #1
 800db2c:	9307      	strgt	r3, [sp, #28]
 800db2e:	9b07      	ldr	r3, [sp, #28]
 800db30:	3b02      	subs	r3, #2
 800db32:	2b03      	cmp	r3, #3
 800db34:	d865      	bhi.n	800dc02 <_dtoa_r+0x29a>
 800db36:	e8df f003 	tbb	[pc, r3]
 800db3a:	5654      	.short	0x5654
 800db3c:	2d39      	.short	0x2d39
 800db3e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800db42:	441e      	add	r6, r3
 800db44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800db48:	2b20      	cmp	r3, #32
 800db4a:	bfc9      	itett	gt
 800db4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800db50:	f1c3 0320 	rsble	r3, r3, #32
 800db54:	409f      	lslgt	r7, r3
 800db56:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800db5a:	bfd8      	it	le
 800db5c:	fa04 f003 	lslle.w	r0, r4, r3
 800db60:	f106 36ff 	add.w	r6, r6, #4294967295
 800db64:	bfc4      	itt	gt
 800db66:	fa24 f303 	lsrgt.w	r3, r4, r3
 800db6a:	ea47 0003 	orrgt.w	r0, r7, r3
 800db6e:	f7f2 fcd9 	bl	8000524 <__aeabi_ui2d>
 800db72:	2201      	movs	r2, #1
 800db74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800db78:	9212      	str	r2, [sp, #72]	@ 0x48
 800db7a:	e776      	b.n	800da6a <_dtoa_r+0x102>
 800db7c:	2301      	movs	r3, #1
 800db7e:	e7b7      	b.n	800daf0 <_dtoa_r+0x188>
 800db80:	9010      	str	r0, [sp, #64]	@ 0x40
 800db82:	e7b6      	b.n	800daf2 <_dtoa_r+0x18a>
 800db84:	9b00      	ldr	r3, [sp, #0]
 800db86:	1bdb      	subs	r3, r3, r7
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	427b      	negs	r3, r7
 800db8c:	9308      	str	r3, [sp, #32]
 800db8e:	2300      	movs	r3, #0
 800db90:	930d      	str	r3, [sp, #52]	@ 0x34
 800db92:	e7c3      	b.n	800db1c <_dtoa_r+0x1b4>
 800db94:	2301      	movs	r3, #1
 800db96:	9309      	str	r3, [sp, #36]	@ 0x24
 800db98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db9a:	eb07 0b03 	add.w	fp, r7, r3
 800db9e:	f10b 0301 	add.w	r3, fp, #1
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	9303      	str	r3, [sp, #12]
 800dba6:	bfb8      	it	lt
 800dba8:	2301      	movlt	r3, #1
 800dbaa:	e006      	b.n	800dbba <_dtoa_r+0x252>
 800dbac:	2301      	movs	r3, #1
 800dbae:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd28      	ble.n	800dc08 <_dtoa_r+0x2a0>
 800dbb6:	469b      	mov	fp, r3
 800dbb8:	9303      	str	r3, [sp, #12]
 800dbba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	2204      	movs	r2, #4
 800dbc2:	f102 0514 	add.w	r5, r2, #20
 800dbc6:	429d      	cmp	r5, r3
 800dbc8:	d926      	bls.n	800dc18 <_dtoa_r+0x2b0>
 800dbca:	6041      	str	r1, [r0, #4]
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f000 fce7 	bl	800e5a0 <_Balloc>
 800dbd2:	4682      	mov	sl, r0
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d141      	bne.n	800dc5c <_dtoa_r+0x2f4>
 800dbd8:	4b1d      	ldr	r3, [pc, #116]	@ (800dc50 <_dtoa_r+0x2e8>)
 800dbda:	4602      	mov	r2, r0
 800dbdc:	f240 11af 	movw	r1, #431	@ 0x1af
 800dbe0:	e6d9      	b.n	800d996 <_dtoa_r+0x2e>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e7e3      	b.n	800dbae <_dtoa_r+0x246>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e7d5      	b.n	800db96 <_dtoa_r+0x22e>
 800dbea:	2401      	movs	r4, #1
 800dbec:	2300      	movs	r3, #0
 800dbee:	9409      	str	r4, [sp, #36]	@ 0x24
 800dbf0:	9307      	str	r3, [sp, #28]
 800dbf2:	f04f 3bff 	mov.w	fp, #4294967295
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	2312      	movs	r3, #18
 800dbfa:	f8cd b00c 	str.w	fp, [sp, #12]
 800dbfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc00:	e7db      	b.n	800dbba <_dtoa_r+0x252>
 800dc02:	2301      	movs	r3, #1
 800dc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc06:	e7f4      	b.n	800dbf2 <_dtoa_r+0x28a>
 800dc08:	f04f 0b01 	mov.w	fp, #1
 800dc0c:	465b      	mov	r3, fp
 800dc0e:	f8cd b00c 	str.w	fp, [sp, #12]
 800dc12:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800dc16:	e7d0      	b.n	800dbba <_dtoa_r+0x252>
 800dc18:	3101      	adds	r1, #1
 800dc1a:	0052      	lsls	r2, r2, #1
 800dc1c:	e7d1      	b.n	800dbc2 <_dtoa_r+0x25a>
 800dc1e:	bf00      	nop
 800dc20:	636f4361 	.word	0x636f4361
 800dc24:	3fd287a7 	.word	0x3fd287a7
 800dc28:	8b60c8b3 	.word	0x8b60c8b3
 800dc2c:	3fc68a28 	.word	0x3fc68a28
 800dc30:	509f79fb 	.word	0x509f79fb
 800dc34:	3fd34413 	.word	0x3fd34413
 800dc38:	0801e6d1 	.word	0x0801e6d1
 800dc3c:	0801e6e8 	.word	0x0801e6e8
 800dc40:	7ff00000 	.word	0x7ff00000
 800dc44:	0801e6a1 	.word	0x0801e6a1
 800dc48:	3ff80000 	.word	0x3ff80000
 800dc4c:	0801e838 	.word	0x0801e838
 800dc50:	0801e740 	.word	0x0801e740
 800dc54:	0801e6cd 	.word	0x0801e6cd
 800dc58:	0801e6a0 	.word	0x0801e6a0
 800dc5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc60:	6018      	str	r0, [r3, #0]
 800dc62:	9b03      	ldr	r3, [sp, #12]
 800dc64:	2b0e      	cmp	r3, #14
 800dc66:	f200 80a1 	bhi.w	800ddac <_dtoa_r+0x444>
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	f000 809e 	beq.w	800ddac <_dtoa_r+0x444>
 800dc70:	2f00      	cmp	r7, #0
 800dc72:	dd33      	ble.n	800dcdc <_dtoa_r+0x374>
 800dc74:	f007 020f 	and.w	r2, r7, #15
 800dc78:	4b9b      	ldr	r3, [pc, #620]	@ (800dee8 <_dtoa_r+0x580>)
 800dc7a:	05f8      	lsls	r0, r7, #23
 800dc7c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dc80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc84:	ed93 7b00 	vldr	d7, [r3]
 800dc88:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dc8c:	d516      	bpl.n	800dcbc <_dtoa_r+0x354>
 800dc8e:	4b97      	ldr	r3, [pc, #604]	@ (800deec <_dtoa_r+0x584>)
 800dc90:	f004 040f 	and.w	r4, r4, #15
 800dc94:	2603      	movs	r6, #3
 800dc96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc9e:	f7f2 fde5 	bl	800086c <__aeabi_ddiv>
 800dca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dca6:	4d91      	ldr	r5, [pc, #580]	@ (800deec <_dtoa_r+0x584>)
 800dca8:	b954      	cbnz	r4, 800dcc0 <_dtoa_r+0x358>
 800dcaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dcae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcb2:	f7f2 fddb 	bl	800086c <__aeabi_ddiv>
 800dcb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcba:	e028      	b.n	800dd0e <_dtoa_r+0x3a6>
 800dcbc:	2602      	movs	r6, #2
 800dcbe:	e7f2      	b.n	800dca6 <_dtoa_r+0x33e>
 800dcc0:	07e1      	lsls	r1, r4, #31
 800dcc2:	d508      	bpl.n	800dcd6 <_dtoa_r+0x36e>
 800dcc4:	3601      	adds	r6, #1
 800dcc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dcca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dcce:	f7f2 fca3 	bl	8000618 <__aeabi_dmul>
 800dcd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dcd6:	1064      	asrs	r4, r4, #1
 800dcd8:	3508      	adds	r5, #8
 800dcda:	e7e5      	b.n	800dca8 <_dtoa_r+0x340>
 800dcdc:	f000 80af 	beq.w	800de3e <_dtoa_r+0x4d6>
 800dce0:	427c      	negs	r4, r7
 800dce2:	4b81      	ldr	r3, [pc, #516]	@ (800dee8 <_dtoa_r+0x580>)
 800dce4:	4d81      	ldr	r5, [pc, #516]	@ (800deec <_dtoa_r+0x584>)
 800dce6:	2602      	movs	r6, #2
 800dce8:	f004 020f 	and.w	r2, r4, #15
 800dcec:	1124      	asrs	r4, r4, #4
 800dcee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	f7f2 fc8d 	bl	8000618 <__aeabi_dmul>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd04:	2c00      	cmp	r4, #0
 800dd06:	f040 808f 	bne.w	800de28 <_dtoa_r+0x4c0>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1d3      	bne.n	800dcb6 <_dtoa_r+0x34e>
 800dd0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 8094 	beq.w	800de42 <_dtoa_r+0x4da>
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	4b74      	ldr	r3, [pc, #464]	@ (800def0 <_dtoa_r+0x588>)
 800dd1e:	4620      	mov	r0, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	f7f2 feeb 	bl	8000afc <__aeabi_dcmplt>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f000 808b 	beq.w	800de42 <_dtoa_r+0x4da>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 8087 	beq.w	800de42 <_dtoa_r+0x4da>
 800dd34:	f1bb 0f00 	cmp.w	fp, #0
 800dd38:	dd34      	ble.n	800dda4 <_dtoa_r+0x43c>
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd40:	3601      	adds	r6, #1
 800dd42:	465c      	mov	r4, fp
 800dd44:	2200      	movs	r2, #0
 800dd46:	4b6b      	ldr	r3, [pc, #428]	@ (800def4 <_dtoa_r+0x58c>)
 800dd48:	4629      	mov	r1, r5
 800dd4a:	f7f2 fc65 	bl	8000618 <__aeabi_dmul>
 800dd4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd52:	4630      	mov	r0, r6
 800dd54:	f7f2 fbf6 	bl	8000544 <__aeabi_i2d>
 800dd58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd5c:	f7f2 fc5c 	bl	8000618 <__aeabi_dmul>
 800dd60:	2200      	movs	r2, #0
 800dd62:	4b65      	ldr	r3, [pc, #404]	@ (800def8 <_dtoa_r+0x590>)
 800dd64:	f7f2 faa2 	bl	80002ac <__adddf3>
 800dd68:	4605      	mov	r5, r0
 800dd6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dd6e:	2c00      	cmp	r4, #0
 800dd70:	d16a      	bne.n	800de48 <_dtoa_r+0x4e0>
 800dd72:	2200      	movs	r2, #0
 800dd74:	4b61      	ldr	r3, [pc, #388]	@ (800defc <_dtoa_r+0x594>)
 800dd76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd7a:	f7f2 fa95 	bl	80002a8 <__aeabi_dsub>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd86:	462a      	mov	r2, r5
 800dd88:	4633      	mov	r3, r6
 800dd8a:	f7f2 fed5 	bl	8000b38 <__aeabi_dcmpgt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f040 8298 	bne.w	800e2c4 <_dtoa_r+0x95c>
 800dd94:	462a      	mov	r2, r5
 800dd96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dd9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd9e:	f7f2 fead 	bl	8000afc <__aeabi_dcmplt>
 800dda2:	bb38      	cbnz	r0, 800ddf4 <_dtoa_r+0x48c>
 800dda4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dda8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ddac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f2c0 8157 	blt.w	800e062 <_dtoa_r+0x6fa>
 800ddb4:	2f0e      	cmp	r7, #14
 800ddb6:	f300 8154 	bgt.w	800e062 <_dtoa_r+0x6fa>
 800ddba:	4b4b      	ldr	r3, [pc, #300]	@ (800dee8 <_dtoa_r+0x580>)
 800ddbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddc0:	ed93 7b00 	vldr	d7, [r3]
 800ddc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	ed8d 7b00 	vstr	d7, [sp]
 800ddcc:	f280 80e5 	bge.w	800df9a <_dtoa_r+0x632>
 800ddd0:	9b03      	ldr	r3, [sp, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f300 80e1 	bgt.w	800df9a <_dtoa_r+0x632>
 800ddd8:	d10c      	bne.n	800ddf4 <_dtoa_r+0x48c>
 800ddda:	2200      	movs	r2, #0
 800dddc:	4b47      	ldr	r3, [pc, #284]	@ (800defc <_dtoa_r+0x594>)
 800ddde:	ec51 0b17 	vmov	r0, r1, d7
 800dde2:	f7f2 fc19 	bl	8000618 <__aeabi_dmul>
 800dde6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddea:	f7f2 fe9b 	bl	8000b24 <__aeabi_dcmpge>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f000 8266 	beq.w	800e2c0 <_dtoa_r+0x958>
 800ddf4:	2400      	movs	r4, #0
 800ddf6:	4625      	mov	r5, r4
 800ddf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddfa:	4656      	mov	r6, sl
 800ddfc:	ea6f 0803 	mvn.w	r8, r3
 800de00:	2700      	movs	r7, #0
 800de02:	4621      	mov	r1, r4
 800de04:	4648      	mov	r0, r9
 800de06:	f000 fc0b 	bl	800e620 <_Bfree>
 800de0a:	2d00      	cmp	r5, #0
 800de0c:	f000 80bd 	beq.w	800df8a <_dtoa_r+0x622>
 800de10:	b12f      	cbz	r7, 800de1e <_dtoa_r+0x4b6>
 800de12:	42af      	cmp	r7, r5
 800de14:	d003      	beq.n	800de1e <_dtoa_r+0x4b6>
 800de16:	4639      	mov	r1, r7
 800de18:	4648      	mov	r0, r9
 800de1a:	f000 fc01 	bl	800e620 <_Bfree>
 800de1e:	4629      	mov	r1, r5
 800de20:	4648      	mov	r0, r9
 800de22:	f000 fbfd 	bl	800e620 <_Bfree>
 800de26:	e0b0      	b.n	800df8a <_dtoa_r+0x622>
 800de28:	07e2      	lsls	r2, r4, #31
 800de2a:	d505      	bpl.n	800de38 <_dtoa_r+0x4d0>
 800de2c:	3601      	adds	r6, #1
 800de2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de32:	f7f2 fbf1 	bl	8000618 <__aeabi_dmul>
 800de36:	2301      	movs	r3, #1
 800de38:	1064      	asrs	r4, r4, #1
 800de3a:	3508      	adds	r5, #8
 800de3c:	e762      	b.n	800dd04 <_dtoa_r+0x39c>
 800de3e:	2602      	movs	r6, #2
 800de40:	e765      	b.n	800dd0e <_dtoa_r+0x3a6>
 800de42:	46b8      	mov	r8, r7
 800de44:	9c03      	ldr	r4, [sp, #12]
 800de46:	e784      	b.n	800dd52 <_dtoa_r+0x3ea>
 800de48:	4b27      	ldr	r3, [pc, #156]	@ (800dee8 <_dtoa_r+0x580>)
 800de4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de50:	4454      	add	r4, sl
 800de52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de56:	2900      	cmp	r1, #0
 800de58:	d054      	beq.n	800df04 <_dtoa_r+0x59c>
 800de5a:	2000      	movs	r0, #0
 800de5c:	4928      	ldr	r1, [pc, #160]	@ (800df00 <_dtoa_r+0x598>)
 800de5e:	f7f2 fd05 	bl	800086c <__aeabi_ddiv>
 800de62:	4633      	mov	r3, r6
 800de64:	4656      	mov	r6, sl
 800de66:	462a      	mov	r2, r5
 800de68:	f7f2 fa1e 	bl	80002a8 <__aeabi_dsub>
 800de6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de74:	f7f2 fe80 	bl	8000b78 <__aeabi_d2iz>
 800de78:	4605      	mov	r5, r0
 800de7a:	f7f2 fb63 	bl	8000544 <__aeabi_i2d>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	3530      	adds	r5, #48	@ 0x30
 800de84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de88:	f7f2 fa0e 	bl	80002a8 <__aeabi_dsub>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	f806 5b01 	strb.w	r5, [r6], #1
 800de94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de9c:	f7f2 fe2e 	bl	8000afc <__aeabi_dcmplt>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d172      	bne.n	800df8a <_dtoa_r+0x622>
 800dea4:	2000      	movs	r0, #0
 800dea6:	4912      	ldr	r1, [pc, #72]	@ (800def0 <_dtoa_r+0x588>)
 800dea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deac:	f7f2 f9fc 	bl	80002a8 <__aeabi_dsub>
 800deb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800deb4:	f7f2 fe22 	bl	8000afc <__aeabi_dcmplt>
 800deb8:	2800      	cmp	r0, #0
 800deba:	f040 80b4 	bne.w	800e026 <_dtoa_r+0x6be>
 800debe:	42a6      	cmp	r6, r4
 800dec0:	f43f af70 	beq.w	800dda4 <_dtoa_r+0x43c>
 800dec4:	2200      	movs	r2, #0
 800dec6:	4b0b      	ldr	r3, [pc, #44]	@ (800def4 <_dtoa_r+0x58c>)
 800dec8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800decc:	f7f2 fba4 	bl	8000618 <__aeabi_dmul>
 800ded0:	2200      	movs	r2, #0
 800ded2:	4b08      	ldr	r3, [pc, #32]	@ (800def4 <_dtoa_r+0x58c>)
 800ded4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ded8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dedc:	f7f2 fb9c 	bl	8000618 <__aeabi_dmul>
 800dee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dee4:	e7c4      	b.n	800de70 <_dtoa_r+0x508>
 800dee6:	bf00      	nop
 800dee8:	0801e838 	.word	0x0801e838
 800deec:	0801e810 	.word	0x0801e810
 800def0:	3ff00000 	.word	0x3ff00000
 800def4:	40240000 	.word	0x40240000
 800def8:	401c0000 	.word	0x401c0000
 800defc:	40140000 	.word	0x40140000
 800df00:	3fe00000 	.word	0x3fe00000
 800df04:	4631      	mov	r1, r6
 800df06:	4656      	mov	r6, sl
 800df08:	4628      	mov	r0, r5
 800df0a:	f7f2 fb85 	bl	8000618 <__aeabi_dmul>
 800df0e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800df10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800df14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df18:	f7f2 fe2e 	bl	8000b78 <__aeabi_d2iz>
 800df1c:	4605      	mov	r5, r0
 800df1e:	f7f2 fb11 	bl	8000544 <__aeabi_i2d>
 800df22:	4602      	mov	r2, r0
 800df24:	3530      	adds	r5, #48	@ 0x30
 800df26:	460b      	mov	r3, r1
 800df28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df2c:	f7f2 f9bc 	bl	80002a8 <__aeabi_dsub>
 800df30:	f806 5b01 	strb.w	r5, [r6], #1
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	42a6      	cmp	r6, r4
 800df3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df3e:	f04f 0200 	mov.w	r2, #0
 800df42:	d124      	bne.n	800df8e <_dtoa_r+0x626>
 800df44:	4baf      	ldr	r3, [pc, #700]	@ (800e204 <_dtoa_r+0x89c>)
 800df46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800df4a:	f7f2 f9af 	bl	80002ac <__adddf3>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df56:	f7f2 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d163      	bne.n	800e026 <_dtoa_r+0x6be>
 800df5e:	2000      	movs	r0, #0
 800df60:	49a8      	ldr	r1, [pc, #672]	@ (800e204 <_dtoa_r+0x89c>)
 800df62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df66:	f7f2 f99f 	bl	80002a8 <__aeabi_dsub>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df72:	f7f2 fdc3 	bl	8000afc <__aeabi_dcmplt>
 800df76:	2800      	cmp	r0, #0
 800df78:	f43f af14 	beq.w	800dda4 <_dtoa_r+0x43c>
 800df7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800df7e:	1e73      	subs	r3, r6, #1
 800df80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df86:	2b30      	cmp	r3, #48	@ 0x30
 800df88:	d0f8      	beq.n	800df7c <_dtoa_r+0x614>
 800df8a:	4647      	mov	r7, r8
 800df8c:	e03b      	b.n	800e006 <_dtoa_r+0x69e>
 800df8e:	4b9e      	ldr	r3, [pc, #632]	@ (800e208 <_dtoa_r+0x8a0>)
 800df90:	f7f2 fb42 	bl	8000618 <__aeabi_dmul>
 800df94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df98:	e7bc      	b.n	800df14 <_dtoa_r+0x5ac>
 800df9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800df9e:	4656      	mov	r6, sl
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfa8:	f7f2 fc60 	bl	800086c <__aeabi_ddiv>
 800dfac:	f7f2 fde4 	bl	8000b78 <__aeabi_d2iz>
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	f7f2 fac7 	bl	8000544 <__aeabi_i2d>
 800dfb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfba:	f7f2 fb2d 	bl	8000618 <__aeabi_dmul>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4629      	mov	r1, r5
 800dfca:	f7f2 f96d 	bl	80002a8 <__aeabi_dsub>
 800dfce:	9d03      	ldr	r5, [sp, #12]
 800dfd0:	f806 4b01 	strb.w	r4, [r6], #1
 800dfd4:	eba6 040a 	sub.w	r4, r6, sl
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	42a5      	cmp	r5, r4
 800dfde:	d133      	bne.n	800e048 <_dtoa_r+0x6e0>
 800dfe0:	f7f2 f964 	bl	80002ac <__adddf3>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfec:	f7f2 fda4 	bl	8000b38 <__aeabi_dcmpgt>
 800dff0:	b9c0      	cbnz	r0, 800e024 <_dtoa_r+0x6bc>
 800dff2:	4620      	mov	r0, r4
 800dff4:	4629      	mov	r1, r5
 800dff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dffa:	f7f2 fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 800dffe:	b110      	cbz	r0, 800e006 <_dtoa_r+0x69e>
 800e000:	f018 0f01 	tst.w	r8, #1
 800e004:	d10e      	bne.n	800e024 <_dtoa_r+0x6bc>
 800e006:	9902      	ldr	r1, [sp, #8]
 800e008:	4648      	mov	r0, r9
 800e00a:	f000 fb09 	bl	800e620 <_Bfree>
 800e00e:	2300      	movs	r3, #0
 800e010:	3701      	adds	r7, #1
 800e012:	7033      	strb	r3, [r6, #0]
 800e014:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e016:	601f      	str	r7, [r3, #0]
 800e018:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f000 824c 	beq.w	800e4b8 <_dtoa_r+0xb50>
 800e020:	601e      	str	r6, [r3, #0]
 800e022:	e249      	b.n	800e4b8 <_dtoa_r+0xb50>
 800e024:	46b8      	mov	r8, r7
 800e026:	4633      	mov	r3, r6
 800e028:	461e      	mov	r6, r3
 800e02a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e02e:	2a39      	cmp	r2, #57	@ 0x39
 800e030:	d106      	bne.n	800e040 <_dtoa_r+0x6d8>
 800e032:	459a      	cmp	sl, r3
 800e034:	d1f8      	bne.n	800e028 <_dtoa_r+0x6c0>
 800e036:	2230      	movs	r2, #48	@ 0x30
 800e038:	f108 0801 	add.w	r8, r8, #1
 800e03c:	f88a 2000 	strb.w	r2, [sl]
 800e040:	781a      	ldrb	r2, [r3, #0]
 800e042:	3201      	adds	r2, #1
 800e044:	701a      	strb	r2, [r3, #0]
 800e046:	e7a0      	b.n	800df8a <_dtoa_r+0x622>
 800e048:	2200      	movs	r2, #0
 800e04a:	4b6f      	ldr	r3, [pc, #444]	@ (800e208 <_dtoa_r+0x8a0>)
 800e04c:	f7f2 fae4 	bl	8000618 <__aeabi_dmul>
 800e050:	2200      	movs	r2, #0
 800e052:	2300      	movs	r3, #0
 800e054:	4604      	mov	r4, r0
 800e056:	460d      	mov	r5, r1
 800e058:	f7f2 fd46 	bl	8000ae8 <__aeabi_dcmpeq>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d09f      	beq.n	800dfa0 <_dtoa_r+0x638>
 800e060:	e7d1      	b.n	800e006 <_dtoa_r+0x69e>
 800e062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e064:	2a00      	cmp	r2, #0
 800e066:	f000 80ea 	beq.w	800e23e <_dtoa_r+0x8d6>
 800e06a:	9a07      	ldr	r2, [sp, #28]
 800e06c:	2a01      	cmp	r2, #1
 800e06e:	f300 80cd 	bgt.w	800e20c <_dtoa_r+0x8a4>
 800e072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e074:	2a00      	cmp	r2, #0
 800e076:	f000 80c1 	beq.w	800e1fc <_dtoa_r+0x894>
 800e07a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e07e:	9c08      	ldr	r4, [sp, #32]
 800e080:	9e00      	ldr	r6, [sp, #0]
 800e082:	9a00      	ldr	r2, [sp, #0]
 800e084:	2101      	movs	r1, #1
 800e086:	4648      	mov	r0, r9
 800e088:	441a      	add	r2, r3
 800e08a:	9200      	str	r2, [sp, #0]
 800e08c:	9a06      	ldr	r2, [sp, #24]
 800e08e:	441a      	add	r2, r3
 800e090:	9206      	str	r2, [sp, #24]
 800e092:	f000 fb7b 	bl	800e78c <__i2b>
 800e096:	4605      	mov	r5, r0
 800e098:	b166      	cbz	r6, 800e0b4 <_dtoa_r+0x74c>
 800e09a:	9b06      	ldr	r3, [sp, #24]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	dd09      	ble.n	800e0b4 <_dtoa_r+0x74c>
 800e0a0:	42b3      	cmp	r3, r6
 800e0a2:	9a00      	ldr	r2, [sp, #0]
 800e0a4:	bfa8      	it	ge
 800e0a6:	4633      	movge	r3, r6
 800e0a8:	1ad2      	subs	r2, r2, r3
 800e0aa:	1af6      	subs	r6, r6, r3
 800e0ac:	9200      	str	r2, [sp, #0]
 800e0ae:	9a06      	ldr	r2, [sp, #24]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	9306      	str	r3, [sp, #24]
 800e0b4:	9b08      	ldr	r3, [sp, #32]
 800e0b6:	b30b      	cbz	r3, 800e0fc <_dtoa_r+0x794>
 800e0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 80c6 	beq.w	800e24c <_dtoa_r+0x8e4>
 800e0c0:	2c00      	cmp	r4, #0
 800e0c2:	f000 80c0 	beq.w	800e246 <_dtoa_r+0x8de>
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	4622      	mov	r2, r4
 800e0ca:	4648      	mov	r0, r9
 800e0cc:	f000 fc18 	bl	800e900 <__pow5mult>
 800e0d0:	9a02      	ldr	r2, [sp, #8]
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	4605      	mov	r5, r0
 800e0d6:	4648      	mov	r0, r9
 800e0d8:	f000 fb6e 	bl	800e7b8 <__multiply>
 800e0dc:	9902      	ldr	r1, [sp, #8]
 800e0de:	4680      	mov	r8, r0
 800e0e0:	4648      	mov	r0, r9
 800e0e2:	f000 fa9d 	bl	800e620 <_Bfree>
 800e0e6:	9b08      	ldr	r3, [sp, #32]
 800e0e8:	1b1b      	subs	r3, r3, r4
 800e0ea:	9308      	str	r3, [sp, #32]
 800e0ec:	f000 80b1 	beq.w	800e252 <_dtoa_r+0x8ea>
 800e0f0:	9a08      	ldr	r2, [sp, #32]
 800e0f2:	4641      	mov	r1, r8
 800e0f4:	4648      	mov	r0, r9
 800e0f6:	f000 fc03 	bl	800e900 <__pow5mult>
 800e0fa:	9002      	str	r0, [sp, #8]
 800e0fc:	2101      	movs	r1, #1
 800e0fe:	4648      	mov	r0, r9
 800e100:	f000 fb44 	bl	800e78c <__i2b>
 800e104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e106:	4604      	mov	r4, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 81d9 	beq.w	800e4c0 <_dtoa_r+0xb58>
 800e10e:	461a      	mov	r2, r3
 800e110:	4601      	mov	r1, r0
 800e112:	4648      	mov	r0, r9
 800e114:	f000 fbf4 	bl	800e900 <__pow5mult>
 800e118:	9b07      	ldr	r3, [sp, #28]
 800e11a:	4604      	mov	r4, r0
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	f300 809f 	bgt.w	800e260 <_dtoa_r+0x8f8>
 800e122:	9b04      	ldr	r3, [sp, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	f040 8097 	bne.w	800e258 <_dtoa_r+0x8f0>
 800e12a:	9b05      	ldr	r3, [sp, #20]
 800e12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e130:	2b00      	cmp	r3, #0
 800e132:	f040 8093 	bne.w	800e25c <_dtoa_r+0x8f4>
 800e136:	9b05      	ldr	r3, [sp, #20]
 800e138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e13c:	0d1b      	lsrs	r3, r3, #20
 800e13e:	051b      	lsls	r3, r3, #20
 800e140:	b133      	cbz	r3, 800e150 <_dtoa_r+0x7e8>
 800e142:	9b00      	ldr	r3, [sp, #0]
 800e144:	3301      	adds	r3, #1
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	9b06      	ldr	r3, [sp, #24]
 800e14a:	3301      	adds	r3, #1
 800e14c:	9306      	str	r3, [sp, #24]
 800e14e:	2301      	movs	r3, #1
 800e150:	9308      	str	r3, [sp, #32]
 800e152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 81b9 	beq.w	800e4cc <_dtoa_r+0xb64>
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e160:	6918      	ldr	r0, [r3, #16]
 800e162:	f000 fac7 	bl	800e6f4 <__hi0bits>
 800e166:	f1c0 0020 	rsb	r0, r0, #32
 800e16a:	9b06      	ldr	r3, [sp, #24]
 800e16c:	4418      	add	r0, r3
 800e16e:	f010 001f 	ands.w	r0, r0, #31
 800e172:	f000 8082 	beq.w	800e27a <_dtoa_r+0x912>
 800e176:	f1c0 0320 	rsb	r3, r0, #32
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	dd73      	ble.n	800e266 <_dtoa_r+0x8fe>
 800e17e:	f1c0 001c 	rsb	r0, r0, #28
 800e182:	9b00      	ldr	r3, [sp, #0]
 800e184:	4403      	add	r3, r0
 800e186:	4406      	add	r6, r0
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	9b06      	ldr	r3, [sp, #24]
 800e18c:	4403      	add	r3, r0
 800e18e:	9306      	str	r3, [sp, #24]
 800e190:	9b00      	ldr	r3, [sp, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	dd05      	ble.n	800e1a2 <_dtoa_r+0x83a>
 800e196:	461a      	mov	r2, r3
 800e198:	9902      	ldr	r1, [sp, #8]
 800e19a:	4648      	mov	r0, r9
 800e19c:	f000 fc0a 	bl	800e9b4 <__lshift>
 800e1a0:	9002      	str	r0, [sp, #8]
 800e1a2:	9b06      	ldr	r3, [sp, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dd05      	ble.n	800e1b4 <_dtoa_r+0x84c>
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	4648      	mov	r0, r9
 800e1ae:	f000 fc01 	bl	800e9b4 <__lshift>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d061      	beq.n	800e27e <_dtoa_r+0x916>
 800e1ba:	4621      	mov	r1, r4
 800e1bc:	9802      	ldr	r0, [sp, #8]
 800e1be:	f000 fc65 	bl	800ea8c <__mcmp>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	da5b      	bge.n	800e27e <_dtoa_r+0x916>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	220a      	movs	r2, #10
 800e1ca:	9902      	ldr	r1, [sp, #8]
 800e1cc:	4648      	mov	r0, r9
 800e1ce:	f000 fa49 	bl	800e664 <__multadd>
 800e1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1d4:	f107 38ff 	add.w	r8, r7, #4294967295
 800e1d8:	9002      	str	r0, [sp, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f000 8178 	beq.w	800e4d0 <_dtoa_r+0xb68>
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	220a      	movs	r2, #10
 800e1e6:	4648      	mov	r0, r9
 800e1e8:	f000 fa3c 	bl	800e664 <__multadd>
 800e1ec:	f1bb 0f00 	cmp.w	fp, #0
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	dc6f      	bgt.n	800e2d4 <_dtoa_r+0x96c>
 800e1f4:	9b07      	ldr	r3, [sp, #28]
 800e1f6:	2b02      	cmp	r3, #2
 800e1f8:	dc49      	bgt.n	800e28e <_dtoa_r+0x926>
 800e1fa:	e06b      	b.n	800e2d4 <_dtoa_r+0x96c>
 800e1fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e202:	e73c      	b.n	800e07e <_dtoa_r+0x716>
 800e204:	3fe00000 	.word	0x3fe00000
 800e208:	40240000 	.word	0x40240000
 800e20c:	9b03      	ldr	r3, [sp, #12]
 800e20e:	1e5c      	subs	r4, r3, #1
 800e210:	9b08      	ldr	r3, [sp, #32]
 800e212:	42a3      	cmp	r3, r4
 800e214:	db09      	blt.n	800e22a <_dtoa_r+0x8c2>
 800e216:	1b1c      	subs	r4, r3, r4
 800e218:	9b03      	ldr	r3, [sp, #12]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f6bf af30 	bge.w	800e080 <_dtoa_r+0x718>
 800e220:	9b00      	ldr	r3, [sp, #0]
 800e222:	9a03      	ldr	r2, [sp, #12]
 800e224:	1a9e      	subs	r6, r3, r2
 800e226:	2300      	movs	r3, #0
 800e228:	e72b      	b.n	800e082 <_dtoa_r+0x71a>
 800e22a:	9b08      	ldr	r3, [sp, #32]
 800e22c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e22e:	1ae3      	subs	r3, r4, r3
 800e230:	9408      	str	r4, [sp, #32]
 800e232:	9e00      	ldr	r6, [sp, #0]
 800e234:	2400      	movs	r4, #0
 800e236:	441a      	add	r2, r3
 800e238:	9b03      	ldr	r3, [sp, #12]
 800e23a:	920d      	str	r2, [sp, #52]	@ 0x34
 800e23c:	e721      	b.n	800e082 <_dtoa_r+0x71a>
 800e23e:	9c08      	ldr	r4, [sp, #32]
 800e240:	9e00      	ldr	r6, [sp, #0]
 800e242:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e244:	e728      	b.n	800e098 <_dtoa_r+0x730>
 800e246:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e24a:	e751      	b.n	800e0f0 <_dtoa_r+0x788>
 800e24c:	9a08      	ldr	r2, [sp, #32]
 800e24e:	9902      	ldr	r1, [sp, #8]
 800e250:	e750      	b.n	800e0f4 <_dtoa_r+0x78c>
 800e252:	f8cd 8008 	str.w	r8, [sp, #8]
 800e256:	e751      	b.n	800e0fc <_dtoa_r+0x794>
 800e258:	2300      	movs	r3, #0
 800e25a:	e779      	b.n	800e150 <_dtoa_r+0x7e8>
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	e777      	b.n	800e150 <_dtoa_r+0x7e8>
 800e260:	2300      	movs	r3, #0
 800e262:	9308      	str	r3, [sp, #32]
 800e264:	e779      	b.n	800e15a <_dtoa_r+0x7f2>
 800e266:	d093      	beq.n	800e190 <_dtoa_r+0x828>
 800e268:	331c      	adds	r3, #28
 800e26a:	9a00      	ldr	r2, [sp, #0]
 800e26c:	441a      	add	r2, r3
 800e26e:	441e      	add	r6, r3
 800e270:	9200      	str	r2, [sp, #0]
 800e272:	9a06      	ldr	r2, [sp, #24]
 800e274:	441a      	add	r2, r3
 800e276:	9206      	str	r2, [sp, #24]
 800e278:	e78a      	b.n	800e190 <_dtoa_r+0x828>
 800e27a:	4603      	mov	r3, r0
 800e27c:	e7f4      	b.n	800e268 <_dtoa_r+0x900>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	46b8      	mov	r8, r7
 800e282:	2b00      	cmp	r3, #0
 800e284:	dc20      	bgt.n	800e2c8 <_dtoa_r+0x960>
 800e286:	469b      	mov	fp, r3
 800e288:	9b07      	ldr	r3, [sp, #28]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	dd1e      	ble.n	800e2cc <_dtoa_r+0x964>
 800e28e:	f1bb 0f00 	cmp.w	fp, #0
 800e292:	f47f adb1 	bne.w	800ddf8 <_dtoa_r+0x490>
 800e296:	4621      	mov	r1, r4
 800e298:	465b      	mov	r3, fp
 800e29a:	2205      	movs	r2, #5
 800e29c:	4648      	mov	r0, r9
 800e29e:	f000 f9e1 	bl	800e664 <__multadd>
 800e2a2:	4601      	mov	r1, r0
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	9802      	ldr	r0, [sp, #8]
 800e2a8:	f000 fbf0 	bl	800ea8c <__mcmp>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	f77f ada3 	ble.w	800ddf8 <_dtoa_r+0x490>
 800e2b2:	4656      	mov	r6, sl
 800e2b4:	2331      	movs	r3, #49	@ 0x31
 800e2b6:	f108 0801 	add.w	r8, r8, #1
 800e2ba:	f806 3b01 	strb.w	r3, [r6], #1
 800e2be:	e59f      	b.n	800de00 <_dtoa_r+0x498>
 800e2c0:	46b8      	mov	r8, r7
 800e2c2:	9c03      	ldr	r4, [sp, #12]
 800e2c4:	4625      	mov	r5, r4
 800e2c6:	e7f4      	b.n	800e2b2 <_dtoa_r+0x94a>
 800e2c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f000 8102 	beq.w	800e4d8 <_dtoa_r+0xb70>
 800e2d4:	2e00      	cmp	r6, #0
 800e2d6:	dd05      	ble.n	800e2e4 <_dtoa_r+0x97c>
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4632      	mov	r2, r6
 800e2dc:	4648      	mov	r0, r9
 800e2de:	f000 fb69 	bl	800e9b4 <__lshift>
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	9b08      	ldr	r3, [sp, #32]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d05c      	beq.n	800e3a4 <_dtoa_r+0xa3c>
 800e2ea:	6869      	ldr	r1, [r5, #4]
 800e2ec:	4648      	mov	r0, r9
 800e2ee:	f000 f957 	bl	800e5a0 <_Balloc>
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	b928      	cbnz	r0, 800e302 <_dtoa_r+0x99a>
 800e2f6:	4b83      	ldr	r3, [pc, #524]	@ (800e504 <_dtoa_r+0xb9c>)
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e2fe:	f7ff bb4a 	b.w	800d996 <_dtoa_r+0x2e>
 800e302:	692a      	ldr	r2, [r5, #16]
 800e304:	f105 010c 	add.w	r1, r5, #12
 800e308:	300c      	adds	r0, #12
 800e30a:	3202      	adds	r2, #2
 800e30c:	0092      	lsls	r2, r2, #2
 800e30e:	f7ff fa8e 	bl	800d82e <memcpy>
 800e312:	2201      	movs	r2, #1
 800e314:	4631      	mov	r1, r6
 800e316:	4648      	mov	r0, r9
 800e318:	f000 fb4c 	bl	800e9b4 <__lshift>
 800e31c:	f10a 0301 	add.w	r3, sl, #1
 800e320:	462f      	mov	r7, r5
 800e322:	4605      	mov	r5, r0
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	eb0a 030b 	add.w	r3, sl, fp
 800e32a:	9308      	str	r3, [sp, #32]
 800e32c:	9b04      	ldr	r3, [sp, #16]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	9306      	str	r3, [sp, #24]
 800e334:	9b00      	ldr	r3, [sp, #0]
 800e336:	4621      	mov	r1, r4
 800e338:	9802      	ldr	r0, [sp, #8]
 800e33a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e33e:	f7ff fa83 	bl	800d848 <quorem>
 800e342:	4603      	mov	r3, r0
 800e344:	4639      	mov	r1, r7
 800e346:	9003      	str	r0, [sp, #12]
 800e348:	3330      	adds	r3, #48	@ 0x30
 800e34a:	9802      	ldr	r0, [sp, #8]
 800e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e34e:	f000 fb9d 	bl	800ea8c <__mcmp>
 800e352:	462a      	mov	r2, r5
 800e354:	9004      	str	r0, [sp, #16]
 800e356:	4621      	mov	r1, r4
 800e358:	4648      	mov	r0, r9
 800e35a:	f000 fbb3 	bl	800eac4 <__mdiff>
 800e35e:	68c2      	ldr	r2, [r0, #12]
 800e360:	4606      	mov	r6, r0
 800e362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e364:	bb02      	cbnz	r2, 800e3a8 <_dtoa_r+0xa40>
 800e366:	4601      	mov	r1, r0
 800e368:	9802      	ldr	r0, [sp, #8]
 800e36a:	f000 fb8f 	bl	800ea8c <__mcmp>
 800e36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e370:	4602      	mov	r2, r0
 800e372:	4631      	mov	r1, r6
 800e374:	4648      	mov	r0, r9
 800e376:	920c      	str	r2, [sp, #48]	@ 0x30
 800e378:	9309      	str	r3, [sp, #36]	@ 0x24
 800e37a:	f000 f951 	bl	800e620 <_Bfree>
 800e37e:	9b07      	ldr	r3, [sp, #28]
 800e380:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e382:	9e00      	ldr	r6, [sp, #0]
 800e384:	ea42 0103 	orr.w	r1, r2, r3
 800e388:	9b06      	ldr	r3, [sp, #24]
 800e38a:	4319      	orrs	r1, r3
 800e38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38e:	d10d      	bne.n	800e3ac <_dtoa_r+0xa44>
 800e390:	2b39      	cmp	r3, #57	@ 0x39
 800e392:	d027      	beq.n	800e3e4 <_dtoa_r+0xa7c>
 800e394:	9a04      	ldr	r2, [sp, #16]
 800e396:	2a00      	cmp	r2, #0
 800e398:	dd01      	ble.n	800e39e <_dtoa_r+0xa36>
 800e39a:	9b03      	ldr	r3, [sp, #12]
 800e39c:	3331      	adds	r3, #49	@ 0x31
 800e39e:	f88b 3000 	strb.w	r3, [fp]
 800e3a2:	e52e      	b.n	800de02 <_dtoa_r+0x49a>
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	e7b9      	b.n	800e31c <_dtoa_r+0x9b4>
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	e7e2      	b.n	800e372 <_dtoa_r+0xa0a>
 800e3ac:	9904      	ldr	r1, [sp, #16]
 800e3ae:	2900      	cmp	r1, #0
 800e3b0:	db04      	blt.n	800e3bc <_dtoa_r+0xa54>
 800e3b2:	9807      	ldr	r0, [sp, #28]
 800e3b4:	4301      	orrs	r1, r0
 800e3b6:	9806      	ldr	r0, [sp, #24]
 800e3b8:	4301      	orrs	r1, r0
 800e3ba:	d120      	bne.n	800e3fe <_dtoa_r+0xa96>
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	ddee      	ble.n	800e39e <_dtoa_r+0xa36>
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	9902      	ldr	r1, [sp, #8]
 800e3c4:	4648      	mov	r0, r9
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	f000 faf4 	bl	800e9b4 <__lshift>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	9002      	str	r0, [sp, #8]
 800e3d0:	f000 fb5c 	bl	800ea8c <__mcmp>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	9b00      	ldr	r3, [sp, #0]
 800e3d8:	dc02      	bgt.n	800e3e0 <_dtoa_r+0xa78>
 800e3da:	d1e0      	bne.n	800e39e <_dtoa_r+0xa36>
 800e3dc:	07da      	lsls	r2, r3, #31
 800e3de:	d5de      	bpl.n	800e39e <_dtoa_r+0xa36>
 800e3e0:	2b39      	cmp	r3, #57	@ 0x39
 800e3e2:	d1da      	bne.n	800e39a <_dtoa_r+0xa32>
 800e3e4:	2339      	movs	r3, #57	@ 0x39
 800e3e6:	f88b 3000 	strb.w	r3, [fp]
 800e3ea:	4633      	mov	r3, r6
 800e3ec:	461e      	mov	r6, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e3f4:	2a39      	cmp	r2, #57	@ 0x39
 800e3f6:	d04f      	beq.n	800e498 <_dtoa_r+0xb30>
 800e3f8:	3201      	adds	r2, #1
 800e3fa:	701a      	strb	r2, [r3, #0]
 800e3fc:	e501      	b.n	800de02 <_dtoa_r+0x49a>
 800e3fe:	2a00      	cmp	r2, #0
 800e400:	dd03      	ble.n	800e40a <_dtoa_r+0xaa2>
 800e402:	2b39      	cmp	r3, #57	@ 0x39
 800e404:	d0ee      	beq.n	800e3e4 <_dtoa_r+0xa7c>
 800e406:	3301      	adds	r3, #1
 800e408:	e7c9      	b.n	800e39e <_dtoa_r+0xa36>
 800e40a:	9a00      	ldr	r2, [sp, #0]
 800e40c:	9908      	ldr	r1, [sp, #32]
 800e40e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e412:	428a      	cmp	r2, r1
 800e414:	d029      	beq.n	800e46a <_dtoa_r+0xb02>
 800e416:	2300      	movs	r3, #0
 800e418:	220a      	movs	r2, #10
 800e41a:	9902      	ldr	r1, [sp, #8]
 800e41c:	4648      	mov	r0, r9
 800e41e:	f000 f921 	bl	800e664 <__multadd>
 800e422:	42af      	cmp	r7, r5
 800e424:	9002      	str	r0, [sp, #8]
 800e426:	f04f 0300 	mov.w	r3, #0
 800e42a:	f04f 020a 	mov.w	r2, #10
 800e42e:	4639      	mov	r1, r7
 800e430:	4648      	mov	r0, r9
 800e432:	d107      	bne.n	800e444 <_dtoa_r+0xadc>
 800e434:	f000 f916 	bl	800e664 <__multadd>
 800e438:	4607      	mov	r7, r0
 800e43a:	4605      	mov	r5, r0
 800e43c:	9b00      	ldr	r3, [sp, #0]
 800e43e:	3301      	adds	r3, #1
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	e777      	b.n	800e334 <_dtoa_r+0x9cc>
 800e444:	f000 f90e 	bl	800e664 <__multadd>
 800e448:	4629      	mov	r1, r5
 800e44a:	4607      	mov	r7, r0
 800e44c:	2300      	movs	r3, #0
 800e44e:	220a      	movs	r2, #10
 800e450:	4648      	mov	r0, r9
 800e452:	f000 f907 	bl	800e664 <__multadd>
 800e456:	4605      	mov	r5, r0
 800e458:	e7f0      	b.n	800e43c <_dtoa_r+0xad4>
 800e45a:	f1bb 0f00 	cmp.w	fp, #0
 800e45e:	f04f 0700 	mov.w	r7, #0
 800e462:	bfcc      	ite	gt
 800e464:	465e      	movgt	r6, fp
 800e466:	2601      	movle	r6, #1
 800e468:	4456      	add	r6, sl
 800e46a:	2201      	movs	r2, #1
 800e46c:	9902      	ldr	r1, [sp, #8]
 800e46e:	4648      	mov	r0, r9
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	f000 fa9f 	bl	800e9b4 <__lshift>
 800e476:	4621      	mov	r1, r4
 800e478:	9002      	str	r0, [sp, #8]
 800e47a:	f000 fb07 	bl	800ea8c <__mcmp>
 800e47e:	2800      	cmp	r0, #0
 800e480:	dcb3      	bgt.n	800e3ea <_dtoa_r+0xa82>
 800e482:	d102      	bne.n	800e48a <_dtoa_r+0xb22>
 800e484:	9b00      	ldr	r3, [sp, #0]
 800e486:	07db      	lsls	r3, r3, #31
 800e488:	d4af      	bmi.n	800e3ea <_dtoa_r+0xa82>
 800e48a:	4633      	mov	r3, r6
 800e48c:	461e      	mov	r6, r3
 800e48e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e492:	2a30      	cmp	r2, #48	@ 0x30
 800e494:	d0fa      	beq.n	800e48c <_dtoa_r+0xb24>
 800e496:	e4b4      	b.n	800de02 <_dtoa_r+0x49a>
 800e498:	459a      	cmp	sl, r3
 800e49a:	d1a7      	bne.n	800e3ec <_dtoa_r+0xa84>
 800e49c:	2331      	movs	r3, #49	@ 0x31
 800e49e:	f108 0801 	add.w	r8, r8, #1
 800e4a2:	f88a 3000 	strb.w	r3, [sl]
 800e4a6:	e4ac      	b.n	800de02 <_dtoa_r+0x49a>
 800e4a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e4aa:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e508 <_dtoa_r+0xba0>
 800e4ae:	b11b      	cbz	r3, 800e4b8 <_dtoa_r+0xb50>
 800e4b0:	f10a 0308 	add.w	r3, sl, #8
 800e4b4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	4650      	mov	r0, sl
 800e4ba:	b017      	add	sp, #92	@ 0x5c
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	9b07      	ldr	r3, [sp, #28]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	f77f ae2d 	ble.w	800e122 <_dtoa_r+0x7ba>
 800e4c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4ca:	9308      	str	r3, [sp, #32]
 800e4cc:	2001      	movs	r0, #1
 800e4ce:	e64c      	b.n	800e16a <_dtoa_r+0x802>
 800e4d0:	f1bb 0f00 	cmp.w	fp, #0
 800e4d4:	f77f aed8 	ble.w	800e288 <_dtoa_r+0x920>
 800e4d8:	4656      	mov	r6, sl
 800e4da:	4621      	mov	r1, r4
 800e4dc:	9802      	ldr	r0, [sp, #8]
 800e4de:	f7ff f9b3 	bl	800d848 <quorem>
 800e4e2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e4e6:	f806 3b01 	strb.w	r3, [r6], #1
 800e4ea:	eba6 020a 	sub.w	r2, r6, sl
 800e4ee:	4593      	cmp	fp, r2
 800e4f0:	ddb3      	ble.n	800e45a <_dtoa_r+0xaf2>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	220a      	movs	r2, #10
 800e4f6:	9902      	ldr	r1, [sp, #8]
 800e4f8:	4648      	mov	r0, r9
 800e4fa:	f000 f8b3 	bl	800e664 <__multadd>
 800e4fe:	9002      	str	r0, [sp, #8]
 800e500:	e7eb      	b.n	800e4da <_dtoa_r+0xb72>
 800e502:	bf00      	nop
 800e504:	0801e740 	.word	0x0801e740
 800e508:	0801e6c4 	.word	0x0801e6c4

0800e50c <_free_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4605      	mov	r5, r0
 800e510:	2900      	cmp	r1, #0
 800e512:	d041      	beq.n	800e598 <_free_r+0x8c>
 800e514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e518:	1f0c      	subs	r4, r1, #4
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	bfb8      	it	lt
 800e51e:	18e4      	addlt	r4, r4, r3
 800e520:	f7fe faa2 	bl	800ca68 <__malloc_lock>
 800e524:	4a1d      	ldr	r2, [pc, #116]	@ (800e59c <_free_r+0x90>)
 800e526:	6813      	ldr	r3, [r2, #0]
 800e528:	b933      	cbnz	r3, 800e538 <_free_r+0x2c>
 800e52a:	6063      	str	r3, [r4, #4]
 800e52c:	6014      	str	r4, [r2, #0]
 800e52e:	4628      	mov	r0, r5
 800e530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e534:	f7fe ba9e 	b.w	800ca74 <__malloc_unlock>
 800e538:	42a3      	cmp	r3, r4
 800e53a:	d908      	bls.n	800e54e <_free_r+0x42>
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	1821      	adds	r1, r4, r0
 800e540:	428b      	cmp	r3, r1
 800e542:	bf01      	itttt	eq
 800e544:	6819      	ldreq	r1, [r3, #0]
 800e546:	685b      	ldreq	r3, [r3, #4]
 800e548:	1809      	addeq	r1, r1, r0
 800e54a:	6021      	streq	r1, [r4, #0]
 800e54c:	e7ed      	b.n	800e52a <_free_r+0x1e>
 800e54e:	461a      	mov	r2, r3
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	b10b      	cbz	r3, 800e558 <_free_r+0x4c>
 800e554:	42a3      	cmp	r3, r4
 800e556:	d9fa      	bls.n	800e54e <_free_r+0x42>
 800e558:	6811      	ldr	r1, [r2, #0]
 800e55a:	1850      	adds	r0, r2, r1
 800e55c:	42a0      	cmp	r0, r4
 800e55e:	d10b      	bne.n	800e578 <_free_r+0x6c>
 800e560:	6820      	ldr	r0, [r4, #0]
 800e562:	4401      	add	r1, r0
 800e564:	1850      	adds	r0, r2, r1
 800e566:	6011      	str	r1, [r2, #0]
 800e568:	4283      	cmp	r3, r0
 800e56a:	d1e0      	bne.n	800e52e <_free_r+0x22>
 800e56c:	6818      	ldr	r0, [r3, #0]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	4408      	add	r0, r1
 800e572:	6053      	str	r3, [r2, #4]
 800e574:	6010      	str	r0, [r2, #0]
 800e576:	e7da      	b.n	800e52e <_free_r+0x22>
 800e578:	d902      	bls.n	800e580 <_free_r+0x74>
 800e57a:	230c      	movs	r3, #12
 800e57c:	602b      	str	r3, [r5, #0]
 800e57e:	e7d6      	b.n	800e52e <_free_r+0x22>
 800e580:	6820      	ldr	r0, [r4, #0]
 800e582:	1821      	adds	r1, r4, r0
 800e584:	428b      	cmp	r3, r1
 800e586:	bf02      	ittt	eq
 800e588:	6819      	ldreq	r1, [r3, #0]
 800e58a:	685b      	ldreq	r3, [r3, #4]
 800e58c:	1809      	addeq	r1, r1, r0
 800e58e:	6063      	str	r3, [r4, #4]
 800e590:	bf08      	it	eq
 800e592:	6021      	streq	r1, [r4, #0]
 800e594:	6054      	str	r4, [r2, #4]
 800e596:	e7ca      	b.n	800e52e <_free_r+0x22>
 800e598:	bd38      	pop	{r3, r4, r5, pc}
 800e59a:	bf00      	nop
 800e59c:	2007af74 	.word	0x2007af74

0800e5a0 <_Balloc>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	69c6      	ldr	r6, [r0, #28]
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	460d      	mov	r5, r1
 800e5a8:	b976      	cbnz	r6, 800e5c8 <_Balloc+0x28>
 800e5aa:	2010      	movs	r0, #16
 800e5ac:	f7fe f9b2 	bl	800c914 <malloc>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	61e0      	str	r0, [r4, #28]
 800e5b4:	b920      	cbnz	r0, 800e5c0 <_Balloc+0x20>
 800e5b6:	4b18      	ldr	r3, [pc, #96]	@ (800e618 <_Balloc+0x78>)
 800e5b8:	216b      	movs	r1, #107	@ 0x6b
 800e5ba:	4818      	ldr	r0, [pc, #96]	@ (800e61c <_Balloc+0x7c>)
 800e5bc:	f000 fd7e 	bl	800f0bc <__assert_func>
 800e5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5c4:	6006      	str	r6, [r0, #0]
 800e5c6:	60c6      	str	r6, [r0, #12]
 800e5c8:	69e6      	ldr	r6, [r4, #28]
 800e5ca:	68f3      	ldr	r3, [r6, #12]
 800e5cc:	b183      	cbz	r3, 800e5f0 <_Balloc+0x50>
 800e5ce:	69e3      	ldr	r3, [r4, #28]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5d6:	b9b8      	cbnz	r0, 800e608 <_Balloc+0x68>
 800e5d8:	2101      	movs	r1, #1
 800e5da:	4620      	mov	r0, r4
 800e5dc:	fa01 f605 	lsl.w	r6, r1, r5
 800e5e0:	1d72      	adds	r2, r6, #5
 800e5e2:	0092      	lsls	r2, r2, #2
 800e5e4:	f000 fd88 	bl	800f0f8 <_calloc_r>
 800e5e8:	b160      	cbz	r0, 800e604 <_Balloc+0x64>
 800e5ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5ee:	e00e      	b.n	800e60e <_Balloc+0x6e>
 800e5f0:	2221      	movs	r2, #33	@ 0x21
 800e5f2:	2104      	movs	r1, #4
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 fd7f 	bl	800f0f8 <_calloc_r>
 800e5fa:	69e3      	ldr	r3, [r4, #28]
 800e5fc:	60f0      	str	r0, [r6, #12]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1e4      	bne.n	800e5ce <_Balloc+0x2e>
 800e604:	2000      	movs	r0, #0
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	6802      	ldr	r2, [r0, #0]
 800e60a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e60e:	2300      	movs	r3, #0
 800e610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e614:	e7f7      	b.n	800e606 <_Balloc+0x66>
 800e616:	bf00      	nop
 800e618:	0801e6d1 	.word	0x0801e6d1
 800e61c:	0801e751 	.word	0x0801e751

0800e620 <_Bfree>:
 800e620:	b570      	push	{r4, r5, r6, lr}
 800e622:	69c6      	ldr	r6, [r0, #28]
 800e624:	4605      	mov	r5, r0
 800e626:	460c      	mov	r4, r1
 800e628:	b976      	cbnz	r6, 800e648 <_Bfree+0x28>
 800e62a:	2010      	movs	r0, #16
 800e62c:	f7fe f972 	bl	800c914 <malloc>
 800e630:	4602      	mov	r2, r0
 800e632:	61e8      	str	r0, [r5, #28]
 800e634:	b920      	cbnz	r0, 800e640 <_Bfree+0x20>
 800e636:	4b09      	ldr	r3, [pc, #36]	@ (800e65c <_Bfree+0x3c>)
 800e638:	218f      	movs	r1, #143	@ 0x8f
 800e63a:	4809      	ldr	r0, [pc, #36]	@ (800e660 <_Bfree+0x40>)
 800e63c:	f000 fd3e 	bl	800f0bc <__assert_func>
 800e640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e644:	6006      	str	r6, [r0, #0]
 800e646:	60c6      	str	r6, [r0, #12]
 800e648:	b13c      	cbz	r4, 800e65a <_Bfree+0x3a>
 800e64a:	69eb      	ldr	r3, [r5, #28]
 800e64c:	6862      	ldr	r2, [r4, #4]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e654:	6021      	str	r1, [r4, #0]
 800e656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e65a:	bd70      	pop	{r4, r5, r6, pc}
 800e65c:	0801e6d1 	.word	0x0801e6d1
 800e660:	0801e751 	.word	0x0801e751

0800e664 <__multadd>:
 800e664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	f101 0c14 	add.w	ip, r1, #20
 800e66c:	4607      	mov	r7, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	461e      	mov	r6, r3
 800e672:	690d      	ldr	r5, [r1, #16]
 800e674:	2000      	movs	r0, #0
 800e676:	f8dc 3000 	ldr.w	r3, [ip]
 800e67a:	3001      	adds	r0, #1
 800e67c:	b299      	uxth	r1, r3
 800e67e:	4285      	cmp	r5, r0
 800e680:	fb02 6101 	mla	r1, r2, r1, r6
 800e684:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e688:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e68c:	b289      	uxth	r1, r1
 800e68e:	fb02 3306 	mla	r3, r2, r6, r3
 800e692:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e69a:	f84c 1b04 	str.w	r1, [ip], #4
 800e69e:	dcea      	bgt.n	800e676 <__multadd+0x12>
 800e6a0:	b30e      	cbz	r6, 800e6e6 <__multadd+0x82>
 800e6a2:	68a3      	ldr	r3, [r4, #8]
 800e6a4:	42ab      	cmp	r3, r5
 800e6a6:	dc19      	bgt.n	800e6dc <__multadd+0x78>
 800e6a8:	6861      	ldr	r1, [r4, #4]
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	3101      	adds	r1, #1
 800e6ae:	f7ff ff77 	bl	800e5a0 <_Balloc>
 800e6b2:	4680      	mov	r8, r0
 800e6b4:	b928      	cbnz	r0, 800e6c2 <__multadd+0x5e>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e6ec <__multadd+0x88>)
 800e6ba:	21ba      	movs	r1, #186	@ 0xba
 800e6bc:	480c      	ldr	r0, [pc, #48]	@ (800e6f0 <__multadd+0x8c>)
 800e6be:	f000 fcfd 	bl	800f0bc <__assert_func>
 800e6c2:	6922      	ldr	r2, [r4, #16]
 800e6c4:	f104 010c 	add.w	r1, r4, #12
 800e6c8:	300c      	adds	r0, #12
 800e6ca:	3202      	adds	r2, #2
 800e6cc:	0092      	lsls	r2, r2, #2
 800e6ce:	f7ff f8ae 	bl	800d82e <memcpy>
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	4644      	mov	r4, r8
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	f7ff ffa2 	bl	800e620 <_Bfree>
 800e6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e6e0:	3501      	adds	r5, #1
 800e6e2:	615e      	str	r6, [r3, #20]
 800e6e4:	6125      	str	r5, [r4, #16]
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ec:	0801e740 	.word	0x0801e740
 800e6f0:	0801e751 	.word	0x0801e751

0800e6f4 <__hi0bits>:
 800e6f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	bf36      	itet	cc
 800e6fc:	0403      	lslcc	r3, r0, #16
 800e6fe:	2000      	movcs	r0, #0
 800e700:	2010      	movcc	r0, #16
 800e702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e706:	bf3c      	itt	cc
 800e708:	021b      	lslcc	r3, r3, #8
 800e70a:	3008      	addcc	r0, #8
 800e70c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e710:	bf3c      	itt	cc
 800e712:	011b      	lslcc	r3, r3, #4
 800e714:	3004      	addcc	r0, #4
 800e716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e71a:	bf3c      	itt	cc
 800e71c:	009b      	lslcc	r3, r3, #2
 800e71e:	3002      	addcc	r0, #2
 800e720:	2b00      	cmp	r3, #0
 800e722:	db05      	blt.n	800e730 <__hi0bits+0x3c>
 800e724:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e728:	f100 0001 	add.w	r0, r0, #1
 800e72c:	bf08      	it	eq
 800e72e:	2020      	moveq	r0, #32
 800e730:	4770      	bx	lr

0800e732 <__lo0bits>:
 800e732:	6803      	ldr	r3, [r0, #0]
 800e734:	4602      	mov	r2, r0
 800e736:	f013 0007 	ands.w	r0, r3, #7
 800e73a:	d00b      	beq.n	800e754 <__lo0bits+0x22>
 800e73c:	07d9      	lsls	r1, r3, #31
 800e73e:	d421      	bmi.n	800e784 <__lo0bits+0x52>
 800e740:	0798      	lsls	r0, r3, #30
 800e742:	bf47      	ittee	mi
 800e744:	085b      	lsrmi	r3, r3, #1
 800e746:	2001      	movmi	r0, #1
 800e748:	089b      	lsrpl	r3, r3, #2
 800e74a:	2002      	movpl	r0, #2
 800e74c:	bf4c      	ite	mi
 800e74e:	6013      	strmi	r3, [r2, #0]
 800e750:	6013      	strpl	r3, [r2, #0]
 800e752:	4770      	bx	lr
 800e754:	b299      	uxth	r1, r3
 800e756:	b909      	cbnz	r1, 800e75c <__lo0bits+0x2a>
 800e758:	0c1b      	lsrs	r3, r3, #16
 800e75a:	2010      	movs	r0, #16
 800e75c:	b2d9      	uxtb	r1, r3
 800e75e:	b909      	cbnz	r1, 800e764 <__lo0bits+0x32>
 800e760:	3008      	adds	r0, #8
 800e762:	0a1b      	lsrs	r3, r3, #8
 800e764:	0719      	lsls	r1, r3, #28
 800e766:	bf04      	itt	eq
 800e768:	091b      	lsreq	r3, r3, #4
 800e76a:	3004      	addeq	r0, #4
 800e76c:	0799      	lsls	r1, r3, #30
 800e76e:	bf04      	itt	eq
 800e770:	089b      	lsreq	r3, r3, #2
 800e772:	3002      	addeq	r0, #2
 800e774:	07d9      	lsls	r1, r3, #31
 800e776:	d403      	bmi.n	800e780 <__lo0bits+0x4e>
 800e778:	085b      	lsrs	r3, r3, #1
 800e77a:	f100 0001 	add.w	r0, r0, #1
 800e77e:	d003      	beq.n	800e788 <__lo0bits+0x56>
 800e780:	6013      	str	r3, [r2, #0]
 800e782:	4770      	bx	lr
 800e784:	2000      	movs	r0, #0
 800e786:	4770      	bx	lr
 800e788:	2020      	movs	r0, #32
 800e78a:	4770      	bx	lr

0800e78c <__i2b>:
 800e78c:	b510      	push	{r4, lr}
 800e78e:	460c      	mov	r4, r1
 800e790:	2101      	movs	r1, #1
 800e792:	f7ff ff05 	bl	800e5a0 <_Balloc>
 800e796:	4602      	mov	r2, r0
 800e798:	b928      	cbnz	r0, 800e7a6 <__i2b+0x1a>
 800e79a:	4b05      	ldr	r3, [pc, #20]	@ (800e7b0 <__i2b+0x24>)
 800e79c:	f240 1145 	movw	r1, #325	@ 0x145
 800e7a0:	4804      	ldr	r0, [pc, #16]	@ (800e7b4 <__i2b+0x28>)
 800e7a2:	f000 fc8b 	bl	800f0bc <__assert_func>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	6144      	str	r4, [r0, #20]
 800e7aa:	6103      	str	r3, [r0, #16]
 800e7ac:	bd10      	pop	{r4, pc}
 800e7ae:	bf00      	nop
 800e7b0:	0801e740 	.word	0x0801e740
 800e7b4:	0801e751 	.word	0x0801e751

0800e7b8 <__multiply>:
 800e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	4617      	mov	r7, r2
 800e7be:	690a      	ldr	r2, [r1, #16]
 800e7c0:	4689      	mov	r9, r1
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	bfa2      	ittt	ge
 800e7ca:	463b      	movge	r3, r7
 800e7cc:	460f      	movge	r7, r1
 800e7ce:	4699      	movge	r9, r3
 800e7d0:	693d      	ldr	r5, [r7, #16]
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	eb05 060a 	add.w	r6, r5, sl
 800e7de:	42b3      	cmp	r3, r6
 800e7e0:	bfb8      	it	lt
 800e7e2:	3101      	addlt	r1, #1
 800e7e4:	f7ff fedc 	bl	800e5a0 <_Balloc>
 800e7e8:	b930      	cbnz	r0, 800e7f8 <__multiply+0x40>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	4b42      	ldr	r3, [pc, #264]	@ (800e8f8 <__multiply+0x140>)
 800e7ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e7f2:	4842      	ldr	r0, [pc, #264]	@ (800e8fc <__multiply+0x144>)
 800e7f4:	f000 fc62 	bl	800f0bc <__assert_func>
 800e7f8:	f100 0414 	add.w	r4, r0, #20
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e802:	4623      	mov	r3, r4
 800e804:	4573      	cmp	r3, lr
 800e806:	d320      	bcc.n	800e84a <__multiply+0x92>
 800e808:	f107 0814 	add.w	r8, r7, #20
 800e80c:	f109 0114 	add.w	r1, r9, #20
 800e810:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e814:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e818:	9302      	str	r3, [sp, #8]
 800e81a:	1beb      	subs	r3, r5, r7
 800e81c:	3715      	adds	r7, #21
 800e81e:	3b15      	subs	r3, #21
 800e820:	f023 0303 	bic.w	r3, r3, #3
 800e824:	3304      	adds	r3, #4
 800e826:	42bd      	cmp	r5, r7
 800e828:	bf38      	it	cc
 800e82a:	2304      	movcc	r3, #4
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	9b02      	ldr	r3, [sp, #8]
 800e830:	9103      	str	r1, [sp, #12]
 800e832:	428b      	cmp	r3, r1
 800e834:	d80c      	bhi.n	800e850 <__multiply+0x98>
 800e836:	2e00      	cmp	r6, #0
 800e838:	dd03      	ble.n	800e842 <__multiply+0x8a>
 800e83a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d057      	beq.n	800e8f2 <__multiply+0x13a>
 800e842:	6106      	str	r6, [r0, #16]
 800e844:	b005      	add	sp, #20
 800e846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84a:	f843 2b04 	str.w	r2, [r3], #4
 800e84e:	e7d9      	b.n	800e804 <__multiply+0x4c>
 800e850:	f8b1 a000 	ldrh.w	sl, [r1]
 800e854:	f1ba 0f00 	cmp.w	sl, #0
 800e858:	d021      	beq.n	800e89e <__multiply+0xe6>
 800e85a:	46c4      	mov	ip, r8
 800e85c:	46a1      	mov	r9, r4
 800e85e:	2700      	movs	r7, #0
 800e860:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e864:	f8d9 3000 	ldr.w	r3, [r9]
 800e868:	fa1f fb82 	uxth.w	fp, r2
 800e86c:	4565      	cmp	r5, ip
 800e86e:	b29b      	uxth	r3, r3
 800e870:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e874:	fb0a 330b 	mla	r3, sl, fp, r3
 800e878:	443b      	add	r3, r7
 800e87a:	f8d9 7000 	ldr.w	r7, [r9]
 800e87e:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800e882:	fb0a 7202 	mla	r2, sl, r2, r7
 800e886:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e894:	f849 3b04 	str.w	r3, [r9], #4
 800e898:	d8e2      	bhi.n	800e860 <__multiply+0xa8>
 800e89a:	9b01      	ldr	r3, [sp, #4]
 800e89c:	50e7      	str	r7, [r4, r3]
 800e89e:	9b03      	ldr	r3, [sp, #12]
 800e8a0:	3104      	adds	r1, #4
 800e8a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e8a6:	f1b9 0f00 	cmp.w	r9, #0
 800e8aa:	d020      	beq.n	800e8ee <__multiply+0x136>
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	4647      	mov	r7, r8
 800e8b0:	46a4      	mov	ip, r4
 800e8b2:	f04f 0a00 	mov.w	sl, #0
 800e8b6:	f8b7 b000 	ldrh.w	fp, [r7]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e8c0:	fb09 220b 	mla	r2, r9, fp, r2
 800e8c4:	4452      	add	r2, sl
 800e8c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ca:	f84c 3b04 	str.w	r3, [ip], #4
 800e8ce:	f857 3b04 	ldr.w	r3, [r7], #4
 800e8d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8d6:	f8bc 3000 	ldrh.w	r3, [ip]
 800e8da:	42bd      	cmp	r5, r7
 800e8dc:	fb09 330a 	mla	r3, r9, sl, r3
 800e8e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e8e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8e8:	d8e5      	bhi.n	800e8b6 <__multiply+0xfe>
 800e8ea:	9a01      	ldr	r2, [sp, #4]
 800e8ec:	50a3      	str	r3, [r4, r2]
 800e8ee:	3404      	adds	r4, #4
 800e8f0:	e79d      	b.n	800e82e <__multiply+0x76>
 800e8f2:	3e01      	subs	r6, #1
 800e8f4:	e79f      	b.n	800e836 <__multiply+0x7e>
 800e8f6:	bf00      	nop
 800e8f8:	0801e740 	.word	0x0801e740
 800e8fc:	0801e751 	.word	0x0801e751

0800e900 <__pow5mult>:
 800e900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e904:	4615      	mov	r5, r2
 800e906:	f012 0203 	ands.w	r2, r2, #3
 800e90a:	4607      	mov	r7, r0
 800e90c:	460e      	mov	r6, r1
 800e90e:	d007      	beq.n	800e920 <__pow5mult+0x20>
 800e910:	3a01      	subs	r2, #1
 800e912:	4c25      	ldr	r4, [pc, #148]	@ (800e9a8 <__pow5mult+0xa8>)
 800e914:	2300      	movs	r3, #0
 800e916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e91a:	f7ff fea3 	bl	800e664 <__multadd>
 800e91e:	4606      	mov	r6, r0
 800e920:	10ad      	asrs	r5, r5, #2
 800e922:	d03d      	beq.n	800e9a0 <__pow5mult+0xa0>
 800e924:	69fc      	ldr	r4, [r7, #28]
 800e926:	b97c      	cbnz	r4, 800e948 <__pow5mult+0x48>
 800e928:	2010      	movs	r0, #16
 800e92a:	f7fd fff3 	bl	800c914 <malloc>
 800e92e:	4602      	mov	r2, r0
 800e930:	61f8      	str	r0, [r7, #28]
 800e932:	b928      	cbnz	r0, 800e940 <__pow5mult+0x40>
 800e934:	4b1d      	ldr	r3, [pc, #116]	@ (800e9ac <__pow5mult+0xac>)
 800e936:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e93a:	481d      	ldr	r0, [pc, #116]	@ (800e9b0 <__pow5mult+0xb0>)
 800e93c:	f000 fbbe 	bl	800f0bc <__assert_func>
 800e940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e944:	6004      	str	r4, [r0, #0]
 800e946:	60c4      	str	r4, [r0, #12]
 800e948:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e94c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e950:	b94c      	cbnz	r4, 800e966 <__pow5mult+0x66>
 800e952:	f240 2171 	movw	r1, #625	@ 0x271
 800e956:	4638      	mov	r0, r7
 800e958:	f7ff ff18 	bl	800e78c <__i2b>
 800e95c:	2300      	movs	r3, #0
 800e95e:	4604      	mov	r4, r0
 800e960:	f8c8 0008 	str.w	r0, [r8, #8]
 800e964:	6003      	str	r3, [r0, #0]
 800e966:	f04f 0900 	mov.w	r9, #0
 800e96a:	07eb      	lsls	r3, r5, #31
 800e96c:	d50a      	bpl.n	800e984 <__pow5mult+0x84>
 800e96e:	4631      	mov	r1, r6
 800e970:	4622      	mov	r2, r4
 800e972:	4638      	mov	r0, r7
 800e974:	f7ff ff20 	bl	800e7b8 <__multiply>
 800e978:	4680      	mov	r8, r0
 800e97a:	4631      	mov	r1, r6
 800e97c:	4638      	mov	r0, r7
 800e97e:	4646      	mov	r6, r8
 800e980:	f7ff fe4e 	bl	800e620 <_Bfree>
 800e984:	106d      	asrs	r5, r5, #1
 800e986:	d00b      	beq.n	800e9a0 <__pow5mult+0xa0>
 800e988:	6820      	ldr	r0, [r4, #0]
 800e98a:	b938      	cbnz	r0, 800e99c <__pow5mult+0x9c>
 800e98c:	4622      	mov	r2, r4
 800e98e:	4621      	mov	r1, r4
 800e990:	4638      	mov	r0, r7
 800e992:	f7ff ff11 	bl	800e7b8 <__multiply>
 800e996:	6020      	str	r0, [r4, #0]
 800e998:	f8c0 9000 	str.w	r9, [r0]
 800e99c:	4604      	mov	r4, r0
 800e99e:	e7e4      	b.n	800e96a <__pow5mult+0x6a>
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9a6:	bf00      	nop
 800e9a8:	0801e804 	.word	0x0801e804
 800e9ac:	0801e6d1 	.word	0x0801e6d1
 800e9b0:	0801e751 	.word	0x0801e751

0800e9b4 <__lshift>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	4607      	mov	r7, r0
 800e9bc:	4691      	mov	r9, r2
 800e9be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9c2:	6923      	ldr	r3, [r4, #16]
 800e9c4:	6849      	ldr	r1, [r1, #4]
 800e9c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9ca:	68a3      	ldr	r3, [r4, #8]
 800e9cc:	f108 0601 	add.w	r6, r8, #1
 800e9d0:	42b3      	cmp	r3, r6
 800e9d2:	db0b      	blt.n	800e9ec <__lshift+0x38>
 800e9d4:	4638      	mov	r0, r7
 800e9d6:	f7ff fde3 	bl	800e5a0 <_Balloc>
 800e9da:	4605      	mov	r5, r0
 800e9dc:	b948      	cbnz	r0, 800e9f2 <__lshift+0x3e>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	4b28      	ldr	r3, [pc, #160]	@ (800ea84 <__lshift+0xd0>)
 800e9e2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e9e6:	4828      	ldr	r0, [pc, #160]	@ (800ea88 <__lshift+0xd4>)
 800e9e8:	f000 fb68 	bl	800f0bc <__assert_func>
 800e9ec:	3101      	adds	r1, #1
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	e7ee      	b.n	800e9d0 <__lshift+0x1c>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f100 0114 	add.w	r1, r0, #20
 800e9f8:	f100 0210 	add.w	r2, r0, #16
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	4553      	cmp	r3, sl
 800ea00:	db33      	blt.n	800ea6a <__lshift+0xb6>
 800ea02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea06:	f104 0314 	add.w	r3, r4, #20
 800ea0a:	6920      	ldr	r0, [r4, #16]
 800ea0c:	f019 091f 	ands.w	r9, r9, #31
 800ea10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea18:	d02b      	beq.n	800ea72 <__lshift+0xbe>
 800ea1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ea1e:	468a      	mov	sl, r1
 800ea20:	2200      	movs	r2, #0
 800ea22:	6818      	ldr	r0, [r3, #0]
 800ea24:	fa00 f009 	lsl.w	r0, r0, r9
 800ea28:	4310      	orrs	r0, r2
 800ea2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ea2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea32:	459c      	cmp	ip, r3
 800ea34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea38:	d8f3      	bhi.n	800ea22 <__lshift+0x6e>
 800ea3a:	ebac 0304 	sub.w	r3, ip, r4
 800ea3e:	f104 0015 	add.w	r0, r4, #21
 800ea42:	3b15      	subs	r3, #21
 800ea44:	f023 0303 	bic.w	r3, r3, #3
 800ea48:	3304      	adds	r3, #4
 800ea4a:	4560      	cmp	r0, ip
 800ea4c:	bf88      	it	hi
 800ea4e:	2304      	movhi	r3, #4
 800ea50:	50ca      	str	r2, [r1, r3]
 800ea52:	b10a      	cbz	r2, 800ea58 <__lshift+0xa4>
 800ea54:	f108 0602 	add.w	r6, r8, #2
 800ea58:	3e01      	subs	r6, #1
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	4621      	mov	r1, r4
 800ea5e:	612e      	str	r6, [r5, #16]
 800ea60:	f7ff fdde 	bl	800e620 <_Bfree>
 800ea64:	4628      	mov	r0, r5
 800ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea70:	e7c5      	b.n	800e9fe <__lshift+0x4a>
 800ea72:	3904      	subs	r1, #4
 800ea74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea78:	459c      	cmp	ip, r3
 800ea7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea7e:	d8f9      	bhi.n	800ea74 <__lshift+0xc0>
 800ea80:	e7ea      	b.n	800ea58 <__lshift+0xa4>
 800ea82:	bf00      	nop
 800ea84:	0801e740 	.word	0x0801e740
 800ea88:	0801e751 	.word	0x0801e751

0800ea8c <__mcmp>:
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	690a      	ldr	r2, [r1, #16]
 800ea90:	6900      	ldr	r0, [r0, #16]
 800ea92:	1a80      	subs	r0, r0, r2
 800ea94:	b530      	push	{r4, r5, lr}
 800ea96:	d10e      	bne.n	800eab6 <__mcmp+0x2a>
 800ea98:	3314      	adds	r3, #20
 800ea9a:	3114      	adds	r1, #20
 800ea9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eaa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eaa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eaa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eaac:	4295      	cmp	r5, r2
 800eaae:	d003      	beq.n	800eab8 <__mcmp+0x2c>
 800eab0:	d205      	bcs.n	800eabe <__mcmp+0x32>
 800eab2:	f04f 30ff 	mov.w	r0, #4294967295
 800eab6:	bd30      	pop	{r4, r5, pc}
 800eab8:	42a3      	cmp	r3, r4
 800eaba:	d3f3      	bcc.n	800eaa4 <__mcmp+0x18>
 800eabc:	e7fb      	b.n	800eab6 <__mcmp+0x2a>
 800eabe:	2001      	movs	r0, #1
 800eac0:	e7f9      	b.n	800eab6 <__mcmp+0x2a>
	...

0800eac4 <__mdiff>:
 800eac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	4689      	mov	r9, r1
 800eaca:	4606      	mov	r6, r0
 800eacc:	4611      	mov	r1, r2
 800eace:	4614      	mov	r4, r2
 800ead0:	4648      	mov	r0, r9
 800ead2:	f7ff ffdb 	bl	800ea8c <__mcmp>
 800ead6:	1e05      	subs	r5, r0, #0
 800ead8:	d112      	bne.n	800eb00 <__mdiff+0x3c>
 800eada:	4629      	mov	r1, r5
 800eadc:	4630      	mov	r0, r6
 800eade:	f7ff fd5f 	bl	800e5a0 <_Balloc>
 800eae2:	4602      	mov	r2, r0
 800eae4:	b928      	cbnz	r0, 800eaf2 <__mdiff+0x2e>
 800eae6:	4b41      	ldr	r3, [pc, #260]	@ (800ebec <__mdiff+0x128>)
 800eae8:	f240 2137 	movw	r1, #567	@ 0x237
 800eaec:	4840      	ldr	r0, [pc, #256]	@ (800ebf0 <__mdiff+0x12c>)
 800eaee:	f000 fae5 	bl	800f0bc <__assert_func>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eaf8:	4610      	mov	r0, r2
 800eafa:	b003      	add	sp, #12
 800eafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb00:	bfbc      	itt	lt
 800eb02:	464b      	movlt	r3, r9
 800eb04:	46a1      	movlt	r9, r4
 800eb06:	4630      	mov	r0, r6
 800eb08:	bfb8      	it	lt
 800eb0a:	2501      	movlt	r5, #1
 800eb0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb10:	bfb4      	ite	lt
 800eb12:	461c      	movlt	r4, r3
 800eb14:	2500      	movge	r5, #0
 800eb16:	f7ff fd43 	bl	800e5a0 <_Balloc>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	b918      	cbnz	r0, 800eb26 <__mdiff+0x62>
 800eb1e:	4b33      	ldr	r3, [pc, #204]	@ (800ebec <__mdiff+0x128>)
 800eb20:	f240 2145 	movw	r1, #581	@ 0x245
 800eb24:	e7e2      	b.n	800eaec <__mdiff+0x28>
 800eb26:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb2a:	f104 0e14 	add.w	lr, r4, #20
 800eb2e:	6926      	ldr	r6, [r4, #16]
 800eb30:	f100 0b14 	add.w	fp, r0, #20
 800eb34:	60c5      	str	r5, [r0, #12]
 800eb36:	f109 0514 	add.w	r5, r9, #20
 800eb3a:	f109 0310 	add.w	r3, r9, #16
 800eb3e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb46:	46d9      	mov	r9, fp
 800eb48:	f04f 0c00 	mov.w	ip, #0
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	9b01      	ldr	r3, [sp, #4]
 800eb50:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb54:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb58:	4576      	cmp	r6, lr
 800eb5a:	9301      	str	r3, [sp, #4]
 800eb5c:	fa1f f38a 	uxth.w	r3, sl
 800eb60:	4619      	mov	r1, r3
 800eb62:	b283      	uxth	r3, r0
 800eb64:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800eb68:	eba1 0303 	sub.w	r3, r1, r3
 800eb6c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eb70:	4463      	add	r3, ip
 800eb72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eb80:	f849 3b04 	str.w	r3, [r9], #4
 800eb84:	d8e3      	bhi.n	800eb4e <__mdiff+0x8a>
 800eb86:	1b33      	subs	r3, r6, r4
 800eb88:	3415      	adds	r4, #21
 800eb8a:	3b15      	subs	r3, #21
 800eb8c:	f023 0303 	bic.w	r3, r3, #3
 800eb90:	3304      	adds	r3, #4
 800eb92:	42a6      	cmp	r6, r4
 800eb94:	bf38      	it	cc
 800eb96:	2304      	movcc	r3, #4
 800eb98:	441d      	add	r5, r3
 800eb9a:	445b      	add	r3, fp
 800eb9c:	462c      	mov	r4, r5
 800eb9e:	461e      	mov	r6, r3
 800eba0:	4544      	cmp	r4, r8
 800eba2:	d30e      	bcc.n	800ebc2 <__mdiff+0xfe>
 800eba4:	f108 0103 	add.w	r1, r8, #3
 800eba8:	1b49      	subs	r1, r1, r5
 800ebaa:	3d03      	subs	r5, #3
 800ebac:	f021 0103 	bic.w	r1, r1, #3
 800ebb0:	45a8      	cmp	r8, r5
 800ebb2:	bf38      	it	cc
 800ebb4:	2100      	movcc	r1, #0
 800ebb6:	440b      	add	r3, r1
 800ebb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebbc:	b199      	cbz	r1, 800ebe6 <__mdiff+0x122>
 800ebbe:	6117      	str	r7, [r2, #16]
 800ebc0:	e79a      	b.n	800eaf8 <__mdiff+0x34>
 800ebc2:	f854 1b04 	ldr.w	r1, [r4], #4
 800ebc6:	46e6      	mov	lr, ip
 800ebc8:	fa1f fc81 	uxth.w	ip, r1
 800ebcc:	0c08      	lsrs	r0, r1, #16
 800ebce:	4471      	add	r1, lr
 800ebd0:	44f4      	add	ip, lr
 800ebd2:	b289      	uxth	r1, r1
 800ebd4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ebd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ebdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebe0:	f846 1b04 	str.w	r1, [r6], #4
 800ebe4:	e7dc      	b.n	800eba0 <__mdiff+0xdc>
 800ebe6:	3f01      	subs	r7, #1
 800ebe8:	e7e6      	b.n	800ebb8 <__mdiff+0xf4>
 800ebea:	bf00      	nop
 800ebec:	0801e740 	.word	0x0801e740
 800ebf0:	0801e751 	.word	0x0801e751

0800ebf4 <__d2b>:
 800ebf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebf8:	460f      	mov	r7, r1
 800ebfa:	2101      	movs	r1, #1
 800ebfc:	4616      	mov	r6, r2
 800ebfe:	ec59 8b10 	vmov	r8, r9, d0
 800ec02:	f7ff fccd 	bl	800e5a0 <_Balloc>
 800ec06:	4604      	mov	r4, r0
 800ec08:	b930      	cbnz	r0, 800ec18 <__d2b+0x24>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	4b23      	ldr	r3, [pc, #140]	@ (800ec9c <__d2b+0xa8>)
 800ec0e:	f240 310f 	movw	r1, #783	@ 0x30f
 800ec12:	4823      	ldr	r0, [pc, #140]	@ (800eca0 <__d2b+0xac>)
 800ec14:	f000 fa52 	bl	800f0bc <__assert_func>
 800ec18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec20:	b10d      	cbz	r5, 800ec26 <__d2b+0x32>
 800ec22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec26:	9301      	str	r3, [sp, #4]
 800ec28:	f1b8 0300 	subs.w	r3, r8, #0
 800ec2c:	d023      	beq.n	800ec76 <__d2b+0x82>
 800ec2e:	4668      	mov	r0, sp
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	f7ff fd7e 	bl	800e732 <__lo0bits>
 800ec36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec3a:	b1d0      	cbz	r0, 800ec72 <__d2b+0x7e>
 800ec3c:	f1c0 0320 	rsb	r3, r0, #32
 800ec40:	fa02 f303 	lsl.w	r3, r2, r3
 800ec44:	40c2      	lsrs	r2, r0
 800ec46:	430b      	orrs	r3, r1
 800ec48:	9201      	str	r2, [sp, #4]
 800ec4a:	6163      	str	r3, [r4, #20]
 800ec4c:	9b01      	ldr	r3, [sp, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	61a3      	str	r3, [r4, #24]
 800ec52:	bf0c      	ite	eq
 800ec54:	2201      	moveq	r2, #1
 800ec56:	2202      	movne	r2, #2
 800ec58:	6122      	str	r2, [r4, #16]
 800ec5a:	b1a5      	cbz	r5, 800ec86 <__d2b+0x92>
 800ec5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ec60:	4405      	add	r5, r0
 800ec62:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ec66:	603d      	str	r5, [r7, #0]
 800ec68:	6030      	str	r0, [r6, #0]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	b003      	add	sp, #12
 800ec6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec72:	6161      	str	r1, [r4, #20]
 800ec74:	e7ea      	b.n	800ec4c <__d2b+0x58>
 800ec76:	a801      	add	r0, sp, #4
 800ec78:	f7ff fd5b 	bl	800e732 <__lo0bits>
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	3020      	adds	r0, #32
 800ec80:	2201      	movs	r2, #1
 800ec82:	6163      	str	r3, [r4, #20]
 800ec84:	e7e8      	b.n	800ec58 <__d2b+0x64>
 800ec86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec8e:	6038      	str	r0, [r7, #0]
 800ec90:	6918      	ldr	r0, [r3, #16]
 800ec92:	f7ff fd2f 	bl	800e6f4 <__hi0bits>
 800ec96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec9a:	e7e5      	b.n	800ec68 <__d2b+0x74>
 800ec9c:	0801e740 	.word	0x0801e740
 800eca0:	0801e751 	.word	0x0801e751

0800eca4 <_malloc_usable_size_r>:
 800eca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eca8:	1f18      	subs	r0, r3, #4
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	bfbc      	itt	lt
 800ecae:	580b      	ldrlt	r3, [r1, r0]
 800ecb0:	18c0      	addlt	r0, r0, r3
 800ecb2:	4770      	bx	lr

0800ecb4 <__ssputs_r>:
 800ecb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb8:	461f      	mov	r7, r3
 800ecba:	688e      	ldr	r6, [r1, #8]
 800ecbc:	4682      	mov	sl, r0
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	42be      	cmp	r6, r7
 800ecc2:	4690      	mov	r8, r2
 800ecc4:	680b      	ldr	r3, [r1, #0]
 800ecc6:	d82d      	bhi.n	800ed24 <__ssputs_r+0x70>
 800ecc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ecd0:	d026      	beq.n	800ed20 <__ssputs_r+0x6c>
 800ecd2:	6965      	ldr	r5, [r4, #20]
 800ecd4:	6909      	ldr	r1, [r1, #16]
 800ecd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecda:	eba3 0901 	sub.w	r9, r3, r1
 800ecde:	1c7b      	adds	r3, r7, #1
 800ece0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ece4:	444b      	add	r3, r9
 800ece6:	106d      	asrs	r5, r5, #1
 800ece8:	429d      	cmp	r5, r3
 800ecea:	bf38      	it	cc
 800ecec:	461d      	movcc	r5, r3
 800ecee:	0553      	lsls	r3, r2, #21
 800ecf0:	d527      	bpl.n	800ed42 <__ssputs_r+0x8e>
 800ecf2:	4629      	mov	r1, r5
 800ecf4:	f7fd fe38 	bl	800c968 <_malloc_r>
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	b360      	cbz	r0, 800ed56 <__ssputs_r+0xa2>
 800ecfc:	464a      	mov	r2, r9
 800ecfe:	6921      	ldr	r1, [r4, #16]
 800ed00:	f7fe fd95 	bl	800d82e <memcpy>
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	6126      	str	r6, [r4, #16]
 800ed12:	444e      	add	r6, r9
 800ed14:	6165      	str	r5, [r4, #20]
 800ed16:	eba5 0509 	sub.w	r5, r5, r9
 800ed1a:	6026      	str	r6, [r4, #0]
 800ed1c:	463e      	mov	r6, r7
 800ed1e:	60a5      	str	r5, [r4, #8]
 800ed20:	42be      	cmp	r6, r7
 800ed22:	d900      	bls.n	800ed26 <__ssputs_r+0x72>
 800ed24:	463e      	mov	r6, r7
 800ed26:	4632      	mov	r2, r6
 800ed28:	4641      	mov	r1, r8
 800ed2a:	6820      	ldr	r0, [r4, #0]
 800ed2c:	f7fe fc69 	bl	800d602 <memmove>
 800ed30:	68a3      	ldr	r3, [r4, #8]
 800ed32:	2000      	movs	r0, #0
 800ed34:	1b9b      	subs	r3, r3, r6
 800ed36:	60a3      	str	r3, [r4, #8]
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	4433      	add	r3, r6
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed42:	462a      	mov	r2, r5
 800ed44:	f7fd fe9c 	bl	800ca80 <_realloc_r>
 800ed48:	4606      	mov	r6, r0
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d1e0      	bne.n	800ed10 <__ssputs_r+0x5c>
 800ed4e:	6921      	ldr	r1, [r4, #16]
 800ed50:	4650      	mov	r0, sl
 800ed52:	f7ff fbdb 	bl	800e50c <_free_r>
 800ed56:	230c      	movs	r3, #12
 800ed58:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5c:	f8ca 3000 	str.w	r3, [sl]
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed66:	81a3      	strh	r3, [r4, #12]
 800ed68:	e7e9      	b.n	800ed3e <__ssputs_r+0x8a>
	...

0800ed6c <_svfiprintf_r>:
 800ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed70:	4698      	mov	r8, r3
 800ed72:	898b      	ldrh	r3, [r1, #12]
 800ed74:	b09d      	sub	sp, #116	@ 0x74
 800ed76:	4607      	mov	r7, r0
 800ed78:	061b      	lsls	r3, r3, #24
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	4614      	mov	r4, r2
 800ed7e:	d510      	bpl.n	800eda2 <_svfiprintf_r+0x36>
 800ed80:	690b      	ldr	r3, [r1, #16]
 800ed82:	b973      	cbnz	r3, 800eda2 <_svfiprintf_r+0x36>
 800ed84:	2140      	movs	r1, #64	@ 0x40
 800ed86:	f7fd fdef 	bl	800c968 <_malloc_r>
 800ed8a:	6028      	str	r0, [r5, #0]
 800ed8c:	6128      	str	r0, [r5, #16]
 800ed8e:	b930      	cbnz	r0, 800ed9e <_svfiprintf_r+0x32>
 800ed90:	230c      	movs	r3, #12
 800ed92:	603b      	str	r3, [r7, #0]
 800ed94:	f04f 30ff 	mov.w	r0, #4294967295
 800ed98:	b01d      	add	sp, #116	@ 0x74
 800ed9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9e:	2340      	movs	r3, #64	@ 0x40
 800eda0:	616b      	str	r3, [r5, #20]
 800eda2:	2300      	movs	r3, #0
 800eda4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eda8:	f04f 0901 	mov.w	r9, #1
 800edac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ef50 <_svfiprintf_r+0x1e4>
 800edb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800edb2:	2320      	movs	r3, #32
 800edb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edb8:	2330      	movs	r3, #48	@ 0x30
 800edba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edbe:	4623      	mov	r3, r4
 800edc0:	469a      	mov	sl, r3
 800edc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edc6:	b10a      	cbz	r2, 800edcc <_svfiprintf_r+0x60>
 800edc8:	2a25      	cmp	r2, #37	@ 0x25
 800edca:	d1f9      	bne.n	800edc0 <_svfiprintf_r+0x54>
 800edcc:	ebba 0b04 	subs.w	fp, sl, r4
 800edd0:	d00b      	beq.n	800edea <_svfiprintf_r+0x7e>
 800edd2:	465b      	mov	r3, fp
 800edd4:	4622      	mov	r2, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	4638      	mov	r0, r7
 800edda:	f7ff ff6b 	bl	800ecb4 <__ssputs_r>
 800edde:	3001      	adds	r0, #1
 800ede0:	f000 80a7 	beq.w	800ef32 <_svfiprintf_r+0x1c6>
 800ede4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ede6:	445a      	add	r2, fp
 800ede8:	9209      	str	r2, [sp, #36]	@ 0x24
 800edea:	f89a 3000 	ldrb.w	r3, [sl]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f000 809f 	beq.w	800ef32 <_svfiprintf_r+0x1c6>
 800edf4:	2300      	movs	r3, #0
 800edf6:	f04f 32ff 	mov.w	r2, #4294967295
 800edfa:	f10a 0a01 	add.w	sl, sl, #1
 800edfe:	9304      	str	r3, [sp, #16]
 800ee00:	9307      	str	r3, [sp, #28]
 800ee02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee06:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee0c:	4654      	mov	r4, sl
 800ee0e:	2205      	movs	r2, #5
 800ee10:	484f      	ldr	r0, [pc, #316]	@ (800ef50 <_svfiprintf_r+0x1e4>)
 800ee12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee16:	f7fe fcfc 	bl	800d812 <memchr>
 800ee1a:	9a04      	ldr	r2, [sp, #16]
 800ee1c:	b9d8      	cbnz	r0, 800ee56 <_svfiprintf_r+0xea>
 800ee1e:	06d0      	lsls	r0, r2, #27
 800ee20:	bf44      	itt	mi
 800ee22:	2320      	movmi	r3, #32
 800ee24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee28:	0711      	lsls	r1, r2, #28
 800ee2a:	bf44      	itt	mi
 800ee2c:	232b      	movmi	r3, #43	@ 0x2b
 800ee2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee32:	f89a 3000 	ldrb.w	r3, [sl]
 800ee36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee38:	d015      	beq.n	800ee66 <_svfiprintf_r+0xfa>
 800ee3a:	9a07      	ldr	r2, [sp, #28]
 800ee3c:	4654      	mov	r4, sl
 800ee3e:	2000      	movs	r0, #0
 800ee40:	f04f 0c0a 	mov.w	ip, #10
 800ee44:	4621      	mov	r1, r4
 800ee46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee4a:	3b30      	subs	r3, #48	@ 0x30
 800ee4c:	2b09      	cmp	r3, #9
 800ee4e:	d94b      	bls.n	800eee8 <_svfiprintf_r+0x17c>
 800ee50:	b1b0      	cbz	r0, 800ee80 <_svfiprintf_r+0x114>
 800ee52:	9207      	str	r2, [sp, #28]
 800ee54:	e014      	b.n	800ee80 <_svfiprintf_r+0x114>
 800ee56:	eba0 0308 	sub.w	r3, r0, r8
 800ee5a:	46a2      	mov	sl, r4
 800ee5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ee60:	4313      	orrs	r3, r2
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	e7d2      	b.n	800ee0c <_svfiprintf_r+0xa0>
 800ee66:	9b03      	ldr	r3, [sp, #12]
 800ee68:	1d19      	adds	r1, r3, #4
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	9103      	str	r1, [sp, #12]
 800ee70:	bfbb      	ittet	lt
 800ee72:	425b      	neglt	r3, r3
 800ee74:	f042 0202 	orrlt.w	r2, r2, #2
 800ee78:	9307      	strge	r3, [sp, #28]
 800ee7a:	9307      	strlt	r3, [sp, #28]
 800ee7c:	bfb8      	it	lt
 800ee7e:	9204      	strlt	r2, [sp, #16]
 800ee80:	7823      	ldrb	r3, [r4, #0]
 800ee82:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee84:	d10a      	bne.n	800ee9c <_svfiprintf_r+0x130>
 800ee86:	7863      	ldrb	r3, [r4, #1]
 800ee88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee8a:	d132      	bne.n	800eef2 <_svfiprintf_r+0x186>
 800ee8c:	9b03      	ldr	r3, [sp, #12]
 800ee8e:	3402      	adds	r4, #2
 800ee90:	1d1a      	adds	r2, r3, #4
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee98:	9203      	str	r2, [sp, #12]
 800ee9a:	9305      	str	r3, [sp, #20]
 800ee9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef60 <_svfiprintf_r+0x1f4>
 800eea0:	2203      	movs	r2, #3
 800eea2:	7821      	ldrb	r1, [r4, #0]
 800eea4:	4650      	mov	r0, sl
 800eea6:	f7fe fcb4 	bl	800d812 <memchr>
 800eeaa:	b138      	cbz	r0, 800eebc <_svfiprintf_r+0x150>
 800eeac:	eba0 000a 	sub.w	r0, r0, sl
 800eeb0:	2240      	movs	r2, #64	@ 0x40
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	3401      	adds	r4, #1
 800eeb6:	4082      	lsls	r2, r0
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	9304      	str	r3, [sp, #16]
 800eebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec0:	2206      	movs	r2, #6
 800eec2:	4824      	ldr	r0, [pc, #144]	@ (800ef54 <_svfiprintf_r+0x1e8>)
 800eec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eec8:	f7fe fca3 	bl	800d812 <memchr>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d036      	beq.n	800ef3e <_svfiprintf_r+0x1d2>
 800eed0:	4b21      	ldr	r3, [pc, #132]	@ (800ef58 <_svfiprintf_r+0x1ec>)
 800eed2:	bb1b      	cbnz	r3, 800ef1c <_svfiprintf_r+0x1b0>
 800eed4:	9b03      	ldr	r3, [sp, #12]
 800eed6:	3307      	adds	r3, #7
 800eed8:	f023 0307 	bic.w	r3, r3, #7
 800eedc:	3308      	adds	r3, #8
 800eede:	9303      	str	r3, [sp, #12]
 800eee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee2:	4433      	add	r3, r6
 800eee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eee6:	e76a      	b.n	800edbe <_svfiprintf_r+0x52>
 800eee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeec:	460c      	mov	r4, r1
 800eeee:	2001      	movs	r0, #1
 800eef0:	e7a8      	b.n	800ee44 <_svfiprintf_r+0xd8>
 800eef2:	2300      	movs	r3, #0
 800eef4:	3401      	adds	r4, #1
 800eef6:	f04f 0c0a 	mov.w	ip, #10
 800eefa:	4619      	mov	r1, r3
 800eefc:	9305      	str	r3, [sp, #20]
 800eefe:	4620      	mov	r0, r4
 800ef00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef04:	3a30      	subs	r2, #48	@ 0x30
 800ef06:	2a09      	cmp	r2, #9
 800ef08:	d903      	bls.n	800ef12 <_svfiprintf_r+0x1a6>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0c6      	beq.n	800ee9c <_svfiprintf_r+0x130>
 800ef0e:	9105      	str	r1, [sp, #20]
 800ef10:	e7c4      	b.n	800ee9c <_svfiprintf_r+0x130>
 800ef12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef16:	4604      	mov	r4, r0
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e7f0      	b.n	800eefe <_svfiprintf_r+0x192>
 800ef1c:	ab03      	add	r3, sp, #12
 800ef1e:	462a      	mov	r2, r5
 800ef20:	a904      	add	r1, sp, #16
 800ef22:	4638      	mov	r0, r7
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	4b0d      	ldr	r3, [pc, #52]	@ (800ef5c <_svfiprintf_r+0x1f0>)
 800ef28:	f7fd fe76 	bl	800cc18 <_printf_float>
 800ef2c:	1c42      	adds	r2, r0, #1
 800ef2e:	4606      	mov	r6, r0
 800ef30:	d1d6      	bne.n	800eee0 <_svfiprintf_r+0x174>
 800ef32:	89ab      	ldrh	r3, [r5, #12]
 800ef34:	065b      	lsls	r3, r3, #25
 800ef36:	f53f af2d 	bmi.w	800ed94 <_svfiprintf_r+0x28>
 800ef3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef3c:	e72c      	b.n	800ed98 <_svfiprintf_r+0x2c>
 800ef3e:	ab03      	add	r3, sp, #12
 800ef40:	462a      	mov	r2, r5
 800ef42:	a904      	add	r1, sp, #16
 800ef44:	4638      	mov	r0, r7
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	4b04      	ldr	r3, [pc, #16]	@ (800ef5c <_svfiprintf_r+0x1f0>)
 800ef4a:	f7fe f901 	bl	800d150 <_printf_i>
 800ef4e:	e7ed      	b.n	800ef2c <_svfiprintf_r+0x1c0>
 800ef50:	0801e7aa 	.word	0x0801e7aa
 800ef54:	0801e7b4 	.word	0x0801e7b4
 800ef58:	0800cc19 	.word	0x0800cc19
 800ef5c:	0800ecb5 	.word	0x0800ecb5
 800ef60:	0801e7b0 	.word	0x0801e7b0

0800ef64 <__sflush_r>:
 800ef64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6c:	0716      	lsls	r6, r2, #28
 800ef6e:	4605      	mov	r5, r0
 800ef70:	460c      	mov	r4, r1
 800ef72:	d454      	bmi.n	800f01e <__sflush_r+0xba>
 800ef74:	684b      	ldr	r3, [r1, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	dc02      	bgt.n	800ef80 <__sflush_r+0x1c>
 800ef7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	dd48      	ble.n	800f012 <__sflush_r+0xae>
 800ef80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef82:	2e00      	cmp	r6, #0
 800ef84:	d045      	beq.n	800f012 <__sflush_r+0xae>
 800ef86:	2300      	movs	r3, #0
 800ef88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef8c:	682f      	ldr	r7, [r5, #0]
 800ef8e:	6a21      	ldr	r1, [r4, #32]
 800ef90:	602b      	str	r3, [r5, #0]
 800ef92:	d030      	beq.n	800eff6 <__sflush_r+0x92>
 800ef94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	0759      	lsls	r1, r3, #29
 800ef9a:	d505      	bpl.n	800efa8 <__sflush_r+0x44>
 800ef9c:	6863      	ldr	r3, [r4, #4]
 800ef9e:	1ad2      	subs	r2, r2, r3
 800efa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800efa2:	b10b      	cbz	r3, 800efa8 <__sflush_r+0x44>
 800efa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800efa6:	1ad2      	subs	r2, r2, r3
 800efa8:	2300      	movs	r3, #0
 800efaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800efac:	6a21      	ldr	r1, [r4, #32]
 800efae:	4628      	mov	r0, r5
 800efb0:	47b0      	blx	r6
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	d106      	bne.n	800efc6 <__sflush_r+0x62>
 800efb8:	6829      	ldr	r1, [r5, #0]
 800efba:	291d      	cmp	r1, #29
 800efbc:	d82b      	bhi.n	800f016 <__sflush_r+0xb2>
 800efbe:	4a2a      	ldr	r2, [pc, #168]	@ (800f068 <__sflush_r+0x104>)
 800efc0:	40ca      	lsrs	r2, r1
 800efc2:	07d6      	lsls	r6, r2, #31
 800efc4:	d527      	bpl.n	800f016 <__sflush_r+0xb2>
 800efc6:	2200      	movs	r2, #0
 800efc8:	04d9      	lsls	r1, r3, #19
 800efca:	6062      	str	r2, [r4, #4]
 800efcc:	6922      	ldr	r2, [r4, #16]
 800efce:	6022      	str	r2, [r4, #0]
 800efd0:	d504      	bpl.n	800efdc <__sflush_r+0x78>
 800efd2:	1c42      	adds	r2, r0, #1
 800efd4:	d101      	bne.n	800efda <__sflush_r+0x76>
 800efd6:	682b      	ldr	r3, [r5, #0]
 800efd8:	b903      	cbnz	r3, 800efdc <__sflush_r+0x78>
 800efda:	6560      	str	r0, [r4, #84]	@ 0x54
 800efdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efde:	602f      	str	r7, [r5, #0]
 800efe0:	b1b9      	cbz	r1, 800f012 <__sflush_r+0xae>
 800efe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efe6:	4299      	cmp	r1, r3
 800efe8:	d002      	beq.n	800eff0 <__sflush_r+0x8c>
 800efea:	4628      	mov	r0, r5
 800efec:	f7ff fa8e 	bl	800e50c <_free_r>
 800eff0:	2300      	movs	r3, #0
 800eff2:	6363      	str	r3, [r4, #52]	@ 0x34
 800eff4:	e00d      	b.n	800f012 <__sflush_r+0xae>
 800eff6:	2301      	movs	r3, #1
 800eff8:	4628      	mov	r0, r5
 800effa:	47b0      	blx	r6
 800effc:	4602      	mov	r2, r0
 800effe:	1c50      	adds	r0, r2, #1
 800f000:	d1c9      	bne.n	800ef96 <__sflush_r+0x32>
 800f002:	682b      	ldr	r3, [r5, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d0c6      	beq.n	800ef96 <__sflush_r+0x32>
 800f008:	2b1d      	cmp	r3, #29
 800f00a:	d001      	beq.n	800f010 <__sflush_r+0xac>
 800f00c:	2b16      	cmp	r3, #22
 800f00e:	d11d      	bne.n	800f04c <__sflush_r+0xe8>
 800f010:	602f      	str	r7, [r5, #0]
 800f012:	2000      	movs	r0, #0
 800f014:	e021      	b.n	800f05a <__sflush_r+0xf6>
 800f016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f01a:	b21b      	sxth	r3, r3
 800f01c:	e01a      	b.n	800f054 <__sflush_r+0xf0>
 800f01e:	690f      	ldr	r7, [r1, #16]
 800f020:	2f00      	cmp	r7, #0
 800f022:	d0f6      	beq.n	800f012 <__sflush_r+0xae>
 800f024:	0793      	lsls	r3, r2, #30
 800f026:	680e      	ldr	r6, [r1, #0]
 800f028:	600f      	str	r7, [r1, #0]
 800f02a:	bf0c      	ite	eq
 800f02c:	694b      	ldreq	r3, [r1, #20]
 800f02e:	2300      	movne	r3, #0
 800f030:	eba6 0807 	sub.w	r8, r6, r7
 800f034:	608b      	str	r3, [r1, #8]
 800f036:	f1b8 0f00 	cmp.w	r8, #0
 800f03a:	ddea      	ble.n	800f012 <__sflush_r+0xae>
 800f03c:	4643      	mov	r3, r8
 800f03e:	463a      	mov	r2, r7
 800f040:	6a21      	ldr	r1, [r4, #32]
 800f042:	4628      	mov	r0, r5
 800f044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f046:	47b0      	blx	r6
 800f048:	2800      	cmp	r0, #0
 800f04a:	dc08      	bgt.n	800f05e <__sflush_r+0xfa>
 800f04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f054:	f04f 30ff 	mov.w	r0, #4294967295
 800f058:	81a3      	strh	r3, [r4, #12]
 800f05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f05e:	4407      	add	r7, r0
 800f060:	eba8 0800 	sub.w	r8, r8, r0
 800f064:	e7e7      	b.n	800f036 <__sflush_r+0xd2>
 800f066:	bf00      	nop
 800f068:	20400001 	.word	0x20400001

0800f06c <_fflush_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	690b      	ldr	r3, [r1, #16]
 800f070:	4605      	mov	r5, r0
 800f072:	460c      	mov	r4, r1
 800f074:	b913      	cbnz	r3, 800f07c <_fflush_r+0x10>
 800f076:	2500      	movs	r5, #0
 800f078:	4628      	mov	r0, r5
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	b118      	cbz	r0, 800f086 <_fflush_r+0x1a>
 800f07e:	6a03      	ldr	r3, [r0, #32]
 800f080:	b90b      	cbnz	r3, 800f086 <_fflush_r+0x1a>
 800f082:	f7fe fa0f 	bl	800d4a4 <__sinit>
 800f086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d0f3      	beq.n	800f076 <_fflush_r+0xa>
 800f08e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f090:	07d0      	lsls	r0, r2, #31
 800f092:	d404      	bmi.n	800f09e <_fflush_r+0x32>
 800f094:	0599      	lsls	r1, r3, #22
 800f096:	d402      	bmi.n	800f09e <_fflush_r+0x32>
 800f098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f09a:	f7fe fbb8 	bl	800d80e <__retarget_lock_acquire_recursive>
 800f09e:	4628      	mov	r0, r5
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	f7ff ff5f 	bl	800ef64 <__sflush_r>
 800f0a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	07da      	lsls	r2, r3, #31
 800f0ac:	d4e4      	bmi.n	800f078 <_fflush_r+0xc>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	059b      	lsls	r3, r3, #22
 800f0b2:	d4e1      	bmi.n	800f078 <_fflush_r+0xc>
 800f0b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0b6:	f7fe fbab 	bl	800d810 <__retarget_lock_release_recursive>
 800f0ba:	e7dd      	b.n	800f078 <_fflush_r+0xc>

0800f0bc <__assert_func>:
 800f0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0be:	4614      	mov	r4, r2
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4b09      	ldr	r3, [pc, #36]	@ (800f0e8 <__assert_func+0x2c>)
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	68d8      	ldr	r0, [r3, #12]
 800f0ca:	b14c      	cbz	r4, 800f0e0 <__assert_func+0x24>
 800f0cc:	4b07      	ldr	r3, [pc, #28]	@ (800f0ec <__assert_func+0x30>)
 800f0ce:	9100      	str	r1, [sp, #0]
 800f0d0:	4907      	ldr	r1, [pc, #28]	@ (800f0f0 <__assert_func+0x34>)
 800f0d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0d6:	462b      	mov	r3, r5
 800f0d8:	f000 f842 	bl	800f160 <fiprintf>
 800f0dc:	f000 f852 	bl	800f184 <abort>
 800f0e0:	4b04      	ldr	r3, [pc, #16]	@ (800f0f4 <__assert_func+0x38>)
 800f0e2:	461c      	mov	r4, r3
 800f0e4:	e7f3      	b.n	800f0ce <__assert_func+0x12>
 800f0e6:	bf00      	nop
 800f0e8:	20000f88 	.word	0x20000f88
 800f0ec:	0801e7c5 	.word	0x0801e7c5
 800f0f0:	0801e7d2 	.word	0x0801e7d2
 800f0f4:	0801e800 	.word	0x0801e800

0800f0f8 <_calloc_r>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	fba1 5402 	umull	r5, r4, r1, r2
 800f0fe:	b934      	cbnz	r4, 800f10e <_calloc_r+0x16>
 800f100:	4629      	mov	r1, r5
 800f102:	f7fd fc31 	bl	800c968 <_malloc_r>
 800f106:	4606      	mov	r6, r0
 800f108:	b928      	cbnz	r0, 800f116 <_calloc_r+0x1e>
 800f10a:	4630      	mov	r0, r6
 800f10c:	bd70      	pop	{r4, r5, r6, pc}
 800f10e:	220c      	movs	r2, #12
 800f110:	2600      	movs	r6, #0
 800f112:	6002      	str	r2, [r0, #0]
 800f114:	e7f9      	b.n	800f10a <_calloc_r+0x12>
 800f116:	462a      	mov	r2, r5
 800f118:	4621      	mov	r1, r4
 800f11a:	f7fe fa8c 	bl	800d636 <memset>
 800f11e:	e7f4      	b.n	800f10a <_calloc_r+0x12>

0800f120 <__ascii_mbtowc>:
 800f120:	b082      	sub	sp, #8
 800f122:	b901      	cbnz	r1, 800f126 <__ascii_mbtowc+0x6>
 800f124:	a901      	add	r1, sp, #4
 800f126:	b142      	cbz	r2, 800f13a <__ascii_mbtowc+0x1a>
 800f128:	b14b      	cbz	r3, 800f13e <__ascii_mbtowc+0x1e>
 800f12a:	7813      	ldrb	r3, [r2, #0]
 800f12c:	600b      	str	r3, [r1, #0]
 800f12e:	7812      	ldrb	r2, [r2, #0]
 800f130:	1e10      	subs	r0, r2, #0
 800f132:	bf18      	it	ne
 800f134:	2001      	movne	r0, #1
 800f136:	b002      	add	sp, #8
 800f138:	4770      	bx	lr
 800f13a:	4610      	mov	r0, r2
 800f13c:	e7fb      	b.n	800f136 <__ascii_mbtowc+0x16>
 800f13e:	f06f 0001 	mvn.w	r0, #1
 800f142:	e7f8      	b.n	800f136 <__ascii_mbtowc+0x16>

0800f144 <__ascii_wctomb>:
 800f144:	4603      	mov	r3, r0
 800f146:	4608      	mov	r0, r1
 800f148:	b141      	cbz	r1, 800f15c <__ascii_wctomb+0x18>
 800f14a:	2aff      	cmp	r2, #255	@ 0xff
 800f14c:	d904      	bls.n	800f158 <__ascii_wctomb+0x14>
 800f14e:	228a      	movs	r2, #138	@ 0x8a
 800f150:	f04f 30ff 	mov.w	r0, #4294967295
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	4770      	bx	lr
 800f158:	2001      	movs	r0, #1
 800f15a:	700a      	strb	r2, [r1, #0]
 800f15c:	4770      	bx	lr
	...

0800f160 <fiprintf>:
 800f160:	b40e      	push	{r1, r2, r3}
 800f162:	b503      	push	{r0, r1, lr}
 800f164:	ab03      	add	r3, sp, #12
 800f166:	4601      	mov	r1, r0
 800f168:	4805      	ldr	r0, [pc, #20]	@ (800f180 <fiprintf+0x20>)
 800f16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f16e:	6800      	ldr	r0, [r0, #0]
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	f000 f837 	bl	800f1e4 <_vfiprintf_r>
 800f176:	b002      	add	sp, #8
 800f178:	f85d eb04 	ldr.w	lr, [sp], #4
 800f17c:	b003      	add	sp, #12
 800f17e:	4770      	bx	lr
 800f180:	20000f88 	.word	0x20000f88

0800f184 <abort>:
 800f184:	2006      	movs	r0, #6
 800f186:	b508      	push	{r3, lr}
 800f188:	f000 fa00 	bl	800f58c <raise>
 800f18c:	2001      	movs	r0, #1
 800f18e:	f000 faeb 	bl	800f768 <_exit>

0800f192 <__sfputc_r>:
 800f192:	6893      	ldr	r3, [r2, #8]
 800f194:	3b01      	subs	r3, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	b410      	push	{r4}
 800f19a:	6093      	str	r3, [r2, #8]
 800f19c:	da08      	bge.n	800f1b0 <__sfputc_r+0x1e>
 800f19e:	6994      	ldr	r4, [r2, #24]
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	db01      	blt.n	800f1a8 <__sfputc_r+0x16>
 800f1a4:	290a      	cmp	r1, #10
 800f1a6:	d103      	bne.n	800f1b0 <__sfputc_r+0x1e>
 800f1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ac:	f000 b932 	b.w	800f414 <__swbuf_r>
 800f1b0:	6813      	ldr	r3, [r2, #0]
 800f1b2:	1c58      	adds	r0, r3, #1
 800f1b4:	6010      	str	r0, [r2, #0]
 800f1b6:	4608      	mov	r0, r1
 800f1b8:	7019      	strb	r1, [r3, #0]
 800f1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <__sfputs_r>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460f      	mov	r7, r1
 800f1c6:	4614      	mov	r4, r2
 800f1c8:	18d5      	adds	r5, r2, r3
 800f1ca:	42ac      	cmp	r4, r5
 800f1cc:	d101      	bne.n	800f1d2 <__sfputs_r+0x12>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	e007      	b.n	800f1e2 <__sfputs_r+0x22>
 800f1d2:	463a      	mov	r2, r7
 800f1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff ffda 	bl	800f192 <__sfputc_r>
 800f1de:	1c43      	adds	r3, r0, #1
 800f1e0:	d1f3      	bne.n	800f1ca <__sfputs_r+0xa>
 800f1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1e4 <_vfiprintf_r>:
 800f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	460d      	mov	r5, r1
 800f1ea:	b09d      	sub	sp, #116	@ 0x74
 800f1ec:	4614      	mov	r4, r2
 800f1ee:	4698      	mov	r8, r3
 800f1f0:	4606      	mov	r6, r0
 800f1f2:	b118      	cbz	r0, 800f1fc <_vfiprintf_r+0x18>
 800f1f4:	6a03      	ldr	r3, [r0, #32]
 800f1f6:	b90b      	cbnz	r3, 800f1fc <_vfiprintf_r+0x18>
 800f1f8:	f7fe f954 	bl	800d4a4 <__sinit>
 800f1fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1fe:	07d9      	lsls	r1, r3, #31
 800f200:	d405      	bmi.n	800f20e <_vfiprintf_r+0x2a>
 800f202:	89ab      	ldrh	r3, [r5, #12]
 800f204:	059a      	lsls	r2, r3, #22
 800f206:	d402      	bmi.n	800f20e <_vfiprintf_r+0x2a>
 800f208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f20a:	f7fe fb00 	bl	800d80e <__retarget_lock_acquire_recursive>
 800f20e:	89ab      	ldrh	r3, [r5, #12]
 800f210:	071b      	lsls	r3, r3, #28
 800f212:	d501      	bpl.n	800f218 <_vfiprintf_r+0x34>
 800f214:	692b      	ldr	r3, [r5, #16]
 800f216:	b99b      	cbnz	r3, 800f240 <_vfiprintf_r+0x5c>
 800f218:	4629      	mov	r1, r5
 800f21a:	4630      	mov	r0, r6
 800f21c:	f000 f938 	bl	800f490 <__swsetup_r>
 800f220:	b170      	cbz	r0, 800f240 <_vfiprintf_r+0x5c>
 800f222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f224:	07dc      	lsls	r4, r3, #31
 800f226:	d504      	bpl.n	800f232 <_vfiprintf_r+0x4e>
 800f228:	f04f 30ff 	mov.w	r0, #4294967295
 800f22c:	b01d      	add	sp, #116	@ 0x74
 800f22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f232:	89ab      	ldrh	r3, [r5, #12]
 800f234:	0598      	lsls	r0, r3, #22
 800f236:	d4f7      	bmi.n	800f228 <_vfiprintf_r+0x44>
 800f238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f23a:	f7fe fae9 	bl	800d810 <__retarget_lock_release_recursive>
 800f23e:	e7f3      	b.n	800f228 <_vfiprintf_r+0x44>
 800f240:	2300      	movs	r3, #0
 800f242:	f8cd 800c 	str.w	r8, [sp, #12]
 800f246:	f04f 0901 	mov.w	r9, #1
 800f24a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f400 <_vfiprintf_r+0x21c>
 800f24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f250:	2320      	movs	r3, #32
 800f252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f256:	2330      	movs	r3, #48	@ 0x30
 800f258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f25c:	4623      	mov	r3, r4
 800f25e:	469a      	mov	sl, r3
 800f260:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f264:	b10a      	cbz	r2, 800f26a <_vfiprintf_r+0x86>
 800f266:	2a25      	cmp	r2, #37	@ 0x25
 800f268:	d1f9      	bne.n	800f25e <_vfiprintf_r+0x7a>
 800f26a:	ebba 0b04 	subs.w	fp, sl, r4
 800f26e:	d00b      	beq.n	800f288 <_vfiprintf_r+0xa4>
 800f270:	465b      	mov	r3, fp
 800f272:	4622      	mov	r2, r4
 800f274:	4629      	mov	r1, r5
 800f276:	4630      	mov	r0, r6
 800f278:	f7ff ffa2 	bl	800f1c0 <__sfputs_r>
 800f27c:	3001      	adds	r0, #1
 800f27e:	f000 80a7 	beq.w	800f3d0 <_vfiprintf_r+0x1ec>
 800f282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f284:	445a      	add	r2, fp
 800f286:	9209      	str	r2, [sp, #36]	@ 0x24
 800f288:	f89a 3000 	ldrb.w	r3, [sl]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f000 809f 	beq.w	800f3d0 <_vfiprintf_r+0x1ec>
 800f292:	2300      	movs	r3, #0
 800f294:	f04f 32ff 	mov.w	r2, #4294967295
 800f298:	f10a 0a01 	add.w	sl, sl, #1
 800f29c:	9304      	str	r3, [sp, #16]
 800f29e:	9307      	str	r3, [sp, #28]
 800f2a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2aa:	4654      	mov	r4, sl
 800f2ac:	2205      	movs	r2, #5
 800f2ae:	4854      	ldr	r0, [pc, #336]	@ (800f400 <_vfiprintf_r+0x21c>)
 800f2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b4:	f7fe faad 	bl	800d812 <memchr>
 800f2b8:	9a04      	ldr	r2, [sp, #16]
 800f2ba:	b9d8      	cbnz	r0, 800f2f4 <_vfiprintf_r+0x110>
 800f2bc:	06d1      	lsls	r1, r2, #27
 800f2be:	bf44      	itt	mi
 800f2c0:	2320      	movmi	r3, #32
 800f2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2c6:	0713      	lsls	r3, r2, #28
 800f2c8:	bf44      	itt	mi
 800f2ca:	232b      	movmi	r3, #43	@ 0x2b
 800f2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2d6:	d015      	beq.n	800f304 <_vfiprintf_r+0x120>
 800f2d8:	9a07      	ldr	r2, [sp, #28]
 800f2da:	4654      	mov	r4, sl
 800f2dc:	2000      	movs	r0, #0
 800f2de:	f04f 0c0a 	mov.w	ip, #10
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2e8:	3b30      	subs	r3, #48	@ 0x30
 800f2ea:	2b09      	cmp	r3, #9
 800f2ec:	d94b      	bls.n	800f386 <_vfiprintf_r+0x1a2>
 800f2ee:	b1b0      	cbz	r0, 800f31e <_vfiprintf_r+0x13a>
 800f2f0:	9207      	str	r2, [sp, #28]
 800f2f2:	e014      	b.n	800f31e <_vfiprintf_r+0x13a>
 800f2f4:	eba0 0308 	sub.w	r3, r0, r8
 800f2f8:	46a2      	mov	sl, r4
 800f2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f2fe:	4313      	orrs	r3, r2
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	e7d2      	b.n	800f2aa <_vfiprintf_r+0xc6>
 800f304:	9b03      	ldr	r3, [sp, #12]
 800f306:	1d19      	adds	r1, r3, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	9103      	str	r1, [sp, #12]
 800f30e:	bfbb      	ittet	lt
 800f310:	425b      	neglt	r3, r3
 800f312:	f042 0202 	orrlt.w	r2, r2, #2
 800f316:	9307      	strge	r3, [sp, #28]
 800f318:	9307      	strlt	r3, [sp, #28]
 800f31a:	bfb8      	it	lt
 800f31c:	9204      	strlt	r2, [sp, #16]
 800f31e:	7823      	ldrb	r3, [r4, #0]
 800f320:	2b2e      	cmp	r3, #46	@ 0x2e
 800f322:	d10a      	bne.n	800f33a <_vfiprintf_r+0x156>
 800f324:	7863      	ldrb	r3, [r4, #1]
 800f326:	2b2a      	cmp	r3, #42	@ 0x2a
 800f328:	d132      	bne.n	800f390 <_vfiprintf_r+0x1ac>
 800f32a:	9b03      	ldr	r3, [sp, #12]
 800f32c:	3402      	adds	r4, #2
 800f32e:	1d1a      	adds	r2, r3, #4
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f336:	9203      	str	r2, [sp, #12]
 800f338:	9305      	str	r3, [sp, #20]
 800f33a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f410 <_vfiprintf_r+0x22c>
 800f33e:	2203      	movs	r2, #3
 800f340:	7821      	ldrb	r1, [r4, #0]
 800f342:	4650      	mov	r0, sl
 800f344:	f7fe fa65 	bl	800d812 <memchr>
 800f348:	b138      	cbz	r0, 800f35a <_vfiprintf_r+0x176>
 800f34a:	eba0 000a 	sub.w	r0, r0, sl
 800f34e:	2240      	movs	r2, #64	@ 0x40
 800f350:	9b04      	ldr	r3, [sp, #16]
 800f352:	3401      	adds	r4, #1
 800f354:	4082      	lsls	r2, r0
 800f356:	4313      	orrs	r3, r2
 800f358:	9304      	str	r3, [sp, #16]
 800f35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35e:	2206      	movs	r2, #6
 800f360:	4828      	ldr	r0, [pc, #160]	@ (800f404 <_vfiprintf_r+0x220>)
 800f362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f366:	f7fe fa54 	bl	800d812 <memchr>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d03f      	beq.n	800f3ee <_vfiprintf_r+0x20a>
 800f36e:	4b26      	ldr	r3, [pc, #152]	@ (800f408 <_vfiprintf_r+0x224>)
 800f370:	bb1b      	cbnz	r3, 800f3ba <_vfiprintf_r+0x1d6>
 800f372:	9b03      	ldr	r3, [sp, #12]
 800f374:	3307      	adds	r3, #7
 800f376:	f023 0307 	bic.w	r3, r3, #7
 800f37a:	3308      	adds	r3, #8
 800f37c:	9303      	str	r3, [sp, #12]
 800f37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f380:	443b      	add	r3, r7
 800f382:	9309      	str	r3, [sp, #36]	@ 0x24
 800f384:	e76a      	b.n	800f25c <_vfiprintf_r+0x78>
 800f386:	fb0c 3202 	mla	r2, ip, r2, r3
 800f38a:	460c      	mov	r4, r1
 800f38c:	2001      	movs	r0, #1
 800f38e:	e7a8      	b.n	800f2e2 <_vfiprintf_r+0xfe>
 800f390:	2300      	movs	r3, #0
 800f392:	3401      	adds	r4, #1
 800f394:	f04f 0c0a 	mov.w	ip, #10
 800f398:	4619      	mov	r1, r3
 800f39a:	9305      	str	r3, [sp, #20]
 800f39c:	4620      	mov	r0, r4
 800f39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3a2:	3a30      	subs	r2, #48	@ 0x30
 800f3a4:	2a09      	cmp	r2, #9
 800f3a6:	d903      	bls.n	800f3b0 <_vfiprintf_r+0x1cc>
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d0c6      	beq.n	800f33a <_vfiprintf_r+0x156>
 800f3ac:	9105      	str	r1, [sp, #20]
 800f3ae:	e7c4      	b.n	800f33a <_vfiprintf_r+0x156>
 800f3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e7f0      	b.n	800f39c <_vfiprintf_r+0x1b8>
 800f3ba:	ab03      	add	r3, sp, #12
 800f3bc:	462a      	mov	r2, r5
 800f3be:	a904      	add	r1, sp, #16
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4b11      	ldr	r3, [pc, #68]	@ (800f40c <_vfiprintf_r+0x228>)
 800f3c6:	f7fd fc27 	bl	800cc18 <_printf_float>
 800f3ca:	4607      	mov	r7, r0
 800f3cc:	1c78      	adds	r0, r7, #1
 800f3ce:	d1d6      	bne.n	800f37e <_vfiprintf_r+0x19a>
 800f3d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3d2:	07d9      	lsls	r1, r3, #31
 800f3d4:	d405      	bmi.n	800f3e2 <_vfiprintf_r+0x1fe>
 800f3d6:	89ab      	ldrh	r3, [r5, #12]
 800f3d8:	059a      	lsls	r2, r3, #22
 800f3da:	d402      	bmi.n	800f3e2 <_vfiprintf_r+0x1fe>
 800f3dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3de:	f7fe fa17 	bl	800d810 <__retarget_lock_release_recursive>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	065b      	lsls	r3, r3, #25
 800f3e6:	f53f af1f 	bmi.w	800f228 <_vfiprintf_r+0x44>
 800f3ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3ec:	e71e      	b.n	800f22c <_vfiprintf_r+0x48>
 800f3ee:	ab03      	add	r3, sp, #12
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	a904      	add	r1, sp, #16
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	4b04      	ldr	r3, [pc, #16]	@ (800f40c <_vfiprintf_r+0x228>)
 800f3fa:	f7fd fea9 	bl	800d150 <_printf_i>
 800f3fe:	e7e4      	b.n	800f3ca <_vfiprintf_r+0x1e6>
 800f400:	0801e7aa 	.word	0x0801e7aa
 800f404:	0801e7b4 	.word	0x0801e7b4
 800f408:	0800cc19 	.word	0x0800cc19
 800f40c:	0800f1c1 	.word	0x0800f1c1
 800f410:	0801e7b0 	.word	0x0801e7b0

0800f414 <__swbuf_r>:
 800f414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f416:	460e      	mov	r6, r1
 800f418:	4614      	mov	r4, r2
 800f41a:	4605      	mov	r5, r0
 800f41c:	b118      	cbz	r0, 800f426 <__swbuf_r+0x12>
 800f41e:	6a03      	ldr	r3, [r0, #32]
 800f420:	b90b      	cbnz	r3, 800f426 <__swbuf_r+0x12>
 800f422:	f7fe f83f 	bl	800d4a4 <__sinit>
 800f426:	69a3      	ldr	r3, [r4, #24]
 800f428:	60a3      	str	r3, [r4, #8]
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	071a      	lsls	r2, r3, #28
 800f42e:	d501      	bpl.n	800f434 <__swbuf_r+0x20>
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	b943      	cbnz	r3, 800f446 <__swbuf_r+0x32>
 800f434:	4621      	mov	r1, r4
 800f436:	4628      	mov	r0, r5
 800f438:	f000 f82a 	bl	800f490 <__swsetup_r>
 800f43c:	b118      	cbz	r0, 800f446 <__swbuf_r+0x32>
 800f43e:	f04f 37ff 	mov.w	r7, #4294967295
 800f442:	4638      	mov	r0, r7
 800f444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	b2f6      	uxtb	r6, r6
 800f44a:	6922      	ldr	r2, [r4, #16]
 800f44c:	4637      	mov	r7, r6
 800f44e:	1a98      	subs	r0, r3, r2
 800f450:	6963      	ldr	r3, [r4, #20]
 800f452:	4283      	cmp	r3, r0
 800f454:	dc05      	bgt.n	800f462 <__swbuf_r+0x4e>
 800f456:	4621      	mov	r1, r4
 800f458:	4628      	mov	r0, r5
 800f45a:	f7ff fe07 	bl	800f06c <_fflush_r>
 800f45e:	2800      	cmp	r0, #0
 800f460:	d1ed      	bne.n	800f43e <__swbuf_r+0x2a>
 800f462:	68a3      	ldr	r3, [r4, #8]
 800f464:	3b01      	subs	r3, #1
 800f466:	60a3      	str	r3, [r4, #8]
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	6022      	str	r2, [r4, #0]
 800f46e:	701e      	strb	r6, [r3, #0]
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	6962      	ldr	r2, [r4, #20]
 800f474:	429a      	cmp	r2, r3
 800f476:	d004      	beq.n	800f482 <__swbuf_r+0x6e>
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	07db      	lsls	r3, r3, #31
 800f47c:	d5e1      	bpl.n	800f442 <__swbuf_r+0x2e>
 800f47e:	2e0a      	cmp	r6, #10
 800f480:	d1df      	bne.n	800f442 <__swbuf_r+0x2e>
 800f482:	4621      	mov	r1, r4
 800f484:	4628      	mov	r0, r5
 800f486:	f7ff fdf1 	bl	800f06c <_fflush_r>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d0d9      	beq.n	800f442 <__swbuf_r+0x2e>
 800f48e:	e7d6      	b.n	800f43e <__swbuf_r+0x2a>

0800f490 <__swsetup_r>:
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	4b29      	ldr	r3, [pc, #164]	@ (800f538 <__swsetup_r+0xa8>)
 800f494:	4605      	mov	r5, r0
 800f496:	460c      	mov	r4, r1
 800f498:	6818      	ldr	r0, [r3, #0]
 800f49a:	b118      	cbz	r0, 800f4a4 <__swsetup_r+0x14>
 800f49c:	6a03      	ldr	r3, [r0, #32]
 800f49e:	b90b      	cbnz	r3, 800f4a4 <__swsetup_r+0x14>
 800f4a0:	f7fe f800 	bl	800d4a4 <__sinit>
 800f4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a8:	0719      	lsls	r1, r3, #28
 800f4aa:	d422      	bmi.n	800f4f2 <__swsetup_r+0x62>
 800f4ac:	06da      	lsls	r2, r3, #27
 800f4ae:	d407      	bmi.n	800f4c0 <__swsetup_r+0x30>
 800f4b0:	2209      	movs	r2, #9
 800f4b2:	602a      	str	r2, [r5, #0]
 800f4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4bc:	81a3      	strh	r3, [r4, #12]
 800f4be:	e033      	b.n	800f528 <__swsetup_r+0x98>
 800f4c0:	0758      	lsls	r0, r3, #29
 800f4c2:	d512      	bpl.n	800f4ea <__swsetup_r+0x5a>
 800f4c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4c6:	b141      	cbz	r1, 800f4da <__swsetup_r+0x4a>
 800f4c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4cc:	4299      	cmp	r1, r3
 800f4ce:	d002      	beq.n	800f4d6 <__swsetup_r+0x46>
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	f7ff f81b 	bl	800e50c <_free_r>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4e0:	81a3      	strh	r3, [r4, #12]
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	6063      	str	r3, [r4, #4]
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	6023      	str	r3, [r4, #0]
 800f4ea:	89a3      	ldrh	r3, [r4, #12]
 800f4ec:	f043 0308 	orr.w	r3, r3, #8
 800f4f0:	81a3      	strh	r3, [r4, #12]
 800f4f2:	6923      	ldr	r3, [r4, #16]
 800f4f4:	b94b      	cbnz	r3, 800f50a <__swsetup_r+0x7a>
 800f4f6:	89a3      	ldrh	r3, [r4, #12]
 800f4f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f500:	d003      	beq.n	800f50a <__swsetup_r+0x7a>
 800f502:	4621      	mov	r1, r4
 800f504:	4628      	mov	r0, r5
 800f506:	f000 f882 	bl	800f60e <__smakebuf_r>
 800f50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f50e:	f013 0201 	ands.w	r2, r3, #1
 800f512:	d00a      	beq.n	800f52a <__swsetup_r+0x9a>
 800f514:	2200      	movs	r2, #0
 800f516:	60a2      	str	r2, [r4, #8]
 800f518:	6962      	ldr	r2, [r4, #20]
 800f51a:	4252      	negs	r2, r2
 800f51c:	61a2      	str	r2, [r4, #24]
 800f51e:	6922      	ldr	r2, [r4, #16]
 800f520:	b942      	cbnz	r2, 800f534 <__swsetup_r+0xa4>
 800f522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f526:	d1c5      	bne.n	800f4b4 <__swsetup_r+0x24>
 800f528:	bd38      	pop	{r3, r4, r5, pc}
 800f52a:	0799      	lsls	r1, r3, #30
 800f52c:	bf58      	it	pl
 800f52e:	6962      	ldrpl	r2, [r4, #20]
 800f530:	60a2      	str	r2, [r4, #8]
 800f532:	e7f4      	b.n	800f51e <__swsetup_r+0x8e>
 800f534:	2000      	movs	r0, #0
 800f536:	e7f7      	b.n	800f528 <__swsetup_r+0x98>
 800f538:	20000f88 	.word	0x20000f88

0800f53c <_raise_r>:
 800f53c:	291f      	cmp	r1, #31
 800f53e:	b538      	push	{r3, r4, r5, lr}
 800f540:	4605      	mov	r5, r0
 800f542:	460c      	mov	r4, r1
 800f544:	d904      	bls.n	800f550 <_raise_r+0x14>
 800f546:	2316      	movs	r3, #22
 800f548:	6003      	str	r3, [r0, #0]
 800f54a:	f04f 30ff 	mov.w	r0, #4294967295
 800f54e:	bd38      	pop	{r3, r4, r5, pc}
 800f550:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f552:	b112      	cbz	r2, 800f55a <_raise_r+0x1e>
 800f554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f558:	b94b      	cbnz	r3, 800f56e <_raise_r+0x32>
 800f55a:	4628      	mov	r0, r5
 800f55c:	f000 f830 	bl	800f5c0 <_getpid_r>
 800f560:	4622      	mov	r2, r4
 800f562:	4601      	mov	r1, r0
 800f564:	4628      	mov	r0, r5
 800f566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f56a:	f000 b817 	b.w	800f59c <_kill_r>
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d00a      	beq.n	800f588 <_raise_r+0x4c>
 800f572:	1c59      	adds	r1, r3, #1
 800f574:	d103      	bne.n	800f57e <_raise_r+0x42>
 800f576:	2316      	movs	r3, #22
 800f578:	6003      	str	r3, [r0, #0]
 800f57a:	2001      	movs	r0, #1
 800f57c:	e7e7      	b.n	800f54e <_raise_r+0x12>
 800f57e:	2100      	movs	r1, #0
 800f580:	4620      	mov	r0, r4
 800f582:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f586:	4798      	blx	r3
 800f588:	2000      	movs	r0, #0
 800f58a:	e7e0      	b.n	800f54e <_raise_r+0x12>

0800f58c <raise>:
 800f58c:	4b02      	ldr	r3, [pc, #8]	@ (800f598 <raise+0xc>)
 800f58e:	4601      	mov	r1, r0
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	f7ff bfd3 	b.w	800f53c <_raise_r>
 800f596:	bf00      	nop
 800f598:	20000f88 	.word	0x20000f88

0800f59c <_kill_r>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	2300      	movs	r3, #0
 800f5a0:	4d06      	ldr	r5, [pc, #24]	@ (800f5bc <_kill_r+0x20>)
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	4608      	mov	r0, r1
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	602b      	str	r3, [r5, #0]
 800f5aa:	f000 f8af 	bl	800f70c <_kill>
 800f5ae:	1c43      	adds	r3, r0, #1
 800f5b0:	d102      	bne.n	800f5b8 <_kill_r+0x1c>
 800f5b2:	682b      	ldr	r3, [r5, #0]
 800f5b4:	b103      	cbz	r3, 800f5b8 <_kill_r+0x1c>
 800f5b6:	6023      	str	r3, [r4, #0]
 800f5b8:	bd38      	pop	{r3, r4, r5, pc}
 800f5ba:	bf00      	nop
 800f5bc:	2007b0b4 	.word	0x2007b0b4

0800f5c0 <_getpid_r>:
 800f5c0:	f000 b894 	b.w	800f6ec <_getpid>

0800f5c4 <__swhatbuf_r>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5cc:	b096      	sub	sp, #88	@ 0x58
 800f5ce:	4615      	mov	r5, r2
 800f5d0:	2900      	cmp	r1, #0
 800f5d2:	461e      	mov	r6, r3
 800f5d4:	da0c      	bge.n	800f5f0 <__swhatbuf_r+0x2c>
 800f5d6:	89a3      	ldrh	r3, [r4, #12]
 800f5d8:	2100      	movs	r1, #0
 800f5da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5de:	bf14      	ite	ne
 800f5e0:	2340      	movne	r3, #64	@ 0x40
 800f5e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	6031      	str	r1, [r6, #0]
 800f5ea:	602b      	str	r3, [r5, #0]
 800f5ec:	b016      	add	sp, #88	@ 0x58
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}
 800f5f0:	466a      	mov	r2, sp
 800f5f2:	f000 f849 	bl	800f688 <_fstat_r>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	dbed      	blt.n	800f5d6 <__swhatbuf_r+0x12>
 800f5fa:	9901      	ldr	r1, [sp, #4]
 800f5fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f600:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f604:	4259      	negs	r1, r3
 800f606:	4159      	adcs	r1, r3
 800f608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f60c:	e7eb      	b.n	800f5e6 <__swhatbuf_r+0x22>

0800f60e <__smakebuf_r>:
 800f60e:	898b      	ldrh	r3, [r1, #12]
 800f610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f612:	079d      	lsls	r5, r3, #30
 800f614:	4606      	mov	r6, r0
 800f616:	460c      	mov	r4, r1
 800f618:	d507      	bpl.n	800f62a <__smakebuf_r+0x1c>
 800f61a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	2301      	movs	r3, #1
 800f624:	6163      	str	r3, [r4, #20]
 800f626:	b003      	add	sp, #12
 800f628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f62a:	ab01      	add	r3, sp, #4
 800f62c:	466a      	mov	r2, sp
 800f62e:	f7ff ffc9 	bl	800f5c4 <__swhatbuf_r>
 800f632:	9f00      	ldr	r7, [sp, #0]
 800f634:	4605      	mov	r5, r0
 800f636:	4630      	mov	r0, r6
 800f638:	4639      	mov	r1, r7
 800f63a:	f7fd f995 	bl	800c968 <_malloc_r>
 800f63e:	b948      	cbnz	r0, 800f654 <__smakebuf_r+0x46>
 800f640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f644:	059a      	lsls	r2, r3, #22
 800f646:	d4ee      	bmi.n	800f626 <__smakebuf_r+0x18>
 800f648:	f023 0303 	bic.w	r3, r3, #3
 800f64c:	f043 0302 	orr.w	r3, r3, #2
 800f650:	81a3      	strh	r3, [r4, #12]
 800f652:	e7e2      	b.n	800f61a <__smakebuf_r+0xc>
 800f654:	89a3      	ldrh	r3, [r4, #12]
 800f656:	6020      	str	r0, [r4, #0]
 800f658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f65c:	81a3      	strh	r3, [r4, #12]
 800f65e:	9b01      	ldr	r3, [sp, #4]
 800f660:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f664:	b15b      	cbz	r3, 800f67e <__smakebuf_r+0x70>
 800f666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f66a:	4630      	mov	r0, r6
 800f66c:	f000 f81e 	bl	800f6ac <_isatty_r>
 800f670:	b128      	cbz	r0, 800f67e <__smakebuf_r+0x70>
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	f023 0303 	bic.w	r3, r3, #3
 800f678:	f043 0301 	orr.w	r3, r3, #1
 800f67c:	81a3      	strh	r3, [r4, #12]
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	431d      	orrs	r5, r3
 800f682:	81a5      	strh	r5, [r4, #12]
 800f684:	e7cf      	b.n	800f626 <__smakebuf_r+0x18>
	...

0800f688 <_fstat_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	2300      	movs	r3, #0
 800f68c:	4d06      	ldr	r5, [pc, #24]	@ (800f6a8 <_fstat_r+0x20>)
 800f68e:	4604      	mov	r4, r0
 800f690:	4608      	mov	r0, r1
 800f692:	4611      	mov	r1, r2
 800f694:	602b      	str	r3, [r5, #0]
 800f696:	f000 f821 	bl	800f6dc <_fstat>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	d102      	bne.n	800f6a4 <_fstat_r+0x1c>
 800f69e:	682b      	ldr	r3, [r5, #0]
 800f6a0:	b103      	cbz	r3, 800f6a4 <_fstat_r+0x1c>
 800f6a2:	6023      	str	r3, [r4, #0]
 800f6a4:	bd38      	pop	{r3, r4, r5, pc}
 800f6a6:	bf00      	nop
 800f6a8:	2007b0b4 	.word	0x2007b0b4

0800f6ac <_isatty_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	4d05      	ldr	r5, [pc, #20]	@ (800f6c8 <_isatty_r+0x1c>)
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	f000 f820 	bl	800f6fc <_isatty>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_isatty_r+0x1a>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_isatty_r+0x1a>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	2007b0b4 	.word	0x2007b0b4

0800f6cc <_close>:
 800f6cc:	4b02      	ldr	r3, [pc, #8]	@ (800f6d8 <_close+0xc>)
 800f6ce:	2258      	movs	r2, #88	@ 0x58
 800f6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d4:	601a      	str	r2, [r3, #0]
 800f6d6:	4770      	bx	lr
 800f6d8:	2007b0b4 	.word	0x2007b0b4

0800f6dc <_fstat>:
 800f6dc:	4b02      	ldr	r3, [pc, #8]	@ (800f6e8 <_fstat+0xc>)
 800f6de:	2258      	movs	r2, #88	@ 0x58
 800f6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	4770      	bx	lr
 800f6e8:	2007b0b4 	.word	0x2007b0b4

0800f6ec <_getpid>:
 800f6ec:	4b02      	ldr	r3, [pc, #8]	@ (800f6f8 <_getpid+0xc>)
 800f6ee:	2258      	movs	r2, #88	@ 0x58
 800f6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	4770      	bx	lr
 800f6f8:	2007b0b4 	.word	0x2007b0b4

0800f6fc <_isatty>:
 800f6fc:	4b02      	ldr	r3, [pc, #8]	@ (800f708 <_isatty+0xc>)
 800f6fe:	2258      	movs	r2, #88	@ 0x58
 800f700:	2000      	movs	r0, #0
 800f702:	601a      	str	r2, [r3, #0]
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	2007b0b4 	.word	0x2007b0b4

0800f70c <_kill>:
 800f70c:	4b02      	ldr	r3, [pc, #8]	@ (800f718 <_kill+0xc>)
 800f70e:	2258      	movs	r2, #88	@ 0x58
 800f710:	f04f 30ff 	mov.w	r0, #4294967295
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	4770      	bx	lr
 800f718:	2007b0b4 	.word	0x2007b0b4

0800f71c <_lseek>:
 800f71c:	4b02      	ldr	r3, [pc, #8]	@ (800f728 <_lseek+0xc>)
 800f71e:	2258      	movs	r2, #88	@ 0x58
 800f720:	f04f 30ff 	mov.w	r0, #4294967295
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	4770      	bx	lr
 800f728:	2007b0b4 	.word	0x2007b0b4

0800f72c <_read>:
 800f72c:	4b02      	ldr	r3, [pc, #8]	@ (800f738 <_read+0xc>)
 800f72e:	2258      	movs	r2, #88	@ 0x58
 800f730:	f04f 30ff 	mov.w	r0, #4294967295
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	4770      	bx	lr
 800f738:	2007b0b4 	.word	0x2007b0b4

0800f73c <_sbrk>:
 800f73c:	4a04      	ldr	r2, [pc, #16]	@ (800f750 <_sbrk+0x14>)
 800f73e:	4603      	mov	r3, r0
 800f740:	6811      	ldr	r1, [r2, #0]
 800f742:	b909      	cbnz	r1, 800f748 <_sbrk+0xc>
 800f744:	4903      	ldr	r1, [pc, #12]	@ (800f754 <_sbrk+0x18>)
 800f746:	6011      	str	r1, [r2, #0]
 800f748:	6810      	ldr	r0, [r2, #0]
 800f74a:	4403      	add	r3, r0
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	4770      	bx	lr
 800f750:	2007b0bc 	.word	0x2007b0bc
 800f754:	2007b0c0 	.word	0x2007b0c0

0800f758 <_write>:
 800f758:	4b02      	ldr	r3, [pc, #8]	@ (800f764 <_write+0xc>)
 800f75a:	2258      	movs	r2, #88	@ 0x58
 800f75c:	f04f 30ff 	mov.w	r0, #4294967295
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	4770      	bx	lr
 800f764:	2007b0b4 	.word	0x2007b0b4

0800f768 <_exit>:
 800f768:	e7fe      	b.n	800f768 <_exit>
	...

0800f76c <_init>:
 800f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76e:	bf00      	nop
 800f770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f772:	bc08      	pop	{r3}
 800f774:	469e      	mov	lr, r3
 800f776:	4770      	bx	lr

0800f778 <_fini>:
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77a:	bf00      	nop
 800f77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f77e:	bc08      	pop	{r3}
 800f780:	469e      	mov	lr, r3
 800f782:	4770      	bx	lr
