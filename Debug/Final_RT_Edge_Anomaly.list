
Final_RT_Edge_Anomaly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f48c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f244  0800f6e0  0800f6e0  000106e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e924  0801e924  00021144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e924  0801e924  0001f924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e92c  0801e92c  00021144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e92c  0801e92c  0001f92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e930  0801e930  0001f930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001144  20000000  0801e934  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00079f78  20001148  0801fa78  00021148  2**3
                  ALLOC
 10 ._user_heap_stack 00001800  2007b0c0  0801fa78  000220c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00021144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f7c8  00000000  00000000  0002117a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e4b  00000000  00000000  00050942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001996f  00000000  00000000  0005578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0006f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002db5  00000000  00000000  00070580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000382e2  00000000  00000000  00073335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032281  00000000  00000000  000ab617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016691f  00000000  00000000  000dd898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  002441b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051d8  00000000  00000000  00244240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00249418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20001148 	.word	0x20001148
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f6c4 	.word	0x0800f6c4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000114c 	.word	0x2000114c
 800028c:	0800f6c4 	.word	0x0800f6c4

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <ECGSamplingTask>:
    xSemaphoreGive(adcSemaphore);
    return value;
}

/* Main ECG sampling & inference task */
void ECGSamplingTask(void *argument) {
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	ed2d 8b08 	vpush	{d8-d11}
    g_network_activations_table[1] = (ai_handle)ai_activations;
 8000f50:	4bb1      	ldr	r3, [pc, #708]	@ (8001218 <ECGSamplingTask+0x2d0>)
 8000f52:	49b2      	ldr	r1, [pc, #712]	@ (800121c <ECGSamplingTask+0x2d4>)
void ECGSamplingTask(void *argument) {
 8000f54:	b0c9      	sub	sp, #292	@ 0x124
    err = ai_network_create_and_init(
 8000f56:	4ab2      	ldr	r2, [pc, #712]	@ (8001220 <ECGSamplingTask+0x2d8>)
 8000f58:	48b2      	ldr	r0, [pc, #712]	@ (8001224 <ECGSamplingTask+0x2dc>)
    g_network_activations_table[1] = (ai_handle)ai_activations;
 8000f5a:	f841 3f04 	str.w	r3, [r1, #4]!
    err = ai_network_create_and_init(
 8000f5e:	f006 fba7 	bl	80076b0 <ai_network_create_and_init>
    if (err.type != AI_ERROR_NONE) {
 8000f62:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 8000f66:	f040 821a 	bne.w	800139e <ECGSamplingTask+0x456>
    ai_network_get_info(ecg_network, &info);
 8000f6a:	4fae      	ldr	r7, [pc, #696]	@ (8001224 <ECGSamplingTask+0x2dc>)
 8000f6c:	f10d 0b98 	add.w	fp, sp, #152	@ 0x98
 8000f70:	4659      	mov	r1, fp
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f006 fa00 	bl	8007378 <ai_network_get_info>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Model initialized OK\r\n",
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	2216      	movs	r2, #22
 8000f7e:	49aa      	ldr	r1, [pc, #680]	@ (8001228 <ECGSamplingTask+0x2e0>)
 8000f80:	48aa      	ldr	r0, [pc, #680]	@ (800122c <ECGSamplingTask+0x2e4>)
 8000f82:	f005 fd89 	bl	8006a98 <HAL_UART_Transmit>
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f86:	4621      	mov	r1, r4
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f006 fa4f 	bl	800742c <ai_network_inputs_get>
 8000f8e:	4da8      	ldr	r5, [pc, #672]	@ (8001230 <ECGSamplingTask+0x2e8>)
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f90:	4621      	mov	r1, r4
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f92:	6028      	str	r0, [r5, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f94:	6838      	ldr	r0, [r7, #0]
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f96:	950e      	str	r5, [sp, #56]	@ 0x38
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f98:	f006 fa56 	bl	8007448 <ai_network_outputs_get>
 8000f9c:	4604      	mov	r4, r0
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000f9e:	9e35      	ldr	r6, [sp, #212]	@ 0xd4
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fa0:	4ba4      	ldr	r3, [pc, #656]	@ (8001234 <ECGSamplingTask+0x2ec>)
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fa2:	6828      	ldr	r0, [r5, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fa4:	930d      	str	r3, [sp, #52]	@ 0x34
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fa6:	6933      	ldr	r3, [r6, #16]
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fa8:	f8df 82c4 	ldr.w	r8, [pc, #708]	@ 8001270 <ECGSamplingTask+0x328>
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fac:	6103      	str	r3, [r0, #16]
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fae:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fb0:	f8c0 8004 	str.w	r8, [r0, #4]
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fb4:	691d      	ldr	r5, [r3, #16]
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fb6:	4aa0      	ldr	r2, [pc, #640]	@ (8001238 <ECGSamplingTask+0x2f0>)
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fb8:	6125      	str	r5, [r4, #16]
        snprintf(dbg, sizeof(dbg),
 8000fba:	6933      	ldr	r3, [r6, #16]
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fbc:	4e9e      	ldr	r6, [pc, #632]	@ (8001238 <ECGSamplingTask+0x2f0>)
        snprintf(dbg, sizeof(dbg),
 8000fbe:	2150      	movs	r1, #80	@ 0x50
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fc0:	6066      	str	r6, [r4, #4]
        snprintf(dbg, sizeof(dbg),
 8000fc2:	9500      	str	r5, [sp, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fc4:	4d9b      	ldr	r5, [pc, #620]	@ (8001234 <ECGSamplingTask+0x2ec>)
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fc6:	920f      	str	r2, [sp, #60]	@ 0x3c
        snprintf(dbg, sizeof(dbg),
 8000fc8:	a812      	add	r0, sp, #72	@ 0x48
 8000fca:	4a9c      	ldr	r2, [pc, #624]	@ (800123c <ECGSamplingTask+0x2f4>)
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fcc:	602c      	str	r4, [r5, #0]
        snprintf(dbg, sizeof(dbg),
 8000fce:	f00c fa4b 	bl	800d468 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000fd2:	a812      	add	r0, sp, #72	@ 0x48
 8000fd4:	f7ff f95c 	bl	8000290 <strlen>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	4893      	ldr	r0, [pc, #588]	@ (800122c <ECGSamplingTask+0x2e4>)
 8000fe0:	a912      	add	r1, sp, #72	@ 0x48
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	f005 fd58 	bl	8006a98 <HAL_UART_Transmit>

    InitAI();
    if(ecg_network == AI_HANDLE_NULL) {
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 81f6 	beq.w	80013dc <ECGSamplingTask+0x494>
        HAL_UART_Transmit(&huart3, (uint8_t*)"AI Init Failed!\r\n", 16, 100);
        vTaskDelete(NULL);
    }

    TickType_t last_wake = xTaskGetTickCount();
 8000ff0:	f007 feb2 	bl	8008d58 <xTaskGetTickCount>
        vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(SAMPLE_RATE_MS));

        // Read and preprocess ADC
        int16_t raw = ReadADC();
        float voltage = raw * (3.3f / 4095.0f);
        float centered = (voltage - 1.65f);
 8000ff4:	ed9f aa92 	vldr	s20, [pc, #584]	@ 8001240 <ECGSamplingTask+0x2f8>
 8000ff8:	eddf 8a92 	vldr	s17, [pc, #584]	@ 8001244 <ECGSamplingTask+0x2fc>
void ECGSamplingTask(void *argument) {
 8000ffc:	ed9f ba92 	vldr	s22, [pc, #584]	@ 8001248 <ECGSamplingTask+0x300>
                snprintf(errBuf, sizeof(errBuf), "Inference failed: code=%d, type=%d\r\n", err.code, err.type);
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);

                // Print input buffer stats
                float min_val = 255, max_val = 0;
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001000:	ed9f 9b83 	vldr	d9, [pc, #524]	@ 8001210 <ECGSamplingTask+0x2c8>
 8001004:	4d91      	ldr	r5, [pc, #580]	@ (800124c <ECGSamplingTask+0x304>)
 8001006:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8001274 <ECGSamplingTask+0x32c>
 800100a:	4e91      	ldr	r6, [pc, #580]	@ (8001250 <ECGSamplingTask+0x308>)
    TickType_t last_wake = xTaskGetTickCount();
 800100c:	9010      	str	r0, [sp, #64]	@ 0x40
 800100e:	f505 677a 	add.w	r7, r5, #4000	@ 0xfa0
    return sum / size;
 8001012:	eddf aa90 	vldr	s21, [pc, #576]	@ 8001254 <ECGSamplingTask+0x30c>
    HAL_StatusTypeDef status = HAL_ADC_Start(&hadc1);
 8001016:	f8df 9254 	ldr.w	r9, [pc, #596]	@ 800126c <ECGSamplingTask+0x324>
 800101a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800101e:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8001022:	e00b      	b.n	800103c <ECGSamplingTask+0xf4>
void ECGSamplingTask(void *argument) {
 8001024:	eeb0 7a4b 	vmov.f32	s14, s22
        modelInputBuffer[sampleCount++] = centered;
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	1c5a      	adds	r2, r3, #1
        if (sampleCount >= MODEL_INPUT_SIZE) {
 800102c:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
        modelInputBuffer[sampleCount++] = centered;
 8001030:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001034:	ed83 7a00 	vstr	s14, [r3]
 8001038:	6032      	str	r2, [r6, #0]
        if (sampleCount >= MODEL_INPUT_SIZE) {
 800103a:	d232      	bcs.n	80010a2 <ECGSamplingTask+0x15a>
        vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(SAMPLE_RATE_MS));
 800103c:	2101      	movs	r1, #1
 800103e:	a810      	add	r0, sp, #64	@ 0x40
 8001040:	f007 fd80 	bl	8008b44 <xTaskDelayUntil>
    if (xSemaphoreTake(adcSemaphore, pdMS_TO_TICKS(10)) != pdTRUE)
 8001044:	210a      	movs	r1, #10
 8001046:	f8da 0000 	ldr.w	r0, [sl]
 800104a:	f006 ff5f 	bl	8007f0c <xQueueSemaphoreTake>
 800104e:	2801      	cmp	r0, #1
 8001050:	4604      	mov	r4, r0
 8001052:	d1e7      	bne.n	8001024 <ECGSamplingTask+0xdc>
    HAL_StatusTypeDef status = HAL_ADC_Start(&hadc1);
 8001054:	4648      	mov	r0, r9
 8001056:	f001 fb19 	bl	800268c <HAL_ADC_Start>
    if (status != HAL_OK) {
 800105a:	4683      	mov	fp, r0
 800105c:	2800      	cmp	r0, #0
 800105e:	f040 80be 	bne.w	80011de <ECGSamplingTask+0x296>
    status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001062:	4621      	mov	r1, r4
 8001064:	4648      	mov	r0, r9
 8001066:	f000 ff35 	bl	8001ed4 <HAL_ADC_PollForConversion>
    if (status != HAL_OK) {
 800106a:	4680      	mov	r8, r0
 800106c:	2800      	cmp	r0, #0
 800106e:	f040 80c1 	bne.w	80011f4 <ECGSamplingTask+0x2ac>
    int16_t value = HAL_ADC_GetValue(&hadc1);
 8001072:	4648      	mov	r0, r9
 8001074:	f000 ffa4 	bl	8001fc0 <HAL_ADC_GetValue>
 8001078:	4604      	mov	r4, r0
    HAL_ADC_Stop(&hadc1);
 800107a:	4648      	mov	r0, r9
 800107c:	f001 fbaa 	bl	80027d4 <HAL_ADC_Stop>
        float voltage = raw * (3.3f / 4095.0f);
 8001080:	b224      	sxth	r4, r4
    xSemaphoreGive(adcSemaphore);
 8001082:	4643      	mov	r3, r8
 8001084:	4642      	mov	r2, r8
 8001086:	4641      	mov	r1, r8
 8001088:	f8da 0000 	ldr.w	r0, [sl]
 800108c:	f006 fc4e 	bl	800792c <xQueueGenericSend>
        float voltage = raw * (3.3f / 4095.0f);
 8001090:	ee07 4a90 	vmov	s15, r4
        float centered = (voltage - 1.65f);
 8001094:	eeb0 7a68 	vmov.f32	s14, s17
        float voltage = raw * (3.3f / 4095.0f);
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        float centered = (voltage - 1.65f);
 800109c:	eea7 7a8a 	vfma.f32	s14, s15, s20
    return value;
 80010a0:	e7c2      	b.n	8001028 <ECGSamplingTask+0xe0>
 80010a2:	4d6a      	ldr	r5, [pc, #424]	@ (800124c <ECGSamplingTask+0x304>)
    float sum = 0.0f;
 80010a4:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8001258 <ECGSamplingTask+0x310>
        if (sampleCount >= MODEL_INPUT_SIZE) {
 80010a8:	462b      	mov	r3, r5
 80010aa:	462a      	mov	r2, r5
    float sum = 0.0f;
 80010ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80010b0:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
    for (uint32_t i = 0; i < size; i++) sum += buffer[i];
 80010b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80010b8:	4297      	cmp	r7, r2
 80010ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010be:	d1f9      	bne.n	80010b4 <ECGSamplingTask+0x16c>
    return sum / size;
 80010c0:	ee87 8aaa 	vdiv.f32	s16, s15, s21
    float variance = 0.0f;
 80010c4:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001258 <ECGSamplingTask+0x310>
        float diff = buffer[i] - mean;
 80010c8:	ecf3 7a01 	vldmia	r3!, {s15}
 80010cc:	ee77 7ac8 	vsub.f32	s15, s15, s16
    for (uint32_t i = 0; i < size; i++) {
 80010d0:	429f      	cmp	r7, r3
        variance += diff * diff;
 80010d2:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (uint32_t i = 0; i < size; i++) {
 80010d6:	d1f7      	bne.n	80010c8 <ECGSamplingTask+0x180>
    return sqrtf(variance / size);
 80010d8:	ee87 0a2a 	vdiv.f32	s0, s14, s21
 80010dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	f100 8184 	bmi.w	80013f0 <ECGSamplingTask+0x4a8>
 80010e8:	eef1 6ac0 	vsqrt.f32	s13, s0
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80010f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80010f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f6:	da18      	bge.n	800112a <ECGSamplingTask+0x1e2>
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 80010f8:	eddf 7a58 	vldr	s15, [pc, #352]	@ 800125c <ECGSamplingTask+0x314>
 80010fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001100:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8001102:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800110e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001114:	9a11      	ldr	r2, [sp, #68]	@ 0x44
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 8001116:	eb08 0383 	add.w	r3, r8, r3, lsl #2
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 800111a:	3201      	adds	r2, #1
 800111c:	9211      	str	r2, [sp, #68]	@ 0x44
 800111e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 8001120:	ed83 7a00 	vstr	s14, [r3]
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001124:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001128:	dbea      	blt.n	8001100 <ECGSamplingTask+0x1b8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800112a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800112e:	f3bf 8f6f 	isb	sy
            ai_i32 ret = ai_network_run(ecg_network, in_bufs, out_bufs);
 8001132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <ECGSamplingTask+0x2dc>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f006 fb11 	bl	8007764 <ai_network_run>
            if (ret == AI_NETWORK_OUT_NUM) {
 8001142:	2801      	cmp	r0, #1
 8001144:	f040 8098 	bne.w	8001278 <ECGSamplingTask+0x330>
            	ai_float yq = ai_output_buffer[0];
 8001148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
            	int is_anomaly = yq > 0.5f ? 1 : 0;
 8001152:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8001156:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            	snprintf(uartBuffer, sizeof(uartBuffer), "Anomaly:%d, Score:%.4f\r\n", is_anomaly, yq);
 8001162:	ee17 0a10 	vmov	r0, s14
            	int is_anomaly = yq > 0.5f ? 1 : 0;
 8001166:	bfcc      	ite	gt
 8001168:	2401      	movgt	r4, #1
 800116a:	2400      	movle	r4, #0
            	snprintf(uartBuffer, sizeof(uartBuffer), "Anomaly:%d, Score:%.4f\r\n", is_anomaly, yq);
 800116c:	f7ff f9fc 	bl	8000568 <__aeabi_f2d>
 8001170:	4623      	mov	r3, r4
 8001172:	e9cd 0100 	strd	r0, r1, [sp]
 8001176:	4a3a      	ldr	r2, [pc, #232]	@ (8001260 <ECGSamplingTask+0x318>)
 8001178:	2140      	movs	r1, #64	@ 0x40
 800117a:	4658      	mov	r0, fp
 800117c:	f00c f974 	bl	800d468 <sniprintf>
                // Print first few samples
                snprintf(errBuf, sizeof(errBuf), "Samples: %.2f, %.2f, %.2f, %.2f, %.2f\r\n",
                         ai_input_buffer[0], ai_input_buffer[1],
                         ai_input_buffer[2], ai_input_buffer[3],
                         ai_input_buffer[4]);
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 8001180:	4658      	mov	r0, fp
 8001182:	f7ff f885 	bl	8000290 <strlen>
 8001186:	4602      	mov	r2, r0
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	b292      	uxth	r2, r2
 800118e:	4659      	mov	r1, fp
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <ECGSamplingTask+0x2e4>)
 8001192:	f005 fc81 	bl	8006a98 <HAL_UART_Transmit>
            }

            sampleCount = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	6033      	str	r3, [r6, #0]
    if (xTaskGetTickCount() - last > pdMS_TO_TICKS(5000)) {
 800119a:	f007 fddd 	bl	8008d58 <xTaskGetTickCount>
 800119e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011a2:	4a30      	ldr	r2, [pc, #192]	@ (8001264 <ECGSamplingTask+0x31c>)
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	1a80      	subs	r0, r0, r2
 80011a8:	4298      	cmp	r0, r3
 80011aa:	f67f af34 	bls.w	8001016 <ECGSamplingTask+0xce>
        last = xTaskGetTickCount();
 80011ae:	f007 fdd3 	bl	8008d58 <xTaskGetTickCount>
 80011b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <ECGSamplingTask+0x31c>)
 80011b4:	6018      	str	r0, [r3, #0]
        snprintf(buf, sizeof(buf), "Free heap: %u bytes\r\n", xPortGetFreeHeapSize());
 80011b6:	f008 fd1f 	bl	8009bf8 <xPortGetFreeHeapSize>
 80011ba:	2140      	movs	r1, #64	@ 0x40
 80011bc:	4603      	mov	r3, r0
 80011be:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <ECGSamplingTask+0x320>)
 80011c0:	4658      	mov	r0, fp
 80011c2:	f00c f951 	bl	800d468 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80011c6:	4658      	mov	r0, fp
 80011c8:	f7ff f862 	bl	8000290 <strlen>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	4659      	mov	r1, fp
 80011d4:	b292      	uxth	r2, r2
 80011d6:	4815      	ldr	r0, [pc, #84]	@ (800122c <ECGSamplingTask+0x2e4>)
 80011d8:	f005 fc5e 	bl	8006a98 <HAL_UART_Transmit>
}
 80011dc:	e719      	b.n	8001012 <ECGSamplingTask+0xca>
        HAL_ADC_Stop(&hadc1);
 80011de:	4823      	ldr	r0, [pc, #140]	@ (800126c <ECGSamplingTask+0x324>)
 80011e0:	f001 faf8 	bl	80027d4 <HAL_ADC_Stop>
        xSemaphoreGive(adcSemaphore);
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8da 0000 	ldr.w	r0, [sl]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	f006 fb9d 	bl	800792c <xQueueGenericSend>
        return 2048;
 80011f2:	e717      	b.n	8001024 <ECGSamplingTask+0xdc>
        HAL_ADC_Stop(&hadc1);
 80011f4:	481d      	ldr	r0, [pc, #116]	@ (800126c <ECGSamplingTask+0x324>)
 80011f6:	f001 faed 	bl	80027d4 <HAL_ADC_Stop>
        xSemaphoreGive(adcSemaphore);
 80011fa:	465b      	mov	r3, fp
 80011fc:	465a      	mov	r2, fp
 80011fe:	4659      	mov	r1, fp
 8001200:	f8da 0000 	ldr.w	r0, [sl]
 8001204:	f006 fb92 	bl	800792c <xQueueGenericSend>
        return 2048;
 8001208:	e70c      	b.n	8001024 <ECGSamplingTask+0xdc>
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
	...
 8001218:	20001170 	.word	0x20001170
 800121c:	20000f6c 	.word	0x20000f6c
 8001220:	20000f64 	.word	0x20000f64
 8001224:	20060714 	.word	0x20060714
 8001228:	0800f72c 	.word	0x0800f72c
 800122c:	200616d0 	.word	0x200616d0
 8001230:	2000116c 	.word	0x2000116c
 8001234:	20001168 	.word	0x20001168
 8001238:	2005f770 	.word	0x2005f770
 800123c:	0800f744 	.word	0x0800f744
 8001240:	3a534067 	.word	0x3a534067
 8001244:	bfd33333 	.word	0xbfd33333
 8001248:	39d34000 	.word	0x39d34000
 800124c:	2006071c 	.word	0x2006071c
 8001250:	20060718 	.word	0x20060718
 8001254:	447a0000 	.word	0x447a0000
 8001258:	00000000 	.word	0x00000000
 800125c:	322bcc77 	.word	0x322bcc77
 8001260:	0800f784 	.word	0x0800f784
 8001264:	20001164 	.word	0x20001164
 8001268:	0800f700 	.word	0x0800f700
 800126c:	20061878 	.word	0x20061878
 8001270:	2005f774 	.word	0x2005f774
 8001274:	200616c0 	.word	0x200616c0
                ai_error err = ai_network_get_error(ecg_network);
 8001278:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <ECGSamplingTask+0x4c0>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f006 f8d4 	bl	8007428 <ai_network_get_error>
 8001280:	4603      	mov	r3, r0
                snprintf(errBuf, sizeof(errBuf), "Inference failed: code=%d, type=%d\r\n", err.code, err.type);
 8001282:	b2dc      	uxtb	r4, r3
 8001284:	2180      	movs	r1, #128	@ 0x80
 8001286:	4a61      	ldr	r2, [pc, #388]	@ (800140c <ECGSamplingTask+0x4c4>)
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	4658      	mov	r0, fp
 800128c:	9400      	str	r4, [sp, #0]
 800128e:	f00c f8eb 	bl	800d468 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 8001292:	4658      	mov	r0, fp
 8001294:	f7fe fffc 	bl	8000290 <strlen>
 8001298:	4602      	mov	r2, r0
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	4659      	mov	r1, fp
 80012a0:	485b      	ldr	r0, [pc, #364]	@ (8001410 <ECGSamplingTask+0x4c8>)
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f005 fbf8 	bl	8006a98 <HAL_UART_Transmit>
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80012ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b2:	da6e      	bge.n	8001392 <ECGSamplingTask+0x44a>
                float min_val = 255, max_val = 0;
 80012b4:	ed9f 8a57 	vldr	s16, [pc, #348]	@ 8001414 <ECGSamplingTask+0x4cc>
 80012b8:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001418 <ECGSamplingTask+0x4d0>
                    if (ai_input_buffer[i] < min_val) min_val = ai_input_buffer[i];
 80012bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012be:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d504      	bpl.n	80012da <ECGSamplingTask+0x392>
 80012d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012d2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012d6:	ed93 7a00 	vldr	s14, [r3]
                    if (ai_input_buffer[i] > max_val) max_val = ai_input_buffer[i];
 80012da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012dc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	dd04      	ble.n	80012f8 <ECGSamplingTask+0x3b0>
 80012ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012f0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012f4:	ed93 8a00 	vldr	s16, [r3]
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80012f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012fa:	3301      	adds	r3, #1
 80012fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80012fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8001300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001304:	dbda      	blt.n	80012bc <ECGSamplingTask+0x374>
                snprintf(errBuf, sizeof(errBuf), "Input range: min=%.2f, max=%.2f\r\n", min_val, max_val);
 8001306:	ee17 0a10 	vmov	r0, s14
 800130a:	f7ff f92d 	bl	8000568 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ee18 0a10 	vmov	r0, s16
 8001316:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800131a:	f7ff f925 	bl	8000568 <__aeabi_f2d>
 800131e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001322:	e9cd 2300 	strd	r2, r3, [sp]
 8001326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800132a:	4a3c      	ldr	r2, [pc, #240]	@ (800141c <ECGSamplingTask+0x4d4>)
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	4658      	mov	r0, fp
 8001330:	f00c f89a 	bl	800d468 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 8001334:	4658      	mov	r0, fp
 8001336:	f7fe ffab 	bl	8000290 <strlen>
 800133a:	4602      	mov	r2, r0
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	b292      	uxth	r2, r2
 8001342:	4659      	mov	r1, fp
 8001344:	4832      	ldr	r0, [pc, #200]	@ (8001410 <ECGSamplingTask+0x4c8>)
 8001346:	f005 fba7 	bl	8006a98 <HAL_UART_Transmit>
                snprintf(errBuf, sizeof(errBuf), "Samples: %.2f, %.2f, %.2f, %.2f, %.2f\r\n",
 800134a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800134e:	f7ff f90b 	bl	8000568 <__aeabi_f2d>
 8001352:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001356:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800135a:	f7ff f905 	bl	8000568 <__aeabi_f2d>
 800135e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001362:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001366:	f7ff f8ff 	bl	8000568 <__aeabi_f2d>
 800136a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800136e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001372:	f7ff f8f9 	bl	8000568 <__aeabi_f2d>
 8001376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800137a:	f8d8 0000 	ldr.w	r0, [r8]
 800137e:	f7ff f8f3 	bl	8000568 <__aeabi_f2d>
 8001382:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <ECGSamplingTask+0x4d8>)
 8001384:	e9cd 0100 	strd	r0, r1, [sp]
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	4658      	mov	r0, fp
 800138c:	f00c f86c 	bl	800d468 <sniprintf>
 8001390:	e6f6      	b.n	8001180 <ECGSamplingTask+0x238>
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001392:	ec51 0b19 	vmov	r0, r1, d9
 8001396:	a31a      	add	r3, pc, #104	@ (adr r3, 8001400 <ECGSamplingTask+0x4b8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	e7c1      	b.n	8001322 <ECGSamplingTask+0x3da>
        snprintf(buf, sizeof(buf), "AI Init error: %d\r\n", err.code);
 800139e:	4603      	mov	r3, r0
 80013a0:	f10d 0b98 	add.w	fp, sp, #152	@ 0x98
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <ECGSamplingTask+0x4dc>)
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	4658      	mov	r0, fp
 80013ac:	f00c f85c 	bl	800d468 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80013b0:	4658      	mov	r0, fp
 80013b2:	f7fe ff6d 	bl	8000290 <strlen>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	b292      	uxth	r2, r2
 80013be:	4659      	mov	r1, fp
 80013c0:	4813      	ldr	r0, [pc, #76]	@ (8001410 <ECGSamplingTask+0x4c8>)
 80013c2:	f005 fb69 	bl	8006a98 <HAL_UART_Transmit>
        ecg_network = AI_HANDLE_NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <ECGSamplingTask+0x4e0>)
 80013ca:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8001438 <ECGSamplingTask+0x4f0>
 80013ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80013d0:	4a16      	ldr	r2, [pc, #88]	@ (800142c <ECGSamplingTask+0x4e4>)
 80013d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80013d4:	4a16      	ldr	r2, [pc, #88]	@ (8001430 <ECGSamplingTask+0x4e8>)
 80013d6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <ECGSamplingTask+0x4c0>)
 80013da:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)"AI Init Failed!\r\n", 16, 100);
 80013dc:	2364      	movs	r3, #100	@ 0x64
 80013de:	2210      	movs	r2, #16
 80013e0:	4914      	ldr	r1, [pc, #80]	@ (8001434 <ECGSamplingTask+0x4ec>)
 80013e2:	480b      	ldr	r0, [pc, #44]	@ (8001410 <ECGSamplingTask+0x4c8>)
 80013e4:	f005 fb58 	bl	8006a98 <HAL_UART_Transmit>
        vTaskDelete(NULL);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f007 fb41 	bl	8008a70 <vTaskDelete>
 80013ee:	e5ff      	b.n	8000ff0 <ECGSamplingTask+0xa8>
    return sqrtf(variance / size);
 80013f0:	f00b f91c 	bl	800c62c <sqrtf>
 80013f4:	eef0 6a40 	vmov.f32	s13, s0
 80013f8:	e678      	b.n	80010ec <ECGSamplingTask+0x1a4>
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	406fe000 	.word	0x406fe000
 8001408:	20060714 	.word	0x20060714
 800140c:	0800f7a0 	.word	0x0800f7a0
 8001410:	200616d0 	.word	0x200616d0
 8001414:	00000000 	.word	0x00000000
 8001418:	437f0000 	.word	0x437f0000
 800141c:	0800f7c8 	.word	0x0800f7c8
 8001420:	0800f7ec 	.word	0x0800f7ec
 8001424:	0800f718 	.word	0x0800f718
 8001428:	2000116c 	.word	0x2000116c
 800142c:	20001168 	.word	0x20001168
 8001430:	2005f770 	.word	0x2005f770
 8001434:	0800f770 	.word	0x0800f770
 8001438:	2005f774 	.word	0x2005f774

0800143c <ECGTask_Init>:
//        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

/* ECG Task and Semaphore Initialization */
void ECGTask_Init(void) {
 800143c:	b508      	push	{r3, lr}
    adcSemaphore = xSemaphoreCreateMutex();
 800143e:	2001      	movs	r0, #1
 8001440:	f006 fbce 	bl	8007be0 <xQueueCreateMutex>
 8001444:	4602      	mov	r2, r0
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <ECGTask_Init+0x1c>)
    uartSemaphore = xSemaphoreCreateMutex();
 8001448:	2001      	movs	r0, #1
    adcSemaphore = xSemaphoreCreateMutex();
 800144a:	601a      	str	r2, [r3, #0]
    uartSemaphore = xSemaphoreCreateMutex();
 800144c:	f006 fbc8 	bl	8007be0 <xQueueCreateMutex>
 8001450:	4b02      	ldr	r3, [pc, #8]	@ (800145c <ECGTask_Init+0x20>)
 8001452:	6018      	str	r0, [r3, #0]
}
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	200616c0 	.word	0x200616c0
 800145c:	200616bc 	.word	0x200616bc

08001460 <spo2_handler>:
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
    taskDISABLE_INTERRUPTS();
    while (1);
}

void spo2_handler(void * parameters){
 8001460:	b500      	push	{lr}
 8001462:	b083      	sub	sp, #12
	TickType_t last_wake = xTaskGetTickCount();
 8001464:	f007 fc78 	bl	8008d58 <xTaskGetTickCount>
//	 PPGSample_t sample;
	while(1){
		vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(1000));
		HAL_UART_Transmit(&huart3, (uint8_t *)"Hello from spo2\r\n", sizeof("Hello from spo2\r\n"), 100);
 8001468:	4e09      	ldr	r6, [pc, #36]	@ (8001490 <spo2_handler+0x30>)
 800146a:	4d0a      	ldr	r5, [pc, #40]	@ (8001494 <spo2_handler+0x34>)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800146c:	4c0a      	ldr	r4, [pc, #40]	@ (8001498 <spo2_handler+0x38>)
	TickType_t last_wake = xTaskGetTickCount();
 800146e:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(1000));
 8001470:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001474:	a801      	add	r0, sp, #4
 8001476:	f007 fb65 	bl	8008b44 <xTaskDelayUntil>
		HAL_UART_Transmit(&huart3, (uint8_t *)"Hello from spo2\r\n", sizeof("Hello from spo2\r\n"), 100);
 800147a:	4631      	mov	r1, r6
 800147c:	2364      	movs	r3, #100	@ 0x64
 800147e:	2212      	movs	r2, #18
 8001480:	4628      	mov	r0, r5
 8001482:	f005 fb09 	bl	8006a98 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001486:	2101      	movs	r1, #1
 8001488:	4620      	mov	r0, r4
 800148a:	f001 fb8f 	bl	8002bac <HAL_GPIO_TogglePin>
	while(1){
 800148e:	e7ef      	b.n	8001470 <spo2_handler+0x10>
 8001490:	0800f814 	.word	0x0800f814
 8001494:	200616d0 	.word	0x200616d0
 8001498:	42020400 	.word	0x42020400

0800149c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 800149c:	b500      	push	{lr}
 800149e:	b091      	sub	sp, #68	@ 0x44
 80014a0:	460b      	mov	r3, r1
    snprintf(buf, sizeof(buf), "Stack overflow in %s\r\n", pcTaskName);
 80014a2:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <vApplicationStackOverflowHook+0x2c>)
 80014a4:	2140      	movs	r1, #64	@ 0x40
 80014a6:	4668      	mov	r0, sp
 80014a8:	f00b ffde 	bl	800d468 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80014ac:	4668      	mov	r0, sp
 80014ae:	f7fe feef 	bl	8000290 <strlen>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	4669      	mov	r1, sp
 80014ba:	b292      	uxth	r2, r2
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <vApplicationStackOverflowHook+0x30>)
 80014be:	f005 faeb 	bl	8006a98 <HAL_UART_Transmit>
    taskDISABLE_INTERRUPTS();
 80014c2:	f008 fa23 	bl	800990c <ulSetInterruptMask>
    while (1);
 80014c6:	e7fe      	b.n	80014c6 <vApplicationStackOverflowHook+0x2a>
 80014c8:	0800f828 	.word	0x0800f828
 80014cc:	200616d0 	.word	0x200616d0

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b5d0      	push	{r4, r6, r7, lr}
 80014d2:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d4:	2220      	movs	r2, #32
 80014d6:	2100      	movs	r1, #0
 80014d8:	a80a      	add	r0, sp, #40	@ 0x28
 80014da:	f00c f858 	bl	800d58e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014de:	2300      	movs	r3, #0
 80014e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80014e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80014e8:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014ec:	4a1f      	ldr	r2, [pc, #124]	@ (800156c <SystemClock_Config+0x9c>)
 80014ee:	6913      	ldr	r3, [r2, #16]
 80014f0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80014f4:	6113      	str	r3, [r2, #16]
 80014f6:	6913      	ldr	r3, [r2, #16]
 80014f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001500:	6953      	ldr	r3, [r2, #20]
 8001502:	071b      	lsls	r3, r3, #28
 8001504:	d5fc      	bpl.n	8001500 <SystemClock_Config+0x30>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001506:	26fa      	movs	r6, #250	@ 0xfa
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2001      	movs	r0, #1
 800150a:	f44f 11a8 	mov.w	r1, #1376256	@ 0x150000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001512:	9615      	str	r6, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001514:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001516:	2600      	movs	r6, #0
 8001518:	2700      	movs	r7, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001520:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001524:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001528:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800152a:	e9cd 671a 	strd	r6, r7, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152e:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001530:	9219      	str	r2, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f001 fc93 	bl	8002e5c <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	b108      	cbz	r0, 800153e <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	231f      	movs	r3, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001544:	2105      	movs	r1, #5
 8001546:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001550:	f001 ffda 	bl	8003508 <HAL_RCC_ClockConfig>
 8001554:	b108      	cbz	r0, 800155a <SystemClock_Config+0x8a>
 8001556:	b672      	cpsid	i
  while (1)
 8001558:	e7fe      	b.n	8001558 <SystemClock_Config+0x88>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <SystemClock_Config+0xa0>)
 800155c:	6813      	ldr	r3, [r2, #0]
 800155e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	b01c      	add	sp, #112	@ 0x70
 800156a:	bdd0      	pop	{r4, r6, r7, pc}
 800156c:	44020800 	.word	0x44020800
 8001570:	40022000 	.word	0x40022000

08001574 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	2400      	movs	r4, #0
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b092      	sub	sp, #72	@ 0x48
  HAL_Init();
 800157a:	f000 fba1 	bl	8001cc0 <HAL_Init>
  SystemClock_Config();
 800157e:	f7ff ffa7 	bl	80014d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001586:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4bb0      	ldr	r3, [pc, #704]	@ (800184c <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	f042 0204 	orr.w	r2, r2, #4
 8001598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800159c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a0:	2510      	movs	r5, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	f002 0204 	and.w	r2, r2, #4
 80015a6:	9203      	str	r2, [sp, #12]
 80015a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80015ae:	2110      	movs	r1, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80015b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80015bc:	48a4      	ldr	r0, [pc, #656]	@ (8001850 <main+0x2dc>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015be:	f002 0220 	and.w	r2, r2, #32
 80015c2:	9204      	str	r2, [sp, #16]
 80015c4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80015d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015d6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80015da:	9205      	str	r2, [sp, #20]
 80015dc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80015ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015ee:	f002 0201 	and.w	r2, r2, #1
 80015f2:	9206      	str	r2, [sp, #24]
 80015f4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015fa:	f042 0202 	orr.w	r2, r2, #2
 80015fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001602:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001606:	f002 0202 	and.w	r2, r2, #2
 800160a:	9207      	str	r2, [sp, #28]
 800160c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001612:	f042 0208 	orr.w	r2, r2, #8
 8001616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800161a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800161e:	f002 0208 	and.w	r2, r2, #8
 8001622:	9208      	str	r2, [sp, #32]
 8001624:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001626:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800162a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800162e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001636:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163c:	9309      	str	r3, [sp, #36]	@ 0x24
 800163e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001640:	f001 faae 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001644:	4622      	mov	r2, r4
 8001646:	2101      	movs	r1, #1
 8001648:	4882      	ldr	r0, [pc, #520]	@ (8001854 <main+0x2e0>)
 800164a:	f001 faa9 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 800164e:	4622      	mov	r2, r4
 8001650:	2110      	movs	r1, #16
 8001652:	4881      	ldr	r0, [pc, #516]	@ (8001858 <main+0x2e4>)
 8001654:	f001 faa4 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001658:	487d      	ldr	r0, [pc, #500]	@ (8001850 <main+0x2dc>)
 800165a:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001664:	f001 f9d8 	bl	8002a18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	487a      	ldr	r0, [pc, #488]	@ (8001854 <main+0x2e0>)
 800166a:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f001 f9d0 	bl	8002a18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167c:	4876      	ldr	r0, [pc, #472]	@ (8001858 <main+0x2e4>)
  hi2c1.Instance = I2C1;
 800167e:	4d77      	ldr	r5, [pc, #476]	@ (800185c <main+0x2e8>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001680:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001686:	f001 f9c7 	bl	8002a18 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x60808CD3;
 800168a:	4a75      	ldr	r2, [pc, #468]	@ (8001860 <main+0x2ec>)
 800168c:	4b75      	ldr	r3, [pc, #468]	@ (8001864 <main+0x2f0>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168e:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x60808CD3;
 8001690:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001694:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001698:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a2:	f001 fa8d 	bl	8002bc0 <HAL_I2C_Init>
 80016a6:	b108      	cbz	r0, 80016ac <main+0x138>
 80016a8:	b672      	cpsid	i
  while (1)
 80016aa:	e7fe      	b.n	80016aa <main+0x136>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ac:	4601      	mov	r1, r0
 80016ae:	4628      	mov	r0, r5
 80016b0:	f001 fae0 	bl	8002c74 <HAL_I2CEx_ConfigAnalogFilter>
 80016b4:	b108      	cbz	r0, 80016ba <main+0x146>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0x144>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ba:	4601      	mov	r1, r0
 80016bc:	4628      	mov	r0, r5
 80016be:	f001 fb03 	bl	8002cc8 <HAL_I2CEx_ConfigDigitalFilter>
 80016c2:	b108      	cbz	r0, 80016c8 <main+0x154>
 80016c4:	b672      	cpsid	i
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <main+0x152>
  huart3.Instance = USART3;
 80016c8:	4c67      	ldr	r4, [pc, #412]	@ (8001868 <main+0x2f4>)
 80016ca:	4a68      	ldr	r2, [pc, #416]	@ (800186c <main+0x2f8>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016cc:	270c      	movs	r7, #12
  huart3.Instance = USART3;
 80016ce:	6022      	str	r2, [r4, #0]
  huart3.Init.BaudRate = 115200;
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d4:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016dc:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e0:	60a0      	str	r0, [r4, #8]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e2:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016e4:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 115200;
 80016e6:	6062      	str	r2, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	6167      	str	r7, [r4, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ea:	f005 fbf1 	bl	8006ed0 <HAL_UART_Init>
 80016ee:	4601      	mov	r1, r0
 80016f0:	b108      	cbz	r0, 80016f6 <main+0x182>
 80016f2:	b672      	cpsid	i
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <main+0x180>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f6:	4620      	mov	r0, r4
 80016f8:	f005 fdba 	bl	8007270 <HAL_UARTEx_SetTxFifoThreshold>
 80016fc:	4601      	mov	r1, r0
 80016fe:	b108      	cbz	r0, 8001704 <main+0x190>
 8001700:	b672      	cpsid	i
  while (1)
 8001702:	e7fe      	b.n	8001702 <main+0x18e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001704:	4620      	mov	r0, r4
 8001706:	f005 fdf5 	bl	80072f4 <HAL_UARTEx_SetRxFifoThreshold>
 800170a:	b108      	cbz	r0, 8001710 <main+0x19c>
 800170c:	b672      	cpsid	i
  while (1)
 800170e:	e7fe      	b.n	800170e <main+0x19a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001710:	4620      	mov	r0, r4
 8001712:	f005 fd8f 	bl	8007234 <HAL_UARTEx_DisableFifoMode>
 8001716:	4605      	mov	r5, r0
 8001718:	b108      	cbz	r0, 800171e <main+0x1aa>
 800171a:	b672      	cpsid	i
  while (1)
 800171c:	e7fe      	b.n	800171c <main+0x1a8>
  ADC_ChannelConfTypeDef sConfig = {0};
 800171e:	4601      	mov	r1, r0
 8001720:	2220      	movs	r2, #32
 8001722:	a80a      	add	r0, sp, #40	@ 0x28
 8001724:	f00b ff33 	bl	800d58e <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001728:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  hadc1.Instance = ADC1;
 800172c:	4c50      	ldr	r4, [pc, #320]	@ (8001870 <main+0x2fc>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172e:	e9c4 3501 	strd	r3, r5, [r4, #4]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001736:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800173a:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800173e:	8325      	strh	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001740:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001744:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001748:	6325      	str	r5, [r4, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 800174a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174e:	2504      	movs	r5, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001750:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Instance = ADC1;
 8001752:	4b48      	ldr	r3, [pc, #288]	@ (8001874 <main+0x300>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001754:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001756:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 1;
 8001758:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800175a:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800175c:	f000 fadc 	bl	8001d18 <HAL_ADC_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	b108      	cbz	r0, 8001768 <main+0x1f4>
 8001764:	b672      	cpsid	i
  while (1)
 8001766:	e7fe      	b.n	8001766 <main+0x1f2>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001768:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176a:	2206      	movs	r2, #6
  sConfig.Offset = 0;
 800176c:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800176e:	247f      	movs	r4, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001770:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001772:	a90a      	add	r1, sp, #40	@ 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001774:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
  sConfig.Channel = ADC_CHANNEL_0;
 8001778:	960a      	str	r6, [sp, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800177a:	950e      	str	r5, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800177c:	940d      	str	r4, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177e:	f000 fc23 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	b108      	cbz	r0, 800178a <main+0x216>
 8001786:	b672      	cpsid	i
  while (1)
 8001788:	e7fe      	b.n	8001788 <main+0x214>
  huart2.Init.BaudRate = 921600;
 800178a:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
  huart2.Instance = USART2;
 800178e:	483a      	ldr	r0, [pc, #232]	@ (8001878 <main+0x304>)
 8001790:	493a      	ldr	r1, [pc, #232]	@ (800187c <main+0x308>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 80017a4:	6001      	str	r1, [r0, #0]
  huart2.Init.BaudRate = 921600;
 80017a6:	6042      	str	r2, [r0, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a8:	f005 fb92 	bl	8006ed0 <HAL_UART_Init>
 80017ac:	b108      	cbz	r0, 80017b2 <main+0x23e>
 80017ae:	b672      	cpsid	i
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <main+0x23c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4830      	ldr	r0, [pc, #192]	@ (8001878 <main+0x304>)
 80017b6:	f005 fd5b 	bl	8007270 <HAL_UARTEx_SetTxFifoThreshold>
 80017ba:	4601      	mov	r1, r0
 80017bc:	b108      	cbz	r0, 80017c2 <main+0x24e>
 80017be:	b672      	cpsid	i
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <main+0x24c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	482d      	ldr	r0, [pc, #180]	@ (8001878 <main+0x304>)
 80017c4:	f005 fd96 	bl	80072f4 <HAL_UARTEx_SetRxFifoThreshold>
 80017c8:	b108      	cbz	r0, 80017ce <main+0x25a>
 80017ca:	b672      	cpsid	i
  while (1)
 80017cc:	e7fe      	b.n	80017cc <main+0x258>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80017ce:	482a      	ldr	r0, [pc, #168]	@ (8001878 <main+0x304>)
 80017d0:	f005 fcf2 	bl	80071b8 <HAL_UARTEx_EnableFifoMode>
 80017d4:	b108      	cbz	r0, 80017da <main+0x266>
 80017d6:	b672      	cpsid	i
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <main+0x264>
  if (HAL_ICACHE_Enable() != HAL_OK)
 80017da:	f001 faa1 	bl	8002d20 <HAL_ICACHE_Enable>
 80017de:	4603      	mov	r3, r0
 80017e0:	b108      	cbz	r0, 80017e6 <main+0x272>
 80017e2:	b672      	cpsid	i
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <main+0x270>
  hdcache1.Instance = DCACHE1;
 80017e6:	4826      	ldr	r0, [pc, #152]	@ (8001880 <main+0x30c>)
 80017e8:	4a26      	ldr	r2, [pc, #152]	@ (8001884 <main+0x310>)
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80017ea:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80017ee:	f001 f8d5 	bl	800299c <HAL_DCACHE_Init>
 80017f2:	4604      	mov	r4, r0
 80017f4:	b108      	cbz	r0, 80017fa <main+0x286>
 80017f6:	b672      	cpsid	i
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <main+0x284>
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 80017fa:	2502      	movs	r5, #2
 80017fc:	4e22      	ldr	r6, [pc, #136]	@ (8001888 <main+0x314>)
  ECGTask_Init();
 80017fe:	f7ff fe1d 	bl	800143c <ECGTask_Init>
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 8001802:	e9cd 5600 	strd	r5, r6, [sp]
 8001806:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800180a:	4623      	mov	r3, r4
 800180c:	491f      	ldr	r1, [pc, #124]	@ (800188c <main+0x318>)
 800180e:	4820      	ldr	r0, [pc, #128]	@ (8001890 <main+0x31c>)
 8001810:	f007 f88c 	bl	800892c <xTaskCreate>
 8001814:	4d1f      	ldr	r5, [pc, #124]	@ (8001894 <main+0x320>)
  configASSERT(status == pdPASS);
 8001816:	2801      	cmp	r0, #1
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 8001818:	6028      	str	r0, [r5, #0]
  configASSERT(status == pdPASS);
 800181a:	d002      	beq.n	8001822 <main+0x2ae>
 800181c:	f008 f876 	bl	800990c <ulSetInterruptMask>
 8001820:	e7fe      	b.n	8001820 <main+0x2ac>
  status = xTaskCreate(ECGSamplingTask, "ECGTask", 8192, NULL, 3, &ecg_handle);
 8001822:	2603      	movs	r6, #3
 8001824:	491c      	ldr	r1, [pc, #112]	@ (8001898 <main+0x324>)
 8001826:	4623      	mov	r3, r4
 8001828:	9101      	str	r1, [sp, #4]
 800182a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800182e:	491b      	ldr	r1, [pc, #108]	@ (800189c <main+0x328>)
 8001830:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <main+0x32c>)
 8001832:	9600      	str	r6, [sp, #0]
 8001834:	f007 f87a 	bl	800892c <xTaskCreate>
  configASSERT(status == pdPASS);
 8001838:	2801      	cmp	r0, #1
  status = xTaskCreate(ECGSamplingTask, "ECGTask", 8192, NULL, 3, &ecg_handle);
 800183a:	6028      	str	r0, [r5, #0]
  configASSERT(status == pdPASS);
 800183c:	d002      	beq.n	8001844 <main+0x2d0>
 800183e:	f008 f865 	bl	800990c <ulSetInterruptMask>
 8001842:	e7fe      	b.n	8001842 <main+0x2ce>
  vTaskStartScheduler();
 8001844:	f007 f9e6 	bl	8008c14 <vTaskStartScheduler>
  while (1)
 8001848:	e7fe      	b.n	8001848 <main+0x2d4>
 800184a:	bf00      	nop
 800184c:	44020c00 	.word	0x44020c00
 8001850:	42021400 	.word	0x42021400
 8001854:	42020400 	.word	0x42020400
 8001858:	42021800 	.word	0x42021800
 800185c:	200617f8 	.word	0x200617f8
 8001860:	40005400 	.word	0x40005400
 8001864:	60808cd3 	.word	0x60808cd3
 8001868:	200616d0 	.word	0x200616d0
 800186c:	40004800 	.word	0x40004800
 8001870:	20061878 	.word	0x20061878
 8001874:	42028000 	.word	0x42028000
 8001878:	20061764 	.word	0x20061764
 800187c:	40004400 	.word	0x40004400
 8001880:	2006184c 	.word	0x2006184c
 8001884:	40031400 	.word	0x40031400
 8001888:	200616cc 	.word	0x200616cc
 800188c:	0800f840 	.word	0x0800f840
 8001890:	08001461 	.word	0x08001461
 8001894:	200616c4 	.word	0x200616c4
 8001898:	200616c8 	.word	0x200616c8
 800189c:	0800f84c 	.word	0x0800f84c
 80018a0:	08000f49 	.word	0x08000f49

080018a4 <Error_Handler>:
 80018a4:	b672      	cpsid	i
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <Error_Handler+0x2>

080018a8 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0000      	movs	r0, r0
	...

080018b0 <HAL_ADC_MspInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	2300      	movs	r3, #0
{
 80018b2:	b500      	push	{lr}
  if(hadc->Instance==ADC1)
 80018b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018b6:	6801      	ldr	r1, [r0, #0]
{
 80018b8:	b089      	sub	sp, #36	@ 0x24
  if(hadc->Instance==ADC1)
 80018ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80018c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80018c4:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 80018c6:	d002      	beq.n	80018ce <HAL_ADC_MspInit+0x1e>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018c8:	b009      	add	sp, #36	@ 0x24
 80018ca:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ce:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8001918 <HAL_ADC_MspInit+0x68>
    __HAL_RCC_ADC_CLK_ENABLE();
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <HAL_ADC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	4814      	ldr	r0, [pc, #80]	@ (8001928 <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80018d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC_CLK_ENABLE();
 80018dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80018e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80018e8:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80018ec:	9200      	str	r2, [sp, #0]
 80018ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80018fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001900:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f001 f884 	bl	8002a18 <HAL_GPIO_Init>
}
 8001910:	b009      	add	sp, #36	@ 0x24
 8001912:	f85d fb04 	ldr.w	pc, [sp], #4
 8001916:	bf00      	nop
 8001918:	00000001 	.word	0x00000001
 800191c:	00000003 	.word	0x00000003
 8001920:	42028000 	.word	0x42028000
 8001924:	44020c00 	.word	0x44020c00
 8001928:	42020000 	.word	0x42020000

0800192c <HAL_DCACHE_MspInit>:
  * @param hdcache: DCACHE handle pointer
  * @retval None
  */
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
  if(hdcache->Instance==DCACHE1)
 800192c:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_DCACHE_MspInit+0x2c>)
 800192e:	6802      	ldr	r2, [r0, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d000      	beq.n	8001936 <HAL_DCACHE_MspInit+0xa>
 8001934:	4770      	bx	lr
  {
    /* USER CODE BEGIN DCACHE1_MspInit 0 */

    /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_DCACHE_MspInit+0x30>)
{
 8001938:	b082      	sub	sp, #8
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800193a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800193e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END DCACHE1_MspInit 1 */

  }

}
 8001952:	b002      	add	sp, #8
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40031400 	.word	0x40031400
 800195c:	44020c00 	.word	0x44020c00

08001960 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001960:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	2100      	movs	r1, #0
{
 8001964:	4604      	mov	r4, r0
 8001966:	b0ca      	sub	sp, #296	@ 0x128
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800196c:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001972:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001976:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001978:	f00b fe09 	bl	800d58e <memset>
  if(hi2c->Instance==I2C1)
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <HAL_I2C_MspInit+0x94>)
 800197e:	6822      	ldr	r2, [r4, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_I2C_MspInit+0x28>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001984:	b04a      	add	sp, #296	@ 0x128
 8001986:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001990:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001994:	f002 f92c 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	bb40      	cbnz	r0, 80019ec <HAL_I2C_MspInit+0x8c>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800199a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4c16      	ldr	r4, [pc, #88]	@ (80019f8 <HAL_I2C_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199e:	20c0      	movs	r0, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a4:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 80019ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b2:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ba:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019be:	2300      	movs	r3, #0
 80019c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	480d      	ldr	r0, [pc, #52]	@ (80019fc <HAL_I2C_MspInit+0x9c>)
 80019c6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f001 f824 	bl	8002a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80019d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019d8:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80019dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	9b01      	ldr	r3, [sp, #4]
}
 80019e8:	b04a      	add	sp, #296	@ 0x128
 80019ea:	bd10      	pop	{r4, pc}
      Error_Handler();
 80019ec:	f7ff ff5a 	bl	80018a4 <Error_Handler>
 80019f0:	e7d3      	b.n	800199a <HAL_I2C_MspInit+0x3a>
 80019f2:	bf00      	nop
 80019f4:	40005400 	.word	0x40005400
 80019f8:	44020c00 	.word	0x44020c00
 80019fc:	42020400 	.word	0x42020400

08001a00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	2100      	movs	r1, #0
{
 8001a04:	4604      	mov	r4, r0
 8001a06:	b0cc      	sub	sp, #304	@ 0x130
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a08:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001a0c:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001a12:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001a16:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f00b fdb9 	bl	800d58e <memset>
  if(huart->Instance==USART2)
 8001a1c:	4a39      	ldr	r2, [pc, #228]	@ (8001b04 <HAL_UART_MspInit+0x104>)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_UART_MspInit+0x2e>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001a24:	4a38      	ldr	r2, [pc, #224]	@ (8001b08 <HAL_UART_MspInit+0x108>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d033      	beq.n	8001a92 <HAL_UART_MspInit+0x92>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a2a:	b04c      	add	sp, #304	@ 0x130
 8001a2c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a2e:	2202      	movs	r2, #2
 8001a30:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a32:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a34:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a38:	f002 f8da 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d15a      	bne.n	8001af6 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a40:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a42:	2000      	movs	r0, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a44:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a48:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001a4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001a52:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001a56:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6e:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	4823      	ldr	r0, [pc, #140]	@ (8001b10 <HAL_UART_MspInit+0x110>)
 8001a82:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a84:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a88:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f000 ffc5 	bl	8002a18 <HAL_GPIO_Init>
}
 8001a8e:	b04c      	add	sp, #304	@ 0x130
 8001a90:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a92:	2204      	movs	r2, #4
 8001a94:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a98:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f002 f8a8 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001aa0:	bb60      	cbnz	r0, 8001afc <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa4:	2000      	movs	r0, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aaa:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001ab0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001ab4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001ab8:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001abc:	9202      	str	r2, [sp, #8]
 8001abe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001ac4:	f042 0208 	orr.w	r2, r2, #8
 8001ac8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ad0:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	9303      	str	r3, [sp, #12]
 8001ada:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001adc:	2100      	movs	r1, #0
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <HAL_UART_MspInit+0x114>)
 8001ae6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aec:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f000 ff93 	bl	8002a18 <HAL_GPIO_Init>
}
 8001af2:	b04c      	add	sp, #304	@ 0x130
 8001af4:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001af6:	f7ff fed5 	bl	80018a4 <Error_Handler>
 8001afa:	e7a1      	b.n	8001a40 <HAL_UART_MspInit+0x40>
      Error_Handler();
 8001afc:	f7ff fed2 	bl	80018a4 <Error_Handler>
 8001b00:	e7cf      	b.n	8001aa2 <HAL_UART_MspInit+0xa2>
 8001b02:	bf00      	nop
 8001b04:	40004400 	.word	0x40004400
 8001b08:	40004800 	.word	0x40004800
 8001b0c:	44020c00 	.word	0x44020c00
 8001b10:	42020000 	.word	0x42020000
 8001b14:	42020c00 	.word	0x42020c00

08001b18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler>
 8001b1a:	bf00      	nop

08001b1c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <HardFault_Handler>
 8001b1e:	bf00      	nop

08001b20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler>
 8001b22:	bf00      	nop

08001b24 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <BusFault_Handler>
 8001b26:	bf00      	nop

08001b28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler>
 8001b2a:	bf00      	nop

08001b2c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b30:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b32:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 8001b34:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b36:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b3a:	491d      	ldr	r1, [pc, #116]	@ (8001bb0 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001b3c:	4c1d      	ldr	r4, [pc, #116]	@ (8001bb4 <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
  RCC->PLL1DIVR = 0x01010280U;
 8001b42:	481d      	ldr	r0, [pc, #116]	@ (8001bb8 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR = RCC_CR_HSION;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001b4e:	4d1c      	ldr	r5, [pc, #112]	@ (8001bc0 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 8001b50:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 8001b52:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b54:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001b56:	681f      	ldr	r7, [r3, #0]
 8001b58:	403c      	ands	r4, r7
 8001b5a:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL3CFGR = 0U;
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1DIVR = 0x01010280U;
 8001b62:	6358      	str	r0, [r3, #52]	@ 0x34
  RCC->PLL1FRACR = 0x00000000U;
 8001b64:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2DIVR = 0x01010280U;
 8001b66:	63d8      	str	r0, [r3, #60]	@ 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3DIVR = 0x01010280U;
 8001b6a:	6458      	str	r0, [r3, #68]	@ 0x44
  RCC->PLL3FRACR = 0x00000000U;
 8001b6c:	649a      	str	r2, [r3, #72]	@ 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001b74:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 8001b76:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b78:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001b7a:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001b7c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001b80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b84:	d001      	beq.n	8001b8a <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 8001b86:	bcf0      	pop	{r4, r5, r6, r7}
 8001b88:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001b8a:	69eb      	ldr	r3, [r5, #28]
 8001b8c:	07db      	lsls	r3, r3, #31
 8001b8e:	d503      	bpl.n	8001b98 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 8001b94:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001b96:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <SystemInit+0x90>)
}
 8001b9a:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	f042 0202 	orr.w	r2, r2, #2
 8001ba2:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	61da      	str	r2, [r3, #28]
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	eae2eae3 	.word	0xeae2eae3
 8001bb8:	01010280 	.word	0x01010280
 8001bbc:	44020c00 	.word	0x44020c00
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	08192a3b 	.word	0x08192a3b
 8001bc8:	4c5d6e7f 	.word	0x4c5d6e7f

08001bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd0:	f7ff ffae 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopForever+0xe>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopForever+0x16>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bfa:	f00b fd8f 	bl	800d71c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7ff fcb9 	bl	8001574 <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   r0, =_estack
 8001c04:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20001144 	.word	0x20001144
  ldr r2, =_sidata
 8001c10:	0801e934 	.word	0x0801e934
  ldr r2, =_sbss
 8001c14:	20001148 	.word	0x20001148
  ldr r4, =_ebss
 8001c18:	2007b0c0 	.word	0x2007b0c0

08001c1c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_IRQHandler>
	...

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c22:	4e24      	ldr	r6, [pc, #144]	@ (8001cb4 <HAL_InitTick+0x94>)
 8001c24:	7832      	ldrb	r2, [r6, #0]
 8001c26:	b1ea      	cbz	r2, 8001c64 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001c2c:	691c      	ldr	r4, [r3, #16]
 8001c2e:	4605      	mov	r5, r0
 8001c30:	f014 0404 	ands.w	r4, r4, #4
 8001c34:	d018      	beq.n	8001c68 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c36:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c3a:	fbb1 f2f2 	udiv	r2, r1, r2
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_InitTick+0x98>)
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001c46:	4620      	mov	r0, r4
 8001c48:	f000 fe36 	bl	80028b8 <HAL_SYSTICK_Config>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	b948      	cbnz	r0, 8001c64 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	4602      	mov	r2, r0
 8001c52:	4629      	mov	r1, r5
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f000 fdf2 	bl	8002840 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_InitTick+0x9c>)
 8001c5e:	4620      	mov	r0, r4
 8001c60:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
}
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c68:	f000 fe74 	bl	8002954 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8001c6c:	2801      	cmp	r0, #1
 8001c6e:	d00d      	beq.n	8001c8c <HAL_InitTick+0x6c>
 8001c70:	2802      	cmp	r0, #2
 8001c72:	d015      	beq.n	8001ca0 <HAL_InitTick+0x80>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d1e6      	bne.n	8001c46 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001c78:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001c7c:	7831      	ldrb	r1, [r6, #0]
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_InitTick+0x98>)
 8001c80:	fbb2 f2f1 	udiv	r2, r2, r1
 8001c84:	681c      	ldr	r4, [r3, #0]
 8001c86:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 8001c8a:	e7dc      	b.n	8001c46 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c90:	7831      	ldrb	r1, [r6, #0]
 8001c92:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8001c96:	fbb2 f2f1 	udiv	r2, r2, r1
 8001c9a:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001c9e:	e7d2      	b.n	8001c46 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ca0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ca4:	7831      	ldrb	r1, [r6, #0]
 8001ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001caa:	fbb2 f2f1 	udiv	r2, r2, r1
 8001cae:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001cb2:	e7c8      	b.n	8001c46 <HAL_InitTick+0x26>
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_Init>:
{
 8001cc0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f000 fdaa 	bl	800281c <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cc8:	f001 fd74 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <HAL_Init+0x40>)
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <HAL_Init+0x44>)
 8001cd2:	6a12      	ldr	r2, [r2, #32]
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <HAL_Init+0x48>)
 8001cd6:	f002 020f 	and.w	r2, r2, #15
 8001cda:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001cdc:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cde:	40d3      	lsrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ce2:	f000 fdf9 	bl	80028d8 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f7ff ff9a 	bl	8001c20 <HAL_InitTick>
 8001cec:	b110      	cbz	r0, 8001cf4 <HAL_Init+0x34>
    return HAL_ERROR;
 8001cee:	2401      	movs	r4, #1
}
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	4604      	mov	r4, r0
  HAL_MspInit();
 8001cf6:	f7ff fdd7 	bl	80018a8 <HAL_MspInit>
}
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	bd10      	pop	{r4, pc}
 8001cfe:	bf00      	nop
 8001d00:	44020c00 	.word	0x44020c00
 8001d04:	0800f8cc 	.word	0x0800f8cc
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d0c:	4b01      	ldr	r3, [pc, #4]	@ (8001d14 <HAL_GetTick+0x8>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200618e0 	.word	0x200618e0

08001d18 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d18:	2300      	movs	r3, #0
{
 8001d1a:	b530      	push	{r4, r5, lr}
 8001d1c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001d1e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d20:	2800      	cmp	r0, #0
 8001d22:	f000 809c 	beq.w	8001e5e <HAL_ADC_Init+0x146>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d26:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001d28:	4604      	mov	r4, r0
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	f000 809c 	beq.w	8001e68 <HAL_ADC_Init+0x150>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d30:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d32:	6893      	ldr	r3, [r2, #8]
 8001d34:	009d      	lsls	r5, r3, #2
 8001d36:	d505      	bpl.n	8001d44 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d38:	6893      	ldr	r3, [r2, #8]
 8001d3a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d42:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	6893      	ldr	r3, [r2, #8]
 8001d46:	00d8      	lsls	r0, r3, #3
 8001d48:	d419      	bmi.n	8001d7e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ebc <HAL_ADC_Init+0x1a4>)
 8001d4c:	485c      	ldr	r0, [pc, #368]	@ (8001ec0 <HAL_ADC_Init+0x1a8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001d50:	6891      	ldr	r1, [r2, #8]
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	fba0 0303 	umull	r0, r3, r0, r3
 8001d58:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001d6a:	6091      	str	r1, [r2, #8]
 8001d6c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001d6e:	9b01      	ldr	r3, [sp, #4]
 8001d70:	b12b      	cbz	r3, 8001d7e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8001d72:	9b01      	ldr	r3, [sp, #4]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001d78:	9b01      	ldr	r3, [sp, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7e:	6893      	ldr	r3, [r2, #8]
 8001d80:	00d9      	lsls	r1, r3, #3
 8001d82:	d46f      	bmi.n	8001e64 <HAL_ADC_Init+0x14c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001d90:	4303      	orrs	r3, r0
 8001d92:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d94:	6893      	ldr	r3, [r2, #8]
 8001d96:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d9c:	d15b      	bne.n	8001e56 <HAL_ADC_Init+0x13e>
 8001d9e:	06db      	lsls	r3, r3, #27
 8001da0:	d459      	bmi.n	8001e56 <HAL_ADC_Init+0x13e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001da4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dae:	6893      	ldr	r3, [r2, #8]
 8001db0:	07dd      	lsls	r5, r3, #31
 8001db2:	d408      	bmi.n	8001dc6 <HAL_ADC_Init+0xae>
 8001db4:	4b43      	ldr	r3, [pc, #268]	@ (8001ec4 <HAL_ADC_Init+0x1ac>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f013 0f01 	tst.w	r3, #1
 8001dbc:	4b42      	ldr	r3, [pc, #264]	@ (8001ec8 <HAL_ADC_Init+0x1b0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0xae>
 8001dc2:	07d9      	lsls	r1, r3, #31
 8001dc4:	d563      	bpl.n	8001e8e <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8001dc6:	68e5      	ldr	r5, [r4, #12]
 8001dc8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dca:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8001dce:	432b      	orrs	r3, r5
 8001dd0:	68a5      	ldr	r5, [r4, #8]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd2:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8001dd4:	ea43 0305 	orr.w	r3, r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	7e65      	ldrb	r5, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 8001dda:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de2:	d04f      	beq.n	8001e84 <HAL_ADC_Init+0x16c>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001de6:	b121      	cbz	r1, 8001df2 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8001de8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dea:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001dee:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df0:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001df2:	68d5      	ldr	r5, [r2, #12]
 8001df4:	4935      	ldr	r1, [pc, #212]	@ (8001ecc <HAL_ADC_Init+0x1b4>)
 8001df6:	4029      	ands	r1, r5
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001dfc:	6913      	ldr	r3, [r2, #16]
 8001dfe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001e00:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e08:	6893      	ldr	r3, [r2, #8]
 8001e0a:	071b      	lsls	r3, r3, #28
 8001e0c:	d414      	bmi.n	8001e38 <HAL_ADC_Init+0x120>
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e0e:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e10:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e14:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e16:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e1a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e1c:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (
 8001e20:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e24:	430b      	orrs	r3, r1
 8001e26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e28:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d036      	beq.n	8001e9e <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e30:	6913      	ldr	r3, [r2, #16]
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e38:	6923      	ldr	r3, [r4, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d01a      	beq.n	8001e74 <HAL_ADC_Init+0x15c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e3e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001e40:	f023 030f 	bic.w	r3, r3, #15
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001e52:	b003      	add	sp, #12
 8001e54:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	b003      	add	sp, #12
 8001e62:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2000      	movs	r0, #0
 8001e66:	e795      	b.n	8001d94 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8001e68:	f7ff fd22 	bl	80018b0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001e6e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8001e72:	e75d      	b.n	8001d30 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e74:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001e76:	69e3      	ldr	r3, [r4, #28]
 8001e78:	f021 010f 	bic.w	r1, r1, #15
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	e7e0      	b.n	8001e46 <HAL_ADC_Init+0x12e>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001e86:	3901      	subs	r1, #1
 8001e88:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001e8c:	e7aa      	b.n	8001de4 <HAL_ADC_Init+0xcc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8e:	4910      	ldr	r1, [pc, #64]	@ (8001ed0 <HAL_ADC_Init+0x1b8>)
 8001e90:	6865      	ldr	r5, [r4, #4]
 8001e92:	688b      	ldr	r3, [r1, #8]
 8001e94:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001e98:	432b      	orrs	r3, r5
 8001e9a:	608b      	str	r3, [r1, #8]
}
 8001e9c:	e793      	b.n	8001dc6 <HAL_ADC_Init+0xae>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e9e:	6911      	ldr	r1, [r2, #16]
 8001ea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ea2:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001ea4:	f36f 018a 	bfc	r1, #2, #9
 8001ea8:	432b      	orrs	r3, r5
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6113      	str	r3, [r2, #16]
 8001eba:	e7bd      	b.n	8001e38 <HAL_ADC_Init+0x120>
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	053e2d63 	.word	0x053e2d63
 8001ec4:	42028000 	.word	0x42028000
 8001ec8:	42028100 	.word	0x42028100
 8001ecc:	fff04007 	.word	0xfff04007
 8001ed0:	42028300 	.word	0x42028300

08001ed4 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ed4:	4a37      	ldr	r2, [pc, #220]	@ (8001fb4 <HAL_ADC_PollForConversion+0xe0>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001eda:	6944      	ldr	r4, [r0, #20]
 8001edc:	6896      	ldr	r6, [r2, #8]
 8001ede:	2c08      	cmp	r4, #8
{
 8001ee0:	4605      	mov	r5, r0
 8001ee2:	460f      	mov	r7, r1
 8001ee4:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ee8:	d014      	beq.n	8001f14 <HAL_ADC_PollForConversion+0x40>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eea:	f240 2321 	movw	r3, #545	@ 0x221
 8001eee:	40f3      	lsrs	r3, r6
 8001ef0:	07d9      	lsls	r1, r3, #31
 8001ef2:	d40a      	bmi.n	8001f0a <HAL_ADC_PollForConversion+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ef4:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ef6:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8001efa:	d00a      	beq.n	8001f12 <HAL_ADC_PollForConversion+0x3e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        return HAL_ERROR;
 8001efe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	65ab      	str	r3, [r5, #88]	@ 0x58
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8001f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f0a:	6803      	ldr	r3, [r0, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	07da      	lsls	r2, r3, #31
 8001f10:	d4f4      	bmi.n	8001efc <HAL_ADC_PollForConversion+0x28>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f12:	2404      	movs	r4, #4
  tickstart = HAL_GetTick();
 8001f14:	f7ff fefa 	bl	8001d0c <HAL_GetTick>
 8001f18:	1c7b      	adds	r3, r7, #1
 8001f1a:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f1c:	682a      	ldr	r2, [r5, #0]
 8001f1e:	d133      	bne.n	8001f88 <HAL_ADC_PollForConversion+0xb4>
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	4223      	tst	r3, r4
 8001f24:	d0fc      	beq.n	8001f20 <HAL_ADC_PollForConversion+0x4c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f26:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2c:	65ab      	str	r3, [r5, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f2e:	68d3      	ldr	r3, [r2, #12]
 8001f30:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 8001f34:	d10f      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x82>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f36:	7e6b      	ldrb	r3, [r5, #25]
 8001f38:	b96b      	cbnz	r3, 8001f56 <HAL_ADC_PollForConversion+0x82>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	071f      	lsls	r7, r3, #28
 8001f3e:	d50a      	bpl.n	8001f56 <HAL_ADC_PollForConversion+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f40:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001f42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f46:	65ab      	str	r3, [r5, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f48:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001f4a:	04d8      	lsls	r0, r3, #19
 8001f4c:	d403      	bmi.n	8001f56 <HAL_ADC_PollForConversion+0x82>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	65ab      	str	r3, [r5, #88]	@ 0x58
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_ADC_PollForConversion+0xe4>)
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d009      	beq.n	8001f70 <HAL_ADC_PollForConversion+0x9c>
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f5c:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f5e:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f60:	d00f      	beq.n	8001f82 <HAL_ADC_PollForConversion+0xae>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f62:	045b      	lsls	r3, r3, #17
 8001f64:	d401      	bmi.n	8001f6a <HAL_ADC_PollForConversion+0x96>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f66:	230c      	movs	r3, #12
 8001f68:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001f6a:	2000      	movs	r0, #0
}
 8001f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f70:	f240 2321 	movw	r3, #545	@ 0x221
 8001f74:	40f3      	lsrs	r3, r6
 8001f76:	07d9      	lsls	r1, r3, #31
 8001f78:	d4f0      	bmi.n	8001f5c <HAL_ADC_PollForConversion+0x88>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_ADC_PollForConversion+0xe8>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f7c:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f7e:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f80:	d1ef      	bne.n	8001f62 <HAL_ADC_PollForConversion+0x8e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f82:	6014      	str	r4, [r2, #0]
 8001f84:	e7f1      	b.n	8001f6a <HAL_ADC_PollForConversion+0x96>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f86:	b14f      	cbz	r7, 8001f9c <HAL_ADC_PollForConversion+0xc8>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	4223      	tst	r3, r4
 8001f8c:	d1cb      	bne.n	8001f26 <HAL_ADC_PollForConversion+0x52>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f8e:	f7ff febd 	bl	8001d0c <HAL_GetTick>
 8001f92:	eba0 0308 	sub.w	r3, r0, r8
 8001f96:	42bb      	cmp	r3, r7
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f98:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f9a:	d9f4      	bls.n	8001f86 <HAL_ADC_PollForConversion+0xb2>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	4023      	ands	r3, r4
 8001fa0:	d1f2      	bne.n	8001f88 <HAL_ADC_PollForConversion+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa2:	6daa      	ldr	r2, [r5, #88]	@ 0x58
          return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa6:	f042 0204 	orr.w	r2, r2, #4
 8001faa:	65aa      	str	r2, [r5, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8001fac:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8001fb0:	e7dc      	b.n	8001f6c <HAL_ADC_PollForConversion+0x98>
 8001fb2:	bf00      	nop
 8001fb4:	42028300 	.word	0x42028300
 8001fb8:	42028100 	.word	0x42028100
 8001fbc:	42028000 	.word	0x42028000

08001fc0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fc0:	6803      	ldr	r3, [r0, #0]
 8001fc2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc8:	2200      	movs	r2, #0
{
 8001fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fce:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001fd0:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd2:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8001fd6:	2a01      	cmp	r2, #1
 8001fd8:	f000 812f 	beq.w	800223a <HAL_ADC_ConfigChannel+0x272>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001fe2:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe6:	6894      	ldr	r4, [r2, #8]
 8001fe8:	0764      	lsls	r4, r4, #29
 8001fea:	d509      	bpl.n	8002000 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8001ffa:	b002      	add	sp, #8
 8001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8002000:	6808      	ldr	r0, [r1, #0]
 8002002:	2801      	cmp	r0, #1
 8002004:	f000 80ae 	beq.w	8002164 <HAL_ADC_ConfigChannel+0x19c>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8002008:	4cac      	ldr	r4, [pc, #688]	@ (80022bc <HAL_ADC_ConfigChannel+0x2f4>)
 800200a:	42a0      	cmp	r0, r4
 800200c:	f000 80a5 	beq.w	800215a <HAL_ADC_ConfigChannel+0x192>
  MODIFY_REG(*preg,
 8002010:	f04f 0c1f 	mov.w	ip, #31
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002014:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002016:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 800201a:	ea4f 1e94 	mov.w	lr, r4, lsr #6
 800201e:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8002022:	ea04 040c 	and.w	r4, r4, ip
 8002026:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800202a:	40a0      	lsls	r0, r4
 800202c:	fa0c fc04 	lsl.w	ip, ip, r4
 8002030:	f855 400e 	ldr.w	r4, [r5, lr]
 8002034:	ea24 0c0c 	bic.w	ip, r4, ip
 8002038:	ea4c 0000 	orr.w	r0, ip, r0
 800203c:	f845 000e 	str.w	r0, [r5, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002040:	6890      	ldr	r0, [r2, #8]
 8002042:	0740      	lsls	r0, r0, #29
 8002044:	d537      	bpl.n	80020b6 <HAL_ADC_ConfigChannel+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002046:	6890      	ldr	r0, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002048:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800204a:	6894      	ldr	r4, [r2, #8]
 800204c:	07e6      	lsls	r6, r4, #31
 800204e:	d412      	bmi.n	8002076 <HAL_ADC_ConfigChannel+0xae>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002050:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002052:	4c9b      	ldr	r4, [pc, #620]	@ (80022c0 <HAL_ADC_ConfigChannel+0x2f8>)
 8002054:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8002058:	f006 0718 	and.w	r7, r6, #24
 800205c:	40fc      	lsrs	r4, r7
 800205e:	f3c0 0713 	ubfx	r7, r0, #0, #20
 8002062:	4004      	ands	r4, r0
 8002064:	ea25 0507 	bic.w	r5, r5, r7
 8002068:	432c      	orrs	r4, r5
 800206a:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800206e:	4c95      	ldr	r4, [pc, #596]	@ (80022c4 <HAL_ADC_ConfigChannel+0x2fc>)
 8002070:	42a6      	cmp	r6, r4
 8002072:	f000 809f 	beq.w	80021b4 <HAL_ADC_ConfigChannel+0x1ec>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002076:	4994      	ldr	r1, [pc, #592]	@ (80022c8 <HAL_ADC_ConfigChannel+0x300>)
 8002078:	4208      	tst	r0, r1
 800207a:	d01a      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800207c:	4c93      	ldr	r4, [pc, #588]	@ (80022cc <HAL_ADC_ConfigChannel+0x304>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207e:	4d94      	ldr	r5, [pc, #592]	@ (80022d0 <HAL_ADC_ConfigChannel+0x308>)
 8002080:	68a1      	ldr	r1, [r4, #8]
 8002082:	42a8      	cmp	r0, r5
 8002084:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8002088:	d074      	beq.n	8002174 <HAL_ADC_ConfigChannel+0x1ac>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800208a:	4d92      	ldr	r5, [pc, #584]	@ (80022d4 <HAL_ADC_ConfigChannel+0x30c>)
 800208c:	42a8      	cmp	r0, r5
 800208e:	f000 80d8 	beq.w	8002242 <HAL_ADC_ConfigChannel+0x27a>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002092:	4d91      	ldr	r5, [pc, #580]	@ (80022d8 <HAL_ADC_ConfigChannel+0x310>)
 8002094:	42a8      	cmp	r0, r5
 8002096:	f000 80e3 	beq.w	8002260 <HAL_ADC_ConfigChannel+0x298>
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800209a:	4990      	ldr	r1, [pc, #576]	@ (80022dc <HAL_ADC_ConfigChannel+0x314>)
 800209c:	4288      	cmp	r0, r1
 800209e:	d108      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VDDCORE_INSTANCE(hadc))
 80020a0:	498f      	ldr	r1, [pc, #572]	@ (80022e0 <HAL_ADC_ConfigChannel+0x318>)
 80020a2:	428a      	cmp	r2, r1
 80020a4:	d005      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80020a6:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 80020aa:	f041 0101 	orr.w	r1, r1, #1
 80020ae:	f8c2 10c8 	str.w	r1, [r2, #200]	@ 0xc8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e79e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x2c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b6:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020b8:	6808      	ldr	r0, [r1, #0]
 80020ba:	0727      	lsls	r7, r4, #28
 80020bc:	d4c5      	bmi.n	800204a <HAL_ADC_ConfigChannel+0x82>
  MODIFY_REG(*preg,
 80020be:	2407      	movs	r4, #7
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020c0:	688d      	ldr	r5, [r1, #8]
 80020c2:	f3c0 5604 	ubfx	r6, r0, #20, #5
 80020c6:	40b4      	lsls	r4, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020c8:	0dc0      	lsrs	r0, r0, #23
 80020ca:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  MODIFY_REG(*preg,
 80020ce:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020d2:	f000 0004 	and.w	r0, r0, #4
 80020d6:	f000 80e7 	beq.w	80022a8 <HAL_ADC_ConfigChannel+0x2e0>
 80020da:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80020de:	40b5      	lsls	r5, r6
 80020e0:	583e      	ldr	r6, [r7, r0]
 80020e2:	4034      	ands	r4, r6
 80020e4:	432c      	orrs	r4, r5
 80020e6:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020e8:	6950      	ldr	r0, [r2, #20]
 80020ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80020ee:	6150      	str	r0, [r2, #20]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020f0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020f2:	e9d1 7404 	ldrd	r7, r4, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020f6:	2f04      	cmp	r7, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020f8:	4606      	mov	r6, r0
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020fa:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020fc:	f000 80fa 	beq.w	80022f4 <HAL_ADC_ConfigChannel+0x32c>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002100:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8002104:	006d      	lsls	r5, r5, #1
 8002106:	40ac      	lsls	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	f102 0560 	add.w	r5, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800210c:	f855 c027 	ldr.w	ip, [r5, r7, lsl #2]
 8002110:	4e74      	ldr	r6, [pc, #464]	@ (80022e4 <HAL_ADC_ConfigChannel+0x31c>)
 8002112:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002116:	ea0c 0606 	and.w	r6, ip, r6
 800211a:	4306      	orrs	r6, r0
 800211c:	4334      	orrs	r4, r6
 800211e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8002122:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002126:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(*preg,
 8002128:	698e      	ldr	r6, [r1, #24]
 800212a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800212e:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8002132:	4330      	orrs	r0, r6
 8002134:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002138:	7f0c      	ldrb	r4, [r1, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213a:	690e      	ldr	r6, [r1, #16]
 800213c:	f1a4 0401 	sub.w	r4, r4, #1
 8002140:	fab4 f484 	clz	r4, r4
  MODIFY_REG(*preg,
 8002144:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8002148:	0964      	lsrs	r4, r4, #5
 800214a:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800214e:	ea40 6044 	orr.w	r0, r0, r4, lsl #25
 8002152:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002156:	6808      	ldr	r0, [r1, #0]
}
 8002158:	e777      	b.n	800204a <HAL_ADC_ConfigChannel+0x82>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 800215a:	4c5a      	ldr	r4, [pc, #360]	@ (80022c4 <HAL_ADC_ConfigChannel+0x2fc>)
 800215c:	68cd      	ldr	r5, [r1, #12]
 800215e:	42a5      	cmp	r5, r4
 8002160:	f47f af56 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x48>
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8002164:	4d5e      	ldr	r5, [pc, #376]	@ (80022e0 <HAL_ADC_ConfigChannel+0x318>)
 8002166:	f8d5 40c8 	ldr.w	r4, [r5, #200]	@ 0xc8
 800216a:	f044 0401 	orr.w	r4, r4, #1
 800216e:	f8c5 40c8 	str.w	r4, [r5, #200]	@ 0xc8
}
 8002172:	e74d      	b.n	8002010 <HAL_ADC_ConfigChannel+0x48>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002174:	020d      	lsls	r5, r1, #8
 8002176:	d49c      	bmi.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002178:	4959      	ldr	r1, [pc, #356]	@ (80022e0 <HAL_ADC_ConfigChannel+0x318>)
 800217a:	428a      	cmp	r2, r1
 800217c:	d199      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800217e:	68a2      	ldr	r2, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002180:	4959      	ldr	r1, [pc, #356]	@ (80022e8 <HAL_ADC_ConfigChannel+0x320>)
 8002182:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002186:	4332      	orrs	r2, r6
 8002188:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800218c:	60a2      	str	r2, [r4, #8]
 800218e:	680a      	ldr	r2, [r1, #0]
 8002190:	4956      	ldr	r1, [pc, #344]	@ (80022ec <HAL_ADC_ConfigChannel+0x324>)
 8002192:	0992      	lsrs	r2, r2, #6
 8002194:	fba1 1202 	umull	r1, r2, r1, r2
 8002198:	0992      	lsrs	r2, r2, #6
 800219a:	3201      	adds	r2, #1
 800219c:	0052      	lsls	r2, r2, #1
 800219e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80021a0:	9a01      	ldr	r2, [sp, #4]
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d085      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
            wait_loop_index--;
 80021a6:	9a01      	ldr	r2, [sp, #4]
 80021a8:	3a01      	subs	r2, #1
 80021aa:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80021ac:	9a01      	ldr	r2, [sp, #4]
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	d1f9      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x1de>
 80021b2:	e77e      	b.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021b4:	2f00      	cmp	r7, #0
 80021b6:	d062      	beq.n	800227e <HAL_ADC_ConfigChannel+0x2b6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80021bc:	2c00      	cmp	r4, #0
 80021be:	f000 80c4 	beq.w	800234a <HAL_ADC_ConfigChannel+0x382>
  return __builtin_clz(value);
 80021c2:	fab4 f684 	clz	r6, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c6:	3601      	adds	r6, #1
 80021c8:	f006 051f 	and.w	r5, r6, #31
 80021cc:	2d09      	cmp	r5, #9
 80021ce:	f240 80bc 	bls.w	800234a <HAL_ADC_ConfigChannel+0x382>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	fa90 f0a0 	rbit	r0, r0
  return __builtin_clz(value);
 80021d6:	fab4 f584 	clz	r5, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021da:	06b4      	lsls	r4, r6, #26
 80021dc:	2601      	movs	r6, #1
 80021de:	4435      	add	r5, r6
 80021e0:	f005 051f 	and.w	r5, r5, #31
 80021e4:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 80021e8:	fa06 f505 	lsl.w	r5, r6, r5
 80021ec:	432c      	orrs	r4, r5
  if (value == 0U)
 80021ee:	2800      	cmp	r0, #0
 80021f0:	f000 8153 	beq.w	800249a <HAL_ADC_ConfigChannel+0x4d2>
  return __builtin_clz(value);
 80021f4:	fab0 f580 	clz	r5, r0
 80021f8:	f06f 061d 	mvn.w	r6, #29
 80021fc:	2003      	movs	r0, #3
 80021fe:	3501      	adds	r5, #1
 8002200:	f005 051f 	and.w	r5, r5, #31
 8002204:	fb10 6005 	smlabb	r0, r0, r5, r6
 8002208:	0500      	lsls	r0, r0, #20
 800220a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220e:	4320      	orrs	r0, r4
  MODIFY_REG(*preg,
 8002210:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002212:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8002214:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002216:	f005 0504 	and.w	r5, r5, #4
 800221a:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 800221e:	f85c 4005 	ldr.w	r4, [ip, r5]
 8002222:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002226:	4086      	lsls	r6, r0
 8002228:	fa07 f000 	lsl.w	r0, r7, r0
 800222c:	ea24 0000 	bic.w	r0, r4, r0
 8002230:	4330      	orrs	r0, r6
 8002232:	f84c 0005 	str.w	r0, [ip, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002236:	6808      	ldr	r0, [r1, #0]
}
 8002238:	e71d      	b.n	8002076 <HAL_ADC_ConfigChannel+0xae>
  __HAL_LOCK(hadc);
 800223a:	2002      	movs	r0, #2
}
 800223c:	b002      	add	sp, #8
 800223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002242:	01c8      	lsls	r0, r1, #7
 8002244:	f53f af35 	bmi.w	80020b2 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002248:	4929      	ldr	r1, [pc, #164]	@ (80022f0 <HAL_ADC_ConfigChannel+0x328>)
 800224a:	428a      	cmp	r2, r1
 800224c:	f47f af31 	bne.w	80020b2 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002250:	68a2      	ldr	r2, [r4, #8]
 8002252:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002256:	4332      	orrs	r2, r6
 8002258:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800225c:	60a2      	str	r2, [r4, #8]
}
 800225e:	e728      	b.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002260:	0249      	lsls	r1, r1, #9
 8002262:	f53f af26 	bmi.w	80020b2 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002266:	491e      	ldr	r1, [pc, #120]	@ (80022e0 <HAL_ADC_ConfigChannel+0x318>)
 8002268:	428a      	cmp	r2, r1
 800226a:	f47f af22 	bne.w	80020b2 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800226e:	68a2      	ldr	r2, [r4, #8]
 8002270:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002274:	4332      	orrs	r2, r6
 8002276:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800227a:	60a2      	str	r2, [r4, #8]
}
 800227c:	e719      	b.n	80020b2 <HAL_ADC_ConfigChannel+0xea>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227e:	2401      	movs	r4, #1
 8002280:	0e80      	lsrs	r0, r0, #26
 8002282:	3001      	adds	r0, #1
 8002284:	f000 061f 	and.w	r6, r0, #31
 8002288:	0680      	lsls	r0, r0, #26
 800228a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800228e:	40b4      	lsls	r4, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002290:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002292:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8002296:	ea44 0400 	orr.w	r4, r4, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800229a:	d97b      	bls.n	8002394 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800229c:	f1a5 001e 	sub.w	r0, r5, #30
 80022a0:	0500      	lsls	r0, r0, #20
 80022a2:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80022a6:	e7b2      	b.n	800220e <HAL_ADC_ConfigChannel+0x246>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022a8:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80022ac:	5835      	ldr	r5, [r6, r0]
 80022ae:	402c      	ands	r4, r5
 80022b0:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022b2:	6950      	ldr	r0, [r2, #20]
 80022b4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80022b8:	6150      	str	r0, [r2, #20]
}
 80022ba:	e719      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x128>
 80022bc:	04300002 	.word	0x04300002
 80022c0:	000fffff 	.word	0x000fffff
 80022c4:	407f0000 	.word	0x407f0000
 80022c8:	80080000 	.word	0x80080000
 80022cc:	42028300 	.word	0x42028300
 80022d0:	c3210000 	.word	0xc3210000
 80022d4:	43290000 	.word	0x43290000
 80022d8:	c7520000 	.word	0xc7520000
 80022dc:	475a0000 	.word	0x475a0000
 80022e0:	42028000 	.word	0x42028000
 80022e4:	03fff000 	.word	0x03fff000
 80022e8:	20000000 	.word	0x20000000
 80022ec:	053e2d63 	.word	0x053e2d63
 80022f0:	42028100 	.word	0x42028100
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022f4:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 80022f6:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022f8:	f3c0 0513 	ubfx	r5, r0, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022fc:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002300:	2d00      	cmp	r5, #0
 8002302:	d14b      	bne.n	800239c <HAL_ADC_ConfigChannel+0x3d4>
 8002304:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002308:	4284      	cmp	r4, r0
 800230a:	d07f      	beq.n	800240c <HAL_ADC_ConfigChannel+0x444>
 800230c:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800230e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002310:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002314:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002318:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 800231c:	4285      	cmp	r5, r0
 800231e:	f000 80a0 	beq.w	8002462 <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002322:	68a5      	ldr	r5, [r4, #8]
 8002324:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232a:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800232e:	4285      	cmp	r5, r0
 8002330:	f000 8081 	beq.w	8002436 <HAL_ADC_ConfigChannel+0x46e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002334:	68e5      	ldr	r5, [r4, #12]
 8002336:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002338:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800233c:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8002340:	42a0      	cmp	r0, r4
 8002342:	f000 80a4 	beq.w	800248e <HAL_ADC_ConfigChannel+0x4c6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002346:	4630      	mov	r0, r6
 8002348:	e67f      	b.n	800204a <HAL_ADC_ConfigChannel+0x82>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800234e:	2c00      	cmp	r4, #0
 8002350:	f000 80b4 	beq.w	80024bc <HAL_ADC_ConfigChannel+0x4f4>
  return __builtin_clz(value);
 8002354:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002358:	3401      	adds	r4, #1
 800235a:	06a4      	lsls	r4, r4, #26
 800235c:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002364:	2d00      	cmp	r5, #0
 8002366:	f000 80a7 	beq.w	80024b8 <HAL_ADC_ConfigChannel+0x4f0>
 800236a:	2601      	movs	r6, #1
  return __builtin_clz(value);
 800236c:	fab5 f585 	clz	r5, r5
 8002370:	4435      	add	r5, r6
 8002372:	f005 051f 	and.w	r5, r5, #31
 8002376:	fa06 f505 	lsl.w	r5, r6, r5
 800237a:	432c      	orrs	r4, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002380:	2800      	cmp	r0, #0
 8002382:	f000 8096 	beq.w	80024b2 <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 8002386:	fab0 f580 	clz	r5, r0
 800238a:	3501      	adds	r5, #1
 800238c:	f005 051f 	and.w	r5, r5, #31
 8002390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002394:	052d      	lsls	r5, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002396:	ea45 0004 	orr.w	r0, r5, r4
 800239a:	e739      	b.n	8002210 <HAL_ADC_ConfigChannel+0x248>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80023a0:	b11d      	cbz	r5, 80023aa <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 80023a2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023a6:	42ac      	cmp	r4, r5
 80023a8:	d030      	beq.n	800240c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023aa:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80023ac:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ae:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b2:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80023b6:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 80023ba:	f104 0c08 	add.w	ip, r4, #8
 80023be:	46e0      	mov	r8, ip
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	fa96 f7a6 	rbit	r7, r6
  if (value == 0U)
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d06f      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x4e0>
  return __builtin_clz(value);
 80023c8:	fab7 f787 	clz	r7, r7
 80023cc:	42af      	cmp	r7, r5
 80023ce:	d04a      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023d0:	f8dc 5000 	ldr.w	r5, [ip]
 80023d4:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d8:	f3c5 6584 	ubfx	r5, r5, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023dc:	f104 070c 	add.w	r7, r4, #12
 80023e0:	46b8      	mov	r8, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	fa96 fea6 	rbit	lr, r6
  if (value == 0U)
 80023e6:	f1be 0f00 	cmp.w	lr, #0
 80023ea:	d058      	beq.n	800249e <HAL_ADC_ConfigChannel+0x4d6>
  return __builtin_clz(value);
 80023ec:	fabe fe8e 	clz	lr, lr
 80023f0:	45ae      	cmp	lr, r5
 80023f2:	d022      	beq.n	800243a <HAL_ADC_ConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023f4:	683c      	ldr	r4, [r7, #0]
 80023f6:	683c      	ldr	r4, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f8:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	fa96 f5a6 	rbit	r5, r6
  if (value == 0U)
 8002400:	2d00      	cmp	r5, #0
 8002402:	f43f ae22 	beq.w	800204a <HAL_ADC_ConfigChannel+0x82>
  return __builtin_clz(value);
 8002406:	fab5 f085 	clz	r0, r5
 800240a:	e799      	b.n	8002340 <HAL_ADC_ConfigChannel+0x378>
  MODIFY_REG(*preg,
 800240c:	4614      	mov	r4, r2
 800240e:	6e10      	ldr	r0, [r2, #96]	@ 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002410:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
  MODIFY_REG(*preg,
 8002414:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002418:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800241c:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800241e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002420:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002422:	f3c6 0713 	ubfx	r7, r6, #0, #20
 8002426:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002428:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800242c:	2f00      	cmp	r7, #0
 800242e:	d1c4      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x3f2>
 8002430:	f3c6 6084 	ubfx	r0, r6, #26, #5
 8002434:	e772      	b.n	800231c <HAL_ADC_ConfigChannel+0x354>
 8002436:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 800243a:	f8dc 0000 	ldr.w	r0, [ip]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800243e:	4647      	mov	r7, r8
  MODIFY_REG(*preg,
 8002440:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002444:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002448:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800244a:	68e0      	ldr	r0, [r4, #12]
 800244c:	68e4      	ldr	r4, [r4, #12]
 800244e:	f3c6 0513 	ubfx	r5, r6, #0, #20
 8002452:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002454:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002458:	2d00      	cmp	r5, #0
 800245a:	d1cf      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x434>
 800245c:	f3c6 6084 	ubfx	r0, r6, #26, #5
 8002460:	e76e      	b.n	8002340 <HAL_ADC_ConfigChannel+0x378>
 8002462:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8002466:	f8de 0000 	ldr.w	r0, [lr]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800246a:	46c4      	mov	ip, r8
  MODIFY_REG(*preg,
 800246c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002470:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002474:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002476:	68a0      	ldr	r0, [r4, #8]
 8002478:	68a5      	ldr	r5, [r4, #8]
 800247a:	f3c6 0713 	ubfx	r7, r6, #0, #20
 800247e:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002480:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002484:	2f00      	cmp	r7, #0
 8002486:	d1a9      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x414>
 8002488:	f3c6 6084 	ubfx	r0, r6, #26, #5
 800248c:	e74f      	b.n	800232e <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 800248e:	6838      	ldr	r0, [r7, #0]
 8002490:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002494:	6038      	str	r0, [r7, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002496:	6808      	ldr	r0, [r1, #0]
}
 8002498:	e5d7      	b.n	800204a <HAL_ADC_ConfigChannel+0x82>
 800249a:	480a      	ldr	r0, [pc, #40]	@ (80024c4 <HAL_ADC_ConfigChannel+0x4fc>)
 800249c:	e6b7      	b.n	800220e <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800249e:	68e5      	ldr	r5, [r4, #12]
 80024a0:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a2:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80024a6:	e7a9      	b.n	80023fc <HAL_ADC_ConfigChannel+0x434>
 80024a8:	68a5      	ldr	r5, [r4, #8]
 80024aa:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ac:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80024b0:	e794      	b.n	80023dc <HAL_ADC_ConfigChannel+0x414>
 80024b2:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 80024b6:	e76e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x3ce>
 80024b8:	2502      	movs	r5, #2
 80024ba:	e75e      	b.n	800237a <HAL_ADC_ConfigChannel+0x3b2>
 80024bc:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 80024c0:	e74e      	b.n	8002360 <HAL_ADC_ConfigChannel+0x398>
 80024c2:	bf00      	nop
 80024c4:	fe500000 	.word	0xfe500000

080024c8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c8:	6803      	ldr	r3, [r0, #0]
{
 80024ca:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	4604      	mov	r4, r0
 80024d0:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024d4:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024d6:	d101      	bne.n	80024dc <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024d8:	0716      	lsls	r6, r2, #28
 80024da:	d53c      	bpl.n	8002556 <ADC_ConversionStop+0x8e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	0195      	lsls	r5, r2, #6
 80024e0:	d504      	bpl.n	80024ec <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80024e2:	f240 1201 	movw	r2, #257	@ 0x101
 80024e6:	8b20      	ldrh	r0, [r4, #24]
 80024e8:	4290      	cmp	r0, r2
 80024ea:	d045      	beq.n	8002578 <ADC_ConversionStop+0xb0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80024ec:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	d033      	beq.n	800255a <ADC_ConversionStop+0x92>
 80024f2:	0750      	lsls	r0, r2, #29
 80024f4:	d502      	bpl.n	80024fc <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	0792      	lsls	r2, r2, #30
 80024fa:	d559      	bpl.n	80025b0 <ADC_ConversionStop+0xe8>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80024fc:	2901      	cmp	r1, #1
 80024fe:	d055      	beq.n	80025ac <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	0710      	lsls	r0, r2, #28
 8002504:	d50a      	bpl.n	800251c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	0792      	lsls	r2, r2, #30
 800250a:	d407      	bmi.n	800251c <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002512:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800251c:	2903      	cmp	r1, #3
 800251e:	d145      	bne.n	80025ac <ADC_ConversionStop+0xe4>
 8002520:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002522:	f7ff fbf3 	bl	8001d0c <HAL_GetTick>
 8002526:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	421d      	tst	r5, r3
 800252e:	d012      	beq.n	8002556 <ADC_ConversionStop+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002530:	f7ff fbec 	bl	8001d0c <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	2805      	cmp	r0, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002538:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800253a:	d9f6      	bls.n	800252a <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	422a      	tst	r2, r5
 8002540:	d0f3      	beq.n	800252a <ADC_ConversionStop+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8002544:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	f043 0310 	orr.w	r3, r3, #16
 800254a:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	65e3      	str	r3, [r4, #92]	@ 0x5c

  }

  /* Return HAL status */
  return HAL_OK;
}
 8002554:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002556:	2000      	movs	r0, #0
}
 8002558:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800255a:	0716      	lsls	r6, r2, #28
 800255c:	d50a      	bpl.n	8002574 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	0795      	lsls	r5, r2, #30
 8002562:	d407      	bmi.n	8002574 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800256a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002574:	2508      	movs	r5, #8
 8002576:	e7d4      	b.n	8002522 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	0650      	lsls	r0, r2, #25
 800257c:	d406      	bmi.n	800258c <ADC_ConversionStop+0xc4>
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <ADC_ConversionStop+0xfc>)
 8002580:	e001      	b.n	8002586 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002582:	3a01      	subs	r2, #1
 8002584:	d0dd      	beq.n	8002542 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002586:	6819      	ldr	r1, [r3, #0]
 8002588:	0649      	lsls	r1, r1, #25
 800258a:	d5fa      	bpl.n	8002582 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800258c:	2240      	movs	r2, #64	@ 0x40
 800258e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	0756      	lsls	r6, r2, #29
 8002594:	d50a      	bpl.n	80025ac <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	0795      	lsls	r5, r2, #30
 800259a:	d407      	bmi.n	80025ac <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025a2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80025a6:	f042 0210 	orr.w	r2, r2, #16
 80025aa:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025ac:	2504      	movs	r5, #4
 80025ae:	e7b8      	b.n	8002522 <ADC_ConversionStop+0x5a>
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025b6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80025ba:	f042 0210 	orr.w	r2, r2, #16
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	e79c      	b.n	80024fc <ADC_ConversionStop+0x34>
 80025c2:	bf00      	nop
 80025c4:	a3400000 	.word	0xa3400000

080025c8 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
{
 80025ca:	b570      	push	{r4, r5, r6, lr}
 80025cc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80025ce:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	07d2      	lsls	r2, r2, #31
 80025d6:	d42c      	bmi.n	8002632 <ADC_Enable+0x6a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <ADC_Enable+0xb0>)
 80025dc:	4604      	mov	r4, r0
 80025de:	4211      	tst	r1, r2
 80025e0:	d12a      	bne.n	8002638 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80025e2:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025e4:	4925      	ldr	r1, [pc, #148]	@ (800267c <ADC_Enable+0xb4>)
  MODIFY_REG(ADCx->CR,
 80025e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ea:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025f4:	688b      	ldr	r3, [r1, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	d429      	bmi.n	800264e <ADC_Enable+0x86>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025fa:	f7ff fb87 	bl	8001d0c <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025fe:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002600:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	07d6      	lsls	r6, r2, #31
 8002606:	d414      	bmi.n	8002632 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8002608:	4e1d      	ldr	r6, [pc, #116]	@ (8002680 <ADC_Enable+0xb8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	07d0      	lsls	r0, r2, #31
 800260e:	d404      	bmi.n	800261a <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4032      	ands	r2, r6
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261a:	f7ff fb77 	bl	8001d0c <HAL_GetTick>
 800261e:	1b43      	subs	r3, r0, r5
 8002620:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002622:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002624:	d902      	bls.n	800262c <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	07d1      	lsls	r1, r2, #31
 800262a:	d505      	bpl.n	8002638 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	07d2      	lsls	r2, r2, #31
 8002630:	d5eb      	bpl.n	800260a <ADC_Enable+0x42>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002632:	2000      	movs	r0, #0
}
 8002634:	b002      	add	sp, #8
 8002636:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002638:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800263c:	f043 0310 	orr.w	r3, r3, #16
 8002640:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 800264a:	b002      	add	sp, #8
 800264c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <ADC_Enable+0xbc>)
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <ADC_Enable+0xc0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0c8      	beq.n	80025fa <ADC_Enable+0x32>
        wait_loop_index--;
 8002668:	9b01      	ldr	r3, [sp, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800266e:	9b01      	ldr	r3, [sp, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <ADC_Enable+0xa0>
 8002674:	e7c1      	b.n	80025fa <ADC_Enable+0x32>
 8002676:	bf00      	nop
 8002678:	8000003f 	.word	0x8000003f
 800267c:	42028300 	.word	0x42028300
 8002680:	7fffffc0 	.word	0x7fffffc0
 8002684:	20000000 	.word	0x20000000
 8002688:	053e2d63 	.word	0x053e2d63

0800268c <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800268c:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <HAL_ADC_Start+0xc8>)
{
 800268e:	b570      	push	{r4, r5, r6, lr}
 8002690:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002692:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002694:	689d      	ldr	r5, [r3, #8]
 8002696:	f015 0504 	ands.w	r5, r5, #4
 800269a:	d140      	bne.n	800271e <HAL_ADC_Start+0x92>
    __HAL_LOCK(hadc);
 800269c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80026a0:	4604      	mov	r4, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d03b      	beq.n	800271e <HAL_ADC_Start+0x92>
 80026a6:	2301      	movs	r3, #1
 80026a8:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80026ac:	f7ff ff8c 	bl	80025c8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d136      	bne.n	8002722 <HAL_ADC_Start+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 80026b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b6:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80026b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	65a3      	str	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026c6:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_ADC_Start+0xcc>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026c8:	f006 061f 	and.w	r6, r6, #31
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d02b      	beq.n	8002728 <HAL_ADC_Start+0x9c>
 80026d0:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80026d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026d8:	65a3      	str	r3, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80026dc:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026e0:	bf1c      	itt	ne
 80026e2:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
 80026e4:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80026e8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026ea:	231c      	movs	r3, #28
 80026ec:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 80026ee:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f0:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 80026f2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f6:	d01b      	beq.n	8002730 <HAL_ADC_Start+0xa4>
 80026f8:	f240 2321 	movw	r3, #545	@ 0x221
 80026fc:	40f3      	lsrs	r3, r6
 80026fe:	07dd      	lsls	r5, r3, #31
 8002700:	d416      	bmi.n	8002730 <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002702:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002708:	65a3      	str	r3, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800270a:	68cb      	ldr	r3, [r1, #12]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	d505      	bpl.n	800271c <HAL_ADC_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002712:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002716:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800271a:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800271c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 800271e:	2002      	movs	r0, #2
}
 8002720:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8002722:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8002726:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002728:	490c      	ldr	r1, [pc, #48]	@ (800275c <HAL_ADC_Start+0xd0>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800272a:	2e00      	cmp	r6, #0
 800272c:	d1d5      	bne.n	80026da <HAL_ADC_Start+0x4e>
 800272e:	e7d0      	b.n	80026d2 <HAL_ADC_Start+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002730:	68d3      	ldr	r3, [r2, #12]
 8002732:	0199      	lsls	r1, r3, #6
 8002734:	d505      	bpl.n	8002742 <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002736:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002738:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800273c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002740:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8002742:	6893      	ldr	r3, [r2, #8]
 8002744:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002748:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6093      	str	r3, [r2, #8]
}
 8002752:	bd70      	pop	{r4, r5, r6, pc}
 8002754:	42028300 	.word	0x42028300
 8002758:	42028100 	.word	0x42028100
 800275c:	42028000 	.word	0x42028000

08002760 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002760:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002762:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	0795      	lsls	r5, r2, #30
 8002768:	d502      	bpl.n	8002770 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800276a:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800276c:	2000      	movs	r0, #0
}
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	07d4      	lsls	r4, r2, #31
 8002774:	d5fa      	bpl.n	800276c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	4604      	mov	r4, r0
 800277a:	f002 020d 	and.w	r2, r2, #13
 800277e:	2a01      	cmp	r2, #1
 8002780:	d009      	beq.n	8002796 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002784:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8002794:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002796:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->CR,
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800279e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80027a2:	f042 0202 	orr.w	r2, r2, #2
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80027aa:	f7ff faaf 	bl	8001d0c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027ae:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80027b0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	07d9      	lsls	r1, r3, #31
 80027b6:	d403      	bmi.n	80027c0 <ADC_Disable+0x60>
 80027b8:	e7d8      	b.n	800276c <ADC_Disable+0xc>
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	07db      	lsls	r3, r3, #31
 80027be:	d5d5      	bpl.n	800276c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c0:	f7ff faa4 	bl	8001d0c <HAL_GetTick>
 80027c4:	1b40      	subs	r0, r0, r5
 80027c6:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ca:	d9f6      	bls.n	80027ba <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	07d2      	lsls	r2, r2, #31
 80027d0:	d5f3      	bpl.n	80027ba <ADC_Disable+0x5a>
 80027d2:	e7d6      	b.n	8002782 <ADC_Disable+0x22>

080027d4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80027d4:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d01d      	beq.n	8002818 <HAL_ADC_Stop+0x44>
 80027dc:	2301      	movs	r3, #1
{
 80027de:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027e0:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80027e2:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027e6:	4604      	mov	r4, r0
 80027e8:	f7ff fe6e 	bl	80024c8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80027ec:	b118      	cbz	r0, 80027f6 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80027ee:	2300      	movs	r3, #0
 80027f0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80027f4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff ffb2 	bl	8002760 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d1f6      	bne.n	80027ee <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8002800:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002802:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002810:	2300      	movs	r3, #0
 8002812:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8002816:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002818:	2002      	movs	r0, #2
}
 800281a:	4770      	bx	lr

0800281c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281c:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4906      	ldr	r1, [pc, #24]	@ (800283c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002822:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002826:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002838:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002842:	b500      	push	{lr}
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284a:	f1c3 0e07 	rsb	lr, r3, #7
 800284e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002856:	bf28      	it	cs
 8002858:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285c:	f1bc 0f06 	cmp.w	ip, #6
 8002860:	d91c      	bls.n	800289c <HAL_NVIC_SetPriority+0x5c>
 8002862:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	fa03 f30c 	lsl.w	r3, r3, ip
 800286e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	fa03 f30e 	lsl.w	r3, r3, lr
 800287a:	ea21 0303 	bic.w	r3, r1, r3
 800287e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002882:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002886:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800288a:	db0a      	blt.n	80028a2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002890:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002894:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002898:	f85d fb04 	ldr.w	pc, [sp], #4
 800289c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	4694      	mov	ip, r2
 80028a0:	e7e7      	b.n	8002872 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <HAL_NVIC_SetPriority+0x74>)
 80028a4:	f000 000f 	and.w	r0, r0, #15
 80028a8:	4402      	add	r2, r0
 80028aa:	7613      	strb	r3, [r2, #24]
 80028ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80028b0:	e000ed00 	.word	0xe000ed00
 80028b4:	e000ecfc 	.word	0xe000ecfc

080028b8 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b8:	1e43      	subs	r3, r0, #1
 80028ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028be:	d209      	bcs.n	80028d4 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80028c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80028c4:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80028c6:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 80028c8:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80028ca:	6913      	ldr	r3, [r2, #16]
 80028cc:	f043 0303 	orr.w	r3, r3, #3
 80028d0:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 80028d2:	4770      	bx	lr
    return (1UL);
 80028d4:	2001      	movs	r0, #1
}
 80028d6:	4770      	bx	lr

080028d8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80028d8:	2804      	cmp	r0, #4
 80028da:	d813      	bhi.n	8002904 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 80028dc:	e8df f000 	tbb	[pc, r0]
 80028e0:	12031a2a 	.word	0x12031a2a
 80028e4:	13          	.byte	0x13
 80028e5:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80028e6:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80028ea:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80028f4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80028f8:	f023 030c 	bic.w	r3, r3, #12
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8002904:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002906:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800290a:	6913      	ldr	r3, [r2, #16]
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6113      	str	r3, [r2, #16]
      break;
 8002912:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002914:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002918:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800291a:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002922:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8002926:	f023 030c 	bic.w	r3, r3, #12
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002932:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002934:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002938:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800293a:	4a05      	ldr	r2, [pc, #20]	@ (8002950 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002942:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8002946:	f023 030c 	bic.w	r3, r3, #12
 800294a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800294e:	4770      	bx	lr
 8002950:	44020c00 	.word	0x44020c00

08002954 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002954:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	075b      	lsls	r3, r3, #29
 800295c:	d40f      	bmi.n	800297e <HAL_SYSTICK_GetCLKSourceConfig+0x2a>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8002960:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 8002964:	f000 000c 	and.w	r0, r0, #12

    switch (systick_rcc_source)
 8002968:	2804      	cmp	r0, #4
 800296a:	d006      	beq.n	800297a <HAL_SYSTICK_GetCLKSourceConfig+0x26>
 800296c:	f1a0 0008 	sub.w	r0, r0, #8
 8002970:	fab0 f080 	clz	r0, r0
 8002974:	0940      	lsrs	r0, r0, #5
 8002976:	0040      	lsls	r0, r0, #1
 8002978:	4770      	bx	lr
 800297a:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 800297c:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800297e:	2004      	movs	r0, #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	44020c00 	.word	0x44020c00

08002988 <HAL_DCACHE_ErrorCallback>:
  * @brief  Error callback.
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <HAL_DCACHE_CleanByAddrCallback>:
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <HAL_DCACHE_InvalidateByAddrCallback>:
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <HAL_DCACHE_InvalidateCompleteCallback>:
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <HAL_DCACHE_Init>:
  if (hdcache == NULL)
 800299c:	b350      	cbz	r0, 80029f4 <HAL_DCACHE_Init+0x58>
{
 800299e:	b510      	push	{r4, lr}
  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80029a0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80029a4:	4604      	mov	r4, r0
 80029a6:	b96b      	cbnz	r3, 80029c4 <HAL_DCACHE_Init+0x28>
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <HAL_DCACHE_Init+0x64>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <HAL_DCACHE_Init+0x68>)
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80029ac:	4816      	ldr	r0, [pc, #88]	@ (8002a08 <HAL_DCACHE_Init+0x6c>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80029ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80029b2:	4916      	ldr	r1, [pc, #88]	@ (8002a0c <HAL_DCACHE_Init+0x70>)
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80029b4:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_DCACHE_Init+0x74>)
    if (hdcache->MspInitCallback == NULL)
 80029b6:	69e3      	ldr	r3, [r4, #28]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80029b8:	e9c4 0104 	strd	r0, r1, [r4, #16]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80029bc:	61a2      	str	r2, [r4, #24]
    if (hdcache->MspInitCallback == NULL)
 80029be:	b1db      	cbz	r3, 80029f8 <HAL_DCACHE_Init+0x5c>
    hdcache->MspInitCallback(hdcache);
 80029c0:	4620      	mov	r0, r4
 80029c2:	4798      	blx	r3
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80029c4:	e9d4 2100 	ldrd	r2, r1, [r4]
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80029c8:	2000      	movs	r0, #0
  hdcache->State = HAL_DCACHE_STATE_READY;
 80029ca:	2301      	movs	r3, #1
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80029cc:	62a0      	str	r0, [r4, #40]	@ 0x28
  hdcache->State = HAL_DCACHE_STATE_READY;
 80029ce:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d8:	430b      	orrs	r3, r1
 80029da:	6013      	str	r3, [r2, #0]
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80029dc:	6850      	ldr	r0, [r2, #4]
 80029de:	f010 0009 	ands.w	r0, r0, #9
 80029e2:	d105      	bne.n	80029f0 <HAL_DCACHE_Init+0x54>
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80029e4:	62a0      	str	r0, [r4, #40]	@ 0x28
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
}
 80029ee:	bd10      	pop	{r4, pc}
    status =  HAL_BUSY;
 80029f0:	2002      	movs	r0, #2
}
 80029f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
}
 80029f6:	4770      	bx	lr
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80029f8:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <HAL_DCACHE_Init+0x78>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	61e2      	str	r2, [r4, #28]
 80029fe:	e7df      	b.n	80029c0 <HAL_DCACHE_Init+0x24>
 8002a00:	08002989 	.word	0x08002989
 8002a04:	0800298d 	.word	0x0800298d
 8002a08:	08002991 	.word	0x08002991
 8002a0c:	08002999 	.word	0x08002999
 8002a10:	08002995 	.word	0x08002995
 8002a14:	0800192d 	.word	0x0800192d

08002a18 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a1c:	680d      	ldr	r5, [r1, #0]
{
 8002a1e:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a20:	2d00      	cmp	r5, #0
 8002a22:	f000 80b6 	beq.w	8002b92 <HAL_GPIO_Init+0x17a>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a26:	4a5c      	ldr	r2, [pc, #368]	@ (8002b98 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0U;
 8002a28:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a2a:	ea02 2290 	and.w	r2, r2, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a2e:	f04f 0b01 	mov.w	fp, #1
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a32:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8002b9c <HAL_GPIO_Init+0x184>
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a36:	9203      	str	r2, [sp, #12]
        tmp = EXTI->RTSR1;
 8002a38:	9101      	str	r1, [sp, #4]
 8002a3a:	e059      	b.n	8002af0 <HAL_GPIO_Init+0xd8>
      tmp = GPIOx->MODER;
 8002a3c:	f8d0 e000 	ldr.w	lr, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a40:	f10c 3cff 	add.w	ip, ip, #4294967295
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002a44:	ea0e 0e06 	and.w	lr, lr, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002a48:	ea4e 0e01 	orr.w	lr, lr, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a4c:	f1bc 0f01 	cmp.w	ip, #1
      GPIOx->MODER = tmp;
 8002a50:	f8c0 e000 	str.w	lr, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a54:	f240 8085 	bls.w	8002b62 <HAL_GPIO_Init+0x14a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002a58:	9a01      	ldr	r2, [sp, #4]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002a5a:	f1b8 0f03 	cmp.w	r8, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002a5e:	6892      	ldr	r2, [r2, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x4e>
 8002a62:	2a01      	cmp	r2, #1
 8002a64:	d004      	beq.n	8002a70 <HAL_GPIO_Init+0x58>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a66:	40ba      	lsls	r2, r7
        tmp = GPIOx->PUPDR;
 8002a68:	68c7      	ldr	r7, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a6a:	403e      	ands	r6, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a6c:	4332      	orrs	r2, r6
        GPIOx->PUPDR = tmp;
 8002a6e:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a70:	00e2      	lsls	r2, r4, #3
 8002a72:	d539      	bpl.n	8002ae8 <HAL_GPIO_Init+0xd0>
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a74:	210f      	movs	r1, #15
 8002a76:	f023 0603 	bic.w	r6, r3, #3
 8002a7a:	f106 4688 	add.w	r6, r6, #1140850688	@ 0x44000000
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	f506 3608 	add.w	r6, r6, #139264	@ 0x22000
 8002a86:	00d2      	lsls	r2, r2, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002a88:	6e37      	ldr	r7, [r6, #96]	@ 0x60
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a8a:	fa01 fc02 	lsl.w	ip, r1, r2
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a8e:	9903      	ldr	r1, [sp, #12]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a90:	ea27 070c 	bic.w	r7, r7, ip
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	433a      	orrs	r2, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002a9a:	6632      	str	r2, [r6, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8002a9c:	ea6f 0609 	mvn.w	r6, r9
        tmp = EXTI->RTSR1;
 8002aa0:	f8da 2000 	ldr.w	r2, [sl]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa4:	02e7      	lsls	r7, r4, #11
        tmp &= ~((uint32_t)iocurrent);
 8002aa6:	bf54      	ite	pl
 8002aa8:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002aaa:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = tmp;
 8002aae:	f8ca 2000 	str.w	r2, [sl]

        tmp = EXTI->FTSR1;
 8002ab2:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab6:	02a1      	lsls	r1, r4, #10
        tmp &= ~((uint32_t)iocurrent);
 8002ab8:	bf54      	ite	pl
 8002aba:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002abc:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = tmp;
 8002ac0:	f8ca 2004 	str.w	r2, [sl, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002ac4:	f8da 2084 	ldr.w	r2, [sl, #132]	@ 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac8:	03a7      	lsls	r7, r4, #14
        tmp &= ~((uint32_t)iocurrent);
 8002aca:	bf54      	ite	pl
 8002acc:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002ace:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = tmp;
 8002ad2:	f8ca 2084 	str.w	r2, [sl, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002ad6:	f8da 2080 	ldr.w	r2, [sl, #128]	@ 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ada:	03e1      	lsls	r1, r4, #15
        tmp &= ~((uint32_t)iocurrent);
 8002adc:	bf54      	ite	pl
 8002ade:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002ae0:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = tmp;
 8002ae4:	f8ca 2080 	str.w	r2, [sl, #128]	@ 0x80
      }
    }

    position++;
 8002ae8:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002aea:	fa35 f203 	lsrs.w	r2, r5, r3
 8002aee:	d050      	beq.n	8002b92 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002af0:	fa0b f203 	lsl.w	r2, fp, r3
    if (iocurrent != 0U)
 8002af4:	ea12 0905 	ands.w	r9, r2, r5
 8002af8:	d0f6      	beq.n	8002ae8 <HAL_GPIO_Init+0xd0>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afa:	9901      	ldr	r1, [sp, #4]
 8002afc:	005f      	lsls	r7, r3, #1
 8002afe:	684c      	ldr	r4, [r1, #4]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b00:	2103      	movs	r1, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b02:	f024 0c10 	bic.w	ip, r4, #16
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b06:	ea04 0801 	and.w	r8, r4, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b0a:	fa01 f607 	lsl.w	r6, r1, r7
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0e:	f1bc 0f02 	cmp.w	ip, #2
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b12:	fa08 f107 	lsl.w	r1, r8, r7
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b16:	ea6f 0606 	mvn.w	r6, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b1a:	9102      	str	r1, [sp, #8]
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1c:	d18e      	bne.n	8002a3c <HAL_GPIO_Init+0x24>
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b1e:	9901      	ldr	r1, [sp, #4]
        tmp = GPIOx->AFR[position >> 3U];
 8002b20:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b24:	6909      	ldr	r1, [r1, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b26:	f003 0c07 	and.w	ip, r3, #7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b2a:	f001 0e0f 	and.w	lr, r1, #15
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b2e:	210f      	movs	r1, #15
 8002b30:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002b34:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b38:	fa0e fe0c 	lsl.w	lr, lr, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b3c:	fa01 fc0c 	lsl.w	ip, r1, ip
        tmp = GPIOx->AFR[position >> 3U];
 8002b40:	f8d8 1020 	ldr.w	r1, [r8, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b44:	ea21 0c0c 	bic.w	ip, r1, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b48:	ea4e 0e0c 	orr.w	lr, lr, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8002b4c:	f8c8 e020 	str.w	lr, [r8, #32]
      tmp = GPIOx->MODER;
 8002b50:	f8d0 c000 	ldr.w	ip, [r0]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b54:	9902      	ldr	r1, [sp, #8]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b56:	ea0c 0c06 	and.w	ip, ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b5a:	ea4c 0c01 	orr.w	ip, ip, r1
      GPIOx->MODER = tmp;
 8002b5e:	f8c0 c000 	str.w	ip, [r0]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b62:	9901      	ldr	r1, [sp, #4]
        tmp = GPIOx->OSPEEDR;
 8002b64:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b68:	68c9      	ldr	r1, [r1, #12]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b6a:	ea0e 0e06 	and.w	lr, lr, r6
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b6e:	fa01 fc07 	lsl.w	ip, r1, r7
 8002b72:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = tmp;
 8002b76:	f8c0 c008 	str.w	ip, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002b7a:	f8d0 c004 	ldr.w	ip, [r0, #4]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b7e:	9901      	ldr	r1, [sp, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b80:	ea2c 0c02 	bic.w	ip, ip, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b84:	0922      	lsrs	r2, r4, #4
 8002b86:	409a      	lsls	r2, r3
 8002b88:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = tmp;
 8002b8c:	6042      	str	r2, [r0, #4]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b8e:	688a      	ldr	r2, [r1, #8]
 8002b90:	e769      	b.n	8002a66 <HAL_GPIO_Init+0x4e>
  }
}
 8002b92:	b005      	add	sp, #20
 8002b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b98:	002f7f7f 	.word	0x002f7f7f
 8002b9c:	44022000 	.word	0x44022000

08002ba0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba0:	b10a      	cbz	r2, 8002ba6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba2:	6181      	str	r1, [r0, #24]
 8002ba4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ba6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bae:	ea01 0203 	and.w	r2, r1, r3
 8002bb2:	ea21 0103 	bic.w	r1, r1, r3
 8002bb6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002bba:	6181      	str	r1, [r0, #24]
}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d055      	beq.n	8002c70 <HAL_I2C_Init+0xb0>
{
 8002bc4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002bca:	4604      	mov	r4, r0
 8002bcc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d048      	beq.n	8002c66 <HAL_I2C_Init+0xa6>
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	2124      	movs	r1, #36	@ 0x24
 8002bda:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002bde:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002be4:	f021 0101 	bic.w	r1, r1, #1
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be8:	68e5      	ldr	r5, [r4, #12]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bea:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf2:	2d01      	cmp	r5, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bf8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bfa:	d009      	beq.n	8002c10 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bfc:	f440 4004 	orr.w	r0, r0, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c00:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c02:	6098      	str	r0, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c04:	d107      	bne.n	8002c16 <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	e006      	b.n	8002c1e <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c10:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002c14:	6098      	str	r0, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1e:	2100      	movs	r1, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c2e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c36:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c38:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 8002c3c:	4302      	orrs	r2, r0
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c3e:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c40:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c44:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c46:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002c4a:	4302      	orrs	r2, r0
 8002c4c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c4e:	681a      	ldr	r2, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002c50:	4608      	mov	r0, r1
  __HAL_I2C_ENABLE(hi2c);
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c58:	6461      	str	r1, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
}
 8002c64:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002c66:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002c6a:	f7fe fe79 	bl	8001960 <HAL_I2C_MspInit>
 8002c6e:	e7b1      	b.n	8002bd4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
}
 8002c72:	4770      	bx	lr

08002c74 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c74:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002c78:	2a20      	cmp	r2, #32
 8002c7a:	d123      	bne.n	8002cc4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002c7c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c80:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002c84:	4603      	mov	r3, r0
 8002c86:	2a01      	cmp	r2, #1
 8002c88:	d01c      	beq.n	8002cc4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8a:	2024      	movs	r0, #36	@ 0x24
{
 8002c8c:	b500      	push	{lr}
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8002c92:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002c98:	6810      	ldr	r0, [r2, #0]
 8002c9a:	f020 0001 	bic.w	r0, r0, #1
 8002c9e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ca0:	6810      	ldr	r0, [r2, #0]
 8002ca2:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002ca6:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ca8:	6810      	ldr	r0, [r2, #0]
 8002caa:	4301      	orrs	r1, r0
 8002cac:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002cae:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8002cb0:	4670      	mov	r0, lr
    __HAL_I2C_ENABLE(hi2c);
 8002cb2:	f041 0101 	orr.w	r1, r1, #1
 8002cb6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002cbc:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002cc0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002cc4:	2002      	movs	r0, #2
}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002ccc:	2a20      	cmp	r2, #32
 8002cce:	d122      	bne.n	8002d16 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002cd0:	b500      	push	{lr}
 8002cd2:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2a01      	cmp	r2, #1
 8002cde:	d01c      	beq.n	8002d1a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce2:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_DISABLE(hi2c);
 8002ce6:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002cec:	6810      	ldr	r0, [r2, #0]
 8002cee:	f020 0001 	bic.w	r0, r0, #1
 8002cf2:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002cf4:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002cf6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002cfa:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002cfe:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d00:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8002d02:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8002d04:	f041 0101 	orr.w	r1, r1, #1
 8002d08:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002d0e:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002d12:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002d16:	2002      	movs	r0, #2
}
 8002d18:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002d1a:	2002      	movs	r0, #2
}
 8002d1c:	f85d fb04 	ldr.w	pc, [sp], #4

08002d20 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002d20:	4a03      	ldr	r2, [pc, #12]	@ (8002d30 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8002d22:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002d24:	6813      	ldr	r3, [r2, #0]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40030400 	.word	0x40030400

08002d34 <HAL_RCC_GetSysClockFreq.part.0>:
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d34:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_RCC_GetSysClockFreq.part.0+0x114>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002d36:	b430      	push	{r4, r5}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d38:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d3a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002d3e:	f411 5f7c 	tst.w	r1, #16128	@ 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d42:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d44:	f3c1 2005 	ubfx	r0, r1, #8, #6
    if (pllm != 0U)
 8002d48:	d035      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq.part.0+0x82>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002d4a:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002d4e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d52:	fb05 f202 	mul.w	r2, r5, r2
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d56:	ee07 0a90 	vmov	s15, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d5a:	ee06 2a90 	vmov	s13, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d5e:	f004 0403 	and.w	r4, r4, #3
      switch (pllsource)
 8002d62:	2c01      	cmp	r4, #1
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d68:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
      switch (pllsource)
 8002d6c:	d039      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq.part.0+0xae>
 8002d6e:	2c03      	cmp	r4, #3
 8002d70:	d123      	bne.n	8002dba <HAL_RCC_GetSysClockFreq.part.0+0x86>
          }

          break;

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d74:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d84:	eddf 5a31 	vldr	s11, [pc, #196]	@ 8002e4c <HAL_RCC_GetSysClockFreq.part.0+0x118>
 8002d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d8c:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d90:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d94:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
          break;
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002d98:	4b2b      	ldr	r3, [pc, #172]	@ (8002e48 <HAL_RCC_GetSysClockFreq.part.0+0x114>)
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002da0:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002da2:	ee07 3a10 	vmov	s14, r3
 8002da6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002daa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dae:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002db2:	ee17 0a90 	vmov	r0, s15
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
  }

  return sysclockfreq;
}
 8002db6:	bc30      	pop	{r4, r5}
 8002db8:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dbc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dcc:	eddf 5a20 	vldr	s11, [pc, #128]	@ 8002e50 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 8002dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd4:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd8:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ddc:	ee67 7aa6 	vmul.f32	s15, s15, s13
          break;
 8002de0:	e7da      	b.n	8002d98 <HAL_RCC_GetSysClockFreq.part.0+0x64>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	0692      	lsls	r2, r2, #26
 8002de6:	d51a      	bpl.n	8002e1e <HAL_RCC_GetSysClockFreq.part.0+0xea>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002de8:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002dec:	4a19      	ldr	r2, [pc, #100]	@ (8002e54 <HAL_RCC_GetSysClockFreq.part.0+0x120>)
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	ee07 3a90 	vmov	s15, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002df6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002dfa:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e00:	ee06 2a10 	vmov	s12, r2
 8002e04:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002e08:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e0c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e10:	eec6 7a07 	vdiv.f32	s15, s12, s14
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	ee36 7aa5 	vadd.f32	s14, s13, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1c:	e7bc      	b.n	8002d98 <HAL_RCC_GetSysClockFreq.part.0+0x64>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e20:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e30:	eddf 5a09 	vldr	s11, [pc, #36]	@ 8002e58 <HAL_RCC_GetSysClockFreq.part.0+0x124>
 8002e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e38:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e3c:	ee77 7a86 	vadd.f32	s15, s15, s12
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e44:	e7a8      	b.n	8002d98 <HAL_RCC_GetSysClockFreq.part.0+0x64>
 8002e46:	bf00      	nop
 8002e48:	44020c00 	.word	0x44020c00
 8002e4c:	4af42400 	.word	0x4af42400
 8002e50:	4a742400 	.word	0x4a742400
 8002e54:	03d09000 	.word	0x03d09000
 8002e58:	4c742400 	.word	0x4c742400

08002e5c <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	f000 8349 	beq.w	80034f4 <HAL_RCC_OscConfig+0x698>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	4aa3      	ldr	r2, [pc, #652]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e64:	6803      	ldr	r3, [r0, #0]
{
 8002e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6a:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002e6c:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 8002e6e:	4604      	mov	r4, r0
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e70:	06d8      	lsls	r0, r3, #27
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e72:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002e76:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e7a:	d524      	bpl.n	8002ec6 <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002e7c:	2d08      	cmp	r5, #8
 8002e7e:	f000 813e 	beq.w	80030fe <HAL_RCC_OscConfig+0x2a2>
 8002e82:	2d18      	cmp	r5, #24
 8002e84:	f000 8138 	beq.w	80030f8 <HAL_RCC_OscConfig+0x29c>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e88:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002e8a:	4f99      	ldr	r7, [pc, #612]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80ef 	beq.w	8003070 <HAL_RCC_OscConfig+0x214>
        __HAL_RCC_CSI_ENABLE();
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002e9a:	f7fe ff37 	bl	8001d0c <HAL_GetTick>
 8002e9e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002ea0:	e006      	b.n	8002eb0 <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002ea2:	f7fe ff33 	bl	8001d0c <HAL_GetTick>
 8002ea6:	eba0 0008 	sub.w	r0, r0, r8
 8002eaa:	2802      	cmp	r0, #2
 8002eac:	f200 8169 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	059a      	lsls	r2, r3, #22
 8002eb4:	d5f5      	bpl.n	8002ea2 <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6a22      	ldr	r2, [r4, #32]
 8002eba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ec2:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	07d8      	lsls	r0, r3, #31
 8002ec8:	d538      	bpl.n	8002f3c <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002eca:	2d10      	cmp	r5, #16
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002ecc:	6862      	ldr	r2, [r4, #4]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ece:	f000 80e5 	beq.w	800309c <HAL_RCC_OscConfig+0x240>
 8002ed2:	2d18      	cmp	r5, #24
 8002ed4:	f000 80df 	beq.w	8003096 <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002ed8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002edc:	d018      	beq.n	8002f10 <HAL_RCC_OscConfig+0xb4>
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	f000 8152 	beq.w	8003188 <HAL_RCC_OscConfig+0x32c>
 8002ee4:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8002ee8:	4b81      	ldr	r3, [pc, #516]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
 8002eea:	f000 823e 	beq.w	800336a <HAL_RCC_OscConfig+0x50e>
 8002eee:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f000 82b9 	beq.w	800346a <HAL_RCC_OscConfig+0x60e>
 8002ef8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002f0c:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002f0e:	e004      	b.n	8002f1a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002f10:	4a77      	ldr	r2, [pc, #476]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
 8002f12:	6813      	ldr	r3, [r2, #0]
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fef7 	bl	8001d0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1e:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 80030f0 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8002f22:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f24:	e005      	b.n	8002f32 <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f26:	f7fe fef1 	bl	8001d0c <HAL_GetTick>
 8002f2a:	1bc0      	subs	r0, r0, r7
 8002f2c:	2864      	cmp	r0, #100	@ 0x64
 8002f2e:	f200 8128 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f32:	f8d8 3000 	ldr.w	r3, [r8]
 8002f36:	039a      	lsls	r2, r3, #14
 8002f38:	d5f5      	bpl.n	8002f26 <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	0798      	lsls	r0, r3, #30
 8002f3e:	d524      	bpl.n	8002f8a <HAL_RCC_OscConfig+0x12e>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002f40:	68e3      	ldr	r3, [r4, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f42:	2d00      	cmp	r5, #0
 8002f44:	f040 8153 	bne.w	80031ee <HAL_RCC_OscConfig+0x392>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8159 	beq.w	8003200 <HAL_RCC_OscConfig+0x3a4>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002f4e:	4b68      	ldr	r3, [pc, #416]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
 8002f50:	6921      	ldr	r1, [r4, #16]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f002 0218 	and.w	r2, r2, #24
 8002f58:	428a      	cmp	r2, r1
 8002f5a:	f040 8193 	bne.w	8003284 <HAL_RCC_OscConfig+0x428>
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fed5 	bl	8001d0c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	4f63      	ldr	r7, [pc, #396]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8002f64:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_OscConfig+0x118>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f68:	f7fe fed0 	bl	8001d0c <HAL_GetTick>
 8002f6c:	1b80      	subs	r0, r0, r6
 8002f6e:	2802      	cmp	r0, #2
 8002f70:	f200 8107 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	079a      	lsls	r2, r3, #30
 8002f78:	d5f6      	bpl.n	8002f68 <HAL_RCC_OscConfig+0x10c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	6962      	ldr	r2, [r4, #20]
 8002f7e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8002f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f86:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	0719      	lsls	r1, r3, #28
 8002f8c:	d519      	bpl.n	8002fc2 <HAL_RCC_OscConfig+0x166>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 8002f90:	4e57      	ldr	r6, [pc, #348]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8113 	beq.w	80031be <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_LSI_ENABLE();
 8002f98:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002f9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fa0:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8002fa4:	f7fe feb2 	bl	8001d0c <HAL_GetTick>
 8002fa8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_OscConfig+0x15c>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002fac:	f7fe feae 	bl	8001d0c <HAL_GetTick>
 8002fb0:	1bc0      	subs	r0, r0, r7
 8002fb2:	2802      	cmp	r0, #2
 8002fb4:	f200 80e5 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002fb8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002fbc:	011a      	lsls	r2, r3, #4
 8002fbe:	d5f5      	bpl.n	8002fac <HAL_RCC_OscConfig+0x150>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	0758      	lsls	r0, r3, #29
 8002fc4:	d536      	bpl.n	8003034 <HAL_RCC_OscConfig+0x1d8>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002fc6:	4e4b      	ldr	r6, [pc, #300]	@ (80030f4 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002fca:	07d9      	lsls	r1, r3, #31
 8002fcc:	f140 80c9 	bpl.w	8003162 <HAL_RCC_OscConfig+0x306>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f000 81d6 	beq.w	8003384 <HAL_RCC_OscConfig+0x528>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 809f 	beq.w	800311c <HAL_RCC_OscConfig+0x2c0>
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	f000 824f 	beq.w	8003482 <HAL_RCC_OscConfig+0x626>
 8002fe4:	2b85      	cmp	r3, #133	@ 0x85
 8002fe6:	4b42      	ldr	r3, [pc, #264]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
 8002fe8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002fec:	f000 826d 	beq.w	80034ca <HAL_RCC_OscConfig+0x66e>
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002ff8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002ffc:	f022 0204 	bic.w	r2, r2, #4
 8003000:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003004:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800300c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8003010:	f7fe fe7c 	bl	8001d0c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003018:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301a:	4f35      	ldr	r7, [pc, #212]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
 800301c:	e005      	b.n	800302a <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe fe75 	bl	8001d0c <HAL_GetTick>
 8003022:	1b80      	subs	r0, r0, r6
 8003024:	4540      	cmp	r0, r8
 8003026:	f200 80ac 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800302e:	079b      	lsls	r3, r3, #30
 8003030:	d5f5      	bpl.n	800301e <HAL_RCC_OscConfig+0x1c2>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	0699      	lsls	r1, r3, #26
 8003036:	d515      	bpl.n	8003064 <HAL_RCC_OscConfig+0x208>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003038:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 800303a:	4e2d      	ldr	r6, [pc, #180]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8110 	beq.w	8003262 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSI48_ENABLE();
 8003042:	6833      	ldr	r3, [r6, #0]
 8003044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003048:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800304a:	f7fe fe5f 	bl	8001d0c <HAL_GetTick>
 800304e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003050:	e005      	b.n	800305e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003052:	f7fe fe5b 	bl	8001d0c <HAL_GetTick>
 8003056:	1bc0      	subs	r0, r0, r7
 8003058:	2802      	cmp	r0, #2
 800305a:	f200 8092 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800305e:	6833      	ldr	r3, [r6, #0]
 8003060:	049a      	lsls	r2, r3, #18
 8003062:	d5f6      	bpl.n	8003052 <HAL_RCC_OscConfig+0x1f6>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 80cc 	bne.w	8003204 <HAL_RCC_OscConfig+0x3a8>
  return HAL_OK;
 800306c:	2000      	movs	r0, #0
 800306e:	e089      	b.n	8003184 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_CSI_DISABLE();
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003076:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003078:	f7fe fe48 	bl	8001d0c <HAL_GetTick>
 800307c:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800307e:	e005      	b.n	800308c <HAL_RCC_OscConfig+0x230>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003080:	f7fe fe44 	bl	8001d0c <HAL_GetTick>
 8003084:	eba0 0008 	sub.w	r0, r0, r8
 8003088:	2802      	cmp	r0, #2
 800308a:	d87a      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	059b      	lsls	r3, r3, #22
 8003090:	d4f6      	bmi.n	8003080 <HAL_RCC_OscConfig+0x224>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	e717      	b.n	8002ec6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003096:	2e03      	cmp	r6, #3
 8003098:	f47f af1e 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x7c>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800309c:	2a00      	cmp	r2, #0
 800309e:	f000 80af 	beq.w	8003200 <HAL_RCC_OscConfig+0x3a4>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	0799      	lsls	r1, r3, #30
 80030a4:	f57f af71 	bpl.w	8002f8a <HAL_RCC_OscConfig+0x12e>
 80030a8:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80030aa:	4e11      	ldr	r6, [pc, #68]	@ (80030f0 <HAL_RCC_OscConfig+0x294>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80c6 	beq.w	800323e <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80030b2:	6833      	ldr	r3, [r6, #0]
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	f023 0318 	bic.w	r3, r3, #24
 80030ba:	4313      	orrs	r3, r2
 80030bc:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 80030be:	6833      	ldr	r3, [r6, #0]
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80030c6:	f7fe fe21 	bl	8001d0c <HAL_GetTick>
 80030ca:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	e004      	b.n	80030d8 <HAL_RCC_OscConfig+0x27c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fe1d 	bl	8001d0c <HAL_GetTick>
 80030d2:	1bc0      	subs	r0, r0, r7
 80030d4:	2802      	cmp	r0, #2
 80030d6:	d854      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d8:	6833      	ldr	r3, [r6, #0]
 80030da:	079b      	lsls	r3, r3, #30
 80030dc:	d5f7      	bpl.n	80030ce <HAL_RCC_OscConfig+0x272>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80030de:	6933      	ldr	r3, [r6, #16]
 80030e0:	6962      	ldr	r2, [r4, #20]
 80030e2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80030e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030ea:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	e74c      	b.n	8002f8a <HAL_RCC_OscConfig+0x12e>
 80030f0:	44020c00 	.word	0x44020c00
 80030f4:	44020800 	.word	0x44020800
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80030f8:	2e02      	cmp	r6, #2
 80030fa:	f47f aec5 	bne.w	8002e88 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80030fe:	69e2      	ldr	r2, [r4, #28]
 8003100:	2a00      	cmp	r2, #0
 8003102:	d07d      	beq.n	8003200 <HAL_RCC_OscConfig+0x3a4>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003104:	49a8      	ldr	r1, [pc, #672]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 8003106:	6a20      	ldr	r0, [r4, #32]
 8003108:	698a      	ldr	r2, [r1, #24]
 800310a:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800310e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003112:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003114:	07d9      	lsls	r1, r3, #31
 8003116:	d566      	bpl.n	80031e6 <HAL_RCC_OscConfig+0x38a>
 8003118:	6862      	ldr	r2, [r4, #4]
 800311a:	e6da      	b.n	8002ed2 <HAL_RCC_OscConfig+0x76>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800311c:	4ea2      	ldr	r6, [pc, #648]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003122:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
 800312e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003136:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
 800313a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8003146:	f7fe fde1 	bl	8001d0c <HAL_GetTick>
 800314a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800314c:	e004      	b.n	8003158 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe fddd 	bl	8001d0c <HAL_GetTick>
 8003152:	1bc0      	subs	r0, r0, r7
 8003154:	4540      	cmp	r0, r8
 8003156:	d814      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003158:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800315c:	0798      	lsls	r0, r3, #30
 800315e:	d4f6      	bmi.n	800314e <HAL_RCC_OscConfig+0x2f2>
 8003160:	e767      	b.n	8003032 <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003162:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6273      	str	r3, [r6, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800316a:	f7fe fdcf 	bl	8001d0c <HAL_GetTick>
 800316e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003170:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003172:	07da      	lsls	r2, r3, #31
 8003174:	f53f af2c 	bmi.w	8002fd0 <HAL_RCC_OscConfig+0x174>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe fdc8 	bl	8001d0c <HAL_GetTick>
 800317c:	1bc0      	subs	r0, r0, r7
 800317e:	2802      	cmp	r0, #2
 8003180:	d9f6      	bls.n	8003170 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8003182:	2003      	movs	r0, #3
}
 8003184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003188:	4f87      	ldr	r7, [pc, #540]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a0:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80031a2:	f7fe fdb3 	bl	8001d0c <HAL_GetTick>
 80031a6:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a8:	e005      	b.n	80031b6 <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80031aa:	f7fe fdaf 	bl	8001d0c <HAL_GetTick>
 80031ae:	eba0 0008 	sub.w	r0, r0, r8
 80031b2:	2864      	cmp	r0, #100	@ 0x64
 80031b4:	d8e5      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	039b      	lsls	r3, r3, #14
 80031ba:	d4f6      	bmi.n	80031aa <HAL_RCC_OscConfig+0x34e>
 80031bc:	e6bd      	b.n	8002f3a <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 80031be:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031c6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80031ca:	f7fe fd9f 	bl	8001d0c <HAL_GetTick>
 80031ce:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031d0:	e004      	b.n	80031dc <HAL_RCC_OscConfig+0x380>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80031d2:	f7fe fd9b 	bl	8001d0c <HAL_GetTick>
 80031d6:	1bc0      	subs	r0, r0, r7
 80031d8:	2802      	cmp	r0, #2
 80031da:	d8d2      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031dc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	d4f6      	bmi.n	80031d2 <HAL_RCC_OscConfig+0x376>
 80031e4:	e6ec      	b.n	8002fc0 <HAL_RCC_OscConfig+0x164>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	079a      	lsls	r2, r3, #30
 80031e8:	f57f aecf 	bpl.w	8002f8a <HAL_RCC_OscConfig+0x12e>
 80031ec:	68e3      	ldr	r3, [r4, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80031ee:	2d18      	cmp	r5, #24
 80031f0:	f47f af5b 	bne.w	80030aa <HAL_RCC_OscConfig+0x24e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80031f4:	2e01      	cmp	r6, #1
 80031f6:	f47f af58 	bne.w	80030aa <HAL_RCC_OscConfig+0x24e>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f47f aeaf 	bne.w	8002f5e <HAL_RCC_OscConfig+0x102>
    return HAL_ERROR;
 8003200:	2001      	movs	r0, #1
 8003202:	e7bf      	b.n	8003184 <HAL_RCC_OscConfig+0x328>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003204:	2d18      	cmp	r5, #24
 8003206:	d069      	beq.n	80032dc <HAL_RCC_OscConfig+0x480>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003208:	2b02      	cmp	r3, #2
 800320a:	f000 80c3 	beq.w	8003394 <HAL_RCC_OscConfig+0x538>
        __HAL_RCC_PLL1_DISABLE();
 800320e:	4c66      	ldr	r4, [pc, #408]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003216:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003218:	f7fe fd78 	bl	8001d0c <HAL_GetTick>
 800321c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800321e:	e004      	b.n	800322a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003220:	f7fe fd74 	bl	8001d0c <HAL_GetTick>
 8003224:	1b40      	subs	r0, r0, r5
 8003226:	2802      	cmp	r0, #2
 8003228:	d8ab      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	0199      	lsls	r1, r3, #6
 800322e:	d4f7      	bmi.n	8003220 <HAL_RCC_OscConfig+0x3c4>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003230:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003232:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800323c:	e716      	b.n	800306c <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_DISABLE();
 800323e:	6833      	ldr	r3, [r6, #0]
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003246:	f7fe fd61 	bl	8001d0c <HAL_GetTick>
 800324a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324c:	e004      	b.n	8003258 <HAL_RCC_OscConfig+0x3fc>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800324e:	f7fe fd5d 	bl	8001d0c <HAL_GetTick>
 8003252:	1bc0      	subs	r0, r0, r7
 8003254:	2802      	cmp	r0, #2
 8003256:	d894      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003258:	6833      	ldr	r3, [r6, #0]
 800325a:	0798      	lsls	r0, r3, #30
 800325c:	d4f7      	bmi.n	800324e <HAL_RCC_OscConfig+0x3f2>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	e693      	b.n	8002f8a <HAL_RCC_OscConfig+0x12e>
      __HAL_RCC_HSI48_DISABLE();
 8003262:	6833      	ldr	r3, [r6, #0]
 8003264:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003268:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800326a:	f7fe fd4f 	bl	8001d0c <HAL_GetTick>
 800326e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003270:	e004      	b.n	800327c <HAL_RCC_OscConfig+0x420>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003272:	f7fe fd4b 	bl	8001d0c <HAL_GetTick>
 8003276:	1bc0      	subs	r0, r0, r7
 8003278:	2802      	cmp	r0, #2
 800327a:	d882      	bhi.n	8003182 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800327c:	6833      	ldr	r3, [r6, #0]
 800327e:	049b      	lsls	r3, r3, #18
 8003280:	d4f7      	bmi.n	8003272 <HAL_RCC_OscConfig+0x416>
 8003282:	e6ef      	b.n	8003064 <HAL_RCC_OscConfig+0x208>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f022 0218 	bic.w	r2, r2, #24
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	f002 0218 	and.w	r2, r2, #24
 8003294:	2a08      	cmp	r2, #8
 8003296:	f000 8129 	beq.w	80034ec <HAL_RCC_OscConfig+0x690>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	f012 0f18 	tst.w	r2, #24
 80032a0:	f040 8103 	bne.w	80034aa <HAL_RCC_OscConfig+0x64e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	0691      	lsls	r1, r2, #26
 80032a8:	f140 810d 	bpl.w	80034c6 <HAL_RCC_OscConfig+0x66a>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b3f      	ldr	r3, [pc, #252]	@ (80033ac <HAL_RCC_OscConfig+0x550>)
 80032b0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80032b4:	40d3      	lsrs	r3, r2
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032b6:	4a3c      	ldr	r2, [pc, #240]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 80032b8:	483d      	ldr	r0, [pc, #244]	@ (80033b0 <HAL_RCC_OscConfig+0x554>)
 80032ba:	6a12      	ldr	r2, [r2, #32]
 80032bc:	493d      	ldr	r1, [pc, #244]	@ (80033b4 <HAL_RCC_OscConfig+0x558>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80032be:	f002 020f 	and.w	r2, r2, #15
 80032c2:	5c82      	ldrb	r2, [r0, r2]
 80032c4:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032c8:	40d3      	lsrs	r3, r2
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ca:	4a3b      	ldr	r2, [pc, #236]	@ (80033b8 <HAL_RCC_OscConfig+0x55c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80032cc:	600b      	str	r3, [r1, #0]
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ce:	6810      	ldr	r0, [r2, #0]
 80032d0:	f7fe fca6 	bl	8001c20 <HAL_InitTick>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	f43f ae42 	beq.w	8002f5e <HAL_RCC_OscConfig+0x102>
 80032da:	e791      	b.n	8003200 <HAL_RCC_OscConfig+0x3a4>
      temp1_pllckcfg = RCC->PLL1CFGR;
 80032dc:	4a32      	ldr	r2, [pc, #200]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 80032e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032e2:	6b55      	ldr	r5, [r2, #52]	@ 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e4:	d08c      	beq.n	8003200 <HAL_RCC_OscConfig+0x3a4>
 80032e6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80032e8:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	4283      	cmp	r3, r0
 80032ee:	d187      	bne.n	8003200 <HAL_RCC_OscConfig+0x3a4>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80032f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80032f2:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80032f6:	4299      	cmp	r1, r3
 80032f8:	d182      	bne.n	8003200 <HAL_RCC_OscConfig+0x3a4>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80032fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032fc:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8003300:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003302:	4299      	cmp	r1, r3
 8003304:	f47f af7c 	bne.w	8003200 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003308:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800330a:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800330e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003310:	4299      	cmp	r1, r3
 8003312:	f47f af75 	bne.w	8003200 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003316:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003318:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800331c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800331e:	4299      	cmp	r1, r3
 8003320:	f47f af6e 	bne.w	8003200 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003324:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003326:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800332a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800332c:	429d      	cmp	r5, r3
 800332e:	f47f af67 	bne.w	8003200 <HAL_RCC_OscConfig+0x3a4>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003332:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003334:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003336:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800333a:	4293      	cmp	r3, r2
 800333c:	f43f ae96 	beq.w	800306c <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003340:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 8003342:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003344:	f023 0310 	bic.w	r3, r3, #16
 8003348:	6293      	str	r3, [r2, #40]	@ 0x28
        tickstart = HAL_GetTick();
 800334a:	f7fe fcdf 	bl	8001d0c <HAL_GetTick>
 800334e:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003350:	f7fe fcdc 	bl	8001d0c <HAL_GetTick>
 8003354:	42a8      	cmp	r0, r5
 8003356:	d0fb      	beq.n	8003350 <HAL_RCC_OscConfig+0x4f4>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003358:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800335a:	4b13      	ldr	r3, [pc, #76]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003362:	f042 0210 	orr.w	r2, r2, #16
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
 8003368:	e680      	b.n	800306c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003380:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003382:	e5ca      	b.n	8002f1a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003384:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 8003386:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003392:	e63d      	b.n	8003010 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_PLL1_DISABLE();
 8003394:	4d04      	ldr	r5, [pc, #16]	@ (80033a8 <HAL_RCC_OscConfig+0x54c>)
 8003396:	682b      	ldr	r3, [r5, #0]
 8003398:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800339c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800339e:	f7fe fcb5 	bl	8001d0c <HAL_GetTick>
 80033a2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033a4:	e010      	b.n	80033c8 <HAL_RCC_OscConfig+0x56c>
 80033a6:	bf00      	nop
 80033a8:	44020c00 	.word	0x44020c00
 80033ac:	03d09000 	.word	0x03d09000
 80033b0:	0800f8cc 	.word	0x0800f8cc
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80033bc:	f7fe fca6 	bl	8001d0c <HAL_GetTick>
 80033c0:	1b80      	subs	r0, r0, r6
 80033c2:	2802      	cmp	r0, #2
 80033c4:	f63f aedd 	bhi.w	8003182 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	019f      	lsls	r7, r3, #6
 80033cc:	d4f6      	bmi.n	80033bc <HAL_RCC_OscConfig+0x560>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80033ce:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80033d0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80033d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80033d8:	f023 0303 	bic.w	r3, r3, #3
 80033dc:	430b      	orrs	r3, r1
 80033de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80033e2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80033e4:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	@ 0x38
 80033e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033ea:	3b01      	subs	r3, #1
 80033ec:	3a01      	subs	r2, #1
 80033ee:	025b      	lsls	r3, r3, #9
 80033f0:	0412      	lsls	r2, r2, #16
 80033f2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80033f6:	3901      	subs	r1, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8003400:	4313      	orrs	r3, r2
 8003402:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003404:	3a01      	subs	r2, #1
 8003406:	0612      	lsls	r2, r2, #24
 8003408:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800340c:	4313      	orrs	r3, r2
 800340e:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003410:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003412:	f023 0310 	bic.w	r3, r3, #16
 8003416:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003418:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	63ab      	str	r3, [r5, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800341e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003426:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003428:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800342a:	f023 030c 	bic.w	r3, r3, #12
 800342e:	4313      	orrs	r3, r2
 8003430:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003432:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003434:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003436:	f023 0320 	bic.w	r3, r3, #32
 800343a:	4313      	orrs	r3, r2
 800343c:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800343e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_ENABLE();
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800344e:	f7fe fc5d 	bl	8001d0c <HAL_GetTick>
 8003452:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003454:	4d28      	ldr	r5, [pc, #160]	@ (80034f8 <HAL_RCC_OscConfig+0x69c>)
 8003456:	682b      	ldr	r3, [r5, #0]
 8003458:	0198      	lsls	r0, r3, #6
 800345a:	f53f ae07 	bmi.w	800306c <HAL_RCC_OscConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800345e:	f7fe fc55 	bl	8001d0c <HAL_GetTick>
 8003462:	1b00      	subs	r0, r0, r4
 8003464:	2802      	cmp	r0, #2
 8003466:	d9f6      	bls.n	8003456 <HAL_RCC_OscConfig+0x5fa>
 8003468:	e68b      	b.n	8003182 <HAL_RCC_OscConfig+0x326>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800346a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800347e:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	e54b      	b.n	8002f1a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003482:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <HAL_RCC_OscConfig+0x69c>)
 8003484:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003488:	f042 0204 	orr.w	r2, r2, #4
 800348c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003490:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003498:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800349c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80034a8:	e5b2      	b.n	8003010 <HAL_RCC_OscConfig+0x1b4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	f002 0218 	and.w	r2, r2, #24
 80034b0:	2a10      	cmp	r2, #16
 80034b2:	d01d      	beq.n	80034f0 <HAL_RCC_OscConfig+0x694>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 0318 	and.w	r3, r3, #24
 80034ba:	2b18      	cmp	r3, #24
 80034bc:	d103      	bne.n	80034c6 <HAL_RCC_OscConfig+0x66a>
 80034be:	f7ff fc39 	bl	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
 80034c2:	4603      	mov	r3, r0
 80034c4:	e6f7      	b.n	80032b6 <HAL_RCC_OscConfig+0x45a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_RCC_OscConfig+0x6a0>)
 80034c8:	e6f5      	b.n	80032b6 <HAL_RCC_OscConfig+0x45a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80034ca:	f042 0204 	orr.w	r2, r2, #4
 80034ce:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80034d2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80034d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034da:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80034de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80034ea:	e591      	b.n	8003010 <HAL_RCC_OscConfig+0x1b4>
    sysclockfreq = CSI_VALUE;
 80034ec:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <HAL_RCC_OscConfig+0x6a4>)
 80034ee:	e6e2      	b.n	80032b6 <HAL_RCC_OscConfig+0x45a>
    sysclockfreq = HSE_VALUE;
 80034f0:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <HAL_RCC_OscConfig+0x6a8>)
 80034f2:	e6e0      	b.n	80032b6 <HAL_RCC_OscConfig+0x45a>
    return HAL_ERROR;
 80034f4:	2001      	movs	r0, #1
}
 80034f6:	4770      	bx	lr
 80034f8:	44020c00 	.word	0x44020c00
 80034fc:	03d09000 	.word	0x03d09000
 8003500:	003d0900 	.word	0x003d0900
 8003504:	007a1200 	.word	0x007a1200

08003508 <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 8003508:	2800      	cmp	r0, #0
 800350a:	f000 8133 	beq.w	8003774 <HAL_RCC_ClockConfig+0x26c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800350e:	4a9e      	ldr	r2, [pc, #632]	@ (8003788 <HAL_RCC_ClockConfig+0x280>)
{
 8003510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	4604      	mov	r4, r0
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	428b      	cmp	r3, r1
 800351e:	460d      	mov	r5, r1
 8003520:	d20c      	bcs.n	800353c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f023 030f 	bic.w	r3, r3, #15
 8003528:	430b      	orrs	r3, r1
 800352a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	428b      	cmp	r3, r1
 8003534:	d002      	beq.n	800353c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003536:	2001      	movs	r0, #1
}
 8003538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	06d9      	lsls	r1, r3, #27
 8003540:	d50d      	bpl.n	800355e <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003542:	4992      	ldr	r1, [pc, #584]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003544:	6960      	ldr	r0, [r4, #20]
 8003546:	6a0a      	ldr	r2, [r1, #32]
 8003548:	0a12      	lsrs	r2, r2, #8
 800354a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800354e:	4290      	cmp	r0, r2
 8003550:	d905      	bls.n	800355e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003552:	6a0a      	ldr	r2, [r1, #32]
 8003554:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003558:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800355c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	071a      	lsls	r2, r3, #28
 8003560:	d50d      	bpl.n	800357e <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003562:	498a      	ldr	r1, [pc, #552]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003564:	6920      	ldr	r0, [r4, #16]
 8003566:	6a0a      	ldr	r2, [r1, #32]
 8003568:	0912      	lsrs	r2, r2, #4
 800356a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800356e:	4290      	cmp	r0, r2
 8003570:	d905      	bls.n	800357e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003572:	6a0a      	ldr	r2, [r1, #32]
 8003574:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003578:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800357c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357e:	075f      	lsls	r7, r3, #29
 8003580:	d50b      	bpl.n	800359a <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003582:	4982      	ldr	r1, [pc, #520]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003584:	68e0      	ldr	r0, [r4, #12]
 8003586:	6a0a      	ldr	r2, [r1, #32]
 8003588:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800358c:	4290      	cmp	r0, r2
 800358e:	d904      	bls.n	800359a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003590:	6a0a      	ldr	r2, [r1, #32]
 8003592:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003596:	4302      	orrs	r2, r0
 8003598:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359a:	079e      	lsls	r6, r3, #30
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359c:	f003 0201 	and.w	r2, r3, #1
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	f140 80a5 	bpl.w	80036ee <HAL_RCC_ClockConfig+0x1e6>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80035a4:	4e79      	ldr	r6, [pc, #484]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 80035a6:	68a0      	ldr	r0, [r4, #8]
 80035a8:	6a31      	ldr	r1, [r6, #32]
 80035aa:	f001 010f 	and.w	r1, r1, #15
 80035ae:	4288      	cmp	r0, r1
 80035b0:	d904      	bls.n	80035bc <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80035b2:	6a31      	ldr	r1, [r6, #32]
 80035b4:	f021 010f 	bic.w	r1, r1, #15
 80035b8:	4301      	orrs	r1, r0
 80035ba:	6231      	str	r1, [r6, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035bc:	b382      	cbz	r2, 8003620 <HAL_RCC_ClockConfig+0x118>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035be:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80035c0:	4b72      	ldr	r3, [pc, #456]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c2:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80035c4:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	f000 809a 	beq.w	80036fe <HAL_RCC_ClockConfig+0x1f6>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ca:	2a02      	cmp	r2, #2
 80035cc:	f000 80ce 	beq.w	800376c <HAL_RCC_ClockConfig+0x264>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035d0:	2a01      	cmp	r2, #1
 80035d2:	f000 80e7 	beq.w	80037a4 <HAL_RCC_ClockConfig+0x29c>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d6:	079f      	lsls	r7, r3, #30
 80035d8:	d5ad      	bpl.n	8003536 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80035da:	4e6c      	ldr	r6, [pc, #432]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80035e0:	69f3      	ldr	r3, [r6, #28]
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 80035ea:	f7fe fb8f 	bl	8001d0c <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ee:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80035f0:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	f000 808c 	beq.w	8003710 <HAL_RCC_ClockConfig+0x208>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f000 8094 	beq.w	8003726 <HAL_RCC_ClockConfig+0x21e>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <HAL_RCC_ClockConfig+0x108>
 8003602:	e09b      	b.n	800373c <HAL_RCC_ClockConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7fe fb82 	bl	8001d0c <HAL_GetTick>
 8003608:	1bc0      	subs	r0, r0, r7
 800360a:	4540      	cmp	r0, r8
 800360c:	f200 80b4 	bhi.w	8003778 <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003610:	69f3      	ldr	r3, [r6, #28]
 8003612:	f013 0f18 	tst.w	r3, #24
 8003616:	d1f5      	bne.n	8003604 <HAL_RCC_ClockConfig+0xfc>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	079e      	lsls	r6, r3, #30
 800361c:	d507      	bpl.n	800362e <HAL_RCC_ClockConfig+0x126>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800361e:	68a0      	ldr	r0, [r4, #8]
 8003620:	495a      	ldr	r1, [pc, #360]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003622:	6a0a      	ldr	r2, [r1, #32]
 8003624:	f002 020f 	and.w	r2, r2, #15
 8003628:	4282      	cmp	r2, r0
 800362a:	f200 8099 	bhi.w	8003760 <HAL_RCC_ClockConfig+0x258>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800362e:	4956      	ldr	r1, [pc, #344]	@ (8003788 <HAL_RCC_ClockConfig+0x280>)
 8003630:	680a      	ldr	r2, [r1, #0]
 8003632:	f002 020f 	and.w	r2, r2, #15
 8003636:	42aa      	cmp	r2, r5
 8003638:	d90a      	bls.n	8003650 <HAL_RCC_ClockConfig+0x148>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	680a      	ldr	r2, [r1, #0]
 800363c:	f022 020f 	bic.w	r2, r2, #15
 8003640:	432a      	orrs	r2, r5
 8003642:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003644:	680a      	ldr	r2, [r1, #0]
 8003646:	f002 020f 	and.w	r2, r2, #15
 800364a:	42aa      	cmp	r2, r5
 800364c:	f47f af73 	bne.w	8003536 <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	075d      	lsls	r5, r3, #29
 8003652:	d50b      	bpl.n	800366c <HAL_RCC_ClockConfig+0x164>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003654:	494d      	ldr	r1, [pc, #308]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003656:	68e0      	ldr	r0, [r4, #12]
 8003658:	6a0a      	ldr	r2, [r1, #32]
 800365a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800365e:	4290      	cmp	r0, r2
 8003660:	d204      	bcs.n	800366c <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003662:	6a0a      	ldr	r2, [r1, #32]
 8003664:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003668:	4302      	orrs	r2, r0
 800366a:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	0718      	lsls	r0, r3, #28
 800366e:	d50d      	bpl.n	800368c <HAL_RCC_ClockConfig+0x184>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003670:	4946      	ldr	r1, [pc, #280]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003672:	6920      	ldr	r0, [r4, #16]
 8003674:	6a0a      	ldr	r2, [r1, #32]
 8003676:	0912      	lsrs	r2, r2, #4
 8003678:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800367c:	4290      	cmp	r0, r2
 800367e:	d205      	bcs.n	800368c <HAL_RCC_ClockConfig+0x184>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003680:	6a0a      	ldr	r2, [r1, #32]
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003686:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800368a:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800368c:	06d9      	lsls	r1, r3, #27
 800368e:	d50d      	bpl.n	80036ac <HAL_RCC_ClockConfig+0x1a4>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003690:	4a3e      	ldr	r2, [pc, #248]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 8003692:	6961      	ldr	r1, [r4, #20]
 8003694:	6a13      	ldr	r3, [r2, #32]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800369c:	4299      	cmp	r1, r3
 800369e:	d205      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x1a4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80036a0:	6a13      	ldr	r3, [r2, #32]
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036aa:	6213      	str	r3, [r2, #32]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80036ac:	4b37      	ldr	r3, [pc, #220]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	f002 0218 	and.w	r2, r2, #24
 80036b4:	2a08      	cmp	r2, #8
 80036b6:	d061      	beq.n	800377c <HAL_RCC_ClockConfig+0x274>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	f012 0f18 	tst.w	r2, #24
 80036be:	d143      	bne.n	8003748 <HAL_RCC_ClockConfig+0x240>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	0692      	lsls	r2, r2, #26
 80036c4:	d54a      	bpl.n	800375c <HAL_RCC_ClockConfig+0x254>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCC_ClockConfig+0x288>)
 80036ca:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80036ce:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80036d0:	4a2e      	ldr	r2, [pc, #184]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
 80036d2:	4830      	ldr	r0, [pc, #192]	@ (8003794 <HAL_RCC_ClockConfig+0x28c>)
 80036d4:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 80036d6:	4930      	ldr	r1, [pc, #192]	@ (8003798 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80036d8:	f002 020f 	and.w	r2, r2, #15
 80036dc:	5c80      	ldrb	r0, [r0, r2]
 80036de:	4a2f      	ldr	r2, [pc, #188]	@ (800379c <HAL_RCC_ClockConfig+0x294>)
 80036e0:	40c3      	lsrs	r3, r0
}
 80036e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80036e6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80036e8:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80036ea:	f7fe ba99 	b.w	8001c20 <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ee:	2a00      	cmp	r2, #0
 80036f0:	d09d      	beq.n	800362e <HAL_RCC_ClockConfig+0x126>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f2:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036f4:	4b25      	ldr	r3, [pc, #148]	@ (800378c <HAL_RCC_ClockConfig+0x284>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f6:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036f8:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fa:	f47f af66 	bne.w	80035ca <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036fe:	0198      	lsls	r0, r3, #6
 8003700:	f53f af6b 	bmi.w	80035da <HAL_RCC_ClockConfig+0xd2>
 8003704:	e717      	b.n	8003536 <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003706:	f7fe fb01 	bl	8001d0c <HAL_GetTick>
 800370a:	1bc3      	subs	r3, r0, r7
 800370c:	4543      	cmp	r3, r8
 800370e:	d833      	bhi.n	8003778 <HAL_RCC_ClockConfig+0x270>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003710:	69f3      	ldr	r3, [r6, #28]
 8003712:	f003 0318 	and.w	r3, r3, #24
 8003716:	2b18      	cmp	r3, #24
 8003718:	d1f5      	bne.n	8003706 <HAL_RCC_ClockConfig+0x1fe>
 800371a:	e77d      	b.n	8003618 <HAL_RCC_ClockConfig+0x110>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe faf6 	bl	8001d0c <HAL_GetTick>
 8003720:	1bc0      	subs	r0, r0, r7
 8003722:	4540      	cmp	r0, r8
 8003724:	d828      	bhi.n	8003778 <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003726:	69f3      	ldr	r3, [r6, #28]
 8003728:	f003 0318 	and.w	r3, r3, #24
 800372c:	2b10      	cmp	r3, #16
 800372e:	d1f5      	bne.n	800371c <HAL_RCC_ClockConfig+0x214>
 8003730:	e772      	b.n	8003618 <HAL_RCC_ClockConfig+0x110>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003732:	f7fe faeb 	bl	8001d0c <HAL_GetTick>
 8003736:	1bc0      	subs	r0, r0, r7
 8003738:	4540      	cmp	r0, r8
 800373a:	d81d      	bhi.n	8003778 <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800373c:	69f3      	ldr	r3, [r6, #28]
 800373e:	f003 0318 	and.w	r3, r3, #24
 8003742:	2b08      	cmp	r3, #8
 8003744:	d1f5      	bne.n	8003732 <HAL_RCC_ClockConfig+0x22a>
 8003746:	e767      	b.n	8003618 <HAL_RCC_ClockConfig+0x110>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	f002 0218 	and.w	r2, r2, #24
 800374e:	2a10      	cmp	r2, #16
 8003750:	d02c      	beq.n	80037ac <HAL_RCC_ClockConfig+0x2a4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 0318 	and.w	r3, r3, #24
 8003758:	2b18      	cmp	r3, #24
 800375a:	d011      	beq.n	8003780 <HAL_RCC_ClockConfig+0x278>
      sysclockfreq = (uint32_t) HSI_VALUE;
 800375c:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <HAL_RCC_ClockConfig+0x288>)
 800375e:	e7b7      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003760:	6a0a      	ldr	r2, [r1, #32]
 8003762:	f022 020f 	bic.w	r2, r2, #15
 8003766:	4302      	orrs	r2, r0
 8003768:	620a      	str	r2, [r1, #32]
 800376a:	e760      	b.n	800362e <HAL_RCC_ClockConfig+0x126>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376c:	0399      	lsls	r1, r3, #14
 800376e:	f53f af34 	bmi.w	80035da <HAL_RCC_ClockConfig+0xd2>
 8003772:	e6e0      	b.n	8003536 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003774:	2001      	movs	r0, #1
}
 8003776:	4770      	bx	lr
          return HAL_TIMEOUT;
 8003778:	2003      	movs	r0, #3
 800377a:	e6dd      	b.n	8003538 <HAL_RCC_ClockConfig+0x30>
    sysclockfreq = CSI_VALUE;
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <HAL_RCC_ClockConfig+0x298>)
 800377e:	e7a7      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1c8>
 8003780:	f7ff fad8 	bl	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
 8003784:	4603      	mov	r3, r0
 8003786:	e7a3      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1c8>
 8003788:	40022000 	.word	0x40022000
 800378c:	44020c00 	.word	0x44020c00
 8003790:	03d09000 	.word	0x03d09000
 8003794:	0800f8cc 	.word	0x0800f8cc
 8003798:	20000008 	.word	0x20000008
 800379c:	20000000 	.word	0x20000000
 80037a0:	003d0900 	.word	0x003d0900
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80037a4:	059b      	lsls	r3, r3, #22
 80037a6:	f53f af18 	bmi.w	80035da <HAL_RCC_ClockConfig+0xd2>
 80037aa:	e6c4      	b.n	8003536 <HAL_RCC_ClockConfig+0x2e>
    sysclockfreq = HSE_VALUE;
 80037ac:	4b00      	ldr	r3, [pc, #0]	@ (80037b0 <HAL_RCC_ClockConfig+0x2a8>)
 80037ae:	e78f      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1c8>
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x4c>)
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	f002 0218 	and.w	r2, r2, #24
 80037bc:	2a08      	cmp	r2, #8
 80037be:	d018      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	f012 0f18 	tst.w	r2, #24
 80037c6:	d108      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	0692      	lsls	r2, r2, #26
 80037cc:	d50f      	bpl.n	80037ee <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	480c      	ldr	r0, [pc, #48]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x50>)
 80037d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80037d6:	40d8      	lsrs	r0, r3
 80037d8:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	f002 0218 	and.w	r2, r2, #24
 80037e0:	2a10      	cmp	r2, #16
 80037e2:	d00a      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0318 	and.w	r3, r3, #24
 80037ea:	2b18      	cmp	r3, #24
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80037ee:	4805      	ldr	r0, [pc, #20]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x50>)
}
 80037f0:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80037f2:	4805      	ldr	r0, [pc, #20]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x54>)
 80037f4:	4770      	bx	lr
 80037f6:	f7ff ba9d 	b.w	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
    sysclockfreq = HSE_VALUE;
 80037fa:	4804      	ldr	r0, [pc, #16]	@ (800380c <HAL_RCC_GetSysClockFreq+0x58>)
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	44020c00 	.word	0x44020c00
 8003804:	03d09000 	.word	0x03d09000
 8003808:	003d0900 	.word	0x003d0900
 800380c:	007a1200 	.word	0x007a1200

08003810 <HAL_RCC_GetHCLKFreq>:
{
 8003810:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003812:	4b18      	ldr	r3, [pc, #96]	@ (8003874 <HAL_RCC_GetHCLKFreq+0x64>)
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	f002 0218 	and.w	r2, r2, #24
 800381a:	2a08      	cmp	r2, #8
 800381c:	d023      	beq.n	8003866 <HAL_RCC_GetHCLKFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	f012 0f18 	tst.w	r2, #24
 8003824:	d113      	bne.n	800384e <HAL_RCC_GetHCLKFreq+0x3e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	0692      	lsls	r2, r2, #26
 800382a:	d51a      	bpl.n	8003862 <HAL_RCC_GetHCLKFreq+0x52>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4812      	ldr	r0, [pc, #72]	@ (8003878 <HAL_RCC_GetHCLKFreq+0x68>)
 8003830:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003834:	40d8      	lsrs	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003836:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <HAL_RCC_GetHCLKFreq+0x64>)
 8003838:	4910      	ldr	r1, [pc, #64]	@ (800387c <HAL_RCC_GetHCLKFreq+0x6c>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a10      	ldr	r2, [pc, #64]	@ (8003880 <HAL_RCC_GetHCLKFreq+0x70>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003848:	40d8      	lsrs	r0, r3
 800384a:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 800384c:	bd08      	pop	{r3, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	f002 0218 	and.w	r2, r2, #24
 8003854:	2a10      	cmp	r2, #16
 8003856:	d00b      	beq.n	8003870 <HAL_RCC_GetHCLKFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0318 	and.w	r3, r3, #24
 800385e:	2b18      	cmp	r3, #24
 8003860:	d003      	beq.n	800386a <HAL_RCC_GetHCLKFreq+0x5a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003862:	4805      	ldr	r0, [pc, #20]	@ (8003878 <HAL_RCC_GetHCLKFreq+0x68>)
 8003864:	e7e7      	b.n	8003836 <HAL_RCC_GetHCLKFreq+0x26>
    sysclockfreq = CSI_VALUE;
 8003866:	4807      	ldr	r0, [pc, #28]	@ (8003884 <HAL_RCC_GetHCLKFreq+0x74>)
 8003868:	e7e5      	b.n	8003836 <HAL_RCC_GetHCLKFreq+0x26>
 800386a:	f7ff fa63 	bl	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
 800386e:	e7e2      	b.n	8003836 <HAL_RCC_GetHCLKFreq+0x26>
    sysclockfreq = HSE_VALUE;
 8003870:	4805      	ldr	r0, [pc, #20]	@ (8003888 <HAL_RCC_GetHCLKFreq+0x78>)
 8003872:	e7e0      	b.n	8003836 <HAL_RCC_GetHCLKFreq+0x26>
 8003874:	44020c00 	.word	0x44020c00
 8003878:	03d09000 	.word	0x03d09000
 800387c:	0800f8cc 	.word	0x0800f8cc
 8003880:	20000000 	.word	0x20000000
 8003884:	003d0900 	.word	0x003d0900
 8003888:	007a1200 	.word	0x007a1200

0800388c <HAL_RCC_GetPCLK1Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <HAL_RCC_GetPCLK1Freq+0x78>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388e:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	f002 0218 	and.w	r2, r2, #24
 8003896:	2a08      	cmp	r2, #8
 8003898:	d02c      	beq.n	80038f4 <HAL_RCC_GetPCLK1Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	f012 0f18 	tst.w	r2, #24
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_GetPCLK1Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	0692      	lsls	r2, r2, #26
 80038a6:	d523      	bpl.n	80038f0 <HAL_RCC_GetPCLK1Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80038ac:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80038b0:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038b2:	4914      	ldr	r1, [pc, #80]	@ (8003904 <HAL_RCC_GetPCLK1Freq+0x78>)
 80038b4:	4c15      	ldr	r4, [pc, #84]	@ (800390c <HAL_RCC_GetPCLK1Freq+0x80>)
 80038b6:	6a0a      	ldr	r2, [r1, #32]
 80038b8:	4815      	ldr	r0, [pc, #84]	@ (8003910 <HAL_RCC_GetPCLK1Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80038ba:	f002 020f 	and.w	r2, r2, #15
 80038be:	5ca2      	ldrb	r2, [r4, r2]
 80038c0:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038c4:	40d3      	lsrs	r3, r2
 80038c6:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80038c8:	6a0a      	ldr	r2, [r1, #32]
 80038ca:	4912      	ldr	r1, [pc, #72]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x88>)
 80038cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80038d0:	5c88      	ldrb	r0, [r1, r2]
 80038d2:	f000 001f 	and.w	r0, r0, #31
}
 80038d6:	fa23 f000 	lsr.w	r0, r3, r0
 80038da:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	f002 0218 	and.w	r2, r2, #24
 80038e2:	2a10      	cmp	r2, #16
 80038e4:	d00c      	beq.n	8003900 <HAL_RCC_GetPCLK1Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 0318 	and.w	r3, r3, #24
 80038ec:	2b18      	cmp	r3, #24
 80038ee:	d003      	beq.n	80038f8 <HAL_RCC_GetPCLK1Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80038f2:	e7de      	b.n	80038b2 <HAL_RCC_GetPCLK1Freq+0x26>
    sysclockfreq = CSI_VALUE;
 80038f4:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80038f6:	e7dc      	b.n	80038b2 <HAL_RCC_GetPCLK1Freq+0x26>
 80038f8:	f7ff fa1c 	bl	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
 80038fc:	4603      	mov	r3, r0
 80038fe:	e7d8      	b.n	80038b2 <HAL_RCC_GetPCLK1Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <HAL_RCC_GetPCLK1Freq+0x90>)
 8003902:	e7d6      	b.n	80038b2 <HAL_RCC_GetPCLK1Freq+0x26>
 8003904:	44020c00 	.word	0x44020c00
 8003908:	03d09000 	.word	0x03d09000
 800390c:	0800f8cc 	.word	0x0800f8cc
 8003910:	20000000 	.word	0x20000000
 8003914:	0800f8c4 	.word	0x0800f8c4
 8003918:	003d0900 	.word	0x003d0900
 800391c:	007a1200 	.word	0x007a1200

08003920 <HAL_RCC_GetPCLK2Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003920:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <HAL_RCC_GetPCLK2Freq+0x78>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003922:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	f002 0218 	and.w	r2, r2, #24
 800392a:	2a08      	cmp	r2, #8
 800392c:	d02c      	beq.n	8003988 <HAL_RCC_GetPCLK2Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	f012 0f18 	tst.w	r2, #24
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_GetPCLK2Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	0692      	lsls	r2, r2, #26
 800393a:	d523      	bpl.n	8003984 <HAL_RCC_GetPCLK2Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b17      	ldr	r3, [pc, #92]	@ (800399c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003940:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003944:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003946:	4914      	ldr	r1, [pc, #80]	@ (8003998 <HAL_RCC_GetPCLK2Freq+0x78>)
 8003948:	4c15      	ldr	r4, [pc, #84]	@ (80039a0 <HAL_RCC_GetPCLK2Freq+0x80>)
 800394a:	6a0a      	ldr	r2, [r1, #32]
 800394c:	4815      	ldr	r0, [pc, #84]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800394e:	f002 020f 	and.w	r2, r2, #15
 8003952:	5ca2      	ldrb	r2, [r4, r2]
 8003954:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003958:	40d3      	lsrs	r3, r2
 800395a:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800395c:	6a0a      	ldr	r2, [r1, #32]
 800395e:	4912      	ldr	r1, [pc, #72]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x88>)
 8003960:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003964:	5c88      	ldrb	r0, [r1, r2]
 8003966:	f000 001f 	and.w	r0, r0, #31
}
 800396a:	fa23 f000 	lsr.w	r0, r3, r0
 800396e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	f002 0218 	and.w	r2, r2, #24
 8003976:	2a10      	cmp	r2, #16
 8003978:	d00c      	beq.n	8003994 <HAL_RCC_GetPCLK2Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0318 	and.w	r3, r3, #24
 8003980:	2b18      	cmp	r3, #24
 8003982:	d003      	beq.n	800398c <HAL_RCC_GetPCLK2Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003986:	e7de      	b.n	8003946 <HAL_RCC_GetPCLK2Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x8c>)
 800398a:	e7dc      	b.n	8003946 <HAL_RCC_GetPCLK2Freq+0x26>
 800398c:	f7ff f9d2 	bl	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
 8003990:	4603      	mov	r3, r0
 8003992:	e7d8      	b.n	8003946 <HAL_RCC_GetPCLK2Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x90>)
 8003996:	e7d6      	b.n	8003946 <HAL_RCC_GetPCLK2Freq+0x26>
 8003998:	44020c00 	.word	0x44020c00
 800399c:	03d09000 	.word	0x03d09000
 80039a0:	0800f8cc 	.word	0x0800f8cc
 80039a4:	20000000 	.word	0x20000000
 80039a8:	0800f8c4 	.word	0x0800f8c4
 80039ac:	003d0900 	.word	0x003d0900
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <HAL_RCC_GetPCLK3Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80039b4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <HAL_RCC_GetPCLK3Freq+0x78>)
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80039b6:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	f002 0218 	and.w	r2, r2, #24
 80039be:	2a08      	cmp	r2, #8
 80039c0:	d02c      	beq.n	8003a1c <HAL_RCC_GetPCLK3Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	f012 0f18 	tst.w	r2, #24
 80039c8:	d11c      	bne.n	8003a04 <HAL_RCC_GetPCLK3Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	0692      	lsls	r2, r2, #26
 80039ce:	d523      	bpl.n	8003a18 <HAL_RCC_GetPCLK3Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <HAL_RCC_GetPCLK3Freq+0x7c>)
 80039d4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80039d8:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039da:	4914      	ldr	r1, [pc, #80]	@ (8003a2c <HAL_RCC_GetPCLK3Freq+0x78>)
 80039dc:	4c15      	ldr	r4, [pc, #84]	@ (8003a34 <HAL_RCC_GetPCLK3Freq+0x80>)
 80039de:	6a0a      	ldr	r2, [r1, #32]
 80039e0:	4815      	ldr	r0, [pc, #84]	@ (8003a38 <HAL_RCC_GetPCLK3Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80039e2:	f002 020f 	and.w	r2, r2, #15
 80039e6:	5ca2      	ldrb	r2, [r4, r2]
 80039e8:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80039ec:	40d3      	lsrs	r3, r2
 80039ee:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80039f0:	6a0a      	ldr	r2, [r1, #32]
 80039f2:	4912      	ldr	r1, [pc, #72]	@ (8003a3c <HAL_RCC_GetPCLK3Freq+0x88>)
 80039f4:	f3c2 3202 	ubfx	r2, r2, #12, #3
 80039f8:	5c88      	ldrb	r0, [r1, r2]
 80039fa:	f000 001f 	and.w	r0, r0, #31
}
 80039fe:	fa23 f000 	lsr.w	r0, r3, r0
 8003a02:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	f002 0218 	and.w	r2, r2, #24
 8003a0a:	2a10      	cmp	r2, #16
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_GetPCLK3Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 0318 	and.w	r3, r3, #24
 8003a14:	2b18      	cmp	r3, #24
 8003a16:	d003      	beq.n	8003a20 <HAL_RCC_GetPCLK3Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003a18:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <HAL_RCC_GetPCLK3Freq+0x7c>)
 8003a1a:	e7de      	b.n	80039da <HAL_RCC_GetPCLK3Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003a1c:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <HAL_RCC_GetPCLK3Freq+0x8c>)
 8003a1e:	e7dc      	b.n	80039da <HAL_RCC_GetPCLK3Freq+0x26>
 8003a20:	f7ff f988 	bl	8002d34 <HAL_RCC_GetSysClockFreq.part.0>
 8003a24:	4603      	mov	r3, r0
 8003a26:	e7d8      	b.n	80039da <HAL_RCC_GetPCLK3Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_GetPCLK3Freq+0x90>)
 8003a2a:	e7d6      	b.n	80039da <HAL_RCC_GetPCLK3Freq+0x26>
 8003a2c:	44020c00 	.word	0x44020c00
 8003a30:	03d09000 	.word	0x03d09000
 8003a34:	0800f8cc 	.word	0x0800f8cc
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	0800f8c4 	.word	0x0800f8c4
 8003a40:	003d0900 	.word	0x003d0900
 8003a44:	007a1200 	.word	0x007a1200

08003a48 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003a4a:	4c33      	ldr	r4, [pc, #204]	@ (8003b18 <RCCEx_PLL2_Config+0xd0>)
{
 8003a4c:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a54:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a56:	f7fe f959 	bl	8001d0c <HAL_GetTick>
 8003a5a:	4605      	mov	r5, r0

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a5c:	e004      	b.n	8003a68 <RCCEx_PLL2_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a5e:	f7fe f955 	bl	8001d0c <HAL_GetTick>
 8003a62:	1b40      	subs	r0, r0, r5
 8003a64:	2802      	cmp	r0, #2
 8003a66:	d855      	bhi.n	8003b14 <RCCEx_PLL2_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	011a      	lsls	r2, r3, #4
 8003a6c:	d4f7      	bmi.n	8003a5e <RCCEx_PLL2_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003a6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003a70:	6831      	ldr	r1, [r6, #0]
 8003a72:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a76:	6872      	ldr	r2, [r6, #4]
 8003a78:	f023 0303 	bic.w	r3, r3, #3
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a84:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	3a01      	subs	r2, #1
 8003a8c:	025b      	lsls	r3, r3, #9
 8003a8e:	0412      	lsls	r2, r2, #16
 8003a90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	68b1      	ldr	r1, [r6, #8]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	6972      	ldr	r2, [r6, #20]
 8003a9c:	3901      	subs	r1, #1
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003aa4:	0612      	lsls	r2, r2, #24
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003aac:	4313      	orrs	r3, r2
 8003aae:	63e3      	str	r3, [r4, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003ab0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ab2:	69b2      	ldr	r2, [r6, #24]
 8003ab4:	f023 030c 	bic.w	r3, r3, #12
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003abc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003abe:	69f2      	ldr	r2, [r6, #28]
 8003ac0:	f023 0320 	bic.w	r3, r3, #32
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003ac8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003aca:	6a72      	ldr	r2, [r6, #36]	@ 0x24

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003acc:	4d12      	ldr	r5, [pc, #72]	@ (8003b18 <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003ad2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003ada:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003adc:	6a32      	ldr	r2, [r6, #32]
 8003ade:	f36f 03cf 	bfc	r3, #3, #13
 8003ae2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ae6:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003ae8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003aea:	f043 0310 	orr.w	r3, r3, #16
 8003aee:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003af6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003af8:	f7fe f908 	bl	8001d0c <HAL_GetTick>
 8003afc:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003afe:	e004      	b.n	8003b0a <RCCEx_PLL2_Config+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b00:	f7fe f904 	bl	8001d0c <HAL_GetTick>
 8003b04:	1b00      	subs	r0, r0, r4
 8003b06:	2802      	cmp	r0, #2
 8003b08:	d804      	bhi.n	8003b14 <RCCEx_PLL2_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b0a:	682b      	ldr	r3, [r5, #0]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	d5f7      	bpl.n	8003b00 <RCCEx_PLL2_Config+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003b10:	2000      	movs	r0, #0

}
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003b14:	2003      	movs	r0, #3
}
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	44020c00 	.word	0x44020c00

08003b1c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003b1c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8003b1e:	4c33      	ldr	r4, [pc, #204]	@ (8003bec <RCCEx_PLL3_Config+0xd0>)
{
 8003b20:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b2a:	f7fe f8ef 	bl	8001d0c <HAL_GetTick>
 8003b2e:	4605      	mov	r5, r0

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b30:	e004      	b.n	8003b3c <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003b32:	f7fe f8eb 	bl	8001d0c <HAL_GetTick>
 8003b36:	1b40      	subs	r0, r0, r5
 8003b38:	2802      	cmp	r0, #2
 8003b3a:	d855      	bhi.n	8003be8 <RCCEx_PLL3_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	009a      	lsls	r2, r3, #2
 8003b40:	d4f7      	bmi.n	8003b32 <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003b42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b44:	6831      	ldr	r1, [r6, #0]
 8003b46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b4a:	6872      	ldr	r2, [r6, #4]
 8003b4c:	f023 0303 	bic.w	r3, r3, #3
 8003b50:	430b      	orrs	r3, r1
 8003b52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b56:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b58:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	3a01      	subs	r2, #1
 8003b60:	025b      	lsls	r3, r3, #9
 8003b62:	0412      	lsls	r2, r2, #16
 8003b64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	68b1      	ldr	r1, [r6, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	6972      	ldr	r2, [r6, #20]
 8003b70:	3901      	subs	r1, #1
 8003b72:	3a01      	subs	r2, #1
 8003b74:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003b80:	4313      	orrs	r3, r2
 8003b82:	6463      	str	r3, [r4, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b86:	69b2      	ldr	r2, [r6, #24]
 8003b88:	f023 030c 	bic.w	r3, r3, #12
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8003b90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b92:	69f2      	ldr	r2, [r6, #28]
 8003b94:	f023 0320 	bic.w	r3, r3, #32
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003b9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003b9e:	6a72      	ldr	r2, [r6, #36]	@ 0x24

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ba0:	4d12      	ldr	r5, [pc, #72]	@ (8003bec <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8003ba6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ba8:	f023 0310 	bic.w	r3, r3, #16
 8003bac:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8003bae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003bb0:	6a32      	ldr	r2, [r6, #32]
 8003bb2:	f36f 03cf 	bfc	r3, #3, #13
 8003bb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003bba:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8003bbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003bbe:	f043 0310 	orr.w	r3, r3, #16
 8003bc2:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003bcc:	f7fe f89e 	bl	8001d0c <HAL_GetTick>
 8003bd0:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bd2:	e004      	b.n	8003bde <RCCEx_PLL3_Config+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003bd4:	f7fe f89a 	bl	8001d0c <HAL_GetTick>
 8003bd8:	1b00      	subs	r0, r0, r4
 8003bda:	2802      	cmp	r0, #2
 8003bdc:	d804      	bhi.n	8003be8 <RCCEx_PLL3_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	d5f7      	bpl.n	8003bd4 <RCCEx_PLL3_Config+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003be4:	2000      	movs	r0, #0
}
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003be8:	2003      	movs	r0, #3
}
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	44020c00 	.word	0x44020c00

08003bf0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bf4:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003bf8:	01de      	lsls	r6, r3, #7
{
 8003bfa:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bfc:	d508      	bpl.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003bfe:	482d      	ldr	r0, [pc, #180]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>)
 8003c00:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003c02:	f8d0 10e8 	ldr.w	r1, [r0, #232]	@ 0xe8
 8003c06:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8003c0a:	4329      	orrs	r1, r5
 8003c0c:	f8c0 10e8 	str.w	r1, [r0, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c10:	f013 0601 	ands.w	r6, r3, #1
 8003c14:	d01d      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8003c16:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003c18:	2905      	cmp	r1, #5
 8003c1a:	f201 8165 	bhi.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003c1e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c22:	000f      	.short	0x000f
 8003c24:	07e10006 	.word	0x07e10006
 8003c28:	000f000f 	.word	0x000f000f
 8003c2c:	000f      	.short	0x000f
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c2e:	f104 0008 	add.w	r0, r4, #8
 8003c32:	f7ff ff09 	bl	8003a48 <RCCEx_PLL2_Config>
 8003c36:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c3c:	b94e      	cbnz	r6, 8003c52 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003c3e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c40:	2600      	movs	r6, #0
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003c42:	4d1c      	ldr	r5, [pc, #112]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>)
 8003c44:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
 8003c48:	f020 0007 	bic.w	r0, r0, #7
 8003c4c:	4301      	orrs	r1, r0
 8003c4e:	f8c5 10d8 	str.w	r1, [r5, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c52:	079d      	lsls	r5, r3, #30
 8003c54:	d531      	bpl.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8003c56:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003c58:	2928      	cmp	r1, #40	@ 0x28
 8003c5a:	d82d      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003c5c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c60:	002c07b4 	.word	0x002c07b4
 8003c64:	002c002c 	.word	0x002c002c
 8003c68:	002c002c 	.word	0x002c002c
 8003c6c:	002c002c 	.word	0x002c002c
 8003c70:	002c07e4 	.word	0x002c07e4
 8003c74:	002c002c 	.word	0x002c002c
 8003c78:	002c002c 	.word	0x002c002c
 8003c7c:	002c002c 	.word	0x002c002c
 8003c80:	002c07f0 	.word	0x002c07f0
 8003c84:	002c002c 	.word	0x002c002c
 8003c88:	002c002c 	.word	0x002c002c
 8003c8c:	002c002c 	.word	0x002c002c
 8003c90:	002c07b4 	.word	0x002c07b4
 8003c94:	002c002c 	.word	0x002c002c
 8003c98:	002c002c 	.word	0x002c002c
 8003c9c:	002c002c 	.word	0x002c002c
 8003ca0:	002c07b4 	.word	0x002c07b4
 8003ca4:	002c002c 	.word	0x002c002c
 8003ca8:	002c002c 	.word	0x002c002c
 8003cac:	002c002c 	.word	0x002c002c
 8003cb0:	07b4      	.short	0x07b4
 8003cb2:	bf00      	nop
 8003cb4:	44020c00 	.word	0x44020c00
 8003cb8:	2601      	movs	r6, #1
 8003cba:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cbc:	0758      	lsls	r0, r3, #29
 8003cbe:	d51c      	bpl.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8003cc0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003cc2:	2980      	cmp	r1, #128	@ 0x80
 8003cc4:	f000 8700 	beq.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8003cc8:	f201 80c2 	bhi.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003ccc:	b149      	cbz	r1, 8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8003cce:	2940      	cmp	r1, #64	@ 0x40
 8003cd0:	f041 80c7 	bne.w	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1272>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd4:	f104 0008 	add.w	r0, r4, #8
 8003cd8:	f7ff feb6 	bl	8003a48 <RCCEx_PLL2_Config>
 8003cdc:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	f040 8542 	bne.w	800476c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003ce8:	4f80      	ldr	r7, [pc, #512]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cea:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003cec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003cf0:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8003cf4:	4301      	orrs	r1, r0
 8003cf6:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cfa:	0719      	lsls	r1, r3, #28
 8003cfc:	d51e      	bpl.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8003cfe:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003d00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003d04:	f000 86ee 	beq.w	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xef4>
 8003d08:	f200 87fa 	bhi.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1110>
 8003d0c:	b151      	cbz	r1, 8003d24 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8003d0e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003d12:	f040 87ff 	bne.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1124>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d16:	f104 0008 	add.w	r0, r4, #8
 8003d1a:	f7ff fe95 	bl	8003a48 <RCCEx_PLL2_Config>
 8003d1e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	f040 8500 	bne.w	800472a <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003d2a:	4f70      	ldr	r7, [pc, #448]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d2c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003d2e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003d32:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8003d36:	4301      	orrs	r1, r0
 8003d38:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d3c:	06df      	lsls	r7, r3, #27
 8003d3e:	d51e      	bpl.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8003d40:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8003d42:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003d46:	f000 86d9 	beq.w	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003d4a:	f200 8787 	bhi.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003d4e:	b151      	cbz	r1, 8003d66 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8003d50:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003d54:	f040 878c 	bne.w	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1080>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d58:	f104 0008 	add.w	r0, r4, #8
 8003d5c:	f7ff fe74 	bl	8003a48 <RCCEx_PLL2_Config>
 8003d60:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	f040 8503 	bne.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0xb82>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003d6c:	4f5f      	ldr	r7, [pc, #380]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003d6e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003d70:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003d74:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003d78:	4301      	orrs	r1, r0
 8003d7a:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d7e:	0698      	lsls	r0, r3, #26
 8003d80:	d51e      	bpl.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8003d82:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003d84:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003d88:	f000 86c4 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003d8c:	f200 87e2 	bhi.w	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1164>
 8003d90:	b151      	cbz	r1, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d92:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003d96:	f040 87e7 	bne.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d9a:	f104 0008 	add.w	r0, r4, #8
 8003d9e:	f7ff fe53 	bl	8003a48 <RCCEx_PLL2_Config>
 8003da2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	f040 84e7 	bne.w	800477c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003dae:	4f4f      	ldr	r7, [pc, #316]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003db0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003db2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003db6:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
 8003dba:	4301      	orrs	r1, r0
 8003dbc:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dc0:	0659      	lsls	r1, r3, #25
 8003dc2:	d51e      	bpl.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8003dc4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8003dc6:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8003dca:	f000 863a 	beq.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xe52>
 8003dce:	f201 8015 	bhi.w	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x120c>
 8003dd2:	b151      	cbz	r1, 8003dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003dd4:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8003dd8:	f041 801a 	bne.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ddc:	f104 0008 	add.w	r0, r4, #8
 8003de0:	f7ff fe32 	bl	8003a48 <RCCEx_PLL2_Config>
 8003de4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	f040 84cb 	bne.w	8004786 <HAL_RCCEx_PeriphCLKConfig+0xb96>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003df0:	4f3e      	ldr	r7, [pc, #248]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003df2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003df4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003df8:	f421 11e0 	bic.w	r1, r1, #1835008	@ 0x1c0000
 8003dfc:	4301      	orrs	r1, r0
 8003dfe:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e02:	061f      	lsls	r7, r3, #24
 8003e04:	d51e      	bpl.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8003e06:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003e08:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003e0c:	f000 8625 	beq.w	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xe6a>
 8003e10:	f200 8792 	bhi.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003e14:	b151      	cbz	r1, 8003e2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8003e16:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003e1a:	f040 8797 	bne.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x115c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e1e:	f104 0008 	add.w	r0, r4, #8
 8003e22:	f7ff fe11 	bl	8003a48 <RCCEx_PLL2_Config>
 8003e26:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e2c:	2d00      	cmp	r5, #0
 8003e2e:	f040 848f 	bne.w	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb60>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003e32:	4f2e      	ldr	r7, [pc, #184]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e34:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003e36:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e3a:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8003e3e:	4301      	orrs	r1, r0
 8003e40:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003e44:	05d8      	lsls	r0, r3, #23
 8003e46:	d51e      	bpl.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8003e48:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003e4a:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003e4e:	f000 85e0 	beq.w	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8003e52:	f200 8711 	bhi.w	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003e56:	b151      	cbz	r1, 8003e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003e58:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003e5c:	f040 8716 	bne.w	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e60:	f104 0008 	add.w	r0, r4, #8
 8003e64:	f7ff fdf0 	bl	8003a48 <RCCEx_PLL2_Config>
 8003e68:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	f040 8466 	bne.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb50>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003e74:	4f1d      	ldr	r7, [pc, #116]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e76:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003e78:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e7c:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003e80:	4301      	orrs	r1, r0
 8003e82:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003e86:	0599      	lsls	r1, r3, #22
 8003e88:	d520      	bpl.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8003e8a:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003e8e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003e92:	f000 85ca 	beq.w	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003e96:	f200 87cd 	bhi.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 8003e9a:	b151      	cbz	r1, 8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e9c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8003ea0:	f040 87d2 	bne.w	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1258>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ea4:	f104 0008 	add.w	r0, r4, #8
 8003ea8:	f7ff fdce 	bl	8003a48 <RCCEx_PLL2_Config>
 8003eac:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	f040 844f 	bne.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0xb66>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003eb8:	4f0c      	ldr	r7, [pc, #48]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003eba:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003ebe:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003ec2:	f021 5160 	bic.w	r1, r1, #939524096	@ 0x38000000
 8003ec6:	4301      	orrs	r1, r0
 8003ec8:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003ecc:	055f      	lsls	r7, r3, #21
 8003ece:	d51a      	bpl.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8003ed0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8003ed4:	2905      	cmp	r1, #5
 8003ed6:	f201 800a 	bhi.w	8004eee <HAL_RCCEx_PeriphCLKConfig+0x12fe>
 8003eda:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003ede:	0010      	.short	0x0010
 8003ee0:	068a0009 	.word	0x068a0009
 8003ee4:	00100010 	.word	0x00100010
 8003ee8:	0010      	.short	0x0010
 8003eea:	bf00      	nop
 8003eec:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ef0:	f104 0008 	add.w	r0, r4, #8
 8003ef4:	f7ff fda8 	bl	8003a48 <RCCEx_PLL2_Config>
 8003ef8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	f000 8403 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      status = ret;
 8003f04:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003f06:	0518      	lsls	r0, r3, #20
 8003f08:	d51e      	bpl.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8003f0a:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8003f0e:	2920      	cmp	r1, #32
 8003f10:	f000 8573 	beq.w	80049fa <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 8003f14:	f200 86be 	bhi.w	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8003f18:	b149      	cbz	r1, 8003f2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f1a:	2910      	cmp	r1, #16
 8003f1c:	f040 86c2 	bne.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f20:	f104 0008 	add.w	r0, r4, #8
 8003f24:	f7ff fd90 	bl	8003a48 <RCCEx_PLL2_Config>
 8003f28:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	f040 8409 	bne.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003f34:	4fb0      	ldr	r7, [pc, #704]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8003f36:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003f3a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8003f3e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8003f42:	4301      	orrs	r1, r0
 8003f44:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f48:	04d9      	lsls	r1, r3, #19
 8003f4a:	d520      	bpl.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003f4c:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8003f50:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003f54:	f000 853c 	beq.w	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8003f58:	f200 8742 	bhi.w	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x11f0>
 8003f5c:	b151      	cbz	r1, 8003f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003f5e:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003f62:	f040 8747 	bne.w	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1204>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f66:	f104 0008 	add.w	r0, r4, #8
 8003f6a:	f7ff fd6d 	bl	8003a48 <RCCEx_PLL2_Config>
 8003f6e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	f040 83e9 	bne.w	800474c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003f7a:	4f9f      	ldr	r7, [pc, #636]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8003f7c:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8003f80:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8003f84:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003f88:	4301      	orrs	r1, r0
 8003f8a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8e:	049f      	lsls	r7, r3, #18
 8003f90:	d50f      	bpl.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8003f92:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8003f96:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003f9a:	f000 843c 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003f9e:	f240 84a7 	bls.w	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fa2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003fa6:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8003faa:	f000 843b 	beq.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fae:	2601      	movs	r6, #1
 8003fb0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb2:	0458      	lsls	r0, r3, #17
 8003fb4:	d50f      	bpl.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8003fb6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8003fba:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8003fbe:	f000 83e5 	beq.w	800478c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fc2:	f240 84a6 	bls.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003fc6:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003fca:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8003fce:	f000 83e4 	beq.w	800479a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003fd2:	2601      	movs	r6, #1
 8003fd4:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd6:	0419      	lsls	r1, r3, #16
 8003fd8:	d50f      	bpl.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8003fda:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8003fde:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003fe2:	f000 8402 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003fe6:	f240 848b 	bls.w	8004900 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fea:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8003fee:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003ff2:	f000 8401 	beq.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003ff6:	2601      	movs	r6, #1
 8003ff8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ffa:	0557      	lsls	r7, r2, #21
 8003ffc:	d50f      	bpl.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8003ffe:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8004002:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004006:	f000 83db 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800400a:	f240 8468 	bls.w	80048de <HAL_RCCEx_PeriphCLKConfig+0xcee>
 800400e:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8004012:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004016:	f000 83da 	beq.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800401a:	2601      	movs	r6, #1
 800401c:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800401e:	03d8      	lsls	r0, r3, #15
 8004020:	d50b      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    switch (pPeriphClkInit->I3c1ClockSelection)
 8004022:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8004026:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800402a:	f000 8357 	beq.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800402e:	f031 7100 	bics.w	r1, r1, #33554432	@ 0x2000000
 8004032:	f000 835a 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0xafa>
 8004036:	2601      	movs	r6, #1
 8004038:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800403a:	0511      	lsls	r1, r2, #20
 800403c:	d509      	bpl.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x462>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800403e:	496e      	ldr	r1, [pc, #440]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004040:	69c8      	ldr	r0, [r1, #28]
 8004042:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004046:	61c8      	str	r0, [r1, #28]
 8004048:	69c8      	ldr	r0, [r1, #28]
 800404a:	f8d4 7104 	ldr.w	r7, [r4, #260]	@ 0x104
 800404e:	4338      	orrs	r0, r7
 8004050:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004052:	039f      	lsls	r7, r3, #14
 8004054:	d520      	bpl.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004056:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800405a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800405e:	f000 84ab 	beq.w	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
 8004062:	f200 8693 	bhi.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x119c>
 8004066:	b151      	cbz	r1, 800407e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004068:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800406c:	f040 8698 	bne.w	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004070:	f104 0008 	add.w	r0, r4, #8
 8004074:	f7ff fce8 	bl	8003a48 <RCCEx_PLL2_Config>
 8004078:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800407e:	2d00      	cmp	r5, #0
 8004080:	f040 835c 	bne.w	800473c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004084:	4f5c      	ldr	r7, [pc, #368]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004086:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800408a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800408e:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004092:	4301      	orrs	r1, r0
 8004094:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004098:	0358      	lsls	r0, r3, #13
 800409a:	d520      	bpl.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 800409c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80040a0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80040a4:	f000 8464 	beq.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80040a8:	f200 861c 	bhi.w	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x10f4>
 80040ac:	b151      	cbz	r1, 80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80040ae:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80040b2:	f040 8621 	bne.w	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1108>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040b6:	f104 0008 	add.w	r0, r4, #8
 80040ba:	f7ff fcc5 	bl	8003a48 <RCCEx_PLL2_Config>
 80040be:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80040c4:	2d00      	cmp	r5, #0
 80040c6:	f040 8349 	bne.w	800475c <HAL_RCCEx_PeriphCLKConfig+0xb6c>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80040ca:	4f4b      	ldr	r7, [pc, #300]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80040cc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80040d0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80040d4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80040d8:	4301      	orrs	r1, r0
 80040da:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80040de:	0691      	lsls	r1, r2, #26
 80040e0:	d520      	bpl.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 80040e2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80040e6:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80040ea:	f000 844d 	beq.w	8004988 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80040ee:	f200 8669 	bhi.w	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
 80040f2:	b151      	cbz	r1, 800410a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040f4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80040f8:	f040 866e 	bne.w	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040fc:	f104 0008 	add.w	r0, r4, #8
 8004100:	f7ff fca2 	bl	8003a48 <RCCEx_PLL2_Config>
 8004104:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800410a:	2d00      	cmp	r5, #0
 800410c:	f040 8310 	bne.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0xb40>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004110:	4f39      	ldr	r7, [pc, #228]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004112:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8004116:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800411a:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800411e:	4301      	orrs	r1, r0
 8004120:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004124:	0657      	lsls	r7, r2, #25
 8004126:	d520      	bpl.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004128:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800412c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004130:	f000 84ab 	beq.w	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8004134:	f200 8670 	bhi.w	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1228>
 8004138:	b151      	cbz	r1, 8004150 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800413a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800413e:	f040 8675 	bne.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x123c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004142:	f104 0008 	add.w	r0, r4, #8
 8004146:	f7ff fc7f 	bl	8003a48 <RCCEx_PLL2_Config>
 800414a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004150:	2d00      	cmp	r5, #0
 8004152:	f040 82ef 	bne.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0xb44>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004156:	4f28      	ldr	r7, [pc, #160]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004158:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800415c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004160:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8004164:	4301      	orrs	r1, r0
 8004166:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800416a:	0610      	lsls	r0, r2, #24
 800416c:	d520      	bpl.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 800416e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8004172:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004176:	f000 8413 	beq.w	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800417a:	f200 85a5 	bhi.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10d8>
 800417e:	b151      	cbz	r1, 8004196 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004180:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004184:	f040 85aa 	bne.w	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x10ec>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004188:	f104 0008 	add.w	r0, r4, #8
 800418c:	f7ff fc5c 	bl	8003a48 <RCCEx_PLL2_Config>
 8004190:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004196:	2d00      	cmp	r5, #0
 8004198:	f040 82e2 	bne.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800419c:	4f16      	ldr	r7, [pc, #88]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800419e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80041a2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80041a6:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80041aa:	4301      	orrs	r1, r0
 80041ac:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80041b0:	05d1      	lsls	r1, r2, #23
 80041b2:	d523      	bpl.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 80041b4:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80041b8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80041bc:	f000 8459 	beq.w	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80041c0:	f200 85d6 	bhi.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041c4:	b151      	cbz	r1, 80041dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 80041c6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80041ca:	f040 85db 	bne.w	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1194>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ce:	f104 0008 	add.w	r0, r4, #8
 80041d2:	f7ff fc39 	bl	8003a48 <RCCEx_PLL2_Config>
 80041d6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80041dc:	2d00      	cmp	r5, #0
 80041de:	f040 82a2 	bne.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb36>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80041e2:	4f05      	ldr	r7, [pc, #20]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80041e4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 80041e8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80041ec:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80041f0:	4301      	orrs	r1, r0
 80041f2:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80041f8:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041fc:	031f      	lsls	r7, r3, #12
 80041fe:	d522      	bpl.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004200:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8004204:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004208:	f000 84bb 	beq.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xf92>
 800420c:	f200 8630 	bhi.w	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1280>
 8004210:	2900      	cmp	r1, #0
 8004212:	f000 848e 	beq.w	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
 8004216:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800421a:	f040 8631 	bne.w	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1290>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800421e:	f104 0008 	add.w	r0, r4, #8
 8004222:	f7ff fc11 	bl	8003a48 <RCCEx_PLL2_Config>
 8004226:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800422c:	2d00      	cmp	r5, #0
 800422e:	f040 8488 	bne.w	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xf52>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004232:	4fa2      	ldr	r7, [pc, #648]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004234:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8004238:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800423c:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8004240:	4301      	orrs	r1, r0
 8004242:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004246:	02d8      	lsls	r0, r3, #11
 8004248:	d522      	bpl.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800424a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800424e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004252:	f000 8489 	beq.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8004256:	f200 8617 	bhi.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1298>
 800425a:	2900      	cmp	r1, #0
 800425c:	f000 84a6 	beq.w	8004bac <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004260:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8004264:	f040 8618 	bne.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004268:	f104 0008 	add.w	r0, r4, #8
 800426c:	f7ff fbec 	bl	8003a48 <RCCEx_PLL2_Config>
 8004270:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004276:	2d00      	cmp	r5, #0
 8004278:	f040 8480 	bne.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800427c:	4f8f      	ldr	r7, [pc, #572]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800427e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8004282:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004286:	f421 1160 	bic.w	r1, r1, #3670016	@ 0x380000
 800428a:	4301      	orrs	r1, r0
 800428c:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004290:	0299      	lsls	r1, r3, #10
 8004292:	d50c      	bpl.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6be>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8004294:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8004298:	2902      	cmp	r1, #2
 800429a:	f000 8162 	beq.w	8004562 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800429e:	f240 8167 	bls.w	8004570 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80042a2:	3903      	subs	r1, #3
 80042a4:	2902      	cmp	r1, #2
 80042a6:	f240 8163 	bls.w	8004570 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80042aa:	2601      	movs	r6, #1
 80042ac:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80042ae:	0597      	lsls	r7, r2, #22
 80042b0:	d507      	bpl.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80042b2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 80042b6:	f031 0008 	bics.w	r0, r1, #8
 80042ba:	f000 817b 	beq.w	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 80042be:	2601      	movs	r6, #1
 80042c0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c2:	0198      	lsls	r0, r3, #6
 80042c4:	f100 8184 	bmi.w	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042c8:	0159      	lsls	r1, r3, #5
 80042ca:	d50d      	bpl.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    switch (pPeriphClkInit->RngClockSelection)
 80042cc:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
 80042d0:	2910      	cmp	r1, #16
 80042d2:	f000 82db 	beq.w	800488c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80042d6:	f240 8325 	bls.w	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 80042da:	f021 0010 	bic.w	r0, r1, #16
 80042de:	2820      	cmp	r0, #32
 80042e0:	f000 82d9 	beq.w	8004896 <HAL_RCCEx_PeriphCLKConfig+0xca6>
 80042e4:	2601      	movs	r6, #1
 80042e6:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042e8:	025f      	lsls	r7, r3, #9
 80042ea:	d509      	bpl.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x710>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80042ec:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 80042f0:	2900      	cmp	r1, #0
 80042f2:	f000 82a5 	beq.w	8004840 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80042f6:	2940      	cmp	r1, #64	@ 0x40
 80042f8:	f000 82d8 	beq.w	80048ac <HAL_RCCEx_PeriphCLKConfig+0xcbc>
 80042fc:	2601      	movs	r6, #1
 80042fe:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004300:	0218      	lsls	r0, r3, #8
 8004302:	d509      	bpl.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x728>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004304:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 8004308:	2900      	cmp	r1, #0
 800430a:	f000 82ab 	beq.w	8004864 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800430e:	2980      	cmp	r1, #128	@ 0x80
 8004310:	f000 82da 	beq.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 8004314:	2601      	movs	r6, #1
 8004316:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004318:	0119      	lsls	r1, r3, #4
 800431a:	d50c      	bpl.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (pPeriphClkInit->Spi1ClockSelection)
 800431c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8004320:	2904      	cmp	r1, #4
 8004322:	f200 85d9 	bhi.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
 8004326:	e8df f011 	tbh	[pc, r1, lsl #1]
 800432a:	0109      	.short	0x0109
 800432c:	0417040f 	.word	0x0417040f
 8004330:	010e010e 	.word	0x010e010e
      status = ret;
 8004334:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004336:	00df      	lsls	r7, r3, #3
 8004338:	d528      	bpl.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    switch (pPeriphClkInit->Spi2ClockSelection)
 800433a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
 800433e:	2920      	cmp	r1, #32
 8004340:	d822      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x798>
 8004342:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004346:	01a8      	.short	0x01a8
 8004348:	00210021 	.word	0x00210021
 800434c:	00210021 	.word	0x00210021
 8004350:	00210021 	.word	0x00210021
 8004354:	04690021 	.word	0x04690021
 8004358:	00210021 	.word	0x00210021
 800435c:	00210021 	.word	0x00210021
 8004360:	00210021 	.word	0x00210021
 8004364:	04610021 	.word	0x04610021
 8004368:	00210021 	.word	0x00210021
 800436c:	00210021 	.word	0x00210021
 8004370:	00210021 	.word	0x00210021
 8004374:	01ad0021 	.word	0x01ad0021
 8004378:	00210021 	.word	0x00210021
 800437c:	00210021 	.word	0x00210021
 8004380:	00210021 	.word	0x00210021
 8004384:	01ad0021 	.word	0x01ad0021
 8004388:	2601      	movs	r6, #1
 800438a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800438c:	0098      	lsls	r0, r3, #2
 800438e:	d520      	bpl.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8004390:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8004394:	2980      	cmp	r1, #128	@ 0x80
 8004396:	f000 83fd 	beq.w	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800439a:	f200 8581 	bhi.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
 800439e:	2900      	cmp	r1, #0
 80043a0:	f000 840b 	beq.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfca>
 80043a4:	2940      	cmp	r1, #64	@ 0x40
 80043a6:	f040 8582 	bne.w	8004eae <HAL_RCCEx_PeriphCLKConfig+0x12be>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043aa:	f104 0008 	add.w	r0, r4, #8
 80043ae:	f7ff fb4b 	bl	8003a48 <RCCEx_PLL2_Config>
 80043b2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	f040 83f5 	bne.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80043be:	4f3f      	ldr	r7, [pc, #252]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043c0:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 80043c4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80043c8:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80043cc:	4301      	orrs	r1, r0
 80043ce:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80043d2:	0059      	lsls	r1, r3, #1
 80043d4:	d520      	bpl.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x828>
    switch (pPeriphClkInit->Spi4ClockSelection)
 80043d6:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 80043da:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80043de:	f000 82a8 	beq.w	8004932 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80043e2:	f200 8463 	bhi.w	8004cac <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80043e6:	b151      	cbz	r1, 80043fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80043e8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80043ec:	f040 8468 	bne.w	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043f0:	f104 0008 	add.w	r0, r4, #8
 80043f4:	f7ff fb28 	bl	8003a48 <RCCEx_PLL2_Config>
 80043f8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80043fe:	2d00      	cmp	r5, #0
 8004400:	f040 81bf 	bne.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0xb92>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004404:	4f2d      	ldr	r7, [pc, #180]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004406:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 800440a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800440e:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8004412:	4301      	orrs	r1, r0
 8004414:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004418:	2b00      	cmp	r3, #0
 800441a:	da1f      	bge.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    switch (pPeriphClkInit->Spi5ClockSelection)
 800441c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004424:	f000 8290 	beq.w	8004948 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004428:	f200 8478 	bhi.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x112c>
 800442c:	b14b      	cbz	r3, 8004442 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004432:	f040 847d 	bne.w	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004436:	f104 0008 	add.w	r0, r4, #8
 800443a:	f7ff fb05 	bl	8003a48 <RCCEx_PLL2_Config>
 800443e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004440:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004442:	2d00      	cmp	r5, #0
 8004444:	f040 8178 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004448:	491c      	ldr	r1, [pc, #112]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800444a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 800444e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	4303      	orrs	r3, r0
 8004458:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800445c:	07d3      	lsls	r3, r2, #31
 800445e:	d51f      	bpl.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8004460:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004468:	f000 8278 	beq.w	800495c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800446c:	f200 849c 	bhi.w	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
 8004470:	b14b      	cbz	r3, 8004486 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004476:	f040 84a1 	bne.w	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800447a:	f104 0008 	add.w	r0, r4, #8
 800447e:	f7ff fae3 	bl	8003a48 <RCCEx_PLL2_Config>
 8004482:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004484:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004486:	2d00      	cmp	r5, #0
 8004488:	f040 8176 	bne.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb88>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800448c:	490b      	ldr	r1, [pc, #44]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800448e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8004492:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 8004496:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 800449a:	4303      	orrs	r3, r0
 800449c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044a0:	0797      	lsls	r7, r2, #30
 80044a2:	d51f      	bpl.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch (pPeriphClkInit->OspiClockSelection)
 80044a4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	f200 8519 	bhi.w	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
 80044ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044b2:	000c      	.short	0x000c
 80044b4:	02f80007 	.word	0x02f80007
 80044b8:	000c      	.short	0x000c
 80044ba:	bf00      	nop
 80044bc:	44020c00 	.word	0x44020c00
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	49bd      	ldr	r1, [pc, #756]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80044c2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c8:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	f040 814c 	bne.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80044d0:	49b9      	ldr	r1, [pc, #740]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80044d2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 80044d6:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	4303      	orrs	r3, r0
 80044e0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e4:	0750      	lsls	r0, r2, #29
 80044e6:	d50c      	bpl.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x912>
    switch (pPeriphClkInit->FdcanClockSelection)
 80044e8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 80044ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f0:	f000 82e1 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f8:	d048      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x99c>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04c      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80044fe:	2601      	movs	r6, #1
 8004500:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004502:	06d1      	lsls	r1, r2, #27
 8004504:	d50b      	bpl.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    switch (pPeriphClkInit->UsbClockSelection)
 8004506:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800450a:	2b20      	cmp	r3, #32
 800450c:	f000 80d4 	beq.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004510:	2b30      	cmp	r3, #48	@ 0x30
 8004512:	f000 80d7 	beq.w	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 8004516:	2b10      	cmp	r3, #16
 8004518:	f000 8266 	beq.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800451c:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800451e:	0713      	lsls	r3, r2, #28
 8004520:	d509      	bpl.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x946>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004522:	4aa5      	ldr	r2, [pc, #660]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004524:	f8d4 10fc 	ldr.w	r1, [r4, #252]	@ 0xfc
 8004528:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800452c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004530:	430b      	orrs	r3, r1
 8004532:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 8004536:	4630      	mov	r0, r6
 8004538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453c:	489e      	ldr	r0, [pc, #632]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800453e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004540:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004544:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004546:	2d00      	cmp	r5, #0
 8004548:	f47f aef4 	bne.w	8004334 <HAL_RCCEx_PeriphCLKConfig+0x744>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800454c:	4f9a      	ldr	r7, [pc, #616]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800454e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8004552:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8004556:	f021 0107 	bic.w	r1, r1, #7
 800455a:	4301      	orrs	r1, r0
 800455c:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8004560:	e6e9      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x746>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004562:	f104 0008 	add.w	r0, r4, #8
 8004566:	f7ff fa6f 	bl	8003a48 <RCCEx_PLL2_Config>
 800456a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004570:	2d00      	cmp	r5, #0
 8004572:	f040 8189 	bne.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004576:	4f90      	ldr	r7, [pc, #576]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004578:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 800457c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004580:	f021 0107 	bic.w	r1, r1, #7
 8004584:	4301      	orrs	r1, r0
 8004586:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 800458a:	e690      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6be>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800458c:	f104 0008 	add.w	r0, r4, #8
 8004590:	f7ff fa5a 	bl	8003a48 <RCCEx_PLL2_Config>
 8004594:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004596:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004598:	2d00      	cmp	r5, #0
 800459a:	f040 80e3 	bne.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb74>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800459e:	4986      	ldr	r1, [pc, #536]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045a0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80045a4:	f8d1 30e8 	ldr.w	r3, [r1, #232]	@ 0xe8
 80045a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ac:	4303      	orrs	r3, r0
 80045ae:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80045b2:	e7a6      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x912>
    if (ret == HAL_OK)
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	f040 82b9 	bne.w	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80045ba:	4f7f      	ldr	r7, [pc, #508]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045bc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80045c0:	f020 0008 	bic.w	r0, r0, #8
 80045c4:	4301      	orrs	r1, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c6:	0198      	lsls	r0, r3, #6
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80045c8:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045cc:	f57f ae7c 	bpl.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80045d0:	4f7a      	ldr	r7, [pc, #488]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
    tickstart = HAL_GetTick();
 80045da:	f7fd fb97 	bl	8001d0c <HAL_GetTick>
 80045de:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045e0:	e006      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fd fb93 	bl	8001d0c <HAL_GetTick>
 80045e6:	eba0 0008 	sub.w	r0, r0, r8
 80045ea:	2802      	cmp	r0, #2
 80045ec:	f200 8330 	bhi.w	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1060>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	07d9      	lsls	r1, r3, #31
 80045f4:	d5f5      	bpl.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    if (ret == HAL_OK)
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	f040 832b 	bne.w	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1062>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045fc:	4f6e      	ldr	r7, [pc, #440]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80045fe:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004602:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004606:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 800460a:	d028      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 800460c:	429a      	cmp	r2, r3
 800460e:	d026      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004610:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8004614:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8004618:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800461c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004620:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8004624:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004628:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800462c:	f421 7240 	bic.w	r2, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8004630:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004634:	07ca      	lsls	r2, r1, #31
 8004636:	d512      	bpl.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        tickstart = HAL_GetTick();
 8004638:	f7fd fb68 	bl	8001d0c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004640:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004642:	e006      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xa62>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fd fb62 	bl	8001d0c <HAL_GetTick>
 8004648:	eba0 0008 	sub.w	r0, r0, r8
 800464c:	4548      	cmp	r0, r9
 800464e:	f200 843d 	bhi.w	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004652:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004656:	0798      	lsls	r0, r3, #30
 8004658:	d5f4      	bpl.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xa54>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800465a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 800465e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004662:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004666:	f000 8426 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x12c6>
 800466a:	4953      	ldr	r1, [pc, #332]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800466c:	69ca      	ldr	r2, [r1, #28]
 800466e:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004672:	61ca      	str	r2, [r1, #28]
 8004674:	4a50      	ldr	r2, [pc, #320]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467a:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800467e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004682:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
 8004686:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800468a:	430b      	orrs	r3, r1
 800468c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004690:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004694:	e618      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004696:	4848      	ldr	r0, [pc, #288]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004698:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800469a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800469e:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 80046a0:	bb8d      	cbnz	r5, 8004706 <HAL_RCCEx_PeriphCLKConfig+0xb16>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80046a2:	4f45      	ldr	r7, [pc, #276]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046a4:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 80046a8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80046ac:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 80046b0:	4301      	orrs	r1, r0
 80046b2:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80046b6:	e669      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x79c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046b8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80046bc:	f7ff fa2e 	bl	8003b1c <RCCEx_PLL3_Config>
 80046c0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046c2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80046c4:	bb6d      	cbnz	r5, 8004722 <HAL_RCCEx_PeriphCLKConfig+0xb32>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80046c6:	493c      	ldr	r1, [pc, #240]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046c8:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 80046cc:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 80046d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80046d4:	4303      	orrs	r3, r0
 80046d6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80046da:	e720      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046dc:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80046e0:	f7ff fa1c 	bl	8003b1c <RCCEx_PLL3_Config>
 80046e4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	f040 80e9 	bne.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80046f0:	4f31      	ldr	r7, [pc, #196]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046f2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80046f6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80046fa:	f021 7140 	bic.w	r1, r1, #50331648	@ 0x3000000
 80046fe:	4301      	orrs	r1, r0
 8004700:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004704:	e499      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      status = ret;
 8004706:	462e      	mov	r6, r5
 8004708:	e640      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800470a:	4f2b      	ldr	r7, [pc, #172]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800470c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004710:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004714:	f021 0107 	bic.w	r1, r1, #7
 8004718:	4301      	orrs	r1, r0
 800471a:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 800471e:	f7ff bbf2 	b.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
      status = ret;
 8004722:	462e      	mov	r6, r5
 8004724:	e6fb      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x92e>
      status = ret;
 8004726:	462e      	mov	r6, r5
 8004728:	e568      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
      status = ret;
 800472a:	462e      	mov	r6, r5
 800472c:	f7ff bb06 	b.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      status = ret;
 8004730:	462e      	mov	r6, r5
 8004732:	e4f7      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = ret;
 8004734:	462e      	mov	r6, r5
 8004736:	e518      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x57a>
      status = ret;
 8004738:	462e      	mov	r6, r5
 800473a:	e68f      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      status = ret;
 800473c:	462e      	mov	r6, r5
 800473e:	e4ab      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      status = ret;
 8004740:	462e      	mov	r6, r5
 8004742:	f7ff bba0 	b.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x296>
      status = ret;
 8004746:	462e      	mov	r6, r5
 8004748:	f7ff bbfe 	b.w	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x358>
      status = ret;
 800474c:	462e      	mov	r6, r5
 800474e:	e41e      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      status = ret;
 8004750:	462e      	mov	r6, r5
 8004752:	f7ff bb77 	b.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x254>
      status = ret;
 8004756:	462e      	mov	r6, r5
 8004758:	f7ff bbb8 	b.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      status = ret;
 800475c:	462e      	mov	r6, r5
 800475e:	e4be      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      status = ret;
 8004760:	462e      	mov	r6, r5
 8004762:	e525      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      status = ret;
 8004764:	462e      	mov	r6, r5
 8004766:	e6cc      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x912>
      status = ret;
 8004768:	462e      	mov	r6, r5
 800476a:	e6bb      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      status = ret;
 800476c:	462e      	mov	r6, r5
 800476e:	f7ff bac4 	b.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10a>
      status = ret;
 8004772:	462e      	mov	r6, r5
 8004774:	f7ff bb03 	b.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      status = ret;
 8004778:	462e      	mov	r6, r5
 800477a:	e691      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      status = ret;
 800477c:	462e      	mov	r6, r5
 800477e:	f7ff bb1f 	b.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 8004782:	462e      	mov	r6, r5
 8004784:	e648      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x828>
      status = ret;
 8004786:	462e      	mov	r6, r5
 8004788:	f7ff bb3b 	b.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800478c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004790:	f7ff f9c4 	bl	8003b1c <RCCEx_PLL3_Config>
 8004794:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800479a:	2d00      	cmp	r5, #0
 800479c:	f040 80bf 	bne.w	800491e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80047a0:	4f05      	ldr	r7, [pc, #20]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047a2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80047a6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80047aa:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 80047ae:	4301      	orrs	r1, r0
 80047b0:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80047b4:	e40f      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80047b6:	bf00      	nop
 80047b8:	44020c00 	.word	0x44020c00
 80047bc:	44020800 	.word	0x44020800
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047c0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80047c4:	f7ff f9aa 	bl	8003b1c <RCCEx_PLL3_Config>
 80047c8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	f040 808b 	bne.w	80048ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80047d4:	4fc2      	ldr	r7, [pc, #776]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80047d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80047da:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80047de:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 80047e2:	4301      	orrs	r1, r0
 80047e4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80047e8:	e419      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047ea:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80047ee:	f7ff f995 	bl	8003b1c <RCCEx_PLL3_Config>
 80047f2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	f040 8087 	bne.w	800490c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80047fe:	4fb8      	ldr	r7, [pc, #736]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004800:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004804:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8004808:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800480c:	4301      	orrs	r1, r0
 800480e:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004812:	f7ff bbf2 	b.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004816:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800481a:	f7ff f97f 	bl	8003b1c <RCCEx_PLL3_Config>
 800481e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004824:	2d00      	cmp	r5, #0
 8004826:	d168      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd0a>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004828:	4fad      	ldr	r7, [pc, #692]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800482a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800482e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8004832:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004836:	4301      	orrs	r1, r0
 8004838:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 800483c:	f7ff bbb9 	b.w	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	48a7      	ldr	r0, [pc, #668]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004842:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004844:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004848:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 800484a:	2d00      	cmp	r5, #0
 800484c:	d137      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xcce>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800484e:	4fa4      	ldr	r7, [pc, #656]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004850:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8004854:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8004858:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800485c:	4301      	orrs	r1, r0
 800485e:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004862:	e54d      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x710>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004864:	489e      	ldr	r0, [pc, #632]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004866:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004868:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800486c:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 800486e:	2d00      	cmp	r5, #0
 8004870:	d133      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xcea>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004872:	4f9b      	ldr	r7, [pc, #620]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004874:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 8004878:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800487c:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004880:	4301      	orrs	r1, r0
 8004882:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004886:	e547      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x728>
      status = ret;
 8004888:	462e      	mov	r6, r5
 800488a:	e510      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x6be>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4f94      	ldr	r7, [pc, #592]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800488e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004890:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8004894:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (ret == HAL_OK)
 8004896:	2d00      	cmp	r5, #0
 8004898:	d149      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800489a:	4f91      	ldr	r7, [pc, #580]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800489c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80048a0:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 80048a4:	4301      	orrs	r1, r0
 80048a6:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 80048aa:	e51d      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ac:	f104 0008 	add.w	r0, r4, #8
 80048b0:	f7ff f8ca 	bl	8003a48 <RCCEx_PLL2_Config>
 80048b4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	d0c7      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
      status = ret;
 80048be:	462e      	mov	r6, r5
 80048c0:	e51e      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x710>
      status = ret;
 80048c2:	462e      	mov	r6, r5
 80048c4:	f7ff bbb9 	b.w	800403a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048c8:	f104 0008 	add.w	r0, r4, #8
 80048cc:	f7ff f8bc 	bl	8003a48 <RCCEx_PLL2_Config>
 80048d0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	d0cb      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc82>
      status = ret;
 80048da:	462e      	mov	r6, r5
 80048dc:	e51c      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x728>
    switch (pPeriphClkInit->I2c4ClockSelection)
 80048de:	2900      	cmp	r1, #0
 80048e0:	f47f ab9b 	bne.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    if (ret == HAL_OK)
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	f43f af75 	beq.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
      status = ret;
 80048ea:	462e      	mov	r6, r5
 80048ec:	f7ff bb97 	b.w	800401e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (pPeriphClkInit->I2c1ClockSelection)
 80048f0:	2900      	cmp	r1, #0
 80048f2:	f47f ab5c 	bne.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	d096      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      status = ret;
 80048fa:	462e      	mov	r6, r5
 80048fc:	f7ff bb59 	b.w	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8004900:	2900      	cmp	r1, #0
 8004902:	f47f ab78 	bne.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 8004906:	2d00      	cmp	r5, #0
 8004908:	f43f af79 	beq.w	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc0e>
      status = ret;
 800490c:	462e      	mov	r6, r5
 800490e:	f7ff bb74 	b.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8004912:	2900      	cmp	r1, #0
 8004914:	f47f ab5d 	bne.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    if (ret == HAL_OK)
 8004918:	2d00      	cmp	r5, #0
 800491a:	f43f af41 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      status = ret;
 800491e:	462e      	mov	r6, r5
 8004920:	f7ff bb59 	b.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (pPeriphClkInit->RngClockSelection)
 8004924:	2900      	cmp	r1, #0
 8004926:	f47f acdd 	bne.w	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if (ret == HAL_OK)
 800492a:	2d00      	cmp	r5, #0
 800492c:	d0b5      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
      status = ret;
 800492e:	462e      	mov	r6, r5
 8004930:	e4da      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004932:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004936:	f7ff f8f1 	bl	8003b1c <RCCEx_PLL3_Config>
 800493a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004940:	2d00      	cmp	r5, #0
 8004942:	f47f af1e 	bne.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004946:	e55d      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x814>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004948:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800494c:	f7ff f8e6 	bl	8003b1c <RCCEx_PLL3_Config>
 8004950:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004952:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004954:	2d00      	cmp	r5, #0
 8004956:	f47f aeef 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0xb48>
 800495a:	e575      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x858>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800495c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004960:	f7ff f8dc 	bl	8003b1c <RCCEx_PLL3_Config>
 8004964:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004966:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004968:	2d00      	cmp	r5, #0
 800496a:	f47f af05 	bne.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800496e:	e58d      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x89c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004970:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004974:	f7ff f8d2 	bl	8003b1c <RCCEx_PLL3_Config>
 8004978:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800497e:	2d00      	cmp	r5, #0
 8004980:	f47f aeec 	bne.w	800475c <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8004984:	f7ff bba1 	b.w	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004988:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800498c:	f7ff f8c6 	bl	8003b1c <RCCEx_PLL3_Config>
 8004990:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004996:	2d00      	cmp	r5, #0
 8004998:	f47f aeca 	bne.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800499c:	f7ff bbb8 	b.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049a0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049a4:	f7ff f8ba 	bl	8003b1c <RCCEx_PLL3_Config>
 80049a8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	f47f aed6 	bne.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80049b4:	f7ff bbf2 	b.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049bc:	f7ff f8ae 	bl	8003b1c <RCCEx_PLL3_Config>
 80049c0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	f47f aeb8 	bne.w	800473c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80049cc:	f7ff bb5a 	b.w	8004084 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049d0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049d4:	f7ff f8a2 	bl	8003b1c <RCCEx_PLL3_Config>
 80049d8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80049de:	2d00      	cmp	r5, #0
 80049e0:	f47f aeb4 	bne.w	800474c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80049e4:	f7ff bac9 	b.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x38a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e8:	493d      	ldr	r1, [pc, #244]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80049ea:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f0:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	f47f ae95 	bne.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 80049f8:	e665      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049fa:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049fe:	f7ff f88d 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a02:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a08:	2d00      	cmp	r5, #0
 8004a0a:	f47f ae9c 	bne.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004a0e:	f7ff ba91 	b.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x344>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a12:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a16:	f7ff f881 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a1a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	f47f ae8d 	bne.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb50>
 8004a26:	f7ff ba25 	b.w	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x284>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a2a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a2e:	f7ff f875 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a32:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	f47f ae8c 	bne.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004a3e:	f7ff ba3b 	b.w	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a42:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a46:	f7ff f869 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a4a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	f47f ae98 	bne.w	8004786 <HAL_RCCEx_PeriphCLKConfig+0xb96>
 8004a56:	f7ff b9cb 	b.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a5a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a5e:	f7ff f85d 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a62:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	f47f ae71 	bne.w	8004750 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8004a6e:	f7ff b9e0 	b.w	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x242>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a72:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a76:	f7ff f851 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a7a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	f47f ae50 	bne.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb36>
 8004a86:	f7ff bbac 	b.w	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a8a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a8e:	f7ff f845 	bl	8003b1c <RCCEx_PLL3_Config>
 8004a92:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a98:	2d00      	cmp	r5, #0
 8004a9a:	f47f ae4b 	bne.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004a9e:	f7ff bb5a 	b.w	8004156 <HAL_RCCEx_PeriphCLKConfig+0x566>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aa2:	f104 0008 	add.w	r0, r4, #8
 8004aa6:	f7fe ffcf 	bl	8003a48 <RCCEx_PLL2_Config>
 8004aaa:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004aac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004aae:	2d00      	cmp	r5, #0
 8004ab0:	f47f ae5a 	bne.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004ab4:	e50c      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab6:	490a      	ldr	r1, [pc, #40]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004ab8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004abe:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	f47f ae4f 	bne.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004ac6:	e56a      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ac8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004acc:	f7ff f826 	bl	8003b1c <RCCEx_PLL3_Config>
 8004ad0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	f47f ae48 	bne.w	800476c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004adc:	f7ff b904 	b.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004ae0:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ae4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ae8:	f7ff f818 	bl	8003b1c <RCCEx_PLL3_Config>
 8004aec:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	f47f ae19 	bne.w	800472a <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8004af8:	f7ff b917 	b.w	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004afc:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b00:	f7ff f80c 	bl	8003b1c <RCCEx_PLL3_Config>
 8004b04:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b0a:	2d00      	cmp	r5, #0
 8004b0c:	f47f ae31 	bne.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004b10:	f7ff b92c 	b.w	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b14:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b18:	f7ff f800 	bl	8003b1c <RCCEx_PLL3_Config>
 8004b1c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	f47f ae2a 	bne.w	800477c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004b28:	f7ff b941 	b.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1be>
      status = ret;
 8004b2c:	462e      	mov	r6, r5
 8004b2e:	f7ff bbc8 	b.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b32:	48ce      	ldr	r0, [pc, #824]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004b34:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004b36:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004b3a:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	f43f ab78 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x642>
      status = ret;
 8004b42:	462e      	mov	r6, r5
 8004b44:	f7ff bb7f 	b.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b48:	f104 0008 	add.w	r0, r4, #8
 8004b4c:	f7fe ff7c 	bl	8003a48 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b50:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b52:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b54:	6862      	ldr	r2, [r4, #4]
        break;
 8004b56:	e4f6      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x956>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b58:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b5c:	f7fe ffde 	bl	8003b1c <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b60:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b62:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b64:	6862      	ldr	r2, [r4, #4]
        break;
 8004b66:	e4ee      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x956>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b68:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b6c:	f7fe ffd6 	bl	8003b1c <RCCEx_PLL3_Config>
 8004b70:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	f43f ab80 	beq.w	800427c <HAL_RCCEx_PeriphCLKConfig+0x68c>
      status = ret;
 8004b7c:	462e      	mov	r6, r5
 8004b7e:	f7ff bb87 	b.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b82:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b86:	f7fe ffc9 	bl	8003b1c <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004b8a:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b8c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004b8e:	6862      	ldr	r2, [r4, #4]
        break;
 8004b90:	f7ff bb4c 	b.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x63c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b94:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b98:	f7fe ffc0 	bl	8003b1c <RCCEx_PLL3_Config>
 8004b9c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	f43f ac0b 	beq.w	80043be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      status = ret;
 8004ba8:	462e      	mov	r6, r5
 8004baa:	e412      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bac:	48af      	ldr	r0, [pc, #700]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004bae:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004bb0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004bb4:	6281      	str	r1, [r0, #40]	@ 0x28
        break;
 8004bb6:	f7ff bb5e 	b.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0x686>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bba:	48ac      	ldr	r0, [pc, #688]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004bbc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004bbe:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004bc2:	6281      	str	r1, [r0, #40]	@ 0x28
        break;
 8004bc4:	f7ff bbf8 	b.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8004bc8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	d135      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x104a>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004bce:	4fa7      	ldr	r7, [pc, #668]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004bd0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004bd2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004bd6:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004bda:	4301      	orrs	r1, r0
 8004bdc:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8004be0:	f7ff b86c 	b.w	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004be4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004be8:	f7fe ff98 	bl	8003b1c <RCCEx_PLL3_Config>
 8004bec:	4606      	mov	r6, r0
        break;
 8004bee:	f7ff b823 	b.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bf2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004bf6:	f7fe ff91 	bl	8003b1c <RCCEx_PLL3_Config>
 8004bfa:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004c00:	2d00      	cmp	r5, #0
 8004c02:	f47f a97f 	bne.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004c06:	e580      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c08:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c0c:	f7fe ff86 	bl	8003b1c <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c10:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c12:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c14:	6862      	ldr	r2, [r4, #4]
        break;
 8004c16:	e543      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c18:	f104 0008 	add.w	r0, r4, #8
 8004c1c:	f7fe ff14 	bl	8003a48 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c20:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c22:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c24:	6862      	ldr	r2, [r4, #4]
        break;
 8004c26:	e53b      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c28:	f104 0008 	add.w	r0, r4, #8
 8004c2c:	f7fe ff0c 	bl	8003a48 <RCCEx_PLL2_Config>
 8004c30:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	d0c9      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfde>
      status = ret;
 8004c3a:	462e      	mov	r6, r5
 8004c3c:	f7ff b83e 	b.w	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c40:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c44:	f7fe ff6a 	bl	8003b1c <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c48:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c4a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4c:	6862      	ldr	r2, [r4, #4]
        break;
 8004c4e:	e7bc      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xfda>
        ret = HAL_TIMEOUT;
 8004c50:	2503      	movs	r5, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c52:	e9d4 3200 	ldrd	r3, r2, [r4]
      status = ret;
 8004c56:	462e      	mov	r6, r5
 8004c58:	f7ff bb36 	b.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8004c5c:	f421 5080 	bic.w	r0, r1, #4096	@ 0x1000
 8004c60:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004c64:	f43f a87f 	beq.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004c68:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004c6c:	f43f a87b 	beq.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004c70:	2601      	movs	r6, #1
 8004c72:	4635      	mov	r5, r6
 8004c74:	f7ff b883 	b.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8004c78:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004c7c:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004c80:	f43f a8f5 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004c84:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004c88:	f43f a8f1 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004c8c:	2601      	movs	r6, #1
 8004c8e:	4635      	mov	r5, r6
 8004c90:	f7ff b8f9 	b.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8004c94:	f021 0010 	bic.w	r0, r1, #16
 8004c98:	2840      	cmp	r0, #64	@ 0x40
 8004c9a:	f43f a948 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004c9e:	2930      	cmp	r1, #48	@ 0x30
 8004ca0:	f43f a945 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004ca4:	2601      	movs	r6, #1
 8004ca6:	4635      	mov	r5, r6
 8004ca8:	f7ff b94e 	b.w	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8004cac:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8004cb0:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004cb4:	f43f aba3 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004cb8:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004cbc:	f43f ab9f 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004cc0:	2601      	movs	r6, #1
 8004cc2:	4635      	mov	r5, r6
 8004cc4:	f7ff bba8 	b.w	8004418 <HAL_RCCEx_PeriphCLKConfig+0x828>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004cc8:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004ccc:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004cd0:	f43f aa61 	beq.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004cd4:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004cd8:	f43f aa5d 	beq.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004cdc:	2601      	movs	r6, #1
 8004cde:	4635      	mov	r5, r6
 8004ce0:	f7ff ba66 	b.w	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004ce4:	f421 5080 	bic.w	r0, r1, #4096	@ 0x1000
 8004ce8:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004cec:	f43f a9ea 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004cf0:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004cf4:	f43f a9e6 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004cf8:	2601      	movs	r6, #1
 8004cfa:	4635      	mov	r5, r6
 8004cfc:	f7ff b9ef 	b.w	80040de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8004d00:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8004d04:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004d08:	f43f a80c 	beq.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004d0c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004d10:	f43f a808 	beq.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004d14:	2601      	movs	r6, #1
 8004d16:	4635      	mov	r5, r6
 8004d18:	f7ff b810 	b.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8004d1c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d20:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8004d24:	f43f ab8d 	beq.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d2c:	f43f ab89 	beq.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d30:	2601      	movs	r6, #1
 8004d32:	4635      	mov	r5, r6
 8004d34:	f7ff bb92 	b.w	800445c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8004d38:	f421 1000 	bic.w	r0, r1, #2097152	@ 0x200000
 8004d3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004d40:	f43f a874 	beq.w	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004d44:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8004d48:	f43f a870 	beq.w	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004d4c:	2601      	movs	r6, #1
 8004d4e:	4635      	mov	r5, r6
 8004d50:	f7ff b878 	b.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8004d54:	f421 4000 	bic.w	r0, r1, #32768	@ 0x8000
 8004d58:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8004d5c:	f43f a824 	beq.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d60:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
 8004d64:	f43f a820 	beq.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d68:	2601      	movs	r6, #1
 8004d6a:	4635      	mov	r5, r6
 8004d6c:	f7ff b828 	b.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004d70:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8004d74:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004d78:	f43f aa30 	beq.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004d7c:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004d80:	f43f aa2c 	beq.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004d84:	2601      	movs	r6, #1
 8004d86:	4635      	mov	r5, r6
 8004d88:	f7ff ba38 	b.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004d8c:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8004d90:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004d94:	f43f a973 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004d98:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8004d9c:	f43f a96f 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004da0:	2601      	movs	r6, #1
 8004da2:	4635      	mov	r5, r6
 8004da4:	f7ff b978 	b.w	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8004da8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dac:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004db0:	f43f ab69 	beq.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004db4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004db8:	f43f ab65 	beq.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004dbc:	2601      	movs	r6, #1
 8004dbe:	4635      	mov	r5, r6
 8004dc0:	f7ff bb6e 	b.w	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004dc4:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8004dc8:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8004dcc:	f43f a99d 	beq.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004dd0:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004dd4:	f43f a999 	beq.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004dd8:	2601      	movs	r6, #1
 8004dda:	4635      	mov	r5, r6
 8004ddc:	f7ff b9a2 	b.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004de0:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004de4:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004de8:	f43f a8c4 	beq.w	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004dec:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004df0:	f43f a8c0 	beq.w	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004df4:	2601      	movs	r6, #1
 8004df6:	4635      	mov	r5, r6
 8004df8:	f7ff b8c9 	b.w	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8004dfc:	f421 2080 	bic.w	r0, r1, #262144	@ 0x40000
 8004e00:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8004e04:	f43e aff1 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e08:	f5b1 2f40 	cmp.w	r1, #786432	@ 0xc0000
 8004e0c:	f43e afed 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e10:	2601      	movs	r6, #1
 8004e12:	4635      	mov	r5, r6
 8004e14:	f7fe bff5 	b.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004e18:	f421 1080 	bic.w	r0, r1, #1048576	@ 0x100000
 8004e1c:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8004e20:	f43f a996 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004e24:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8004e28:	f43f a992 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004e2c:	2601      	movs	r6, #1
 8004e2e:	4635      	mov	r5, r6
 8004e30:	f7ff b99b 	b.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8004e34:	f021 6000 	bic.w	r0, r1, #134217728	@ 0x8000000
 8004e38:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8004e3c:	f43f a839 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004e40:	f1b1 5fc0 	cmp.w	r1, #402653184	@ 0x18000000
 8004e44:	f43f a835 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004e48:	2601      	movs	r6, #1
 8004e4a:	4635      	mov	r5, r6
 8004e4c:	f7ff b83e 	b.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8004e50:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8004e54:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004e58:	f43e af43 	beq.w	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004e5c:	29c0      	cmp	r1, #192	@ 0xc0
 8004e5e:	f43e af40 	beq.w	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004e62:	2601      	movs	r6, #1
 8004e64:	4635      	mov	r5, r6
 8004e66:	f7fe bf48 	b.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004e6a:	bf00      	nop
 8004e6c:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004e70:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004e74:	f43f a9da 	beq.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004e78:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8004e7c:	f43f a9d6 	beq.w	800422c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004e80:	2601      	movs	r6, #1
 8004e82:	4635      	mov	r5, r6
 8004e84:	f7ff b9df 	b.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8004e88:	f5b1 1fc0 	cmp.w	r1, #1572864	@ 0x180000
 8004e8c:	f43f a9f3 	beq.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8004e90:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004e94:	f43f a9ef 	beq.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8004e98:	2601      	movs	r6, #1
 8004e9a:	4635      	mov	r5, r6
 8004e9c:	f7ff b9f8 	b.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8004ea0:	29c0      	cmp	r1, #192	@ 0xc0
 8004ea2:	f43f aa89 	beq.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004ea6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004eaa:	f43f aa85 	beq.w	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004eae:	2601      	movs	r6, #1
 8004eb0:	4635      	mov	r5, r6
 8004eb2:	f7ff ba8e 	b.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004eb6:	4810      	ldr	r0, [pc, #64]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1308>)
 8004eb8:	4a10      	ldr	r2, [pc, #64]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x130c>)
 8004eba:	69c1      	ldr	r1, [r0, #28]
 8004ebc:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004ec0:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	61c2      	str	r2, [r0, #28]
 8004ec8:	f7ff bbd4 	b.w	8004674 <HAL_RCCEx_PeriphCLKConfig+0xa84>
        status = ret;
 8004ecc:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ece:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004ed2:	4635      	mov	r5, r6
 8004ed4:	f7ff b9f8 	b.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8004ed8:	2601      	movs	r6, #1
 8004eda:	4635      	mov	r5, r6
 8004edc:	f7ff ba2b 	b.w	8004336 <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (pPeriphClkInit->OspiClockSelection)
 8004ee0:	2601      	movs	r6, #1
 8004ee2:	4635      	mov	r5, r6
 8004ee4:	f7ff bafe 	b.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8004ee8:	2601      	movs	r6, #1
 8004eea:	f7fe beb2 	b.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8004eee:	2601      	movs	r6, #1
 8004ef0:	4635      	mov	r5, r6
 8004ef2:	f7ff b808 	b.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004ef6:	bf00      	nop
 8004ef8:	44020c00 	.word	0x44020c00
 8004efc:	00ffffcf 	.word	0x00ffffcf

08004f00 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004f00:	4a50      	ldr	r2, [pc, #320]	@ (8005044 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
{
 8004f02:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004f04:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f06:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004f08:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f0a:	6a97      	ldr	r7, [r2, #40]	@ 0x28
  if (pll1m != 0U)
 8004f0c:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f10:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004f12:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 8004f16:	d05d      	beq.n	8004fd4 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f18:	ee07 4a90 	vmov	s15, r4
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f1c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f20:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f24:	fb07 f101 	mul.w	r1, r7, r1
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f30:	ee07 1a10 	vmov	s14, r1
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004f34:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f38:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8005048 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8004f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f44:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004f48:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f4c:	f005 0303 	and.w	r3, r5, #3
    switch (pll1source)
 8004f50:	2b02      	cmp	r3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f52:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll1source)
 8004f56:	d067      	beq.n	8005028 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d06c      	beq.n	8005036 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800504c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 8004f60:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004f64:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f66:	ee07 3a10 	vmov	s14, r3
 8004f6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f6e:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8004f72:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f76:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8004f7e:	d003      	beq.n	8004f88 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004f80:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004f82:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8004f86:	d13d      	bne.n	8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f88:	4a2e      	ldr	r2, [pc, #184]	@ (8005044 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004f8a:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	d003      	beq.n	8004f9c <HAL_RCCEx_GetPLL1ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004f94:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004f96:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8004f9a:	d121      	bne.n	8004fe0 <HAL_RCCEx_GetPLL1ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f9c:	4a29      	ldr	r2, [pc, #164]	@ (8005044 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004f9e:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fa0:	6813      	ldr	r3, [r2, #0]
 8004fa2:	0199      	lsls	r1, r3, #6
 8004fa4:	d518      	bpl.n	8004fd8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004fa6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004fa8:	035b      	lsls	r3, r3, #13
 8004faa:	d515      	bpl.n	8004fd8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
}
 8004fac:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fae:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fb4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004fb8:	ee06 3a90 	vmov	s13, r3
 8004fbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004fc0:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004fc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004fc8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004fcc:	ee17 3a90 	vmov	r3, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004fd0:	6083      	str	r3, [r0, #8]
}
 8004fd2:	4770      	bx	lr
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004fd4:	e9c0 4400 	strd	r4, r4, [r0]
}
 8004fd8:	bcf0      	pop	{r4, r5, r6, r7}
{
 8004fda:	2300      	movs	r3, #0
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004fdc:	6083      	str	r3, [r0, #8]
}
 8004fde:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fe0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004fe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fe6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004fea:	ee06 3a90 	vmov	s13, r3
 8004fee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004ff2:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004ff6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ffa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004ffe:	ee17 3a10 	vmov	r3, s14
 8005002:	e7cb      	b.n	8004f9c <HAL_RCCEx_GetPLL1ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005004:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800500a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800500e:	ee06 3a90 	vmov	s13, r3
 8005012:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005016:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800501a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800501e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005022:	ee17 3a10 	vmov	r3, s14
 8005026:	e7af      	b.n	8004f88 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005028:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8005050 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800502c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005030:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8005034:	e79f      	b.n	8004f76 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005036:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8005054 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800503a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800503e:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8005042:	e798      	b.n	8004f76 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
 8005044:	44020c00 	.word	0x44020c00
 8005048:	39000000 	.word	0x39000000
 800504c:	03d09000 	.word	0x03d09000
 8005050:	4a742400 	.word	0x4a742400
 8005054:	4af42400 	.word	0x4af42400

08005058 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005058:	4a50      	ldr	r2, [pc, #320]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800505a:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800505c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800505e:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005060:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005062:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005064:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005068:	6c11      	ldr	r1, [r2, #64]	@ 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800506a:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 800506e:	d05d      	beq.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005070:	ee07 4a90 	vmov	s15, r4
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005074:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005078:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800507c:	fb07 f101 	mul.w	r1, r7, r1
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005084:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005088:	ee07 1a10 	vmov	s14, r1
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800508c:	ee07 3a90 	vmov	s15, r3
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005090:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005098:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800509c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80050a0:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80050a4:	f005 0303 	and.w	r3, r5, #3
    switch (pll2source)
 80050a8:	2b02      	cmp	r3, #2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80050aa:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll2source)
 80050ae:	d067      	beq.n	8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d06c      	beq.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	4b3b      	ldr	r3, [pc, #236]	@ (80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 80050b8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80050bc:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80050be:	ee07 3a10 	vmov	s14, r3
 80050c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050c6:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80050ca:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050ce:	4a33      	ldr	r2, [pc, #204]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80050d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80050da:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80050de:	d13d      	bne.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050e0:	4a2e      	ldr	r2, [pc, #184]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80050e2:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050e4:	6813      	ldr	r3, [r2, #0]
 80050e6:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 80050ea:	d003      	beq.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80050ec:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80050ee:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80050f2:	d121      	bne.n	8005138 <HAL_RCCEx_GetPLL2ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050f4:	4a29      	ldr	r2, [pc, #164]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050f6:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050f8:	6813      	ldr	r3, [r2, #0]
 80050fa:	0119      	lsls	r1, r3, #4
 80050fc:	d518      	bpl.n	8005130 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80050fe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005100:	035b      	lsls	r3, r3, #13
 8005102:	d515      	bpl.n	8005130 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
}
 8005104:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005106:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800510c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005110:	ee06 3a90 	vmov	s13, r3
 8005114:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005118:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800511c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005120:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005124:	ee17 3a90 	vmov	r3, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005128:	6083      	str	r3, [r0, #8]
}
 800512a:	4770      	bx	lr
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800512c:	e9c0 4400 	strd	r4, r4, [r0]
}
 8005130:	bcf0      	pop	{r4, r5, r6, r7}
{
 8005132:	2300      	movs	r3, #0
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005134:	6083      	str	r3, [r0, #8]
}
 8005136:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005138:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800513a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800513e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005142:	ee06 3a90 	vmov	s13, r3
 8005146:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800514a:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800514e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005152:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005156:	ee17 3a10 	vmov	r3, s14
 800515a:	e7cb      	b.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800515c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800515e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005162:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005166:	ee06 3a90 	vmov	s13, r3
 800516a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800516e:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005172:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005176:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800517a:	ee17 3a10 	vmov	r3, s14
 800517e:	e7af      	b.n	80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005180:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005184:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005188:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 800518c:	e79f      	b.n	80050ce <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800518e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005192:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 800519a:	e798      	b.n	80050ce <HAL_RCCEx_GetPLL2ClockFreq+0x76>
 800519c:	44020c00 	.word	0x44020c00
 80051a0:	39000000 	.word	0x39000000
 80051a4:	03d09000 	.word	0x03d09000
 80051a8:	4a742400 	.word	0x4a742400
 80051ac:	4af42400 	.word	0x4af42400

080051b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80051b0:	4a50      	ldr	r2, [pc, #320]	@ (80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 80051b2:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80051b4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80051b6:	6b15      	ldr	r5, [r2, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80051b8:	6b16      	ldr	r6, [r2, #48]	@ 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80051ba:	6b17      	ldr	r7, [r2, #48]	@ 0x30
  if (pll3m != 0U)
 80051bc:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051c0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80051c2:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 80051c6:	d05d      	beq.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051c8:	ee07 4a90 	vmov	s15, r4
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051cc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80051d0:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051d4:	fb07 f101 	mul.w	r1, r7, r1
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80051d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051e0:	ee07 1a10 	vmov	s14, r1
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80051e4:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051e8:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80051ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051f4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80051f8:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80051fc:	f005 0303 	and.w	r3, r5, #3
    switch (pll3source)
 8005200:	2b02      	cmp	r3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005202:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll3source)
 8005206:	d067      	beq.n	80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8005208:	2b03      	cmp	r3, #3
 800520a:	d06c      	beq.n	80052e6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	4b3b      	ldr	r3, [pc, #236]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8005210:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005214:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005216:	ee07 3a10 	vmov	s14, r3
 800521a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800521e:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8005222:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005226:	4a33      	ldr	r2, [pc, #204]	@ (80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 800522e:	d003      	beq.n	8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005230:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005232:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8005236:	d13d      	bne.n	80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005238:	4a2e      	ldr	r2, [pc, #184]	@ (80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800523a:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800523c:	6813      	ldr	r3, [r2, #0]
 800523e:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 8005242:	d003      	beq.n	800524c <HAL_RCCEx_GetPLL3ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005244:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005246:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800524a:	d121      	bne.n	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800524c:	4a29      	ldr	r2, [pc, #164]	@ (80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800524e:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	0099      	lsls	r1, r3, #2
 8005254:	d518      	bpl.n	8005288 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005256:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005258:	035b      	lsls	r3, r3, #13
 800525a:	d515      	bpl.n	8005288 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
}
 800525c:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800525e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005264:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005268:	ee06 3a90 	vmov	s13, r3
 800526c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005270:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005274:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005278:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800527c:	ee17 3a90 	vmov	r3, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005280:	6083      	str	r3, [r0, #8]
}
 8005282:	4770      	bx	lr
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005284:	e9c0 4400 	strd	r4, r4, [r0]
}
 8005288:	bcf0      	pop	{r4, r5, r6, r7}
{
 800528a:	2300      	movs	r3, #0
        pPLL3_Clocks->PLL3_R_Frequency = \
 800528c:	6083      	str	r3, [r0, #8]
}
 800528e:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005290:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005296:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800529a:	ee06 3a90 	vmov	s13, r3
 800529e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80052a2:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80052a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80052aa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80052ae:	ee17 3a10 	vmov	r3, s14
 80052b2:	e7cb      	b.n	800524c <HAL_RCCEx_GetPLL3ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80052b4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80052b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80052ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80052be:	ee06 3a90 	vmov	s13, r3
 80052c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80052c6:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80052ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80052ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80052d2:	ee17 3a10 	vmov	r3, s14
 80052d6:	e7af      	b.n	8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052d8:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80052dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80052e0:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80052e4:	e79f      	b.n	8005226 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052e6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80052ea:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80052f2:	e798      	b.n	8005226 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
 80052f4:	44020c00 	.word	0x44020c00
 80052f8:	39000000 	.word	0x39000000
 80052fc:	03d09000 	.word	0x03d09000
 8005300:	4a742400 	.word	0x4a742400
 8005304:	4af42400 	.word	0x4af42400

08005308 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005308:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 800530c:	430b      	orrs	r3, r1
 800530e:	d062      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
{
 8005310:	b500      	push	{lr}
    switch (PeriphClk)
 8005312:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 8005316:	430b      	orrs	r3, r1
{
 8005318:	b085      	sub	sp, #20
    switch (PeriphClk)
 800531a:	f000 8785 	beq.w	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800531e:	4bac      	ldr	r3, [pc, #688]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005320:	4298      	cmp	r0, r3
 8005322:	f171 0300 	sbcs.w	r3, r1, #0
 8005326:	d21f      	bcs.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8005328:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800532c:	430b      	orrs	r3, r1
 800532e:	f000 85fc 	beq.w	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005332:	f240 4301 	movw	r3, #1025	@ 0x401
 8005336:	4298      	cmp	r0, r3
 8005338:	f171 0300 	sbcs.w	r3, r1, #0
 800533c:	d26d      	bcs.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800533e:	2821      	cmp	r0, #33	@ 0x21
 8005340:	f171 0300 	sbcs.w	r3, r1, #0
 8005344:	f080 80f9 	bcs.w	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8005348:	ea50 0301 	orrs.w	r3, r0, r1
 800534c:	f001 816f 	beq.w	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
 8005350:	3801      	subs	r0, #1
 8005352:	f141 31ff 	adc.w	r1, r1, #4294967295
 8005356:	2820      	cmp	r0, #32
 8005358:	f171 0100 	sbcs.w	r1, r1, #0
 800535c:	f0c0 8328 	bcc.w	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
        frequency = 0U;
 8005360:	2000      	movs	r0, #0
}
 8005362:	b005      	add	sp, #20
 8005364:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8005368:	2300      	movs	r3, #0
 800536a:	2202      	movs	r2, #2
 800536c:	4291      	cmp	r1, r2
 800536e:	bf08      	it	eq
 8005370:	4298      	cmpeq	r0, r3
 8005372:	f000 877e 	beq.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8005376:	4283      	cmp	r3, r0
 8005378:	418a      	sbcs	r2, r1
 800537a:	f0c0 809d 	bcc.w	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800537e:	f100 4270 	add.w	r2, r0, #4026531840	@ 0xf0000000
 8005382:	430a      	orrs	r2, r1
 8005384:	f000 8602 	beq.w	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005388:	4a92      	ldr	r2, [pc, #584]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800538a:	4290      	cmp	r0, r2
 800538c:	f171 0200 	sbcs.w	r2, r1, #0
 8005390:	f080 8154 	bcs.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8005394:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005398:	430b      	orrs	r3, r1
 800539a:	f000 82f4 	beq.w	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800539e:	4b8e      	ldr	r3, [pc, #568]	@ (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80053a0:	4298      	cmp	r0, r3
 80053a2:	f171 0300 	sbcs.w	r3, r1, #0
 80053a6:	f080 81cd 	bcs.w	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80053aa:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
 80053ae:	430b      	orrs	r3, r1
 80053b0:	f000 8651 	beq.w	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0xd4e>
 80053b4:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
 80053b8:	4308      	orrs	r0, r1
        frequency = 0U;
 80053ba:	bf18      	it	ne
 80053bc:	2000      	movne	r0, #0
    switch (PeriphClk)
 80053be:	d1d0      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80053c0:	4b86      	ldr	r3, [pc, #536]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80053c6:	0659      	lsls	r1, r3, #25
 80053c8:	f140 82e3 	bpl.w	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053cc:	a801      	add	r0, sp, #4
 80053ce:	f7ff fe43 	bl	8005058 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80053d2:	9803      	ldr	r0, [sp, #12]
 80053d4:	e7c5      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80053d6:	4a81      	ldr	r2, [pc, #516]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053d8:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80053dc:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80053e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80053e4:	0791      	lsls	r1, r2, #30
 80053e6:	d503      	bpl.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ec:	f000 81a4 	beq.w	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80053f0:	4a7a      	ldr	r2, [pc, #488]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80053f2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	d503      	bpl.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80053fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fe:	f000 819e 	beq.w	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005402:	4a76      	ldr	r2, [pc, #472]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005404:	6810      	ldr	r0, [r2, #0]
 8005406:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800540a:	d005      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800540c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005410:	f000 82ab 	beq.w	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
        frequency = 0U;
 8005414:	2000      	movs	r0, #0
 8005416:	4770      	bx	lr
}
 8005418:	4770      	bx	lr
    switch (PeriphClk)
 800541a:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 800541e:	430b      	orrs	r3, r1
 8005420:	f000 8762 	beq.w	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 8005424:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005428:	4298      	cmp	r0, r3
 800542a:	f171 0300 	sbcs.w	r3, r1, #0
 800542e:	f080 80d7 	bcs.w	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8005432:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005436:	430b      	orrs	r3, r1
 8005438:	f000 819f 	beq.w	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800543c:	f242 0301 	movw	r3, #8193	@ 0x2001
 8005440:	4298      	cmp	r0, r3
 8005442:	f171 0300 	sbcs.w	r3, r1, #0
 8005446:	f080 84b8 	bcs.w	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800544a:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800544e:	430b      	orrs	r3, r1
 8005450:	f000 8648 	beq.w	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005454:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8005458:	4308      	orrs	r0, r1
        frequency = 0U;
 800545a:	bf18      	it	ne
 800545c:	2000      	movne	r0, #0
    switch (PeriphClk)
 800545e:	d180      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005460:	495e      	ldr	r1, [pc, #376]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005462:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005466:	f012 62e0 	ands.w	r2, r2, #117440512	@ 0x7000000
 800546a:	f000 8160 	beq.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800546e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005472:	f000 8293 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005476:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800547a:	f000 8294 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800547e:	680b      	ldr	r3, [r1, #0]
 8005480:	0798      	lsls	r0, r3, #30
 8005482:	d503      	bpl.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005484:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8005488:	f001 8269 	beq.w	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x1656>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800548c:	4b53      	ldr	r3, [pc, #332]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0599      	lsls	r1, r3, #22
 8005492:	d503      	bpl.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005494:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8005498:	f001 82cf 	beq.w	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1732>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800549c:	4b4f      	ldr	r3, [pc, #316]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800549e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80054a2:	f010 0002 	ands.w	r0, r0, #2
 80054a6:	f43f af5c 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80054aa:	f1a2 63a0 	sub.w	r3, r2, #83886080	@ 0x5000000
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	03d8      	lsls	r0, r3, #15
 80054b6:	e754      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80054b8:	2240      	movs	r2, #64	@ 0x40
 80054ba:	4291      	cmp	r1, r2
 80054bc:	bf08      	it	eq
 80054be:	4298      	cmpeq	r0, r3
 80054c0:	f000 85ef 	beq.w	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80054c4:	4283      	cmp	r3, r0
 80054c6:	418a      	sbcs	r2, r1
 80054c8:	f0c0 8102 	bcc.w	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80054cc:	2210      	movs	r2, #16
 80054ce:	4291      	cmp	r1, r2
 80054d0:	bf08      	it	eq
 80054d2:	4298      	cmpeq	r0, r3
 80054d4:	f000 81d1 	beq.w	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 80054d8:	4283      	cmp	r3, r0
 80054da:	418a      	sbcs	r2, r1
 80054dc:	f0c0 84d8 	bcc.w	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80054e0:	2904      	cmp	r1, #4
 80054e2:	bf08      	it	eq
 80054e4:	4298      	cmpeq	r0, r3
 80054e6:	f000 84f3 	beq.w	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2908      	cmp	r1, #8
 80054ee:	bf08      	it	eq
 80054f0:	4298      	cmpeq	r0, r3
        frequency = 0U;
 80054f2:	bf18      	it	ne
 80054f4:	4618      	movne	r0, r3
    switch (PeriphClk)
 80054f6:	f47f af34 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80054fa:	4b38      	ldr	r3, [pc, #224]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054fc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005504:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005508:	0798      	lsls	r0, r3, #30
 800550a:	d502      	bpl.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800550c:	2a00      	cmp	r2, #0
 800550e:	f001 8000 	beq.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x120a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8005512:	4b32      	ldr	r3, [pc, #200]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005518:	0119      	lsls	r1, r3, #4
 800551a:	d502      	bpl.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800551c:	2a40      	cmp	r2, #64	@ 0x40
 800551e:	f001 8196 	beq.w	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005522:	4b2e      	ldr	r3, [pc, #184]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 800552a:	f43f af1a 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800552e:	2a80      	cmp	r2, #128	@ 0x80
 8005530:	f248 0012 	movw	r0, #32786	@ 0x8012
 8005534:	bf18      	it	ne
 8005536:	2000      	movne	r0, #0
 8005538:	e713      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 800553a:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800553e:	430b      	orrs	r3, r1
 8005540:	f000 81be 	beq.w	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005544:	f240 1301 	movw	r3, #257	@ 0x101
 8005548:	4298      	cmp	r0, r3
 800554a:	f171 0300 	sbcs.w	r3, r1, #0
 800554e:	f080 8463 	bcs.w	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005552:	f1a0 0340 	sub.w	r3, r0, #64	@ 0x40
 8005556:	430b      	orrs	r3, r1
 8005558:	f000 8631 	beq.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
 800555c:	3880      	subs	r0, #128	@ 0x80
 800555e:	4308      	orrs	r0, r1
        frequency = 0U;
 8005560:	bf18      	it	ne
 8005562:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005564:	f47f aefd 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005568:	491c      	ldr	r1, [pc, #112]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800556a:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800556e:	f412 0260 	ands.w	r2, r2, #14680064	@ 0xe00000
 8005572:	f000 8136 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005576:	680b      	ldr	r3, [r1, #0]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	d503      	bpl.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800557c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8005580:	f000 820c 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005584:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	0098      	lsls	r0, r3, #2
 800558a:	d503      	bpl.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 800558c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005590:	f000 8209 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005594:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	0789      	lsls	r1, r1, #30
 800559a:	d503      	bpl.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800559c:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 80055a0:	f001 8139 	beq.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80055a4:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	0598      	lsls	r0, r3, #22
 80055aa:	d503      	bpl.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80055ac:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80055b0:	f001 8222 	beq.w	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80055b4:	4b09      	ldr	r3, [pc, #36]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055b6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80055ba:	f010 0002 	ands.w	r0, r0, #2
 80055be:	f43f aed0 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80055c2:	f5a2 0320 	sub.w	r3, r2, #10485760	@ 0xa00000
 80055c6:	fab3 f383 	clz	r3, r3
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	03d8      	lsls	r0, r3, #15
 80055ce:	e6c8      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80055d0:	00100001 	.word	0x00100001
 80055d4:	10000001 	.word	0x10000001
 80055d8:	00800001 	.word	0x00800001
 80055dc:	44020c00 	.word	0x44020c00
    switch (PeriphClk)
 80055e0:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 80055e4:	430b      	orrs	r3, r1
 80055e6:	f000 80e6 	beq.w	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80055ea:	4bb0      	ldr	r3, [pc, #704]	@ (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80055ec:	4298      	cmp	r0, r3
 80055ee:	f171 0300 	sbcs.w	r3, r1, #0
 80055f2:	f080 83b6 	bcs.w	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
 80055f6:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f000 847e 	beq.w	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005600:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
 8005604:	4308      	orrs	r0, r1
        frequency = 0U;
 8005606:	bf18      	it	ne
 8005608:	2000      	movne	r0, #0
    switch (PeriphClk)
 800560a:	f47f aeaa 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800560e:	4aa8      	ldr	r2, [pc, #672]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005610:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8005614:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
        switch (srcclk)
 8005618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800561c:	f000 8797 	beq.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8005620:	f200 870d 	bhi.w	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8005624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005628:	f000 817c 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800562c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005630:	f000 867d 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d07a      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 8005638:	2000      	movs	r0, #0
 800563a:	e692      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 800563c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005640:	4299      	cmp	r1, r3
 8005642:	bf08      	it	eq
 8005644:	4290      	cmpeq	r0, r2
 8005646:	f000 80e7 	beq.w	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800564a:	4282      	cmp	r2, r0
 800564c:	eb73 0201 	sbcs.w	r2, r3, r1
 8005650:	f0c0 8326 	bcc.w	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005654:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
 8005658:	430b      	orrs	r3, r1
 800565a:	f000 8574 	beq.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
 800565e:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
 8005662:	4308      	orrs	r0, r1
        frequency = 0U;
 8005664:	bf18      	it	ne
 8005666:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005668:	f47f ae7b 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800566c:	4990      	ldr	r1, [pc, #576]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800566e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005672:	f412 6260 	ands.w	r2, r2, #3584	@ 0xe00
 8005676:	f000 8655 	beq.w	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800567a:	680b      	ldr	r3, [r1, #0]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	d503      	bpl.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005680:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005684:	f000 818a 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8005688:	4b89      	ldr	r3, [pc, #548]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	0098      	lsls	r0, r3, #2
 800568e:	d503      	bpl.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005690:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005694:	f000 8187 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005698:	4b85      	ldr	r3, [pc, #532]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	0789      	lsls	r1, r1, #30
 800569e:	d503      	bpl.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
 80056a0:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 80056a4:	f001 80ec 	beq.w	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80056a8:	4b81      	ldr	r3, [pc, #516]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0598      	lsls	r0, r3, #22
 80056ae:	d503      	bpl.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 80056b0:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80056b4:	f001 8191 	beq.w	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80056b8:	4b7d      	ldr	r3, [pc, #500]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80056c0:	f43f ae4f 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80056c4:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
 80056c8:	487a      	ldr	r0, [pc, #488]	@ (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80056ca:	bf18      	it	ne
 80056cc:	2000      	movne	r0, #0
 80056ce:	e648      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80056d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056d4:	4291      	cmp	r1, r2
 80056d6:	bf08      	it	eq
 80056d8:	4298      	cmpeq	r0, r3
 80056da:	f000 8087 	beq.w	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 80056de:	4283      	cmp	r3, r0
 80056e0:	418a      	sbcs	r2, r1
 80056e2:	f0c0 8317 	bcc.w	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 80056e6:	2980      	cmp	r1, #128	@ 0x80
 80056e8:	bf08      	it	eq
 80056ea:	4298      	cmpeq	r0, r3
 80056ec:	f000 854e 	beq.w	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 80056f0:	2300      	movs	r3, #0
 80056f2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80056f6:	bf08      	it	eq
 80056f8:	4298      	cmpeq	r0, r3
        frequency = 0U;
 80056fa:	bf18      	it	ne
 80056fc:	4618      	movne	r0, r3
    switch (PeriphClk)
 80056fe:	f47f ae30 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8005702:	496b      	ldr	r1, [pc, #428]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005704:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
 8005708:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
        switch (srcclk)
 800570c:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8005710:	f000 8762 	beq.w	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 8005714:	f200 8644 	bhi.w	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8005718:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800571c:	f000 8102 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005720:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005724:	f000 8603 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005728:	2a00      	cmp	r2, #0
 800572a:	f041 8106 	bne.w	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
}
 800572e:	b005      	add	sp, #20
 8005730:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 8005734:	f7fe b93e 	b.w	80039b4 <HAL_RCC_GetPCLK3Freq>
      frequency = LSE_VALUE;
 8005738:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800573c:	4770      	bx	lr
      frequency = LSI_VALUE;
 800573e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8005742:	4770      	bx	lr
    switch (PeriphClk)
 8005744:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 8005748:	430b      	orrs	r3, r1
 800574a:	f000 85a5 	beq.w	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xf90>
 800574e:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
 8005752:	4308      	orrs	r0, r1
        frequency = 0U;
 8005754:	bf18      	it	ne
 8005756:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005758:	f47f ae03 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800575c:	4b54      	ldr	r3, [pc, #336]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800575e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005762:	f003 0307 	and.w	r3, r3, #7
        switch (srcclk)
 8005766:	2b04      	cmp	r3, #4
 8005768:	f201 818e 	bhi.w	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>
 800576c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005770:	00da00df 	.word	0x00da00df
 8005774:	00e900e4 	.word	0x00e900e4
 8005778:	00eb      	.short	0x00eb
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800577a:	4b4d      	ldr	r3, [pc, #308]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800577c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005780:	f412 3240 	ands.w	r2, r2, #196608	@ 0x30000
 8005784:	d02d      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005786:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800578a:	f000 85d6 	beq.w	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800578e:	4b48      	ldr	r3, [pc, #288]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005790:	6819      	ldr	r1, [r3, #0]
 8005792:	0789      	lsls	r1, r1, #30
 8005794:	d503      	bpl.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005796:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800579a:	f001 8051 	beq.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800579e:	4b44      	ldr	r3, [pc, #272]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 80057a6:	f43f addc 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80057aa:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 80057ae:	4842      	ldr	r0, [pc, #264]	@ (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80057b0:	bf18      	it	ne
 80057b2:	2000      	movne	r0, #0
 80057b4:	e5d5      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80057b6:	4a3e      	ldr	r2, [pc, #248]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057b8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80057bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
        switch (srcclk)
 80057c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057c4:	f000 86d4 	beq.w	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 80057c8:	f200 8604 	bhi.w	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d0:	f000 80a8 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057d8:	f000 85a9 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f041 80af 	bne.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
}
 80057e2:	b005      	add	sp, #20
 80057e4:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe b850 	b.w	800388c <HAL_RCC_GetPCLK1Freq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80057ec:	4a30      	ldr	r2, [pc, #192]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057ee:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80057f2:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80057f6:	f003 0308 	and.w	r3, r3, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80057fa:	0789      	lsls	r1, r1, #30
 80057fc:	f140 85a3 	bpl.w	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8682 	beq.w	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005806:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 800580a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800580e:	bf14      	ite	ne
 8005810:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8005814:	2000      	moveq	r0, #0
 8005816:	e5a4      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8005818:	4925      	ldr	r1, [pc, #148]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800581a:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800581e:	f412 42e0 	ands.w	r2, r2, #28672	@ 0x7000
 8005822:	d084      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8005824:	680b      	ldr	r3, [r1, #0]
 8005826:	0119      	lsls	r1, r3, #4
 8005828:	d503      	bpl.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800582a:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800582e:	f000 80b5 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8005832:	4b1f      	ldr	r3, [pc, #124]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	d503      	bpl.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 800583a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800583e:	f000 80b2 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8005842:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	0788      	lsls	r0, r1, #30
 8005848:	d503      	bpl.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800584a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800584e:	f000 87d4 	beq.w	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8005852:	4b17      	ldr	r3, [pc, #92]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	0599      	lsls	r1, r3, #22
 8005858:	d503      	bpl.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800585a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800585e:	f001 80c8 	beq.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8005862:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800586a:	f43f ad7a 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800586e:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 8005872:	4810      	ldr	r0, [pc, #64]	@ (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005874:	bf18      	it	ne
 8005876:	2000      	movne	r0, #0
 8005878:	e573      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800587c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005880:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005884:	2a10      	cmp	r2, #16
 8005886:	f000 8084 	beq.w	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	d502      	bpl.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005890:	2a20      	cmp	r2, #32
 8005892:	f000 8088 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005896:	4b06      	ldr	r3, [pc, #24]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	f410 5000 	ands.w	r0, r0, #8192	@ 0x2000
 800589e:	f43f ad60 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80058a2:	2a30      	cmp	r2, #48	@ 0x30
 80058a4:	4805      	ldr	r0, [pc, #20]	@ (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80058a6:	bf18      	it	ne
 80058a8:	2000      	movne	r0, #0
 80058aa:	e55a      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80058ac:	00040001 	.word	0x00040001
 80058b0:	44020c00 	.word	0x44020c00
 80058b4:	007a1200 	.word	0x007a1200
 80058b8:	003d0900 	.word	0x003d0900
 80058bc:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80058c0:	49a5      	ldr	r1, [pc, #660]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80058c2:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80058c6:	f012 62e0 	ands.w	r2, r2, #117440512	@ 0x7000000
 80058ca:	d08a      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80058cc:	680b      	ldr	r3, [r1, #0]
 80058ce:	0119      	lsls	r1, r3, #4
 80058d0:	d502      	bpl.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 80058d2:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80058d6:	d061      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80058d8:	4b9f      	ldr	r3, [pc, #636]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	d502      	bpl.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 80058e0:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 80058e4:	d05f      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80058e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	0788      	lsls	r0, r1, #30
 80058ec:	d503      	bpl.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80058ee:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 80058f2:	f001 8004 	beq.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80058f6:	4b98      	ldr	r3, [pc, #608]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	0599      	lsls	r1, r3, #22
 80058fc:	d503      	bpl.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80058fe:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8005902:	f001 8058 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8005906:	4b94      	ldr	r3, [pc, #592]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005908:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800590c:	f010 0002 	ands.w	r0, r0, #2
 8005910:	f43f ad27 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005914:	f1a2 63a0 	sub.w	r3, r2, #83886080	@ 0x5000000
 8005918:	fab3 f383 	clz	r3, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	03d8      	lsls	r0, r3, #15
 8005920:	e51f      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8005922:	b123      	cbz	r3, 800592e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005924:	a801      	add	r0, sp, #4
 8005926:	f7ff fb97 	bl	8005058 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800592a:	9801      	ldr	r0, [sp, #4]
            break;
 800592c:	e519      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800592e:	a801      	add	r0, sp, #4
 8005930:	f7ff fae6 	bl	8004f00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005934:	9802      	ldr	r0, [sp, #8]
            break;
 8005936:	e514      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005938:	a801      	add	r0, sp, #4
 800593a:	f7ff fc39 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800593e:	9801      	ldr	r0, [sp, #4]
            break;
 8005940:	e50f      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 8005942:	4886      	ldr	r0, [pc, #536]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005944:	e50d      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005946:	4b84      	ldr	r3, [pc, #528]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005948:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800594c:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800594e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005952:	0789      	lsls	r1, r1, #30
 8005954:	f140 8683 	bpl.w	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x1356>
 8005958:	2a00      	cmp	r2, #0
 800595a:	f040 8680 	bne.w	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x1356>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	487f      	ldr	r0, [pc, #508]	@ (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005962:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005966:	40d8      	lsrs	r0, r3
 8005968:	e4fb      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800596a:	69d3      	ldr	r3, [r2, #28]
 800596c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005974:	f4ff ad4e 	bcc.w	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005978:	69d3      	ldr	r3, [r2, #28]
 800597a:	487a      	ldr	r0, [pc, #488]	@ (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800597c:	f3c3 2305 	ubfx	r3, r3, #8, #6
 8005980:	fbb0 f0f3 	udiv	r0, r0, r3
 8005984:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005986:	4b74      	ldr	r3, [pc, #464]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800598c:	061a      	lsls	r2, r3, #24
 800598e:	f53f ad1d 	bmi.w	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005992:	a801      	add	r0, sp, #4
 8005994:	f7ff fab4 	bl	8004f00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005998:	9802      	ldr	r0, [sp, #8]
 800599a:	e4e2      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800599c:	a801      	add	r0, sp, #4
 800599e:	f7ff fb5b 	bl	8005058 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059a2:	9802      	ldr	r0, [sp, #8]
 80059a4:	e4dd      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a6:	a801      	add	r0, sp, #4
 80059a8:	f7ff fc02 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059ac:	9802      	ldr	r0, [sp, #8]
 80059ae:	e4d8      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80059b0:	281f      	cmp	r0, #31
 80059b2:	f63f acd5 	bhi.w	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80059b6:	a301      	add	r3, pc, #4	@ (adr r3, 80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>)
 80059b8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80059bc:	08005af9 	.word	0x08005af9
 80059c0:	08005aa1 	.word	0x08005aa1
 80059c4:	08005361 	.word	0x08005361
 80059c8:	08005bd3 	.word	0x08005bd3
 80059cc:	08005361 	.word	0x08005361
 80059d0:	08005361 	.word	0x08005361
 80059d4:	08005361 	.word	0x08005361
 80059d8:	08005b69 	.word	0x08005b69
 80059dc:	08005361 	.word	0x08005361
 80059e0:	08005361 	.word	0x08005361
 80059e4:	08005361 	.word	0x08005361
 80059e8:	08005361 	.word	0x08005361
 80059ec:	08005361 	.word	0x08005361
 80059f0:	08005361 	.word	0x08005361
 80059f4:	08005361 	.word	0x08005361
 80059f8:	08005c37 	.word	0x08005c37
 80059fc:	08005361 	.word	0x08005361
 8005a00:	08005361 	.word	0x08005361
 8005a04:	08005361 	.word	0x08005361
 8005a08:	08005361 	.word	0x08005361
 8005a0c:	08005361 	.word	0x08005361
 8005a10:	08005361 	.word	0x08005361
 8005a14:	08005361 	.word	0x08005361
 8005a18:	08005361 	.word	0x08005361
 8005a1c:	08005361 	.word	0x08005361
 8005a20:	08005361 	.word	0x08005361
 8005a24:	08005361 	.word	0x08005361
 8005a28:	08005361 	.word	0x08005361
 8005a2c:	08005361 	.word	0x08005361
 8005a30:	08005361 	.word	0x08005361
 8005a34:	08005361 	.word	0x08005361
 8005a38:	08005a3d 	.word	0x08005a3d
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005a3c:	4946      	ldr	r1, [pc, #280]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a3e:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005a42:	f412 3260 	ands.w	r2, r2, #229376	@ 0x38000
 8005a46:	f43f aecc 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005a4a:	680b      	ldr	r3, [r1, #0]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	d502      	bpl.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005a50:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005a54:	d0a2      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005a56:	4b40      	ldr	r3, [pc, #256]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	0098      	lsls	r0, r3, #2
 8005a5c:	d502      	bpl.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8005a5e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005a62:	d0a0      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005a64:	4b3c      	ldr	r3, [pc, #240]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a66:	6819      	ldr	r1, [r3, #0]
 8005a68:	0789      	lsls	r1, r1, #30
 8005a6a:	d503      	bpl.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005a6c:	f5b2 3fc0 	cmp.w	r2, #98304	@ 0x18000
 8005a70:	f000 8729 	beq.w	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005a74:	4b38      	ldr	r3, [pc, #224]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	0598      	lsls	r0, r3, #22
 8005a7a:	d503      	bpl.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 8005a7c:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005a80:	f000 87cf 	beq.w	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x171a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005a84:	4b34      	ldr	r3, [pc, #208]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a86:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005a8a:	f010 0002 	ands.w	r0, r0, #2
 8005a8e:	f43f ac68 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005a92:	f5a2 3320 	sub.w	r3, r2, #163840	@ 0x28000
 8005a96:	fab3 f383 	clz	r3, r3
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	03d8      	lsls	r0, r3, #15
 8005a9e:	e460      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005aa0:	492d      	ldr	r1, [pc, #180]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005aa2:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005aa6:	f012 0238 	ands.w	r2, r2, #56	@ 0x38
 8005aaa:	f43f ae9a 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005aae:	680b      	ldr	r3, [r1, #0]
 8005ab0:	0118      	lsls	r0, r3, #4
 8005ab2:	d502      	bpl.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005ab4:	2a08      	cmp	r2, #8
 8005ab6:	f43f af71 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005aba:	2a10      	cmp	r2, #16
 8005abc:	f43f af73 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005ac0:	4b25      	ldr	r3, [pc, #148]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	0789      	lsls	r1, r1, #30
 8005ac6:	d502      	bpl.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8005ac8:	2a18      	cmp	r2, #24
 8005aca:	f000 871f 	beq.w	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005ace:	4b22      	ldr	r3, [pc, #136]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0598      	lsls	r0, r3, #22
 8005ad4:	d502      	bpl.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005ad6:	2a20      	cmp	r2, #32
 8005ad8:	f000 87ac 	beq.w	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x172c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005adc:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ade:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005ae2:	f010 0002 	ands.w	r0, r0, #2
 8005ae6:	f43f ac3c 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005aea:	f1a2 0328 	sub.w	r3, r2, #40	@ 0x28
 8005aee:	fab3 f383 	clz	r3, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	03d8      	lsls	r0, r3, #15
 8005af6:	e434      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005af8:	4917      	ldr	r1, [pc, #92]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005afa:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005afe:	f012 0207 	ands.w	r2, r2, #7
 8005b02:	f000 840f 	beq.w	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005b06:	680b      	ldr	r3, [r1, #0]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	d502      	bpl.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005b0c:	2a01      	cmp	r2, #1
 8005b0e:	f43f af45 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005b12:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	0098      	lsls	r0, r3, #2
 8005b18:	d502      	bpl.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005b1a:	2a02      	cmp	r2, #2
 8005b1c:	f43f af43 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005b20:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	0789      	lsls	r1, r1, #30
 8005b26:	d502      	bpl.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8005b28:	2a03      	cmp	r2, #3
 8005b2a:	f000 86be 	beq.w	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x15a2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	059b      	lsls	r3, r3, #22
 8005b34:	d502      	bpl.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005b36:	2a04      	cmp	r2, #4
 8005b38:	f000 8770 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1714>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b3e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005b42:	f010 0002 	ands.w	r0, r0, #2
 8005b46:	f43f ac0c 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005b4a:	f1a2 0305 	sub.w	r3, r2, #5
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	03d8      	lsls	r0, r3, #15
 8005b56:	e404      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005b58:	44020c00 	.word	0x44020c00
 8005b5c:	00bb8000 	.word	0x00bb8000
 8005b60:	03d09000 	.word	0x03d09000
 8005b64:	007a1200 	.word	0x007a1200
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005b68:	49a7      	ldr	r1, [pc, #668]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005b6a:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005b6e:	f412 6260 	ands.w	r2, r2, #3584	@ 0xe00
 8005b72:	f43f ae36 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005b76:	680b      	ldr	r3, [r1, #0]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	d503      	bpl.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005b7c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005b80:	f43f af0c 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005b84:	4ba0      	ldr	r3, [pc, #640]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	0098      	lsls	r0, r3, #2
 8005b8a:	d503      	bpl.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005b8c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005b90:	f43f af09 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005b94:	4b9c      	ldr	r3, [pc, #624]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005b96:	6819      	ldr	r1, [r3, #0]
 8005b98:	0789      	lsls	r1, r1, #30
 8005b9a:	d503      	bpl.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8005b9c:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8005ba0:	f000 868a 	beq.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005ba4:	4b98      	ldr	r3, [pc, #608]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	0598      	lsls	r0, r3, #22
 8005baa:	d503      	bpl.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8005bac:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005bb0:	f000 873a 	beq.w	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1720>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005bb4:	4b94      	ldr	r3, [pc, #592]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005bb6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005bba:	f010 0002 	ands.w	r0, r0, #2
 8005bbe:	f43f abd0 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005bc2:	f5a2 6320 	sub.w	r3, r2, #2560	@ 0xa00
 8005bc6:	fab3 f383 	clz	r3, r3
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	03d8      	lsls	r0, r3, #15
 8005bce:	f7ff bbc8 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005bd2:	498d      	ldr	r1, [pc, #564]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005bd4:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005bd8:	f412 72e0 	ands.w	r2, r2, #448	@ 0x1c0
 8005bdc:	f43f ae01 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005be0:	680b      	ldr	r3, [r1, #0]
 8005be2:	0119      	lsls	r1, r3, #4
 8005be4:	d502      	bpl.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005be6:	2a40      	cmp	r2, #64	@ 0x40
 8005be8:	f43f aed8 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005bec:	4b86      	ldr	r3, [pc, #536]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	d502      	bpl.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005bf4:	2a80      	cmp	r2, #128	@ 0x80
 8005bf6:	f43f aed6 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005bfa:	4b83      	ldr	r3, [pc, #524]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	0788      	lsls	r0, r1, #30
 8005c00:	d502      	bpl.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 8005c02:	2ac0      	cmp	r2, #192	@ 0xc0
 8005c04:	f000 8666 	beq.w	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005c08:	4b7f      	ldr	r3, [pc, #508]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	0599      	lsls	r1, r3, #22
 8005c0e:	d503      	bpl.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
 8005c10:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005c14:	f000 86ff 	beq.w	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x170e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005c18:	4b7b      	ldr	r3, [pc, #492]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c1a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005c1e:	f010 0002 	ands.w	r0, r0, #2
 8005c22:	f43f ab9e 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c26:	f5a2 73a0 	sub.w	r3, r2, #320	@ 0x140
 8005c2a:	fab3 f383 	clz	r3, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	03d8      	lsls	r0, r3, #15
 8005c32:	f7ff bb96 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005c36:	4974      	ldr	r1, [pc, #464]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c38:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005c3c:	f412 42e0 	ands.w	r2, r2, #28672	@ 0x7000
 8005c40:	f43f adcf 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005c44:	680b      	ldr	r3, [r1, #0]
 8005c46:	0119      	lsls	r1, r3, #4
 8005c48:	d503      	bpl.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8005c4a:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8005c4e:	f43f aea5 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005c52:	4b6d      	ldr	r3, [pc, #436]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	d503      	bpl.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005c5a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005c5e:	f43f aea2 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005c62:	4b69      	ldr	r3, [pc, #420]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c64:	6819      	ldr	r1, [r3, #0]
 8005c66:	0788      	lsls	r0, r1, #30
 8005c68:	d503      	bpl.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005c6a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8005c6e:	f000 8615 	beq.w	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005c72:	4b65      	ldr	r3, [pc, #404]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	0599      	lsls	r1, r3, #22
 8005c78:	d503      	bpl.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005c7a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8005c7e:	f000 8691 	beq.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005c82:	4b61      	ldr	r3, [pc, #388]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c84:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005c88:	f010 0002 	ands.w	r0, r0, #2
 8005c8c:	f43f ab69 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c90:	f5a2 43a0 	sub.w	r3, r2, #20480	@ 0x5000
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	03d8      	lsls	r0, r3, #15
 8005c9c:	f7ff bb61 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005ca0:	2901      	cmp	r1, #1
 8005ca2:	bf08      	it	eq
 8005ca4:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005ca6:	bf18      	it	ne
 8005ca8:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005caa:	f47f ab5a 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005cae:	4956      	ldr	r1, [pc, #344]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cb0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8005cb4:	f412 3260 	ands.w	r2, r2, #229376	@ 0x38000
 8005cb8:	f000 8334 	beq.w	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005cbc:	680b      	ldr	r3, [r1, #0]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	d503      	bpl.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005cc2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005cc6:	f43f ae69 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8005cca:	4b4f      	ldr	r3, [pc, #316]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	0098      	lsls	r0, r3, #2
 8005cd0:	d503      	bpl.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8005cd2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005cd6:	f43f ae66 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005cda:	4b4b      	ldr	r3, [pc, #300]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cdc:	6819      	ldr	r1, [r3, #0]
 8005cde:	0789      	lsls	r1, r1, #30
 8005ce0:	d503      	bpl.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8005ce2:	f5b2 3fc0 	cmp.w	r2, #98304	@ 0x18000
 8005ce6:	f000 85bd 	beq.w	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8005cea:	4b47      	ldr	r3, [pc, #284]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	059b      	lsls	r3, r3, #22
 8005cf0:	d503      	bpl.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8005cf2:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005cf6:	f000 8661 	beq.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8005cfa:	4b43      	ldr	r3, [pc, #268]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005d02:	f43f ab2e 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005d06:	f5b2 3f20 	cmp.w	r2, #163840	@ 0x28000
 8005d0a:	4840      	ldr	r0, [pc, #256]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005d0c:	bf18      	it	ne
 8005d0e:	2000      	movne	r0, #0
 8005d10:	f7ff bb27 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005d14:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d18:	bf08      	it	eq
 8005d1a:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005d1c:	bf18      	it	ne
 8005d1e:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005d20:	f47f ab1f 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005d24:	4938      	ldr	r1, [pc, #224]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d26:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005d2a:	f412 0240 	ands.w	r2, r2, #12582912	@ 0xc00000
 8005d2e:	f43f acfe 	beq.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005d32:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005d36:	f000 8300 	beq.w	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005d3a:	680b      	ldr	r3, [r1, #0]
 8005d3c:	079b      	lsls	r3, r3, #30
 8005d3e:	d503      	bpl.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8005d40:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005d44:	f000 8575 	beq.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x152a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005d48:	4b2f      	ldr	r3, [pc, #188]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005d50:	f43f ab07 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005d54:	f5b2 0f40 	cmp.w	r2, #12582912	@ 0xc00000
 8005d58:	482d      	ldr	r0, [pc, #180]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005d5a:	bf18      	it	ne
 8005d5c:	2000      	movne	r0, #0
 8005d5e:	f7ff bb00 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005d62:	f5a0 2000 	sub.w	r0, r0, #524288	@ 0x80000
 8005d66:	4308      	orrs	r0, r1
        frequency = 0U;
 8005d68:	bf18      	it	ne
 8005d6a:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005d6c:	f47f aaf9 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005d70:	4a25      	ldr	r2, [pc, #148]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d72:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8005d76:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8005d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d7e:	f43f addb 	beq.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005d82:	f67f adce 	bls.w	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8005d86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d8a:	f000 83c6 	beq.w	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x1212>
 8005d8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d92:	f040 85c5 	bne.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d96:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d9a:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d9c:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005da0:	0798      	lsls	r0, r3, #30
 8005da2:	f140 8447 	bpl.w	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>
 8005da6:	2900      	cmp	r1, #0
 8005da8:	f040 8444 	bne.w	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dac:	6813      	ldr	r3, [r2, #0]
 8005dae:	4819      	ldr	r0, [pc, #100]	@ (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>)
 8005db0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005db4:	40d8      	lsrs	r0, r3
 8005db6:	f7ff bad4 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005dba:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 8005dbe:	4308      	orrs	r0, r1
        frequency = 0U;
 8005dc0:	bf18      	it	ne
 8005dc2:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005dc4:	f47f aacd 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005dc8:	490f      	ldr	r1, [pc, #60]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dca:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005dce:	f412 2240 	ands.w	r2, r2, #786432	@ 0xc0000
 8005dd2:	f43f ad06 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005dd6:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005dda:	f000 82ae 	beq.w	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005dde:	680b      	ldr	r3, [r1, #0]
 8005de0:	079b      	lsls	r3, r3, #30
 8005de2:	d503      	bpl.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005de4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8005de8:	f000 857b 	beq.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005df4:	f43f aab5 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005df8:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8005dfc:	4804      	ldr	r0, [pc, #16]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005dfe:	bf18      	it	ne
 8005e00:	2000      	movne	r0, #0
 8005e02:	f7ff baae 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005e06:	bf00      	nop
 8005e08:	44020c00 	.word	0x44020c00
 8005e0c:	007a1200 	.word	0x007a1200
 8005e10:	003d0900 	.word	0x003d0900
 8005e14:	03d09000 	.word	0x03d09000
    switch (PeriphClk)
 8005e18:	f5a0 7000 	sub.w	r0, r0, #512	@ 0x200
 8005e1c:	4308      	orrs	r0, r1
        frequency = 0U;
 8005e1e:	bf18      	it	ne
 8005e20:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005e22:	f47f aa9e 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005e26:	4bab      	ldr	r3, [pc, #684]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005e28:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005e2c:	f012 5260 	ands.w	r2, r2, #939524096	@ 0x38000000
 8005e30:	f43f acd7 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	d503      	bpl.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 8005e3a:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8005e3e:	f43f adad 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005e42:	4ba4      	ldr	r3, [pc, #656]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	0098      	lsls	r0, r3, #2
 8005e48:	d503      	bpl.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005e4a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8005e4e:	f43f adaa 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005e52:	4ba0      	ldr	r3, [pc, #640]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005e54:	6819      	ldr	r1, [r3, #0]
 8005e56:	0789      	lsls	r1, r1, #30
 8005e58:	d503      	bpl.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005e5a:	f1b2 5fc0 	cmp.w	r2, #402653184	@ 0x18000000
 8005e5e:	f000 84e1 	beq.w	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005e62:	4b9c      	ldr	r3, [pc, #624]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	0598      	lsls	r0, r3, #22
 8005e68:	d503      	bpl.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8005e6a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005e6e:	f000 85b7 	beq.w	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005e72:	4b98      	ldr	r3, [pc, #608]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005e74:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005e78:	f010 0002 	ands.w	r0, r0, #2
 8005e7c:	f43f aa71 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005e80:	f1a2 5320 	sub.w	r3, r2, #671088640	@ 0x28000000
 8005e84:	fab3 f383 	clz	r3, r3
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	03d8      	lsls	r0, r3, #15
 8005e8c:	f7ff ba69 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005e90:	2920      	cmp	r1, #32
 8005e92:	bf08      	it	eq
 8005e94:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005e96:	bf18      	it	ne
 8005e98:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005e9a:	f47f aa62 	bne.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005e9e:	4a8d      	ldr	r2, [pc, #564]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ea0:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8005ea4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8005ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005eac:	f000 8371 	beq.w	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x128a>
 8005eb0:	f200 82ab 	bhi.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb8:	f43f ad34 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec0:	f000 8235 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f43f ac32 	beq.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7ff ba49 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ed0:	4a80      	ldr	r2, [pc, #512]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ed2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005ed6:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005edc:	0390      	lsls	r0, r2, #14
 8005ede:	d502      	bpl.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 830c 	beq.w	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eea:	f43f ad52 	beq.w	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef2:	f43f ad53 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        frequency = 0U;
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f7ff ba33 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005efc:	4975      	ldr	r1, [pc, #468]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005efe:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005f02:	f012 7240 	ands.w	r2, r2, #50331648	@ 0x3000000
 8005f06:	f43f ac6c 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005f0a:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005f0e:	f000 8214 	beq.w	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005f12:	6808      	ldr	r0, [r1, #0]
 8005f14:	f010 0002 	ands.w	r0, r0, #2
 8005f18:	f43f aa23 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005f1c:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8005f20:	f000 84b5 	beq.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        frequency = 0U;
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7ff ba1c 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8005f2a:	496a      	ldr	r1, [pc, #424]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f2c:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8005f30:	f012 0207 	ands.w	r2, r2, #7
 8005f34:	f43f ac55 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8005f38:	680b      	ldr	r3, [r1, #0]
 8005f3a:	0119      	lsls	r1, r3, #4
 8005f3c:	d502      	bpl.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
 8005f3e:	2a01      	cmp	r2, #1
 8005f40:	f43f ad2c 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8005f44:	4b63      	ldr	r3, [pc, #396]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	d502      	bpl.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8005f4c:	2a02      	cmp	r2, #2
 8005f4e:	f43f ad2a 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8005f52:	4b60      	ldr	r3, [pc, #384]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	0788      	lsls	r0, r1, #30
 8005f58:	d502      	bpl.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 8005f5a:	2a03      	cmp	r2, #3
 8005f5c:	f000 847b 	beq.w	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8005f60:	4b5c      	ldr	r3, [pc, #368]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	0599      	lsls	r1, r3, #22
 8005f66:	d502      	bpl.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8005f68:	2a04      	cmp	r2, #4
 8005f6a:	f000 8548 	beq.w	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8005f6e:	4b59      	ldr	r3, [pc, #356]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f70:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005f74:	f010 0002 	ands.w	r0, r0, #2
 8005f78:	f43f a9f3 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005f7c:	f1a2 0305 	sub.w	r3, r2, #5
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	03d8      	lsls	r0, r3, #15
 8005f88:	f7ff b9eb 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005f8c:	4b51      	ldr	r3, [pc, #324]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
        switch (srcclk)
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d844      	bhi.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	0800592f 	.word	0x0800592f
 8005fa4:	08006025 	.word	0x08006025
 8005fa8:	08006025 	.word	0x08006025
 8005fac:	08006025 	.word	0x08006025
 8005fb0:	08006025 	.word	0x08006025
 8005fb4:	08006025 	.word	0x08006025
 8005fb8:	08006025 	.word	0x08006025
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08005925 	.word	0x08005925
 8005fc4:	08006025 	.word	0x08006025
 8005fc8:	08006025 	.word	0x08006025
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08006025 	.word	0x08006025
 8005fd8:	08006025 	.word	0x08006025
 8005fdc:	08006025 	.word	0x08006025
 8005fe0:	08005939 	.word	0x08005939
 8005fe4:	08006025 	.word	0x08006025
 8005fe8:	08006025 	.word	0x08006025
 8005fec:	08006025 	.word	0x08006025
 8005ff0:	08006025 	.word	0x08006025
 8005ff4:	08006025 	.word	0x08006025
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	08006025 	.word	0x08006025
 8006000:	08006051 	.word	0x08006051
 8006004:	08006025 	.word	0x08006025
 8006008:	08006025 	.word	0x08006025
 800600c:	08006025 	.word	0x08006025
 8006010:	08006025 	.word	0x08006025
 8006014:	08006025 	.word	0x08006025
 8006018:	08006025 	.word	0x08006025
 800601c:	08006025 	.word	0x08006025
 8006020:	0800602b 	.word	0x0800602b
        frequency = 0U;
 8006024:	2000      	movs	r0, #0
 8006026:	f7ff b99c 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800602a:	4b2a      	ldr	r3, [pc, #168]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 800602c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006030:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006032:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006036:	0789      	lsls	r1, r1, #30
 8006038:	f140 8326 	bpl.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 800603c:	2a00      	cmp	r2, #0
 800603e:	f040 8323 	bne.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4824      	ldr	r0, [pc, #144]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>)
 8006046:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800604a:	40d8      	lsrs	r0, r3
 800604c:	f7ff b989 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 8006050:	4822      	ldr	r0, [pc, #136]	@ (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>)
 8006052:	f7ff b986 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006056:	491f      	ldr	r1, [pc, #124]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006058:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800605c:	f012 0207 	ands.w	r2, r2, #7
 8006060:	f000 8115 	beq.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006064:	2a01      	cmp	r2, #1
 8006066:	f000 82c8 	beq.w	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800606a:	2a02      	cmp	r2, #2
 800606c:	f000 836b 	beq.w	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006070:	680b      	ldr	r3, [r1, #0]
 8006072:	039b      	lsls	r3, r3, #14
 8006074:	d502      	bpl.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8006076:	2a03      	cmp	r2, #3
 8006078:	f000 84d9 	beq.w	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1726>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800607c:	4b15      	ldr	r3, [pc, #84]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	0788      	lsls	r0, r1, #30
 8006082:	d502      	bpl.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
 8006084:	2a04      	cmp	r2, #4
 8006086:	f000 8477 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800608a:	4b12      	ldr	r3, [pc, #72]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8006092:	f43f a966 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006096:	2a05      	cmp	r2, #5
 8006098:	4811      	ldr	r0, [pc, #68]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd8>)
 800609a:	bf18      	it	ne
 800609c:	2000      	movne	r0, #0
 800609e:	f7ff b960 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80060a2:	4a0c      	ldr	r2, [pc, #48]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 80060a4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80060a8:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
        switch (srcclk)
 80060ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060b0:	f000 823c 	beq.w	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80060b4:	f200 8153 	bhi.w	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 80060b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060bc:	f43f ac32 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80060c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c4:	f000 8133 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f43f ab30 	beq.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 80060ce:	2000      	movs	r0, #0
 80060d0:	f7ff b947 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80060d4:	44020c00 	.word	0x44020c00
 80060d8:	03d09000 	.word	0x03d09000
 80060dc:	00bb8000 	.word	0x00bb8000
 80060e0:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80060e4:	49ab      	ldr	r1, [pc, #684]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80060e6:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80060ea:	f012 0270 	ands.w	r2, r2, #112	@ 0x70
 80060ee:	f43f ab78 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80060f2:	680b      	ldr	r3, [r1, #0]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	d502      	bpl.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80060f8:	2a10      	cmp	r2, #16
 80060fa:	f43f ac4f 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80060fe:	4ba5      	ldr	r3, [pc, #660]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	0098      	lsls	r0, r3, #2
 8006104:	d502      	bpl.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 8006106:	2a20      	cmp	r2, #32
 8006108:	f43f ac4d 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800610c:	4ba1      	ldr	r3, [pc, #644]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	0789      	lsls	r1, r1, #30
 8006112:	d502      	bpl.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
 8006114:	2a30      	cmp	r2, #48	@ 0x30
 8006116:	f000 8377 	beq.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800611a:	4b9e      	ldr	r3, [pc, #632]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	059b      	lsls	r3, r3, #22
 8006120:	d502      	bpl.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
 8006122:	2a40      	cmp	r2, #64	@ 0x40
 8006124:	f000 846e 	beq.w	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006128:	4b9a      	ldr	r3, [pc, #616]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800612a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800612e:	f010 0002 	ands.w	r0, r0, #2
 8006132:	f43f a916 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006136:	f1a2 0350 	sub.w	r3, r2, #80	@ 0x50
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	03d8      	lsls	r0, r3, #15
 8006142:	f7ff b90e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006146:	4a93      	ldr	r2, [pc, #588]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006148:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800614c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
        switch (srcclk)
 8006150:	2b80      	cmp	r3, #128	@ 0x80
 8006152:	f43f abf1 	beq.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006156:	f67f abe4 	bls.w	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800615a:	2bc0      	cmp	r3, #192	@ 0xc0
 800615c:	f000 81e0 	beq.w	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
 8006160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006164:	f040 83df 	bne.w	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x161e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006168:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800616c:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800616e:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006172:	0798      	lsls	r0, r3, #30
 8006174:	f140 82a8 	bpl.w	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
 8006178:	2900      	cmp	r1, #0
 800617a:	f040 82a5 	bne.w	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	4885      	ldr	r0, [pc, #532]	@ (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 8006182:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006186:	40d8      	lsrs	r0, r3
 8006188:	f7ff b8eb 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800618c:	4a81      	ldr	r2, [pc, #516]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800618e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8006192:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
        switch (srcclk)
 8006196:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800619a:	f000 820c 	beq.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 800619e:	f200 8168 	bhi.w	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
 80061a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061a6:	f43f abbd 	beq.w	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80061aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061ae:	f000 80be 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f43f aabb 	beq.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 80061b8:	2000      	movs	r0, #0
 80061ba:	f7ff b8d2 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80061be:	4b75      	ldr	r3, [pc, #468]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061c0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80061c4:	f412 12e0 	ands.w	r2, r2, #1835008	@ 0x1c0000
 80061c8:	f43f ab0b 	beq.w	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	0119      	lsls	r1, r3, #4
 80061d0:	d503      	bpl.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 80061d2:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80061d6:	f43f abe1 	beq.w	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80061da:	4b6e      	ldr	r3, [pc, #440]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	d503      	bpl.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 80061e2:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80061e6:	f43f abde 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80061ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	0788      	lsls	r0, r1, #30
 80061f0:	d503      	bpl.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80061f2:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 80061f6:	f000 837b 	beq.w	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80061fa:	4b66      	ldr	r3, [pc, #408]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0599      	lsls	r1, r3, #22
 8006200:	d503      	bpl.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8006202:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8006206:	f000 8400 	beq.w	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1702>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800620a:	4b62      	ldr	r3, [pc, #392]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800620c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8006210:	f010 0002 	ands.w	r0, r0, #2
 8006214:	f43f a8a5 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006218:	f5a2 13a0 	sub.w	r3, r2, #1310720	@ 0x140000
 800621c:	fab3 f383 	clz	r3, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	03d8      	lsls	r0, r3, #15
 8006224:	f7ff b89d 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006228:	4a5a      	ldr	r2, [pc, #360]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800622a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800622e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
        switch (srcclk)
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006236:	f43f ab7f 	beq.w	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800623a:	f67f ab72 	bls.w	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800623e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006242:	f000 8170 	beq.w	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 8006246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800624a:	f040 8366 	bne.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800624e:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006252:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006254:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006258:	079b      	lsls	r3, r3, #30
 800625a:	f140 81d3 	bpl.w	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x12fc>
 800625e:	2900      	cmp	r1, #0
 8006260:	f040 81d0 	bne.w	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x12fc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	484c      	ldr	r0, [pc, #304]	@ (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 8006268:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800626c:	40d8      	lsrs	r0, r3
 800626e:	f7ff b878 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006272:	4a48      	ldr	r2, [pc, #288]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006274:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006278:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 800627c:	2b02      	cmp	r3, #2
 800627e:	f000 8111 	beq.w	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 8006282:	2b03      	cmp	r3, #3
 8006284:	f000 8117 	beq.w	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ae>
 8006288:	2b01      	cmp	r3, #1
 800628a:	f43f ab50 	beq.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
}
 800628e:	b005      	add	sp, #20
 8006290:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 8006294:	f7fd babc 	b.w	8003810 <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006298:	4b3e      	ldr	r3, [pc, #248]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800629a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800629e:	681b      	ldr	r3, [r3, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80062a0:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80062a4:	049b      	lsls	r3, r3, #18
 80062a6:	d502      	bpl.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	f000 812b 	beq.w	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x11fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80062ae:	4b39      	ldr	r3, [pc, #228]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0198      	lsls	r0, r3, #6
 80062b4:	d502      	bpl.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>
 80062b6:	2a10      	cmp	r2, #16
 80062b8:	f43f ab6b 	beq.w	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80062bc:	4b35      	ldr	r3, [pc, #212]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062c2:	0799      	lsls	r1, r3, #30
 80062c4:	d502      	bpl.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>
 80062c6:	2a20      	cmp	r2, #32
 80062c8:	f000 8333 	beq.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x162a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80062cc:	4b31      	ldr	r3, [pc, #196]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062ce:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80062d2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80062d6:	f43f a844 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80062da:	2a30      	cmp	r2, #48	@ 0x30
 80062dc:	bf0c      	ite	eq
 80062de:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 80062e2:	2000      	movne	r0, #0
 80062e4:	f7ff b83d 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80062e8:	492a      	ldr	r1, [pc, #168]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062ea:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80062ee:	f412 1240 	ands.w	r2, r2, #3145728	@ 0x300000
 80062f2:	f43f aa1c 	beq.w	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80062f6:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80062fa:	d01e      	beq.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	0798      	lsls	r0, r3, #30
 8006300:	d503      	bpl.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x1002>
 8006302:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8006306:	f000 82b4 	beq.w	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x156a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800630a:	4b22      	ldr	r3, [pc, #136]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8006312:	f43f a826 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006316:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 800631a:	4820      	ldr	r0, [pc, #128]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>)
 800631c:	bf18      	it	ne
 800631e:	2000      	movne	r0, #0
 8006320:	f7ff b81f 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
}
 8006324:	b005      	add	sp, #20
 8006326:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 800632a:	f7fd baf9 	b.w	8003920 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800632e:	a801      	add	r0, sp, #4
 8006330:	f7fe ff3e 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006334:	9803      	ldr	r0, [sp, #12]
            break;
 8006336:	f7ff b814 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800633a:	a801      	add	r0, sp, #4
 800633c:	f7fe ff38 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006340:	9803      	ldr	r0, [sp, #12]
 8006342:	f7ff b80e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006346:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800634a:	0112      	lsls	r2, r2, #4
 800634c:	f140 80b0 	bpl.w	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        frequency = 0U;
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf14      	ite	ne
 8006354:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006358:	2000      	moveq	r0, #0
 800635a:	f7ff b802 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 800635e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006362:	f000 8140 	beq.w	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8006366:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800636a:	f040 82ec 	bne.w	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800636e:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006370:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006374:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006376:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800637a:	0789      	lsls	r1, r1, #30
 800637c:	f140 8213 	bpl.w	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
 8006380:	2a00      	cmp	r2, #0
 8006382:	f040 8210 	bne.w	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4803      	ldr	r0, [pc, #12]	@ (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 800638a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800638e:	40d8      	lsrs	r0, r3
 8006390:	f7fe bfe7 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006394:	44020c00 	.word	0x44020c00
 8006398:	03d09000 	.word	0x03d09000
 800639c:	003d0900 	.word	0x003d0900
        switch (srcclk)
 80063a0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80063a4:	f000 80eb 	beq.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80063a8:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80063ac:	f040 82d4 	bne.w	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063b0:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063b4:	680b      	ldr	r3, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063b6:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ba:	0798      	lsls	r0, r3, #30
 80063bc:	f140 81ae 	bpl.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	f040 81ab 	bne.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063c6:	680b      	ldr	r3, [r1, #0]
 80063c8:	48ba      	ldr	r0, [pc, #744]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80063ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80063ce:	40d8      	lsrs	r0, r3
 80063d0:	f7fe bfc7 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d8:	f000 80e2 	beq.w	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 80063dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063e0:	f040 82c4 	bne.w	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063e4:	4bb4      	ldr	r3, [pc, #720]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80063e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ea:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063ec:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063f0:	0788      	lsls	r0, r1, #30
 80063f2:	f140 81ed 	bpl.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c8>
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	f040 81ea 	bne.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c8>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	48ad      	ldr	r0, [pc, #692]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8006400:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006404:	40d8      	lsrs	r0, r3
 8006406:	f7fe bfac 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 800640a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800640e:	f000 80a5 	beq.w	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8006412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006416:	f040 829c 	bne.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x164a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800641a:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800641e:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006420:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006424:	079b      	lsls	r3, r3, #30
 8006426:	f140 81a9 	bpl.w	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x1474>
 800642a:	2900      	cmp	r1, #0
 800642c:	f040 81a6 	bne.w	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x1474>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006430:	6813      	ldr	r3, [r2, #0]
 8006432:	48a0      	ldr	r0, [pc, #640]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8006434:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006438:	40d8      	lsrs	r0, r3
 800643a:	f7fe bf92 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006442:	f000 80bf 	beq.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8006446:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800644a:	f040 8292 	bne.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800644e:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006452:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006454:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006458:	0798      	lsls	r0, r3, #30
 800645a:	f140 814a 	bpl.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
 800645e:	2900      	cmp	r1, #0
 8006460:	f040 8147 	bne.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006464:	6813      	ldr	r3, [r2, #0]
 8006466:	4893      	ldr	r0, [pc, #588]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8006468:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800646c:	40d8      	lsrs	r0, r3
 800646e:	f7fe bf78 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8006472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006476:	d060      	beq.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
 8006478:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800647c:	f040 8266 	bne.w	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006480:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006484:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006486:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800648a:	0798      	lsls	r0, r3, #30
 800648c:	f140 8161 	bpl.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
 8006490:	2900      	cmp	r1, #0
 8006492:	f040 815e 	bne.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	4886      	ldr	r0, [pc, #536]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800649a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800649e:	40d8      	lsrs	r0, r3
 80064a0:	f7fe bf5f 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064a4:	a801      	add	r0, sp, #4
 80064a6:	f7fe fdd7 	bl	8005058 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80064aa:	9803      	ldr	r0, [sp, #12]
            break;
 80064ac:	f7fe bf59 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80064b0:	2000      	movs	r0, #0
 80064b2:	f7fe bf56 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064b6:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064ba:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064bc:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064c0:	0798      	lsls	r0, r3, #30
 80064c2:	d507      	bpl.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11cc>
 80064c4:	b931      	cbnz	r1, 80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	487a      	ldr	r0, [pc, #488]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80064ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064ce:	40d8      	lsrs	r0, r3
 80064d0:	f7fe bf47 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064d4:	4b78      	ldr	r3, [pc, #480]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	059b      	lsls	r3, r3, #22
 80064da:	d503      	bpl.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 80064dc:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80064e0:	f000 82ae 	beq.w	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1738>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064e4:	4b74      	ldr	r3, [pc, #464]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80064ec:	f000 821e 	beq.w	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x1624>
        frequency = 0U;
 80064f0:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80064f4:	4871      	ldr	r0, [pc, #452]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80064f6:	bf18      	it	ne
 80064f8:	2000      	movne	r0, #0
 80064fa:	f7fe bf32 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = HSE_VALUE;
 80064fe:	486f      	ldr	r0, [pc, #444]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006500:	f7fe bf2f 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSI48_VALUE;
 8006504:	486e      	ldr	r0, [pc, #440]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8006506:	f7fe bf2c 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSE_VALUE;
 800650a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800650e:	f7fe bf28 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006512:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006516:	f7fe bf24 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 800651a:	486a      	ldr	r0, [pc, #424]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800651c:	f7fe bf21 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006520:	4868      	ldr	r0, [pc, #416]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8006522:	f7fe bf1e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006526:	4867      	ldr	r0, [pc, #412]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8006528:	f7fe bf1b 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800652c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006530:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006534:	03c0      	lsls	r0, r0, #15
 8006536:	f7fe bf14 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800653a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 800653e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006542:	bf14      	ite	ne
 8006544:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006548:	2000      	moveq	r0, #0
 800654a:	f7fe bf0a 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800654e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006552:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006556:	03c0      	lsls	r0, r0, #15
 8006558:	f7fe bf03 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800655c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 8006560:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006564:	bf14      	ite	ne
 8006566:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800656a:	2000      	moveq	r0, #0
 800656c:	f7fe bef9 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006570:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006574:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006578:	03c0      	lsls	r0, r0, #15
 800657a:	f7fe bef2 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800657e:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
        frequency = 0U;
 8006582:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006586:	bf14      	ite	ne
 8006588:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800658c:	2000      	moveq	r0, #0
 800658e:	f7fe bee8 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006592:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006596:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800659a:	03c0      	lsls	r0, r0, #15
 800659c:	f7fe bee1 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065a0:	4b45      	ldr	r3, [pc, #276]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80065a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = 0U;
 80065a6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80065aa:	bf14      	ite	ne
 80065ac:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80065b0:	2000      	moveq	r0, #0
 80065b2:	f7fe bed6 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065b6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80065ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80065be:	03c0      	lsls	r0, r0, #15
 80065c0:	f7fe becf 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065c4:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80065c8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80065cc:	bf14      	ite	ne
 80065ce:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80065d2:	2000      	moveq	r0, #0
 80065d4:	f7fe bec5 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065d8:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 80065dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80065e0:	03c0      	lsls	r0, r0, #15
 80065e2:	f7fe bebe 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065e6:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80065ea:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80065ee:	bf14      	ite	ne
 80065f0:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80065f4:	2000      	moveq	r0, #0
 80065f6:	f7fe beb4 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
}
 80065fa:	b005      	add	sp, #20
 80065fc:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 8006600:	f7fd b8d8 	b.w	80037b4 <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006604:	4b2c      	ldr	r3, [pc, #176]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	0598      	lsls	r0, r3, #22
 800660a:	d503      	bpl.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 800660c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006610:	f000 8219 	beq.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006614:	4b28      	ldr	r3, [pc, #160]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800661c:	f000 81b3 	beq.w	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x167e>
        frequency = 0U;
 8006620:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006624:	4825      	ldr	r0, [pc, #148]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006626:	bf18      	it	ne
 8006628:	2000      	movne	r0, #0
 800662a:	f7fe be9a 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800662e:	2000      	movs	r0, #0
 8006630:	f7fe be97 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006634:	4b20      	ldr	r3, [pc, #128]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	059a      	lsls	r2, r3, #22
 800663a:	d503      	bpl.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 800663c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006640:	f000 8204 	beq.w	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006644:	4b1c      	ldr	r3, [pc, #112]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800664c:	f000 81a1 	beq.w	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x168a>
        frequency = 0U;
 8006650:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006654:	4819      	ldr	r0, [pc, #100]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006656:	bf18      	it	ne
 8006658:	2000      	movne	r0, #0
 800665a:	f7fe be82 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800665e:	4b16      	ldr	r3, [pc, #88]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	0598      	lsls	r0, r3, #22
 8006664:	d503      	bpl.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8006666:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800666a:	f000 8201 	beq.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1768>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800666e:	4b12      	ldr	r3, [pc, #72]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006676:	f000 818f 	beq.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>
        frequency = 0U;
 800667a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800667e:	480f      	ldr	r0, [pc, #60]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006680:	bf18      	it	ne
 8006682:	2000      	movne	r0, #0
 8006684:	f7fe be6d 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	059b      	lsls	r3, r3, #22
 800668e:	d503      	bpl.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 8006690:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006694:	f000 81ef 	beq.w	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006698:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80066a0:	f000 817d 	beq.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x1696>
        frequency = 0U;
 80066a4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80066a8:	4804      	ldr	r0, [pc, #16]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80066aa:	bf18      	it	ne
 80066ac:	2000      	movne	r0, #0
 80066ae:	f7fe be58 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80066b2:	bf00      	nop
 80066b4:	03d09000 	.word	0x03d09000
 80066b8:	44020c00 	.word	0x44020c00
 80066bc:	007a1200 	.word	0x007a1200
 80066c0:	02dc6c00 	.word	0x02dc6c00
 80066c4:	00bb8000 	.word	0x00bb8000
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c8:	4bbe      	ldr	r3, [pc, #760]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	059a      	lsls	r2, r3, #22
 80066ce:	d503      	bpl.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80066d0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80066d4:	f000 81d2 	beq.w	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066d8:	4bba      	ldr	r3, [pc, #744]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80066e0:	f000 8154 	beq.w	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x1684>
        frequency = 0U;
 80066e4:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80066e8:	48b7      	ldr	r0, [pc, #732]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80066ea:	bf18      	it	ne
 80066ec:	2000      	movne	r0, #0
 80066ee:	f7fe be38 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066f2:	4bb4      	ldr	r3, [pc, #720]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	059b      	lsls	r3, r3, #22
 80066f8:	d503      	bpl.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x13fa>
 80066fa:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80066fe:	f000 81c0 	beq.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x177a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006702:	4bb0      	ldr	r3, [pc, #704]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800670a:	f000 8151 	beq.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
        frequency = 0U;
 800670e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006712:	48ad      	ldr	r0, [pc, #692]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006714:	bf18      	it	ne
 8006716:	2000      	movne	r0, #0
 8006718:	f7fe be23 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800671c:	4ba9      	ldr	r3, [pc, #676]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	059b      	lsls	r3, r3, #22
 8006722:	d503      	bpl.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 8006724:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006728:	f000 8193 	beq.w	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800672c:	4ba5      	ldr	r3, [pc, #660]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006734:	f000 816c 	beq.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
        frequency = 0U;
 8006738:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800673c:	48a2      	ldr	r0, [pc, #648]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800673e:	bf18      	it	ne
 8006740:	2000      	movne	r0, #0
 8006742:	f7fe be0e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006746:	a801      	add	r0, sp, #4
 8006748:	f7fe fc86 	bl	8005058 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800674c:	9803      	ldr	r0, [sp, #12]
 800674e:	f7fe be08 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006752:	4b9c      	ldr	r3, [pc, #624]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	059b      	lsls	r3, r3, #22
 8006758:	d503      	bpl.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800675a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800675e:	f000 817b 	beq.w	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1750>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006762:	4b98      	ldr	r3, [pc, #608]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800676a:	f000 811e 	beq.w	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
        frequency = 0U;
 800676e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006772:	4895      	ldr	r0, [pc, #596]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006774:	bf18      	it	ne
 8006776:	2000      	movne	r0, #0
 8006778:	f7fe bdf3 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800677c:	4b91      	ldr	r3, [pc, #580]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	0598      	lsls	r0, r3, #22
 8006782:	d503      	bpl.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x1484>
 8006784:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006788:	f000 8169 	beq.w	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1756>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800678c:	4b8d      	ldr	r3, [pc, #564]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006794:	f000 812a 	beq.w	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x16e4>
        frequency = 0U;
 8006798:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800679c:	488a      	ldr	r0, [pc, #552]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800679e:	bf18      	it	ne
 80067a0:	2000      	movne	r0, #0
 80067a2:	f7fe bdde 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067a6:	4b87      	ldr	r3, [pc, #540]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	059b      	lsls	r3, r3, #22
 80067ac:	d503      	bpl.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ae>
 80067ae:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80067b2:	f000 8157 	beq.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067b6:	4b83      	ldr	r3, [pc, #524]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067be:	f000 8109 	beq.w	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16cc>
        frequency = 0U;
 80067c2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80067c6:	4880      	ldr	r0, [pc, #512]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067c8:	bf18      	it	ne
 80067ca:	2000      	movne	r0, #0
 80067cc:	f7fe bdc9 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067d0:	4b7c      	ldr	r3, [pc, #496]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	0599      	lsls	r1, r3, #22
 80067d6:	d503      	bpl.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14d8>
 80067d8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80067dc:	f000 8145 	beq.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e0:	4b78      	ldr	r3, [pc, #480]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067e8:	f000 80fd 	beq.w	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
        frequency = 0U;
 80067ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80067f0:	4875      	ldr	r0, [pc, #468]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067f2:	bf18      	it	ne
 80067f4:	2000      	movne	r0, #0
 80067f6:	f7fe bdb4 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4873      	ldr	r0, [pc, #460]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80067fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006802:	40d8      	lsrs	r0, r3
 8006804:	f7fe bdad 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4870      	ldr	r0, [pc, #448]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800680c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006810:	40d8      	lsrs	r0, r3
 8006812:	f7fe bda6 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	486c      	ldr	r0, [pc, #432]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800681a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800681e:	40d8      	lsrs	r0, r3
 8006820:	f7fe bd9f 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4869      	ldr	r0, [pc, #420]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006828:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800682c:	40d8      	lsrs	r0, r3
 800682e:	f7fe bd98 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006832:	680b      	ldr	r3, [r1, #0]
 8006834:	4865      	ldr	r0, [pc, #404]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006836:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800683a:	40d8      	lsrs	r0, r3
 800683c:	f7fe bd91 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4862      	ldr	r0, [pc, #392]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006844:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006848:	40d8      	lsrs	r0, r3
 800684a:	f7fe bd8a 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSI_VALUE;
 800684e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8006852:	f7fe bd86 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	485c      	ldr	r0, [pc, #368]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800685a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800685e:	40d8      	lsrs	r0, r3
 8006860:	f7fe bd7f 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4859      	ldr	r0, [pc, #356]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006868:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800686c:	40d8      	lsrs	r0, r3
 800686e:	f7fe bd78 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006872:	680b      	ldr	r3, [r1, #0]
 8006874:	4855      	ldr	r0, [pc, #340]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006876:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800687a:	40d8      	lsrs	r0, r3
 800687c:	f7fe bd71 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4852      	ldr	r0, [pc, #328]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006884:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006888:	40d8      	lsrs	r0, r3
 800688a:	f7fe bd6a 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800688e:	680b      	ldr	r3, [r1, #0]
 8006890:	484e      	ldr	r0, [pc, #312]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006892:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006896:	40d8      	lsrs	r0, r3
 8006898:	f7fe bd63 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	484b      	ldr	r0, [pc, #300]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068a4:	40d8      	lsrs	r0, r3
 80068a6:	f7fe bd5c 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4847      	ldr	r0, [pc, #284]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068b2:	40d8      	lsrs	r0, r3
 80068b4:	f7fe bd55 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4844      	ldr	r0, [pc, #272]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068c0:	40d8      	lsrs	r0, r3
 80068c2:	f7fe bd4e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4840      	ldr	r0, [pc, #256]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068ce:	40d8      	lsrs	r0, r3
 80068d0:	f7fe bd47 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	483d      	ldr	r0, [pc, #244]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068dc:	40d8      	lsrs	r0, r3
 80068de:	f7fe bd40 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068e2:	680b      	ldr	r3, [r1, #0]
 80068e4:	4839      	ldr	r0, [pc, #228]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068ea:	40d8      	lsrs	r0, r3
 80068ec:	f7fe bd39 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4836      	ldr	r0, [pc, #216]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068f8:	40d8      	lsrs	r0, r3
 80068fa:	f7fe bd32 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4832      	ldr	r0, [pc, #200]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006902:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006906:	40d8      	lsrs	r0, r3
 8006908:	f7fe bd2b 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	482f      	ldr	r0, [pc, #188]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006910:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006914:	40d8      	lsrs	r0, r3
 8006916:	f7fe bd24 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800691a:	2000      	movs	r0, #0
 800691c:	f7fe bd21 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006920:	2000      	movs	r0, #0
 8006922:	f7fe bd1e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006926:	2000      	movs	r0, #0
 8006928:	f7fe bd1b 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe bd18 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSE_VALUE;
 8006932:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006936:	f7fe bd14 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe bd11 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006940:	2000      	movs	r0, #0
 8006942:	f7fe bd0e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006946:	2000      	movs	r0, #0
 8006948:	f7fe bd0b 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800694c:	2000      	movs	r0, #0
 800694e:	f7fe bd08 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006952:	2000      	movs	r0, #0
 8006954:	f7fe bd05 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe bd02 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800695e:	680b      	ldr	r3, [r1, #0]
 8006960:	481a      	ldr	r0, [pc, #104]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006962:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006966:	40d8      	lsrs	r0, r3
 8006968:	f7fe bcfb 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800696c:	2000      	movs	r0, #0
 800696e:	f7fe bcf8 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006972:	2000      	movs	r0, #0
 8006974:	f7fe bcf5 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4814      	ldr	r0, [pc, #80]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800697c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006980:	40d8      	lsrs	r0, r3
 8006982:	f7fe bcee 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe bceb 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe bce8 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe bce5 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe bce2 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe bcdf 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 80069a4:	480a      	ldr	r0, [pc, #40]	@ (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 80069a6:	f7fe bcdc 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe bcd9 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe bcd6 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 80069b6:	4806      	ldr	r0, [pc, #24]	@ (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 80069b8:	f7fe bcd3 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069bc:	4804      	ldr	r0, [pc, #16]	@ (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 80069be:	f7fe bcd0 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069c2:	bf00      	nop
 80069c4:	44020c00 	.word	0x44020c00
 80069c8:	007a1200 	.word	0x007a1200
 80069cc:	03d09000 	.word	0x03d09000
 80069d0:	003d0900 	.word	0x003d0900
        frequency = 0U;
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe bcc4 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 80069da:	482d      	ldr	r0, [pc, #180]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 80069dc:	f7fe bcc1 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069e0:	482b      	ldr	r0, [pc, #172]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 80069e2:	f7fe bcbe 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe bcbb 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe bcb8 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 80069f2:	4827      	ldr	r0, [pc, #156]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 80069f4:	f7fe bcb5 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069f8:	4825      	ldr	r0, [pc, #148]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 80069fa:	f7fe bcb2 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069fe:	4824      	ldr	r0, [pc, #144]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a00:	f7fe bcaf 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a04:	4822      	ldr	r0, [pc, #136]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a06:	f7fe bcac 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a0a:	4821      	ldr	r0, [pc, #132]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a0c:	f7fe bca9 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe bca6 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a16:	481e      	ldr	r0, [pc, #120]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a18:	f7fe bca3 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a1c:	481c      	ldr	r0, [pc, #112]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a1e:	f7fe bca0 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a22:	481b      	ldr	r0, [pc, #108]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a24:	f7fe bc9d 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a28:	4819      	ldr	r0, [pc, #100]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a2a:	f7fe bc9a 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = HSE_VALUE;
 8006a2e:	4819      	ldr	r0, [pc, #100]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x178c>)
 8006a30:	f7fe bc97 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a34:	4816      	ldr	r0, [pc, #88]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a36:	f7fe bc94 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a3a:	4815      	ldr	r0, [pc, #84]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a3c:	f7fe bc91 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a40:	4813      	ldr	r0, [pc, #76]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a42:	f7fe bc8e 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a46:	4812      	ldr	r0, [pc, #72]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a48:	f7fe bc8b 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a4c:	4810      	ldr	r0, [pc, #64]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a4e:	f7fe bc88 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a52:	480f      	ldr	r0, [pc, #60]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a54:	f7fe bc85 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a58:	480d      	ldr	r0, [pc, #52]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a5a:	f7fe bc82 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a5e:	480c      	ldr	r0, [pc, #48]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a60:	f7fe bc7f 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a64:	480a      	ldr	r0, [pc, #40]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a66:	f7fe bc7c 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a6a:	4809      	ldr	r0, [pc, #36]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a6c:	f7fe bc79 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a70:	4807      	ldr	r0, [pc, #28]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a72:	f7fe bc76 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a76:	4806      	ldr	r0, [pc, #24]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a78:	f7fe bc73 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a7c:	4804      	ldr	r0, [pc, #16]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a7e:	f7fe bc70 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a82:	4803      	ldr	r0, [pc, #12]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a84:	f7fe bc6d 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7fe bc6a 	b.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a8e:	bf00      	nop
 8006a90:	003d0900 	.word	0x003d0900
 8006a94:	007a1200 	.word	0x007a1200

08006a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a9c:	4616      	mov	r6, r2
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a9e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8006aa2:	2a20      	cmp	r2, #32
 8006aa4:	d16a      	bne.n	8006b7c <HAL_UART_Transmit+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	2900      	cmp	r1, #0
 8006aaa:	d03d      	beq.n	8006b28 <HAL_UART_Transmit+0x90>
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d03b      	beq.n	8006b28 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006ab0:	461f      	mov	r7, r3
 8006ab2:	6803      	ldr	r3, [r0, #0]
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	0612      	lsls	r2, r2, #24
 8006aba:	d462      	bmi.n	8006b82 <HAL_UART_Transmit+0xea>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006abc:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abe:	f04f 0800 	mov.w	r8, #0
 8006ac2:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aca:	f7fb f91f 	bl	8001d0c <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ace:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006ad0:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize  = Size;
 8006ad6:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ada:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ade:	d055      	beq.n	8006b8c <HAL_UART_Transmit+0xf4>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8006ae0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae4:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d055      	beq.n	8006b98 <HAL_UART_Transmit+0x100>
 8006aec:	1c7b      	adds	r3, r7, #1
 8006aee:	d12d      	bne.n	8006b4c <HAL_UART_Transmit+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af0:	69d3      	ldr	r3, [r2, #28]
 8006af2:	061f      	lsls	r7, r3, #24
 8006af4:	d5fc      	bpl.n	8006af0 <HAL_UART_Transmit+0x58>
      if (pdata8bits == NULL)
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	d03b      	beq.n	8006b72 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006afa:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006afe:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006b00:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b0c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1ec      	bne.n	8006af0 <HAL_UART_Transmit+0x58>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b16:	69d3      	ldr	r3, [r2, #28]
 8006b18:	0659      	lsls	r1, r3, #25
 8006b1a:	d5fc      	bpl.n	8006b16 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8006b1c:	2320      	movs	r3, #32
    return HAL_OK;
 8006b1e:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8006b20:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006b28:	2001      	movs	r0, #1
}
 8006b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	d045      	beq.n	8006bbe <HAL_UART_Transmit+0x126>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b36:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006b38:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b44:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	b33b      	cbz	r3, 8006b9c <HAL_UART_Transmit+0x104>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4c:	69d3      	ldr	r3, [r2, #28]
 8006b4e:	061e      	lsls	r6, r3, #24
 8006b50:	d4ed      	bmi.n	8006b2e <HAL_UART_Transmit+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b52:	f7fb f8db 	bl	8001d0c <HAL_GetTick>
 8006b56:	eba0 0309 	sub.w	r3, r0, r9
 8006b5a:	429f      	cmp	r7, r3
 8006b5c:	d303      	bcc.n	8006b66 <HAL_UART_Transmit+0xce>
 8006b5e:	b117      	cbz	r7, 8006b66 <HAL_UART_Transmit+0xce>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	6813      	ldr	r3, [r2, #0]
 8006b64:	e7f2      	b.n	8006b4c <HAL_UART_Transmit+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 8006b66:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8006b68:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8006b6a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b72:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	e7c0      	b.n	8006afe <HAL_UART_Transmit+0x66>
    return HAL_BUSY;
 8006b7c:	2002      	movs	r0, #2
}
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	e797      	b.n	8006abc <HAL_UART_Transmit+0x24>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1a6      	bne.n	8006ae0 <HAL_UART_Transmit+0x48>
      pdata16bits = (const uint16_t *) pData;
 8006b92:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006b94:	461d      	mov	r5, r3
 8006b96:	e7a3      	b.n	8006ae0 <HAL_UART_Transmit+0x48>
 8006b98:	1c78      	adds	r0, r7, #1
 8006b9a:	d0bc      	beq.n	8006b16 <HAL_UART_Transmit+0x7e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9c:	69d3      	ldr	r3, [r2, #28]
 8006b9e:	065b      	lsls	r3, r3, #25
 8006ba0:	d4bc      	bmi.n	8006b1c <HAL_UART_Transmit+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fb f8b3 	bl	8001d0c <HAL_GetTick>
 8006ba6:	eba0 0309 	sub.w	r3, r0, r9
 8006baa:	429f      	cmp	r7, r3
 8006bac:	d3db      	bcc.n	8006b66 <HAL_UART_Transmit+0xce>
 8006bae:	2f00      	cmp	r7, #0
 8006bb0:	d0d9      	beq.n	8006b66 <HAL_UART_Transmit+0xce>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	69d3      	ldr	r3, [r2, #28]
 8006bb8:	065b      	lsls	r3, r3, #25
 8006bba:	d5f2      	bpl.n	8006ba2 <HAL_UART_Transmit+0x10a>
 8006bbc:	e7ae      	b.n	8006b1c <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bbe:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	e7b6      	b.n	8006b36 <HAL_UART_Transmit+0x9e>

08006bc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bc8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8006bca:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bcc:	071a      	lsls	r2, r3, #28
 8006bce:	d506      	bpl.n	8006bde <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd0:	6801      	ldr	r1, [r0, #0]
 8006bd2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006bd4:	684a      	ldr	r2, [r1, #4]
 8006bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bda:	4322      	orrs	r2, r4
 8006bdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bde:	07dc      	lsls	r4, r3, #31
 8006be0:	d506      	bpl.n	8006bf0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006be2:	6801      	ldr	r1, [r0, #0]
 8006be4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006be6:	684a      	ldr	r2, [r1, #4]
 8006be8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006bec:	4322      	orrs	r2, r4
 8006bee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bf0:	0799      	lsls	r1, r3, #30
 8006bf2:	d506      	bpl.n	8006c02 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf4:	6801      	ldr	r1, [r0, #0]
 8006bf6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006bf8:	684a      	ldr	r2, [r1, #4]
 8006bfa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006bfe:	4322      	orrs	r2, r4
 8006c00:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c02:	075a      	lsls	r2, r3, #29
 8006c04:	d506      	bpl.n	8006c14 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c06:	6801      	ldr	r1, [r0, #0]
 8006c08:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006c0a:	684a      	ldr	r2, [r1, #4]
 8006c0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c10:	4322      	orrs	r2, r4
 8006c12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c14:	06dc      	lsls	r4, r3, #27
 8006c16:	d506      	bpl.n	8006c26 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c18:	6801      	ldr	r1, [r0, #0]
 8006c1a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006c1c:	688a      	ldr	r2, [r1, #8]
 8006c1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c22:	4322      	orrs	r2, r4
 8006c24:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c26:	0699      	lsls	r1, r3, #26
 8006c28:	d506      	bpl.n	8006c38 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c2a:	6801      	ldr	r1, [r0, #0]
 8006c2c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006c2e:	688a      	ldr	r2, [r1, #8]
 8006c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c34:	4322      	orrs	r2, r4
 8006c36:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c38:	065a      	lsls	r2, r3, #25
 8006c3a:	d50a      	bpl.n	8006c52 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c3c:	6801      	ldr	r1, [r0, #0]
 8006c3e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006c40:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c42:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c46:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006c4a:	ea42 0204 	orr.w	r2, r2, r4
 8006c4e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c50:	d00b      	beq.n	8006c6a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	d506      	bpl.n	8006c64 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c56:	6802      	ldr	r2, [r0, #0]
 8006c58:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006c5a:	6853      	ldr	r3, [r2, #4]
 8006c5c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6053      	str	r3, [r2, #4]
}
 8006c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c68:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c6a:	684a      	ldr	r2, [r1, #4]
 8006c6c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006c6e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006c72:	4322      	orrs	r2, r4
 8006c74:	604a      	str	r2, [r1, #4]
 8006c76:	e7ec      	b.n	8006c52 <UART_AdvFeatureConfig+0x8a>

08006c78 <UART_CheckIdleState>:
{
 8006c78:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7a:	2300      	movs	r3, #0
{
 8006c7c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006c82:	f7fb f843 	bl	8001d0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c86:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006c88:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	071b      	lsls	r3, r3, #28
 8006c8e:	d40f      	bmi.n	8006cb0 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c90:	6813      	ldr	r3, [r2, #0]
 8006c92:	0759      	lsls	r1, r3, #29
 8006c94:	d431      	bmi.n	8006cfa <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006c98:	2220      	movs	r2, #32
  return HAL_OK;
 8006c9a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca6:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb0:	69d3      	ldr	r3, [r2, #28]
 8006cb2:	0298      	lsls	r0, r3, #10
 8006cb4:	d4ec      	bmi.n	8006c90 <UART_CheckIdleState+0x18>
 8006cb6:	e00c      	b.n	8006cd2 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	0749      	lsls	r1, r1, #29
 8006cbe:	d505      	bpl.n	8006ccc <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cc0:	69d9      	ldr	r1, [r3, #28]
 8006cc2:	0708      	lsls	r0, r1, #28
 8006cc4:	d44a      	bmi.n	8006d5c <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	0509      	lsls	r1, r1, #20
 8006cca:	d475      	bmi.n	8006db8 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	0298      	lsls	r0, r3, #10
 8006cd0:	d4de      	bmi.n	8006c90 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd2:	f7fb f81b 	bl	8001d0c <HAL_GetTick>
 8006cd6:	1b43      	subs	r3, r0, r5
 8006cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cdc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cde:	d3eb      	bcc.n	8006cb8 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	e843 2100 	strex	r1, r2, [r3]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d1f7      	bne.n	8006ce0 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8006cf6:	2003      	movs	r0, #3
 8006cf8:	e7d6      	b.n	8006ca8 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfa:	69d3      	ldr	r3, [r2, #28]
 8006cfc:	025b      	lsls	r3, r3, #9
 8006cfe:	d4ca      	bmi.n	8006c96 <UART_CheckIdleState+0x1e>
 8006d00:	e00d      	b.n	8006d1e <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	0750      	lsls	r0, r2, #29
 8006d06:	d507      	bpl.n	8006d18 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d08:	69da      	ldr	r2, [r3, #28]
 8006d0a:	0711      	lsls	r1, r2, #28
 8006d0c:	f100 8082 	bmi.w	8006e14 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	0512      	lsls	r2, r2, #20
 8006d14:	f100 80ac 	bmi.w	8006e70 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	025b      	lsls	r3, r3, #9
 8006d1c:	d4bb      	bmi.n	8006c96 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1e:	f7fa fff5 	bl	8001d0c <HAL_GetTick>
 8006d22:	1b43      	subs	r3, r0, r5
 8006d24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	d3ea      	bcc.n	8006d02 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d30:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	e843 2100 	strex	r1, r2, [r3]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d1f7      	bne.n	8006d2c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	f103 0208 	add.w	r2, r3, #8
 8006d40:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d44:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	f103 0008 	add.w	r0, r3, #8
 8006d4c:	e840 2100 	strex	r1, r2, [r0]
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d1f3      	bne.n	8006d3c <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8006d54:	2320      	movs	r3, #32
 8006d56:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8006d5a:	e7cc      	b.n	8006cf6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d64:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	e843 2100 	strex	r1, r2, [r3]
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d1f7      	bne.n	8006d60 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d70:	4856      	ldr	r0, [pc, #344]	@ (8006ecc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	f103 0208 	add.w	r2, r3, #8
 8006d76:	e852 2f00 	ldrex	r2, [r2]
 8006d7a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	f103 0508 	add.w	r5, r3, #8
 8006d80:	e845 2100 	strex	r1, r2, [r5]
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d1f4      	bne.n	8006d72 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006d8a:	2a01      	cmp	r2, #1
 8006d8c:	d00b      	beq.n	8006da6 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d90:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d92:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006d94:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d98:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006d9c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006da0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006da4:	e79c      	b.n	8006ce0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006daa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	e843 2100 	strex	r1, r2, [r3]
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d1f7      	bne.n	8006da6 <UART_CheckIdleState+0x12e>
 8006db6:	e7ea      	b.n	8006d8e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dbc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dc2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	e843 2100 	strex	r1, r2, [r3]
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d1f7      	bne.n	8006dbe <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dce:	483f      	ldr	r0, [pc, #252]	@ (8006ecc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	f103 0208 	add.w	r2, r3, #8
 8006dd4:	e852 2f00 	ldrex	r2, [r2]
 8006dd8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	f103 0508 	add.w	r5, r3, #8
 8006dde:	e845 2100 	strex	r1, r2, [r5]
 8006de2:	2900      	cmp	r1, #0
 8006de4:	d1f4      	bne.n	8006dd0 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006de8:	2a01      	cmp	r2, #1
 8006dea:	d00a      	beq.n	8006e02 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dec:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006dee:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006df0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006df2:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006df6:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dfc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006e00:	e76e      	b.n	8006ce0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e06:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	e843 2100 	strex	r1, r2, [r3]
 8006e0e:	2900      	cmp	r1, #0
 8006e10:	d1f7      	bne.n	8006e02 <UART_CheckIdleState+0x18a>
 8006e12:	e7eb      	b.n	8006dec <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e14:	2208      	movs	r2, #8
 8006e16:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e1c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	e843 2100 	strex	r1, r2, [r3]
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d1f7      	bne.n	8006e18 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e28:	4828      	ldr	r0, [pc, #160]	@ (8006ecc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	f103 0208 	add.w	r2, r3, #8
 8006e2e:	e852 2f00 	ldrex	r2, [r2]
 8006e32:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	f103 0508 	add.w	r5, r3, #8
 8006e38:	e845 2100 	strex	r1, r2, [r5]
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d1f4      	bne.n	8006e2a <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006e42:	2a01      	cmp	r2, #1
 8006e44:	d00b      	beq.n	8006e5e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e48:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e4a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006e50:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e52:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006e54:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e58:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006e5c:	e766      	b.n	8006d2c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	e843 2100 	strex	r1, r2, [r3]
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d1f7      	bne.n	8006e5e <UART_CheckIdleState+0x1e6>
 8006e6e:	e7ea      	b.n	8006e46 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e74:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e7a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	e843 2100 	strex	r1, r2, [r3]
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d1f7      	bne.n	8006e76 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e86:	4811      	ldr	r0, [pc, #68]	@ (8006ecc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f103 0208 	add.w	r2, r3, #8
 8006e8c:	e852 2f00 	ldrex	r2, [r2]
 8006e90:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	f103 0508 	add.w	r5, r3, #8
 8006e96:	e845 2100 	strex	r1, r2, [r5]
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	d1f4      	bne.n	8006e88 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006ea0:	2a01      	cmp	r2, #1
 8006ea2:	d00a      	beq.n	8006eba <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006ea8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006eae:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eb4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006eb8:	e738      	b.n	8006d2c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	e843 2100 	strex	r1, r2, [r3]
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d1f7      	bne.n	8006eba <UART_CheckIdleState+0x242>
 8006eca:	e7eb      	b.n	8006ea4 <UART_CheckIdleState+0x22c>
 8006ecc:	effffffe 	.word	0xeffffffe

08006ed0 <HAL_UART_Init>:
  if (huart == NULL)
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f000 80ef 	beq.w	80070b4 <HAL_UART_Init+0x1e4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006eda:	b570      	push	{r4, r5, r6, lr}
 8006edc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d070      	beq.n	8006fc4 <HAL_UART_Init+0xf4>
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8006ee4:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006eea:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 8006eee:	f023 0301 	bic.w	r3, r3, #1
 8006ef2:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	d161      	bne.n	8006fbc <HAL_UART_Init+0xec>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006efc:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006efe:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f00:	4313      	orrs	r3, r2
 8006f02:	430b      	orrs	r3, r1
 8006f04:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f06:	49a5      	ldr	r1, [pc, #660]	@ (800719c <HAL_UART_Init+0x2cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f08:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f0a:	4001      	ands	r1, r0
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f10:	686b      	ldr	r3, [r5, #4]
 8006f12:	68e1      	ldr	r1, [r4, #12]
 8006f14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006f18:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f1a:	49a1      	ldr	r1, [pc, #644]	@ (80071a0 <HAL_UART_Init+0x2d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1c:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f1e:	428d      	cmp	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f20:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f22:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f24:	f000 812a 	beq.w	800717c <HAL_UART_Init+0x2ac>
 8006f28:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006f2c:	428d      	cmp	r5, r1
 8006f2e:	f000 80c6 	beq.w	80070be <HAL_UART_Init+0x1ee>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f32:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006f34:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f36:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8006f3a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006f3e:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f40:	430b      	orrs	r3, r1
 8006f42:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f44:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f46:	4997      	ldr	r1, [pc, #604]	@ (80071a4 <HAL_UART_Init+0x2d4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f48:	f023 030f 	bic.w	r3, r3, #15
 8006f4c:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f4e:	428d      	cmp	r5, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f50:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f52:	d03c      	beq.n	8006fce <HAL_UART_Init+0xfe>
 8006f54:	4b94      	ldr	r3, [pc, #592]	@ (80071a8 <HAL_UART_Init+0x2d8>)
 8006f56:	429d      	cmp	r5, r3
 8006f58:	d072      	beq.n	8007040 <HAL_UART_Init+0x170>
 8006f5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	f000 80a5 	beq.w	80070ae <HAL_UART_Init+0x1de>
 8006f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	f000 8095 	beq.w	8007098 <HAL_UART_Init+0x1c8>
 8006f6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f72:	429d      	cmp	r5, r3
 8006f74:	f000 80a0 	beq.w	80070b8 <HAL_UART_Init+0x1e8>
 8006f78:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8006f7c:	429d      	cmp	r5, r3
 8006f7e:	f000 80e7 	beq.w	8007150 <HAL_UART_Init+0x280>
 8006f82:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8006f86:	429d      	cmp	r5, r3
 8006f88:	f000 80e5 	beq.w	8007156 <HAL_UART_Init+0x286>
 8006f8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f90:	429d      	cmp	r5, r3
 8006f92:	f000 80d3 	beq.w	800713c <HAL_UART_Init+0x26c>
 8006f96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	f000 80de 	beq.w	800715c <HAL_UART_Init+0x28c>
 8006fa0:	f5a3 53c0 	sub.w	r3, r3, #6144	@ 0x1800
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	f000 80dd 	beq.w	8007164 <HAL_UART_Init+0x294>
 8006faa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	f040 80dc 	bne.w	800716c <HAL_UART_Init+0x29c>
 8006fb4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006fb8:	2100      	movs	r1, #0
 8006fba:	e00a      	b.n	8006fd2 <HAL_UART_Init+0x102>
    UART_AdvFeatureConfig(huart);
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f7ff fe03 	bl	8006bc8 <UART_AdvFeatureConfig>
 8006fc2:	e799      	b.n	8006ef8 <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8006fc4:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006fc8:	f7fa fd1a 	bl	8001a00 <HAL_UART_MspInit>
 8006fcc:	e789      	b.n	8006ee2 <HAL_UART_Init+0x12>
 8006fce:	2001      	movs	r0, #1
 8006fd0:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fd2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006fd6:	d03a      	beq.n	800704e <HAL_UART_Init+0x17e>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006fd8:	f7fe f996 	bl	8005308 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8006fdc:	b1c8      	cbz	r0, 8007012 <HAL_UART_Init+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fde:	4a73      	ldr	r2, [pc, #460]	@ (80071ac <HAL_UART_Init+0x2dc>)
 8006fe0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fec:	fbb0 f0f1 	udiv	r0, r0, r1
 8006ff0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006ff4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff8:	f1a0 0310 	sub.w	r3, r0, #16
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d84e      	bhi.n	800709e <HAL_UART_Init+0x1ce>
  huart->RxISR = NULL;
 8007000:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007002:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 800700a:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800700c:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800700e:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ret;
 8007010:	e005      	b.n	800701e <HAL_UART_Init+0x14e>
  huart->NbRxDataToProcess = 1;
 8007012:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 8007016:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
        huart->Instance->BRR = brrtemp;
 800701a:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800701c:	66a3      	str	r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800701e:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 8007020:	4620      	mov	r0, r4
}
 8007022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007026:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800702a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800702c:	6893      	ldr	r3, [r2, #8]
 800702e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007032:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007034:	6813      	ldr	r3, [r2, #0]
 8007036:	f043 0301 	orr.w	r3, r3, #1
 800703a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800703c:	f7ff be1c 	b.w	8006c78 <UART_CheckIdleState>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007040:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007044:	f04f 0002 	mov.w	r0, #2
 8007048:	f04f 0100 	mov.w	r1, #0
 800704c:	d1c4      	bne.n	8006fd8 <HAL_UART_Init+0x108>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800704e:	f7fe f95b 	bl	8005308 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8007052:	2800      	cmp	r0, #0
 8007054:	d0dd      	beq.n	8007012 <HAL_UART_Init+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007056:	4b55      	ldr	r3, [pc, #340]	@ (80071ac <HAL_UART_Init+0x2dc>)
 8007058:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800705a:	6862      	ldr	r2, [r4, #4]
 800705c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007060:	0853      	lsrs	r3, r2, #1
 8007062:	fbb0 f0f1 	udiv	r0, r0, r1
 8007066:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800706a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706e:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 8007072:	f1a3 0210 	sub.w	r2, r3, #16
 8007076:	428a      	cmp	r2, r1
 8007078:	d811      	bhi.n	800709e <HAL_UART_Init+0x1ce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800707a:	f023 010f 	bic.w	r1, r3, #15
 800707e:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007080:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007084:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 8007086:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800708a:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8007090:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007092:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007094:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 8007096:	e7c2      	b.n	800701e <HAL_UART_Init+0x14e>
 8007098:	2008      	movs	r0, #8
 800709a:	2100      	movs	r1, #0
 800709c:	e799      	b.n	8006fd2 <HAL_UART_Init+0x102>
  huart->RxISR = NULL;
 800709e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80070a0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 80070a4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80070a6:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80070a8:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80070aa:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
 80070ae:	2004      	movs	r0, #4
 80070b0:	2100      	movs	r1, #0
 80070b2:	e78e      	b.n	8006fd2 <HAL_UART_Init+0x102>
 80070b4:	2001      	movs	r0, #1
 80070b6:	4770      	bx	lr
 80070b8:	2010      	movs	r0, #16
 80070ba:	2100      	movs	r1, #0
 80070bc:	e789      	b.n	8006fd2 <HAL_UART_Init+0x102>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070be:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070c0:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c2:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 80070c6:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80070ca:	431a      	orrs	r2, r3
 80070cc:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80070d0:	f023 030f 	bic.w	r3, r3, #15
 80070d4:	4303      	orrs	r3, r0
 80070d6:	2000      	movs	r0, #0
 80070d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80070da:	f7fe f915 	bl	8005308 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80070de:	b380      	cbz	r0, 8007142 <HAL_UART_Init+0x272>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80070e2:	4a32      	ldr	r2, [pc, #200]	@ (80071ac <HAL_UART_Init+0x2dc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070e4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070e6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070ee:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070f2:	428b      	cmp	r3, r1
 80070f4:	d3d3      	bcc.n	800709e <HAL_UART_Init+0x1ce>
 80070f6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80070fa:	d8d0      	bhi.n	800709e <HAL_UART_Init+0x1ce>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fc:	2600      	movs	r6, #0
 80070fe:	4633      	mov	r3, r6
 8007100:	4631      	mov	r1, r6
 8007102:	f7f9 fd61 	bl	8000bc8 <__aeabi_uldivmod>
 8007106:	0209      	lsls	r1, r1, #8
 8007108:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800710c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007110:	0200      	lsls	r0, r0, #8
 8007112:	eb10 000c 	adds.w	r0, r0, ip
 8007116:	462a      	mov	r2, r5
 8007118:	4633      	mov	r3, r6
 800711a:	f141 0100 	adc.w	r1, r1, #0
 800711e:	f7f9 fd53 	bl	8000bc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007122:	4b23      	ldr	r3, [pc, #140]	@ (80071b0 <HAL_UART_Init+0x2e0>)
 8007124:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007128:	429a      	cmp	r2, r3
 800712a:	d8b8      	bhi.n	800709e <HAL_UART_Init+0x1ce>
  huart->NbRxDataToProcess = 1;
 800712c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8007134:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007138:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 800713a:	e770      	b.n	800701e <HAL_UART_Init+0x14e>
 800713c:	2080      	movs	r0, #128	@ 0x80
 800713e:	2100      	movs	r1, #0
 8007140:	e747      	b.n	8006fd2 <HAL_UART_Init+0x102>
  huart->NbRxDataToProcess = 1;
 8007142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  huart->TxISR = NULL;
 8007146:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
          huart->Instance->BRR = usartdiv;
 800714a:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800714c:	66a1      	str	r1, [r4, #104]	@ 0x68
  return ret;
 800714e:	e766      	b.n	800701e <HAL_UART_Init+0x14e>
 8007150:	2020      	movs	r0, #32
 8007152:	2100      	movs	r1, #0
 8007154:	e73d      	b.n	8006fd2 <HAL_UART_Init+0x102>
 8007156:	2040      	movs	r0, #64	@ 0x40
 8007158:	2100      	movs	r1, #0
 800715a:	e73a      	b.n	8006fd2 <HAL_UART_Init+0x102>
 800715c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007160:	2100      	movs	r1, #0
 8007162:	e736      	b.n	8006fd2 <HAL_UART_Init+0x102>
 8007164:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007168:	2100      	movs	r1, #0
 800716a:	e732      	b.n	8006fd2 <HAL_UART_Init+0x102>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800716c:	4811      	ldr	r0, [pc, #68]	@ (80071b4 <HAL_UART_Init+0x2e4>)
 800716e:	2100      	movs	r1, #0
 8007170:	1a28      	subs	r0, r5, r0
 8007172:	fab0 f080 	clz	r0, r0
 8007176:	0940      	lsrs	r0, r0, #5
 8007178:	02c0      	lsls	r0, r0, #11
 800717a:	e72a      	b.n	8006fd2 <HAL_UART_Init+0x102>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800717c:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800717e:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007180:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8007184:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8007188:	431a      	orrs	r2, r3
 800718a:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800718c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800718e:	f023 030f 	bic.w	r3, r3, #15
 8007192:	4303      	orrs	r3, r0
 8007194:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8007196:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800719a:	e79e      	b.n	80070da <HAL_UART_Init+0x20a>
 800719c:	cfff69f3 	.word	0xcfff69f3
 80071a0:	44002400 	.word	0x44002400
 80071a4:	40013800 	.word	0x40013800
 80071a8:	40004400 	.word	0x40004400
 80071ac:	0800f8dc 	.word	0x0800f8dc
 80071b0:	000ffcff 	.word	0x000ffcff
 80071b4:	40008400 	.word	0x40008400

080071b8 <HAL_UARTEx_EnableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80071bc:	2a01      	cmp	r2, #1
 80071be:	d032      	beq.n	8007226 <HAL_UARTEx_EnableFifoMode+0x6e>

  huart->gState = HAL_UART_STATE_BUSY;
 80071c0:	4603      	mov	r3, r0
 80071c2:	2124      	movs	r1, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80071c4:	f04f 5c00 	mov.w	ip, #536870912	@ 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071c8:	6802      	ldr	r2, [r0, #0]
{
 80071ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80071cc:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80071d2:	6814      	ldr	r4, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071d4:	ea41 010c 	orr.w	r1, r1, ip
  __HAL_UART_DISABLE(huart);
 80071d8:	f024 0401 	bic.w	r4, r4, #1
 80071dc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80071de:	f8c3 c064 	str.w	ip, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071e2:	6011      	str	r1, [r2, #0]
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071e4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071e6:	6892      	ldr	r2, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071e8:	4e10      	ldr	r6, [pc, #64]	@ (800722c <HAL_UARTEx_EnableFifoMode+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071ea:	ea4f 7e52 	mov.w	lr, r2, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071ee:	f3c1 6c42 	ubfx	ip, r1, #25, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071f2:	4d0f      	ldr	r5, [pc, #60]	@ (8007230 <HAL_UARTEx_EnableFifoMode+0x78>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071f4:	f816 100e 	ldrb.w	r1, [r6, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071f8:	f816 200c 	ldrb.w	r2, [r6, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 80071fc:	f815 400c 	ldrb.w	r4, [r5, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007200:	f815 600e 	ldrb.w	r6, [r5, lr]
  __HAL_UNLOCK(huart);
 8007204:	2000      	movs	r0, #0
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007206:	00c9      	lsls	r1, r1, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007208:	00d2      	lsls	r2, r2, #3
  huart->gState = HAL_UART_STATE_READY;
 800720a:	2720      	movs	r7, #32
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800720c:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007210:	fbb2 f2f4 	udiv	r2, r2, r4
  __HAL_UNLOCK(huart);
 8007214:	f883 0084 	strb.w	r0, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8007218:	f8c3 7088 	str.w	r7, [r3, #136]	@ 0x88
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800721c:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007224:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8007226:	2002      	movs	r0, #2
}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	0800f8fc 	.word	0x0800f8fc
 8007230:	0800f8f4 	.word	0x0800f8f4

08007234 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007234:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007238:	2a01      	cmp	r2, #1
 800723a:	d017      	beq.n	800726c <HAL_UARTEx_DisableFifoMode+0x38>
 800723c:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800723e:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007240:	2100      	movs	r1, #0
{
 8007242:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_READY;
 8007244:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007246:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007248:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800724c:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800724e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007250:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007254:	f024 0401 	bic.w	r4, r4, #1
 8007258:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800725a:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800725c:	6010      	str	r0, [r2, #0]
  __HAL_UNLOCK(huart);
 800725e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007262:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007264:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007268:	bc30      	pop	{r4, r5}
 800726a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800726c:	2002      	movs	r0, #2
}
 800726e:	4770      	bx	lr

08007270 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8007270:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007274:	2a01      	cmp	r2, #1
 8007276:	d037      	beq.n	80072e8 <HAL_UARTEx_SetTxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007278:	4603      	mov	r3, r0
 800727a:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800727c:	681a      	ldr	r2, [r3, #0]
{
 800727e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007284:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007286:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007288:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800728a:	f020 0001 	bic.w	r0, r0, #1
 800728e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007290:	6890      	ldr	r0, [r2, #8]
 8007292:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007296:	4301      	orrs	r1, r0
 8007298:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800729a:	b315      	cbz	r5, 80072e2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800729c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800729e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072a4:	4911      	ldr	r1, [pc, #68]	@ (80072ec <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80072a6:	4d12      	ldr	r5, [pc, #72]	@ (80072f0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072a8:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072b0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80072b4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80072b8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072c4:	fbb1 f1f5 	udiv	r1, r1, r5
 80072c8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80072cc:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80072ce:	2520      	movs	r5, #32
 80072d0:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072d4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80072d6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80072da:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80072dc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80072e0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80072e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80072e4:	4608      	mov	r0, r1
 80072e6:	e7ef      	b.n	80072c8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80072e8:	2002      	movs	r0, #2
}
 80072ea:	4770      	bx	lr
 80072ec:	0800f8fc 	.word	0x0800f8fc
 80072f0:	0800f8f4 	.word	0x0800f8f4

080072f4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80072f4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80072f8:	2a01      	cmp	r2, #1
 80072fa:	d037      	beq.n	800736c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	4603      	mov	r3, r0
 80072fe:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007300:	681a      	ldr	r2, [r3, #0]
{
 8007302:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007304:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007308:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800730a:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800730c:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800730e:	f020 0001 	bic.w	r0, r0, #1
 8007312:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007314:	6890      	ldr	r0, [r2, #8]
 8007316:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800731a:	4301      	orrs	r1, r0
 800731c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800731e:	b315      	cbz	r5, 8007366 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007320:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007322:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007324:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007328:	4911      	ldr	r1, [pc, #68]	@ (8007370 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800732a:	4d12      	ldr	r5, [pc, #72]	@ (8007374 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800732c:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007330:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007334:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007338:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800733c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007340:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007342:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007344:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007348:	fbb1 f1f5 	udiv	r1, r1, r5
 800734c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007350:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007352:	2520      	movs	r5, #32
 8007354:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007358:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800735a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800735e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007360:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007364:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007366:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007368:	4608      	mov	r0, r1
 800736a:	e7ef      	b.n	800734c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800736c:	2002      	movs	r0, #2
}
 800736e:	4770      	bx	lr
 8007370:	0800f8fc 	.word	0x0800f8fc
 8007374:	0800f8f4 	.word	0x0800f8f4

08007378 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8007378:	b530      	push	{r4, r5, lr}
 800737a:	460d      	mov	r5, r1
 800737c:	b0a3      	sub	sp, #140	@ 0x8c
 800737e:	4604      	mov	r4, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8007380:	f002 fd9a 	bl	8009eb8 <ai_platform_context_acquire>

  if (report && net_ctx)
 8007384:	2d00      	cmp	r5, #0
 8007386:	d03a      	beq.n	80073fe <ai_network_get_info+0x86>
 8007388:	2800      	cmp	r0, #0
 800738a:	d034      	beq.n	80073f6 <ai_network_get_info+0x7e>
  {
    ai_network_report r = {
 800738c:	2278      	movs	r2, #120	@ 0x78
 800738e:	2100      	movs	r1, #0
 8007390:	a804      	add	r0, sp, #16
 8007392:	f006 f8fc 	bl	800d58e <memset>
 8007396:	491e      	ldr	r1, [pc, #120]	@ (8007410 <ai_network_get_info+0x98>)
 8007398:	4a1e      	ldr	r2, [pc, #120]	@ (8007414 <ai_network_get_info+0x9c>)
 800739a:	4b1f      	ldr	r3, [pc, #124]	@ (8007418 <ai_network_get_info+0xa0>)
 800739c:	481f      	ldr	r0, [pc, #124]	@ (800741c <ai_network_get_info+0xa4>)
 800739e:	e9cd 1200 	strd	r1, r2, [sp]
 80073a2:	9302      	str	r3, [sp, #8]
 80073a4:	9003      	str	r0, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80073a6:	f002 fd3b 	bl	8009e20 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80073aa:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 80073ac:	f002 fd3c 	bl	8009e28 <ai_platform_runtime_get_version>
    ai_network_report r = {
 80073b0:	f240 2302 	movw	r3, #514	@ 0x202
 80073b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007420 <ai_network_get_info+0xa8>)
 80073b6:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 80073ba:	e9cd 0205 	strd	r0, r2, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80073be:	f002 fd4b 	bl	8009e58 <ai_platform_api_get_version>
 80073c2:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80073c4:	f002 fd60 	bl	8009e88 <ai_platform_interface_api_get_version>
 80073c8:	4603      	mov	r3, r0
    ai_network_report r = {
 80073ca:	a10f      	add	r1, pc, #60	@ (adr r1, 8007408 <ai_network_get_info+0x90>)
 80073cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d0:	4a14      	ldr	r2, [pc, #80]	@ (8007424 <ai_network_get_info+0xac>)
 80073d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x8b0009c2,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80073d6:	4620      	mov	r0, r4
 80073d8:	4669      	mov	r1, sp
    ai_network_report r = {
 80073da:	9220      	str	r2, [sp, #128]	@ 0x80
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80073dc:	930a      	str	r3, [sp, #40]	@ 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80073de:	f002 fe6d 	bl	800a0bc <ai_platform_api_get_network_report>
 80073e2:	4604      	mov	r4, r0
 80073e4:	b140      	cbz	r0, 80073f8 <ai_network_get_info+0x80>

    *report = r;
 80073e6:	2288      	movs	r2, #136	@ 0x88
 80073e8:	4669      	mov	r1, sp
 80073ea:	4628      	mov	r0, r5
 80073ec:	f006 f9cb 	bl	800d786 <memcpy>
    return true;
  }
  return false;
}
 80073f0:	4620      	mov	r0, r4
 80073f2:	b023      	add	sp, #140	@ 0x8c
 80073f4:	bd30      	pop	{r4, r5, pc}
  return false;
 80073f6:	4604      	mov	r4, r0
}
 80073f8:	4620      	mov	r0, r4
 80073fa:	b023      	add	sp, #140	@ 0x8c
 80073fc:	bd30      	pop	{r4, r5, pc}
  return false;
 80073fe:	462c      	mov	r4, r5
}
 8007400:	4620      	mov	r0, r4
 8007402:	b023      	add	sp, #140	@ 0x8c
 8007404:	bd30      	pop	{r4, r5, pc}
 8007406:	bf00      	nop
 8007408:	003d505b 	.word	0x003d505b
 800740c:	00000000 	.word	0x00000000
 8007410:	0800f854 	.word	0x0800f854
 8007414:	0800f85c 	.word	0x0800f85c
 8007418:	0800f880 	.word	0x0800f880
 800741c:	0800f89c 	.word	0x0800f89c
 8007420:	0800f7c4 	.word	0x0800f7c4
 8007424:	8b0009c2 	.word	0x8b0009c2

08007428 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8007428:	f002 bd4e 	b.w	8009ec8 <ai_platform_network_get_error>

0800742c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800742c:	b108      	cbz	r0, 8007432 <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 800742e:	f002 bd5d 	b.w	8009eec <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007432:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <ai_network_inputs_get+0x14>)
 8007434:	4a03      	ldr	r2, [pc, #12]	@ (8007444 <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007436:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007438:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 800743a:	f002 bd57 	b.w	8009eec <ai_platform_inputs_get>
 800743e:	bf00      	nop
 8007440:	2000000c 	.word	0x2000000c
 8007444:	a1c00100 	.word	0xa1c00100

08007448 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8007448:	b108      	cbz	r0, 800744e <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 800744a:	f002 bdc5 	b.w	8009fd8 <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800744e:	4b03      	ldr	r3, [pc, #12]	@ (800745c <ai_network_outputs_get+0x14>)
 8007450:	4a03      	ldr	r2, [pc, #12]	@ (8007460 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007452:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007454:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 8007456:	f002 bdbf 	b.w	8009fd8 <ai_platform_outputs_get>
 800745a:	bf00      	nop
 800745c:	2000000c 	.word	0x2000000c
 8007460:	a1c00100 	.word	0xa1c00100

08007464 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	4683      	mov	fp, r0
 800746a:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800746c:	f003 f814 	bl	800a498 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8007470:	4604      	mov	r4, r0
 8007472:	2800      	cmp	r0, #0
 8007474:	f000 80d4 	beq.w	8007620 <ai_network_init+0x1bc>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8007478:	4e70      	ldr	r6, [pc, #448]	@ (800763c <ai_network_init+0x1d8>)
 800747a:	462a      	mov	r2, r5
 800747c:	2101      	movs	r1, #1
 800747e:	4630      	mov	r0, r6
 8007480:	f002 fc0a 	bl	8009c98 <ai_platform_get_weights_map>
 8007484:	4680      	mov	r8, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	f000 80cc 	beq.w	8007624 <ai_network_init+0x1c0>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800748c:	f8df 9204 	ldr.w	r9, [pc, #516]	@ 8007694 <ai_network_init+0x230>
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8007490:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007492:	f8d9 2000 	ldr.w	r2, [r9]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007496:	4e6a      	ldr	r6, [pc, #424]	@ (8007640 <ai_network_init+0x1dc>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007498:	486a      	ldr	r0, [pc, #424]	@ (8007644 <ai_network_init+0x1e0>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800749a:	f042 4a80 	orr.w	sl, r2, #1073741824	@ 0x40000000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800749e:	6832      	ldr	r2, [r6, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80074a0:	4969      	ldr	r1, [pc, #420]	@ (8007648 <ai_network_init+0x1e4>)
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80074a2:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80074a6:	f8c9 a000 	str.w	sl, [r9]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80074aa:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80074ae:	6802      	ldr	r2, [r0, #0]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80074b0:	f8c6 9000 	str.w	r9, [r6]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80074b4:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80074b8:	680a      	ldr	r2, [r1, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80074ba:	f8c0 9000 	str.w	r9, [r0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80074be:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80074c2:	4a62      	ldr	r2, [pc, #392]	@ (800764c <ai_network_init+0x1e8>)
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80074c4:	4f62      	ldr	r7, [pc, #392]	@ (8007650 <ai_network_init+0x1ec>)
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80074c6:	6812      	ldr	r2, [r2, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80074c8:	f8c1 9000 	str.w	r9, [r1]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80074cc:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
 80074d0:	4a5e      	ldr	r2, [pc, #376]	@ (800764c <ai_network_init+0x1e8>)
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80074d2:	f8df c1c4 	ldr.w	ip, [pc, #452]	@ 8007698 <ai_network_init+0x234>
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80074d6:	f8c2 9000 	str.w	r9, [r2]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80074da:	683a      	ldr	r2, [r7, #0]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80074dc:	f8df e1bc 	ldr.w	lr, [pc, #444]	@ 800769c <ai_network_init+0x238>
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80074e0:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80074e4:	f8dc 2000 	ldr.w	r2, [ip]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80074e8:	f8c7 9000 	str.w	r9, [r7]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80074ec:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80074f0:	f8de 2000 	ldr.w	r2, [lr]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80074f4:	f8cc 9000 	str.w	r9, [ip]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80074f8:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 320);
 80074fc:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8007500:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 384);
 8007504:	f503 76c0 	add.w	r6, r3, #384	@ 0x180
 8007508:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 10752);
 800750c:	4a4f      	ldr	r2, [pc, #316]	@ (800764c <ai_network_init+0x1e8>)
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 10624);
 800750e:	f503 5026 	add.w	r0, r3, #10624	@ 0x2980
 8007512:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 10752);
 8007516:	f503 5128 	add.w	r1, r3, #10752	@ 0x2a00
 800751a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 51712);
 800751e:	f503 424a 	add.w	r2, r3, #51712	@ 0xca00
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8007522:	f8df a17c 	ldr.w	sl, [pc, #380]	@ 80076a0 <ai_network_init+0x23c>
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 51712);
 8007526:	e9c7 2202 	strd	r2, r2, [r7, #8]
    gemm_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 51968);
 800752a:	f503 424b 	add.w	r2, r3, #51968	@ 0xcb00
 800752e:	e9cc 2202 	strd	r2, r2, [ip, #8]
    gemm_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 60160);
 8007532:	f503 426b 	add.w	r2, r3, #60160	@ 0xeb00
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8007536:	f8ce 9000 	str.w	r9, [lr]
    gemm_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 60160);
 800753a:	e9ce 2202 	strd	r2, r2, [lr, #8]
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800753e:	f8da 2000 	ldr.w	r2, [sl]
    gemm_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8007542:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 80076a4 <ai_network_init+0x240>
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8007546:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800754a:	f8ca 2000 	str.w	r2, [sl]
    gemm_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800754e:	f8d9 2000 	ldr.w	r2, [r9]
 8007552:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007556:	f8c9 2000 	str.w	r2, [r9]
    gemm_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 60288);
 800755a:	f503 426b 	add.w	r2, r3, #60160	@ 0xeb00
 800755e:	3280      	adds	r2, #128	@ 0x80
    gemm_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 60416);
 8007560:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
    gemm_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 60288);
 8007564:	e9ca 2202 	strd	r2, r2, [sl, #8]
    gemm_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 60416);
 8007568:	e9c9 3302 	strd	r3, r3, [r9, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800756c:	4e39      	ldr	r6, [pc, #228]	@ (8007654 <ai_network_init+0x1f0>)
 800756e:	462a      	mov	r2, r5
 8007570:	2101      	movs	r1, #1
 8007572:	4630      	mov	r0, r6
 8007574:	f002 fbe0 	bl	8009d38 <ai_platform_get_activations_map>
 8007578:	4605      	mov	r5, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	d058      	beq.n	8007630 <ai_network_init+0x1cc>
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 28320);
 800757e:	6833      	ldr	r3, [r6, #0]
 8007580:	4935      	ldr	r1, [pc, #212]	@ (8007658 <ai_network_init+0x1f4>)
 8007582:	f503 42dd 	add.w	r2, r3, #28288	@ 0x6e80
 8007586:	3220      	adds	r2, #32
 8007588:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 28300);
 800758c:	4933      	ldr	r1, [pc, #204]	@ (800765c <ai_network_init+0x1f8>)
 800758e:	f503 42dd 	add.w	r2, r3, #28288	@ 0x6e80
 8007592:	320c      	adds	r2, #12
 8007594:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007598:	4931      	ldr	r1, [pc, #196]	@ (8007660 <ai_network_init+0x1fc>)
 800759a:	f503 42fc 	add.w	r2, r3, #32256	@ 0x7e00
 800759e:	3240      	adds	r2, #64	@ 0x40
 80075a0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 80075a4:	492f      	ldr	r1, [pc, #188]	@ (8007664 <ai_network_init+0x200>)
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 80075a6:	f8df e100 	ldr.w	lr, [pc, #256]	@ 80076a8 <ai_network_init+0x244>
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 80075aa:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075ae:	492e      	ldr	r1, [pc, #184]	@ (8007668 <ai_network_init+0x204>)
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 80075b0:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80076ac <ai_network_init+0x248>
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075b4:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 80075b8:	492c      	ldr	r1, [pc, #176]	@ (800766c <ai_network_init+0x208>)
    pool_4_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 80075ba:	4f2d      	ldr	r7, [pc, #180]	@ (8007670 <ai_network_init+0x20c>)
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 80075bc:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 80075c0:	492c      	ldr	r1, [pc, #176]	@ (8007674 <ai_network_init+0x210>)
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 32000);
 80075c2:	4e2d      	ldr	r6, [pc, #180]	@ (8007678 <ai_network_init+0x214>)
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 80075c4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075c8:	4a2c      	ldr	r2, [pc, #176]	@ (800767c <ai_network_init+0x218>)
    gemm_16_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 80075ca:	4c2d      	ldr	r4, [pc, #180]	@ (8007680 <ai_network_init+0x21c>)
    pool_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075cc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    pool_15_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007684 <ai_network_init+0x220>)
    gemm_17_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 80075d2:	482d      	ldr	r0, [pc, #180]	@ (8007688 <ai_network_init+0x224>)
    pool_15_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075d4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075d8:	4a2c      	ldr	r2, [pc, #176]	@ (800768c <ai_network_init+0x228>)
    nl_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075da:	492d      	ldr	r1, [pc, #180]	@ (8007690 <ai_network_init+0x22c>)
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80075dc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 80075e0:	f503 42ff 	add.w	r2, r3, #32640	@ 0x7f80
 80075e4:	e9ce 2202 	strd	r2, r2, [lr, #8]
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 80075e8:	e9cc 2202 	strd	r2, r2, [ip, #8]
    pool_4_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 80075ec:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80075f0:	e9c7 2202 	strd	r2, r2, [r7, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 32000);
 80075f4:	f503 42fa 	add.w	r2, r3, #32000	@ 0x7d00
 80075f8:	e9c6 2202 	strd	r2, r2, [r6, #8]
    gemm_16_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 80075fc:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8007600:	e9c4 2202 	strd	r2, r2, [r4, #8]
    gemm_17_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8007604:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8007608:	e9c0 2202 	strd	r2, r2, [r0, #8]
    nl_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800760c:	e9c1 3302 	strd	r3, r3, [r1, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8007610:	4658      	mov	r0, fp
 8007612:	f002 ffd9 	bl	800a5c8 <ai_platform_network_post_init>
 8007616:	4028      	ands	r0, r5
 8007618:	ea08 0800 	and.w	r8, r8, r0
 800761c:	fa5f f088 	uxtb.w	r0, r8

  return ok;
}
 8007620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007624:	2212      	movs	r2, #18
 8007626:	2130      	movs	r1, #48	@ 0x30
 8007628:	4620      	mov	r0, r4
 800762a:	f002 fc59 	bl	8009ee0 <ai_platform_network_set_error>
  return false;
 800762e:	e79d      	b.n	800756c <ai_network_init+0x108>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8007630:	2213      	movs	r2, #19
 8007632:	4620      	mov	r0, r4
 8007634:	2130      	movs	r1, #48	@ 0x30
 8007636:	f002 fc53 	bl	8009ee0 <ai_platform_network_set_error>
  return false;
 800763a:	e7e9      	b.n	8007610 <ai_network_init+0x1ac>
 800763c:	200619c4 	.word	0x200619c4
 8007640:	20000e08 	.word	0x20000e08
 8007644:	20000df8 	.word	0x20000df8
 8007648:	20000de8 	.word	0x20000de8
 800764c:	20000dd8 	.word	0x20000dd8
 8007650:	20000dc8 	.word	0x20000dc8
 8007654:	200619c8 	.word	0x200619c8
 8007658:	20000ef8 	.word	0x20000ef8
 800765c:	20000d78 	.word	0x20000d78
 8007660:	20000ee8 	.word	0x20000ee8
 8007664:	20000ed8 	.word	0x20000ed8
 8007668:	20000d68 	.word	0x20000d68
 800766c:	20000eb8 	.word	0x20000eb8
 8007670:	20000ec8 	.word	0x20000ec8
 8007674:	20000ea8 	.word	0x20000ea8
 8007678:	20000d58 	.word	0x20000d58
 800767c:	20000e98 	.word	0x20000e98
 8007680:	20000e58 	.word	0x20000e58
 8007684:	20000e68 	.word	0x20000e68
 8007688:	20000e38 	.word	0x20000e38
 800768c:	20000e48 	.word	0x20000e48
 8007690:	20000e28 	.word	0x20000e28
 8007694:	20000e18 	.word	0x20000e18
 8007698:	20000db8 	.word	0x20000db8
 800769c:	20000da8 	.word	0x20000da8
 80076a0:	20000d98 	.word	0x20000d98
 80076a4:	20000d88 	.word	0x20000d88
 80076a8:	20000e88 	.word	0x20000e88
 80076ac:	20000e78 	.word	0x20000e78

080076b0 <ai_network_create_and_init>:
{
 80076b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 80076b4:	2300      	movs	r3, #0
 80076b6:	2405      	movs	r4, #5
{
 80076b8:	b091      	sub	sp, #68	@ 0x44
  return ai_platform_network_create(
 80076ba:	e9cd 4300 	strd	r4, r3, [sp]
{
 80076be:	4689      	mov	r9, r1
 80076c0:	4616      	mov	r6, r2
  return ai_platform_network_create(
 80076c2:	4619      	mov	r1, r3
 80076c4:	4a26      	ldr	r2, [pc, #152]	@ (8007760 <ai_network_create_and_init+0xb0>)
 80076c6:	2301      	movs	r3, #1
{
 80076c8:	4607      	mov	r7, r0
  return ai_platform_network_create(
 80076ca:	f002 fea3 	bl	800a414 <ai_platform_network_create>
  if (err.type != AI_ERROR_NONE) {
 80076ce:	f010 08ff 	ands.w	r8, r0, #255	@ 0xff
  return ai_platform_network_create(
 80076d2:	4605      	mov	r5, r0
  if (err.type != AI_ERROR_NONE) {
 80076d4:	d003      	beq.n	80076de <ai_network_create_and_init+0x2e>
}
 80076d6:	4628      	mov	r0, r5
 80076d8:	b011      	add	sp, #68	@ 0x44
 80076da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 80076de:	a802      	add	r0, sp, #8
 80076e0:	f000 f842 	bl	8007768 <ai_network_data_params_get>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d035      	beq.n	8007754 <ai_network_create_and_init+0xa4>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80076e8:	f1b9 0f00 	cmp.w	r9, #0
 80076ec:	d00f      	beq.n	800770e <ai_network_create_and_init+0x5e>
 80076ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80076f2:	4644      	mov	r4, r8
 80076f4:	b15b      	cbz	r3, 800770e <ai_network_create_and_init+0x5e>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80076f6:	b2a1      	uxth	r1, r4
 80076f8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 80076fc:	a805      	add	r0, sp, #20
 80076fe:	f002 fabd 	bl	8009c7c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8007702:	3401      	adds	r4, #1
 8007704:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8007708:	b2a3      	uxth	r3, r4
 800770a:	429a      	cmp	r2, r3
 800770c:	d8f3      	bhi.n	80076f6 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800770e:	b17e      	cbz	r6, 8007730 <ai_network_create_and_init+0x80>
 8007710:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007714:	2400      	movs	r4, #0
 8007716:	b15b      	cbz	r3, 8007730 <ai_network_create_and_init+0x80>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8007718:	b2a1      	uxth	r1, r4
 800771a:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 800771e:	a803      	add	r0, sp, #12
 8007720:	f002 faac 	bl	8009c7c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8007724:	3401      	adds	r4, #1
 8007726:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800772a:	b2a3      	uxth	r3, r4
 800772c:	429a      	cmp	r2, r3
 800772e:	d8f3      	bhi.n	8007718 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 8007730:	6838      	ldr	r0, [r7, #0]
 8007732:	a902      	add	r1, sp, #8
 8007734:	f7ff fe96 	bl	8007464 <ai_network_init>
 8007738:	b128      	cbz	r0, 8007746 <ai_network_create_and_init+0x96>
  return err;
 800773a:	f368 0507 	bfi	r5, r8, #0, #8
}
 800773e:	4628      	mov	r0, r5
 8007740:	b011      	add	sp, #68	@ 0x44
 8007742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8007746:	6838      	ldr	r0, [r7, #0]
 8007748:	f002 fbbe 	bl	8009ec8 <ai_platform_network_get_error>
 800774c:	4605      	mov	r5, r0
 800774e:	fa5f f880 	uxtb.w	r8, r0
 8007752:	e7f2      	b.n	800773a <ai_network_create_and_init+0x8a>
 8007754:	6838      	ldr	r0, [r7, #0]
 8007756:	f002 fbb7 	bl	8009ec8 <ai_platform_network_get_error>
 800775a:	4605      	mov	r5, r0
    return err;
 800775c:	e7bb      	b.n	80076d6 <ai_network_create_and_init+0x26>
 800775e:	bf00      	nop
 8007760:	2000000c 	.word	0x2000000c

08007764 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8007764:	f002 bf5c 	b.w	800a620 <ai_platform_network_process>

08007768 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8007768:	4603      	mov	r3, r0
 800776a:	b1a0      	cbz	r0, 8007796 <ai_network_data_params_get+0x2e>
{
 800776c:	b510      	push	{r4, lr}
 800776e:	b084      	sub	sp, #16
  
  const ai_buffer_array map_activations = 
 8007770:	466a      	mov	r2, sp
 8007772:	4c09      	ldr	r4, [pc, #36]	@ (8007798 <ai_network_data_params_get+0x30>)
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007774:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 8007778:	e894 0003 	ldmia.w	r4, {r0, r1}
  const ai_buffer_array map_weights = 
 800777c:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 800777e:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8007782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007786:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800778a:	4661      	mov	r1, ip
 800778c:	4618      	mov	r0, r3
 800778e:	f002 fb25 	bl	8009ddc <ai_platform_bind_network_params>
}
 8007792:	b004      	add	sp, #16
 8007794:	bd10      	pop	{r4, pc}
 8007796:	4770      	bx	lr
 8007798:	0800f6e0 	.word	0x0800f6e0

0800779c <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800779c:	f04f 31ff 	mov.w	r1, #4294967295
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077a0:	2200      	movs	r2, #0
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80077a2:	f100 0308 	add.w	r3, r0, #8
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077a6:	e9c0 3101 	strd	r3, r1, [r0, #4]
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80077aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077ae:	6002      	str	r2, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop

080077b4 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop

080077bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80077bc:	b410      	push	{r4}
    pxIndex->pxPrevious = pxNewListItem;

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80077be:	e9d0 3200 	ldrd	r3, r2, [r0]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077c2:	6894      	ldr	r4, [r2, #8]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80077c4:	3301      	adds	r3, #1
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077c6:	e9c1 2401 	strd	r2, r4, [r1, #4]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077ca:	6061      	str	r1, [r4, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80077cc:	6091      	str	r1, [r2, #8]

    traceRETURN_vListInsertEnd();
}
 80077ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    pxNewListItem->pxContainer = pxList;
 80077d2:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80077d4:	6003      	str	r3, [r0, #0]
}
 80077d6:	4770      	bx	lr

080077d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80077d8:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077da:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80077dc:	1c6b      	adds	r3, r5, #1
 80077de:	d010      	beq.n	8007802 <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80077e0:	f100 0308 	add.w	r3, r0, #8
 80077e4:	461c      	mov	r4, r3
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	42aa      	cmp	r2, r5
 80077ec:	d9fa      	bls.n	80077e4 <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80077ee:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80077f0:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80077f2:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f4:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80077f6:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80077f8:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 80077fa:	6108      	str	r0, [r1, #16]

    traceRETURN_vListInsert();
}
 80077fc:	bc30      	pop	{r4, r5}
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80077fe:	6002      	str	r2, [r0, #0]
}
 8007800:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 8007802:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	e7f2      	b.n	80077ee <vListInsert+0x16>

08007808 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007808:	4603      	mov	r3, r0
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800780a:	6902      	ldr	r2, [r0, #16]
{
 800780c:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800780e:	6854      	ldr	r4, [r2, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007810:	6840      	ldr	r0, [r0, #4]
 8007812:	6899      	ldr	r1, [r3, #8]
    if( pxList->pxIndex == pxItemToRemove )
 8007814:	429c      	cmp	r4, r3
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007816:	6081      	str	r1, [r0, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007818:	6048      	str	r0, [r1, #4]
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800781a:	bf08      	it	eq
 800781c:	6051      	streq	r1, [r2, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800781e:	2100      	movs	r1, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8007820:	6810      	ldr	r0, [r2, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 8007822:	f85d 4b04 	ldr.w	r4, [sp], #4
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8007826:	3801      	subs	r0, #1
    pxItemToRemove->pxContainer = NULL;
 8007828:	6119      	str	r1, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800782a:	6010      	str	r0, [r2, #0]
}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop

08007830 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4616      	mov	r6, r2

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007834:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8007836:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007838:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800783a:	b92a      	cbnz	r2, 8007848 <prvCopyDataToQueue+0x18>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800783c:	6806      	ldr	r6, [r0, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800783e:	3501      	adds	r5, #1
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007840:	b34e      	cbz	r6, 8007896 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 8007842:	4610      	mov	r0, r2
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007844:	63a5      	str	r5, [r4, #56]	@ 0x38

    return xReturn;
}
 8007846:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8007848:	b98e      	cbnz	r6, 800786e <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800784a:	6840      	ldr	r0, [r0, #4]
 800784c:	f005 ff9b 	bl	800d786 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007850:	6863      	ldr	r3, [r4, #4]
 8007852:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8007854:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007856:	440b      	add	r3, r1
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8007858:	4293      	cmp	r3, r2
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800785a:	6063      	str	r3, [r4, #4]
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800785c:	bf28      	it	cs
 800785e:	6823      	ldrcs	r3, [r4, #0]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007860:	f105 0501 	add.w	r5, r5, #1
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007864:	bf28      	it	cs
 8007866:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8007868:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800786a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800786c:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800786e:	68c0      	ldr	r0, [r0, #12]
 8007870:	f005 ff89 	bl	800d786 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007874:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007876:	68e3      	ldr	r3, [r4, #12]
 8007878:	4251      	negs	r1, r2
 800787a:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800787c:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800787e:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8007880:	4293      	cmp	r3, r2
 8007882:	d202      	bcs.n	800788a <prvCopyDataToQueue+0x5a>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007884:	68a3      	ldr	r3, [r4, #8]
 8007886:	440b      	add	r3, r1
 8007888:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 800788a:	2e02      	cmp	r6, #2
 800788c:	d008      	beq.n	80078a0 <prvCopyDataToQueue+0x70>
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800788e:	3501      	adds	r5, #1
    BaseType_t xReturn = pdFALSE;
 8007890:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007892:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007894:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007896:	6880      	ldr	r0, [r0, #8]
 8007898:	f001 fc46 	bl	8009128 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800789c:	60a6      	str	r6, [r4, #8]
 800789e:	e7d1      	b.n	8007844 <prvCopyDataToQueue+0x14>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078a0:	2d01      	cmp	r5, #1
 80078a2:	bf38      	it	cc
 80078a4:	2501      	movcc	r5, #1
 80078a6:	e7df      	b.n	8007868 <prvCopyDataToQueue+0x38>

080078a8 <xQueueGenericCreate>:
    {
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	b082      	sub	sp, #8
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80078ac:	b140      	cbz	r0, 80078c0 <xQueueGenericCreate+0x18>
 80078ae:	4604      	mov	r4, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80078b0:	fba1 0304 	umull	r0, r3, r1, r4
 80078b4:	b923      	cbnz	r3, 80078c0 <xQueueGenericCreate+0x18>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80078b6:	fb01 f004 	mul.w	r0, r1, r4
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80078ba:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 80078be:	d902      	bls.n	80078c6 <xQueueGenericCreate+0x1e>
            configASSERT( pxNewQueue );
 80078c0:	f002 f824 	bl	800990c <ulSetInterruptMask>
 80078c4:	e7fe      	b.n	80078c4 <xQueueGenericCreate+0x1c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80078c6:	3050      	adds	r0, #80	@ 0x50
 80078c8:	4616      	mov	r6, r2
 80078ca:	9101      	str	r1, [sp, #4]
 80078cc:	f002 f86c 	bl	80099a8 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80078d0:	4605      	mov	r5, r0
 80078d2:	b330      	cbz	r0, 8007922 <xQueueGenericCreate+0x7a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 80078d4:	9901      	ldr	r1, [sp, #4]
 80078d6:	b339      	cbz	r1, 8007928 <xQueueGenericCreate+0x80>
                pucQueueStorage += sizeof( Queue_t );
 80078d8:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    pxNewQueue->uxItemSize = uxItemSize;
 80078dc:	e9c5 410f 	strd	r4, r1, [r5, #60]	@ 0x3c
 80078e0:	602b      	str	r3, [r5, #0]
        taskENTER_CRITICAL();
 80078e2:	f001 fee1 	bl	80096a8 <vPortEnterCritical>
            pxQueue->cRxLock = queueUNLOCKED;
 80078e6:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078e8:	2100      	movs	r1, #0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078ea:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078ec:	63a9      	str	r1, [r5, #56]	@ 0x38
            pxQueue->cRxLock = queueUNLOCKED;
 80078ee:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80078f2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078f6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80078f8:	6829      	ldr	r1, [r5, #0]
 80078fa:	fb04 f303 	mul.w	r3, r4, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80078fe:	1b1c      	subs	r4, r3, r4
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007900:	6069      	str	r1, [r5, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007902:	440b      	add	r3, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007904:	4421      	add	r1, r4
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007906:	60ab      	str	r3, [r5, #8]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007908:	60e9      	str	r1, [r5, #12]
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800790a:	f105 0010 	add.w	r0, r5, #16
 800790e:	f7ff ff45 	bl	800779c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007912:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8007916:	f7ff ff41 	bl	800779c <vListInitialise>
        taskEXIT_CRITICAL();
 800791a:	f001 fed3 	bl	80096c4 <vPortExitCritical>
        pxNewQueue->ucQueueType = ucQueueType;
 800791e:	f885 604c 	strb.w	r6, [r5, #76]	@ 0x4c
    }
 8007922:	4628      	mov	r0, r5
 8007924:	b002      	add	sp, #8
 8007926:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007928:	4603      	mov	r3, r0
 800792a:	e7d7      	b.n	80078dc <xQueueGenericCreate+0x34>

0800792c <xQueueGenericSend>:
{
 800792c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007930:	b085      	sub	sp, #20
 8007932:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8007934:	2800      	cmp	r0, #0
 8007936:	f000 810d 	beq.w	8007b54 <xQueueGenericSend+0x228>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800793a:	4604      	mov	r4, r0
 800793c:	4688      	mov	r8, r1
 800793e:	461f      	mov	r7, r3
 8007940:	2900      	cmp	r1, #0
 8007942:	f000 80f3 	beq.w	8007b2c <xQueueGenericSend+0x200>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007946:	2f02      	cmp	r7, #2
 8007948:	d103      	bne.n	8007952 <xQueueGenericSend+0x26>
 800794a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	f040 80f4 	bne.w	8007b3a <xQueueGenericSend+0x20e>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007952:	f001 fb91 	bl	8009078 <xTaskGetSchedulerState>
 8007956:	2800      	cmp	r0, #0
 8007958:	f000 8090 	beq.w	8007a7c <xQueueGenericSend+0x150>
        taskENTER_CRITICAL();
 800795c:	f001 fea4 	bl	80096a8 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007960:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007962:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007964:	429a      	cmp	r2, r3
 8007966:	d379      	bcc.n	8007a5c <xQueueGenericSend+0x130>
 8007968:	2f02      	cmp	r7, #2
 800796a:	d077      	beq.n	8007a5c <xQueueGenericSend+0x130>
 800796c:	2300      	movs	r3, #0
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800796e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
                if( xTicksToWait == ( TickType_t ) 0 )
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	2a00      	cmp	r2, #0
 8007976:	f000 80f0 	beq.w	8007b5a <xQueueGenericSend+0x22e>
                else if( xEntryTimeSet == pdFALSE )
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80d2 	beq.w	8007b24 <xQueueGenericSend+0x1f8>
        taskEXIT_CRITICAL();
 8007980:	f001 fea0 	bl	80096c4 <vPortExitCritical>
        vTaskSuspendAll();
 8007984:	f001 f9d0 	bl	8008d28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007988:	f001 fe8e 	bl	80096a8 <vPortEnterCritical>
 800798c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007990:	2bff      	cmp	r3, #255	@ 0xff
 8007992:	bf04      	itt	eq
 8007994:	2300      	moveq	r3, #0
 8007996:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800799a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800799e:	2bff      	cmp	r3, #255	@ 0xff
 80079a0:	bf04      	itt	eq
 80079a2:	2300      	moveq	r3, #0
 80079a4:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80079a8:	f001 fe8c 	bl	80096c4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ac:	a802      	add	r0, sp, #8
 80079ae:	a901      	add	r1, sp, #4
 80079b0:	f001 fb24 	bl	8008ffc <xTaskCheckForTimeOut>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f040 80d6 	bne.w	8007b66 <xQueueGenericSend+0x23a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80079ba:	f001 fe75 	bl	80096a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079be:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80079c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d061      	beq.n	8007a8a <xQueueGenericSend+0x15e>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80079c6:	f001 fe7d 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 80079ca:	f001 fe6d 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80079ce:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80079d2:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	dc04      	bgt.n	80079e2 <xQueueGenericSend+0xb6>
 80079d8:	e011      	b.n	80079fe <xQueueGenericSend+0xd2>
            --cTxLock;
 80079da:	1e6a      	subs	r2, r5, #1
 80079dc:	b2d3      	uxtb	r3, r2
 80079de:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e0:	b16b      	cbz	r3, 80079fe <xQueueGenericSend+0xd2>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80079e4:	b15b      	cbz	r3, 80079fe <xQueueGenericSend+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079e6:	4630      	mov	r0, r6
 80079e8:	f001 fa92 	bl	8008f10 <xTaskRemoveFromEventList>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d0f4      	beq.n	80079da <xQueueGenericSend+0xae>
                        vTaskMissedYield();
 80079f0:	f001 fb3c 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 80079f4:	1e6a      	subs	r2, r5, #1
 80079f6:	b2d3      	uxtb	r3, r2
 80079f8:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f1      	bne.n	80079e2 <xQueueGenericSend+0xb6>
        pxQueue->cTxLock = queueUNLOCKED;
 80079fe:	23ff      	movs	r3, #255	@ 0xff
 8007a00:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007a04:	f001 fe5e 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007a08:	f001 fe4e 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007a0c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8007a10:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a12:	2d00      	cmp	r5, #0
 8007a14:	dd14      	ble.n	8007a40 <xQueueGenericSend+0x114>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a16:	f104 0910 	add.w	r9, r4, #16
 8007a1a:	e003      	b.n	8007a24 <xQueueGenericSend+0xf8>
                --cRxLock;
 8007a1c:	1e6a      	subs	r2, r5, #1
 8007a1e:	b2d3      	uxtb	r3, r2
 8007a20:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a22:	b16b      	cbz	r3, 8007a40 <xQueueGenericSend+0x114>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b15b      	cbz	r3, 8007a40 <xQueueGenericSend+0x114>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a28:	4648      	mov	r0, r9
 8007a2a:	f001 fa71 	bl	8008f10 <xTaskRemoveFromEventList>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0f4      	beq.n	8007a1c <xQueueGenericSend+0xf0>
                    vTaskMissedYield();
 8007a32:	f001 fb1b 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 8007a36:	1e6a      	subs	r2, r5, #1
 8007a38:	b2d3      	uxtb	r3, r2
 8007a3a:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f1      	bne.n	8007a24 <xQueueGenericSend+0xf8>
        pxQueue->cRxLock = queueUNLOCKED;
 8007a40:	23ff      	movs	r3, #255	@ 0xff
 8007a42:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007a46:	f001 fe3d 	bl	80096c4 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8007a4a:	f001 f975 	bl	8008d38 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8007a4e:	f001 fe2b 	bl	80096a8 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a52:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a54:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007a56:	2301      	movs	r3, #1
 8007a58:	4291      	cmp	r1, r2
 8007a5a:	d28a      	bcs.n	8007972 <xQueueGenericSend+0x46>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4641      	mov	r1, r8
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7ff fee5 	bl	8007830 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d16c      	bne.n	8007b46 <xQueueGenericSend+0x21a>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d167      	bne.n	8007b40 <xQueueGenericSend+0x214>
                taskEXIT_CRITICAL();
 8007a70:	f001 fe28 	bl	80096c4 <vPortExitCritical>
                return pdPASS;
 8007a74:	2001      	movs	r0, #1
}
 8007a76:	b005      	add	sp, #20
 8007a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f43f af6c 	beq.w	800795c <xQueueGenericSend+0x30>
 8007a84:	f001 ff42 	bl	800990c <ulSetInterruptMask>
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericSend+0x15c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a8a:	f104 0910 	add.w	r9, r4, #16
    taskEXIT_CRITICAL();
 8007a8e:	f001 fe19 	bl	80096c4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a92:	4648      	mov	r0, r9
 8007a94:	9901      	ldr	r1, [sp, #4]
 8007a96:	f001 f983 	bl	8008da0 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8007a9a:	f001 fe05 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007a9e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007aa2:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	dc04      	bgt.n	8007ab2 <xQueueGenericSend+0x186>
 8007aa8:	e011      	b.n	8007ace <xQueueGenericSend+0x1a2>
            --cTxLock;
 8007aaa:	1e6b      	subs	r3, r5, #1
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ab0:	b16a      	cbz	r2, 8007ace <xQueueGenericSend+0x1a2>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ab2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ab4:	b15b      	cbz	r3, 8007ace <xQueueGenericSend+0x1a2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f001 fa2a 	bl	8008f10 <xTaskRemoveFromEventList>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d0f4      	beq.n	8007aaa <xQueueGenericSend+0x17e>
                        vTaskMissedYield();
 8007ac0:	f001 fad4 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8007ac4:	1e6b      	subs	r3, r5, #1
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d1f1      	bne.n	8007ab2 <xQueueGenericSend+0x186>
        pxQueue->cTxLock = queueUNLOCKED;
 8007ace:	23ff      	movs	r3, #255	@ 0xff
 8007ad0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007ad4:	f001 fdf6 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007ad8:	f001 fde6 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007adc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ae0:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	dc04      	bgt.n	8007af0 <xQueueGenericSend+0x1c4>
 8007ae6:	e011      	b.n	8007b0c <xQueueGenericSend+0x1e0>
                --cRxLock;
 8007ae8:	1e6b      	subs	r3, r5, #1
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aee:	b16a      	cbz	r2, 8007b0c <xQueueGenericSend+0x1e0>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b15b      	cbz	r3, 8007b0c <xQueueGenericSend+0x1e0>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af4:	4648      	mov	r0, r9
 8007af6:	f001 fa0b 	bl	8008f10 <xTaskRemoveFromEventList>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d0f4      	beq.n	8007ae8 <xQueueGenericSend+0x1bc>
                    vTaskMissedYield();
 8007afe:	f001 fab5 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 8007b02:	1e6b      	subs	r3, r5, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	d1f1      	bne.n	8007af0 <xQueueGenericSend+0x1c4>
        pxQueue->cRxLock = queueUNLOCKED;
 8007b0c:	23ff      	movs	r3, #255	@ 0xff
 8007b0e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007b12:	f001 fdd7 	bl	80096c4 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8007b16:	f001 f90f 	bl	8008d38 <xTaskResumeAll>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d197      	bne.n	8007a4e <xQueueGenericSend+0x122>
                    taskYIELD_WITHIN_API();
 8007b1e:	f001 fdb7 	bl	8009690 <vPortYield>
 8007b22:	e794      	b.n	8007a4e <xQueueGenericSend+0x122>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007b24:	a802      	add	r0, sp, #8
 8007b26:	f001 fa5d 	bl	8008fe4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007b2a:	e729      	b.n	8007980 <xQueueGenericSend+0x54>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f43f af09 	beq.w	8007946 <xQueueGenericSend+0x1a>
 8007b34:	f001 feea 	bl	800990c <ulSetInterruptMask>
 8007b38:	e7fe      	b.n	8007b38 <xQueueGenericSend+0x20c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b3a:	f001 fee7 	bl	800990c <ulSetInterruptMask>
 8007b3e:	e7fe      	b.n	8007b3e <xQueueGenericSend+0x212>
                            queueYIELD_IF_USING_PREEMPTION();
 8007b40:	f001 fda6 	bl	8009690 <vPortYield>
 8007b44:	e794      	b.n	8007a70 <xQueueGenericSend+0x144>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b46:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b4a:	f001 f9e1 	bl	8008f10 <xTaskRemoveFromEventList>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d08e      	beq.n	8007a70 <xQueueGenericSend+0x144>
 8007b52:	e7f5      	b.n	8007b40 <xQueueGenericSend+0x214>
    configASSERT( pxQueue );
 8007b54:	f001 feda 	bl	800990c <ulSetInterruptMask>
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericSend+0x22c>
                    taskEXIT_CRITICAL();
 8007b5a:	f001 fdb3 	bl	80096c4 <vPortExitCritical>
                    return errQUEUE_FULL;
 8007b5e:	2000      	movs	r0, #0
}
 8007b60:	b005      	add	sp, #20
 8007b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskENTER_CRITICAL();
 8007b66:	f001 fd9f 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007b6a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b6e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	dd10      	ble.n	8007b96 <xQueueGenericSend+0x26a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b74:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8007b78:	e003      	b.n	8007b82 <xQueueGenericSend+0x256>
            --cTxLock;
 8007b7a:	1e6b      	subs	r3, r5, #1
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b80:	b14a      	cbz	r2, 8007b96 <xQueueGenericSend+0x26a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b84:	b13b      	cbz	r3, 8007b96 <xQueueGenericSend+0x26a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b86:	4630      	mov	r0, r6
 8007b88:	f001 f9c2 	bl	8008f10 <xTaskRemoveFromEventList>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0f4      	beq.n	8007b7a <xQueueGenericSend+0x24e>
                        vTaskMissedYield();
 8007b90:	f001 fa6c 	bl	800906c <vTaskMissedYield>
 8007b94:	e7f1      	b.n	8007b7a <xQueueGenericSend+0x24e>
        pxQueue->cTxLock = queueUNLOCKED;
 8007b96:	23ff      	movs	r3, #255	@ 0xff
 8007b98:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007b9c:	f001 fd92 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007ba0:	f001 fd82 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007ba4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ba8:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	dd10      	ble.n	8007bd0 <xQueueGenericSend+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bae:	f104 0610 	add.w	r6, r4, #16
 8007bb2:	e003      	b.n	8007bbc <xQueueGenericSend+0x290>
                --cRxLock;
 8007bb4:	1e6b      	subs	r3, r5, #1
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bba:	b14a      	cbz	r2, 8007bd0 <xQueueGenericSend+0x2a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	b13b      	cbz	r3, 8007bd0 <xQueueGenericSend+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f001 f9a5 	bl	8008f10 <xTaskRemoveFromEventList>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d0f4      	beq.n	8007bb4 <xQueueGenericSend+0x288>
                    vTaskMissedYield();
 8007bca:	f001 fa4f 	bl	800906c <vTaskMissedYield>
 8007bce:	e7f1      	b.n	8007bb4 <xQueueGenericSend+0x288>
        pxQueue->cRxLock = queueUNLOCKED;
 8007bd0:	23ff      	movs	r3, #255	@ 0xff
 8007bd2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007bd6:	f001 fd75 	bl	80096c4 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8007bda:	f001 f8ad 	bl	8008d38 <xTaskResumeAll>
            return errQUEUE_FULL;
 8007bde:	e7be      	b.n	8007b5e <xQueueGenericSend+0x232>

08007be0 <xQueueCreateMutex>:
    {
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	4605      	mov	r5, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007be4:	2050      	movs	r0, #80	@ 0x50
 8007be6:	f001 fedf 	bl	80099a8 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8007bea:	4604      	mov	r4, r0
 8007bec:	b368      	cbz	r0, 8007c4a <xQueueCreateMutex+0x6a>
    pxNewQueue->uxLength = uxQueueLength;
 8007bee:	2600      	movs	r6, #0
 8007bf0:	2301      	movs	r3, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bf2:	6020      	str	r0, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8007bf4:	e9c0 360f 	strd	r3, r6, [r0, #60]	@ 0x3c
        taskENTER_CRITICAL();
 8007bf8:	f001 fd56 	bl	80096a8 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007bfc:	e9d4 2c0f 	ldrd	r2, ip, [r4, #60]	@ 0x3c
            pxQueue->cRxLock = queueUNLOCKED;
 8007c00:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c02:	fb02 f20c 	mul.w	r2, r2, ip
 8007c06:	6821      	ldr	r1, [r4, #0]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007c08:	eba2 0c0c 	sub.w	ip, r2, ip
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c0c:	6061      	str	r1, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c0e:	440a      	add	r2, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007c10:	4461      	add	r1, ip
 8007c12:	e9c4 2102 	strd	r2, r1, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c16:	63a6      	str	r6, [r4, #56]	@ 0x38
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c18:	f104 0010 	add.w	r0, r4, #16
            pxQueue->cRxLock = queueUNLOCKED;
 8007c1c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007c20:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c24:	f7ff fdba 	bl	800779c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c2c:	f7ff fdb6 	bl	800779c <vListInitialise>
        taskEXIT_CRITICAL();
 8007c30:	f001 fd48 	bl	80096c4 <vPortExitCritical>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c34:	4633      	mov	r3, r6
 8007c36:	4632      	mov	r2, r6
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
 8007c3c:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c40:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c42:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c44:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c46:	f7ff fe71 	bl	800792c <xQueueGenericSend>
    }
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
 8007c4e:	bf00      	nop

08007c50 <xQueueReceive>:
{
 8007c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c54:	b085      	sub	sp, #20
 8007c56:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f000 8135 	beq.w	8007ec8 <xQueueReceive+0x278>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c5e:	4604      	mov	r4, r0
 8007c60:	460f      	mov	r7, r1
 8007c62:	2900      	cmp	r1, #0
 8007c64:	f000 8122 	beq.w	8007eac <xQueueReceive+0x25c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c68:	f001 fa06 	bl	8009078 <xTaskGetSchedulerState>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f000 8124 	beq.w	8007eba <xQueueReceive+0x26a>
        taskENTER_CRITICAL();
 8007c72:	f001 fd19 	bl	80096a8 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c76:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	f040 8128 	bne.w	8007ece <xQueueReceive+0x27e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80be 	beq.w	8007e02 <xQueueReceive+0x1b2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007c86:	a802      	add	r0, sp, #8
 8007c88:	f001 f9ac 	bl	8008fe4 <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
 8007c8c:	46a8      	mov	r8, r5
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c8e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        taskEXIT_CRITICAL();
 8007c92:	f001 fd17 	bl	80096c4 <vPortExitCritical>
        vTaskSuspendAll();
 8007c96:	f001 f847 	bl	8008d28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007c9a:	f001 fd05 	bl	80096a8 <vPortEnterCritical>
 8007c9e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ca2:	2bff      	cmp	r3, #255	@ 0xff
 8007ca4:	bf08      	it	eq
 8007ca6:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007caa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007cae:	2bff      	cmp	r3, #255	@ 0xff
 8007cb0:	bf08      	it	eq
 8007cb2:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007cb6:	f001 fd05 	bl	80096c4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cba:	a901      	add	r1, sp, #4
 8007cbc:	a802      	add	r0, sp, #8
 8007cbe:	f001 f99d 	bl	8008ffc <xTaskCheckForTimeOut>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d14c      	bne.n	8007d60 <xQueueReceive+0x110>
    taskENTER_CRITICAL();
 8007cc6:	f001 fcef 	bl	80096a8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007cca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 809e 	beq.w	8007e0e <xQueueReceive+0x1be>
    taskEXIT_CRITICAL();
 8007cd2:	f001 fcf7 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007cd6:	f001 fce7 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007cda:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007cde:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	dd14      	ble.n	8007d0e <xQueueReceive+0xbe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce4:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8007ce8:	e003      	b.n	8007cf2 <xQueueReceive+0xa2>
            --cTxLock;
 8007cea:	1e6b      	subs	r3, r5, #1
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cf0:	b16a      	cbz	r2, 8007d0e <xQueueReceive+0xbe>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cf4:	b15b      	cbz	r3, 8007d0e <xQueueReceive+0xbe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	f001 f90a 	bl	8008f10 <xTaskRemoveFromEventList>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d0f4      	beq.n	8007cea <xQueueReceive+0x9a>
                        vTaskMissedYield();
 8007d00:	f001 f9b4 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8007d04:	1e6b      	subs	r3, r5, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	d1f1      	bne.n	8007cf2 <xQueueReceive+0xa2>
        pxQueue->cTxLock = queueUNLOCKED;
 8007d0e:	23ff      	movs	r3, #255	@ 0xff
 8007d10:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007d14:	f001 fcd6 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007d18:	f001 fcc6 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007d1c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d20:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d22:	2d00      	cmp	r5, #0
 8007d24:	dd14      	ble.n	8007d50 <xQueueReceive+0x100>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d26:	f104 0910 	add.w	r9, r4, #16
 8007d2a:	e003      	b.n	8007d34 <xQueueReceive+0xe4>
                --cRxLock;
 8007d2c:	1e6b      	subs	r3, r5, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d32:	b16a      	cbz	r2, 8007d50 <xQueueReceive+0x100>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b15b      	cbz	r3, 8007d50 <xQueueReceive+0x100>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d38:	4648      	mov	r0, r9
 8007d3a:	f001 f8e9 	bl	8008f10 <xTaskRemoveFromEventList>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d0f4      	beq.n	8007d2c <xQueueReceive+0xdc>
                    vTaskMissedYield();
 8007d42:	f001 f993 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 8007d46:	1e6b      	subs	r3, r5, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	d1f1      	bne.n	8007d34 <xQueueReceive+0xe4>
        pxQueue->cRxLock = queueUNLOCKED;
 8007d50:	23ff      	movs	r3, #255	@ 0xff
 8007d52:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007d56:	f001 fcb5 	bl	80096c4 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8007d5a:	f000 ffed 	bl	8008d38 <xTaskResumeAll>
 8007d5e:	e047      	b.n	8007df0 <xQueueReceive+0x1a0>
    taskENTER_CRITICAL();
 8007d60:	f001 fca2 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007d64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d68:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	dc04      	bgt.n	8007d78 <xQueueReceive+0x128>
 8007d6e:	e011      	b.n	8007d94 <xQueueReceive+0x144>
            --cTxLock;
 8007d70:	1e6b      	subs	r3, r5, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d76:	b16a      	cbz	r2, 8007d94 <xQueueReceive+0x144>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d7a:	b15b      	cbz	r3, 8007d94 <xQueueReceive+0x144>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f001 f8c7 	bl	8008f10 <xTaskRemoveFromEventList>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d0f4      	beq.n	8007d70 <xQueueReceive+0x120>
                        vTaskMissedYield();
 8007d86:	f001 f971 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8007d8a:	1e6b      	subs	r3, r5, #1
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d1f1      	bne.n	8007d78 <xQueueReceive+0x128>
        pxQueue->cTxLock = queueUNLOCKED;
 8007d94:	23ff      	movs	r3, #255	@ 0xff
 8007d96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007d9a:	f001 fc93 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007d9e:	f001 fc83 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007da2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007da6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	dd14      	ble.n	8007dd6 <xQueueReceive+0x186>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dac:	f104 0910 	add.w	r9, r4, #16
 8007db0:	e003      	b.n	8007dba <xQueueReceive+0x16a>
                --cRxLock;
 8007db2:	1e6b      	subs	r3, r5, #1
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007db8:	b16a      	cbz	r2, 8007dd6 <xQueueReceive+0x186>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	b15b      	cbz	r3, 8007dd6 <xQueueReceive+0x186>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dbe:	4648      	mov	r0, r9
 8007dc0:	f001 f8a6 	bl	8008f10 <xTaskRemoveFromEventList>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d0f4      	beq.n	8007db2 <xQueueReceive+0x162>
                    vTaskMissedYield();
 8007dc8:	f001 f950 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 8007dcc:	1e6b      	subs	r3, r5, #1
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dd2:	2a00      	cmp	r2, #0
 8007dd4:	d1f1      	bne.n	8007dba <xQueueReceive+0x16a>
        pxQueue->cRxLock = queueUNLOCKED;
 8007dd6:	23ff      	movs	r3, #255	@ 0xff
 8007dd8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007ddc:	f001 fc72 	bl	80096c4 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8007de0:	f000 ffaa 	bl	8008d38 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8007de4:	f001 fc60 	bl	80096a8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007de8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007dea:	b153      	cbz	r3, 8007e02 <xQueueReceive+0x1b2>
    taskEXIT_CRITICAL();
 8007dec:	f001 fc6a 	bl	80096c4 <vPortExitCritical>
        taskENTER_CRITICAL();
 8007df0:	f001 fc5a 	bl	80096a8 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007df4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	d169      	bne.n	8007ece <xQueueReceive+0x27e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007dfa:	9b01      	ldr	r3, [sp, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f47f af48 	bne.w	8007c92 <xQueueReceive+0x42>
                    taskEXIT_CRITICAL();
 8007e02:	f001 fc5f 	bl	80096c4 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8007e06:	2000      	movs	r0, #0
}
 8007e08:	b005      	add	sp, #20
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e0e:	f104 0924 	add.w	r9, r4, #36	@ 0x24
    taskEXIT_CRITICAL();
 8007e12:	f001 fc57 	bl	80096c4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e16:	4648      	mov	r0, r9
 8007e18:	9901      	ldr	r1, [sp, #4]
 8007e1a:	f000 ffc1 	bl	8008da0 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8007e1e:	f001 fc43 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007e22:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007e26:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	dc04      	bgt.n	8007e36 <xQueueReceive+0x1e6>
 8007e2c:	e011      	b.n	8007e52 <xQueueReceive+0x202>
            --cTxLock;
 8007e2e:	1e6b      	subs	r3, r5, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e34:	b16a      	cbz	r2, 8007e52 <xQueueReceive+0x202>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e38:	b15b      	cbz	r3, 8007e52 <xQueueReceive+0x202>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e3a:	4648      	mov	r0, r9
 8007e3c:	f001 f868 	bl	8008f10 <xTaskRemoveFromEventList>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d0f4      	beq.n	8007e2e <xQueueReceive+0x1de>
                        vTaskMissedYield();
 8007e44:	f001 f912 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8007e48:	1e6b      	subs	r3, r5, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d1f1      	bne.n	8007e36 <xQueueReceive+0x1e6>
        pxQueue->cTxLock = queueUNLOCKED;
 8007e52:	23ff      	movs	r3, #255	@ 0xff
 8007e54:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007e58:	f001 fc34 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007e5c:	f001 fc24 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007e60:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007e64:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	dd14      	ble.n	8007e94 <xQueueReceive+0x244>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e6a:	f104 0910 	add.w	r9, r4, #16
 8007e6e:	e003      	b.n	8007e78 <xQueueReceive+0x228>
                --cRxLock;
 8007e70:	1e6b      	subs	r3, r5, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e76:	b16a      	cbz	r2, 8007e94 <xQueueReceive+0x244>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	b15b      	cbz	r3, 8007e94 <xQueueReceive+0x244>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7c:	4648      	mov	r0, r9
 8007e7e:	f001 f847 	bl	8008f10 <xTaskRemoveFromEventList>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0f4      	beq.n	8007e70 <xQueueReceive+0x220>
                    vTaskMissedYield();
 8007e86:	f001 f8f1 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 8007e8a:	1e6b      	subs	r3, r5, #1
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d1f1      	bne.n	8007e78 <xQueueReceive+0x228>
        pxQueue->cRxLock = queueUNLOCKED;
 8007e94:	23ff      	movs	r3, #255	@ 0xff
 8007e96:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007e9a:	f001 fc13 	bl	80096c4 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8007e9e:	f000 ff4b 	bl	8008d38 <xTaskResumeAll>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1a4      	bne.n	8007df0 <xQueueReceive+0x1a0>
                    taskYIELD_WITHIN_API();
 8007ea6:	f001 fbf3 	bl	8009690 <vPortYield>
 8007eaa:	e7a1      	b.n	8007df0 <xQueueReceive+0x1a0>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f43f aeda 	beq.w	8007c68 <xQueueReceive+0x18>
 8007eb4:	f001 fd2a 	bl	800990c <ulSetInterruptMask>
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueReceive+0x268>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f43f aed8 	beq.w	8007c72 <xQueueReceive+0x22>
 8007ec2:	f001 fd23 	bl	800990c <ulSetInterruptMask>
 8007ec6:	e7fe      	b.n	8007ec6 <xQueueReceive+0x276>
    configASSERT( ( pxQueue ) );
 8007ec8:	f001 fd20 	bl	800990c <ulSetInterruptMask>
 8007ecc:	e7fe      	b.n	8007ecc <xQueueReceive+0x27c>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ece:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007ed0:	b15a      	cbz	r2, 8007eea <xQueueReceive+0x29a>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007ed2:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8007ed4:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007ed6:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8007ed8:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007eda:	60e1      	str	r1, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007edc:	bf28      	it	cs
 8007ede:	6821      	ldrcs	r1, [r4, #0]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8007ee0:	4638      	mov	r0, r7
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ee2:	bf28      	it	cs
 8007ee4:	60e1      	strcs	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8007ee6:	f005 fc4e 	bl	800d786 <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eea:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8007eec:	3d01      	subs	r5, #1
 8007eee:	63a5      	str	r5, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ef0:	b91b      	cbnz	r3, 8007efa <xQueueReceive+0x2aa>
                taskEXIT_CRITICAL();
 8007ef2:	f001 fbe7 	bl	80096c4 <vPortExitCritical>
                return pdPASS;
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	e786      	b.n	8007e08 <xQueueReceive+0x1b8>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007efa:	f104 0010 	add.w	r0, r4, #16
 8007efe:	f001 f807 	bl	8008f10 <xTaskRemoveFromEventList>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0f5      	beq.n	8007ef2 <xQueueReceive+0x2a2>
                        queueYIELD_IF_USING_PREEMPTION();
 8007f06:	f001 fbc3 	bl	8009690 <vPortYield>
 8007f0a:	e7f2      	b.n	8007ef2 <xQueueReceive+0x2a2>

08007f0c <xQueueSemaphoreTake>:
{
 8007f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f10:	b085      	sub	sp, #20
 8007f12:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f000 8142 	beq.w	800819e <xQueueSemaphoreTake+0x292>
    configASSERT( pxQueue->uxItemSize == 0 );
 8007f1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f040 8088 	bne.w	8008034 <xQueueSemaphoreTake+0x128>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f24:	f001 f8a8 	bl	8009078 <xTaskGetSchedulerState>
 8007f28:	b918      	cbnz	r0, 8007f32 <xQueueSemaphoreTake+0x26>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 8133 	bne.w	8008198 <xQueueSemaphoreTake+0x28c>
        taskENTER_CRITICAL();
 8007f32:	f001 fbb9 	bl	80096a8 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f36:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	f040 8141 	bne.w	80081c0 <xQueueSemaphoreTake+0x2b4>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8126 	beq.w	8008192 <xQueueSemaphoreTake+0x286>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007f46:	a802      	add	r0, sp, #8
 8007f48:	f001 f84c 	bl	8008fe4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007f4c:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 8007f4e:	46a8      	mov	r8, r5
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f50:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        taskEXIT_CRITICAL();
 8007f54:	f001 fbb6 	bl	80096c4 <vPortExitCritical>
        vTaskSuspendAll();
 8007f58:	f000 fee6 	bl	8008d28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007f5c:	f001 fba4 	bl	80096a8 <vPortEnterCritical>
 8007f60:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f64:	2bff      	cmp	r3, #255	@ 0xff
 8007f66:	bf08      	it	eq
 8007f68:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007f6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007f70:	2bff      	cmp	r3, #255	@ 0xff
 8007f72:	bf08      	it	eq
 8007f74:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007f78:	f001 fba4 	bl	80096c4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f7c:	a901      	add	r1, sp, #4
 8007f7e:	a802      	add	r0, sp, #8
 8007f80:	f001 f83c 	bl	8008ffc <xTaskCheckForTimeOut>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d158      	bne.n	800803a <xQueueSemaphoreTake+0x12e>
    taskENTER_CRITICAL();
 8007f88:	f001 fb8e 	bl	80096a8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007f8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80a2 	beq.w	80080d8 <xQueueSemaphoreTake+0x1cc>
    taskEXIT_CRITICAL();
 8007f94:	f001 fb96 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007f98:	f001 fb86 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007f9c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007fa0:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fa2:	2d00      	cmp	r5, #0
 8007fa4:	dd14      	ble.n	8007fd0 <xQueueSemaphoreTake+0xc4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa6:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8007faa:	e003      	b.n	8007fb4 <xQueueSemaphoreTake+0xa8>
            --cTxLock;
 8007fac:	1e6b      	subs	r3, r5, #1
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fb2:	b16a      	cbz	r2, 8007fd0 <xQueueSemaphoreTake+0xc4>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fb6:	b15b      	cbz	r3, 8007fd0 <xQueueSemaphoreTake+0xc4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb8:	4648      	mov	r0, r9
 8007fba:	f000 ffa9 	bl	8008f10 <xTaskRemoveFromEventList>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d0f4      	beq.n	8007fac <xQueueSemaphoreTake+0xa0>
                        vTaskMissedYield();
 8007fc2:	f001 f853 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8007fc6:	1e6b      	subs	r3, r5, #1
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	d1f1      	bne.n	8007fb4 <xQueueSemaphoreTake+0xa8>
        pxQueue->cTxLock = queueUNLOCKED;
 8007fd0:	23ff      	movs	r3, #255	@ 0xff
 8007fd2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007fd6:	f001 fb75 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007fda:	f001 fb65 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007fde:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007fe2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	dd14      	ble.n	8008012 <xQueueSemaphoreTake+0x106>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fe8:	f104 0910 	add.w	r9, r4, #16
 8007fec:	e003      	b.n	8007ff6 <xQueueSemaphoreTake+0xea>
                --cRxLock;
 8007fee:	1e6b      	subs	r3, r5, #1
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ff4:	b16a      	cbz	r2, 8008012 <xQueueSemaphoreTake+0x106>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b15b      	cbz	r3, 8008012 <xQueueSemaphoreTake+0x106>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffa:	4648      	mov	r0, r9
 8007ffc:	f000 ff88 	bl	8008f10 <xTaskRemoveFromEventList>
 8008000:	2800      	cmp	r0, #0
 8008002:	d0f4      	beq.n	8007fee <xQueueSemaphoreTake+0xe2>
                    vTaskMissedYield();
 8008004:	f001 f832 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 8008008:	1e6b      	subs	r3, r5, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800800e:	2a00      	cmp	r2, #0
 8008010:	d1f1      	bne.n	8007ff6 <xQueueSemaphoreTake+0xea>
        pxQueue->cRxLock = queueUNLOCKED;
 8008012:	23ff      	movs	r3, #255	@ 0xff
 8008014:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8008018:	f001 fb54 	bl	80096c4 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 800801c:	f000 fe8c 	bl	8008d38 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8008020:	f001 fb42 	bl	80096a8 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008024:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008026:	2d00      	cmp	r5, #0
 8008028:	f040 80ca 	bne.w	80081c0 <xQueueSemaphoreTake+0x2b4>
                if( xTicksToWait == ( TickType_t ) 0 )
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d190      	bne.n	8007f54 <xQueueSemaphoreTake+0x48>
 8008032:	e0ae      	b.n	8008192 <xQueueSemaphoreTake+0x286>
    configASSERT( pxQueue->uxItemSize == 0 );
 8008034:	f001 fc6a 	bl	800990c <ulSetInterruptMask>
 8008038:	e7fe      	b.n	8008038 <xQueueSemaphoreTake+0x12c>
    taskENTER_CRITICAL();
 800803a:	f001 fb35 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800803e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008042:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008044:	2d00      	cmp	r5, #0
 8008046:	dc04      	bgt.n	8008052 <xQueueSemaphoreTake+0x146>
 8008048:	e011      	b.n	800806e <xQueueSemaphoreTake+0x162>
            --cTxLock;
 800804a:	1e6b      	subs	r3, r5, #1
 800804c:	b2da      	uxtb	r2, r3
 800804e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008050:	b16a      	cbz	r2, 800806e <xQueueSemaphoreTake+0x162>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008052:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008054:	b15b      	cbz	r3, 800806e <xQueueSemaphoreTake+0x162>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008056:	4630      	mov	r0, r6
 8008058:	f000 ff5a 	bl	8008f10 <xTaskRemoveFromEventList>
 800805c:	2800      	cmp	r0, #0
 800805e:	d0f4      	beq.n	800804a <xQueueSemaphoreTake+0x13e>
                        vTaskMissedYield();
 8008060:	f001 f804 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8008064:	1e6b      	subs	r3, r5, #1
 8008066:	b2da      	uxtb	r2, r3
 8008068:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800806a:	2a00      	cmp	r2, #0
 800806c:	d1f1      	bne.n	8008052 <xQueueSemaphoreTake+0x146>
        pxQueue->cTxLock = queueUNLOCKED;
 800806e:	23ff      	movs	r3, #255	@ 0xff
 8008070:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008074:	f001 fb26 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8008078:	f001 fb16 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800807c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008080:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008082:	2d00      	cmp	r5, #0
 8008084:	dd14      	ble.n	80080b0 <xQueueSemaphoreTake+0x1a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008086:	f104 0910 	add.w	r9, r4, #16
 800808a:	e003      	b.n	8008094 <xQueueSemaphoreTake+0x188>
                --cRxLock;
 800808c:	1e6b      	subs	r3, r5, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008092:	b16a      	cbz	r2, 80080b0 <xQueueSemaphoreTake+0x1a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	b15b      	cbz	r3, 80080b0 <xQueueSemaphoreTake+0x1a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008098:	4648      	mov	r0, r9
 800809a:	f000 ff39 	bl	8008f10 <xTaskRemoveFromEventList>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d0f4      	beq.n	800808c <xQueueSemaphoreTake+0x180>
                    vTaskMissedYield();
 80080a2:	f000 ffe3 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 80080a6:	1e6b      	subs	r3, r5, #1
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ac:	2a00      	cmp	r2, #0
 80080ae:	d1f1      	bne.n	8008094 <xQueueSemaphoreTake+0x188>
        pxQueue->cRxLock = queueUNLOCKED;
 80080b0:	23ff      	movs	r3, #255	@ 0xff
 80080b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 80080b6:	f001 fb05 	bl	80096c4 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 80080ba:	f000 fe3d 	bl	8008d38 <xTaskResumeAll>
    taskENTER_CRITICAL();
 80080be:	f001 faf3 	bl	80096a8 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80080c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d15a      	bne.n	800817e <xQueueSemaphoreTake+0x272>
    taskEXIT_CRITICAL();
 80080c8:	f001 fafc 	bl	80096c4 <vPortExitCritical>
                    if( xInheritanceOccurred != pdFALSE )
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	d159      	bne.n	8008184 <xQueueSemaphoreTake+0x278>
                    return errQUEUE_EMPTY;
 80080d0:	2000      	movs	r0, #0
}
 80080d2:	b005      	add	sp, #20
 80080d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskEXIT_CRITICAL();
 80080d8:	f001 faf4 	bl	80096c4 <vPortExitCritical>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d065      	beq.n	80081ae <xQueueSemaphoreTake+0x2a2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080e2:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 80080e6:	4648      	mov	r0, r9
 80080e8:	9901      	ldr	r1, [sp, #4]
 80080ea:	f000 fe59 	bl	8008da0 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 80080ee:	f001 fadb 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80080f2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80080f6:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	dc04      	bgt.n	8008106 <xQueueSemaphoreTake+0x1fa>
 80080fc:	e011      	b.n	8008122 <xQueueSemaphoreTake+0x216>
            --cTxLock;
 80080fe:	1e6b      	subs	r3, r5, #1
 8008100:	b2da      	uxtb	r2, r3
 8008102:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008104:	b16a      	cbz	r2, 8008122 <xQueueSemaphoreTake+0x216>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008106:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008108:	b15b      	cbz	r3, 8008122 <xQueueSemaphoreTake+0x216>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800810a:	4648      	mov	r0, r9
 800810c:	f000 ff00 	bl	8008f10 <xTaskRemoveFromEventList>
 8008110:	2800      	cmp	r0, #0
 8008112:	d0f4      	beq.n	80080fe <xQueueSemaphoreTake+0x1f2>
                        vTaskMissedYield();
 8008114:	f000 ffaa 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8008118:	1e6b      	subs	r3, r5, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800811e:	2a00      	cmp	r2, #0
 8008120:	d1f1      	bne.n	8008106 <xQueueSemaphoreTake+0x1fa>
        pxQueue->cTxLock = queueUNLOCKED;
 8008122:	23ff      	movs	r3, #255	@ 0xff
 8008124:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008128:	f001 facc 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 800812c:	f001 fabc 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8008130:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008134:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008136:	2d00      	cmp	r5, #0
 8008138:	dd14      	ble.n	8008164 <xQueueSemaphoreTake+0x258>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813a:	f104 0910 	add.w	r9, r4, #16
 800813e:	e003      	b.n	8008148 <xQueueSemaphoreTake+0x23c>
                --cRxLock;
 8008140:	1e6b      	subs	r3, r5, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008146:	b16a      	cbz	r2, 8008164 <xQueueSemaphoreTake+0x258>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	b15b      	cbz	r3, 8008164 <xQueueSemaphoreTake+0x258>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800814c:	4648      	mov	r0, r9
 800814e:	f000 fedf 	bl	8008f10 <xTaskRemoveFromEventList>
 8008152:	2800      	cmp	r0, #0
 8008154:	d0f4      	beq.n	8008140 <xQueueSemaphoreTake+0x234>
                    vTaskMissedYield();
 8008156:	f000 ff89 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 800815a:	1e6b      	subs	r3, r5, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008160:	2a00      	cmp	r2, #0
 8008162:	d1f1      	bne.n	8008148 <xQueueSemaphoreTake+0x23c>
        pxQueue->cRxLock = queueUNLOCKED;
 8008164:	23ff      	movs	r3, #255	@ 0xff
 8008166:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 800816a:	f001 faab 	bl	80096c4 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 800816e:	f000 fde3 	bl	8008d38 <xTaskResumeAll>
 8008172:	2800      	cmp	r0, #0
 8008174:	f47f af54 	bne.w	8008020 <xQueueSemaphoreTake+0x114>
                    taskYIELD_WITHIN_API();
 8008178:	f001 fa8a 	bl	8009690 <vPortYield>
 800817c:	e750      	b.n	8008020 <xQueueSemaphoreTake+0x114>
    taskEXIT_CRITICAL();
 800817e:	f001 faa1 	bl	80096c4 <vPortExitCritical>
    return xReturn;
 8008182:	e74d      	b.n	8008020 <xQueueSemaphoreTake+0x114>
                        taskENTER_CRITICAL();
 8008184:	f001 fa90 	bl	80096a8 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008188:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800818a:	b959      	cbnz	r1, 80081a4 <xQueueSemaphoreTake+0x298>
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800818c:	68a0      	ldr	r0, [r4, #8]
 800818e:	f001 f80f 	bl	80091b0 <vTaskPriorityDisinheritAfterTimeout>
                        taskEXIT_CRITICAL();
 8008192:	f001 fa97 	bl	80096c4 <vPortExitCritical>
 8008196:	e79b      	b.n	80080d0 <xQueueSemaphoreTake+0x1c4>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008198:	f001 fbb8 	bl	800990c <ulSetInterruptMask>
 800819c:	e7fe      	b.n	800819c <xQueueSemaphoreTake+0x290>
    configASSERT( ( pxQueue ) );
 800819e:	f001 fbb5 	bl	800990c <ulSetInterruptMask>
 80081a2:	e7fe      	b.n	80081a2 <xQueueSemaphoreTake+0x296>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 80081a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80081a6:	6819      	ldr	r1, [r3, #0]
 80081a8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 80081ac:	e7ee      	b.n	800818c <xQueueSemaphoreTake+0x280>
                        taskENTER_CRITICAL();
 80081ae:	f001 fa7b 	bl	80096a8 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081b2:	68a0      	ldr	r0, [r4, #8]
 80081b4:	f000 ff70 	bl	8009098 <xTaskPriorityInherit>
 80081b8:	4607      	mov	r7, r0
                        taskEXIT_CRITICAL();
 80081ba:	f001 fa83 	bl	80096c4 <vPortExitCritical>
 80081be:	e790      	b.n	80080e2 <xQueueSemaphoreTake+0x1d6>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081c0:	6823      	ldr	r3, [r4, #0]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 80081c2:	3d01      	subs	r5, #1
 80081c4:	63a5      	str	r5, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081c6:	b173      	cbz	r3, 80081e6 <xQueueSemaphoreTake+0x2da>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	b91b      	cbnz	r3, 80081d4 <xQueueSemaphoreTake+0x2c8>
                taskEXIT_CRITICAL();
 80081cc:	f001 fa7a 	bl	80096c4 <vPortExitCritical>
                return pdPASS;
 80081d0:	2001      	movs	r0, #1
 80081d2:	e77e      	b.n	80080d2 <xQueueSemaphoreTake+0x1c6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d4:	f104 0010 	add.w	r0, r4, #16
 80081d8:	f000 fe9a 	bl	8008f10 <xTaskRemoveFromEventList>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d0f5      	beq.n	80081cc <xQueueSemaphoreTake+0x2c0>
                        queueYIELD_IF_USING_PREEMPTION();
 80081e0:	f001 fa56 	bl	8009690 <vPortYield>
 80081e4:	e7f2      	b.n	80081cc <xQueueSemaphoreTake+0x2c0>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081e6:	f001 f82d 	bl	8009244 <pvTaskIncrementMutexHeldCount>
 80081ea:	60a0      	str	r0, [r4, #8]
 80081ec:	e7ec      	b.n	80081c8 <xQueueSemaphoreTake+0x2bc>
 80081ee:	bf00      	nop

080081f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80081f0:	b510      	push	{r4, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d032      	beq.n	800825c <vQueueAddToRegistry+0x6c>

        if( pcQueueName != NULL )
 80081f6:	2900      	cmp	r1, #0
 80081f8:	d02f      	beq.n	800825a <vQueueAddToRegistry+0x6a>
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80081fa:	4b40      	ldr	r3, [pc, #256]	@ (80082fc <vQueueAddToRegistry+0x10c>)
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	4290      	cmp	r0, r2
 8008200:	d06a      	beq.n	80082d8 <vQueueAddToRegistry+0xe8>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
                    break;
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	2a00      	cmp	r2, #0
 8008206:	d02c      	beq.n	8008262 <vQueueAddToRegistry+0x72>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	4290      	cmp	r0, r2
 800820c:	d074      	beq.n	80082f8 <vQueueAddToRegistry+0x108>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	2a00      	cmp	r2, #0
 8008212:	d041      	beq.n	8008298 <vQueueAddToRegistry+0xa8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008214:	695a      	ldr	r2, [r3, #20]
 8008216:	4290      	cmp	r0, r2
 8008218:	d06c      	beq.n	80082f4 <vQueueAddToRegistry+0x104>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	2a00      	cmp	r2, #0
 800821e:	d041      	beq.n	80082a4 <vQueueAddToRegistry+0xb4>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008220:	69da      	ldr	r2, [r3, #28]
 8008222:	4290      	cmp	r0, r2
 8008224:	d05c      	beq.n	80082e0 <vQueueAddToRegistry+0xf0>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	2a00      	cmp	r2, #0
 800822a:	d041      	beq.n	80082b0 <vQueueAddToRegistry+0xc0>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800822c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800822e:	4290      	cmp	r0, r2
 8008230:	d058      	beq.n	80082e4 <vQueueAddToRegistry+0xf4>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008232:	6a1a      	ldr	r2, [r3, #32]
 8008234:	2a00      	cmp	r2, #0
 8008236:	d040      	beq.n	80082ba <vQueueAddToRegistry+0xca>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823a:	4290      	cmp	r0, r2
 800823c:	d054      	beq.n	80082e8 <vQueueAddToRegistry+0xf8>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800823e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008240:	2a00      	cmp	r2, #0
 8008242:	d03f      	beq.n	80082c4 <vQueueAddToRegistry+0xd4>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008246:	4290      	cmp	r0, r2
 8008248:	d050      	beq.n	80082ec <vQueueAddToRegistry+0xfc>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800824a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800824c:	2a00      	cmp	r2, #0
 800824e:	d03e      	beq.n	80082ce <vQueueAddToRegistry+0xde>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008252:	4290      	cmp	r0, r2
 8008254:	d04c      	beq.n	80082f0 <vQueueAddToRegistry+0x100>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	b1e3      	cbz	r3, 8008294 <vQueueAddToRegistry+0xa4>

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800825a:	bd10      	pop	{r4, pc}
        configASSERT( xQueue );
 800825c:	f001 fb56 	bl	800990c <ulSetInterruptMask>
 8008260:	e7fe      	b.n	8008260 <vQueueAddToRegistry+0x70>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	4290      	cmp	r0, r2
 8008266:	d047      	beq.n	80082f8 <vQueueAddToRegistry+0x108>
 8008268:	695a      	ldr	r2, [r3, #20]
 800826a:	4290      	cmp	r0, r2
 800826c:	d042      	beq.n	80082f4 <vQueueAddToRegistry+0x104>
 800826e:	461a      	mov	r2, r3
 8008270:	69dc      	ldr	r4, [r3, #28]
 8008272:	42a0      	cmp	r0, r4
 8008274:	d034      	beq.n	80082e0 <vQueueAddToRegistry+0xf0>
 8008276:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008278:	42a0      	cmp	r0, r4
 800827a:	d033      	beq.n	80082e4 <vQueueAddToRegistry+0xf4>
 800827c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800827e:	42a0      	cmp	r0, r4
 8008280:	d032      	beq.n	80082e8 <vQueueAddToRegistry+0xf8>
 8008282:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8008284:	42a0      	cmp	r0, r4
 8008286:	d031      	beq.n	80082ec <vQueueAddToRegistry+0xfc>
 8008288:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800828a:	42a0      	cmp	r0, r4
 800828c:	d030      	beq.n	80082f0 <vQueueAddToRegistry+0x100>
            pxEntryToWrite->xHandle = xQueue;
 800828e:	e9c2 1000 	strd	r1, r0, [r2]
    }
 8008292:	bd10      	pop	{r4, pc}
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008294:	4a1a      	ldr	r2, [pc, #104]	@ (8008300 <vQueueAddToRegistry+0x110>)
 8008296:	e7fa      	b.n	800828e <vQueueAddToRegistry+0x9e>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	4290      	cmp	r0, r2
 800829c:	d02a      	beq.n	80082f4 <vQueueAddToRegistry+0x104>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800829e:	f103 0208 	add.w	r2, r3, #8
 80082a2:	e7e5      	b.n	8008270 <vQueueAddToRegistry+0x80>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082a4:	69da      	ldr	r2, [r3, #28]
 80082a6:	4290      	cmp	r0, r2
 80082a8:	d01a      	beq.n	80082e0 <vQueueAddToRegistry+0xf0>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082aa:	f103 0210 	add.w	r2, r3, #16
 80082ae:	e7e2      	b.n	8008276 <vQueueAddToRegistry+0x86>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082b2:	4290      	cmp	r0, r2
 80082b4:	d016      	beq.n	80082e4 <vQueueAddToRegistry+0xf4>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082b6:	4a13      	ldr	r2, [pc, #76]	@ (8008304 <vQueueAddToRegistry+0x114>)
 80082b8:	e7e0      	b.n	800827c <vQueueAddToRegistry+0x8c>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082bc:	4290      	cmp	r0, r2
 80082be:	d013      	beq.n	80082e8 <vQueueAddToRegistry+0xf8>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082c0:	4a11      	ldr	r2, [pc, #68]	@ (8008308 <vQueueAddToRegistry+0x118>)
 80082c2:	e7de      	b.n	8008282 <vQueueAddToRegistry+0x92>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082c6:	4290      	cmp	r0, r2
 80082c8:	d010      	beq.n	80082ec <vQueueAddToRegistry+0xfc>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082ca:	4a10      	ldr	r2, [pc, #64]	@ (800830c <vQueueAddToRegistry+0x11c>)
 80082cc:	e7dc      	b.n	8008288 <vQueueAddToRegistry+0x98>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082d0:	4290      	cmp	r0, r2
 80082d2:	d00d      	beq.n	80082f0 <vQueueAddToRegistry+0x100>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008310 <vQueueAddToRegistry+0x120>)
        if( pxEntryToWrite != NULL )
 80082d6:	e7da      	b.n	800828e <vQueueAddToRegistry+0x9e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d8:	2200      	movs	r2, #0
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80082da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if( pxEntryToWrite != NULL )
 80082de:	e7d6      	b.n	800828e <vQueueAddToRegistry+0x9e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082e0:	2203      	movs	r2, #3
 80082e2:	e7fa      	b.n	80082da <vQueueAddToRegistry+0xea>
 80082e4:	2204      	movs	r2, #4
 80082e6:	e7f8      	b.n	80082da <vQueueAddToRegistry+0xea>
 80082e8:	2205      	movs	r2, #5
 80082ea:	e7f6      	b.n	80082da <vQueueAddToRegistry+0xea>
 80082ec:	2206      	movs	r2, #6
 80082ee:	e7f4      	b.n	80082da <vQueueAddToRegistry+0xea>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082f0:	2207      	movs	r2, #7
 80082f2:	e7f2      	b.n	80082da <vQueueAddToRegistry+0xea>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082f4:	2202      	movs	r2, #2
 80082f6:	e7f0      	b.n	80082da <vQueueAddToRegistry+0xea>
 80082f8:	2201      	movs	r2, #1
 80082fa:	e7ee      	b.n	80082da <vQueueAddToRegistry+0xea>
 80082fc:	200619d0 	.word	0x200619d0
 8008300:	20061a08 	.word	0x20061a08
 8008304:	200619e8 	.word	0x200619e8
 8008308:	200619f0 	.word	0x200619f0
 800830c:	200619f8 	.word	0x200619f8
 8008310:	20061a00 	.word	0x20061a00

08008314 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4605      	mov	r5, r0
 8008318:	460e      	mov	r6, r1
 800831a:	4614      	mov	r4, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800831c:	f001 f9c4 	bl	80096a8 <vPortEnterCritical>
 8008320:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8008324:	2bff      	cmp	r3, #255	@ 0xff
 8008326:	bf04      	itt	eq
 8008328:	2300      	moveq	r3, #0
 800832a:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 800832e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8008332:	2bff      	cmp	r3, #255	@ 0xff
 8008334:	bf04      	itt	eq
 8008336:	2300      	moveq	r3, #0
 8008338:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 800833c:	f001 f9c2 	bl	80096c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008340:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d043      	beq.n	80083ce <vQueueWaitForMessageRestricted+0xba>
    taskENTER_CRITICAL();
 8008346:	f001 f9af 	bl	80096a8 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800834a:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800834e:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008350:	2c00      	cmp	r4, #0
 8008352:	dd14      	ble.n	800837e <vQueueWaitForMessageRestricted+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008354:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8008358:	e003      	b.n	8008362 <vQueueWaitForMessageRestricted+0x4e>
            --cTxLock;
 800835a:	1e63      	subs	r3, r4, #1
 800835c:	b2da      	uxtb	r2, r3
 800835e:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008360:	b16a      	cbz	r2, 800837e <vQueueWaitForMessageRestricted+0x6a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008362:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8008364:	b15b      	cbz	r3, 800837e <vQueueWaitForMessageRestricted+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008366:	4630      	mov	r0, r6
 8008368:	f000 fdd2 	bl	8008f10 <xTaskRemoveFromEventList>
 800836c:	2800      	cmp	r0, #0
 800836e:	d0f4      	beq.n	800835a <vQueueWaitForMessageRestricted+0x46>
                        vTaskMissedYield();
 8008370:	f000 fe7c 	bl	800906c <vTaskMissedYield>
            --cTxLock;
 8008374:	1e63      	subs	r3, r4, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800837a:	2a00      	cmp	r2, #0
 800837c:	d1f1      	bne.n	8008362 <vQueueWaitForMessageRestricted+0x4e>
        pxQueue->cTxLock = queueUNLOCKED;
 800837e:	23ff      	movs	r3, #255	@ 0xff
 8008380:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008384:	f001 f99e 	bl	80096c4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8008388:	f001 f98e 	bl	80096a8 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800838c:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8008390:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008392:	2c00      	cmp	r4, #0
 8008394:	dd14      	ble.n	80083c0 <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008396:	f105 0610 	add.w	r6, r5, #16
 800839a:	e003      	b.n	80083a4 <vQueueWaitForMessageRestricted+0x90>
                --cRxLock;
 800839c:	1e63      	subs	r3, r4, #1
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80083a2:	b16a      	cbz	r2, 80083c0 <vQueueWaitForMessageRestricted+0xac>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a4:	692b      	ldr	r3, [r5, #16]
 80083a6:	b15b      	cbz	r3, 80083c0 <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 fdb1 	bl	8008f10 <xTaskRemoveFromEventList>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d0f4      	beq.n	800839c <vQueueWaitForMessageRestricted+0x88>
                    vTaskMissedYield();
 80083b2:	f000 fe5b 	bl	800906c <vTaskMissedYield>
                --cRxLock;
 80083b6:	1e63      	subs	r3, r4, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80083bc:	2a00      	cmp	r2, #0
 80083be:	d1f1      	bne.n	80083a4 <vQueueWaitForMessageRestricted+0x90>
        pxQueue->cRxLock = queueUNLOCKED;
 80083c0:	23ff      	movs	r3, #255	@ 0xff
 80083c2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        }

        prvUnlockQueue( pxQueue );

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80083c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 80083ca:	f001 b97b 	b.w	80096c4 <vPortExitCritical>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083ce:	4622      	mov	r2, r4
 80083d0:	4631      	mov	r1, r6
 80083d2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80083d6:	f000 fd33 	bl	8008e40 <vTaskPlaceOnEventListRestricted>
 80083da:	e7b4      	b.n	8008346 <vQueueWaitForMessageRestricted+0x32>

080083dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	4605      	mov	r5, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80083e2:	f001 f961 	bl	80096a8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80083e6:	4a37      	ldr	r2, [pc, #220]	@ (80084c4 <prvAddNewTaskToReadyList+0xe8>)

            if( pxCurrentTCB == NULL )
 80083e8:	4f37      	ldr	r7, [pc, #220]	@ (80084c8 <prvAddNewTaskToReadyList+0xec>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80083ea:	6813      	ldr	r3, [r2, #0]
 80083ec:	3301      	adds	r3, #1
 80083ee:	6013      	str	r3, [r2, #0]
            if( pxCurrentTCB == NULL )
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d035      	beq.n	8008462 <prvAddNewTaskToReadyList+0x86>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80083f6:	4c35      	ldr	r4, [pc, #212]	@ (80084cc <prvAddNewTaskToReadyList+0xf0>)
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083f8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
                if( xSchedulerRunning == pdFALSE )
 80083fa:	6822      	ldr	r2, [r4, #0]
 80083fc:	b352      	cbz	r2, 8008454 <prvAddNewTaskToReadyList+0x78>
 80083fe:	4e34      	ldr	r6, [pc, #208]	@ (80084d0 <prvAddNewTaskToReadyList+0xf4>)
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8008400:	4934      	ldr	r1, [pc, #208]	@ (80084d4 <prvAddNewTaskToReadyList+0xf8>)
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8008402:	4835      	ldr	r0, [pc, #212]	@ (80084d8 <prvAddNewTaskToReadyList+0xfc>)
            uxTaskNumber++;
 8008404:	680a      	ldr	r2, [r1, #0]
            prvAddTaskToReadyList( pxNewTCB );
 8008406:	f105 0c04 	add.w	ip, r5, #4
            uxTaskNumber++;
 800840a:	3201      	adds	r2, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800840c:	646a      	str	r2, [r5, #68]	@ 0x44
            uxTaskNumber++;
 800840e:	600a      	str	r2, [r1, #0]
            prvAddTaskToReadyList( pxNewTCB );
 8008410:	6802      	ldr	r2, [r0, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	bf38      	it	cc
 8008416:	6003      	strcc	r3, [r0, #0]
 8008418:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800841c:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8008420:	6841      	ldr	r1, [r0, #4]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	58f2      	ldr	r2, [r6, r3]
 8008426:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800842a:	60a9      	str	r1, [r5, #8]
 800842c:	f8c5 e00c 	str.w	lr, [r5, #12]
 8008430:	3201      	adds	r2, #1
 8008432:	f8ce c004 	str.w	ip, [lr, #4]
 8008436:	f8c1 c008 	str.w	ip, [r1, #8]
 800843a:	6168      	str	r0, [r5, #20]
 800843c:	50f2      	str	r2, [r6, r3]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800843e:	f001 f941 	bl	80096c4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	b123      	cbz	r3, 8008450 <prvAddNewTaskToReadyList+0x74>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800844a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800844c:	429a      	cmp	r2, r3
 800844e:	d310      	bcc.n	8008472 <prvAddNewTaskToReadyList+0x96>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	4e1e      	ldr	r6, [pc, #120]	@ (80084d0 <prvAddNewTaskToReadyList+0xf4>)
 8008458:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800845a:	429a      	cmp	r2, r3
                        pxCurrentTCB = pxNewTCB;
 800845c:	bf98      	it	ls
 800845e:	603d      	strls	r5, [r7, #0]
 8008460:	e7ce      	b.n	8008400 <prvAddNewTaskToReadyList+0x24>
                pxCurrentTCB = pxNewTCB;
 8008462:	603d      	str	r5, [r7, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008464:	6813      	ldr	r3, [r2, #0]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d007      	beq.n	800847a <prvAddNewTaskToReadyList+0x9e>
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800846a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800846c:	4e18      	ldr	r6, [pc, #96]	@ (80084d0 <prvAddNewTaskToReadyList+0xf4>)
 800846e:	4c17      	ldr	r4, [pc, #92]	@ (80084cc <prvAddNewTaskToReadyList+0xf0>)
 8008470:	e7c6      	b.n	8008400 <prvAddNewTaskToReadyList+0x24>
    }
 8008472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8008476:	f001 b90b 	b.w	8009690 <vPortYield>
 800847a:	4e15      	ldr	r6, [pc, #84]	@ (80084d0 <prvAddNewTaskToReadyList+0xf4>)
 800847c:	4634      	mov	r4, r6
 800847e:	f506 688c 	add.w	r8, r6, #1120	@ 0x460
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008482:	4620      	mov	r0, r4
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008484:	3414      	adds	r4, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008486:	f7ff f989 	bl	800779c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800848a:	4544      	cmp	r4, r8
 800848c:	d1f9      	bne.n	8008482 <prvAddNewTaskToReadyList+0xa6>
    }

    vListInitialise( &xDelayedTaskList1 );
 800848e:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80084f4 <prvAddNewTaskToReadyList+0x118>
    vListInitialise( &xDelayedTaskList2 );
 8008492:	4c12      	ldr	r4, [pc, #72]	@ (80084dc <prvAddNewTaskToReadyList+0x100>)
    vListInitialise( &xDelayedTaskList1 );
 8008494:	4640      	mov	r0, r8
 8008496:	f7ff f981 	bl	800779c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff f97e 	bl	800779c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80084a0:	480f      	ldr	r0, [pc, #60]	@ (80084e0 <prvAddNewTaskToReadyList+0x104>)
 80084a2:	f7ff f97b 	bl	800779c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80084a6:	480f      	ldr	r0, [pc, #60]	@ (80084e4 <prvAddNewTaskToReadyList+0x108>)
 80084a8:	f7ff f978 	bl	800779c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80084ac:	480e      	ldr	r0, [pc, #56]	@ (80084e8 <prvAddNewTaskToReadyList+0x10c>)
 80084ae:	f7ff f975 	bl	800779c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80084b2:	4b0e      	ldr	r3, [pc, #56]	@ (80084ec <prvAddNewTaskToReadyList+0x110>)
 80084b4:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084b8:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <prvAddNewTaskToReadyList+0x114>)
 80084ba:	601c      	str	r4, [r3, #0]
            prvAddTaskToReadyList( pxNewTCB );
 80084bc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80084be:	4c03      	ldr	r4, [pc, #12]	@ (80084cc <prvAddNewTaskToReadyList+0xf0>)
}
 80084c0:	e79e      	b.n	8008400 <prvAddNewTaskToReadyList+0x24>
 80084c2:	bf00      	nop
 80084c4:	20061a38 	.word	0x20061a38
 80084c8:	20061f0c 	.word	0x20061f0c
 80084cc:	20061a2c 	.word	0x20061a2c
 80084d0:	20061aac 	.word	0x20061aac
 80084d4:	20061a1c 	.word	0x20061a1c
 80084d8:	20061a30 	.word	0x20061a30
 80084dc:	20061a84 	.word	0x20061a84
 80084e0:	20061a68 	.word	0x20061a68
 80084e4:	20061a54 	.word	0x20061a54
 80084e8:	20061a3c 	.word	0x20061a3c
 80084ec:	20061a80 	.word	0x20061a80
 80084f0:	20061a7c 	.word	0x20061a7c
 80084f4:	20061a98 	.word	0x20061a98

080084f8 <vTaskSwitchContext.part.0>:
            xYieldPendings[ 0 ] = pdFALSE;
 80084f8:	2200      	movs	r2, #0
 80084fa:	4b24      	ldr	r3, [pc, #144]	@ (800858c <vTaskSwitchContext.part.0+0x94>)
    void vTaskSwitchContext( void )
 80084fc:	b570      	push	{r4, r5, r6, lr}
            taskCHECK_FOR_STACK_OVERFLOW();
 80084fe:	4c24      	ldr	r4, [pc, #144]	@ (8008590 <vTaskSwitchContext.part.0+0x98>)
            xYieldPendings[ 0 ] = pdFALSE;
 8008500:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 800850c:	d103      	bne.n	8008516 <vTaskSwitchContext.part.0+0x1e>
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008514:	d031      	beq.n	800857a <vTaskSwitchContext.part.0+0x82>
 8008516:	6821      	ldr	r1, [r4, #0]
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	3134      	adds	r1, #52	@ 0x34
 800851c:	f7f8 ffbe 	bl	800149c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8008520:	4d1c      	ldr	r5, [pc, #112]	@ (8008594 <vTaskSwitchContext.part.0+0x9c>)
 8008522:	481d      	ldr	r0, [pc, #116]	@ (8008598 <vTaskSwitchContext.part.0+0xa0>)
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800852a:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 800852e:	0099      	lsls	r1, r3, #2
 8008530:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008534:	b95e      	cbnz	r6, 800854e <vTaskSwitchContext.part.0+0x56>
 8008536:	b133      	cbz	r3, 8008546 <vTaskSwitchContext.part.0+0x4e>
 8008538:	f852 1c14 	ldr.w	r1, [r2, #-20]
 800853c:	3b01      	subs	r3, #1
 800853e:	b929      	cbnz	r1, 800854c <vTaskSwitchContext.part.0+0x54>
 8008540:	3a14      	subs	r2, #20
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f8      	bne.n	8008538 <vTaskSwitchContext.part.0+0x40>
 8008546:	f001 f9e1 	bl	800990c <ulSetInterruptMask>
 800854a:	e7fe      	b.n	800854a <vTaskSwitchContext.part.0+0x52>
 800854c:	0099      	lsls	r1, r3, #2
 800854e:	4419      	add	r1, r3
 8008550:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8008554:	4632      	mov	r2, r6
 8008556:	6871      	ldr	r1, [r6, #4]
 8008558:	3208      	adds	r2, #8
 800855a:	6849      	ldr	r1, [r1, #4]
 800855c:	4291      	cmp	r1, r2
 800855e:	6071      	str	r1, [r6, #4]
 8008560:	bf08      	it	eq
 8008562:	68f1      	ldreq	r1, [r6, #12]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008564:	4a0d      	ldr	r2, [pc, #52]	@ (800859c <vTaskSwitchContext.part.0+0xa4>)
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8008566:	bf08      	it	eq
 8008568:	6071      	streq	r1, [r6, #4]
 800856a:	68c9      	ldr	r1, [r1, #12]
 800856c:	6021      	str	r1, [r4, #0]
 800856e:	602b      	str	r3, [r5, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8008570:	6823      	ldr	r3, [r4, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	3354      	adds	r3, #84	@ 0x54
 8008576:	6013      	str	r3, [r2, #0]
    }
 8008578:	bd70      	pop	{r4, r5, r6, pc}
            taskCHECK_FOR_STACK_OVERFLOW();
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008580:	d1c9      	bne.n	8008516 <vTaskSwitchContext.part.0+0x1e>
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8008588:	d1c5      	bne.n	8008516 <vTaskSwitchContext.part.0+0x1e>
 800858a:	e7c9      	b.n	8008520 <vTaskSwitchContext.part.0+0x28>
 800858c:	20061a24 	.word	0x20061a24
 8008590:	20061f0c 	.word	0x20061f0c
 8008594:	20061a30 	.word	0x20061a30
 8008598:	20061aac 	.word	0x20061aac
 800859c:	20000f88 	.word	0x20000f88

080085a0 <prvIdleTask>:
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	4d14      	ldr	r5, [pc, #80]	@ (80085f4 <prvIdleTask+0x54>)
 80085a4:	4f14      	ldr	r7, [pc, #80]	@ (80085f8 <prvIdleTask+0x58>)
 80085a6:	4e15      	ldr	r6, [pc, #84]	@ (80085fc <prvIdleTask+0x5c>)
 80085a8:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8008600 <prvIdleTask+0x60>
 80085ac:	e018      	b.n	80085e0 <prvIdleTask+0x40>
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80085ae:	f001 f87b 	bl	80096a8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68dc      	ldr	r4, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b6:	1d20      	adds	r0, r4, #4
 80085b8:	f7ff f926 	bl	8007808 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	3b01      	subs	r3, #1
 80085c0:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	602b      	str	r3, [r5, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80085c8:	f001 f87c 	bl	80096c4 <vPortExitCritical>
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 80085cc:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80085d0:	f004 fffa 	bl	800d5c8 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80085d4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80085d6:	f001 fa9b 	bl	8009b10 <vPortFree>
            vPortFree( pxTCB );
 80085da:	4620      	mov	r0, r4
 80085dc:	f001 fa98 	bl	8009b10 <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e3      	bne.n	80085ae <prvIdleTask+0xe>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80085e6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d9f8      	bls.n	80085e0 <prvIdleTask+0x40>
                taskYIELD();
 80085ee:	f001 f84f 	bl	8009690 <vPortYield>
 80085f2:	e7f5      	b.n	80085e0 <prvIdleTask+0x40>
 80085f4:	20061a50 	.word	0x20061a50
 80085f8:	20061a54 	.word	0x20061a54
 80085fc:	20061a38 	.word	0x20061a38
 8008600:	20061aac 	.word	0x20061aac

08008604 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008608:	4b60      	ldr	r3, [pc, #384]	@ (800878c <xTaskIncrementTick.part.0+0x188>)
BaseType_t xTaskIncrementTick( void )
 800860a:	b085      	sub	sp, #20
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800860c:	681c      	ldr	r4, [r3, #0]
 800860e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8008610:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 8008612:	2c00      	cmp	r4, #0
 8008614:	d075      	beq.n	8008702 <xTaskIncrementTick.part.0+0xfe>
 8008616:	495e      	ldr	r1, [pc, #376]	@ (8008790 <xTaskIncrementTick.part.0+0x18c>)
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008618:	680b      	ldr	r3, [r1, #0]
 800861a:	429c      	cmp	r4, r3
 800861c:	f0c0 808a 	bcc.w	8008734 <xTaskIncrementTick.part.0+0x130>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008620:	4d5c      	ldr	r5, [pc, #368]	@ (8008794 <xTaskIncrementTick.part.0+0x190>)
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80ab 	beq.w	8008782 <xTaskIncrementTick.part.0+0x17e>
    BaseType_t xSwitchRequired = pdFALSE;
 800862c:	f04f 0e00 	mov.w	lr, #0
 8008630:	4b59      	ldr	r3, [pc, #356]	@ (8008798 <xTaskIncrementTick.part.0+0x194>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008632:	4676      	mov	r6, lr
 8008634:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8008638:	4858      	ldr	r0, [pc, #352]	@ (800879c <xTaskIncrementTick.part.0+0x198>)
                    prvAddTaskToReadyList( pxTCB );
 800863a:	4f59      	ldr	r7, [pc, #356]	@ (80087a0 <xTaskIncrementTick.part.0+0x19c>)
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	e053      	b.n	80086e8 <xTaskIncrementTick.part.0+0xe4>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008640:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8008644:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 8008648:	f8c2 9008 	str.w	r9, [r2, #8]
 800864c:	f8c9 2004 	str.w	r2, [r9, #4]
 8008650:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008654:	428a      	cmp	r2, r1
 8008656:	f8dc 2000 	ldr.w	r2, [ip]
 800865a:	bf08      	it	eq
 800865c:	f8cc 9004 	streq.w	r9, [ip, #4]
 8008660:	3a01      	subs	r2, #1
 8008662:	615e      	str	r6, [r3, #20]
 8008664:	f8cc 2000 	str.w	r2, [ip]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008668:	f8d3 c028 	ldr.w	ip, [r3, #40]	@ 0x28
 800866c:	f1bc 0f00 	cmp.w	ip, #0
 8008670:	d011      	beq.n	8008696 <xTaskIncrementTick.part.0+0x92>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008672:	e9d3 2907 	ldrd	r2, r9, [r3, #28]
 8008676:	f8c2 9008 	str.w	r9, [r2, #8]
 800867a:	f8c9 2004 	str.w	r2, [r9, #4]
 800867e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008682:	4542      	cmp	r2, r8
 8008684:	f8dc 2000 	ldr.w	r2, [ip]
 8008688:	bf08      	it	eq
 800868a:	f8cc 9004 	streq.w	r9, [ip, #4]
 800868e:	3a01      	subs	r2, #1
 8008690:	629e      	str	r6, [r3, #40]	@ 0x28
 8008692:	f8cc 2000 	str.w	r2, [ip]
                    prvAddTaskToReadyList( pxTCB );
 8008696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008698:	f8d7 8000 	ldr.w	r8, [r7]
 800869c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80086a0:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
 80086a4:	f8da 9004 	ldr.w	r9, [sl, #4]
 80086a8:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 80086ac:	f8d9 b008 	ldr.w	fp, [r9, #8]
 80086b0:	f8c3 9008 	str.w	r9, [r3, #8]
 80086b4:	f8c3 b00c 	str.w	fp, [r3, #12]
 80086b8:	4542      	cmp	r2, r8
 80086ba:	f8cb 1004 	str.w	r1, [fp, #4]
 80086be:	f8c9 1008 	str.w	r1, [r9, #8]
 80086c2:	f8c3 a014 	str.w	sl, [r3, #20]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086c6:	9b01      	ldr	r3, [sp, #4]
                    prvAddTaskToReadyList( pxTCB );
 80086c8:	bf88      	it	hi
 80086ca:	603a      	strhi	r2, [r7, #0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086cc:	6819      	ldr	r1, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80086ce:	f104 0801 	add.w	r8, r4, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d2:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 80086d4:	f840 802c 	str.w	r8, [r0, ip, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086d8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086da:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 80086dc:	428a      	cmp	r2, r1
 80086de:	bf88      	it	hi
 80086e0:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d047      	beq.n	8008778 <xTaskIncrementTick.part.0+0x174>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086e8:	682b      	ldr	r3, [r5, #0]
                    if( xConstTickCount < xItemValue )
 80086ea:	9c02      	ldr	r4, [sp, #8]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086f0:	685a      	ldr	r2, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086f2:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
 80086f4:	4294      	cmp	r4, r2
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80086f6:	f103 0818 	add.w	r8, r3, #24
                    if( xConstTickCount < xItemValue )
 80086fa:	d2a1      	bcs.n	8008640 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
 80086fc:	9903      	ldr	r1, [sp, #12]
 80086fe:	600a      	str	r2, [r1, #0]
                        break;
 8008700:	e01d      	b.n	800873e <xTaskIncrementTick.part.0+0x13a>
            taskSWITCH_DELAYED_LISTS();
 8008702:	4b24      	ldr	r3, [pc, #144]	@ (8008794 <xTaskIncrementTick.part.0+0x190>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	2a00      	cmp	r2, #0
 800870a:	d132      	bne.n	8008772 <xTaskIncrementTick.part.0+0x16e>
 800870c:	4a25      	ldr	r2, [pc, #148]	@ (80087a4 <xTaskIncrementTick.part.0+0x1a0>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	6811      	ldr	r1, [r2, #0]
 8008712:	6019      	str	r1, [r3, #0]
 8008714:	4924      	ldr	r1, [pc, #144]	@ (80087a8 <xTaskIncrementTick.part.0+0x1a4>)
 8008716:	6010      	str	r0, [r2, #0]
 8008718:	680a      	ldr	r2, [r1, #0]
 800871a:	3201      	adds	r2, #1
 800871c:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	bb02      	cbnz	r2, 8008766 <xTaskIncrementTick.part.0+0x162>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008724:	f04f 33ff 	mov.w	r3, #4294967295
 8008728:	4919      	ldr	r1, [pc, #100]	@ (8008790 <xTaskIncrementTick.part.0+0x18c>)
 800872a:	600b      	str	r3, [r1, #0]
        if( xConstTickCount >= xNextTaskUnblockTime )
 800872c:	680b      	ldr	r3, [r1, #0]
 800872e:	429c      	cmp	r4, r3
 8008730:	f4bf af76 	bcs.w	8008620 <xTaskIncrementTick.part.0+0x1c>
    BaseType_t xSwitchRequired = pdFALSE;
 8008734:	f04f 0e00 	mov.w	lr, #0
 8008738:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <xTaskIncrementTick.part.0+0x194>)
 800873a:	4818      	ldr	r0, [pc, #96]	@ (800879c <xTaskIncrementTick.part.0+0x198>)
 800873c:	9301      	str	r3, [sp, #4]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800873e:	9b01      	ldr	r3, [sp, #4]
                if( xYieldPendings[ 0 ] != pdFALSE )
 8008740:	4a1a      	ldr	r2, [pc, #104]	@ (80087ac <xTaskIncrementTick.part.0+0x1a8>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8008742:	681b      	ldr	r3, [r3, #0]
                if( xYieldPendings[ 0 ] != pdFALSE )
 8008744:	6812      	ldr	r2, [r2, #0]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800874c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                    xSwitchRequired = pdTRUE;
 8008750:	2b02      	cmp	r3, #2
 8008752:	bf28      	it	cs
 8008754:	f04f 0e01 	movcs.w	lr, #1
                    xSwitchRequired = pdTRUE;
 8008758:	2a00      	cmp	r2, #0
}
 800875a:	bf0c      	ite	eq
 800875c:	4670      	moveq	r0, lr
 800875e:	2001      	movne	r0, #1
 8008760:	b005      	add	sp, #20
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4909      	ldr	r1, [pc, #36]	@ (8008790 <xTaskIncrementTick.part.0+0x18c>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	600b      	str	r3, [r1, #0]
    }
}
 8008770:	e752      	b.n	8008618 <xTaskIncrementTick.part.0+0x14>
            taskSWITCH_DELAYED_LISTS();
 8008772:	f001 f8cb 	bl	800990c <ulSetInterruptMask>
 8008776:	e7fe      	b.n	8008776 <xTaskIncrementTick.part.0+0x172>
 8008778:	9903      	ldr	r1, [sp, #12]
                    xNextTaskUnblockTime = portMAX_DELAY;
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
 800877e:	600b      	str	r3, [r1, #0]
                    break;
 8008780:	e7dd      	b.n	800873e <xTaskIncrementTick.part.0+0x13a>
    BaseType_t xSwitchRequired = pdFALSE;
 8008782:	469e      	mov	lr, r3
 8008784:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <xTaskIncrementTick.part.0+0x194>)
 8008786:	4805      	ldr	r0, [pc, #20]	@ (800879c <xTaskIncrementTick.part.0+0x198>)
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	e7f6      	b.n	800877a <xTaskIncrementTick.part.0+0x176>
 800878c:	20061a34 	.word	0x20061a34
 8008790:	20061a18 	.word	0x20061a18
 8008794:	20061a80 	.word	0x20061a80
 8008798:	20061f0c 	.word	0x20061f0c
 800879c:	20061aac 	.word	0x20061aac
 80087a0:	20061a30 	.word	0x20061a30
 80087a4:	20061a7c 	.word	0x20061a7c
 80087a8:	20061a20 	.word	0x20061a20
 80087ac:	20061a24 	.word	0x20061a24

080087b0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80087b4:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8008920 <xTaskResumeAll.part.0+0x170>
BaseType_t xTaskResumeAll( void )
 80087b8:	b083      	sub	sp, #12
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80087ba:	f8d8 3000 	ldr.w	r3, [r8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	f8c8 3000 	str.w	r3, [r8]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80087c4:	f8d8 e000 	ldr.w	lr, [r8]
 80087c8:	f1be 0f00 	cmp.w	lr, #0
 80087cc:	f040 8081 	bne.w	80088d2 <xTaskResumeAll.part.0+0x122>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087d0:	4b4c      	ldr	r3, [pc, #304]	@ (8008904 <xTaskResumeAll.part.0+0x154>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d07c      	beq.n	80088d2 <xTaskResumeAll.part.0+0x122>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087d8:	f8df c148 	ldr.w	ip, [pc, #328]	@ 8008924 <xTaskResumeAll.part.0+0x174>
 80087dc:	f8dc 3000 	ldr.w	r3, [ip]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 808b 	beq.w	80088fc <xTaskResumeAll.part.0+0x14c>
 80087e6:	4b48      	ldr	r3, [pc, #288]	@ (8008908 <xTaskResumeAll.part.0+0x158>)
 80087e8:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8008928 <xTaskResumeAll.part.0+0x178>
 80087ec:	4e47      	ldr	r6, [pc, #284]	@ (800890c <xTaskResumeAll.part.0+0x15c>)
 80087ee:	9301      	str	r3, [sp, #4]
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80087f0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80087f4:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80087f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087f8:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 80087fc:	6854      	ldr	r4, [r2, #4]
 80087fe:	6081      	str	r1, [r0, #8]
 8008800:	6048      	str	r0, [r1, #4]
 8008802:	f103 0018 	add.w	r0, r3, #24
 8008806:	4284      	cmp	r4, r0
 8008808:	bf08      	it	eq
 800880a:	6051      	streq	r1, [r2, #4]
 800880c:	6811      	ldr	r1, [r2, #0]
 800880e:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8008812:	3901      	subs	r1, #1
 8008814:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008816:	695a      	ldr	r2, [r3, #20]
 8008818:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 800881c:	60a1      	str	r1, [r4, #8]
 800881e:	604c      	str	r4, [r1, #4]
 8008820:	6854      	ldr	r4, [r2, #4]
 8008822:	1d1d      	adds	r5, r3, #4
 8008824:	42ac      	cmp	r4, r5
 8008826:	bf08      	it	eq
 8008828:	6051      	streq	r1, [r2, #4]
 800882a:	6811      	ldr	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 800882c:	f8d9 0000 	ldr.w	r0, [r9]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008830:	3901      	subs	r1, #1
 8008832:	6011      	str	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 8008834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008836:	4282      	cmp	r2, r0
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008838:	4835      	ldr	r0, [pc, #212]	@ (8008910 <xTaskResumeAll.part.0+0x160>)
                        prvAddTaskToReadyList( pxTCB );
 800883a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800883e:	bf88      	it	hi
 8008840:	f8c9 2000 	strhi.w	r2, [r9]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008844:	6800      	ldr	r0, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 8008846:	eb06 0781 	add.w	r7, r6, r1, lsl #2
 800884a:	687c      	ldr	r4, [r7, #4]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800884c:	f8d0 a02c 	ldr.w	sl, [r0, #44]	@ 0x2c
                        prvAddTaskToReadyList( pxTCB );
 8008850:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 8008854:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8008858:	3001      	adds	r0, #1
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800885a:	4552      	cmp	r2, sl
                        prvAddTaskToReadyList( pxTCB );
 800885c:	609c      	str	r4, [r3, #8]
 800885e:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008862:	f8cb 5004 	str.w	r5, [fp, #4]
 8008866:	60a5      	str	r5, [r4, #8]
 8008868:	615f      	str	r7, [r3, #20]
 800886a:	f846 0021 	str.w	r0, [r6, r1, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800886e:	d937      	bls.n	80088e0 <xTaskResumeAll.part.0+0x130>
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8008870:	2201      	movs	r2, #1
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	601a      	str	r2, [r3, #0]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008876:	f8dc 3000 	ldr.w	r3, [ip]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1b8      	bne.n	80087f0 <xTaskResumeAll.part.0+0x40>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800887e:	4b25      	ldr	r3, [pc, #148]	@ (8008914 <xTaskResumeAll.part.0+0x164>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	2a00      	cmp	r2, #0
 8008886:	d034      	beq.n	80088f2 <xTaskResumeAll.part.0+0x142>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4b23      	ldr	r3, [pc, #140]	@ (8008918 <xTaskResumeAll.part.0+0x168>)
 800888c:	68d2      	ldr	r2, [r2, #12]
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	601a      	str	r2, [r3, #0]
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008892:	4d22      	ldr	r5, [pc, #136]	@ (800891c <xTaskResumeAll.part.0+0x16c>)
 8008894:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 8008896:	b19c      	cbz	r4, 80088c0 <xTaskResumeAll.part.0+0x110>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8008898:	2601      	movs	r6, #1
 800889a:	9f01      	ldr	r7, [sp, #4]
 800889c:	e005      	b.n	80088aa <xTaskResumeAll.part.0+0xfa>
 800889e:	f7ff feb1 	bl	8008604 <xTaskIncrementTick.part.0>
                                if( xTaskIncrementTick() != pdFALSE )
 80088a2:	b100      	cbz	r0, 80088a6 <xTaskResumeAll.part.0+0xf6>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80088a4:	603e      	str	r6, [r7, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80088a6:	3c01      	subs	r4, #1
 80088a8:	d009      	beq.n	80088be <xTaskResumeAll.part.0+0x10e>
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80088aa:	f8d8 3000 	ldr.w	r3, [r8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f5      	beq.n	800889e <xTaskResumeAll.part.0+0xee>
        xPendedTicks += 1U;
 80088b2:	682b      	ldr	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80088b4:	3c01      	subs	r4, #1
        xPendedTicks += 1U;
 80088b6:	f103 0301 	add.w	r3, r3, #1
 80088ba:	602b      	str	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80088bc:	d1f5      	bne.n	80088aa <xTaskResumeAll.part.0+0xfa>
                            xPendedTicks = 0;
 80088be:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	b12b      	cbz	r3, 80088d2 <xTaskResumeAll.part.0+0x122>
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80088c6:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <xTaskResumeAll.part.0+0x160>)
                            xAlreadyYielded = pdTRUE;
 80088c8:	2401      	movs	r4, #1
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f000 fee0 	bl	8009690 <vPortYield>
 80088d0:	e000      	b.n	80088d4 <xTaskResumeAll.part.0+0x124>
    BaseType_t xAlreadyYielded = pdFALSE;
 80088d2:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
 80088d4:	f000 fef6 	bl	80096c4 <vPortExitCritical>
}
 80088d8:	4620      	mov	r0, r4
 80088da:	b003      	add	sp, #12
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e0:	f8dc 3000 	ldr.w	r3, [ip]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d183      	bne.n	80087f0 <xTaskResumeAll.part.0+0x40>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008914 <xTaskResumeAll.part.0+0x164>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d1ca      	bne.n	8008888 <xTaskResumeAll.part.0+0xd8>
        xNextTaskUnblockTime = portMAX_DELAY;
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295
 80088f6:	4b08      	ldr	r3, [pc, #32]	@ (8008918 <xTaskResumeAll.part.0+0x168>)
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	e7ca      	b.n	8008892 <xTaskResumeAll.part.0+0xe2>
 80088fc:	4b02      	ldr	r3, [pc, #8]	@ (8008908 <xTaskResumeAll.part.0+0x158>)
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	e7c7      	b.n	8008892 <xTaskResumeAll.part.0+0xe2>
 8008902:	bf00      	nop
 8008904:	20061a38 	.word	0x20061a38
 8008908:	20061a24 	.word	0x20061a24
 800890c:	20061aac 	.word	0x20061aac
 8008910:	20061f0c 	.word	0x20061f0c
 8008914:	20061a80 	.word	0x20061a80
 8008918:	20061a18 	.word	0x20061a18
 800891c:	20061a28 	.word	0x20061a28
 8008920:	20061a10 	.word	0x20061a10
 8008924:	20061a68 	.word	0x20061a68
 8008928:	20061a30 	.word	0x20061a30

0800892c <xTaskCreate>:
    {
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008930:	0096      	lsls	r6, r2, #2
    {
 8008932:	4680      	mov	r8, r0
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008934:	4630      	mov	r0, r6
    {
 8008936:	460d      	mov	r5, r1
 8008938:	4699      	mov	r9, r3
 800893a:	f8dd a020 	ldr.w	sl, [sp, #32]
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800893e:	f001 f833 	bl	80099a8 <pvPortMalloc>
            if( pxStack != NULL )
 8008942:	2800      	cmp	r0, #0
 8008944:	f000 808d 	beq.w	8008a62 <xTaskCreate+0x136>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008948:	4607      	mov	r7, r0
 800894a:	20a8      	movs	r0, #168	@ 0xa8
 800894c:	f001 f82c 	bl	80099a8 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8008950:	4604      	mov	r4, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	f000 8082 	beq.w	8008a5c <xTaskCreate+0x130>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008958:	22a8      	movs	r2, #168	@ 0xa8
 800895a:	2100      	movs	r1, #0
 800895c:	f004 fe17 	bl	800d58e <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008960:	4638      	mov	r0, r7
                    pxNewTCB->pxStack = pxStack;
 8008962:	6327      	str	r7, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008964:	21a5      	movs	r1, #165	@ 0xa5
 8008966:	4632      	mov	r2, r6
 8008968:	f004 fe11 	bl	800d58e <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800896c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    if( pcName != NULL )
 800896e:	2d00      	cmp	r5, #0
 8008970:	d03e      	beq.n	80089f0 <xTaskCreate+0xc4>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008972:	782b      	ldrb	r3, [r5, #0]
 8008974:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
            if( pcName[ x ] == ( char ) 0x00 )
 8008978:	2b00      	cmp	r3, #0
 800897a:	d036      	beq.n	80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800897c:	786b      	ldrb	r3, [r5, #1]
 800897e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            if( pcName[ x ] == ( char ) 0x00 )
 8008982:	b393      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008984:	78ab      	ldrb	r3, [r5, #2]
 8008986:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
            if( pcName[ x ] == ( char ) 0x00 )
 800898a:	b373      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800898c:	78eb      	ldrb	r3, [r5, #3]
 800898e:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
            if( pcName[ x ] == ( char ) 0x00 )
 8008992:	b353      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008994:	792b      	ldrb	r3, [r5, #4]
 8008996:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            if( pcName[ x ] == ( char ) 0x00 )
 800899a:	b333      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800899c:	796b      	ldrb	r3, [r5, #5]
 800899e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
            if( pcName[ x ] == ( char ) 0x00 )
 80089a2:	b313      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089a4:	79ab      	ldrb	r3, [r5, #6]
 80089a6:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
            if( pcName[ x ] == ( char ) 0x00 )
 80089aa:	b1f3      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089ac:	79eb      	ldrb	r3, [r5, #7]
 80089ae:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
            if( pcName[ x ] == ( char ) 0x00 )
 80089b2:	b1d3      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089b4:	7a2b      	ldrb	r3, [r5, #8]
 80089b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
            if( pcName[ x ] == ( char ) 0x00 )
 80089ba:	b1b3      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089bc:	7a6b      	ldrb	r3, [r5, #9]
 80089be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            if( pcName[ x ] == ( char ) 0x00 )
 80089c2:	b193      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089c4:	7aab      	ldrb	r3, [r5, #10]
 80089c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            if( pcName[ x ] == ( char ) 0x00 )
 80089ca:	b173      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089cc:	7aeb      	ldrb	r3, [r5, #11]
 80089ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
            if( pcName[ x ] == ( char ) 0x00 )
 80089d2:	b153      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089d4:	7b2b      	ldrb	r3, [r5, #12]
 80089d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            if( pcName[ x ] == ( char ) 0x00 )
 80089da:	b133      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089dc:	7b6b      	ldrb	r3, [r5, #13]
 80089de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
            if( pcName[ x ] == ( char ) 0x00 )
 80089e2:	b113      	cbz	r3, 80089ea <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089e4:	7bab      	ldrb	r3, [r5, #14]
 80089e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80089ea:	2300      	movs	r3, #0
 80089ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80089f0:	f1ba 0f37 	cmp.w	sl, #55	@ 0x37
 80089f4:	d82f      	bhi.n	8008a56 <xTaskCreate+0x12a>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089f6:	1d20      	adds	r0, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 80089f8:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 80089fc:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a00:	f7fe fed8 	bl	80077b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a04:	f104 0018 	add.w	r0, r4, #24
 8008a08:	f7fe fed4 	bl	80077b4 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008a0c:	f1ca 0338 	rsb	r3, sl, #56	@ 0x38
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008a10:	224c      	movs	r2, #76	@ 0x4c
 8008a12:	2100      	movs	r1, #0
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008a14:	61a3      	str	r3, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a16:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a18:	6264      	str	r4, [r4, #36]	@ 0x24
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008a1a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008a1e:	f004 fdb6 	bl	800d58e <memset>
 8008a22:	4912      	ldr	r1, [pc, #72]	@ (8008a6c <xTaskCreate+0x140>)
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008a24:	3e04      	subs	r6, #4
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008a26:	f101 0368 	add.w	r3, r1, #104	@ 0x68
 8008a2a:	65a1      	str	r1, [r4, #88]	@ 0x58
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008a2c:	19b8      	adds	r0, r7, r6
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008a2e:	31d0      	adds	r1, #208	@ 0xd0
 8008a30:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8008a32:	6621      	str	r1, [r4, #96]	@ 0x60
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008a34:	464b      	mov	r3, r9
 8008a36:	4642      	mov	r2, r8
 8008a38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a3a:	f020 0007 	bic.w	r0, r0, #7
 8008a3e:	f000 fe83 	bl	8009748 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008a44:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8008a46:	b103      	cbz	r3, 8008a4a <xTaskCreate+0x11e>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a48:	601c      	str	r4, [r3, #0]
            prvAddNewTaskToReadyList( pxNewTCB );
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff fcc6 	bl	80083dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008a50:	2001      	movs	r0, #1
    }
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008a56:	f000 ff59 	bl	800990c <ulSetInterruptMask>
 8008a5a:	e7fe      	b.n	8008a5a <xTaskCreate+0x12e>
                    vPortFreeStack( pxStack );
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f001 f857 	bl	8009b10 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8008a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6a:	bf00      	nop
 8008a6c:	2007af78 	.word	0x2007af78

08008a70 <vTaskDelete>:
    {
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	4604      	mov	r4, r0
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008a74:	4e2a      	ldr	r6, [pc, #168]	@ (8008b20 <vTaskDelete+0xb0>)
        taskENTER_CRITICAL();
 8008a76:	f000 fe17 	bl	80096a8 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008a7a:	2c00      	cmp	r4, #0
 8008a7c:	d043      	beq.n	8008b06 <vTaskDelete+0x96>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a7e:	1d27      	adds	r7, r4, #4
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7fe fec1 	bl	8007808 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a88:	b11b      	cbz	r3, 8008a92 <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a8a:	f104 0018 	add.w	r0, r4, #24
 8008a8e:	f7fe febb 	bl	8007808 <uxListRemove>
            uxTaskNumber++;
 8008a92:	4a24      	ldr	r2, [pc, #144]	@ (8008b24 <vTaskDelete+0xb4>)
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008a94:	4d24      	ldr	r5, [pc, #144]	@ (8008b28 <vTaskDelete+0xb8>)
            uxTaskNumber++;
 8008a96:	6813      	ldr	r3, [r2, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	42a3      	cmp	r3, r4
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008aa0:	682b      	ldr	r3, [r5, #0]
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008aa2:	d023      	beq.n	8008aec <vTaskDelete+0x7c>
                --uxCurrentNumberOfTasks;
 8008aa4:	4a21      	ldr	r2, [pc, #132]	@ (8008b2c <vTaskDelete+0xbc>)
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	6013      	str	r3, [r2, #0]
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aac:	4b20      	ldr	r3, [pc, #128]	@ (8008b30 <vTaskDelete+0xc0>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	b1b2      	cbz	r2, 8008ae2 <vTaskDelete+0x72>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b34 <vTaskDelete+0xc4>)
 8008ab8:	68d2      	ldr	r2, [r2, #12]
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	601a      	str	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8008abe:	f000 fe01 	bl	80096c4 <vPortExitCritical>
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 8008ac2:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008ac6:	f004 fd7f 	bl	800d5c8 <_reclaim_reent>
            vPortFreeStack( pxTCB->pxStack );
 8008aca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008acc:	f001 f820 	bl	8009b10 <vPortFree>
            vPortFree( pxTCB );
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f001 f81d 	bl	8009b10 <vPortFree>
            if( xSchedulerRunning != pdFALSE )
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	b113      	cbz	r3, 8008ae0 <vTaskDelete+0x70>
                if( pxTCB == pxCurrentTCB )
 8008ada:	6833      	ldr	r3, [r6, #0]
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	d014      	beq.n	8008b0a <vTaskDelete+0x9a>
    }
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	4b13      	ldr	r3, [pc, #76]	@ (8008b34 <vTaskDelete+0xc4>)
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e7e8      	b.n	8008abe <vTaskDelete+0x4e>
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0d9      	beq.n	8008aa4 <vTaskDelete+0x34>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008af0:	4639      	mov	r1, r7
 8008af2:	4811      	ldr	r0, [pc, #68]	@ (8008b38 <vTaskDelete+0xc8>)
 8008af4:	f7fe fe62 	bl	80077bc <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8008af8:	4a10      	ldr	r2, [pc, #64]	@ (8008b3c <vTaskDelete+0xcc>)
 8008afa:	6813      	ldr	r3, [r2, #0]
 8008afc:	3301      	adds	r3, #1
 8008afe:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8008b00:	f000 fde0 	bl	80096c4 <vPortExitCritical>
        if( xDeleteTCBInIdleTask != pdTRUE )
 8008b04:	e7e7      	b.n	8008ad6 <vTaskDelete+0x66>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008b06:	6834      	ldr	r4, [r6, #0]
 8008b08:	e7b9      	b.n	8008a7e <vTaskDelete+0xe>
                    configASSERT( uxSchedulerSuspended == 0 );
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <vTaskDelete+0xd0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	b113      	cbz	r3, 8008b16 <vTaskDelete+0xa6>
 8008b10:	f000 fefc 	bl	800990c <ulSetInterruptMask>
 8008b14:	e7fe      	b.n	8008b14 <vTaskDelete+0xa4>
    }
 8008b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    taskYIELD_WITHIN_API();
 8008b1a:	f000 bdb9 	b.w	8009690 <vPortYield>
 8008b1e:	bf00      	nop
 8008b20:	20061f0c 	.word	0x20061f0c
 8008b24:	20061a1c 	.word	0x20061a1c
 8008b28:	20061a2c 	.word	0x20061a2c
 8008b2c:	20061a38 	.word	0x20061a38
 8008b30:	20061a80 	.word	0x20061a80
 8008b34:	20061a18 	.word	0x20061a18
 8008b38:	20061a54 	.word	0x20061a54
 8008b3c:	20061a50 	.word	0x20061a50
 8008b40:	20061a10 	.word	0x20061a10

08008b44 <xTaskDelayUntil>:
    {
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        configASSERT( pxPreviousWakeTime );
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d041      	beq.n	8008bd0 <xTaskDelayUntil+0x8c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	d038      	beq.n	8008bc2 <xTaskDelayUntil+0x7e>
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008b50:	4d2a      	ldr	r5, [pc, #168]	@ (8008bfc <xTaskDelayUntil+0xb8>)
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	602b      	str	r3, [r5, #0]
            const TickType_t xConstTickCount = xTickCount;
 8008b58:	4e29      	ldr	r6, [pc, #164]	@ (8008c00 <xTaskDelayUntil+0xbc>)
 8008b5a:	6832      	ldr	r2, [r6, #0]
            configASSERT( uxSchedulerSuspended == 1U );
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d12c      	bne.n	8008bbc <xTaskDelayUntil+0x78>
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008b62:	6803      	ldr	r3, [r0, #0]
 8008b64:	185c      	adds	r4, r3, r1
 8008b66:	bf2c      	ite	cs
 8008b68:	2101      	movcs	r1, #1
 8008b6a:	2100      	movcc	r1, #0
            if( xConstTickCount < *pxPreviousWakeTime )
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d82b      	bhi.n	8008bc8 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008b70:	b389      	cbz	r1, 8008bd6 <xTaskDelayUntil+0x92>
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008b72:	4b24      	ldr	r3, [pc, #144]	@ (8008c04 <xTaskDelayUntil+0xc0>)
    const TickType_t xConstTickCount = xTickCount;
 8008b74:	f8d6 8000 	ldr.w	r8, [r6]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b78:	4f23      	ldr	r7, [pc, #140]	@ (8008c08 <xTaskDelayUntil+0xc4>)
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008b7a:	f8d3 9000 	ldr.w	r9, [r3]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008b7e:	4b23      	ldr	r3, [pc, #140]	@ (8008c0c <xTaskDelayUntil+0xc8>)
            *pxPreviousWakeTime = xTimeToWake;
 8008b80:	6004      	str	r4, [r0, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008b82:	f8d3 a000 	ldr.w	sl, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b86:	6838      	ldr	r0, [r7, #0]
 8008b88:	eba8 0602 	sub.w	r6, r8, r2
 8008b8c:	3004      	adds	r0, #4
 8008b8e:	f7fe fe3b 	bl	8007808 <uxListRemove>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008b92:	4434      	add	r4, r6

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b94:	683b      	ldr	r3, [r7, #0]

            if( xTimeToWake < xConstTickCount )
 8008b96:	45a0      	cmp	r8, r4
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008b98:	6839      	ldr	r1, [r7, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b9a:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008b9c:	d921      	bls.n	8008be2 <xTaskDelayUntil+0x9e>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	3104      	adds	r1, #4
 8008ba2:	f7fe fe19 	bl	80077d8 <vListInsert>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008ba6:	2601      	movs	r6, #1
        taskENTER_CRITICAL();
 8008ba8:	f000 fd7e 	bl	80096a8 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b1ab      	cbz	r3, 8008bdc <xTaskDelayUntil+0x98>
 8008bb0:	f7ff fdfe 	bl	80087b0 <xTaskResumeAll.part.0>
        if( xAlreadyYielded == pdFALSE )
 8008bb4:	b1f8      	cbz	r0, 8008bf6 <xTaskDelayUntil+0xb2>
    }
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            configASSERT( uxSchedulerSuspended == 1U );
 8008bbc:	f000 fea6 	bl	800990c <ulSetInterruptMask>
 8008bc0:	e7fe      	b.n	8008bc0 <xTaskDelayUntil+0x7c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8008bc2:	f000 fea3 	bl	800990c <ulSetInterruptMask>
 8008bc6:	e7fe      	b.n	8008bc6 <xTaskDelayUntil+0x82>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008bc8:	b929      	cbnz	r1, 8008bd6 <xTaskDelayUntil+0x92>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008bca:	2600      	movs	r6, #0
            *pxPreviousWakeTime = xTimeToWake;
 8008bcc:	6004      	str	r4, [r0, #0]
 8008bce:	e7eb      	b.n	8008ba8 <xTaskDelayUntil+0x64>
        configASSERT( pxPreviousWakeTime );
 8008bd0:	f000 fe9c 	bl	800990c <ulSetInterruptMask>
 8008bd4:	e7fe      	b.n	8008bd4 <xTaskDelayUntil+0x90>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008bd6:	42a2      	cmp	r2, r4
 8008bd8:	d3cb      	bcc.n	8008b72 <xTaskDelayUntil+0x2e>
 8008bda:	e7f6      	b.n	8008bca <xTaskDelayUntil+0x86>
            configASSERT( uxSchedulerSuspended != 0U );
 8008bdc:	f000 fe96 	bl	800990c <ulSetInterruptMask>
 8008be0:	e7fe      	b.n	8008be0 <xTaskDelayUntil+0x9c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008be2:	4648      	mov	r0, r9
 8008be4:	3104      	adds	r1, #4
 8008be6:	f7fe fdf7 	bl	80077d8 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 8008bea:	4b09      	ldr	r3, [pc, #36]	@ (8008c10 <xTaskDelayUntil+0xcc>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	4294      	cmp	r4, r2
 8008bf0:	d2d9      	bcs.n	8008ba6 <xTaskDelayUntil+0x62>
                {
                    xNextTaskUnblockTime = xTimeToWake;
 8008bf2:	601c      	str	r4, [r3, #0]
 8008bf4:	e7d7      	b.n	8008ba6 <xTaskDelayUntil+0x62>
            taskYIELD_WITHIN_API();
 8008bf6:	f000 fd4b 	bl	8009690 <vPortYield>
        return xShouldDelay;
 8008bfa:	e7dc      	b.n	8008bb6 <xTaskDelayUntil+0x72>
 8008bfc:	20061a10 	.word	0x20061a10
 8008c00:	20061a34 	.word	0x20061a34
 8008c04:	20061a80 	.word	0x20061a80
 8008c08:	20061f0c 	.word	0x20061f0c
 8008c0c:	20061a7c 	.word	0x20061a7c
 8008c10:	20061a18 	.word	0x20061a18

08008c14 <vTaskStartScheduler>:
{
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008c18:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008c1c:	f000 fec4 	bl	80099a8 <pvPortMalloc>
            if( pxStack != NULL )
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d056      	beq.n	8008cd2 <vTaskStartScheduler+0xbe>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008c24:	4606      	mov	r6, r0
 8008c26:	20a8      	movs	r0, #168	@ 0xa8
 8008c28:	f000 febe 	bl	80099a8 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d04c      	beq.n	8008ccc <vTaskStartScheduler+0xb8>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008c32:	2500      	movs	r5, #0
 8008c34:	22a8      	movs	r2, #168	@ 0xa8
 8008c36:	4629      	mov	r1, r5
 8008c38:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 8008d24 <vTaskStartScheduler+0x110>
 8008c3c:	f004 fca7 	bl	800d58e <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c44:	21a5      	movs	r1, #165	@ 0xa5
 8008c46:	4630      	mov	r0, r6
                    pxNewTCB->pxStack = pxStack;
 8008c48:	6326      	str	r6, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008c4a:	f004 fca0 	bl	800d58e <memset>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c4e:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008c52:	f884 5043 	strb.w	r5, [r4, #67]	@ 0x43
    pxNewTCB->uxPriority = uxPriority;
 8008c56:	62e5      	str	r5, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8008c58:	64e5      	str	r5, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c5a:	1d20      	adds	r0, r4, #4
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c5c:	f8c4 9034 	str.w	r9, [r4, #52]	@ 0x34
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008c60:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c62:	f7fe fda7 	bl	80077b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c66:	f104 0018 	add.w	r0, r4, #24
 8008c6a:	f7fe fda3 	bl	80077b4 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008c6e:	2338      	movs	r3, #56	@ 0x38
 8008c70:	4f23      	ldr	r7, [pc, #140]	@ (8008d00 <vTaskStartScheduler+0xec>)
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008c72:	4629      	mov	r1, r5
 8008c74:	224c      	movs	r2, #76	@ 0x4c
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008c76:	61a3      	str	r3, [r4, #24]
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008c78:	f506 76fe 	add.w	r6, r6, #508	@ 0x1fc
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c7c:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c7e:	6264      	str	r4, [r4, #36]	@ 0x24
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008c80:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008c84:	f004 fc83 	bl	800d58e <memset>
 8008c88:	f107 0868 	add.w	r8, r7, #104	@ 0x68
 8008c8c:	f107 0cd0 	add.w	ip, r7, #208	@ 0xd0
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008c90:	f026 0607 	bic.w	r6, r6, #7
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008c94:	462b      	mov	r3, r5
 8008c96:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008c98:	f8c4 c060 	str.w	ip, [r4, #96]	@ 0x60
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008c9c:	4a19      	ldr	r2, [pc, #100]	@ (8008d04 <vTaskStartScheduler+0xf0>)
 8008c9e:	4630      	mov	r0, r6
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ca0:	e9c4 7816 	strd	r7, r8, [r4, #88]	@ 0x58
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008ca4:	f000 fd50 	bl	8009748 <pxPortInitialiseStack>
 8008ca8:	4602      	mov	r2, r0
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008caa:	4b17      	ldr	r3, [pc, #92]	@ (8008d08 <vTaskStartScheduler+0xf4>)
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008cac:	6022      	str	r2, [r4, #0]
            prvAddNewTaskToReadyList( pxNewTCB );
 8008cae:	4620      	mov	r0, r4
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cb0:	601c      	str	r4, [r3, #0]
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8008cb2:	2501      	movs	r5, #1
            prvAddNewTaskToReadyList( pxNewTCB );
 8008cb4:	f7ff fb92 	bl	80083dc <prvAddNewTaskToReadyList>
            xReturn = xTimerCreateTimerTask();
 8008cb8:	f000 fc76 	bl	80095a8 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8008cbc:	42a8      	cmp	r0, r5
 8008cbe:	d00b      	beq.n	8008cd8 <vTaskStartScheduler+0xc4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d006      	beq.n	8008cd2 <vTaskStartScheduler+0xbe>
    ( void ) uxTopUsedPriority;
 8008cc4:	4b11      	ldr	r3, [pc, #68]	@ (8008d0c <vTaskStartScheduler+0xf8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
}
 8008cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 ff1f 	bl	8009b10 <vPortFree>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cd2:	f000 fe1b 	bl	800990c <ulSetInterruptMask>
 8008cd6:	e7fe      	b.n	8008cd6 <vTaskStartScheduler+0xc2>
        portDISABLE_INTERRUPTS();
 8008cd8:	f000 fe18 	bl	800990c <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 8008cdc:	f04f 34ff 	mov.w	r4, #4294967295
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ce0:	2200      	movs	r2, #0
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d10 <vTaskStartScheduler+0xfc>)
 8008ce4:	490b      	ldr	r1, [pc, #44]	@ (8008d14 <vTaskStartScheduler+0x100>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8008ce8:	480b      	ldr	r0, [pc, #44]	@ (8008d18 <vTaskStartScheduler+0x104>)
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008cea:	3354      	adds	r3, #84	@ 0x54
 8008cec:	600b      	str	r3, [r1, #0]
        xSchedulerRunning = pdTRUE;
 8008cee:	490b      	ldr	r1, [pc, #44]	@ (8008d1c <vTaskStartScheduler+0x108>)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <vTaskStartScheduler+0x10c>)
        xNextTaskUnblockTime = portMAX_DELAY;
 8008cf2:	6004      	str	r4, [r0, #0]
        xSchedulerRunning = pdTRUE;
 8008cf4:	600d      	str	r5, [r1, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cf6:	601a      	str	r2, [r3, #0]
        ( void ) xPortStartScheduler();
 8008cf8:	f000 fd62 	bl	80097c0 <xPortStartScheduler>
 8008cfc:	e7e2      	b.n	8008cc4 <vTaskStartScheduler+0xb0>
 8008cfe:	bf00      	nop
 8008d00:	2007af78 	.word	0x2007af78
 8008d04:	080085a1 	.word	0x080085a1
 8008d08:	20061a14 	.word	0x20061a14
 8008d0c:	0801e588 	.word	0x0801e588
 8008d10:	20061f0c 	.word	0x20061f0c
 8008d14:	20000f88 	.word	0x20000f88
 8008d18:	20061a18 	.word	0x20061a18
 8008d1c:	20061a2c 	.word	0x20061a2c
 8008d20:	20061a34 	.word	0x20061a34
 8008d24:	454c4449 	.word	0x454c4449

08008d28 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008d28:	4a02      	ldr	r2, [pc, #8]	@ (8008d34 <vTaskSuspendAll+0xc>)
 8008d2a:	6813      	ldr	r3, [r2, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	6013      	str	r3, [r2, #0]
}
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20061a10 	.word	0x20061a10

08008d38 <xTaskResumeAll>:
{
 8008d38:	b508      	push	{r3, lr}
        taskENTER_CRITICAL();
 8008d3a:	f000 fcb5 	bl	80096a8 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8008d3e:	4b05      	ldr	r3, [pc, #20]	@ (8008d54 <xTaskResumeAll+0x1c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	b11b      	cbz	r3, 8008d4c <xTaskResumeAll+0x14>
}
 8008d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008d48:	f7ff bd32 	b.w	80087b0 <xTaskResumeAll.part.0>
            configASSERT( uxSchedulerSuspended != 0U );
 8008d4c:	f000 fdde 	bl	800990c <ulSetInterruptMask>
 8008d50:	e7fe      	b.n	8008d50 <xTaskResumeAll+0x18>
 8008d52:	bf00      	nop
 8008d54:	20061a10 	.word	0x20061a10

08008d58 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8008d58:	4b01      	ldr	r3, [pc, #4]	@ (8008d60 <xTaskGetTickCount+0x8>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
}
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20061a34 	.word	0x20061a34

08008d64 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008d64:	4b05      	ldr	r3, [pc, #20]	@ (8008d7c <xTaskIncrementTick+0x18>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	b90b      	cbnz	r3, 8008d6e <xTaskIncrementTick+0xa>
 8008d6a:	f7ff bc4b 	b.w	8008604 <xTaskIncrementTick.part.0>
        xPendedTicks += 1U;
 8008d6e:	4a04      	ldr	r2, [pc, #16]	@ (8008d80 <xTaskIncrementTick+0x1c>)
}
 8008d70:	2000      	movs	r0, #0
        xPendedTicks += 1U;
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	3301      	adds	r3, #1
 8008d76:	6013      	str	r3, [r2, #0]
}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20061a10 	.word	0x20061a10
 8008d80:	20061a28 	.word	0x20061a28

08008d84 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8008d84:	4b04      	ldr	r3, [pc, #16]	@ (8008d98 <vTaskSwitchContext+0x14>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	b11b      	cbz	r3, 8008d92 <vTaskSwitchContext+0xe>
            xYieldPendings[ 0 ] = pdTRUE;
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	4b03      	ldr	r3, [pc, #12]	@ (8008d9c <vTaskSwitchContext+0x18>)
 8008d8e:	601a      	str	r2, [r3, #0]
    }
 8008d90:	4770      	bx	lr
 8008d92:	f7ff bbb1 	b.w	80084f8 <vTaskSwitchContext.part.0>
 8008d96:	bf00      	nop
 8008d98:	20061a10 	.word	0x20061a10
 8008d9c:	20061a24 	.word	0x20061a24

08008da0 <vTaskPlaceOnEventList>:
{
 8008da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( pxEventList );
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d031      	beq.n	8008e0c <vTaskPlaceOnEventList+0x6c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008da8:	460c      	mov	r4, r1
 8008daa:	4d1f      	ldr	r5, [pc, #124]	@ (8008e28 <vTaskPlaceOnEventList+0x88>)
 8008dac:	6829      	ldr	r1, [r5, #0]
 8008dae:	3118      	adds	r1, #24
 8008db0:	f7fe fd12 	bl	80077d8 <vListInsert>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008db4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e2c <vTaskPlaceOnEventList+0x8c>)
    const TickType_t xConstTickCount = xTickCount;
 8008db6:	491e      	ldr	r1, [pc, #120]	@ (8008e30 <vTaskPlaceOnEventList+0x90>)
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008db8:	4a1e      	ldr	r2, [pc, #120]	@ (8008e34 <vTaskPlaceOnEventList+0x94>)
    const TickType_t xConstTickCount = xTickCount;
 8008dba:	680e      	ldr	r6, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008dbc:	6817      	ldr	r7, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008dbe:	f8d3 8000 	ldr.w	r8, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc2:	6828      	ldr	r0, [r5, #0]
 8008dc4:	3004      	adds	r0, #4
 8008dc6:	f7fe fd1f 	bl	8007808 <uxListRemove>
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dca:	1c63      	adds	r3, r4, #1
 8008dcc:	d00a      	beq.n	8008de4 <vTaskPlaceOnEventList+0x44>
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	19a4      	adds	r4, r4, r6
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008dd2:	6829      	ldr	r1, [r5, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dd4:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008dd6:	d31c      	bcc.n	8008e12 <vTaskPlaceOnEventList+0x72>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008dd8:	4640      	mov	r0, r8
}
 8008dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008dde:	3104      	adds	r1, #4
 8008de0:	f7fe bcfa 	b.w	80077d8 <vListInsert>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de4:	4b14      	ldr	r3, [pc, #80]	@ (8008e38 <vTaskPlaceOnEventList+0x98>)
 8008de6:	6829      	ldr	r1, [r5, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	681c      	ldr	r4, [r3, #0]
 8008dec:	608a      	str	r2, [r1, #8]
 8008dee:	682e      	ldr	r6, [r5, #0]
 8008df0:	3401      	adds	r4, #1
 8008df2:	6828      	ldr	r0, [r5, #0]
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	601c      	str	r4, [r3, #0]
 8008df8:	682d      	ldr	r5, [r5, #0]
 8008dfa:	6894      	ldr	r4, [r2, #8]
 8008dfc:	3004      	adds	r0, #4
 8008dfe:	3104      	adds	r1, #4
 8008e00:	60f4      	str	r4, [r6, #12]
 8008e02:	6060      	str	r0, [r4, #4]
 8008e04:	6091      	str	r1, [r2, #8]
 8008e06:	616b      	str	r3, [r5, #20]
}
 8008e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( pxEventList );
 8008e0c:	f000 fd7e 	bl	800990c <ulSetInterruptMask>
 8008e10:	e7fe      	b.n	8008e10 <vTaskPlaceOnEventList+0x70>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e12:	4638      	mov	r0, r7
 8008e14:	3104      	adds	r1, #4
 8008e16:	f7fe fcdf 	bl	80077d8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008e1a:	4b08      	ldr	r3, [pc, #32]	@ (8008e3c <vTaskPlaceOnEventList+0x9c>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	4294      	cmp	r4, r2
                    xNextTaskUnblockTime = xTimeToWake;
 8008e20:	bf38      	it	cc
 8008e22:	601c      	strcc	r4, [r3, #0]
}
 8008e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e28:	20061f0c 	.word	0x20061f0c
 8008e2c:	20061a7c 	.word	0x20061a7c
 8008e30:	20061a34 	.word	0x20061a34
 8008e34:	20061a80 	.word	0x20061a80
 8008e38:	20061a3c 	.word	0x20061a3c
 8008e3c:	20061a18 	.word	0x20061a18

08008e40 <vTaskPlaceOnEventListRestricted>:
    {
 8008e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        configASSERT( pxEventList );
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d054      	beq.n	8008ef2 <vTaskPlaceOnEventListRestricted+0xb2>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e48:	4694      	mov	ip, r2
 8008e4a:	4c2b      	ldr	r4, [pc, #172]	@ (8008ef8 <vTaskPlaceOnEventListRestricted+0xb8>)
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	6841      	ldr	r1, [r0, #4]
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	f8d4 e000 	ldr.w	lr, [r4]
 8008e56:	6827      	ldr	r7, [r4, #0]
 8008e58:	688a      	ldr	r2, [r1, #8]
 8008e5a:	61d9      	str	r1, [r3, #28]
 8008e5c:	6826      	ldr	r6, [r4, #0]
 8008e5e:	6803      	ldr	r3, [r0, #0]
 8008e60:	3718      	adds	r7, #24
 8008e62:	f8ce 2020 	str.w	r2, [lr, #32]
 8008e66:	6057      	str	r7, [r2, #4]
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	3618      	adds	r6, #24
 8008e6e:	608e      	str	r6, [r1, #8]
 8008e70:	6290      	str	r0, [r2, #40]	@ 0x28
    const TickType_t xConstTickCount = xTickCount;
 8008e72:	4922      	ldr	r1, [pc, #136]	@ (8008efc <vTaskPlaceOnEventListRestricted+0xbc>)
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e74:	6003      	str	r3, [r0, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008e76:	4a22      	ldr	r2, [pc, #136]	@ (8008f00 <vTaskPlaceOnEventListRestricted+0xc0>)
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008e78:	4b22      	ldr	r3, [pc, #136]	@ (8008f04 <vTaskPlaceOnEventListRestricted+0xc4>)
        if( xWaitIndefinitely != pdFALSE )
 8008e7a:	f1bc 0f00 	cmp.w	ip, #0
 8008e7e:	d01a      	beq.n	8008eb6 <vTaskPlaceOnEventListRestricted+0x76>
    const TickType_t xConstTickCount = xTickCount;
 8008e80:	6809      	ldr	r1, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008e82:	6812      	ldr	r2, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008e84:	681b      	ldr	r3, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	3004      	adds	r0, #4
 8008e8a:	f7fe fcbd 	bl	8007808 <uxListRemove>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f08 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008e90:	6819      	ldr	r1, [r3, #0]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	3101      	adds	r1, #1
 8008e96:	6019      	str	r1, [r3, #0]
 8008e98:	6821      	ldr	r1, [r4, #0]
 8008e9a:	6890      	ldr	r0, [r2, #8]
 8008e9c:	608a      	str	r2, [r1, #8]
 8008e9e:	6821      	ldr	r1, [r4, #0]
 8008ea0:	60c8      	str	r0, [r1, #12]
 8008ea2:	6821      	ldr	r1, [r4, #0]
 8008ea4:	3104      	adds	r1, #4
 8008ea6:	6041      	str	r1, [r0, #4]
 8008ea8:	6821      	ldr	r1, [r4, #0]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	3104      	adds	r1, #4
 8008eae:	6091      	str	r1, [r2, #8]
 8008eb0:	6143      	str	r3, [r0, #20]
    }
 8008eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const TickType_t xConstTickCount = xTickCount;
 8008eb6:	680e      	ldr	r6, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008eb8:	6817      	ldr	r7, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008eba:	f8d3 8000 	ldr.w	r8, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebe:	6820      	ldr	r0, [r4, #0]
 8008ec0:	3004      	adds	r0, #4
 8008ec2:	f7fe fca1 	bl	8007808 <uxListRemove>
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	19ad      	adds	r5, r5, r6
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008eca:	6821      	ldr	r1, [r4, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ecc:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008ece:	d305      	bcc.n	8008edc <vTaskPlaceOnEventListRestricted+0x9c>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008ed0:	4640      	mov	r0, r8
    }
 8008ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008ed6:	3104      	adds	r1, #4
 8008ed8:	f7fe bc7e 	b.w	80077d8 <vListInsert>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008edc:	4638      	mov	r0, r7
 8008ede:	3104      	adds	r1, #4
 8008ee0:	f7fe fc7a 	bl	80077d8 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008ee4:	4b09      	ldr	r3, [pc, #36]	@ (8008f0c <vTaskPlaceOnEventListRestricted+0xcc>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	4295      	cmp	r5, r2
                    xNextTaskUnblockTime = xTimeToWake;
 8008eea:	bf38      	it	cc
 8008eec:	601d      	strcc	r5, [r3, #0]
    }
 8008eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( pxEventList );
 8008ef2:	f000 fd0b 	bl	800990c <ulSetInterruptMask>
 8008ef6:	e7fe      	b.n	8008ef6 <vTaskPlaceOnEventListRestricted+0xb6>
 8008ef8:	20061f0c 	.word	0x20061f0c
 8008efc:	20061a34 	.word	0x20061a34
 8008f00:	20061a80 	.word	0x20061a80
 8008f04:	20061a7c 	.word	0x20061a7c
 8008f08:	20061a3c 	.word	0x20061a3c
 8008f0c:	20061a18 	.word	0x20061a18

08008f10 <xTaskRemoveFromEventList>:
{
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f12:	68c3      	ldr	r3, [r0, #12]
 8008f14:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d054      	beq.n	8008fc4 <xTaskRemoveFromEventList+0xb4>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008f1a:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8008f1e:	2600      	movs	r6, #0
 8008f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f22:	6081      	str	r1, [r0, #8]
 8008f24:	6048      	str	r0, [r1, #4]
 8008f26:	6850      	ldr	r0, [r2, #4]
 8008f28:	f103 0418 	add.w	r4, r3, #24
 8008f2c:	42a0      	cmp	r0, r4
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008f2e:	4827      	ldr	r0, [pc, #156]	@ (8008fcc <xTaskRemoveFromEventList+0xbc>)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008f30:	bf08      	it	eq
 8008f32:	6051      	streq	r1, [r2, #4]
 8008f34:	6811      	ldr	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008f36:	6805      	ldr	r5, [r0, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008f38:	3901      	subs	r1, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f3a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008f3c:	629e      	str	r6, [r3, #40]	@ 0x28
 8008f3e:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008f40:	b1a5      	cbz	r5, 8008f6c <xTaskRemoveFromEventList+0x5c>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f42:	4a23      	ldr	r2, [pc, #140]	@ (8008fd0 <xTaskRemoveFromEventList+0xc0>)
 8008f44:	6815      	ldr	r5, [r2, #0]
 8008f46:	6851      	ldr	r1, [r2, #4]
 8008f48:	3501      	adds	r5, #1
 8008f4a:	6015      	str	r5, [r2, #0]
 8008f4c:	688d      	ldr	r5, [r1, #8]
 8008f4e:	61d9      	str	r1, [r3, #28]
 8008f50:	621d      	str	r5, [r3, #32]
 8008f52:	606c      	str	r4, [r5, #4]
 8008f54:	608c      	str	r4, [r1, #8]
 8008f56:	629a      	str	r2, [r3, #40]	@ 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f58:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd4 <xTaskRemoveFromEventList+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5e:	4283      	cmp	r3, r0
 8008f60:	d22e      	bcs.n	8008fc0 <xTaskRemoveFromEventList+0xb0>
            xYieldPendings[ 0 ] = pdTRUE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd8 <xTaskRemoveFromEventList+0xc8>)
            xReturn = pdTRUE;
 8008f66:	4618      	mov	r0, r3
            xYieldPendings[ 0 ] = pdTRUE;
 8008f68:	6013      	str	r3, [r2, #0]
}
 8008f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008f6c:	695a      	ldr	r2, [r3, #20]
 8008f6e:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8008f72:	60a1      	str	r1, [r4, #8]
 8008f74:	604c      	str	r4, [r1, #4]
 8008f76:	6854      	ldr	r4, [r2, #4]
 8008f78:	1d1e      	adds	r6, r3, #4
 8008f7a:	42b4      	cmp	r4, r6
 8008f7c:	bf08      	it	eq
 8008f7e:	6051      	streq	r1, [r2, #4]
 8008f80:	6811      	ldr	r1, [r2, #0]
 8008f82:	3901      	subs	r1, #1
 8008f84:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008f86:	4a15      	ldr	r2, [pc, #84]	@ (8008fdc <xTaskRemoveFromEventList+0xcc>)
 8008f88:	6811      	ldr	r1, [r2, #0]
 8008f8a:	4281      	cmp	r1, r0
 8008f8c:	4914      	ldr	r1, [pc, #80]	@ (8008fe0 <xTaskRemoveFromEventList+0xd0>)
 8008f8e:	bf38      	it	cc
 8008f90:	6010      	strcc	r0, [r2, #0]
 8008f92:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8008f96:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8008f9a:	687d      	ldr	r5, [r7, #4]
 8008f9c:	0092      	lsls	r2, r2, #2
 8008f9e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8008fa2:	588c      	ldr	r4, [r1, r2]
 8008fa4:	609d      	str	r5, [r3, #8]
 8008fa6:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008faa:	f8cc 6004 	str.w	r6, [ip, #4]
 8008fae:	60ae      	str	r6, [r5, #8]
 8008fb0:	615f      	str	r7, [r3, #20]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fb2:	4b08      	ldr	r3, [pc, #32]	@ (8008fd4 <xTaskRemoveFromEventList+0xc4>)
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008fb4:	3401      	adds	r4, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fb6:	681b      	ldr	r3, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008fb8:	508c      	str	r4, [r1, r2]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	4283      	cmp	r3, r0
 8008fbe:	d3d0      	bcc.n	8008f62 <xTaskRemoveFromEventList+0x52>
            xReturn = pdFALSE;
 8008fc0:	2000      	movs	r0, #0
}
 8008fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( pxUnblockedTCB );
 8008fc4:	f000 fca2 	bl	800990c <ulSetInterruptMask>
 8008fc8:	e7fe      	b.n	8008fc8 <xTaskRemoveFromEventList+0xb8>
 8008fca:	bf00      	nop
 8008fcc:	20061a10 	.word	0x20061a10
 8008fd0:	20061a68 	.word	0x20061a68
 8008fd4:	20061f0c 	.word	0x20061f0c
 8008fd8:	20061a24 	.word	0x20061a24
 8008fdc:	20061a30 	.word	0x20061a30
 8008fe0:	20061aac 	.word	0x20061aac

08008fe4 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fe4:	4a03      	ldr	r2, [pc, #12]	@ (8008ff4 <vTaskInternalSetTimeOutState+0x10>)
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008fe6:	4b04      	ldr	r3, [pc, #16]	@ (8008ff8 <vTaskInternalSetTimeOutState+0x14>)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fe8:	6812      	ldr	r2, [r2, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	e9c0 2300 	strd	r2, r3, [r0]
}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20061a20 	.word	0x20061a20
 8008ff8:	20061a34 	.word	0x20061a34

08008ffc <xTaskCheckForTimeOut>:
{
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxTimeOut );
 8008ffe:	b368      	cbz	r0, 800905c <xTaskCheckForTimeOut+0x60>
    configASSERT( pxTicksToWait );
 8009000:	460d      	mov	r5, r1
 8009002:	b341      	cbz	r1, 8009056 <xTaskCheckForTimeOut+0x5a>
 8009004:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8009006:	f000 fb4f 	bl	80096a8 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 800900a:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 800900c:	4a15      	ldr	r2, [pc, #84]	@ (8009064 <xTaskCheckForTimeOut+0x68>)
            if( *pxTicksToWait == portMAX_DELAY )
 800900e:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 8009010:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8009012:	d01b      	beq.n	800904c <xTaskCheckForTimeOut+0x50>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8009014:	e9d4 6000 	ldrd	r6, r0, [r4]
 8009018:	f8df c04c 	ldr.w	ip, [pc, #76]	@ 8009068 <xTaskCheckForTimeOut+0x6c>
 800901c:	f8dc 7000 	ldr.w	r7, [ip]
 8009020:	42be      	cmp	r6, r7
 8009022:	d008      	beq.n	8009036 <xTaskCheckForTimeOut+0x3a>
 8009024:	4288      	cmp	r0, r1
 8009026:	d806      	bhi.n	8009036 <xTaskCheckForTimeOut+0x3a>
            *pxTicksToWait = ( TickType_t ) 0;
 8009028:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800902a:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 800902c:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 800902e:	f000 fb49 	bl	80096c4 <vPortExitCritical>
}
 8009032:	4620      	mov	r0, r4
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009036:	1a0f      	subs	r7, r1, r0
        else if( xElapsedTime < *pxTicksToWait )
 8009038:	42bb      	cmp	r3, r7
 800903a:	d9f5      	bls.n	8009028 <xTaskCheckForTimeOut+0x2c>
            *pxTicksToWait -= xElapsedTime;
 800903c:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800903e:	f8dc 1000 	ldr.w	r1, [ip]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009042:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 8009044:	4403      	add	r3, r0
 8009046:	602b      	str	r3, [r5, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009048:	e9c4 1200 	strd	r1, r2, [r4]
                xReturn = pdFALSE;
 800904c:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 800904e:	f000 fb39 	bl	80096c4 <vPortExitCritical>
}
 8009052:	4620      	mov	r0, r4
 8009054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( pxTicksToWait );
 8009056:	f000 fc59 	bl	800990c <ulSetInterruptMask>
 800905a:	e7fe      	b.n	800905a <xTaskCheckForTimeOut+0x5e>
    configASSERT( pxTimeOut );
 800905c:	f000 fc56 	bl	800990c <ulSetInterruptMask>
 8009060:	e7fe      	b.n	8009060 <xTaskCheckForTimeOut+0x64>
 8009062:	bf00      	nop
 8009064:	20061a34 	.word	0x20061a34
 8009068:	20061a20 	.word	0x20061a20

0800906c <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800906c:	2201      	movs	r2, #1
 800906e:	4b01      	ldr	r3, [pc, #4]	@ (8009074 <vTaskMissedYield+0x8>)
 8009070:	601a      	str	r2, [r3, #0]
}
 8009072:	4770      	bx	lr
 8009074:	20061a24 	.word	0x20061a24

08009078 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8009078:	4b05      	ldr	r3, [pc, #20]	@ (8009090 <xTaskGetSchedulerState+0x18>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	b133      	cbz	r3, 800908c <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800907e:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <xTaskGetSchedulerState+0x1c>)
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	fab0 f080 	clz	r0, r0
 8009086:	0940      	lsrs	r0, r0, #5
 8009088:	0040      	lsls	r0, r0, #1
 800908a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 800908c:	2001      	movs	r0, #1
    }
 800908e:	4770      	bx	lr
 8009090:	20061a2c 	.word	0x20061a2c
 8009094:	20061a10 	.word	0x20061a10

08009098 <xTaskPriorityInherit>:
    {
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800909a:	4604      	mov	r4, r0
 800909c:	b1c8      	cbz	r0, 80090d2 <xTaskPriorityInherit+0x3a>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800909e:	4d1f      	ldr	r5, [pc, #124]	@ (800911c <xTaskPriorityInherit+0x84>)
 80090a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80090a2:	682a      	ldr	r2, [r5, #0]
 80090a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d214      	bcs.n	80090d4 <xTaskPriorityInherit+0x3c>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80090aa:	6982      	ldr	r2, [r0, #24]
 80090ac:	2a00      	cmp	r2, #0
 80090ae:	db04      	blt.n	80090ba <xTaskPriorityInherit+0x22>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80090b0:	682a      	ldr	r2, [r5, #0]
 80090b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80090b4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80090b8:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090ba:	4e19      	ldr	r6, [pc, #100]	@ (8009120 <xTaskPriorityInherit+0x88>)
 80090bc:	6962      	ldr	r2, [r4, #20]
 80090be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80090c2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d00c      	beq.n	80090e4 <xTaskPriorityInherit+0x4c>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090ca:	682b      	ldr	r3, [r5, #0]
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
                xReturn = pdTRUE;
 80090d0:	2001      	movs	r0, #1
    }
 80090d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	4298      	cmp	r0, r3
 80090dc:	bf2c      	ite	cs
 80090de:	2000      	movcs	r0, #0
 80090e0:	2001      	movcc	r0, #1
    }
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090e4:	1d27      	adds	r7, r4, #4
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7fe fb8e 	bl	8007808 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090ec:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80090ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009124 <xTaskPriorityInherit+0x8c>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80090f2:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80090f6:	428b      	cmp	r3, r1
 80090f8:	bf88      	it	hi
 80090fa:	6013      	strhi	r3, [r2, #0]
 80090fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009100:	0098      	lsls	r0, r3, #2
 8009102:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009106:	6859      	ldr	r1, [r3, #4]
 8009108:	5832      	ldr	r2, [r6, r0]
 800910a:	688d      	ldr	r5, [r1, #8]
 800910c:	3201      	adds	r2, #1
 800910e:	60a1      	str	r1, [r4, #8]
 8009110:	60e5      	str	r5, [r4, #12]
 8009112:	606f      	str	r7, [r5, #4]
 8009114:	608f      	str	r7, [r1, #8]
 8009116:	6163      	str	r3, [r4, #20]
 8009118:	5032      	str	r2, [r6, r0]
 800911a:	e7d9      	b.n	80090d0 <xTaskPriorityInherit+0x38>
 800911c:	20061f0c 	.word	0x20061f0c
 8009120:	20061aac 	.word	0x20061aac
 8009124:	20061a30 	.word	0x20061a30

08009128 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 8009128:	b198      	cbz	r0, 8009152 <xTaskPriorityDisinherit+0x2a>
    {
 800912a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB == pxCurrentTCB );
 800912c:	4b1d      	ldr	r3, [pc, #116]	@ (80091a4 <xTaskPriorityDisinherit+0x7c>)
 800912e:	4604      	mov	r4, r0
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4283      	cmp	r3, r0
 8009134:	d002      	beq.n	800913c <xTaskPriorityDisinherit+0x14>
 8009136:	f000 fbe9 	bl	800990c <ulSetInterruptMask>
 800913a:	e7fe      	b.n	800913a <xTaskPriorityDisinherit+0x12>
            configASSERT( pxTCB->uxMutexesHeld );
 800913c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913e:	b153      	cbz	r3, 8009156 <xTaskPriorityDisinherit+0x2e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009140:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009142:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8009144:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009146:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 8009148:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800914a:	d000      	beq.n	800914e <xTaskPriorityDisinherit+0x26>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800914c:	b133      	cbz	r3, 800915c <xTaskPriorityDisinherit+0x34>
        BaseType_t xReturn = pdFALSE;
 800914e:	2000      	movs	r0, #0
    }
 8009150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BaseType_t xReturn = pdFALSE;
 8009152:	2000      	movs	r0, #0
    }
 8009154:	4770      	bx	lr
            configASSERT( pxTCB->uxMutexesHeld );
 8009156:	f000 fbd9 	bl	800990c <ulSetInterruptMask>
 800915a:	e7fe      	b.n	800915a <xTaskPriorityDisinherit+0x32>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800915c:	1d05      	adds	r5, r0, #4
 800915e:	4628      	mov	r0, r5
 8009160:	f7fe fb52 	bl	8007808 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009164:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8009166:	4a10      	ldr	r2, [pc, #64]	@ (80091a8 <xTaskPriorityDisinherit+0x80>)
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8009168:	f1c3 0038 	rsb	r0, r3, #56	@ 0x38
 800916c:	61a0      	str	r0, [r4, #24]
                    xReturn = pdTRUE;
 800916e:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
 8009170:	6811      	ldr	r1, [r2, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009172:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8009174:	428b      	cmp	r3, r1
 8009176:	bf88      	it	hi
 8009178:	6013      	strhi	r3, [r2, #0]
 800917a:	4a0c      	ldr	r2, [pc, #48]	@ (80091ac <xTaskPriorityDisinherit+0x84>)
 800917c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009180:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8009184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009188:	685f      	ldr	r7, [r3, #4]
 800918a:	f852 100e 	ldr.w	r1, [r2, lr]
 800918e:	68be      	ldr	r6, [r7, #8]
 8009190:	4401      	add	r1, r0
 8009192:	60a7      	str	r7, [r4, #8]
 8009194:	60e6      	str	r6, [r4, #12]
 8009196:	6075      	str	r5, [r6, #4]
 8009198:	60bd      	str	r5, [r7, #8]
 800919a:	6163      	str	r3, [r4, #20]
 800919c:	f842 100e 	str.w	r1, [r2, lr]
    }
 80091a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20061f0c 	.word	0x20061f0c
 80091a8:	20061a30 	.word	0x20061a30
 80091ac:	20061aac 	.word	0x20061aac

080091b0 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 80091b0:	b180      	cbz	r0, 80091d4 <vTaskPriorityDisinheritAfterTimeout+0x24>
    {
 80091b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB->uxMutexesHeld );
 80091b4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80091b6:	4604      	mov	r4, r0
 80091b8:	b14b      	cbz	r3, 80091ce <vTaskPriorityDisinheritAfterTimeout+0x1e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091ba:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
            if( pxTCB->uxPriority != uxPriorityToUse )
 80091bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091be:	4281      	cmp	r1, r0
 80091c0:	bf38      	it	cc
 80091c2:	4601      	movcc	r1, r0
            if( pxTCB->uxPriority != uxPriorityToUse )
 80091c4:	428a      	cmp	r2, r1
 80091c6:	d001      	beq.n	80091cc <vTaskPriorityDisinheritAfterTimeout+0x1c>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d004      	beq.n	80091d6 <vTaskPriorityDisinheritAfterTimeout+0x26>
    }
 80091cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB->uxMutexesHeld );
 80091ce:	f000 fb9d 	bl	800990c <ulSetInterruptMask>
 80091d2:	e7fe      	b.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0x22>
 80091d4:	4770      	bx	lr
                    configASSERT( pxTCB != pxCurrentTCB );
 80091d6:	4b18      	ldr	r3, [pc, #96]	@ (8009238 <vTaskPriorityDisinheritAfterTimeout+0x88>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	42a3      	cmp	r3, r4
 80091dc:	d029      	beq.n	8009232 <vTaskPriorityDisinheritAfterTimeout+0x82>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80091de:	69a3      	ldr	r3, [r4, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80091e0:	62e1      	str	r1, [r4, #44]	@ 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80091e2:	2b00      	cmp	r3, #0
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80091e4:	bfa8      	it	ge
 80091e6:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091ea:	4d14      	ldr	r5, [pc, #80]	@ (800923c <vTaskPriorityDisinheritAfterTimeout+0x8c>)
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80091ec:	bfa8      	it	ge
 80091ee:	61a1      	strge	r1, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80091f4:	6961      	ldr	r1, [r4, #20]
 80091f6:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80091fa:	4299      	cmp	r1, r3
 80091fc:	d1e6      	bne.n	80091cc <vTaskPriorityDisinheritAfterTimeout+0x1c>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091fe:	1d26      	adds	r6, r4, #4
 8009200:	4630      	mov	r0, r6
 8009202:	f7fe fb01 	bl	8007808 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 8009206:	4a0e      	ldr	r2, [pc, #56]	@ (8009240 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8009208:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800920a:	6811      	ldr	r1, [r2, #0]
 800920c:	428b      	cmp	r3, r1
 800920e:	bf88      	it	hi
 8009210:	6013      	strhi	r3, [r2, #0]
 8009212:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009216:	0098      	lsls	r0, r3, #2
 8009218:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	582a      	ldr	r2, [r5, r0]
 8009220:	688f      	ldr	r7, [r1, #8]
 8009222:	3201      	adds	r2, #1
 8009224:	60a1      	str	r1, [r4, #8]
 8009226:	60e7      	str	r7, [r4, #12]
 8009228:	607e      	str	r6, [r7, #4]
 800922a:	608e      	str	r6, [r1, #8]
 800922c:	6163      	str	r3, [r4, #20]
 800922e:	502a      	str	r2, [r5, r0]
    }
 8009230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 8009232:	f000 fb6b 	bl	800990c <ulSetInterruptMask>
 8009236:	e7fe      	b.n	8009236 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8009238:	20061f0c 	.word	0x20061f0c
 800923c:	20061aac 	.word	0x20061aac
 8009240:	20061a30 	.word	0x20061a30

08009244 <pvTaskIncrementMutexHeldCount>:
        pxTCB = pxCurrentTCB;
 8009244:	4b03      	ldr	r3, [pc, #12]	@ (8009254 <pvTaskIncrementMutexHeldCount+0x10>)
 8009246:	6818      	ldr	r0, [r3, #0]
        if( pxTCB != NULL )
 8009248:	b110      	cbz	r0, 8009250 <pvTaskIncrementMutexHeldCount+0xc>
            ( pxTCB->uxMutexesHeld )++;
 800924a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800924c:	3301      	adds	r3, #1
 800924e:	6503      	str	r3, [r0, #80]	@ 0x50
    }
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20061f0c 	.word	0x20061f0c

08009258 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4fb6      	ldr	r7, [pc, #728]	@ (8009538 <prvTimerTask+0x2e0>)
 800925e:	f8df b2e0 	ldr.w	fp, [pc, #736]	@ 8009540 <prvTimerTask+0x2e8>
 8009262:	f8df 82e0 	ldr.w	r8, [pc, #736]	@ 8009544 <prvTimerTask+0x2ec>
 8009266:	4db5      	ldr	r5, [pc, #724]	@ (800953c <prvTimerTask+0x2e4>)
 8009268:	b087      	sub	sp, #28
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681c      	ldr	r4, [r3, #0]
 800926e:	2c00      	cmp	r4, #0
 8009270:	f040 811c 	bne.w	80094ac <prvTimerTask+0x254>
        vTaskSuspendAll();
 8009274:	f7ff fd58 	bl	8008d28 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8009278:	f7ff fd6e 	bl	8008d58 <xTaskGetTickCount>

        if( xTimeNow < xLastTime )
 800927c:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 8009280:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 8009282:	4283      	cmp	r3, r0
 8009284:	d848      	bhi.n	8009318 <prvTimerTask+0xc0>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009286:	f8d8 3000 	ldr.w	r3, [r8]
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
 800928a:	f8cb 0000 	str.w	r0, [fp]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	fab2 f282 	clz	r2, r2
 8009294:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009296:	6828      	ldr	r0, [r5, #0]
 8009298:	eba4 0109 	sub.w	r1, r4, r9
 800929c:	f7ff f83a 	bl	8008314 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80092a0:	f7ff fd4a 	bl	8008d38 <xTaskResumeAll>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f000 8123 	beq.w	80094f0 <prvTimerTask+0x298>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
 80092aa:	2300      	movs	r3, #0
 80092ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80092b4:	2200      	movs	r2, #0
 80092b6:	6828      	ldr	r0, [r5, #0]
 80092b8:	a902      	add	r1, sp, #8
 80092ba:	f7fe fcc9 	bl	8007c50 <xQueueReceive>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d0d3      	beq.n	800926a <prvTimerTask+0x12>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092c2:	9b02      	ldr	r3, [sp, #8]
                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092c4:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f2c0 80e8 	blt.w	800949c <prvTimerTask+0x244>
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092cc:	f8dd a010 	ldr.w	sl, [sp, #16]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80092d0:	f8da 3014 	ldr.w	r3, [sl, #20]
 80092d4:	b11b      	cbz	r3, 80092de <prvTimerTask+0x86>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092d6:	f10a 0004 	add.w	r0, sl, #4
 80092da:	f7fe fa95 	bl	8007808 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 80092de:	f7ff fd3b 	bl	8008d58 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 80092e2:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 80092e6:	9001      	str	r0, [sp, #4]
        if( xTimeNow < xLastTime )
 80092e8:	4298      	cmp	r0, r3
 80092ea:	d343      	bcc.n	8009374 <prvTimerTask+0x11c>
        xLastTime = xTimeNow;
 80092ec:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
 80092f0:	3b01      	subs	r3, #1
        xLastTime = xTimeNow;
 80092f2:	f8cb 2000 	str.w	r2, [fp]
                switch( xMessage.xMessageID )
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d8dc      	bhi.n	80092b4 <prvTimerTask+0x5c>
 80092fa:	e8df f003 	tbb	[pc, r3]
 80092fe:	6161      	.short	0x6161
 8009300:	61c6a5bf 	.word	0x61c6a5bf
 8009304:	bf61      	.short	0xbf61
 8009306:	a5          	.byte	0xa5
 8009307:	00          	.byte	0x00
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009308:	f022 0201 	bic.w	r2, r2, #1
 800930c:	f88a 2028 	strb.w	r2, [sl, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009310:	4650      	mov	r0, sl
 8009312:	f8da 3020 	ldr.w	r3, [sl, #32]
 8009316:	4798      	blx	r3

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	2a00      	cmp	r2, #0
 800931e:	f000 80d7 	beq.w	80094d0 <prvTimerTask+0x278>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009322:	68da      	ldr	r2, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009324:	f8d2 a00c 	ldr.w	sl, [r2, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009328:	6814      	ldr	r4, [r2, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800932a:	f10a 0604 	add.w	r6, sl, #4
 800932e:	4630      	mov	r0, r6
 8009330:	f7fe fa6a 	bl	8007808 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009334:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 8009338:	0751      	lsls	r1, r2, #29
 800933a:	d5e5      	bpl.n	8009308 <prvTimerTask+0xb0>
 800933c:	e003      	b.n	8009346 <prvTimerTask+0xee>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933e:	4650      	mov	r0, sl
 8009340:	f8da 2020 	ldr.w	r2, [sl, #32]
 8009344:	4790      	blx	r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009346:	f8da 2018 	ldr.w	r2, [sl, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800934a:	f8ca a010 	str.w	sl, [sl, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800934e:	18a1      	adds	r1, r4, r2
 8009350:	18a4      	adds	r4, r4, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009352:	f8ca 1004 	str.w	r1, [sl, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009356:	d3f2      	bcc.n	800933e <prvTimerTask+0xe6>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009358:	4631      	mov	r1, r6
 800935a:	f8d8 0000 	ldr.w	r0, [r8]
 800935e:	f7fe fa3b 	bl	80077d8 <vListInsert>
        return xProcessTimerNow;
 8009362:	e7d5      	b.n	8009310 <prvTimerTask+0xb8>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009364:	f021 0101 	bic.w	r1, r1, #1
 8009368:	f889 1028 	strb.w	r1, [r9, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800936c:	4648      	mov	r0, r9
 800936e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009372:	4798      	blx	r3
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	6819      	ldr	r1, [r3, #0]
 8009378:	2900      	cmp	r1, #0
 800937a:	f000 80b3 	beq.w	80094e4 <prvTimerTask+0x28c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800937e:	68d9      	ldr	r1, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009380:	f8d1 900c 	ldr.w	r9, [r1, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009384:	680c      	ldr	r4, [r1, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009386:	f109 0604 	add.w	r6, r9, #4
 800938a:	4630      	mov	r0, r6
 800938c:	f7fe fa3c 	bl	8007808 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009390:	f899 1028 	ldrb.w	r1, [r9, #40]	@ 0x28
 8009394:	0748      	lsls	r0, r1, #29
 8009396:	d5e5      	bpl.n	8009364 <prvTimerTask+0x10c>
 8009398:	e003      	b.n	80093a2 <prvTimerTask+0x14a>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800939a:	4648      	mov	r0, r9
 800939c:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80093a0:	4788      	blx	r1
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80093a2:	f8d9 1018 	ldr.w	r1, [r9, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093a6:	f8c9 9010 	str.w	r9, [r9, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80093aa:	1860      	adds	r0, r4, r1
 80093ac:	1864      	adds	r4, r4, r1
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ae:	f8c9 0004 	str.w	r0, [r9, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80093b2:	d3f2      	bcc.n	800939a <prvTimerTask+0x142>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093b4:	4631      	mov	r1, r6
 80093b6:	f8d8 0000 	ldr.w	r0, [r8]
 80093ba:	f7fe fa0d 	bl	80077d8 <vListInsert>
        return xProcessTimerNow;
 80093be:	e7d5      	b.n	800936c <prvTimerTask+0x114>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80093c0:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093c4:	9903      	ldr	r1, [sp, #12]
 80093c6:	f8da 4018 	ldr.w	r4, [sl, #24]
        if( xNextExpiryTime <= xTimeNow )
 80093ca:	9a01      	ldr	r2, [sp, #4]
 80093cc:	190b      	adds	r3, r1, r4
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80093ce:	f040 0601 	orr.w	r6, r0, #1
 80093d2:	f88a 6028 	strb.w	r6, [sl, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093d6:	bf2c      	ite	cs
 80093d8:	2601      	movcs	r6, #1
 80093da:	2600      	movcc	r6, #0
        if( xNextExpiryTime <= xTimeNow )
 80093dc:	4293      	cmp	r3, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093de:	f8ca 3004 	str.w	r3, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093e2:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 80093e6:	f200 8086 	bhi.w	80094f6 <prvTimerTask+0x29e>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80093ea:	1a51      	subs	r1, r2, r1
 80093ec:	428c      	cmp	r4, r1
 80093ee:	d83e      	bhi.n	800946e <prvTimerTask+0x216>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80093f0:	0741      	lsls	r1, r0, #29
 80093f2:	d412      	bmi.n	800941a <prvTimerTask+0x1c2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80093f4:	f020 0001 	bic.w	r0, r0, #1
 80093f8:	f88a 0028 	strb.w	r0, [sl, #40]	@ 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093fc:	4650      	mov	r0, sl
 80093fe:	f8da 3020 	ldr.w	r3, [sl, #32]
 8009402:	4798      	blx	r3
 8009404:	e756      	b.n	80092b4 <prvTimerTask+0x5c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009406:	428c      	cmp	r4, r1
 8009408:	f200 80c4 	bhi.w	8009594 <prvTimerTask+0x33c>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800940c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8009410:	4650      	mov	r0, sl
 8009412:	4798      	blx	r3
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009414:	4633      	mov	r3, r6
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009416:	f8da 4018 	ldr.w	r4, [sl, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800941a:	9a01      	ldr	r2, [sp, #4]
 800941c:	18e6      	adds	r6, r4, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800941e:	bf2c      	ite	cs
 8009420:	2001      	movcs	r0, #1
 8009422:	2000      	movcc	r0, #0
        if( xNextExpiryTime <= xTimeNow )
 8009424:	42b2      	cmp	r2, r6
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009426:	eba2 0103 	sub.w	r1, r2, r3
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800942a:	f8ca 6004 	str.w	r6, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800942e:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 8009432:	d2e8      	bcs.n	8009406 <prvTimerTask+0x1ae>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009434:	429a      	cmp	r2, r3
 8009436:	d201      	bcs.n	800943c <prvTimerTask+0x1e4>
 8009438:	2800      	cmp	r0, #0
 800943a:	d0e7      	beq.n	800940c <prvTimerTask+0x1b4>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800943c:	6838      	ldr	r0, [r7, #0]
 800943e:	f10a 0104 	add.w	r1, sl, #4
 8009442:	f7fe f9c9 	bl	80077d8 <vListInsert>
        return xProcessTimerNow;
 8009446:	e7d9      	b.n	80093fc <prvTimerTask+0x1a4>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009448:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800944c:	9b03      	ldr	r3, [sp, #12]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800944e:	f041 0101 	orr.w	r1, r1, #1
 8009452:	f88a 1028 	strb.w	r1, [sl, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009456:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 80a1 	beq.w	80095a2 <prvTimerTask+0x34a>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009460:	4413      	add	r3, r2
        if( xNextExpiryTime <= xTimeNow )
 8009462:	4293      	cmp	r3, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009464:	f8ca 3004 	str.w	r3, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009468:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 800946c:	d848      	bhi.n	8009500 <prvTimerTask+0x2a8>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800946e:	f8d8 0000 	ldr.w	r0, [r8]
 8009472:	f10a 0104 	add.w	r1, sl, #4
 8009476:	f7fe f9af 	bl	80077d8 <vListInsert>
 800947a:	e71b      	b.n	80092b4 <prvTimerTask+0x5c>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800947c:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 8009480:	f023 0301 	bic.w	r3, r3, #1
 8009484:	f88a 3028 	strb.w	r3, [sl, #40]	@ 0x28
                        break;
 8009488:	e714      	b.n	80092b4 <prvTimerTask+0x5c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800948a:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 800948e:	079a      	lsls	r2, r3, #30
 8009490:	d576      	bpl.n	8009580 <prvTimerTask+0x328>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009492:	f023 0301 	bic.w	r3, r3, #1
 8009496:	f88a 3028 	strb.w	r3, [sl, #40]	@ 0x28
 800949a:	e70b      	b.n	80092b4 <prvTimerTask+0x5c>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	9905      	ldr	r1, [sp, #20]
 80094a0:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094a2:	9b02      	ldr	r3, [sp, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f6ff af05 	blt.w	80092b4 <prvTimerTask+0x5c>
 80094aa:	e70f      	b.n	80092cc <prvTimerTask+0x74>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	681c      	ldr	r4, [r3, #0]
        vTaskSuspendAll();
 80094b0:	f7ff fc3a 	bl	8008d28 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 80094b4:	f7ff fc50 	bl	8008d58 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 80094b8:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 80094bc:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 80094be:	4298      	cmp	r0, r3
 80094c0:	f4ff af2a 	bcc.w	8009318 <prvTimerTask+0xc0>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094c4:	4284      	cmp	r4, r0
        xLastTime = xTimeNow;
 80094c6:	f8cb 0000 	str.w	r0, [fp]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094ca:	d91f      	bls.n	800950c <prvTimerTask+0x2b4>
 80094cc:	2200      	movs	r2, #0
 80094ce:	e6e2      	b.n	8009296 <prvTimerTask+0x3e>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 80094d0:	f8d8 2000 	ldr.w	r2, [r8]
        xLastTime = xTimeNow;
 80094d4:	f8cb 9000 	str.w	r9, [fp]
        pxCurrentTimerList = pxOverflowTimerList;
 80094d8:	603a      	str	r2, [r7, #0]
        pxOverflowTimerList = pxTemp;
 80094da:	f8c8 3000 	str.w	r3, [r8]
                ( void ) xTaskResumeAll();
 80094de:	f7ff fc2b 	bl	8008d38 <xTaskResumeAll>
 80094e2:	e6e2      	b.n	80092aa <prvTimerTask+0x52>
        pxCurrentTimerList = pxOverflowTimerList;
 80094e4:	f8d8 1000 	ldr.w	r1, [r8]
        pxOverflowTimerList = pxTemp;
 80094e8:	f8c8 3000 	str.w	r3, [r8]
        pxCurrentTimerList = pxOverflowTimerList;
 80094ec:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 80094ee:	e6fd      	b.n	80092ec <prvTimerTask+0x94>
                        taskYIELD_WITHIN_API();
 80094f0:	f000 f8ce 	bl	8009690 <vPortYield>
 80094f4:	e6d9      	b.n	80092aa <prvTimerTask+0x52>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094f6:	4291      	cmp	r1, r2
 80094f8:	d902      	bls.n	8009500 <prvTimerTask+0x2a8>
 80094fa:	2e00      	cmp	r6, #0
 80094fc:	f43f af78 	beq.w	80093f0 <prvTimerTask+0x198>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009500:	6838      	ldr	r0, [r7, #0]
 8009502:	f10a 0104 	add.w	r1, sl, #4
 8009506:	f7fe f967 	bl	80077d8 <vListInsert>
 800950a:	e6d3      	b.n	80092b4 <prvTimerTask+0x5c>
                    ( void ) xTaskResumeAll();
 800950c:	f7ff fc14 	bl	8008d38 <xTaskResumeAll>
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	68de      	ldr	r6, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009516:	1d33      	adds	r3, r6, #4
 8009518:	4618      	mov	r0, r3
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	f7fe f974 	bl	8007808 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009520:	f896 2028 	ldrb.w	r2, [r6, #40]	@ 0x28
 8009524:	0753      	lsls	r3, r2, #29
 8009526:	d415      	bmi.n	8009554 <prvTimerTask+0x2fc>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009528:	f022 0201 	bic.w	r2, r2, #1
 800952c:	f886 2028 	strb.w	r2, [r6, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009530:	4630      	mov	r0, r6
 8009532:	6a33      	ldr	r3, [r6, #32]
 8009534:	4798      	blx	r3
    }
 8009536:	e6b8      	b.n	80092aa <prvTimerTask+0x52>
 8009538:	20061f20 	.word	0x20061f20
 800953c:	20061f18 	.word	0x20061f18
 8009540:	20061f10 	.word	0x20061f10
 8009544:	20061f1c 	.word	0x20061f1c
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009548:	4281      	cmp	r1, r0
 800954a:	d81d      	bhi.n	8009588 <prvTimerTask+0x330>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800954c:	4630      	mov	r0, r6
 800954e:	6a31      	ldr	r1, [r6, #32]
 8009550:	4788      	blx	r1
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009552:	4654      	mov	r4, sl
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009554:	69b1      	ldr	r1, [r6, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009556:	eba9 0004 	sub.w	r0, r9, r4
 800955a:	eb14 0a01 	adds.w	sl, r4, r1
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800955e:	bf2c      	ite	cs
 8009560:	2301      	movcs	r3, #1
 8009562:	2300      	movcc	r3, #0
        if( xNextExpiryTime <= xTimeNow )
 8009564:	45d1      	cmp	r9, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009566:	f8c6 a004 	str.w	sl, [r6, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800956a:	6136      	str	r6, [r6, #16]
        if( xNextExpiryTime <= xTimeNow )
 800956c:	d2ec      	bcs.n	8009548 <prvTimerTask+0x2f0>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800956e:	45a1      	cmp	r9, r4
 8009570:	d201      	bcs.n	8009576 <prvTimerTask+0x31e>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ea      	beq.n	800954c <prvTimerTask+0x2f4>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009576:	9901      	ldr	r1, [sp, #4]
 8009578:	6838      	ldr	r0, [r7, #0]
 800957a:	f7fe f92d 	bl	80077d8 <vListInsert>
        return xProcessTimerNow;
 800957e:	e7d7      	b.n	8009530 <prvTimerTask+0x2d8>
                                vPortFree( pxTimer );
 8009580:	4650      	mov	r0, sl
 8009582:	f000 fac5 	bl	8009b10 <vPortFree>
 8009586:	e695      	b.n	80092b4 <prvTimerTask+0x5c>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009588:	9901      	ldr	r1, [sp, #4]
 800958a:	f8d8 0000 	ldr.w	r0, [r8]
 800958e:	f7fe f923 	bl	80077d8 <vListInsert>
        return xProcessTimerNow;
 8009592:	e7cd      	b.n	8009530 <prvTimerTask+0x2d8>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009594:	f8d8 0000 	ldr.w	r0, [r8]
 8009598:	f10a 0104 	add.w	r1, sl, #4
 800959c:	f7fe f91c 	bl	80077d8 <vListInsert>
        return xProcessTimerNow;
 80095a0:	e72c      	b.n	80093fc <prvTimerTask+0x1a4>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095a2:	f000 f9b3 	bl	800990c <ulSetInterruptMask>
 80095a6:	e7fe      	b.n	80095a6 <prvTimerTask+0x34e>

080095a8 <xTimerCreateTimerTask>:
    {
 80095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 80095aa:	4c19      	ldr	r4, [pc, #100]	@ (8009610 <xTimerCreateTimerTask+0x68>)
    {
 80095ac:	b083      	sub	sp, #12
        taskENTER_CRITICAL();
 80095ae:	f000 f87b 	bl	80096a8 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80095b2:	6825      	ldr	r5, [r4, #0]
 80095b4:	b1a5      	cbz	r5, 80095e0 <xTimerCreateTimerTask+0x38>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80095b6:	f000 f885 	bl	80096c4 <vPortExitCritical>
        if( xTimerQueue != NULL )
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	b15b      	cbz	r3, 80095d6 <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
 80095be:	2402      	movs	r4, #2
 80095c0:	4814      	ldr	r0, [pc, #80]	@ (8009614 <xTimerCreateTimerTask+0x6c>)
 80095c2:	2300      	movs	r3, #0
 80095c4:	9001      	str	r0, [sp, #4]
 80095c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095ca:	4913      	ldr	r1, [pc, #76]	@ (8009618 <xTimerCreateTimerTask+0x70>)
 80095cc:	4813      	ldr	r0, [pc, #76]	@ (800961c <xTimerCreateTimerTask+0x74>)
 80095ce:	9400      	str	r4, [sp, #0]
 80095d0:	f7ff f9ac 	bl	800892c <xTaskCreate>
        configASSERT( xReturn );
 80095d4:	b910      	cbnz	r0, 80095dc <xTimerCreateTimerTask+0x34>
 80095d6:	f000 f999 	bl	800990c <ulSetInterruptMask>
 80095da:	e7fe      	b.n	80095da <xTimerCreateTimerTask+0x32>
    }
 80095dc:	b003      	add	sp, #12
 80095de:	bdf0      	pop	{r4, r5, r6, r7, pc}
                vListInitialise( &xActiveTimerList1 );
 80095e0:	4e0f      	ldr	r6, [pc, #60]	@ (8009620 <xTimerCreateTimerTask+0x78>)
                vListInitialise( &xActiveTimerList2 );
 80095e2:	4f10      	ldr	r7, [pc, #64]	@ (8009624 <xTimerCreateTimerTask+0x7c>)
                vListInitialise( &xActiveTimerList1 );
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7fe f8d9 	bl	800779c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80095ea:	4638      	mov	r0, r7
 80095ec:	f7fe f8d6 	bl	800779c <vListInitialise>
                pxOverflowTimerList = &xActiveTimerList2;
 80095f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009628 <xTimerCreateTimerTask+0x80>)
                pxCurrentTimerList = &xActiveTimerList1;
 80095f2:	4b0e      	ldr	r3, [pc, #56]	@ (800962c <xTimerCreateTimerTask+0x84>)
                pxOverflowTimerList = &xActiveTimerList2;
 80095f4:	6017      	str	r7, [r2, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80095f6:	2110      	movs	r1, #16
 80095f8:	462a      	mov	r2, r5
 80095fa:	200a      	movs	r0, #10
                pxCurrentTimerList = &xActiveTimerList1;
 80095fc:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80095fe:	f7fe f953 	bl	80078a8 <xQueueGenericCreate>
 8009602:	6020      	str	r0, [r4, #0]
                    if( xTimerQueue != NULL )
 8009604:	2800      	cmp	r0, #0
 8009606:	d0d6      	beq.n	80095b6 <xTimerCreateTimerTask+0xe>
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009608:	4909      	ldr	r1, [pc, #36]	@ (8009630 <xTimerCreateTimerTask+0x88>)
 800960a:	f7fe fdf1 	bl	80081f0 <vQueueAddToRegistry>
 800960e:	e7d2      	b.n	80095b6 <xTimerCreateTimerTask+0xe>
 8009610:	20061f18 	.word	0x20061f18
 8009614:	20061f14 	.word	0x20061f14
 8009618:	0800f8bc 	.word	0x0800f8bc
 800961c:	08009259 	.word	0x08009259
 8009620:	20061f38 	.word	0x20061f38
 8009624:	20061f24 	.word	0x20061f24
 8009628:	20061f1c 	.word	0x20061f1c
 800962c:	20061f20 	.word	0x20061f20
 8009630:	0800f8b4 	.word	0x0800f8b4

08009634 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 8009634:	2200      	movs	r2, #0
{
 8009636:	b500      	push	{lr}
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8009638:	4b08      	ldr	r3, [pc, #32]	@ (800965c <prvTaskExitError+0x28>)
{
 800963a:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0UL;
 800963c:	9201      	str	r2, [sp, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3301      	adds	r3, #1
 8009642:	d002      	beq.n	800964a <prvTaskExitError+0x16>
 8009644:	f000 f962 	bl	800990c <ulSetInterruptMask>
 8009648:	e7fe      	b.n	8009648 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800964a:	f000 f95f 	bl	800990c <ulSetInterruptMask>

    while( ulDummy == 0 )
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0fc      	beq.n	800964e <prvTaskExitError+0x1a>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8009654:	b003      	add	sp, #12
 8009656:	f85d fb04 	ldr.w	pc, [sp], #4
 800965a:	bf00      	nop
 800965c:	20000f78 	.word	0x20000f78

08009660 <vPortSetupTimerInterrupt>:
{
 8009660:	b430      	push	{r4, r5}
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 8009662:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009666:	2504      	movs	r5, #4
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009668:	2400      	movs	r4, #0
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800966a:	2007      	movs	r0, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800966c:	4b06      	ldr	r3, [pc, #24]	@ (8009688 <vPortSetupTimerInterrupt+0x28>)
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 800966e:	6115      	str	r5, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009670:	6194      	str	r4, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4905      	ldr	r1, [pc, #20]	@ (800968c <vPortSetupTimerInterrupt+0x2c>)
}
 8009676:	bc30      	pop	{r4, r5}
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009678:	fba1 1303 	umull	r1, r3, r1, r3
 800967c:	099b      	lsrs	r3, r3, #6
 800967e:	3b01      	subs	r3, #1
 8009680:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009682:	6110      	str	r0, [r2, #16]
}
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	20000000 	.word	0x20000000
 800968c:	10624dd3 	.word	0x10624dd3

08009690 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009690:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009698:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800969c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80096a0:	f3bf 8f6f 	isb	sy
}
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop

080096a8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80096a8:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
 80096aa:	f000 f92f 	bl	800990c <ulSetInterruptMask>
    ulCriticalNesting++;
 80096ae:	4a04      	ldr	r2, [pc, #16]	@ (80096c0 <vPortEnterCritical+0x18>)
 80096b0:	6813      	ldr	r3, [r2, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80096b6:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80096ba:	f3bf 8f6f 	isb	sy
}
 80096be:	bd08      	pop	{r3, pc}
 80096c0:	20000f78 	.word	0x20000f78

080096c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80096c4:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
 80096c6:	4b08      	ldr	r3, [pc, #32]	@ (80096e8 <vPortExitCritical+0x24>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	b14a      	cbz	r2, 80096e0 <vPortExitCritical+0x1c>
    ulCriticalNesting--;
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	3a01      	subs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	b100      	cbz	r0, 80096d8 <vPortExitCritical+0x14>
    {
        portENABLE_INTERRUPTS();
    }
}
 80096d6:	bd08      	pop	{r3, pc}
 80096d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
 80096dc:	f000 b922 	b.w	8009924 <vClearInterruptMask>
    configASSERT( ulCriticalNesting );
 80096e0:	f000 f914 	bl	800990c <ulSetInterruptMask>
 80096e4:	e7fe      	b.n	80096e4 <vPortExitCritical+0x20>
 80096e6:	bf00      	nop
 80096e8:	20000f78 	.word	0x20000f78

080096ec <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80096ec:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80096ee:	f000 f90d 	bl	800990c <ulSetInterruptMask>
 80096f2:	4604      	mov	r4, r0
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80096f4:	f7ff fb36 	bl	8008d64 <xTaskIncrementTick>
 80096f8:	b128      	cbz	r0, 8009706 <SysTick_Handler+0x1a>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80096fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009702:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009706:	4620      	mov	r0, r4
}
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800970c:	f000 b90a 	b.w	8009924 <vClearInterruptMask>

08009710 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8009710:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8009712:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
 8009714:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8009718:	2b66      	cmp	r3, #102	@ 0x66
 800971a:	d002      	beq.n	8009722 <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800971c:	f000 f8f6 	bl	800990c <ulSetInterruptMask>
 8009720:	e7fe      	b.n	8009720 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8009722:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009726:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
 800972a:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800972e:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8009732:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
 8009736:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800973a:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34
    }
}
 800973e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
 8009742:	f000 b8bd 	b.w	80098c0 <vRestoreContextOfFirstTask>
 8009746:	bf00      	nop

08009748 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800974c:	f04f 3e11 	mov.w	lr, #286331153	@ 0x11111111
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8009750:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8009754:	e940 e309 	strd	lr, r3, [r0, #-36]	@ 0x24
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8009758:	f04f 3307 	mov.w	r3, #117901063	@ 0x7070707
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800975c:	f840 4c04 	str.w	r4, [r0, #-4]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8009760:	4c16      	ldr	r4, [pc, #88]	@ (80097bc <pxPortInitialiseStack+0x74>)
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8009762:	f840 3c34 	str.w	r3, [r0, #-52]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8009766:	e940 4203 	strd	r4, r2, [r0, #-12]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800976a:	f04f 3305 	mov.w	r3, #84215045	@ 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800976e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8009772:	f04f 3b12 	mov.w	fp, #303174162	@ 0x12121212
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8009776:	e940 320f 	strd	r3, r2, [r0, #-60]	@ 0x3c
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800977a:	f04f 3a03 	mov.w	sl, #50529027	@ 0x3030303
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800977e:	f04f 3902 	mov.w	r9, #33686018	@ 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8009782:	f04f 3801 	mov.w	r8, #16843009	@ 0x1010101
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8009786:	f04f 3710 	mov.w	r7, #269488144	@ 0x10101010
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800978a:	f04f 3609 	mov.w	r6, #151587081	@ 0x9090909
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800978e:	f04f 3508 	mov.w	r5, #134744072	@ 0x8080808
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8009792:	f04f 3404 	mov.w	r4, #67372036	@ 0x4040404
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8009796:	f06f 0343 	mvn.w	r3, #67	@ 0x43
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800979a:	e940 ab05 	strd	sl, fp, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800979e:	e940 8907 	strd	r8, r9, [r0, #-28]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80097a2:	e940 670b 	strd	r6, r7, [r0, #-44]	@ 0x2c
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80097a6:	f840 5c30 	str.w	r5, [r0, #-48]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80097aa:	f840 4c40 	str.w	r4, [r0, #-64]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80097ae:	f840 3c44 	str.w	r3, [r0, #-68]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 80097b2:	f840 1d48 	str.w	r1, [r0, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	bf00      	nop
 80097bc:	08009635 	.word	0x08009635

080097c0 <xPortStartScheduler>:
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80097c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80097c4:	b530      	push	{r4, r5, lr}
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80097c6:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 80097ca:	4938      	ldr	r1, [pc, #224]	@ (80098ac <xPortStartScheduler+0xec>)
 80097cc:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
{
 80097ce:	b085      	sub	sp, #20
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 80097d0:	4288      	cmp	r0, r1
 80097d2:	d002      	beq.n	80097da <xPortStartScheduler+0x1a>
 80097d4:	f000 f89a 	bl	800990c <ulSetInterruptMask>
 80097d8:	e7fe      	b.n	80097d8 <xPortStartScheduler+0x18>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 80097da:	4935      	ldr	r1, [pc, #212]	@ (80098b0 <xPortStartScheduler+0xf0>)
 80097dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80097de:	428a      	cmp	r2, r1
 80097e0:	d002      	beq.n	80097e8 <xPortStartScheduler+0x28>
 80097e2:	f000 f893 	bl	800990c <ulSetInterruptMask>
 80097e6:	e7fe      	b.n	80097e6 <xPortStartScheduler+0x26>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 80097e8:	2000      	movs	r0, #0
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 80097ea:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        volatile uint32_t ulImplementedPrioBits = 0;
 80097ee:	9002      	str	r0, [sp, #8]
        portNVIC_SHPR2_REG = 0xFF000000;
 80097f0:	f8c3 1d1c 	str.w	r1, [r3, #3356]	@ 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 80097f4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097f8:	4a2e      	ldr	r2, [pc, #184]	@ (80098b4 <xPortStartScheduler+0xf4>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 80097fa:	0e1b      	lsrs	r3, r3, #24
 80097fc:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009800:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009808:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800980a:	2b00      	cmp	r3, #0
 800980c:	d03e      	beq.n	800988c <xPortStartScheduler+0xcc>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 800980e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009812:	43db      	mvns	r3, r3
 8009814:	f013 0f50 	tst.w	r3, #80	@ 0x50
 8009818:	d009      	beq.n	800982e <xPortStartScheduler+0x6e>
 800981a:	e03a      	b.n	8009892 <xPortStartScheduler+0xd2>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800981c:	9b02      	ldr	r3, [sp, #8]
 800981e:	3301      	adds	r3, #1
 8009820:	9302      	str	r3, [sp, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009822:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009826:	005b      	lsls	r3, r3, #1
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800982e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009832:	061b      	lsls	r3, r3, #24
 8009834:	d4f2      	bmi.n	800981c <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
 8009836:	9b02      	ldr	r3, [sp, #8]
 8009838:	2b08      	cmp	r3, #8
 800983a:	d035      	beq.n	80098a8 <xPortStartScheduler+0xe8>
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800983c:	9b02      	ldr	r3, [sp, #8]
 800983e:	f1c3 0307 	rsb	r3, r3, #7
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009842:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009844:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009848:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    portNVIC_SHPR2_REG = 0;
 800984c:	2400      	movs	r4, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800984e:	491a      	ldr	r1, [pc, #104]	@ (80098b8 <xPortStartScheduler+0xf8>)
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8009850:	4d1a      	ldr	r5, [pc, #104]	@ (80098bc <xPortStartScheduler+0xfc>)
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009852:	600b      	str	r3, [r1, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009854:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	@ 0xd20
 8009858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800985c:	f8c2 3d20 	str.w	r3, [r2, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009860:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	@ 0xd20
 8009864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009868:	f8c2 3d20 	str.w	r3, [r2, #3360]	@ 0xd20
    portNVIC_SHPR2_REG = 0;
 800986c:	f8c2 4d1c 	str.w	r4, [r2, #3356]	@ 0xd1c
    vPortSetupTimerInterrupt();
 8009870:	f7ff fef6 	bl	8009660 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
 8009874:	602c      	str	r4, [r5, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 8009876:	f000 f839 	bl	80098ec <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800987a:	f7ff fa83 	bl	8008d84 <vTaskSwitchContext>
    volatile uint32_t ulDummy = 0UL;
 800987e:	9403      	str	r4, [sp, #12]
    configASSERT( ulCriticalNesting == ~0UL );
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	d008      	beq.n	8009898 <xPortStartScheduler+0xd8>
 8009886:	f000 f841 	bl	800990c <ulSetInterruptMask>
 800988a:	e7fe      	b.n	800988a <xPortStartScheduler+0xca>
        configASSERT( ucMaxSysCallPriority );
 800988c:	f000 f83e 	bl	800990c <ulSetInterruptMask>
 8009890:	e7fe      	b.n	8009890 <xPortStartScheduler+0xd0>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 8009892:	f000 f83b 	bl	800990c <ulSetInterruptMask>
 8009896:	e7fe      	b.n	8009896 <xPortStartScheduler+0xd6>
    portDISABLE_INTERRUPTS();
 8009898:	f000 f838 	bl	800990c <ulSetInterruptMask>
    while( ulDummy == 0 )
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0fc      	beq.n	800989c <xPortStartScheduler+0xdc>
    prvTaskExitError();

    /* Should not get here. */
    return 0;
}
 80098a2:	2000      	movs	r0, #0
 80098a4:	b005      	add	sp, #20
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	2300      	movs	r3, #0
 80098aa:	e7cd      	b.n	8009848 <xPortStartScheduler+0x88>
 80098ac:	08009991 	.word	0x08009991
 80098b0:	08009935 	.word	0x08009935
 80098b4:	20061f50 	.word	0x20061f50
 80098b8:	20061f4c 	.word	0x20061f4c
 80098bc:	20000f78 	.word	0x20000f78

080098c0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80098c0:	4a09      	ldr	r2, [pc, #36]	@ (80098e8 <vRestoreContextOfFirstTask+0x28>)
 80098c2:	6811      	ldr	r1, [r2, #0]
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	c806      	ldmia	r0!, {r1, r2}
 80098c8:	f381 880b 	msr	PSPLIM, r1
 80098cc:	2102      	movs	r1, #2
 80098ce:	f381 8814 	msr	CONTROL, r1
 80098d2:	3020      	adds	r0, #32
 80098d4:	f380 8809 	msr	PSP, r0
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f04f 0000 	mov.w	r0, #0
 80098e0:	f380 8811 	msr	BASEPRI, r0
 80098e4:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 80098e6:	0000      	.short	0x0000
 80098e8:	20061f0c 	.word	0x20061f0c

080098ec <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80098ec:	4806      	ldr	r0, [pc, #24]	@ (8009908 <vStartFirstTask+0x1c>)
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	6800      	ldr	r0, [r0, #0]
 80098f2:	f380 8808 	msr	MSP, r0
 80098f6:	b662      	cpsie	i
 80098f8:	b661      	cpsie	f
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	df66      	svc	102	@ 0x66
 8009904:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8009906:	0000      	.short	0x0000
 8009908:	e000ed08 	.word	0xe000ed08

0800990c <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800990c:	f3ef 8011 	mrs	r0, BASEPRI
 8009910:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8009914:	f381 8811 	msr	BASEPRI, r1
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop

08009924 <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009924:	f380 8811 	msr	BASEPRI, r0
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop

08009934 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009934:	f3ef 8009 	mrs	r0, PSP
 8009938:	f01e 0f10 	tst.w	lr, #16
 800993c:	bf08      	it	eq
 800993e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009942:	f3ef 820b 	mrs	r2, PSPLIM
 8009946:	4673      	mov	r3, lr
 8009948:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800994c:	4a0f      	ldr	r2, [pc, #60]	@ (800998c <PendSV_Handler+0x58>)
 800994e:	6811      	ldr	r1, [r2, #0]
 8009950:	6008      	str	r0, [r1, #0]
 8009952:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009956:	f380 8811 	msr	BASEPRI, r0
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f7ff fa0f 	bl	8008d84 <vTaskSwitchContext>
 8009966:	f04f 0000 	mov.w	r0, #0
 800996a:	f380 8811 	msr	BASEPRI, r0
 800996e:	4a07      	ldr	r2, [pc, #28]	@ (800998c <PendSV_Handler+0x58>)
 8009970:	6811      	ldr	r1, [r2, #0]
 8009972:	6808      	ldr	r0, [r1, #0]
 8009974:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009978:	f013 0f10 	tst.w	r3, #16
 800997c:	bf08      	it	eq
 800997e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009982:	f382 880b 	msr	PSPLIM, r2
 8009986:	f380 8809 	msr	PSP, r0
 800998a:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800998c:	20061f0c 	.word	0x20061f0c

08009990 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009990:	f01e 0f04 	tst.w	lr, #4
 8009994:	bf0c      	ite	eq
 8009996:	f3ef 8008 	mrseq	r0, MSP
 800999a:	f3ef 8009 	mrsne	r0, PSP
 800999e:	4901      	ldr	r1, [pc, #4]	@ (80099a4 <SVC_Handler+0x14>)
 80099a0:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 80099a2:	0000      	.short	0x0000
 80099a4:	08009711 	.word	0x08009711

080099a8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80099aa:	1e43      	subs	r3, r0, #1
 80099ac:	330a      	adds	r3, #10
 80099ae:	d811      	bhi.n	80099d4 <pvPortMalloc+0x2c>
        {
            xWantedSize += xHeapStructSize;

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099b0:	f010 0307 	ands.w	r3, r0, #7
            xWantedSize += xHeapStructSize;
 80099b4:	f100 0408 	add.w	r4, r0, #8
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099b8:	d04f      	beq.n	8009a5a <pvPortMalloc+0xb2>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80099ba:	f1a3 0209 	sub.w	r2, r3, #9
 80099be:	42a2      	cmp	r2, r4
 80099c0:	d308      	bcc.n	80099d4 <pvPortMalloc+0x2c>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80099c2:	3010      	adds	r0, #16
 80099c4:	1ac4      	subs	r4, r0, r3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80099c6:	f7ff f9af 	bl	8008d28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80099ca:	4a49      	ldr	r2, [pc, #292]	@ (8009af0 <pvPortMalloc+0x148>)

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80099cc:	4626      	mov	r6, r4
        if( pxEnd == NULL )
 80099ce:	6815      	ldr	r5, [r2, #0]
 80099d0:	bb25      	cbnz	r5, 8009a1c <pvPortMalloc+0x74>
 80099d2:	e00b      	b.n	80099ec <pvPortMalloc+0x44>
    vTaskSuspendAll();
 80099d4:	f7ff f9a8 	bl	8008d28 <vTaskSuspendAll>
        if( pxEnd == NULL )
 80099d8:	4a45      	ldr	r2, [pc, #276]	@ (8009af0 <pvPortMalloc+0x148>)
 80099da:	6813      	ldr	r3, [r2, #0]
 80099dc:	b123      	cbz	r3, 80099e8 <pvPortMalloc+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80099de:	f7ff f9ab 	bl	8008d38 <xTaskResumeAll>
    void * pvReturn = NULL;
 80099e2:	2500      	movs	r5, #0
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 80099e4:	4628      	mov	r0, r5
 80099e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
 80099e8:	2600      	movs	r6, #0
 80099ea:	4634      	mov	r4, r6
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80099ec:	4b41      	ldr	r3, [pc, #260]	@ (8009af4 <pvPortMalloc+0x14c>)
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;
 80099ee:	2000      	movs	r0, #0
    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099f0:	075d      	lsls	r5, r3, #29
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80099f2:	bf1c      	itt	ne
 80099f4:	3307      	addne	r3, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80099f6:	f023 0307 	bicne.w	r3, r3, #7
 80099fa:	4619      	mov	r1, r3

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80099fc:	4d3e      	ldr	r5, [pc, #248]	@ (8009af8 <pvPortMalloc+0x150>)
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80099fe:	f025 0507 	bic.w	r5, r5, #7
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8009a02:	6015      	str	r5, [r2, #0]
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8009a04:	4a3d      	ldr	r2, [pc, #244]	@ (8009afc <pvPortMalloc+0x154>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009a06:	1aeb      	subs	r3, r5, r3
    xStart.xBlockSize = ( size_t ) 0;
 8009a08:	e9c2 1000 	strd	r1, r0, [r2]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8009b00 <pvPortMalloc+0x158>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8009a0e:	e9c5 0000 	strd	r0, r0, [r5]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a12:	6013      	str	r3, [r2, #0]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009a14:	e9c1 5300 	strd	r5, r3, [r1]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a18:	4a3a      	ldr	r2, [pc, #232]	@ (8009b04 <pvPortMalloc+0x15c>)
 8009a1a:	6013      	str	r3, [r2, #0]
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009a1c:	2e00      	cmp	r6, #0
 8009a1e:	dbde      	blt.n	80099de <pvPortMalloc+0x36>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a20:	2c00      	cmp	r4, #0
 8009a22:	d0dc      	beq.n	80099de <pvPortMalloc+0x36>
 8009a24:	4f37      	ldr	r7, [pc, #220]	@ (8009b04 <pvPortMalloc+0x15c>)
 8009a26:	683e      	ldr	r6, [r7, #0]
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	d3d8      	bcc.n	80099de <pvPortMalloc+0x36>
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8009a2c:	4a33      	ldr	r2, [pc, #204]	@ (8009afc <pvPortMalloc+0x154>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009a2e:	4b31      	ldr	r3, [pc, #196]	@ (8009af4 <pvPortMalloc+0x14c>)
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8009a30:	6811      	ldr	r1, [r2, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009a32:	4299      	cmp	r1, r3
 8009a34:	d30e      	bcc.n	8009a54 <pvPortMalloc+0xac>
 8009a36:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8009b0c <pvPortMalloc+0x164>
 8009a3a:	4571      	cmp	r1, lr
 8009a3c:	d80a      	bhi.n	8009a54 <pvPortMalloc+0xac>
                pxPreviousBlock = &xStart;
 8009a3e:	4694      	mov	ip, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8009a40:	6848      	ldr	r0, [r1, #4]
 8009a42:	42a0      	cmp	r0, r4
 8009a44:	d218      	bcs.n	8009a78 <pvPortMalloc+0xd0>
 8009a46:	680a      	ldr	r2, [r1, #0]
 8009a48:	b1b2      	cbz	r2, 8009a78 <pvPortMalloc+0xd0>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d20f      	bcs.n	8009a6e <pvPortMalloc+0xc6>
 8009a4e:	f7ff ff5d 	bl	800990c <ulSetInterruptMask>
 8009a52:	e7fe      	b.n	8009a52 <pvPortMalloc+0xaa>
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009a54:	f7ff ff5a 	bl	800990c <ulSetInterruptMask>
 8009a58:	e7fe      	b.n	8009a58 <pvPortMalloc+0xb0>
    vTaskSuspendAll();
 8009a5a:	f7ff f965 	bl	8008d28 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8009a5e:	4a24      	ldr	r2, [pc, #144]	@ (8009af0 <pvPortMalloc+0x148>)
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009a60:	4626      	mov	r6, r4
        if( pxEnd == NULL )
 8009a62:	6815      	ldr	r5, [r2, #0]
 8009a64:	2d00      	cmp	r5, #0
 8009a66:	d0c1      	beq.n	80099ec <pvPortMalloc+0x44>
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	dadb      	bge.n	8009a24 <pvPortMalloc+0x7c>
 8009a6c:	e7b7      	b.n	80099de <pvPortMalloc+0x36>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009a6e:	4572      	cmp	r2, lr
 8009a70:	d8ed      	bhi.n	8009a4e <pvPortMalloc+0xa6>
                    pxPreviousBlock = pxBlock;
 8009a72:	468c      	mov	ip, r1
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8009a74:	4611      	mov	r1, r2
 8009a76:	e7e3      	b.n	8009a40 <pvPortMalloc+0x98>
                if( pxBlock != pxEnd )
 8009a78:	42a9      	cmp	r1, r5
 8009a7a:	d0b0      	beq.n	80099de <pvPortMalloc+0x36>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8009a7c:	f101 0508 	add.w	r5, r1, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8009a80:	429d      	cmp	r5, r3
 8009a82:	d32b      	bcc.n	8009adc <pvPortMalloc+0x134>
 8009a84:	4575      	cmp	r5, lr
 8009a86:	d829      	bhi.n	8009adc <pvPortMalloc+0x134>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a88:	680a      	ldr	r2, [r1, #0]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009a8a:	42a0      	cmp	r0, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a8c:	f8cc 2000 	str.w	r2, [ip]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009a90:	d327      	bcc.n	8009ae2 <pvPortMalloc+0x13a>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a92:	eba0 0e04 	sub.w	lr, r0, r4
 8009a96:	f1be 0f10 	cmp.w	lr, #16
 8009a9a:	d908      	bls.n	8009aae <pvPortMalloc+0x106>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a9c:	190b      	adds	r3, r1, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9e:	0758      	lsls	r0, r3, #29
 8009aa0:	d122      	bne.n	8009ae8 <pvPortMalloc+0x140>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f8c3 e004 	str.w	lr, [r3, #4]
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8009aa8:	510a      	str	r2, [r1, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8009aaa:	f8cc 3000 	str.w	r3, [ip]
                    pxBlock->pxNextFreeBlock = NULL;
 8009aae:	2400      	movs	r4, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ab0:	4b13      	ldr	r3, [pc, #76]	@ (8009b00 <pvPortMalloc+0x158>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ab2:	1a36      	subs	r6, r6, r0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ab4:	681a      	ldr	r2, [r3, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009ab6:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aba:	4296      	cmp	r6, r2
                    xNumberOfSuccessfulAllocations++;
 8009abc:	4a12      	ldr	r2, [pc, #72]	@ (8009b08 <pvPortMalloc+0x160>)
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009abe:	bf38      	it	cc
 8009ac0:	601e      	strcc	r6, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009ac2:	6813      	ldr	r3, [r2, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009ac4:	6048      	str	r0, [r1, #4]
                    xNumberOfSuccessfulAllocations++;
 8009ac6:	3301      	adds	r3, #1
                    pxBlock->pxNextFreeBlock = NULL;
 8009ac8:	600c      	str	r4, [r1, #0]
                    xNumberOfSuccessfulAllocations++;
 8009aca:	6013      	str	r3, [r2, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009acc:	603e      	str	r6, [r7, #0]
    ( void ) xTaskResumeAll();
 8009ace:	f7ff f933 	bl	8008d38 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ad2:	076b      	lsls	r3, r5, #29
 8009ad4:	d086      	beq.n	80099e4 <pvPortMalloc+0x3c>
 8009ad6:	f7ff ff19 	bl	800990c <ulSetInterruptMask>
 8009ada:	e7fe      	b.n	8009ada <pvPortMalloc+0x132>
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8009adc:	f7ff ff16 	bl	800990c <ulSetInterruptMask>
 8009ae0:	e7fe      	b.n	8009ae0 <pvPortMalloc+0x138>
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009ae2:	f7ff ff13 	bl	800990c <ulSetInterruptMask>
 8009ae6:	e7fe      	b.n	8009ae6 <pvPortMalloc+0x13e>
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae8:	f7ff ff10 	bl	800990c <ulSetInterruptMask>
 8009aec:	e7fe      	b.n	8009aec <pvPortMalloc+0x144>
 8009aee:	bf00      	nop
 8009af0:	20061f64 	.word	0x20061f64
 8009af4:	20061f70 	.word	0x20061f70
 8009af8:	2007af68 	.word	0x2007af68
 8009afc:	20061f68 	.word	0x20061f68
 8009b00:	20061f5c 	.word	0x20061f5c
 8009b04:	20061f60 	.word	0x20061f60
 8009b08:	20061f58 	.word	0x20061f58
 8009b0c:	2007af6f 	.word	0x2007af6f

08009b10 <vPortFree>:
    if( pv != NULL )
 8009b10:	b1b0      	cbz	r0, 8009b40 <vPortFree+0x30>
{
 8009b12:	b5f0      	push	{r4, r5, r6, r7, lr}
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009b14:	4d32      	ldr	r5, [pc, #200]	@ (8009be0 <vPortFree+0xd0>)
        puc -= xHeapStructSize;
 8009b16:	f1a0 0408 	sub.w	r4, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009b1a:	42ac      	cmp	r4, r5
{
 8009b1c:	b083      	sub	sp, #12
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009b1e:	d30c      	bcc.n	8009b3a <vPortFree+0x2a>
 8009b20:	4e30      	ldr	r6, [pc, #192]	@ (8009be4 <vPortFree+0xd4>)
 8009b22:	42b4      	cmp	r4, r6
 8009b24:	d809      	bhi.n	8009b3a <vPortFree+0x2a>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009b26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da09      	bge.n	8009b42 <vPortFree+0x32>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b2e:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8009b32:	b14a      	cbz	r2, 8009b48 <vPortFree+0x38>
 8009b34:	f7ff feea 	bl	800990c <ulSetInterruptMask>
 8009b38:	e7fe      	b.n	8009b38 <vPortFree+0x28>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009b3a:	f7ff fee7 	bl	800990c <ulSetInterruptMask>
 8009b3e:	e7fe      	b.n	8009b3e <vPortFree+0x2e>
 8009b40:	4770      	bx	lr
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009b42:	f7ff fee3 	bl	800990c <ulSetInterruptMask>
 8009b46:	e7fe      	b.n	8009b46 <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
 8009b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009b4c:	4f26      	ldr	r7, [pc, #152]	@ (8009be8 <vPortFree+0xd8>)
                heapFREE_BLOCK( pxLink );
 8009b4e:	f840 3c04 	str.w	r3, [r0, #-4]
 8009b52:	9001      	str	r0, [sp, #4]
                vTaskSuspendAll();
 8009b54:	f7ff f8e8 	bl	8008d28 <vTaskSuspendAll>
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009b58:	463b      	mov	r3, r7
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009b5a:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8009bf4 <vPortFree+0xe4>
 8009b5e:	9801      	ldr	r0, [sp, #4]
 8009b60:	f8de 2000 	ldr.w	r2, [lr]
 8009b64:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f8ce 2000 	str.w	r2, [lr]
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009b6e:	461a      	mov	r2, r3
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d8fb      	bhi.n	8009b6e <vPortFree+0x5e>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8009b76:	42ba      	cmp	r2, r7
 8009b78:	d006      	beq.n	8009b88 <vPortFree+0x78>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8009b7a:	42aa      	cmp	r2, r5
 8009b7c:	d301      	bcc.n	8009b82 <vPortFree+0x72>
 8009b7e:	42b2      	cmp	r2, r6
 8009b80:	d902      	bls.n	8009b88 <vPortFree+0x78>
 8009b82:	f7ff fec3 	bl	800990c <ulSetInterruptMask>
 8009b86:	e7fe      	b.n	8009b86 <vPortFree+0x76>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b88:	6855      	ldr	r5, [r2, #4]
 8009b8a:	1956      	adds	r6, r2, r5
 8009b8c:	42b4      	cmp	r4, r6
 8009b8e:	d010      	beq.n	8009bb2 <vPortFree+0xa2>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009b90:	1865      	adds	r5, r4, r1
 8009b92:	42ab      	cmp	r3, r5
 8009b94:	d01d      	beq.n	8009bd2 <vPortFree+0xc2>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b96:	f840 3c08 	str.w	r3, [r0, #-8]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009b9a:	42a2      	cmp	r2, r4
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8009b9c:	bf18      	it	ne
 8009b9e:	6014      	strne	r4, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8009ba0:	4a12      	ldr	r2, [pc, #72]	@ (8009bec <vPortFree+0xdc>)
 8009ba2:	6813      	ldr	r3, [r2, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	6013      	str	r3, [r2, #0]
}
 8009ba8:	b003      	add	sp, #12
 8009baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 8009bae:	f7ff b8c3 	b.w	8008d38 <xTaskResumeAll>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bb2:	4429      	add	r1, r5
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009bb4:	1850      	adds	r0, r2, r1
 8009bb6:	4283      	cmp	r3, r0
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bb8:	6051      	str	r1, [r2, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009bba:	d1f1      	bne.n	8009ba0 <vPortFree+0x90>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009bbc:	480c      	ldr	r0, [pc, #48]	@ (8009bf0 <vPortFree+0xe0>)
 8009bbe:	6800      	ldr	r0, [r0, #0]
 8009bc0:	4283      	cmp	r3, r0
 8009bc2:	d00b      	beq.n	8009bdc <vPortFree+0xcc>
        pxBlockToInsert = pxIterator;
 8009bc4:	4614      	mov	r4, r2
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009bc6:	e9d3 5000 	ldrd	r5, r0, [r3]
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8009bca:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009bcc:	e9c4 5100 	strd	r5, r1, [r4]
 8009bd0:	e7e3      	b.n	8009b9a <vPortFree+0x8a>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009bd2:	4d07      	ldr	r5, [pc, #28]	@ (8009bf0 <vPortFree+0xe0>)
 8009bd4:	682d      	ldr	r5, [r5, #0]
 8009bd6:	42ab      	cmp	r3, r5
 8009bd8:	d1f5      	bne.n	8009bc6 <vPortFree+0xb6>
 8009bda:	e7dc      	b.n	8009b96 <vPortFree+0x86>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009bdc:	6013      	str	r3, [r2, #0]
    if( pxIterator != pxBlockToInsert )
 8009bde:	e7df      	b.n	8009ba0 <vPortFree+0x90>
 8009be0:	20061f70 	.word	0x20061f70
 8009be4:	2007af6f 	.word	0x2007af6f
 8009be8:	20061f68 	.word	0x20061f68
 8009bec:	20061f54 	.word	0x20061f54
 8009bf0:	20061f64 	.word	0x20061f64
 8009bf4:	20061f60 	.word	0x20061f60

08009bf8 <xPortGetFreeHeapSize>:
    return xFreeBytesRemaining;
 8009bf8:	4b01      	ldr	r3, [pc, #4]	@ (8009c00 <xPortGetFreeHeapSize+0x8>)
}
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	20061f60 	.word	0x20061f60

08009c04 <ai_buffer_get_size>:
 8009c04:	b360      	cbz	r0, 8009c60 <ai_buffer_get_size+0x5c>
 8009c06:	b430      	push	{r4, r5}
 8009c08:	6803      	ldr	r3, [r0, #0]
 8009c0a:	4d16      	ldr	r5, [pc, #88]	@ (8009c64 <ai_buffer_get_size+0x60>)
 8009c0c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009c10:	6984      	ldr	r4, [r0, #24]
 8009c12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c16:	42ab      	cmp	r3, r5
 8009c18:	6862      	ldr	r2, [r4, #4]
 8009c1a:	d01b      	beq.n	8009c54 <ai_buffer_get_size+0x50>
 8009c1c:	7d03      	ldrb	r3, [r0, #20]
 8009c1e:	6941      	ldr	r1, [r0, #20]
 8009c20:	f1a3 0301 	sub.w	r3, r3, #1
 8009c24:	fab3 f383 	clz	r3, r3
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009c2e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009c32:	da0b      	bge.n	8009c4c <ai_buffer_get_size+0x48>
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d102      	bne.n	8009c3e <ai_buffer_get_size+0x3a>
 8009c38:	2802      	cmp	r0, #2
 8009c3a:	d007      	beq.n	8009c4c <ai_buffer_get_size+0x48>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009c42:	3301      	adds	r3, #1
 8009c44:	4298      	cmp	r0, r3
 8009c46:	fb01 f202 	mul.w	r2, r1, r2
 8009c4a:	d1f3      	bne.n	8009c34 <ai_buffer_get_size+0x30>
 8009c4c:	bc30      	pop	{r4, r5}
 8009c4e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009c52:	4770      	bx	lr
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d0e1      	beq.n	8009c1c <ai_buffer_get_size+0x18>
 8009c58:	321f      	adds	r2, #31
 8009c5a:	f022 021f 	bic.w	r2, r2, #31
 8009c5e:	e7dd      	b.n	8009c1c <ai_buffer_get_size+0x18>
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	000400c0 	.word	0x000400c0

08009c68 <ai_buffer_array_sane>:
 8009c68:	b138      	cbz	r0, 8009c7a <ai_buffer_array_sane+0x12>
 8009c6a:	6843      	ldr	r3, [r0, #4]
 8009c6c:	b123      	cbz	r3, 8009c78 <ai_buffer_array_sane+0x10>
 8009c6e:	8840      	ldrh	r0, [r0, #2]
 8009c70:	3800      	subs	r0, #0
 8009c72:	bf18      	it	ne
 8009c74:	2001      	movne	r0, #1
 8009c76:	4770      	bx	lr
 8009c78:	4618      	mov	r0, r3
 8009c7a:	4770      	bx	lr

08009c7c <ai_buffer_array_item_set_address>:
 8009c7c:	b158      	cbz	r0, 8009c96 <ai_buffer_array_item_set_address+0x1a>
 8009c7e:	6843      	ldr	r3, [r0, #4]
 8009c80:	b143      	cbz	r3, 8009c94 <ai_buffer_array_item_set_address+0x18>
 8009c82:	8840      	ldrh	r0, [r0, #2]
 8009c84:	b138      	cbz	r0, 8009c96 <ai_buffer_array_item_set_address+0x1a>
 8009c86:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009c8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009c8e:	2001      	movs	r0, #1
 8009c90:	605a      	str	r2, [r3, #4]
 8009c92:	4770      	bx	lr
 8009c94:	4618      	mov	r0, r3
 8009c96:	4770      	bx	lr

08009c98 <ai_platform_get_weights_map>:
 8009c98:	b1f2      	cbz	r2, 8009cd8 <ai_platform_get_weights_map+0x40>
 8009c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	b1c8      	cbz	r0, 8009cd4 <ai_platform_get_weights_map+0x3c>
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	b1b9      	cbz	r1, 8009cd4 <ai_platform_get_weights_map+0x3c>
 8009ca4:	4615      	mov	r5, r2
 8009ca6:	4b23      	ldr	r3, [pc, #140]	@ (8009d34 <ai_platform_get_weights_map+0x9c>)
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d00b      	beq.n	8009cc6 <ai_platform_get_weights_map+0x2e>
 8009cae:	686d      	ldr	r5, [r5, #4]
 8009cb0:	b185      	cbz	r5, 8009cd4 <ai_platform_get_weights_map+0x3c>
 8009cb2:	682f      	ldr	r7, [r5, #0]
 8009cb4:	429f      	cmp	r7, r3
 8009cb6:	d011      	beq.n	8009cdc <ai_platform_get_weights_map+0x44>
 8009cb8:	f1a1 0001 	sub.w	r0, r1, #1
 8009cbc:	fab0 f080 	clz	r0, r0
 8009cc0:	6035      	str	r5, [r6, #0]
 8009cc2:	0940      	lsrs	r0, r0, #5
 8009cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc6:	1d28      	adds	r0, r5, #4
 8009cc8:	f7ff ffce 	bl	8009c68 <ai_buffer_array_sane>
 8009ccc:	b110      	cbz	r0, 8009cd4 <ai_platform_get_weights_map+0x3c>
 8009cce:	88eb      	ldrh	r3, [r5, #6]
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	d01b      	beq.n	8009d0c <ai_platform_get_weights_map+0x74>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd8:	2000      	movs	r0, #0
 8009cda:	4770      	bx	lr
 8009cdc:	4629      	mov	r1, r5
 8009cde:	2300      	movs	r3, #0
 8009ce0:	3804      	subs	r0, #4
 8009ce2:	e004      	b.n	8009cee <ai_platform_get_weights_map+0x56>
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	f840 2f04 	str.w	r2, [r0, #4]!
 8009cec:	d005      	beq.n	8009cfa <ai_platform_get_weights_map+0x62>
 8009cee:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009cf2:	42ba      	cmp	r2, r7
 8009cf4:	d1f6      	bne.n	8009ce4 <ai_platform_get_weights_map+0x4c>
 8009cf6:	429c      	cmp	r4, r3
 8009cf8:	d1ec      	bne.n	8009cd4 <ai_platform_get_weights_map+0x3c>
 8009cfa:	3401      	adds	r4, #1
 8009cfc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8009d00:	4b0c      	ldr	r3, [pc, #48]	@ (8009d34 <ai_platform_get_weights_map+0x9c>)
 8009d02:	1ac0      	subs	r0, r0, r3
 8009d04:	fab0 f080 	clz	r0, r0
 8009d08:	0940      	lsrs	r0, r0, #5
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	1f30      	subs	r0, r6, #4
 8009d10:	4611      	mov	r1, r2
 8009d12:	e004      	b.n	8009d1e <ai_platform_get_weights_map+0x86>
 8009d14:	3101      	adds	r1, #1
 8009d16:	428c      	cmp	r4, r1
 8009d18:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d1c:	d005      	beq.n	8009d2a <ai_platform_get_weights_map+0x92>
 8009d1e:	68ab      	ldr	r3, [r5, #8]
 8009d20:	4413      	add	r3, r2
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	321c      	adds	r2, #28
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1f4      	bne.n	8009d14 <ai_platform_get_weights_map+0x7c>
 8009d2a:	1a60      	subs	r0, r4, r1
 8009d2c:	fab0 f080 	clz	r0, r0
 8009d30:	0940      	lsrs	r0, r0, #5
 8009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d34:	a1facade 	.word	0xa1facade

08009d38 <ai_platform_get_activations_map>:
 8009d38:	b1fa      	cbz	r2, 8009d7a <ai_platform_get_activations_map+0x42>
 8009d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	b1d0      	cbz	r0, 8009d76 <ai_platform_get_activations_map+0x3e>
 8009d40:	460c      	mov	r4, r1
 8009d42:	b1c1      	cbz	r1, 8009d76 <ai_platform_get_activations_map+0x3e>
 8009d44:	4615      	mov	r5, r2
 8009d46:	4b24      	ldr	r3, [pc, #144]	@ (8009dd8 <ai_platform_get_activations_map+0xa0>)
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d00b      	beq.n	8009d66 <ai_platform_get_activations_map+0x2e>
 8009d4e:	6a2d      	ldr	r5, [r5, #32]
 8009d50:	b18d      	cbz	r5, 8009d76 <ai_platform_get_activations_map+0x3e>
 8009d52:	682f      	ldr	r7, [r5, #0]
 8009d54:	429f      	cmp	r7, r3
 8009d56:	d012      	beq.n	8009d7e <ai_platform_get_activations_map+0x46>
 8009d58:	f1a1 0001 	sub.w	r0, r1, #1
 8009d5c:	fab0 f080 	clz	r0, r0
 8009d60:	6035      	str	r5, [r6, #0]
 8009d62:	0940      	lsrs	r0, r0, #5
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d66:	f105 000c 	add.w	r0, r5, #12
 8009d6a:	f7ff ff7d 	bl	8009c68 <ai_buffer_array_sane>
 8009d6e:	b110      	cbz	r0, 8009d76 <ai_platform_get_activations_map+0x3e>
 8009d70:	89eb      	ldrh	r3, [r5, #14]
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d01b      	beq.n	8009dae <ai_platform_get_activations_map+0x76>
 8009d76:	2000      	movs	r0, #0
 8009d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	4770      	bx	lr
 8009d7e:	4629      	mov	r1, r5
 8009d80:	2300      	movs	r3, #0
 8009d82:	3804      	subs	r0, #4
 8009d84:	e004      	b.n	8009d90 <ai_platform_get_activations_map+0x58>
 8009d86:	3301      	adds	r3, #1
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	f840 2f04 	str.w	r2, [r0, #4]!
 8009d8e:	d005      	beq.n	8009d9c <ai_platform_get_activations_map+0x64>
 8009d90:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009d94:	42ba      	cmp	r2, r7
 8009d96:	d1f6      	bne.n	8009d86 <ai_platform_get_activations_map+0x4e>
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	d1ec      	bne.n	8009d76 <ai_platform_get_activations_map+0x3e>
 8009d9c:	3401      	adds	r4, #1
 8009d9e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <ai_platform_get_activations_map+0xa0>)
 8009da4:	1ac0      	subs	r0, r0, r3
 8009da6:	fab0 f080 	clz	r0, r0
 8009daa:	0940      	lsrs	r0, r0, #5
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dae:	2200      	movs	r2, #0
 8009db0:	1f30      	subs	r0, r6, #4
 8009db2:	4611      	mov	r1, r2
 8009db4:	e004      	b.n	8009dc0 <ai_platform_get_activations_map+0x88>
 8009db6:	3101      	adds	r1, #1
 8009db8:	428c      	cmp	r4, r1
 8009dba:	f840 3f04 	str.w	r3, [r0, #4]!
 8009dbe:	d005      	beq.n	8009dcc <ai_platform_get_activations_map+0x94>
 8009dc0:	692b      	ldr	r3, [r5, #16]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	321c      	adds	r2, #28
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f4      	bne.n	8009db6 <ai_platform_get_activations_map+0x7e>
 8009dcc:	1a60      	subs	r0, r4, r1
 8009dce:	fab0 f080 	clz	r0, r0
 8009dd2:	0940      	lsrs	r0, r0, #5
 8009dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	a1facade 	.word	0xa1facade

08009ddc <ai_platform_bind_network_params>:
 8009ddc:	4603      	mov	r3, r0
 8009dde:	b198      	cbz	r0, 8009e08 <ai_platform_bind_network_params+0x2c>
 8009de0:	b1a9      	cbz	r1, 8009e0e <ai_platform_bind_network_params+0x32>
 8009de2:	b1ba      	cbz	r2, 8009e14 <ai_platform_bind_network_params+0x38>
 8009de4:	f04f 0c01 	mov.w	ip, #1
 8009de8:	b500      	push	{lr}
 8009dea:	480c      	ldr	r0, [pc, #48]	@ (8009e1c <ai_platform_bind_network_params+0x40>)
 8009dec:	f103 0e0c 	add.w	lr, r3, #12
 8009df0:	f843 0b04 	str.w	r0, [r3], #4
 8009df4:	c903      	ldmia	r1, {r0, r1}
 8009df6:	e883 0003 	stmia.w	r3, {r0, r1}
 8009dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dfe:	e88e 0003 	stmia.w	lr, {r0, r1}
 8009e02:	4660      	mov	r0, ip
 8009e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e08:	4684      	mov	ip, r0
 8009e0a:	4660      	mov	r0, ip
 8009e0c:	4770      	bx	lr
 8009e0e:	468c      	mov	ip, r1
 8009e10:	4660      	mov	r0, ip
 8009e12:	4770      	bx	lr
 8009e14:	4694      	mov	ip, r2
 8009e16:	4660      	mov	r0, ip
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	a1facade 	.word	0xa1facade

08009e20 <ai_platform_runtime_get_revision>:
 8009e20:	4800      	ldr	r0, [pc, #0]	@ (8009e24 <ai_platform_runtime_get_revision+0x4>)
 8009e22:	4770      	bx	lr
 8009e24:	0800f7c4 	.word	0x0800f7c4

08009e28 <ai_platform_runtime_get_version>:
 8009e28:	2000      	movs	r0, #0
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e54 <ai_platform_runtime_get_version+0x2c>)
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	fa5f fc83 	uxtb.w	ip, r3
 8009e34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009e38:	f36c 0007 	bfi	r0, ip, #0, #8
 8009e3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009e40:	f361 200f 	bfi	r0, r1, #8, #8
 8009e44:	0e1b      	lsrs	r3, r3, #24
 8009e46:	f362 4017 	bfi	r0, r2, #16, #8
 8009e4a:	f363 601f 	bfi	r0, r3, #24, #8
 8009e4e:	b002      	add	sp, #8
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	0801e594 	.word	0x0801e594

08009e58 <ai_platform_api_get_version>:
 8009e58:	2000      	movs	r0, #0
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e84 <ai_platform_api_get_version+0x2c>)
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	fa5f fc83 	uxtb.w	ip, r3
 8009e64:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009e68:	f36c 0007 	bfi	r0, ip, #0, #8
 8009e6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009e70:	f361 200f 	bfi	r0, r1, #8, #8
 8009e74:	0e1b      	lsrs	r3, r3, #24
 8009e76:	f362 4017 	bfi	r0, r2, #16, #8
 8009e7a:	f363 601f 	bfi	r0, r3, #24, #8
 8009e7e:	b002      	add	sp, #8
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	0801e590 	.word	0x0801e590

08009e88 <ai_platform_interface_api_get_version>:
 8009e88:	2000      	movs	r0, #0
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb4 <ai_platform_interface_api_get_version+0x2c>)
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	fa5f fc83 	uxtb.w	ip, r3
 8009e94:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009e98:	f36c 0007 	bfi	r0, ip, #0, #8
 8009e9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009ea0:	f361 200f 	bfi	r0, r1, #8, #8
 8009ea4:	0e1b      	lsrs	r3, r3, #24
 8009ea6:	f362 4017 	bfi	r0, r2, #16, #8
 8009eaa:	f363 601f 	bfi	r0, r3, #24, #8
 8009eae:	b002      	add	sp, #8
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	0801e58c 	.word	0x0801e58c

08009eb8 <ai_platform_context_acquire>:
 8009eb8:	6802      	ldr	r2, [r0, #0]
 8009eba:	4b02      	ldr	r3, [pc, #8]	@ (8009ec4 <ai_platform_context_acquire+0xc>)
 8009ebc:	4393      	bics	r3, r2
 8009ebe:	bf18      	it	ne
 8009ec0:	2000      	movne	r0, #0
 8009ec2:	4770      	bx	lr
 8009ec4:	a1c00100 	.word	0xa1c00100

08009ec8 <ai_platform_network_get_error>:
 8009ec8:	4b04      	ldr	r3, [pc, #16]	@ (8009edc <ai_platform_network_get_error+0x14>)
 8009eca:	6802      	ldr	r2, [r0, #0]
 8009ecc:	4393      	bics	r3, r2
 8009ece:	d102      	bne.n	8009ed6 <ai_platform_network_get_error+0xe>
 8009ed0:	300c      	adds	r0, #12
 8009ed2:	f000 bdc3 	b.w	800aa5c <core_get_error>
 8009ed6:	f241 0010 	movw	r0, #4112	@ 0x1010
 8009eda:	4770      	bx	lr
 8009edc:	a1c00100 	.word	0xa1c00100

08009ee0 <ai_platform_network_set_error>:
 8009ee0:	b110      	cbz	r0, 8009ee8 <ai_platform_network_set_error+0x8>
 8009ee2:	300c      	adds	r0, #12
 8009ee4:	f000 bdc0 	b.w	800aa68 <core_set_error>
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop

08009eec <ai_platform_inputs_get>:
 8009eec:	4b39      	ldr	r3, [pc, #228]	@ (8009fd4 <ai_platform_inputs_get+0xe8>)
 8009eee:	6802      	ldr	r2, [r0, #0]
 8009ef0:	4393      	bics	r3, r2
 8009ef2:	d163      	bne.n	8009fbc <ai_platform_inputs_get+0xd0>
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009efa:	4605      	mov	r5, r0
 8009efc:	460c      	mov	r4, r1
 8009efe:	b085      	sub	sp, #20
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d04e      	beq.n	8009fa2 <ai_platform_inputs_get+0xb6>
 8009f04:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8009f06:	2f00      	cmp	r7, #0
 8009f08:	d04b      	beq.n	8009fa2 <ai_platform_inputs_get+0xb6>
 8009f0a:	f04f 0b00 	mov.w	fp, #0
 8009f0e:	46ba      	mov	sl, r7
 8009f10:	465e      	mov	r6, fp
 8009f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f16:	e016      	b.n	8009f46 <ai_platform_inputs_get+0x5a>
 8009f18:	2201      	movs	r2, #1
 8009f1a:	9901      	ldr	r1, [sp, #4]
 8009f1c:	507a      	str	r2, [r7, r1]
 8009f1e:	69a1      	ldr	r1, [r4, #24]
 8009f20:	f04f 0201 	mov.w	r2, #1
 8009f24:	684c      	ldr	r4, [r1, #4]
 8009f26:	60ab      	str	r3, [r5, #8]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	752a      	strb	r2, [r5, #20]
 8009f2c:	6028      	str	r0, [r5, #0]
 8009f2e:	6968      	ldr	r0, [r5, #20]
 8009f30:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8009f34:	f368 201f 	bfi	r0, r8, #8, #24
 8009f38:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8009f3c:	f8c5 c004 	str.w	ip, [r5, #4]
 8009f40:	3601      	adds	r6, #1
 8009f42:	f10b 0b1c 	add.w	fp, fp, #28
 8009f46:	f8ba 3000 	ldrh.w	r3, [sl]
 8009f4a:	00f2      	lsls	r2, r6, #3
 8009f4c:	42b3      	cmp	r3, r6
 8009f4e:	9201      	str	r2, [sp, #4]
 8009f50:	d936      	bls.n	8009fc0 <ai_platform_inputs_get+0xd4>
 8009f52:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d032      	beq.n	8009fc0 <ai_platform_inputs_get+0xd4>
 8009f5a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8009f5e:	b37c      	cbz	r4, 8009fc0 <ai_platform_inputs_get+0xd4>
 8009f60:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009f64:	69a2      	ldr	r2, [r4, #24]
 8009f66:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 8009f6a:	68a3      	ldr	r3, [r4, #8]
 8009f6c:	6810      	ldr	r0, [r2, #0]
 8009f6e:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8009f72:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009f76:	f002 fa73 	bl	800c460 <ai_array_to_buffer_fmt>
 8009f7a:	69a1      	ldr	r1, [r4, #24]
 8009f7c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8009f80:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009f84:	445d      	add	r5, fp
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0ca      	beq.n	8009f20 <ai_platform_inputs_get+0x34>
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 8009f90:	6821      	ldr	r1, [r4, #0]
 8009f92:	6059      	str	r1, [r3, #4]
 8009f94:	b111      	cbz	r1, 8009f9c <ai_platform_inputs_get+0xb0>
 8009f96:	8849      	ldrh	r1, [r1, #2]
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d1bd      	bne.n	8009f18 <ai_platform_inputs_get+0x2c>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	69a1      	ldr	r1, [r4, #24]
 8009fa0:	e7be      	b.n	8009f20 <ai_platform_inputs_get+0x34>
 8009fa2:	2600      	movs	r6, #0
 8009fa4:	2218      	movs	r2, #24
 8009fa6:	2111      	movs	r1, #17
 8009fa8:	f105 000c 	add.w	r0, r5, #12
 8009fac:	f000 fd5c 	bl	800aa68 <core_set_error>
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	b104      	cbz	r4, 8009fb6 <ai_platform_inputs_get+0xca>
 8009fb4:	8026      	strh	r6, [r4, #0]
 8009fb6:	b005      	add	sp, #20
 8009fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	4770      	bx	lr
 8009fc0:	b2b6      	uxth	r6, r6
 8009fc2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	d0eb      	beq.n	8009fa2 <ai_platform_inputs_get+0xb6>
 8009fca:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009fce:	6858      	ldr	r0, [r3, #4]
 8009fd0:	e7ef      	b.n	8009fb2 <ai_platform_inputs_get+0xc6>
 8009fd2:	bf00      	nop
 8009fd4:	a1c00100 	.word	0xa1c00100

08009fd8 <ai_platform_outputs_get>:
 8009fd8:	4b37      	ldr	r3, [pc, #220]	@ (800a0b8 <ai_platform_outputs_get+0xe0>)
 8009fda:	6802      	ldr	r2, [r0, #0]
 8009fdc:	4393      	bics	r3, r2
 8009fde:	d169      	bne.n	800a0b4 <ai_platform_outputs_get+0xdc>
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	460c      	mov	r4, r1
 8009fec:	b085      	sub	sp, #20
 8009fee:	d94b      	bls.n	800a088 <ai_platform_outputs_get+0xb0>
 8009ff0:	f04f 0b00 	mov.w	fp, #0
 8009ff4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8009ff6:	465e      	mov	r6, fp
 8009ff8:	46d8      	mov	r8, fp
 8009ffa:	46ba      	mov	sl, r7
 8009ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a000:	e016      	b.n	800a030 <ai_platform_outputs_get+0x58>
 800a002:	2201      	movs	r2, #1
 800a004:	9901      	ldr	r1, [sp, #4]
 800a006:	507a      	str	r2, [r7, r1]
 800a008:	69a9      	ldr	r1, [r5, #24]
 800a00a:	f04f 0201 	mov.w	r2, #1
 800a00e:	684d      	ldr	r5, [r1, #4]
 800a010:	7522      	strb	r2, [r4, #20]
 800a012:	6020      	str	r0, [r4, #0]
 800a014:	6960      	ldr	r0, [r4, #20]
 800a016:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800a01a:	f369 201f 	bfi	r0, r9, #8, #24
 800a01e:	e9c4 5004 	strd	r5, r0, [r4, #16]
 800a022:	9b00      	ldr	r3, [sp, #0]
 800a024:	f8c4 c004 	str.w	ip, [r4, #4]
 800a028:	61a3      	str	r3, [r4, #24]
 800a02a:	3601      	adds	r6, #1
 800a02c:	f10b 0b1c 	add.w	fp, fp, #28
 800a030:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a034:	00f2      	lsls	r2, r6, #3
 800a036:	42b3      	cmp	r3, r6
 800a038:	9201      	str	r2, [sp, #4]
 800a03a:	d932      	bls.n	800a0a2 <ai_platform_outputs_get+0xca>
 800a03c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a040:	b37b      	cbz	r3, 800a0a2 <ai_platform_outputs_get+0xca>
 800a042:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a046:	b365      	cbz	r5, 800a0a2 <ai_platform_outputs_get+0xca>
 800a048:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a04c:	69aa      	ldr	r2, [r5, #24]
 800a04e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a052:	68ab      	ldr	r3, [r5, #8]
 800a054:	6810      	ldr	r0, [r2, #0]
 800a056:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a05a:	68eb      	ldr	r3, [r5, #12]
 800a05c:	445c      	add	r4, fp
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	f002 f9fe 	bl	800c460 <ai_array_to_buffer_fmt>
 800a064:	69a9      	ldr	r1, [r5, #24]
 800a066:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a06a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0cb      	beq.n	800a00a <ai_platform_outputs_get+0x32>
 800a072:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 800a076:	6829      	ldr	r1, [r5, #0]
 800a078:	6059      	str	r1, [r3, #4]
 800a07a:	b111      	cbz	r1, 800a082 <ai_platform_outputs_get+0xaa>
 800a07c:	8849      	ldrh	r1, [r1, #2]
 800a07e:	2900      	cmp	r1, #0
 800a080:	d1bf      	bne.n	800a002 <ai_platform_outputs_get+0x2a>
 800a082:	2300      	movs	r3, #0
 800a084:	69a9      	ldr	r1, [r5, #24]
 800a086:	e7c0      	b.n	800a00a <ai_platform_outputs_get+0x32>
 800a088:	2600      	movs	r6, #0
 800a08a:	2218      	movs	r2, #24
 800a08c:	2111      	movs	r1, #17
 800a08e:	f105 000c 	add.w	r0, r5, #12
 800a092:	f000 fce9 	bl	800aa68 <core_set_error>
 800a096:	4630      	mov	r0, r6
 800a098:	b104      	cbz	r4, 800a09c <ai_platform_outputs_get+0xc4>
 800a09a:	8026      	strh	r6, [r4, #0]
 800a09c:	b005      	add	sp, #20
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	b2b6      	uxth	r6, r6
 800a0a4:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800a0a8:	2e00      	cmp	r6, #0
 800a0aa:	d0ed      	beq.n	800a088 <ai_platform_outputs_get+0xb0>
 800a0ac:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a0b0:	6858      	ldr	r0, [r3, #4]
 800a0b2:	e7f1      	b.n	800a098 <ai_platform_outputs_get+0xc0>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	4770      	bx	lr
 800a0b8:	a1c00100 	.word	0xa1c00100

0800a0bc <ai_platform_api_get_network_report>:
 800a0bc:	4b9f      	ldr	r3, [pc, #636]	@ (800a33c <ai_platform_api_get_network_report+0x280>)
 800a0be:	6802      	ldr	r2, [r0, #0]
 800a0c0:	4393      	bics	r3, r2
 800a0c2:	f040 8181 	bne.w	800a3c8 <ai_platform_api_get_network_report+0x30c>
 800a0c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	b089      	sub	sp, #36	@ 0x24
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d075      	beq.n	800a1be <ai_platform_api_get_network_report+0x102>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	67cb      	str	r3, [r1, #124]	@ 0x7c
 800a0d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a0d8:	4682      	mov	sl, r0
 800a0da:	2201      	movs	r2, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 8125 	beq.w	800a32c <ai_platform_api_get_network_report+0x270>
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	67ea      	str	r2, [r5, #124]	@ 0x7c
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	d007      	beq.n	800a0fc <ai_platform_api_get_network_report+0x40>
 800a0ec:	1c51      	adds	r1, r2, #1
 800a0ee:	b12b      	cbz	r3, 800a0fc <ai_platform_api_get_network_report+0x40>
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	67ea      	str	r2, [r5, #124]	@ 0x7c
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	428b      	cmp	r3, r1
 800a0fa:	d1f7      	bne.n	800a0ec <ai_platform_api_get_network_report+0x30>
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	f000 8115 	beq.w	800a32c <ai_platform_api_get_network_report+0x270>
 800a102:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 800a106:	2b00      	cmp	r3, #0
 800a108:	d050      	beq.n	800a1ac <ai_platform_api_get_network_report+0xf0>
 800a10a:	f8da 7034 	ldr.w	r7, [sl, #52]	@ 0x34
 800a10e:	2f00      	cmp	r7, #0
 800a110:	d04c      	beq.n	800a1ac <ai_platform_api_get_network_report+0xf0>
 800a112:	f04f 0b00 	mov.w	fp, #0
 800a116:	f8cd a008 	str.w	sl, [sp, #8]
 800a11a:	465e      	mov	r6, fp
 800a11c:	46ba      	mov	sl, r7
 800a11e:	9503      	str	r5, [sp, #12]
 800a120:	e016      	b.n	800a150 <ai_platform_api_get_network_report+0x94>
 800a122:	2201      	movs	r2, #1
 800a124:	00f1      	lsls	r1, r6, #3
 800a126:	507a      	str	r2, [r7, r1]
 800a128:	69a9      	ldr	r1, [r5, #24]
 800a12a:	684d      	ldr	r5, [r1, #4]
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	f04f 0301 	mov.w	r3, #1
 800a132:	7523      	strb	r3, [r4, #20]
 800a134:	2300      	movs	r3, #0
 800a136:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a13a:	6963      	ldr	r3, [r4, #20]
 800a13c:	e9c4 0c00 	strd	r0, ip, [r4]
 800a140:	f369 231f 	bfi	r3, r9, #8, #24
 800a144:	f8c4 8018 	str.w	r8, [r4, #24]
 800a148:	6163      	str	r3, [r4, #20]
 800a14a:	3601      	adds	r6, #1
 800a14c:	f10b 0b1c 	add.w	fp, fp, #28
 800a150:	f8ba 3000 	ldrh.w	r3, [sl]
 800a154:	42b3      	cmp	r3, r6
 800a156:	d936      	bls.n	800a1c6 <ai_platform_api_get_network_report+0x10a>
 800a158:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d032      	beq.n	800a1c6 <ai_platform_api_get_network_report+0x10a>
 800a160:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a164:	b37d      	cbz	r5, 800a1c6 <ai_platform_api_get_network_report+0x10a>
 800a166:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a16a:	00f1      	lsls	r1, r6, #3
 800a16c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a170:	69ab      	ldr	r3, [r5, #24]
 800a172:	9101      	str	r1, [sp, #4]
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	68ab      	ldr	r3, [r5, #8]
 800a178:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800a17c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a180:	f002 f96e 	bl	800c460 <ai_array_to_buffer_fmt>
 800a184:	69a9      	ldr	r1, [r5, #24]
 800a186:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a18a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a18e:	445c      	add	r4, fp
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0ca      	beq.n	800a12a <ai_platform_api_get_network_report+0x6e>
 800a194:	2200      	movs	r2, #0
 800a196:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
 800a19a:	6829      	ldr	r1, [r5, #0]
 800a19c:	6059      	str	r1, [r3, #4]
 800a19e:	b111      	cbz	r1, 800a1a6 <ai_platform_api_get_network_report+0xea>
 800a1a0:	8849      	ldrh	r1, [r1, #2]
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d1bd      	bne.n	800a122 <ai_platform_api_get_network_report+0x66>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	69a9      	ldr	r1, [r5, #24]
 800a1aa:	e7be      	b.n	800a12a <ai_platform_api_get_network_report+0x6e>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2218      	movs	r2, #24
 800a1b0:	2112      	movs	r1, #18
 800a1b2:	f10a 000c 	add.w	r0, sl, #12
 800a1b6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800a1b8:	872b      	strh	r3, [r5, #56]	@ 0x38
 800a1ba:	f000 fc55 	bl	800aa68 <core_set_error>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	b009      	add	sp, #36	@ 0x24
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c6:	b2b6      	uxth	r6, r6
 800a1c8:	4657      	mov	r7, sl
 800a1ca:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	d0ec      	beq.n	800a1ac <ai_platform_api_get_network_report+0xf0>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	872e      	strh	r6, [r5, #56]	@ 0x38
 800a1d8:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800a1da:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	f240 809a 	bls.w	800a318 <ai_platform_api_get_network_report+0x25c>
 800a1e4:	f04f 0900 	mov.w	r9, #0
 800a1e8:	e9cd a502 	strd	sl, r5, [sp, #8]
 800a1ec:	464f      	mov	r7, r9
 800a1ee:	46cb      	mov	fp, r9
 800a1f0:	f8da 8034 	ldr.w	r8, [sl, #52]	@ 0x34
 800a1f4:	e016      	b.n	800a224 <ai_platform_api_get_network_report+0x168>
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	f84a 100e 	str.w	r1, [sl, lr]
 800a1fc:	69a9      	ldr	r1, [r5, #24]
 800a1fe:	6849      	ldr	r1, [r1, #4]
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	e9c4 0200 	strd	r0, r2, [r4]
 800a208:	61a3      	str	r3, [r4, #24]
 800a20a:	f04f 0301 	mov.w	r3, #1
 800a20e:	7523      	strb	r3, [r4, #20]
 800a210:	6963      	ldr	r3, [r4, #20]
 800a212:	6121      	str	r1, [r4, #16]
 800a214:	f366 231f 	bfi	r3, r6, #8, #24
 800a218:	f8c4 b00c 	str.w	fp, [r4, #12]
 800a21c:	3701      	adds	r7, #1
 800a21e:	f109 091c 	add.w	r9, r9, #28
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a228:	429f      	cmp	r7, r3
 800a22a:	d226      	bcs.n	800a27a <ai_platform_api_get_network_report+0x1be>
 800a22c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a230:	b31b      	cbz	r3, 800a27a <ai_platform_api_get_network_report+0x1be>
 800a232:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800a236:	b305      	cbz	r5, 800a27a <ai_platform_api_get_network_report+0x1be>
 800a238:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a23c:	68ae      	ldr	r6, [r5, #8]
 800a23e:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 800a242:	69ab      	ldr	r3, [r5, #24]
 800a244:	444c      	add	r4, r9
 800a246:	6818      	ldr	r0, [r3, #0]
 800a248:	68eb      	ldr	r3, [r5, #12]
 800a24a:	f3c6 2617 	ubfx	r6, r6, #8, #24
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	f002 f906 	bl	800c460 <ai_array_to_buffer_fmt>
 800a254:	69a9      	ldr	r1, [r5, #24]
 800a256:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 800a25a:	688a      	ldr	r2, [r1, #8]
 800a25c:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0cc      	beq.n	800a1fe <ai_platform_api_get_network_report+0x142>
 800a264:	f84a b037 	str.w	fp, [sl, r7, lsl #3]
 800a268:	6829      	ldr	r1, [r5, #0]
 800a26a:	6059      	str	r1, [r3, #4]
 800a26c:	b111      	cbz	r1, 800a274 <ai_platform_api_get_network_report+0x1b8>
 800a26e:	8849      	ldrh	r1, [r1, #2]
 800a270:	2900      	cmp	r1, #0
 800a272:	d1c0      	bne.n	800a1f6 <ai_platform_api_get_network_report+0x13a>
 800a274:	2300      	movs	r3, #0
 800a276:	69a9      	ldr	r1, [r5, #24]
 800a278:	e7c1      	b.n	800a1fe <ai_platform_api_get_network_report+0x142>
 800a27a:	b2bf      	uxth	r7, r7
 800a27c:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800a280:	2f00      	cmp	r7, #0
 800a282:	d049      	beq.n	800a318 <ai_platform_api_get_network_report+0x25c>
 800a284:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a288:	f10a 0828 	add.w	r8, sl, #40	@ 0x28
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	4640      	mov	r0, r8
 800a290:	876f      	strh	r7, [r5, #58]	@ 0x3a
 800a292:	642b      	str	r3, [r5, #64]	@ 0x40
 800a294:	f7ff fce8 	bl	8009c68 <ai_buffer_array_sane>
 800a298:	b968      	cbnz	r0, 800a2b6 <ai_platform_api_get_network_report+0x1fa>
 800a29a:	4640      	mov	r0, r8
 800a29c:	f7ff fce4 	bl	8009c68 <ai_buffer_array_sane>
 800a2a0:	b148      	cbz	r0, 800a2b6 <ai_platform_api_get_network_report+0x1fa>
 800a2a2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	@ 0x2a
 800a2a6:	b133      	cbz	r3, 800a2b6 <ai_platform_api_get_network_report+0x1fa>
 800a2a8:	2213      	movs	r2, #19
 800a2aa:	2111      	movs	r1, #17
 800a2ac:	f10a 000c 	add.w	r0, sl, #12
 800a2b0:	f000 fbda 	bl	800aa68 <core_set_error>
 800a2b4:	e783      	b.n	800a1be <ai_platform_api_get_network_report+0x102>
 800a2b6:	f10a 0720 	add.w	r7, sl, #32
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	f7ff fcd4 	bl	8009c68 <ai_buffer_array_sane>
 800a2c0:	b920      	cbnz	r0, 800a2cc <ai_platform_api_get_network_report+0x210>
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7ff fcd0 	bl	8009c68 <ai_buffer_array_sane>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d172      	bne.n	800a3b2 <ai_platform_api_get_network_report+0x2f6>
 800a2cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a2d0:	f240 2201 	movw	r2, #513	@ 0x201
 800a2d4:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 800a2d8:	4b19      	ldr	r3, [pc, #100]	@ (800a340 <ai_platform_api_get_network_report+0x284>)
 800a2da:	626a      	str	r2, [r5, #36]	@ 0x24
 800a2dc:	612b      	str	r3, [r5, #16]
 800a2de:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 800a2e2:	616b      	str	r3, [r5, #20]
 800a2e4:	f240 5301 	movw	r3, #1281	@ 0x501
 800a2e8:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a2ea:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a2ee:	f002 f93d 	bl	800c56c <ai_platform_version_get>
 800a2f2:	4b14      	ldr	r3, [pc, #80]	@ (800a344 <ai_platform_api_get_network_report+0x288>)
 800a2f4:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800a2f6:	6228      	str	r0, [r5, #32]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d125      	bne.n	800a348 <ai_platform_api_get_network_report+0x28c>
 800a2fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a300:	f105 0350 	add.w	r3, r5, #80	@ 0x50
 800a304:	e883 0003 	stmia.w	r3, {r0, r1}
 800a308:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 800a30c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a310:	e883 0003 	stmia.w	r3, {r0, r1}
 800a314:	2001      	movs	r0, #1
 800a316:	e753      	b.n	800a1c0 <ai_platform_api_get_network_report+0x104>
 800a318:	2300      	movs	r3, #0
 800a31a:	2218      	movs	r2, #24
 800a31c:	2113      	movs	r1, #19
 800a31e:	f10a 000c 	add.w	r0, sl, #12
 800a322:	642b      	str	r3, [r5, #64]	@ 0x40
 800a324:	876b      	strh	r3, [r5, #58]	@ 0x3a
 800a326:	f000 fb9f 	bl	800aa68 <core_set_error>
 800a32a:	e748      	b.n	800a1be <ai_platform_api_get_network_report+0x102>
 800a32c:	2218      	movs	r2, #24
 800a32e:	2111      	movs	r1, #17
 800a330:	f10a 000c 	add.w	r0, sl, #12
 800a334:	f000 fb98 	bl	800aa68 <core_set_error>
 800a338:	e741      	b.n	800a1be <ai_platform_api_get_network_report+0x102>
 800a33a:	bf00      	nop
 800a33c:	a1c00100 	.word	0xa1c00100
 800a340:	0800f7c4 	.word	0x0800f7c4
 800a344:	a1facade 	.word	0xa1facade
 800a348:	2200      	movs	r2, #0
 800a34a:	f240 4101 	movw	r1, #1025	@ 0x401
 800a34e:	f105 0b60 	add.w	fp, r5, #96	@ 0x60
 800a352:	f105 0944 	add.w	r9, r5, #68	@ 0x44
 800a356:	465c      	mov	r4, fp
 800a358:	464e      	mov	r6, r9
 800a35a:	e9c5 2212 	strd	r2, r2, [r5, #72]	@ 0x48
 800a35e:	e9c5 2214 	strd	r2, r2, [r5, #80]	@ 0x50
 800a362:	4a2a      	ldr	r2, [pc, #168]	@ (800a40c <ai_platform_api_get_network_report+0x350>)
 800a364:	f10d 0c10 	add.w	ip, sp, #16
 800a368:	4b29      	ldr	r3, [pc, #164]	@ (800a410 <ai_platform_api_get_network_report+0x354>)
 800a36a:	65a9      	str	r1, [r5, #88]	@ 0x58
 800a36c:	646a      	str	r2, [r5, #68]	@ 0x44
 800a36e:	f8c5 c05c 	str.w	ip, [r5, #92]	@ 0x5c
 800a372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a374:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a378:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a37a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a37c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a384:	4640      	mov	r0, r8
 800a386:	f7ff fc6f 	bl	8009c68 <ai_buffer_array_sane>
 800a38a:	b9f8      	cbnz	r0, 800a3cc <ai_platform_api_get_network_report+0x310>
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff fc6b 	bl	8009c68 <ai_buffer_array_sane>
 800a392:	2800      	cmp	r0, #0
 800a394:	d0be      	beq.n	800a314 <ai_platform_api_get_network_report+0x258>
 800a396:	4638      	mov	r0, r7
 800a398:	f7ff fc66 	bl	8009c68 <ai_buffer_array_sane>
 800a39c:	b320      	cbz	r0, 800a3e8 <ai_platform_api_get_network_report+0x32c>
 800a39e:	f8da 4024 	ldr.w	r4, [sl, #36]	@ 0x24
 800a3a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3a4:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800a3a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a3ac:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800a3b0:	e7b0      	b.n	800a314 <ai_platform_api_get_network_report+0x258>
 800a3b2:	f8ba 3022 	ldrh.w	r3, [sl, #34]	@ 0x22
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d088      	beq.n	800a2cc <ai_platform_api_get_network_report+0x210>
 800a3ba:	2212      	movs	r2, #18
 800a3bc:	2111      	movs	r1, #17
 800a3be:	f10a 000c 	add.w	r0, sl, #12
 800a3c2:	f000 fb51 	bl	800aa68 <core_set_error>
 800a3c6:	e6fa      	b.n	800a1be <ai_platform_api_get_network_report+0x102>
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	4770      	bx	lr
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	f7ff fc4b 	bl	8009c68 <ai_buffer_array_sane>
 800a3d2:	b190      	cbz	r0, 800a3fa <ai_platform_api_get_network_report+0x33e>
 800a3d4:	f8da 402c 	ldr.w	r4, [sl, #44]	@ 0x2c
 800a3d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3da:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800a3de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a3e2:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a3e6:	e7d1      	b.n	800a38c <ai_platform_api_get_network_report+0x2d0>
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3ec:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800a3f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a3f4:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800a3f8:	deff      	udf	#255	@ 0xff
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3fe:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800a402:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a406:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a40a:	deff      	udf	#255	@ 0xff
 800a40c:	00040440 	.word	0x00040440
 800a410:	0800f6f0 	.word	0x0800f6f0

0800a414 <ai_platform_network_create>:
 800a414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a418:	b083      	sub	sp, #12
 800a41a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800a41e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800a422:	b320      	cbz	r0, 800a46e <ai_platform_network_create+0x5a>
 800a424:	6002      	str	r2, [r0, #0]
 800a426:	4616      	mov	r6, r2
 800a428:	461f      	mov	r7, r3
 800a42a:	4604      	mov	r4, r0
 800a42c:	f000 fb14 	bl	800aa58 <core_init>
 800a430:	b970      	cbnz	r0, 800a450 <ai_platform_network_create+0x3c>
 800a432:	2530      	movs	r5, #48	@ 0x30
 800a434:	2300      	movs	r3, #0
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	2410      	movs	r4, #16
 800a43a:	464a      	mov	r2, r9
 800a43c:	4641      	mov	r1, r8
 800a43e:	4638      	mov	r0, r7
 800a440:	f002 f88e 	bl	800c560 <ai_version_get>
 800a444:	60b0      	str	r0, [r6, #8]
 800a446:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800a44a:	b003      	add	sp, #12
 800a44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a450:	2200      	movs	r2, #0
 800a452:	4641      	mov	r1, r8
 800a454:	4638      	mov	r0, r7
 800a456:	f002 f883 	bl	800c560 <ai_version_get>
 800a45a:	2200      	movs	r2, #0
 800a45c:	4605      	mov	r5, r0
 800a45e:	2105      	movs	r1, #5
 800a460:	2001      	movs	r0, #1
 800a462:	f002 f87d 	bl	800c560 <ai_version_get>
 800a466:	4285      	cmp	r5, r0
 800a468:	d008      	beq.n	800a47c <ai_platform_network_create+0x68>
 800a46a:	2501      	movs	r5, #1
 800a46c:	e7e2      	b.n	800a434 <ai_platform_network_create+0x20>
 800a46e:	2510      	movs	r5, #16
 800a470:	462c      	mov	r4, r5
 800a472:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800a476:	b003      	add	sp, #12
 800a478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a47c:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <ai_platform_network_create+0x80>)
 800a47e:	a801      	add	r0, sp, #4
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	f000 fafd 	bl	800aa80 <ai_check_custom_types>
 800a486:	b110      	cbz	r0, 800a48e <ai_platform_network_create+0x7a>
 800a488:	2400      	movs	r4, #0
 800a48a:	4625      	mov	r5, r4
 800a48c:	e7d5      	b.n	800a43a <ai_platform_network_create+0x26>
 800a48e:	2502      	movs	r5, #2
 800a490:	e7d0      	b.n	800a434 <ai_platform_network_create+0x20>
 800a492:	bf00      	nop
 800a494:	84048403 	.word	0x84048403

0800a498 <ai_platform_network_init>:
 800a498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a49c:	4a48      	ldr	r2, [pc, #288]	@ (800a5c0 <ai_platform_network_init+0x128>)
 800a49e:	460b      	mov	r3, r1
 800a4a0:	6801      	ldr	r1, [r0, #0]
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	ea01 0002 	and.w	r0, r1, r2
 800a4a8:	438a      	bics	r2, r1
 800a4aa:	d13b      	bne.n	800a524 <ai_platform_network_init+0x8c>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d078      	beq.n	800a5a2 <ai_platform_network_init+0x10a>
 800a4b0:	4a44      	ldr	r2, [pc, #272]	@ (800a5c4 <ai_platform_network_init+0x12c>)
 800a4b2:	681d      	ldr	r5, [r3, #0]
 800a4b4:	4295      	cmp	r5, r2
 800a4b6:	d10a      	bne.n	800a4ce <ai_platform_network_init+0x36>
 800a4b8:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 800a4bc:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 800a4c0:	4281      	cmp	r1, r0
 800a4c2:	d03d      	beq.n	800a540 <ai_platform_network_init+0xa8>
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ce:	461d      	mov	r5, r3
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800a4d8:	f7ff fb94 	bl	8009c04 <ai_buffer_get_size>
 800a4dc:	f105 071c 	add.w	r7, r5, #28
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a4ea:	f7ff fb8b 	bl	8009c04 <ai_buffer_get_size>
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	bf0a      	itet	eq
 800a4f2:	4631      	moveq	r1, r6
 800a4f4:	2101      	movne	r1, #1
 800a4f6:	4635      	moveq	r5, r6
 800a4f8:	b1b0      	cbz	r0, 800a528 <ai_platform_network_init+0x90>
 800a4fa:	f1b9 0f00 	cmp.w	r9, #0
 800a4fe:	d057      	beq.n	800a5b0 <ai_platform_network_init+0x118>
 800a500:	f04f 0e01 	mov.w	lr, #1
 800a504:	f1b8 0f00 	cmp.w	r8, #0
 800a508:	d011      	beq.n	800a52e <ai_platform_network_init+0x96>
 800a50a:	4b2d      	ldr	r3, [pc, #180]	@ (800a5c0 <ai_platform_network_init+0x128>)
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d1d8      	bne.n	800a4c4 <ai_platform_network_init+0x2c>
 800a512:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800a514:	428b      	cmp	r3, r1
 800a516:	d21b      	bcs.n	800a550 <ai_platform_network_init+0xb8>
 800a518:	2212      	movs	r2, #18
 800a51a:	2116      	movs	r1, #22
 800a51c:	f104 000c 	add.w	r0, r4, #12
 800a520:	f000 faa2 	bl	800aa68 <core_set_error>
 800a524:	2000      	movs	r0, #0
 800a526:	e7d0      	b.n	800a4ca <ai_platform_network_init+0x32>
 800a528:	4607      	mov	r7, r0
 800a52a:	4686      	mov	lr, r0
 800a52c:	e7ea      	b.n	800a504 <ai_platform_network_init+0x6c>
 800a52e:	2e00      	cmp	r6, #0
 800a530:	d0eb      	beq.n	800a50a <ai_platform_network_init+0x72>
 800a532:	2212      	movs	r2, #18
 800a534:	2110      	movs	r1, #16
 800a536:	f104 000c 	add.w	r0, r4, #12
 800a53a:	f000 fa95 	bl	800aa68 <core_set_error>
 800a53e:	e7f1      	b.n	800a524 <ai_platform_network_init+0x8c>
 800a540:	e9c4 6308 	strd	r6, r3, [r4, #32]
 800a544:	62e5      	str	r5, [r4, #44]	@ 0x2c
 800a546:	4620      	mov	r0, r4
 800a548:	62a2      	str	r2, [r4, #40]	@ 0x28
 800a54a:	f000 fac1 	bl	800aad0 <ai_layers_init_all>
 800a54e:	e7b9      	b.n	800a4c4 <ai_platform_network_init+0x2c>
 800a550:	b1e1      	cbz	r1, 800a58c <ai_platform_network_init+0xf4>
 800a552:	46ac      	mov	ip, r5
 800a554:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800a558:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a55c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a55e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a560:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a564:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a568:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a56a:	6226      	str	r6, [r4, #32]
 800a56c:	4573      	cmp	r3, lr
 800a56e:	d311      	bcc.n	800a594 <ai_platform_network_init+0xfc>
 800a570:	f1be 0f00 	cmp.w	lr, #0
 800a574:	d007      	beq.n	800a586 <ai_platform_network_init+0xee>
 800a576:	463e      	mov	r6, r7
 800a578:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800a57a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a57c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a57e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a582:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a586:	ea4f 420e 	mov.w	r2, lr, lsl #16
 800a58a:	e7dc      	b.n	800a546 <ai_platform_network_init+0xae>
 800a58c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a58e:	6221      	str	r1, [r4, #32]
 800a590:	4573      	cmp	r3, lr
 800a592:	d2ed      	bcs.n	800a570 <ai_platform_network_init+0xd8>
 800a594:	2213      	movs	r2, #19
 800a596:	2116      	movs	r1, #22
 800a598:	f104 000c 	add.w	r0, r4, #12
 800a59c:	f000 fa64 	bl	800aa68 <core_set_error>
 800a5a0:	e7c0      	b.n	800a524 <ai_platform_network_init+0x8c>
 800a5a2:	2211      	movs	r2, #17
 800a5a4:	2110      	movs	r1, #16
 800a5a6:	f104 000c 	add.w	r0, r4, #12
 800a5aa:	f000 fa5d 	bl	800aa68 <core_set_error>
 800a5ae:	e7b9      	b.n	800a524 <ai_platform_network_init+0x8c>
 800a5b0:	2213      	movs	r2, #19
 800a5b2:	2110      	movs	r1, #16
 800a5b4:	f104 000c 	add.w	r0, r4, #12
 800a5b8:	f000 fa56 	bl	800aa68 <core_set_error>
 800a5bc:	e7b2      	b.n	800a524 <ai_platform_network_init+0x8c>
 800a5be:	bf00      	nop
 800a5c0:	a1c00100 	.word	0xa1c00100
 800a5c4:	a1facade 	.word	0xa1facade

0800a5c8 <ai_platform_network_post_init>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4b14      	ldr	r3, [pc, #80]	@ (800a61c <ai_platform_network_post_init+0x54>)
 800a5cc:	6802      	ldr	r2, [r0, #0]
 800a5ce:	ea02 0103 	and.w	r1, r2, r3
 800a5d2:	4393      	bics	r3, r2
 800a5d4:	d10c      	bne.n	800a5f0 <ai_platform_network_post_init+0x28>
 800a5d6:	6903      	ldr	r3, [r0, #16]
 800a5d8:	4604      	mov	r4, r0
 800a5da:	079b      	lsls	r3, r3, #30
 800a5dc:	d503      	bpl.n	800a5e6 <ai_platform_network_post_init+0x1e>
 800a5de:	428a      	cmp	r2, r1
 800a5e0:	d008      	beq.n	800a5f4 <ai_platform_network_post_init+0x2c>
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
 800a5e6:	2210      	movs	r2, #16
 800a5e8:	2111      	movs	r1, #17
 800a5ea:	300c      	adds	r0, #12
 800a5ec:	f000 fa3c 	bl	800aa68 <core_set_error>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	f000 fa7c 	bl	800aaf0 <ai_layers_post_init_all>
 800a5f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0f1      	beq.n	800a5e2 <ai_platform_network_post_init+0x1a>
 800a5fe:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800a600:	2d00      	cmp	r5, #0
 800a602:	d0ee      	beq.n	800a5e2 <ai_platform_network_post_init+0x1a>
 800a604:	4629      	mov	r1, r5
 800a606:	2000      	movs	r0, #0
 800a608:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a60a:	4798      	blx	r3
 800a60c:	692b      	ldr	r3, [r5, #16]
 800a60e:	42ab      	cmp	r3, r5
 800a610:	d0e7      	beq.n	800a5e2 <ai_platform_network_post_init+0x1a>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0e5      	beq.n	800a5e2 <ai_platform_network_post_init+0x1a>
 800a616:	461d      	mov	r5, r3
 800a618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a61a:	e7f3      	b.n	800a604 <ai_platform_network_post_init+0x3c>
 800a61c:	a1c00100 	.word	0xa1c00100

0800a620 <ai_platform_network_process>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	4bb7      	ldr	r3, [pc, #732]	@ (800a904 <ai_platform_network_process+0x2e4>)
 800a626:	4690      	mov	r8, r2
 800a628:	6802      	ldr	r2, [r0, #0]
 800a62a:	b085      	sub	sp, #20
 800a62c:	4393      	bics	r3, r2
 800a62e:	f040 812d 	bne.w	800a88c <ai_platform_network_process+0x26c>
 800a632:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a634:	4607      	mov	r7, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 811c 	beq.w	800a874 <ai_platform_network_process+0x254>
 800a63c:	2600      	movs	r6, #0
 800a63e:	6903      	ldr	r3, [r0, #16]
 800a640:	f8d0 9034 	ldr.w	r9, [r0, #52]	@ 0x34
 800a644:	f003 0303 	and.w	r3, r3, #3
 800a648:	2b03      	cmp	r3, #3
 800a64a:	6186      	str	r6, [r0, #24]
 800a64c:	f040 8128 	bne.w	800a8a0 <ai_platform_network_process+0x280>
 800a650:	2900      	cmp	r1, #0
 800a652:	f000 8115 	beq.w	800a880 <ai_platform_network_process+0x260>
 800a656:	f1b9 0f00 	cmp.w	r9, #0
 800a65a:	f000 8111 	beq.w	800a880 <ai_platform_network_process+0x260>
 800a65e:	f8b9 3000 	ldrh.w	r3, [r9]
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 810c 	beq.w	800a880 <ai_platform_network_process+0x260>
 800a668:	460c      	mov	r4, r1
 800a66a:	698b      	ldr	r3, [r1, #24]
 800a66c:	e9cd 0802 	strd	r0, r8, [sp, #8]
 800a670:	f8d3 b000 	ldr.w	fp, [r3]
 800a674:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d071      	beq.n	800a760 <ai_platform_network_process+0x140>
 800a67c:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a680:	2d00      	cmp	r5, #0
 800a682:	d06d      	beq.n	800a760 <ai_platform_network_process+0x140>
 800a684:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a688:	f8d3 a000 	ldr.w	sl, [r3]
 800a68c:	0133      	lsls	r3, r6, #4
 800a68e:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	f000 81b8 	beq.w	800aa08 <ai_platform_network_process+0x3e8>
 800a698:	69ab      	ldr	r3, [r5, #24]
 800a69a:	2101      	movs	r1, #1
 800a69c:	4620      	mov	r0, r4
 800a69e:	685f      	ldr	r7, [r3, #4]
 800a6a0:	f7ff fab0 	bl	8009c04 <ai_buffer_get_size>
 800a6a4:	4287      	cmp	r7, r0
 800a6a6:	f0c0 8102 	bcc.w	800a8ae <ai_platform_network_process+0x28e>
 800a6aa:	68e8      	ldr	r0, [r5, #12]
 800a6ac:	69a1      	ldr	r1, [r4, #24]
 800a6ae:	68c2      	ldr	r2, [r0, #12]
 800a6b0:	68cb      	ldr	r3, [r1, #12]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	f040 80fb 	bne.w	800a8ae <ai_platform_network_process+0x28e>
 800a6b8:	6882      	ldr	r2, [r0, #8]
 800a6ba:	688b      	ldr	r3, [r1, #8]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	f040 80f6 	bne.w	800a8ae <ai_platform_network_process+0x28e>
 800a6c2:	6842      	ldr	r2, [r0, #4]
 800a6c4:	684b      	ldr	r3, [r1, #4]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	f040 80f1 	bne.w	800a8ae <ai_platform_network_process+0x28e>
 800a6cc:	69ab      	ldr	r3, [r5, #24]
 800a6ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6d2:	f001 ff35 	bl	800c540 <ai_array_get_data_byte_size>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4628      	mov	r0, r5
 800a6da:	9301      	str	r3, [sp, #4]
 800a6dc:	f001 ff58 	bl	800c590 <get_tensor_byte_size>
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	4283      	cmp	r3, r0
 800a6e4:	f0c0 80e3 	bcc.w	800a8ae <ai_platform_network_process+0x28e>
 800a6e8:	69ab      	ldr	r3, [r5, #24]
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	f001 feb8 	bl	800c460 <ai_array_to_buffer_fmt>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	4058      	eors	r0, r3
 800a6f4:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 800a6f8:	f040 8190 	bne.w	800aa1c <ai_platform_network_process+0x3fc>
 800a6fc:	6863      	ldr	r3, [r4, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 8182 	beq.w	800aa08 <ai_platform_network_process+0x3e8>
 800a704:	69a3      	ldr	r3, [r4, #24]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 817f 	beq.w	800aa0c <ai_platform_network_process+0x3ec>
 800a70e:	459b      	cmp	fp, r3
 800a710:	4628      	mov	r0, r5
 800a712:	bf38      	it	cc
 800a714:	469b      	movcc	fp, r3
 800a716:	f001 ff3b 	bl	800c590 <get_tensor_byte_size>
 800a71a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a71e:	69a3      	ldr	r3, [r4, #24]
 800a720:	0132      	lsls	r2, r6, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3601      	adds	r6, #1
 800a726:	fb00 f303 	mul.w	r3, r0, r3
 800a72a:	f8c8 300c 	str.w	r3, [r8, #12]
 800a72e:	6861      	ldr	r1, [r4, #4]
 800a730:	341c      	adds	r4, #28
 800a732:	440b      	add	r3, r1
 800a734:	f8c8 1004 	str.w	r1, [r8, #4]
 800a738:	f84a 3002 	str.w	r3, [sl, r2]
 800a73c:	69a8      	ldr	r0, [r5, #24]
 800a73e:	6803      	ldr	r3, [r0, #0]
 800a740:	009a      	lsls	r2, r3, #2
 800a742:	f100 80a7 	bmi.w	800a894 <ai_platform_network_process+0x274>
 800a746:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	4419      	add	r1, r3
 800a74e:	6081      	str	r1, [r0, #8]
 800a750:	69ab      	ldr	r3, [r5, #24]
 800a752:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a756:	60da      	str	r2, [r3, #12]
 800a758:	f8b9 3000 	ldrh.w	r3, [r9]
 800a75c:	42b3      	cmp	r3, r6
 800a75e:	d889      	bhi.n	800a674 <ai_platform_network_process+0x54>
 800a760:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 800a764:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a766:	f1b8 0f00 	cmp.w	r8, #0
 800a76a:	f000 80b5 	beq.w	800a8d8 <ai_platform_network_process+0x2b8>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	f240 80a5 	bls.w	800a8be <ai_platform_network_process+0x29e>
 800a774:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 800a778:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 809e 	beq.w	800a8be <ai_platform_network_process+0x29e>
 800a782:	4645      	mov	r5, r8
 800a784:	2600      	movs	r6, #0
 800a786:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80a3 	beq.w	800a8d6 <ai_platform_network_process+0x2b6>
 800a790:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a794:	2c00      	cmp	r4, #0
 800a796:	f000 809e 	beq.w	800a8d6 <ai_platform_network_process+0x2b6>
 800a79a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a79e:	f8d3 a000 	ldr.w	sl, [r3]
 800a7a2:	0133      	lsls	r3, r6, #4
 800a7a4:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	f000 813f 	beq.w	800aa2c <ai_platform_network_process+0x40c>
 800a7ae:	69a3      	ldr	r3, [r4, #24]
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	f7ff fa24 	bl	8009c04 <ai_buffer_get_size>
 800a7bc:	9b01      	ldr	r3, [sp, #4]
 800a7be:	4283      	cmp	r3, r0
 800a7c0:	d37d      	bcc.n	800a8be <ai_platform_network_process+0x29e>
 800a7c2:	68e0      	ldr	r0, [r4, #12]
 800a7c4:	69a9      	ldr	r1, [r5, #24]
 800a7c6:	68c2      	ldr	r2, [r0, #12]
 800a7c8:	68cb      	ldr	r3, [r1, #12]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d177      	bne.n	800a8be <ai_platform_network_process+0x29e>
 800a7ce:	6882      	ldr	r2, [r0, #8]
 800a7d0:	688b      	ldr	r3, [r1, #8]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d173      	bne.n	800a8be <ai_platform_network_process+0x29e>
 800a7d6:	6842      	ldr	r2, [r0, #4]
 800a7d8:	684b      	ldr	r3, [r1, #4]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d16f      	bne.n	800a8be <ai_platform_network_process+0x29e>
 800a7de:	69a3      	ldr	r3, [r4, #24]
 800a7e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7e4:	f001 feac 	bl	800c540 <ai_array_get_data_byte_size>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	f001 fecf 	bl	800c590 <get_tensor_byte_size>
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	4283      	cmp	r3, r0
 800a7f6:	d362      	bcc.n	800a8be <ai_platform_network_process+0x29e>
 800a7f8:	69a3      	ldr	r3, [r4, #24]
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	f001 fe30 	bl	800c460 <ai_array_to_buffer_fmt>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	4043      	eors	r3, r0
 800a804:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800a808:	f040 8117 	bne.w	800aa3a <ai_platform_network_process+0x41a>
 800a80c:	686b      	ldr	r3, [r5, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 810c 	beq.w	800aa2c <ai_platform_network_process+0x40c>
 800a814:	69ab      	ldr	r3, [r5, #24]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 8115 	beq.w	800aa48 <ai_platform_network_process+0x428>
 800a81e:	459b      	cmp	fp, r3
 800a820:	4620      	mov	r0, r4
 800a822:	bf38      	it	cc
 800a824:	469b      	movcc	fp, r3
 800a826:	f001 feb3 	bl	800c590 <get_tensor_byte_size>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a830:	69aa      	ldr	r2, [r5, #24]
 800a832:	351c      	adds	r5, #28
 800a834:	6812      	ldr	r2, [r2, #0]
 800a836:	fb02 f303 	mul.w	r3, r2, r3
 800a83a:	f8c8 300c 	str.w	r3, [r8, #12]
 800a83e:	f855 1c18 	ldr.w	r1, [r5, #-24]
 800a842:	0132      	lsls	r2, r6, #4
 800a844:	440b      	add	r3, r1
 800a846:	f8c8 1004 	str.w	r1, [r8, #4]
 800a84a:	f84a 3002 	str.w	r3, [sl, r2]
 800a84e:	69a0      	ldr	r0, [r4, #24]
 800a850:	3601      	adds	r6, #1
 800a852:	6803      	ldr	r3, [r0, #0]
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	d439      	bmi.n	800a8cc <ai_platform_network_process+0x2ac>
 800a858:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	4419      	add	r1, r3
 800a860:	6081      	str	r1, [r0, #8]
 800a862:	69a3      	ldr	r3, [r4, #24]
 800a864:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a868:	60da      	str	r2, [r3, #12]
 800a86a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a86e:	429e      	cmp	r6, r3
 800a870:	d389      	bcc.n	800a786 <ai_platform_network_process+0x166>
 800a872:	e030      	b.n	800a8d6 <ai_platform_network_process+0x2b6>
 800a874:	6902      	ldr	r2, [r0, #16]
 800a876:	6183      	str	r3, [r0, #24]
 800a878:	f002 0203 	and.w	r2, r2, #3
 800a87c:	2a03      	cmp	r2, #3
 800a87e:	d10f      	bne.n	800a8a0 <ai_platform_network_process+0x280>
 800a880:	2217      	movs	r2, #23
 800a882:	2112      	movs	r1, #18
 800a884:	f107 000c 	add.w	r0, r7, #12
 800a888:	f000 f8ee 	bl	800aa68 <core_set_error>
 800a88c:	2000      	movs	r0, #0
 800a88e:	b005      	add	sp, #20
 800a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a894:	f8b9 3000 	ldrh.w	r3, [r9]
 800a898:	429e      	cmp	r6, r3
 800a89a:	f4ff aeeb 	bcc.w	800a674 <ai_platform_network_process+0x54>
 800a89e:	e75f      	b.n	800a760 <ai_platform_network_process+0x140>
 800a8a0:	2230      	movs	r2, #48	@ 0x30
 800a8a2:	2111      	movs	r1, #17
 800a8a4:	f107 000c 	add.w	r0, r7, #12
 800a8a8:	f000 f8de 	bl	800aa68 <core_set_error>
 800a8ac:	e7ee      	b.n	800a88c <ai_platform_network_process+0x26c>
 800a8ae:	9f02      	ldr	r7, [sp, #8]
 800a8b0:	2218      	movs	r2, #24
 800a8b2:	2112      	movs	r1, #18
 800a8b4:	f107 000c 	add.w	r0, r7, #12
 800a8b8:	f000 f8d6 	bl	800aa68 <core_set_error>
 800a8bc:	e7e6      	b.n	800a88c <ai_platform_network_process+0x26c>
 800a8be:	2218      	movs	r2, #24
 800a8c0:	2113      	movs	r1, #19
 800a8c2:	f107 000c 	add.w	r0, r7, #12
 800a8c6:	f000 f8cf 	bl	800aa68 <core_set_error>
 800a8ca:	e7df      	b.n	800a88c <ai_platform_network_process+0x26c>
 800a8cc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a8d0:	429e      	cmp	r6, r3
 800a8d2:	f4ff af58 	bcc.w	800a786 <ai_platform_network_process+0x166>
 800a8d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a8d8:	fa1f fb8b 	uxth.w	fp, fp
 800a8dc:	f8a7 b018 	strh.w	fp, [r7, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 808b 	beq.w	800a9fc <ai_platform_network_process+0x3dc>
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800a8ea:	f000 808a 	beq.w	800aa02 <ai_platform_network_process+0x3e2>
 800a8ee:	f106 080c 	add.w	r8, r6, #12
 800a8f2:	8b78      	ldrh	r0, [r7, #26]
 800a8f4:	4583      	cmp	fp, r0
 800a8f6:	d9ca      	bls.n	800a88e <ai_platform_network_process+0x26e>
 800a8f8:	4645      	mov	r5, r8
 800a8fa:	46bb      	mov	fp, r7
 800a8fc:	f04f 0800 	mov.w	r8, #0
 800a900:	b9b6      	cbnz	r6, 800a930 <ai_platform_network_process+0x310>
 800a902:	e02e      	b.n	800a962 <ai_platform_network_process+0x342>
 800a904:	a1c00100 	.word	0xa1c00100
 800a908:	68df      	ldr	r7, [r3, #12]
 800a90a:	1bc9      	subs	r1, r1, r7
 800a90c:	4408      	add	r0, r1
 800a90e:	6098      	str	r0, [r3, #8]
 800a910:	6993      	ldr	r3, [r2, #24]
 800a912:	6862      	ldr	r2, [r4, #4]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	f859 200a 	ldr.w	r2, [r9, sl]
 800a91a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a91e:	440b      	add	r3, r1
 800a920:	4293      	cmp	r3, r2
 800a922:	bf28      	it	cs
 800a924:	68e3      	ldrcs	r3, [r4, #12]
 800a926:	f108 0801 	add.w	r8, r8, #1
 800a92a:	bf28      	it	cs
 800a92c:	1ad3      	subcs	r3, r2, r3
 800a92e:	6063      	str	r3, [r4, #4]
 800a930:	8833      	ldrh	r3, [r6, #0]
 800a932:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a936:	4543      	cmp	r3, r8
 800a938:	d913      	bls.n	800a962 <ai_platform_network_process+0x342>
 800a93a:	6873      	ldr	r3, [r6, #4]
 800a93c:	b18b      	cbz	r3, 800a962 <ai_platform_network_process+0x342>
 800a93e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800a942:	b172      	cbz	r2, 800a962 <ai_platform_network_process+0x342>
 800a944:	68b1      	ldr	r1, [r6, #8]
 800a946:	6993      	ldr	r3, [r2, #24]
 800a948:	f8d1 9000 	ldr.w	r9, [r1]
 800a94c:	681f      	ldr	r7, [r3, #0]
 800a94e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a952:	00bf      	lsls	r7, r7, #2
 800a954:	6860      	ldr	r0, [r4, #4]
 800a956:	6899      	ldr	r1, [r3, #8]
 800a958:	d5d6      	bpl.n	800a908 <ai_platform_network_process+0x2e8>
 800a95a:	68a2      	ldr	r2, [r4, #8]
 800a95c:	f001 fce2 	bl	800c324 <st_int8_copy>
 800a960:	e7d9      	b.n	800a916 <ai_platform_network_process+0x2f6>
 800a962:	4658      	mov	r0, fp
 800a964:	f000 f8e0 	bl	800ab28 <ai_layers_forward_all>
 800a968:	2400      	movs	r4, #0
 800a96a:	b9ad      	cbnz	r5, 800a998 <ai_platform_network_process+0x378>
 800a96c:	e039      	b.n	800a9e2 <ai_platform_network_process+0x3c2>
 800a96e:	f859 300a 	ldr.w	r3, [r9, sl]
 800a972:	4411      	add	r1, r2
 800a974:	4299      	cmp	r1, r3
 800a976:	bf24      	itt	cs
 800a978:	f8d8 100c 	ldrcs.w	r1, [r8, #12]
 800a97c:	1a59      	subcs	r1, r3, r1
 800a97e:	f8c8 1004 	str.w	r1, [r8, #4]
 800a982:	6982      	ldr	r2, [r0, #24]
 800a984:	e9d2 3702 	ldrd	r3, r7, [r2, #8]
 800a988:	1bdb      	subs	r3, r3, r7
 800a98a:	4419      	add	r1, r3
 800a98c:	6091      	str	r1, [r2, #8]
 800a98e:	6983      	ldr	r3, [r0, #24]
 800a990:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a994:	60da      	str	r2, [r3, #12]
 800a996:	3401      	adds	r4, #1
 800a998:	882b      	ldrh	r3, [r5, #0]
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	d921      	bls.n	800a9e2 <ai_platform_network_process+0x3c2>
 800a99e:	686b      	ldr	r3, [r5, #4]
 800a9a0:	b1fb      	cbz	r3, 800a9e2 <ai_platform_network_process+0x3c2>
 800a9a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a9a6:	b1e0      	cbz	r0, 800a9e2 <ai_platform_network_process+0x3c2>
 800a9a8:	68aa      	ldr	r2, [r5, #8]
 800a9aa:	6983      	ldr	r3, [r0, #24]
 800a9ac:	f8d2 9000 	ldr.w	r9, [r2]
 800a9b0:	681f      	ldr	r7, [r3, #0]
 800a9b2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800a9b6:	00bf      	lsls	r7, r7, #2
 800a9b8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800a9bc:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800a9c0:	d5d5      	bpl.n	800a96e <ai_platform_network_process+0x34e>
 800a9c2:	6898      	ldr	r0, [r3, #8]
 800a9c4:	f001 fcae 	bl	800c324 <st_int8_copy>
 800a9c8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800a9cc:	f859 200a 	ldr.w	r2, [r9, sl]
 800a9d0:	440b      	add	r3, r1
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	bf24      	itt	cs
 800a9d6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800a9da:	1ad3      	subcs	r3, r2, r3
 800a9dc:	f8c8 3004 	str.w	r3, [r8, #4]
 800a9e0:	e7d9      	b.n	800a996 <ai_platform_network_process+0x376>
 800a9e2:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 800a9e6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	b280      	uxth	r0, r0
 800a9ee:	4283      	cmp	r3, r0
 800a9f0:	f8ab 001a 	strh.w	r0, [fp, #26]
 800a9f4:	d882      	bhi.n	800a8fc <ai_platform_network_process+0x2dc>
 800a9f6:	b005      	add	sp, #20
 800a9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fc:	461e      	mov	r6, r3
 800a9fe:	4698      	mov	r8, r3
 800aa00:	e777      	b.n	800a8f2 <ai_platform_network_process+0x2d2>
 800aa02:	f04f 0800 	mov.w	r8, #0
 800aa06:	e774      	b.n	800a8f2 <ai_platform_network_process+0x2d2>
 800aa08:	9f02      	ldr	r7, [sp, #8]
 800aa0a:	e739      	b.n	800a880 <ai_platform_network_process+0x260>
 800aa0c:	9f02      	ldr	r7, [sp, #8]
 800aa0e:	2221      	movs	r2, #33	@ 0x21
 800aa10:	2112      	movs	r1, #18
 800aa12:	f107 000c 	add.w	r0, r7, #12
 800aa16:	f000 f827 	bl	800aa68 <core_set_error>
 800aa1a:	e737      	b.n	800a88c <ai_platform_network_process+0x26c>
 800aa1c:	9f02      	ldr	r7, [sp, #8]
 800aa1e:	2219      	movs	r2, #25
 800aa20:	2112      	movs	r1, #18
 800aa22:	f107 000c 	add.w	r0, r7, #12
 800aa26:	f000 f81f 	bl	800aa68 <core_set_error>
 800aa2a:	e72f      	b.n	800a88c <ai_platform_network_process+0x26c>
 800aa2c:	2217      	movs	r2, #23
 800aa2e:	2113      	movs	r1, #19
 800aa30:	f107 000c 	add.w	r0, r7, #12
 800aa34:	f000 f818 	bl	800aa68 <core_set_error>
 800aa38:	e728      	b.n	800a88c <ai_platform_network_process+0x26c>
 800aa3a:	2219      	movs	r2, #25
 800aa3c:	2113      	movs	r1, #19
 800aa3e:	f107 000c 	add.w	r0, r7, #12
 800aa42:	f000 f811 	bl	800aa68 <core_set_error>
 800aa46:	e721      	b.n	800a88c <ai_platform_network_process+0x26c>
 800aa48:	2221      	movs	r2, #33	@ 0x21
 800aa4a:	2113      	movs	r1, #19
 800aa4c:	f107 000c 	add.w	r0, r7, #12
 800aa50:	f000 f80a 	bl	800aa68 <core_set_error>
 800aa54:	e71a      	b.n	800a88c <ai_platform_network_process+0x26c>
 800aa56:	bf00      	nop

0800aa58 <core_init>:
 800aa58:	2001      	movs	r0, #1
 800aa5a:	4770      	bx	lr

0800aa5c <core_get_error>:
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2200      	movs	r2, #0
 800aa60:	6800      	ldr	r0, [r0, #0]
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop

0800aa68 <core_set_error>:
 800aa68:	4603      	mov	r3, r0
 800aa6a:	7800      	ldrb	r0, [r0, #0]
 800aa6c:	b108      	cbz	r0, 800aa72 <core_set_error+0xa>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	4770      	bx	lr
 800aa72:	7019      	strb	r1, [r3, #0]
 800aa74:	6819      	ldr	r1, [r3, #0]
 800aa76:	2001      	movs	r0, #1
 800aa78:	f362 211f 	bfi	r1, r2, #8, #24
 800aa7c:	6019      	str	r1, [r3, #0]
 800aa7e:	4770      	bx	lr

0800aa80 <ai_check_custom_types>:
 800aa80:	4b12      	ldr	r3, [pc, #72]	@ (800aacc <ai_check_custom_types+0x4c>)
 800aa82:	b082      	sub	sp, #8
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	b118      	cbz	r0, 800aa90 <ai_check_custom_types+0x10>
 800aa88:	7803      	ldrb	r3, [r0, #0]
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d002      	beq.n	800aa94 <ai_check_custom_types+0x14>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	b002      	add	sp, #8
 800aa92:	4770      	bx	lr
 800aa94:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d004      	beq.n	800aaa6 <ai_check_custom_types+0x26>
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f080 0001 	eor.w	r0, r0, #1
 800aaa2:	b002      	add	sp, #8
 800aaa4:	4770      	bx	lr
 800aaa6:	7842      	ldrb	r2, [r0, #1]
 800aaa8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aaac:	3001      	adds	r0, #1
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d1f4      	bne.n	800aa9c <ai_check_custom_types+0x1c>
 800aab2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800aab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d1ee      	bne.n	800aa9c <ai_check_custom_types+0x1c>
 800aabe:	7842      	ldrb	r2, [r0, #1]
 800aac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d1e9      	bne.n	800aa9c <ai_check_custom_types+0x1c>
 800aac8:	2000      	movs	r0, #0
 800aaca:	e7e8      	b.n	800aa9e <ai_check_custom_types+0x1e>
 800aacc:	84048403 	.word	0x84048403

0800aad0 <ai_layers_init_all>:
 800aad0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aad2:	4601      	mov	r1, r0
 800aad4:	b14b      	cbz	r3, 800aaea <ai_layers_init_all+0x1a>
 800aad6:	2000      	movs	r0, #0
 800aad8:	461a      	mov	r2, r3
 800aada:	60d9      	str	r1, [r3, #12]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	3001      	adds	r0, #1
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <ai_layers_init_all+0x1c>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1f7      	bne.n	800aad8 <ai_layers_init_all+0x8>
 800aae8:	4770      	bx	lr
 800aaea:	4618      	mov	r0, r3
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop

0800aaf0 <ai_layers_post_init_all>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800aaf4:	b1ac      	cbz	r4, 800ab22 <ai_layers_post_init_all+0x32>
 800aaf6:	6863      	ldr	r3, [r4, #4]
 800aaf8:	2500      	movs	r5, #0
 800aafa:	07db      	lsls	r3, r3, #31
 800aafc:	d504      	bpl.n	800ab08 <ai_layers_post_init_all+0x18>
 800aafe:	6a23      	ldr	r3, [r4, #32]
 800ab00:	b113      	cbz	r3, 800ab08 <ai_layers_post_init_all+0x18>
 800ab02:	4620      	mov	r0, r4
 800ab04:	4798      	blx	r3
 800ab06:	3501      	adds	r5, #1
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	d007      	beq.n	800ab1e <ai_layers_post_init_all+0x2e>
 800ab0e:	b133      	cbz	r3, 800ab1e <ai_layers_post_init_all+0x2e>
 800ab10:	461c      	mov	r4, r3
 800ab12:	6863      	ldr	r3, [r4, #4]
 800ab14:	07db      	lsls	r3, r3, #31
 800ab16:	d4f2      	bmi.n	800aafe <ai_layers_post_init_all+0xe>
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	42a3      	cmp	r3, r4
 800ab1c:	d1f7      	bne.n	800ab0e <ai_layers_post_init_all+0x1e>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	bd38      	pop	{r3, r4, r5, pc}
 800ab22:	4625      	mov	r5, r4
 800ab24:	4628      	mov	r0, r5
 800ab26:	bd38      	pop	{r3, r4, r5, pc}

0800ab28 <ai_layers_forward_all>:
 800ab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800ab2e:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800ab32:	4604      	mov	r4, r0
 800ab34:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800ab36:	f1b8 0f00 	cmp.w	r8, #0
 800ab3a:	d02b      	beq.n	800ab94 <ai_layers_forward_all+0x6c>
 800ab3c:	b335      	cbz	r5, 800ab8c <ai_layers_forward_all+0x64>
 800ab3e:	4629      	mov	r1, r5
 800ab40:	2001      	movs	r0, #1
 800ab42:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ab44:	47c0      	blx	r8
 800ab46:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800ab48:	b306      	cbz	r6, 800ab8c <ai_layers_forward_all+0x64>
 800ab4a:	2700      	movs	r7, #0
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ab50:	2002      	movs	r0, #2
 800ab52:	47c0      	blx	r8
 800ab54:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800ab56:	4628      	mov	r0, r5
 800ab58:	696b      	ldr	r3, [r5, #20]
 800ab5a:	4798      	blx	r3
 800ab5c:	692e      	ldr	r6, [r5, #16]
 800ab5e:	42b5      	cmp	r5, r6
 800ab60:	d00a      	beq.n	800ab78 <ai_layers_forward_all+0x50>
 800ab62:	2003      	movs	r0, #3
 800ab64:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ab66:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ab68:	47c0      	blx	r8
 800ab6a:	3701      	adds	r7, #1
 800ab6c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800ab6e:	2e00      	cmp	r6, #0
 800ab70:	d1ec      	bne.n	800ab4c <ai_layers_forward_all+0x24>
 800ab72:	4638      	mov	r0, r7
 800ab74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab78:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ab7a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ab7c:	2003      	movs	r0, #3
 800ab7e:	47c0      	blx	r8
 800ab80:	2300      	movs	r3, #0
 800ab82:	3701      	adds	r7, #1
 800ab84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ab86:	4638      	mov	r0, r7
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8c:	2700      	movs	r7, #0
 800ab8e:	4638      	mov	r0, r7
 800ab90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab94:	2d00      	cmp	r5, #0
 800ab96:	d0f9      	beq.n	800ab8c <ai_layers_forward_all+0x64>
 800ab98:	4647      	mov	r7, r8
 800ab9a:	696b      	ldr	r3, [r5, #20]
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	4798      	blx	r3
 800aba0:	462b      	mov	r3, r5
 800aba2:	692d      	ldr	r5, [r5, #16]
 800aba4:	429d      	cmp	r5, r3
 800aba6:	d004      	beq.n	800abb2 <ai_layers_forward_all+0x8a>
 800aba8:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800abaa:	3701      	adds	r7, #1
 800abac:	2d00      	cmp	r5, #0
 800abae:	d1f4      	bne.n	800ab9a <ai_layers_forward_all+0x72>
 800abb0:	e7df      	b.n	800ab72 <ai_layers_forward_all+0x4a>
 800abb2:	2300      	movs	r3, #0
 800abb4:	3701      	adds	r7, #1
 800abb6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800abb8:	e7db      	b.n	800ab72 <ai_layers_forward_all+0x4a>
 800abba:	bf00      	nop

0800abbc <forward_conv2d_if32of32wf32>:
 800abbc:	6982      	ldr	r2, [r0, #24]
 800abbe:	8813      	ldrh	r3, [r2, #0]
 800abc0:	b90b      	cbnz	r3, 800abc6 <forward_conv2d_if32of32wf32+0xa>
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	deff      	udf	#255	@ 0xff
 800abc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abca:	6857      	ldr	r7, [r2, #4]
 800abcc:	4686      	mov	lr, r0
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	b0a3      	sub	sp, #140	@ 0x8c
 800abd2:	b102      	cbz	r2, 800abd6 <forward_conv2d_if32of32wf32+0x1a>
 800abd4:	6812      	ldr	r2, [r2, #0]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	f000 80bf 	beq.w	800ad5a <forward_conv2d_if32of32wf32+0x19e>
 800abdc:	6938      	ldr	r0, [r7, #16]
 800abde:	b100      	cbz	r0, 800abe2 <forward_conv2d_if32of32wf32+0x26>
 800abe0:	6800      	ldr	r0, [r0, #0]
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	f000 80b4 	beq.w	800ad50 <forward_conv2d_if32of32wf32+0x194>
 800abe8:	69fe      	ldr	r6, [r7, #28]
 800abea:	2e00      	cmp	r6, #0
 800abec:	f000 80b3 	beq.w	800ad56 <forward_conv2d_if32of32wf32+0x19a>
 800abf0:	8b39      	ldrh	r1, [r7, #24]
 800abf2:	6834      	ldr	r4, [r6, #0]
 800abf4:	2901      	cmp	r1, #1
 800abf6:	f240 80b3 	bls.w	800ad60 <forward_conv2d_if32of32wf32+0x1a4>
 800abfa:	6876      	ldr	r6, [r6, #4]
 800abfc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800ac00:	6992      	ldr	r2, [r2, #24]
 800ac02:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800ac06:	6892      	ldr	r2, [r2, #8]
 800ac08:	68e1      	ldr	r1, [r4, #12]
 800ac0a:	9220      	str	r2, [sp, #128]	@ 0x80
 800ac0c:	69a2      	ldr	r2, [r4, #24]
 800ac0e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ac12:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 800ac16:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac18:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800ac1c:	e9de 5a0c 	ldrd	r5, sl, [lr, #48]	@ 0x30
 800ac20:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac22:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ac26:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 800ac2a:	9416      	str	r4, [sp, #88]	@ 0x58
 800ac2c:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800ac30:	9417      	str	r4, [sp, #92]	@ 0x5c
 800ac32:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800ac36:	9418      	str	r4, [sp, #96]	@ 0x60
 800ac38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac3c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac3e:	f8be 402c 	ldrh.w	r4, [lr, #44]	@ 0x2c
 800ac42:	941a      	str	r4, [sp, #104]	@ 0x68
 800ac44:	f8de 401c 	ldr.w	r4, [lr, #28]
 800ac48:	941f      	str	r4, [sp, #124]	@ 0x7c
 800ac4a:	f8bc 4000 	ldrh.w	r4, [ip]
 800ac4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ac50:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 800ac54:	941c      	str	r4, [sp, #112]	@ 0x70
 800ac56:	b2ac      	uxth	r4, r5
 800ac58:	e9d1 9801 	ldrd	r9, r8, [r1, #4]
 800ac5c:	941d      	str	r4, [sp, #116]	@ 0x74
 800ac5e:	fa1f f48a 	uxth.w	r4, sl
 800ac62:	6891      	ldr	r1, [r2, #8]
 800ac64:	941e      	str	r4, [sp, #120]	@ 0x78
 800ac66:	b10e      	cbz	r6, 800ac6c <forward_conv2d_if32of32wf32+0xb0>
 800ac68:	69b6      	ldr	r6, [r6, #24]
 800ac6a:	68b6      	ldr	r6, [r6, #8]
 800ac6c:	6980      	ldr	r0, [r0, #24]
 800ac6e:	fa1f f48a 	uxth.w	r4, sl
 800ac72:	6880      	ldr	r0, [r0, #8]
 800ac74:	b2ad      	uxth	r5, r5
 800ac76:	3c01      	subs	r4, #1
 800ac78:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac7a:	f108 30ff 	add.w	r0, r8, #4294967295
 800ac7e:	fb00 8404 	mla	r4, r0, r4, r8
 800ac82:	3d01      	subs	r5, #1
 800ac84:	f109 30ff 	add.w	r0, r9, #4294967295
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	fb00 9505 	mla	r5, r0, r5, r9
 800ac8e:	d074      	beq.n	800ad7a <forward_conv2d_if32of32wf32+0x1be>
 800ac90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03e      	beq.n	800ad14 <forward_conv2d_if32of32wf32+0x158>
 800ac96:	f8d3 a000 	ldr.w	sl, [r3]
 800ac9a:	f1ba 0f00 	cmp.w	sl, #0
 800ac9e:	d003      	beq.n	800aca8 <forward_conv2d_if32of32wf32+0xec>
 800aca0:	f8da 0018 	ldr.w	r0, [sl, #24]
 800aca4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800aca8:	6858      	ldr	r0, [r3, #4]
 800acaa:	2800      	cmp	r0, #0
 800acac:	d033      	beq.n	800ad16 <forward_conv2d_if32of32wf32+0x15a>
 800acae:	6983      	ldr	r3, [r0, #24]
 800acb0:	f8d2 c000 	ldr.w	ip, [r2]
 800acb4:	689f      	ldr	r7, [r3, #8]
 800acb6:	f3cc 4343 	ubfx	r3, ip, #17, #4
 800acba:	2b08      	cmp	r3, #8
 800acbc:	d052      	beq.n	800ad64 <forward_conv2d_if32of32wf32+0x1a8>
 800acbe:	2f00      	cmp	r7, #0
 800acc0:	bf08      	it	eq
 800acc2:	460f      	moveq	r7, r1
 800acc4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800acc6:	463a      	mov	r2, r7
 800acc8:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 800accc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800acce:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800acd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800acd4:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800acd6:	e9cd 8308 	strd	r8, r3, [sp, #32]
 800acda:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800acdc:	940d      	str	r4, [sp, #52]	@ 0x34
 800acde:	9306      	str	r3, [sp, #24]
 800ace0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ace2:	f8cd 901c 	str.w	r9, [sp, #28]
 800ace6:	9305      	str	r3, [sp, #20]
 800ace8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800acea:	950e      	str	r5, [sp, #56]	@ 0x38
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800acf4:	9302      	str	r3, [sp, #8]
 800acf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acf8:	e9cd a300 	strd	sl, r3, [sp]
 800acfc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800acfe:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad00:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ad02:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad08:	4633      	mov	r3, r6
 800ad0a:	f000 fb81 	bl	800b410 <forward_lite_conv2d_if32of32wf32>
 800ad0e:	b023      	add	sp, #140	@ 0x8c
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	469a      	mov	sl, r3
 800ad16:	6810      	ldr	r0, [r2, #0]
 800ad18:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	d001      	beq.n	800ad24 <forward_conv2d_if32of32wf32+0x168>
 800ad20:	460f      	mov	r7, r1
 800ad22:	e7cf      	b.n	800acc4 <forward_conv2d_if32of32wf32+0x108>
 800ad24:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ad28:	68d2      	ldr	r2, [r2, #12]
 800ad2a:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800ad2e:	4103      	asrs	r3, r0
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	d0f4      	beq.n	800ad20 <forward_conv2d_if32of32wf32+0x164>
 800ad36:	2700      	movs	r7, #0
 800ad38:	4638      	mov	r0, r7
 800ad3a:	6980      	ldr	r0, [r0, #24]
 800ad3c:	9121      	str	r1, [sp, #132]	@ 0x84
 800ad3e:	6840      	ldr	r0, [r0, #4]
 800ad40:	9001      	str	r0, [sp, #4]
 800ad42:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ad44:	9000      	str	r0, [sp, #0]
 800ad46:	4638      	mov	r0, r7
 800ad48:	f000 fea8 	bl	800ba9c <lite_decompress_ilutof32>
 800ad4c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ad4e:	e7b6      	b.n	800acbe <forward_conv2d_if32of32wf32+0x102>
 800ad50:	2300      	movs	r3, #0
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	deff      	udf	#255	@ 0xff
 800ad56:	4634      	mov	r4, r6
 800ad58:	e750      	b.n	800abfc <forward_conv2d_if32of32wf32+0x40>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	deff      	udf	#255	@ 0xff
 800ad60:	2600      	movs	r6, #0
 800ad62:	e74b      	b.n	800abfc <forward_conv2d_if32of32wf32+0x40>
 800ad64:	68d2      	ldr	r2, [r2, #12]
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	d0a9      	beq.n	800acbe <forward_conv2d_if32of32wf32+0x102>
 800ad6a:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 800ad6e:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 800ad72:	fa43 f30c 	asr.w	r3, r3, ip
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	e7df      	b.n	800ad3a <forward_conv2d_if32of32wf32+0x17e>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	deff      	udf	#255	@ 0xff

0800ad80 <forward_dense>:
 800ad80:	6982      	ldr	r2, [r0, #24]
 800ad82:	8813      	ldrh	r3, [r2, #0]
 800ad84:	b90b      	cbnz	r3, 800ad8a <forward_dense+0xa>
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	deff      	udf	#255	@ 0xff
 800ad8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8e:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800ad92:	b08e      	sub	sp, #56	@ 0x38
 800ad94:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ad98:	b100      	cbz	r0, 800ad9c <forward_dense+0x1c>
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d061      	beq.n	800ae64 <forward_dense+0xe4>
 800ada0:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ada4:	b102      	cbz	r2, 800ada8 <forward_dense+0x28>
 800ada6:	6812      	ldr	r2, [r2, #0]
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d035      	beq.n	800ae18 <forward_dense+0x98>
 800adac:	f8da 501c 	ldr.w	r5, [sl, #28]
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	d055      	beq.n	800ae60 <forward_dense+0xe0>
 800adb4:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 800adb8:	6829      	ldr	r1, [r5, #0]
 800adba:	2c01      	cmp	r4, #1
 800adbc:	d955      	bls.n	800ae6a <forward_dense+0xea>
 800adbe:	686d      	ldr	r5, [r5, #4]
 800adc0:	698e      	ldr	r6, [r1, #24]
 800adc2:	68c4      	ldr	r4, [r0, #12]
 800adc4:	68d1      	ldr	r1, [r2, #12]
 800adc6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800adca:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800adce:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 800add2:	6831      	ldr	r1, [r6, #0]
 800add4:	2b03      	cmp	r3, #3
 800add6:	fb07 f804 	mul.w	r8, r7, r4
 800adda:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800adde:	d046      	beq.n	800ae6e <forward_dense+0xee>
 800ade0:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 800ade4:	b11c      	cbz	r4, 800adee <forward_dense+0x6e>
 800ade6:	6824      	ldr	r4, [r4, #0]
 800ade8:	b10c      	cbz	r4, 800adee <forward_dense+0x6e>
 800adea:	69a3      	ldr	r3, [r4, #24]
 800adec:	689c      	ldr	r4, [r3, #8]
 800adee:	6983      	ldr	r3, [r0, #24]
 800adf0:	6992      	ldr	r2, [r2, #24]
 800adf2:	6899      	ldr	r1, [r3, #8]
 800adf4:	6890      	ldr	r0, [r2, #8]
 800adf6:	b10d      	cbz	r5, 800adfc <forward_dense+0x7c>
 800adf8:	69ab      	ldr	r3, [r5, #24]
 800adfa:	689d      	ldr	r5, [r3, #8]
 800adfc:	4f1d      	ldr	r7, [pc, #116]	@ (800ae74 <forward_dense+0xf4>)
 800adfe:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800ae02:	45bc      	cmp	ip, r7
 800ae04:	d022      	beq.n	800ae4c <forward_dense+0xcc>
 800ae06:	4e1c      	ldr	r6, [pc, #112]	@ (800ae78 <forward_dense+0xf8>)
 800ae08:	45b4      	cmp	ip, r6
 800ae0a:	d015      	beq.n	800ae38 <forward_dense+0xb8>
 800ae0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ae7c <forward_dense+0xfc>)
 800ae0e:	459c      	cmp	ip, r3
 800ae10:	d005      	beq.n	800ae1e <forward_dense+0x9e>
 800ae12:	b00e      	add	sp, #56	@ 0x38
 800ae14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae18:	2300      	movs	r3, #0
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	deff      	udf	#255	@ 0xff
 800ae1e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800ae22:	a807      	add	r0, sp, #28
 800ae24:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 800ae28:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 800ae2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae2e:	f000 fe8b 	bl	800bb48 <forward_lite_dense_if32of32wf32>
 800ae32:	b00e      	add	sp, #56	@ 0x38
 800ae34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae38:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800ae3c:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800ae40:	9400      	str	r4, [sp, #0]
 800ae42:	f000 ffdd 	bl	800be00 <forward_lite_dense_if32of32wf32_lut4>
 800ae46:	b00e      	add	sp, #56	@ 0x38
 800ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4c:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800ae50:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800ae54:	9400      	str	r4, [sp, #0]
 800ae56:	f001 f917 	bl	800c088 <forward_lite_dense_if32of32wf32_lut8>
 800ae5a:	b00e      	add	sp, #56	@ 0x38
 800ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae60:	4629      	mov	r1, r5
 800ae62:	e7ad      	b.n	800adc0 <forward_dense+0x40>
 800ae64:	2300      	movs	r3, #0
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	deff      	udf	#255	@ 0xff
 800ae6a:	2500      	movs	r5, #0
 800ae6c:	e7a8      	b.n	800adc0 <forward_dense+0x40>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	deff      	udf	#255	@ 0xff
 800ae74:	00d01040 	.word	0x00d01040
 800ae78:	00f01040 	.word	0x00f01040
 800ae7c:	00821040 	.word	0x00821040

0800ae80 <forward_sigmoid>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	ed2d 8b02 	vpush	{d8}
 800ae86:	6982      	ldr	r2, [r0, #24]
 800ae88:	8813      	ldrh	r3, [r2, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d03b      	beq.n	800af06 <forward_sigmoid+0x86>
 800ae8e:	6852      	ldr	r2, [r2, #4]
 800ae90:	6854      	ldr	r4, [r2, #4]
 800ae92:	b104      	cbz	r4, 800ae96 <forward_sigmoid+0x16>
 800ae94:	6824      	ldr	r4, [r4, #0]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d034      	beq.n	800af04 <forward_sigmoid+0x84>
 800ae9a:	6915      	ldr	r5, [r2, #16]
 800ae9c:	b105      	cbz	r5, 800aea0 <forward_sigmoid+0x20>
 800ae9e:	682d      	ldr	r5, [r5, #0]
 800aea0:	68a3      	ldr	r3, [r4, #8]
 800aea2:	0a1b      	lsrs	r3, r3, #8
 800aea4:	d031      	beq.n	800af0a <forward_sigmoid+0x8a>
 800aea6:	2201      	movs	r2, #1
 800aea8:	68e0      	ldr	r0, [r4, #12]
 800aeaa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800aeae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aeb2:	4298      	cmp	r0, r3
 800aeb4:	fb01 f202 	mul.w	r2, r1, r2
 800aeb8:	d1f9      	bne.n	800aeae <forward_sigmoid+0x2e>
 800aeba:	69a7      	ldr	r7, [r4, #24]
 800aebc:	69a9      	ldr	r1, [r5, #24]
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800aec4:	3a01      	subs	r2, #1
 800aec6:	688e      	ldr	r6, [r1, #8]
 800aec8:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800aecc:	42ab      	cmp	r3, r5
 800aece:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800aed2:	d814      	bhi.n	800aefe <forward_sigmoid+0x7e>
 800aed4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800aed8:	3504      	adds	r5, #4
 800aeda:	3604      	adds	r6, #4
 800aedc:	462c      	mov	r4, r5
 800aede:	ed35 0a01 	vldmdb	r5!, {s0}
 800aee2:	eeb1 0a40 	vneg.f32	s0, s0
 800aee6:	f001 fb6b 	bl	800c5c0 <expf>
 800aeea:	ee30 0a08 	vadd.f32	s0, s0, s16
 800aeee:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800aef2:	ed66 7a01 	vstmdb	r6!, {s15}
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	3c08      	subs	r4, #8
 800aefa:	42a3      	cmp	r3, r4
 800aefc:	d9ee      	bls.n	800aedc <forward_sigmoid+0x5c>
 800aefe:	ecbd 8b02 	vpop	{d8}
 800af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af04:	2300      	movs	r3, #0
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	deff      	udf	#255	@ 0xff
 800af0a:	69ab      	ldr	r3, [r5, #24]
 800af0c:	69a7      	ldr	r7, [r4, #24]
 800af0e:	689e      	ldr	r6, [r3, #8]
 800af10:	68bd      	ldr	r5, [r7, #8]
 800af12:	e7df      	b.n	800aed4 <forward_sigmoid+0x54>

0800af14 <forward_relu>:
 800af14:	6982      	ldr	r2, [r0, #24]
 800af16:	8813      	ldrh	r3, [r2, #0]
 800af18:	b90b      	cbnz	r3, 800af1e <forward_relu+0xa>
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	deff      	udf	#255	@ 0xff
 800af1e:	b470      	push	{r4, r5, r6}
 800af20:	6852      	ldr	r2, [r2, #4]
 800af22:	6854      	ldr	r4, [r2, #4]
 800af24:	b104      	cbz	r4, 800af28 <forward_relu+0x14>
 800af26:	6824      	ldr	r4, [r4, #0]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	f000 8083 	beq.w	800b034 <forward_relu+0x120>
 800af2e:	6913      	ldr	r3, [r2, #16]
 800af30:	b103      	cbz	r3, 800af34 <forward_relu+0x20>
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6999      	ldr	r1, [r3, #24]
 800af36:	69a2      	ldr	r2, [r4, #24]
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	69c6      	ldr	r6, [r0, #28]
 800af3c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800af40:	6888      	ldr	r0, [r1, #8]
 800af42:	6891      	ldr	r1, [r2, #8]
 800af44:	b196      	cbz	r6, 800af6c <forward_relu+0x58>
 800af46:	6872      	ldr	r2, [r6, #4]
 800af48:	2a01      	cmp	r2, #1
 800af4a:	d036      	beq.n	800afba <forward_relu+0xa6>
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d068      	beq.n	800b022 <forward_relu+0x10e>
 800af50:	2201      	movs	r2, #1
 800af52:	68e5      	ldr	r5, [r4, #12]
 800af54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800af58:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800af5c:	429d      	cmp	r5, r3
 800af5e:	fb04 f202 	mul.w	r2, r4, r2
 800af62:	d1f9      	bne.n	800af58 <forward_relu+0x44>
 800af64:	68b3      	ldr	r3, [r6, #8]
 800af66:	bc70      	pop	{r4, r5, r6}
 800af68:	f000 bd28 	b.w	800b9bc <forward_lite_nl_relu_generic_if32of32_kernel>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d05a      	beq.n	800b026 <forward_relu+0x112>
 800af70:	2201      	movs	r2, #1
 800af72:	68e5      	ldr	r5, [r4, #12]
 800af74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800af78:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800af7c:	429d      	cmp	r5, r3
 800af7e:	fb04 f202 	mul.w	r2, r4, r2
 800af82:	d1f9      	bne.n	800af78 <forward_relu+0x64>
 800af84:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800af88:	3a01      	subs	r2, #1
 800af8a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800af8e:	428c      	cmp	r4, r1
 800af90:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800af94:	d30f      	bcc.n	800afb6 <forward_relu+0xa2>
 800af96:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800b03c <forward_relu+0x128>
 800af9a:	1a61      	subs	r1, r4, r1
 800af9c:	f021 0103 	bic.w	r1, r1, #3
 800afa0:	1d23      	adds	r3, r4, #4
 800afa2:	3004      	adds	r0, #4
 800afa4:	1a62      	subs	r2, r4, r1
 800afa6:	ed73 7a01 	vldmdb	r3!, {s15}
 800afaa:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800afae:	429a      	cmp	r2, r3
 800afb0:	ed60 7a01 	vstmdb	r0!, {s15}
 800afb4:	d1f7      	bne.n	800afa6 <forward_relu+0x92>
 800afb6:	bc70      	pop	{r4, r5, r6}
 800afb8:	4770      	bx	lr
 800afba:	b3b3      	cbz	r3, 800b02a <forward_relu+0x116>
 800afbc:	68e5      	ldr	r5, [r4, #12]
 800afbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800afc2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800afc6:	429d      	cmp	r5, r3
 800afc8:	fb04 f202 	mul.w	r2, r4, r2
 800afcc:	d1f9      	bne.n	800afc2 <forward_relu+0xae>
 800afce:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800afd2:	3a01      	subs	r2, #1
 800afd4:	68b3      	ldr	r3, [r6, #8]
 800afd6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800afda:	428c      	cmp	r4, r1
 800afdc:	ed93 7a00 	vldr	s14, [r3]
 800afe0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800afe4:	d3e7      	bcc.n	800afb6 <forward_relu+0xa2>
 800afe6:	2500      	movs	r5, #0
 800afe8:	1a61      	subs	r1, r4, r1
 800afea:	f021 0103 	bic.w	r1, r1, #3
 800afee:	1d23      	adds	r3, r4, #4
 800aff0:	1a62      	subs	r2, r4, r1
 800aff2:	3004      	adds	r0, #4
 800aff4:	ed73 7a01 	vldmdb	r3!, {s15}
 800aff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800affc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b000:	d50a      	bpl.n	800b018 <forward_relu+0x104>
 800b002:	429a      	cmp	r2, r3
 800b004:	ed60 7a01 	vstmdb	r0!, {s15}
 800b008:	d0d5      	beq.n	800afb6 <forward_relu+0xa2>
 800b00a:	ed73 7a01 	vldmdb	r3!, {s15}
 800b00e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b016:	d4f4      	bmi.n	800b002 <forward_relu+0xee>
 800b018:	429a      	cmp	r2, r3
 800b01a:	f840 5d04 	str.w	r5, [r0, #-4]!
 800b01e:	d1e9      	bne.n	800aff4 <forward_relu+0xe0>
 800b020:	e7c9      	b.n	800afb6 <forward_relu+0xa2>
 800b022:	2201      	movs	r2, #1
 800b024:	e79e      	b.n	800af64 <forward_relu+0x50>
 800b026:	460c      	mov	r4, r1
 800b028:	e7b5      	b.n	800af96 <forward_relu+0x82>
 800b02a:	68b3      	ldr	r3, [r6, #8]
 800b02c:	460c      	mov	r4, r1
 800b02e:	ed93 7a00 	vldr	s14, [r3]
 800b032:	e7d8      	b.n	800afe6 <forward_relu+0xd2>
 800b034:	2300      	movs	r3, #0
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	deff      	udf	#255	@ 0xff
 800b03a:	bf00      	nop
 800b03c:	00000000 	.word	0x00000000

0800b040 <forward_mp>:
 800b040:	6983      	ldr	r3, [r0, #24]
 800b042:	881a      	ldrh	r2, [r3, #0]
 800b044:	b90a      	cbnz	r2, 800b04a <forward_mp+0xa>
 800b046:	6853      	ldr	r3, [r2, #4]
 800b048:	deff      	udf	#255	@ 0xff
 800b04a:	4601      	mov	r1, r0
 800b04c:	6858      	ldr	r0, [r3, #4]
 800b04e:	6843      	ldr	r3, [r0, #4]
 800b050:	b103      	cbz	r3, 800b054 <forward_mp+0x14>
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2a01      	cmp	r2, #1
 800b056:	f000 80cc 	beq.w	800b1f2 <forward_mp+0x1b2>
 800b05a:	6902      	ldr	r2, [r0, #16]
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	f000 80c6 	beq.w	800b1ee <forward_mp+0x1ae>
 800b062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b066:	6810      	ldr	r0, [r2, #0]
 800b068:	68dc      	ldr	r4, [r3, #12]
 800b06a:	68c2      	ldr	r2, [r0, #12]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	6980      	ldr	r0, [r0, #24]
 800b070:	68d5      	ldr	r5, [r2, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	6897      	ldr	r7, [r2, #8]
 800b076:	6882      	ldr	r2, [r0, #8]
 800b078:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 800b07a:	b093      	sub	sp, #76	@ 0x4c
 800b07c:	6866      	ldr	r6, [r4, #4]
 800b07e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b080:	e9d0 3000 	ldrd	r3, r0, [r0]
 800b084:	9005      	str	r0, [sp, #20]
 800b086:	e9d4 b002 	ldrd	fp, r0, [r4, #8]
 800b08a:	69cc      	ldr	r4, [r1, #28]
 800b08c:	9509      	str	r5, [sp, #36]	@ 0x24
 800b08e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b090:	6a0c      	ldr	r4, [r1, #32]
 800b092:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b094:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800b096:	9404      	str	r4, [sp, #16]
 800b098:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800b09a:	4259      	negs	r1, r3
 800b09c:	2d00      	cmp	r5, #0
 800b09e:	f000 80a3 	beq.w	800b1e8 <forward_mp+0x1a8>
 800b0a2:	eb00 0c03 	add.w	ip, r0, r3
 800b0a6:	fb06 f30b 	mul.w	r3, r6, fp
 800b0aa:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800b0ae:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800b0b2:	fb07 f309 	mul.w	r3, r7, r9
 800b0b6:	9805      	ldr	r0, [sp, #20]
 800b0b8:	930d      	str	r3, [sp, #52]	@ 0x34
 800b0ba:	4243      	negs	r3, r0
 800b0bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0be:	f04f 0800 	mov.w	r8, #0
 800b0c2:	4663      	mov	r3, ip
 800b0c4:	9707      	str	r7, [sp, #28]
 800b0c6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b0c8:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	bf94      	ite	ls
 800b0d0:	eb01 0e00 	addls.w	lr, r1, r0
 800b0d4:	eb01 0e03 	addhi.w	lr, r1, r3
 800b0d8:	9807      	ldr	r0, [sp, #28]
 800b0da:	9506      	str	r5, [sp, #24]
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d07a      	beq.n	800b1d6 <forward_mp+0x196>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	9003      	str	r0, [sp, #12]
 800b0e4:	fb0b f005 	mul.w	r0, fp, r5
 800b0e8:	9002      	str	r0, [sp, #8]
 800b0ea:	9805      	ldr	r0, [sp, #20]
 800b0ec:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 800b0f0:	4458      	add	r0, fp
 800b0f2:	460d      	mov	r5, r1
 800b0f4:	9001      	str	r0, [sp, #4]
 800b0f6:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800b0fa:	4617      	mov	r7, r2
 800b0fc:	46a3      	mov	fp, r4
 800b0fe:	4641      	mov	r1, r8
 800b100:	4660      	mov	r0, ip
 800b102:	9200      	str	r2, [sp, #0]
 800b104:	9310      	str	r3, [sp, #64]	@ 0x40
 800b106:	4603      	mov	r3, r0
 800b108:	2800      	cmp	r0, #0
 800b10a:	bfaa      	itet	ge
 800b10c:	9c02      	ldrge	r4, [sp, #8]
 800b10e:	f8dd 8008 	ldrlt.w	r8, [sp, #8]
 800b112:	eb04 0800 	addge.w	r8, r4, r0
 800b116:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b118:	9a01      	ldr	r2, [sp, #4]
 800b11a:	fb08 4809 	mla	r8, r8, r9, r4
 800b11e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b120:	bfb8      	it	lt
 800b122:	2000      	movlt	r0, #0
 800b124:	4294      	cmp	r4, r2
 800b126:	bf94      	ite	ls
 800b128:	191c      	addls	r4, r3, r4
 800b12a:	189c      	addhi	r4, r3, r2
 800b12c:	1a22      	subs	r2, r4, r0
 800b12e:	9208      	str	r2, [sp, #32]
 800b130:	b15e      	cbz	r6, 800b14a <forward_mp+0x10a>
 800b132:	4640      	mov	r0, r8
 800b134:	463c      	mov	r4, r7
 800b136:	9a00      	ldr	r2, [sp, #0]
 800b138:	eb09 0c08 	add.w	ip, r9, r8
 800b13c:	ecf0 7a01 	vldmia	r0!, {s15}
 800b140:	4584      	cmp	ip, r0
 800b142:	ece4 7a01 	vstmia	r4!, {s15}
 800b146:	d1f9      	bne.n	800b13c <forward_mp+0xfc>
 800b148:	9200      	str	r2, [sp, #0]
 800b14a:	9a06      	ldr	r2, [sp, #24]
 800b14c:	4596      	cmp	lr, r2
 800b14e:	dd2c      	ble.n	800b1aa <forward_mp+0x16a>
 800b150:	460c      	mov	r4, r1
 800b152:	4610      	mov	r0, r2
 800b154:	9a08      	ldr	r2, [sp, #32]
 800b156:	9511      	str	r5, [sp, #68]	@ 0x44
 800b158:	fb09 8c02 	mla	ip, r9, r2, r8
 800b15c:	9a00      	ldr	r2, [sp, #0]
 800b15e:	f8cd b020 	str.w	fp, [sp, #32]
 800b162:	45e0      	cmp	r8, ip
 800b164:	d217      	bcs.n	800b196 <forward_mp+0x156>
 800b166:	b1b6      	cbz	r6, 800b196 <forward_mp+0x156>
 800b168:	46c3      	mov	fp, r8
 800b16a:	eb08 0509 	add.w	r5, r8, r9
 800b16e:	f8cd a000 	str.w	sl, [sp]
 800b172:	46da      	mov	sl, fp
 800b174:	4639      	mov	r1, r7
 800b176:	ecfa 7a01 	vldmia	sl!, {s15}
 800b17a:	ed91 7a00 	vldr	s14, [r1]
 800b17e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b182:	45aa      	cmp	sl, r5
 800b184:	ece1 7a01 	vstmia	r1!, {s15}
 800b188:	d1f5      	bne.n	800b176 <forward_mp+0x136>
 800b18a:	44cb      	add	fp, r9
 800b18c:	45e3      	cmp	fp, ip
 800b18e:	444d      	add	r5, r9
 800b190:	d3ef      	bcc.n	800b172 <forward_mp+0x132>
 800b192:	f8dd a000 	ldr.w	sl, [sp]
 800b196:	3001      	adds	r0, #1
 800b198:	4586      	cmp	lr, r0
 800b19a:	44d0      	add	r8, sl
 800b19c:	44d4      	add	ip, sl
 800b19e:	d1e0      	bne.n	800b162 <forward_mp+0x122>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b1a6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b1a8:	9200      	str	r2, [sp, #0]
 800b1aa:	9804      	ldr	r0, [sp, #16]
 800b1ac:	9a01      	ldr	r2, [sp, #4]
 800b1ae:	4418      	add	r0, r3
 800b1b0:	9b04      	ldr	r3, [sp, #16]
 800b1b2:	9c03      	ldr	r4, [sp, #12]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	9b07      	ldr	r3, [sp, #28]
 800b1ba:	3401      	adds	r4, #1
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	9403      	str	r4, [sp, #12]
 800b1c0:	444f      	add	r7, r9
 800b1c2:	d1a0      	bne.n	800b106 <forward_mp+0xc6>
 800b1c4:	4688      	mov	r8, r1
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	9a00      	ldr	r2, [sp, #0]
 800b1ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b1cc:	465c      	mov	r4, fp
 800b1ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1d0:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800b1d4:	4402      	add	r2, r0
 800b1d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1d8:	f108 0801 	add.w	r8, r8, #1
 800b1dc:	4540      	cmp	r0, r8
 800b1de:	4421      	add	r1, r4
 800b1e0:	eba3 0304 	sub.w	r3, r3, r4
 800b1e4:	f47f af6f 	bne.w	800b0c6 <forward_mp+0x86>
 800b1e8:	b013      	add	sp, #76	@ 0x4c
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	68d3      	ldr	r3, [r2, #12]
 800b1f0:	deff      	udf	#255	@ 0xff
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	deff      	udf	#255	@ 0xff

0800b1f8 <forward_ap>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	6983      	ldr	r3, [r0, #24]
 800b1fe:	b09d      	sub	sp, #116	@ 0x74
 800b200:	881a      	ldrh	r2, [r3, #0]
 800b202:	900d      	str	r0, [sp, #52]	@ 0x34
 800b204:	b90a      	cbnz	r2, 800b20a <forward_ap+0x12>
 800b206:	6853      	ldr	r3, [r2, #4]
 800b208:	deff      	udf	#255	@ 0xff
 800b20a:	6859      	ldr	r1, [r3, #4]
 800b20c:	684b      	ldr	r3, [r1, #4]
 800b20e:	b103      	cbz	r3, 800b212 <forward_ap+0x1a>
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2a01      	cmp	r2, #1
 800b214:	f000 80f7 	beq.w	800b406 <forward_ap+0x20e>
 800b218:	690a      	ldr	r2, [r1, #16]
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	f000 80f6 	beq.w	800b40c <forward_ap+0x214>
 800b220:	6811      	ldr	r1, [r2, #0]
 800b222:	68dc      	ldr	r4, [r3, #12]
 800b224:	68ca      	ldr	r2, [r1, #12]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	68d5      	ldr	r5, [r2, #12]
 800b22a:	6892      	ldr	r2, [r2, #8]
 800b22c:	6989      	ldr	r1, [r1, #24]
 800b22e:	9205      	str	r2, [sp, #20]
 800b230:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	6888      	ldr	r0, [r1, #8]
 800b236:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b238:	6867      	ldr	r7, [r4, #4]
 800b23a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b23c:	e9d1 6300 	ldrd	r6, r3, [r1]
 800b240:	e9d4 8102 	ldrd	r8, r1, [r4, #8]
 800b244:	69d4      	ldr	r4, [r2, #28]
 800b246:	9309      	str	r3, [sp, #36]	@ 0x24
 800b248:	9408      	str	r4, [sp, #32]
 800b24a:	e9d2 c308 	ldrd	ip, r3, [r2, #32]
 800b24e:	950e      	str	r5, [sp, #56]	@ 0x38
 800b250:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b252:	4274      	negs	r4, r6
 800b254:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b256:	2d00      	cmp	r5, #0
 800b258:	f000 80cc 	beq.w	800b3f4 <forward_ap+0x1fc>
 800b25c:	2500      	movs	r5, #0
 800b25e:	fb07 f208 	mul.w	r2, r7, r8
 800b262:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800b266:	950a      	str	r5, [sp, #40]	@ 0x28
 800b268:	0095      	lsls	r5, r2, #2
 800b26a:	9502      	str	r5, [sp, #8]
 800b26c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b270:	463d      	mov	r5, r7
 800b272:	46cb      	mov	fp, r9
 800b274:	440e      	add	r6, r1
 800b276:	9908      	ldr	r1, [sp, #32]
 800b278:	9a05      	ldr	r2, [sp, #20]
 800b27a:	fb0c f101 	mul.w	r1, ip, r1
 800b27e:	9111      	str	r1, [sp, #68]	@ 0x44
 800b280:	fb09 f102 	mul.w	r1, r9, r2
 800b284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b286:	9114      	str	r1, [sp, #80]	@ 0x50
 800b288:	4252      	negs	r2, r2
 800b28a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b28c:	45b4      	cmp	ip, r6
 800b28e:	bf94      	ite	ls
 800b290:	eb04 020c 	addls.w	r2, r4, ip
 800b294:	19a2      	addhi	r2, r4, r6
 800b296:	9905      	ldr	r1, [sp, #20]
 800b298:	9201      	str	r2, [sp, #4]
 800b29a:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 800b29e:	2900      	cmp	r1, #0
 800b2a0:	f000 809e 	beq.w	800b3e0 <forward_ap+0x1e8>
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4681      	mov	r9, r0
 800b2a8:	ebaa 0202 	sub.w	r2, sl, r2
 800b2ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b2ae:	fb08 f10a 	mul.w	r1, r8, sl
 800b2b2:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b2b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2b6:	e9cd 8c15 	strd	r8, ip, [sp, #84]	@ 0x54
 800b2ba:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
 800b2be:	4442      	add	r2, r8
 800b2c0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b2c2:	9107      	str	r1, [sp, #28]
 800b2c4:	9206      	str	r2, [sp, #24]
 800b2c6:	eb00 010b 	add.w	r1, r0, fp
 800b2ca:	9019      	str	r0, [sp, #100]	@ 0x64
 800b2cc:	2f00      	cmp	r7, #0
 800b2ce:	bfaa      	itet	ge
 800b2d0:	9b07      	ldrge	r3, [sp, #28]
 800b2d2:	9807      	ldrlt	r0, [sp, #28]
 800b2d4:	19d8      	addge	r0, r3, r7
 800b2d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2d8:	970c      	str	r7, [sp, #48]	@ 0x30
 800b2da:	9a06      	ldr	r2, [sp, #24]
 800b2dc:	fb00 300b 	mla	r0, r0, fp, r3
 800b2e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b2e2:	9b08      	ldr	r3, [sp, #32]
 800b2e4:	bfb8      	it	lt
 800b2e6:	2700      	movlt	r7, #0
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	bf94      	ite	ls
 800b2ec:	18e4      	addls	r4, r4, r3
 800b2ee:	18a4      	addhi	r4, r4, r2
 800b2f0:	eba7 0e04 	sub.w	lr, r7, r4
 800b2f4:	1be2      	subs	r2, r4, r7
 800b2f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b2f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2fa:	fb04 fe0e 	mul.w	lr, r4, lr
 800b2fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b302:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b304:	2b00      	cmp	r3, #0
 800b306:	bf08      	it	eq
 800b308:	4674      	moveq	r4, lr
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	9404      	str	r4, [sp, #16]
 800b30e:	459a      	cmp	sl, r3
 800b310:	da50      	bge.n	800b3b4 <forward_ap+0x1bc>
 800b312:	46d4      	mov	ip, sl
 800b314:	2301      	movs	r3, #1
 800b316:	2700      	movs	r7, #0
 800b318:	4690      	mov	r8, r2
 800b31a:	fb0b f402 	mul.w	r4, fp, r2
 800b31e:	e9cd a61a 	strd	sl, r6, [sp, #104]	@ 0x68
 800b322:	9403      	str	r4, [sp, #12]
 800b324:	9a03      	ldr	r2, [sp, #12]
 800b326:	4447      	add	r7, r8
 800b328:	45be      	cmp	lr, r7
 800b32a:	eb00 0602 	add.w	r6, r0, r2
 800b32e:	d064      	beq.n	800b3fa <forward_ap+0x202>
 800b330:	42b0      	cmp	r0, r6
 800b332:	bf38      	it	cc
 800b334:	2200      	movcc	r2, #0
 800b336:	d232      	bcs.n	800b39e <forward_ap+0x1a6>
 800b338:	eb0b 0a00 	add.w	sl, fp, r0
 800b33c:	b14d      	cbz	r5, 800b352 <forward_ap+0x15a>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d05f      	beq.n	800b402 <forward_ap+0x20a>
 800b342:	464c      	mov	r4, r9
 800b344:	4603      	mov	r3, r0
 800b346:	ecf3 7a01 	vldmia	r3!, {s15}
 800b34a:	459a      	cmp	sl, r3
 800b34c:	ece4 7a01 	vstmia	r4!, {s15}
 800b350:	d1f9      	bne.n	800b346 <forward_ap+0x14e>
 800b352:	4682      	mov	sl, r0
 800b354:	44da      	add	sl, fp
 800b356:	45b2      	cmp	sl, r6
 800b358:	d210      	bcs.n	800b37c <forward_ap+0x184>
 800b35a:	2d00      	cmp	r5, #0
 800b35c:	d0fa      	beq.n	800b354 <forward_ap+0x15c>
 800b35e:	464b      	mov	r3, r9
 800b360:	4654      	mov	r4, sl
 800b362:	edd3 7a00 	vldr	s15, [r3]
 800b366:	ecb4 7a01 	vldmia	r4!, {s14}
 800b36a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b36e:	ece3 7a01 	vstmia	r3!, {s15}
 800b372:	4299      	cmp	r1, r3
 800b374:	d1f5      	bne.n	800b362 <forward_ap+0x16a>
 800b376:	44da      	add	sl, fp
 800b378:	45b2      	cmp	sl, r6
 800b37a:	d3ee      	bcc.n	800b35a <forward_ap+0x162>
 800b37c:	b17a      	cbz	r2, 800b39e <forward_ap+0x1a6>
 800b37e:	ee07 2a90 	vmov	s15, r2
 800b382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b38a:	b145      	cbz	r5, 800b39e <forward_ap+0x1a6>
 800b38c:	464b      	mov	r3, r9
 800b38e:	edd3 7a00 	vldr	s15, [r3]
 800b392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b396:	ece3 7a01 	vstmia	r3!, {s15}
 800b39a:	428b      	cmp	r3, r1
 800b39c:	d1f7      	bne.n	800b38e <forward_ap+0x196>
 800b39e:	9a01      	ldr	r2, [sp, #4]
 800b3a0:	9b02      	ldr	r3, [sp, #8]
 800b3a2:	f10c 0c01 	add.w	ip, ip, #1
 800b3a6:	4562      	cmp	r2, ip
 800b3a8:	4418      	add	r0, r3
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	d1b9      	bne.n	800b324 <forward_ap+0x12c>
 800b3b0:	e9dd a61a 	ldrd	sl, r6, [sp, #104]	@ 0x68
 800b3b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3b6:	9806      	ldr	r0, [sp, #24]
 800b3b8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800b3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3bc:	4417      	add	r7, r2
 800b3be:	1a82      	subs	r2, r0, r2
 800b3c0:	9206      	str	r2, [sp, #24]
 800b3c2:	9a05      	ldr	r2, [sp, #20]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3ca:	44d9      	add	r9, fp
 800b3cc:	4459      	add	r1, fp
 800b3ce:	f47f af7d 	bne.w	800b2cc <forward_ap+0xd4>
 800b3d2:	e9dd 8c15 	ldrd	r8, ip, [sp, #84]	@ 0x54
 800b3d6:	e9dd 3417 	ldrd	r3, r4, [sp, #92]	@ 0x5c
 800b3da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b3dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b3de:	4410      	add	r0, r2
 800b3e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3e2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b3e4:	3201      	adds	r2, #1
 800b3e6:	4291      	cmp	r1, r2
 800b3e8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3ea:	441c      	add	r4, r3
 800b3ec:	eba6 0603 	sub.w	r6, r6, r3
 800b3f0:	f47f af4c 	bne.w	800b28c <forward_ap+0x94>
 800b3f4:	b01d      	add	sp, #116	@ 0x74
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	42b0      	cmp	r0, r6
 800b3fc:	9a04      	ldr	r2, [sp, #16]
 800b3fe:	d39b      	bcc.n	800b338 <forward_ap+0x140>
 800b400:	e7bc      	b.n	800b37c <forward_ap+0x184>
 800b402:	4682      	mov	sl, r0
 800b404:	e7ab      	b.n	800b35e <forward_ap+0x166>
 800b406:	2300      	movs	r3, #0
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	deff      	udf	#255	@ 0xff
 800b40c:	68d3      	ldr	r3, [r2, #12]
 800b40e:	deff      	udf	#255	@ 0xff

0800b410 <forward_lite_conv2d_if32of32wf32>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	ed2d 8b10 	vpush	{d8-d15}
 800b418:	b0a3      	sub	sp, #140	@ 0x8c
 800b41a:	468c      	mov	ip, r1
 800b41c:	4690      	mov	r8, r2
 800b41e:	f8bd 6114 	ldrh.w	r6, [sp, #276]	@ 0x114
 800b422:	f8bd 711c 	ldrh.w	r7, [sp, #284]	@ 0x11c
 800b426:	f8bd 1120 	ldrh.w	r1, [sp, #288]	@ 0x120
 800b42a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b42c:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800b42e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b430:	f8bd 4118 	ldrh.w	r4, [sp, #280]	@ 0x118
 800b434:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
 800b436:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 800b438:	901a      	str	r0, [sp, #104]	@ 0x68
 800b43a:	9613      	str	r6, [sp, #76]	@ 0x4c
 800b43c:	9706      	str	r7, [sp, #24]
 800b43e:	9114      	str	r1, [sp, #80]	@ 0x50
 800b440:	2a00      	cmp	r2, #0
 800b442:	f000 817e 	beq.w	800b742 <forward_lite_conv2d_if32of32wf32+0x332>
 800b446:	4681      	mov	r9, r0
 800b448:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b44a:	46a6      	mov	lr, r4
 800b44c:	fb02 f303 	mul.w	r3, r2, r3
 800b450:	2000      	movs	r0, #0
 800b452:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800b454:	4261      	negs	r1, r4
 800b456:	fb02 f303 	mul.w	r3, r2, r3
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b45e:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800b460:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800b462:	fb02 f303 	mul.w	r3, r2, r3
 800b466:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b468:	fb02 f205 	mul.w	r2, r2, r5
 800b46c:	00ad      	lsls	r5, r5, #2
 800b46e:	9503      	str	r5, [sp, #12]
 800b470:	0095      	lsls	r5, r2, #2
 800b472:	fb04 f203 	mul.w	r2, r4, r3
 800b476:	fb01 f303 	mul.w	r3, r1, r3
 800b47a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b480:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800b482:	0094      	lsls	r4, r2, #2
 800b484:	fb07 f303 	mul.w	r3, r7, r3
 800b488:	9418      	str	r4, [sp, #96]	@ 0x60
 800b48a:	9c3d      	ldr	r4, [sp, #244]	@ 0xf4
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	00a4      	lsls	r4, r4, #2
 800b490:	9305      	str	r3, [sp, #20]
 800b492:	4273      	negs	r3, r6
 800b494:	fb04 f703 	mul.w	r7, r4, r3
 800b498:	9516      	str	r5, [sp, #88]	@ 0x58
 800b49a:	9311      	str	r3, [sp, #68]	@ 0x44
 800b49c:	9404      	str	r4, [sp, #16]
 800b49e:	f108 4378 	add.w	r3, r8, #4160749568	@ 0xf8000000
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	46b8      	mov	r8, r7
 800b4a6:	4675      	mov	r5, lr
 800b4a8:	460f      	mov	r7, r1
 800b4aa:	4664      	mov	r4, ip
 800b4ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4ae:	2f00      	cmp	r7, #0
 800b4b0:	f2c0 827d 	blt.w	800b9ae <forward_lite_conv2d_if32of32wf32+0x59e>
 800b4b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800b4bc:	9949      	ldr	r1, [sp, #292]	@ 0x124
 800b4be:	442a      	add	r2, r5
 800b4c0:	428a      	cmp	r2, r1
 800b4c2:	bf94      	ite	ls
 800b4c4:	ebc3 0202 	rsbls	r2, r3, r2
 800b4c8:	ebc3 0201 	rsbhi	r2, r3, r1
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 800b4d0:	2a00      	cmp	r2, #0
 800b4d2:	f000 8143 	beq.w	800b75c <forward_lite_conv2d_if32of32wf32+0x34c>
 800b4d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b4d8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b4dc:	f0c0 813e 	bcc.w	800b75c <forward_lite_conv2d_if32of32wf32+0x34c>
 800b4e0:	9a03      	ldr	r2, [sp, #12]
 800b4e2:	18a2      	adds	r2, r4, r2
 800b4e4:	4294      	cmp	r4, r2
 800b4e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b4e8:	f080 811d 	bcs.w	800b726 <forward_lite_conv2d_if32of32wf32+0x316>
 800b4ec:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b4ee:	e9cd 761b 	strd	r7, r6, [sp, #108]	@ 0x6c
 800b4f2:	fb02 f303 	mul.w	r3, r2, r3
 800b4f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4fa:	e9cd 581d 	strd	r5, r8, [sp, #116]	@ 0x74
 800b4fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b500:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b502:	4626      	mov	r6, r4
 800b504:	4443      	add	r3, r8
 800b506:	4680      	mov	r8, r0
 800b508:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 800b50c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b50e:	941f      	str	r4, [sp, #124]	@ 0x7c
 800b510:	4648      	mov	r0, r9
 800b512:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b514:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 800b516:	f000 ff05 	bl	800c324 <st_int8_copy>
 800b51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 811a 	beq.w	800b756 <forward_lite_conv2d_if32of32wf32+0x346>
 800b522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b524:	ecb3 6a01 	vldmia	r3!, {s12}
 800b528:	930c      	str	r3, [sp, #48]	@ 0x30
 800b52a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 80ee 	beq.w	800b70e <forward_lite_conv2d_if32of32wf32+0x2fe>
 800b532:	2000      	movs	r0, #0
 800b534:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b536:	e9cd 9620 	strd	r9, r6, [sp, #128]	@ 0x80
 800b53a:	9202      	str	r2, [sp, #8]
 800b53c:	4602      	mov	r2, r0
 800b53e:	4630      	mov	r0, r6
 800b540:	4614      	mov	r4, r2
 800b542:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b544:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b546:	2d00      	cmp	r5, #0
 800b548:	f2c0 8100 	blt.w	800b74c <forward_lite_conv2d_if32of32wf32+0x33c>
 800b54c:	f04f 0e00 	mov.w	lr, #0
 800b550:	9902      	ldr	r1, [sp, #8]
 800b552:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b554:	9e3c      	ldr	r6, [sp, #240]	@ 0xf0
 800b556:	9f04      	ldr	r7, [sp, #16]
 800b558:	eeb0 7a46 	vmov.f32	s14, s12
 800b55c:	fb02 6207 	mla	r2, r2, r7, r6
 800b560:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800b562:	9201      	str	r2, [sp, #4]
 800b564:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b566:	441e      	add	r6, r3
 800b568:	4296      	cmp	r6, r2
 800b56a:	bf94      	ite	ls
 800b56c:	ebce 0e06 	rsbls	lr, lr, r6
 800b570:	ebce 0e02 	rsbhi	lr, lr, r2
 800b574:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800b576:	f1b8 0f00 	cmp.w	r8, #0
 800b57a:	fb0e f602 	mul.w	r6, lr, r2
 800b57e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b580:	eba2 0b0e 	sub.w	fp, r2, lr
 800b584:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b586:	eba2 0e0e 	sub.w	lr, r2, lr
 800b58a:	f340 80ae 	ble.w	800b6ea <forward_lite_conv2d_if32of32wf32+0x2da>
 800b58e:	f04f 0c00 	mov.w	ip, #0
 800b592:	fb07 fb0b 	mul.w	fp, r7, fp
 800b596:	fb07 fe0e 	mul.w	lr, r7, lr
 800b59a:	f026 070f 	bic.w	r7, r6, #15
 800b59e:	f107 3aff 	add.w	sl, r7, #4294967295
 800b5a2:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800b5a6:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800b5aa:	f10a 0a01 	add.w	sl, sl, #1
 800b5ae:	9a01      	ldr	r2, [sp, #4]
 800b5b0:	ea4f 198a 	mov.w	r9, sl, lsl #6
 800b5b4:	9409      	str	r4, [sp, #36]	@ 0x24
 800b5b6:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800b5ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5bc:	2f00      	cmp	r7, #0
 800b5be:	bfd8      	it	le
 800b5c0:	2000      	movle	r0, #0
 800b5c2:	dd74      	ble.n	800b6ae <forward_lite_conv2d_if32of32wf32+0x29e>
 800b5c4:	2400      	movs	r4, #0
 800b5c6:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b5ca:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800b5ce:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800b5d2:	ed50 6a0f 	vldr	s13, [r0, #-60]	@ 0xffffffc4
 800b5d6:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800b5da:	ed53 fa10 	vldr	s31, [r3, #-64]	@ 0xffffffc0
 800b5de:	ed10 fa10 	vldr	s30, [r0, #-64]	@ 0xffffffc0
 800b5e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5e6:	ed10 ea0e 	vldr	s28, [r0, #-56]	@ 0xffffffc8
 800b5ea:	ed53 ea0e 	vldr	s29, [r3, #-56]	@ 0xffffffc8
 800b5ee:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800b5f2:	ed10 da0d 	vldr	s26, [r0, #-52]	@ 0xffffffcc
 800b5f6:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800b5fa:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800b5fe:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800b602:	ed10 ca0c 	vldr	s24, [r0, #-48]	@ 0xffffffd0
 800b606:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b60a:	ed50 ba0b 	vldr	s23, [r0, #-44]	@ 0xffffffd4
 800b60e:	ed13 ba0b 	vldr	s22, [r3, #-44]	@ 0xffffffd4
 800b612:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b616:	ed50 aa0a 	vldr	s21, [r0, #-40]	@ 0xffffffd8
 800b61a:	ed13 aa0a 	vldr	s20, [r3, #-40]	@ 0xffffffd8
 800b61e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b622:	ed50 9a09 	vldr	s19, [r0, #-36]	@ 0xffffffdc
 800b626:	ed13 9a09 	vldr	s18, [r3, #-36]	@ 0xffffffdc
 800b62a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b62e:	ed53 8a08 	vldr	s17, [r3, #-32]	@ 0xffffffe0
 800b632:	ed10 8a08 	vldr	s16, [r0, #-32]	@ 0xffffffe0
 800b636:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b63a:	ed10 0a07 	vldr	s0, [r0, #-28]	@ 0xffffffe4
 800b63e:	ed53 0a07 	vldr	s1, [r3, #-28]	@ 0xffffffe4
 800b642:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b646:	ed10 1a06 	vldr	s2, [r0, #-24]	@ 0xffffffe8
 800b64a:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800b64e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b652:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800b656:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800b65a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b65e:	ed13 3a04 	vldr	s6, [r3, #-16]
 800b662:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b666:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b66a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b66e:	ed13 4a03 	vldr	s8, [r3, #-12]
 800b672:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b676:	ed10 5a02 	vldr	s10, [r0, #-8]
 800b67a:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b67e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b682:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b686:	ed53 6a01 	vldr	s13, [r3, #-4]
 800b68a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b68e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b692:	3410      	adds	r4, #16
 800b694:	42bc      	cmp	r4, r7
 800b696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b69a:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b69e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b6a2:	db96      	blt.n	800b5d2 <forward_lite_conv2d_if32of32wf32+0x1c2>
 800b6a4:	ed9d 6a01 	vldr	s12, [sp, #4]
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	4449      	add	r1, r9
 800b6ac:	444a      	add	r2, r9
 800b6ae:	4286      	cmp	r6, r0
 800b6b0:	dd10      	ble.n	800b6d4 <forward_lite_conv2d_if32of32wf32+0x2c4>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	ecf4 6a01 	vldmia	r4!, {s13}
 800b6bc:	ecf5 7a01 	vldmia	r5!, {s15}
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	429e      	cmp	r6, r3
 800b6c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6c8:	d1f6      	bne.n	800b6b8 <forward_lite_conv2d_if32of32wf32+0x2a8>
 800b6ca:	1a30      	subs	r0, r6, r0
 800b6cc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b6d0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b6d4:	f10c 0c01 	add.w	ip, ip, #1
 800b6d8:	45e0      	cmp	r8, ip
 800b6da:	4459      	add	r1, fp
 800b6dc:	4472      	add	r2, lr
 800b6de:	f47f af6d 	bne.w	800b5bc <forward_lite_conv2d_if32of32wf32+0x1ac>
 800b6e2:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800b6e6:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	@ 0x24
 800b6ea:	9a06      	ldr	r2, [sp, #24]
 800b6ec:	9903      	ldr	r1, [sp, #12]
 800b6ee:	ed80 7a00 	vstr	s14, [r0]
 800b6f2:	4415      	add	r5, r2
 800b6f4:	4408      	add	r0, r1
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	9905      	ldr	r1, [sp, #20]
 800b6fa:	9a02      	ldr	r2, [sp, #8]
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	440a      	add	r2, r1
 800b700:	9202      	str	r2, [sp, #8]
 800b702:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b704:	42a2      	cmp	r2, r4
 800b706:	f47f af1e 	bne.w	800b546 <forward_lite_conv2d_if32of32wf32+0x136>
 800b70a:	e9dd 9620 	ldrd	r9, r6, [sp, #128]	@ 0x80
 800b70e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b710:	3604      	adds	r6, #4
 800b712:	4499      	add	r9, r3
 800b714:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b716:	429e      	cmp	r6, r3
 800b718:	f4ff aefa 	bcc.w	800b510 <forward_lite_conv2d_if32of32wf32+0x100>
 800b71c:	e9dd 761b 	ldrd	r7, r6, [sp, #108]	@ 0x6c
 800b720:	e9dd 581d 	ldrd	r5, r8, [sp, #116]	@ 0x74
 800b724:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800b726:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b728:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b72a:	441c      	add	r4, r3
 800b72c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b72e:	3601      	adds	r6, #1
 800b730:	441f      	add	r7, r3
 800b732:	1aed      	subs	r5, r5, r3
 800b734:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b736:	4413      	add	r3, r2
 800b738:	9310      	str	r3, [sp, #64]	@ 0x40
 800b73a:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800b73c:	42b3      	cmp	r3, r6
 800b73e:	f47f aeb6 	bne.w	800b4ae <forward_lite_conv2d_if32of32wf32+0x9e>
 800b742:	b023      	add	sp, #140	@ 0x8c
 800b744:	ecbd 8b10 	vpop	{d8-d15}
 800b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b74e:	469e      	mov	lr, r3
 800b750:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b752:	441a      	add	r2, r3
 800b754:	e6fe      	b.n	800b554 <forward_lite_conv2d_if32of32wf32+0x144>
 800b756:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 800b9b8 <forward_lite_conv2d_if32of32wf32+0x5a8>
 800b75a:	e6e6      	b.n	800b52a <forward_lite_conv2d_if32of32wf32+0x11a>
 800b75c:	9a03      	ldr	r2, [sp, #12]
 800b75e:	eb04 0c02 	add.w	ip, r4, r2
 800b762:	4564      	cmp	r4, ip
 800b764:	d2df      	bcs.n	800b726 <forward_lite_conv2d_if32of32wf32+0x316>
 800b766:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b768:	4683      	mov	fp, r0
 800b76a:	fb02 f303 	mul.w	r3, r2, r3
 800b76e:	4622      	mov	r2, r4
 800b770:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b772:	e9cd 541b 	strd	r5, r4, [sp, #108]	@ 0x6c
 800b776:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b778:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b77a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b77e:	eb01 0e08 	add.w	lr, r1, r8
 800b782:	9717      	str	r7, [sp, #92]	@ 0x5c
 800b784:	9619      	str	r6, [sp, #100]	@ 0x64
 800b786:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b788:	2900      	cmp	r1, #0
 800b78a:	f000 810d 	beq.w	800b9a8 <forward_lite_conv2d_if32of32wf32+0x598>
 800b78e:	ecb3 6a01 	vldmia	r3!, {s12}
 800b792:	9941      	ldr	r1, [sp, #260]	@ 0x104
 800b794:	2900      	cmp	r1, #0
 800b796:	f000 80f5 	beq.w	800b984 <forward_lite_conv2d_if32of32wf32+0x574>
 800b79a:	2100      	movs	r1, #0
 800b79c:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	e9cd c81f 	strd	ip, r8, [sp, #124]	@ 0x7c
 800b7aa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b7ac:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b7ae:	f8cd e008 	str.w	lr, [sp, #8]
 800b7b2:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
 800b7b6:	2d00      	cmp	r5, #0
 800b7b8:	f2c0 80f1 	blt.w	800b99e <forward_lite_conv2d_if32of32wf32+0x58e>
 800b7bc:	f04f 0e00 	mov.w	lr, #0
 800b7c0:	9a02      	ldr	r2, [sp, #8]
 800b7c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b7c6:	9f04      	ldr	r7, [sp, #16]
 800b7c8:	eeb0 7a46 	vmov.f32	s14, s12
 800b7cc:	fb03 6307 	mla	r3, r3, r7, r6
 800b7d0:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b7d6:	4406      	add	r6, r0
 800b7d8:	429e      	cmp	r6, r3
 800b7da:	bf94      	ite	ls
 800b7dc:	ebce 0e06 	rsbls	lr, lr, r6
 800b7e0:	ebce 0e03 	rsbhi	lr, lr, r3
 800b7e4:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800b7e6:	f1bb 0f00 	cmp.w	fp, #0
 800b7ea:	fb0e f603 	mul.w	r6, lr, r3
 800b7ee:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800b7f0:	eba3 0a0e 	sub.w	sl, r3, lr
 800b7f4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b7f6:	eba3 0e0e 	sub.w	lr, r3, lr
 800b7fa:	f340 80ad 	ble.w	800b958 <forward_lite_conv2d_if32of32wf32+0x548>
 800b7fe:	fb07 fa0a 	mul.w	sl, r7, sl
 800b802:	fb07 fe0e 	mul.w	lr, r7, lr
 800b806:	2700      	movs	r7, #0
 800b808:	f026 0c0f 	bic.w	ip, r6, #15
 800b80c:	f10c 39ff 	add.w	r9, ip, #4294967295
 800b810:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800b814:	e9cd 1507 	strd	r1, r5, [sp, #28]
 800b818:	f109 0901 	add.w	r9, r9, #1
 800b81c:	9b01      	ldr	r3, [sp, #4]
 800b81e:	ea4f 1889 	mov.w	r8, r9, lsl #6
 800b822:	9409      	str	r4, [sp, #36]	@ 0x24
 800b824:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800b828:	900a      	str	r0, [sp, #40]	@ 0x28
 800b82a:	f1bc 0f00 	cmp.w	ip, #0
 800b82e:	bfd8      	it	le
 800b830:	2100      	movle	r1, #0
 800b832:	dd74      	ble.n	800b91e <forward_lite_conv2d_if32of32wf32+0x50e>
 800b834:	2400      	movs	r4, #0
 800b836:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b83a:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800b83e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b842:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 800b846:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800b84a:	ed51 fa10 	vldr	s31, [r1, #-64]	@ 0xffffffc0
 800b84e:	ed10 fa10 	vldr	s30, [r0, #-64]	@ 0xffffffc0
 800b852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b856:	ed10 ea0e 	vldr	s28, [r0, #-56]	@ 0xffffffc8
 800b85a:	ed51 ea0e 	vldr	s29, [r1, #-56]	@ 0xffffffc8
 800b85e:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800b862:	ed10 da0d 	vldr	s26, [r0, #-52]	@ 0xffffffcc
 800b866:	ed51 da0d 	vldr	s27, [r1, #-52]	@ 0xffffffcc
 800b86a:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800b86e:	ed50 ca0c 	vldr	s25, [r0, #-48]	@ 0xffffffd0
 800b872:	ed11 ca0c 	vldr	s24, [r1, #-48]	@ 0xffffffd0
 800b876:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b87a:	ed50 ba0b 	vldr	s23, [r0, #-44]	@ 0xffffffd4
 800b87e:	ed11 ba0b 	vldr	s22, [r1, #-44]	@ 0xffffffd4
 800b882:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b886:	ed50 aa0a 	vldr	s21, [r0, #-40]	@ 0xffffffd8
 800b88a:	ed11 aa0a 	vldr	s20, [r1, #-40]	@ 0xffffffd8
 800b88e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b892:	ed50 9a09 	vldr	s19, [r0, #-36]	@ 0xffffffdc
 800b896:	ed11 9a09 	vldr	s18, [r1, #-36]	@ 0xffffffdc
 800b89a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b89e:	ed51 8a08 	vldr	s17, [r1, #-32]	@ 0xffffffe0
 800b8a2:	ed10 8a08 	vldr	s16, [r0, #-32]	@ 0xffffffe0
 800b8a6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b8aa:	ed50 0a07 	vldr	s1, [r0, #-28]	@ 0xffffffe4
 800b8ae:	ed11 0a07 	vldr	s0, [r1, #-28]	@ 0xffffffe4
 800b8b2:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b8b6:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 800b8ba:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800b8be:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b8c2:	ed50 2a05 	vldr	s5, [r0, #-20]	@ 0xffffffec
 800b8c6:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800b8ca:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b8ce:	ed10 3a04 	vldr	s6, [r0, #-16]
 800b8d2:	ed51 3a04 	vldr	s7, [r1, #-16]
 800b8d6:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b8da:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b8de:	ed11 4a03 	vldr	s8, [r1, #-12]
 800b8e2:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b8e6:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b8ea:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b8ee:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b8f2:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b8f6:	ed51 6a01 	vldr	s13, [r1, #-4]
 800b8fa:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b8fe:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b902:	3410      	adds	r4, #16
 800b904:	4564      	cmp	r4, ip
 800b906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b90a:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b90e:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800b912:	db96      	blt.n	800b842 <forward_lite_conv2d_if32of32wf32+0x432>
 800b914:	ed9d 6a01 	vldr	s12, [sp, #4]
 800b918:	4649      	mov	r1, r9
 800b91a:	4442      	add	r2, r8
 800b91c:	4443      	add	r3, r8
 800b91e:	428e      	cmp	r6, r1
 800b920:	dd10      	ble.n	800b944 <forward_lite_conv2d_if32of32wf32+0x534>
 800b922:	4608      	mov	r0, r1
 800b924:	4615      	mov	r5, r2
 800b926:	461c      	mov	r4, r3
 800b928:	ecf4 6a01 	vldmia	r4!, {s13}
 800b92c:	ecf5 7a01 	vldmia	r5!, {s15}
 800b930:	3001      	adds	r0, #1
 800b932:	4286      	cmp	r6, r0
 800b934:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b938:	d1f6      	bne.n	800b928 <forward_lite_conv2d_if32of32wf32+0x518>
 800b93a:	1a71      	subs	r1, r6, r1
 800b93c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b940:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b944:	3701      	adds	r7, #1
 800b946:	45bb      	cmp	fp, r7
 800b948:	4452      	add	r2, sl
 800b94a:	4473      	add	r3, lr
 800b94c:	f47f af6d 	bne.w	800b82a <forward_lite_conv2d_if32of32wf32+0x41a>
 800b950:	e9dd 1507 	ldrd	r1, r5, [sp, #28]
 800b954:	e9dd 4009 	ldrd	r4, r0, [sp, #36]	@ 0x24
 800b958:	9b06      	ldr	r3, [sp, #24]
 800b95a:	9a03      	ldr	r2, [sp, #12]
 800b95c:	ed81 7a00 	vstr	s14, [r1]
 800b960:	441d      	add	r5, r3
 800b962:	4411      	add	r1, r2
 800b964:	1ac0      	subs	r0, r0, r3
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	3401      	adds	r4, #1
 800b96c:	4413      	add	r3, r2
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b972:	42a3      	cmp	r3, r4
 800b974:	f47f af1f 	bne.w	800b7b6 <forward_lite_conv2d_if32of32wf32+0x3a6>
 800b978:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	@ 0x74
 800b97c:	e9dd c81f 	ldrd	ip, r8, [sp, #124]	@ 0x7c
 800b980:	f8dd e084 	ldr.w	lr, [sp, #132]	@ 0x84
 800b984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b986:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b988:	3204      	adds	r2, #4
 800b98a:	4401      	add	r1, r0
 800b98c:	4562      	cmp	r2, ip
 800b98e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b990:	f4ff aef9 	bcc.w	800b786 <forward_lite_conv2d_if32of32wf32+0x376>
 800b994:	e9dd 541b 	ldrd	r5, r4, [sp, #108]	@ 0x6c
 800b998:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800b99a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800b99c:	e6c3      	b.n	800b726 <forward_lite_conv2d_if32of32wf32+0x316>
 800b99e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
 800b9a2:	4686      	mov	lr, r0
 800b9a4:	4403      	add	r3, r0
 800b9a6:	e70d      	b.n	800b7c4 <forward_lite_conv2d_if32of32wf32+0x3b4>
 800b9a8:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800b9b8 <forward_lite_conv2d_if32of32wf32+0x5a8>
 800b9ac:	e6f1      	b.n	800b792 <forward_lite_conv2d_if32of32wf32+0x382>
 800b9ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	920d      	str	r2, [sp, #52]	@ 0x34
 800b9b4:	e581      	b.n	800b4ba <forward_lite_conv2d_if32of32wf32+0xaa>
 800b9b6:	bf00      	nop
 800b9b8:	00000000 	.word	0x00000000

0800b9bc <forward_lite_nl_relu_generic_if32of32_kernel>:
 800b9bc:	ed93 7a02 	vldr	s14, [r3, #8]
 800b9c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b9cc:	f102 32ff 	add.w	r2, r2, #4294967295
 800b9d0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800b9d4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b9d8:	edd3 6a00 	vldr	s13, [r3]
 800b9dc:	ed93 6a01 	vldr	s12, [r3, #4]
 800b9e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b9e4:	d421      	bmi.n	800ba2a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800b9e6:	428a      	cmp	r2, r1
 800b9e8:	d31e      	bcc.n	800ba28 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800b9ea:	1d13      	adds	r3, r2, #4
 800b9ec:	3004      	adds	r0, #4
 800b9ee:	eba2 020c 	sub.w	r2, r2, ip
 800b9f2:	e00c      	b.n	800ba0e <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800b9f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fc:	db03      	blt.n	800ba06 <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 800b9fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba02:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba06:	4293      	cmp	r3, r2
 800ba08:	ed60 7a01 	vstmdb	r0!, {s15}
 800ba0c:	d00c      	beq.n	800ba28 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800ba0e:	ed73 7a01 	vldmdb	r3!, {s15}
 800ba12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1a:	daeb      	bge.n	800b9f4 <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 800ba1c:	eef0 7a47 	vmov.f32	s15, s14
 800ba20:	4293      	cmp	r3, r2
 800ba22:	ed60 7a01 	vstmdb	r0!, {s15}
 800ba26:	d1f2      	bne.n	800ba0e <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800ba28:	4770      	bx	lr
 800ba2a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ba2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba32:	d015      	beq.n	800ba60 <forward_lite_nl_relu_generic_if32of32_kernel+0xa4>
 800ba34:	428a      	cmp	r2, r1
 800ba36:	d3f7      	bcc.n	800ba28 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800ba38:	1d13      	adds	r3, r2, #4
 800ba3a:	3004      	adds	r0, #4
 800ba3c:	eba2 020c 	sub.w	r2, r2, ip
 800ba40:	ed73 7a01 	vldmdb	r3!, {s15}
 800ba44:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4c:	d81b      	bhi.n	800ba86 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800ba4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba52:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba56:	4293      	cmp	r3, r2
 800ba58:	ed60 7a01 	vstmdb	r0!, {s15}
 800ba5c:	d1f0      	bne.n	800ba40 <forward_lite_nl_relu_generic_if32of32_kernel+0x84>
 800ba5e:	4770      	bx	lr
 800ba60:	428a      	cmp	r2, r1
 800ba62:	d3e1      	bcc.n	800ba28 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800ba64:	2100      	movs	r1, #0
 800ba66:	1d13      	adds	r3, r2, #4
 800ba68:	3004      	adds	r0, #4
 800ba6a:	eba2 020c 	sub.w	r2, r2, ip
 800ba6e:	ed73 7a01 	vldmdb	r3!, {s15}
 800ba72:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ba76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7a:	dd09      	ble.n	800ba90 <forward_lite_nl_relu_generic_if32of32_kernel+0xd4>
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	ed60 7a01 	vstmdb	r0!, {s15}
 800ba82:	d1f4      	bne.n	800ba6e <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 800ba84:	4770      	bx	lr
 800ba86:	4293      	cmp	r3, r2
 800ba88:	ed60 7a01 	vstmdb	r0!, {s15}
 800ba8c:	d1d8      	bne.n	800ba40 <forward_lite_nl_relu_generic_if32of32_kernel+0x84>
 800ba8e:	4770      	bx	lr
 800ba90:	429a      	cmp	r2, r3
 800ba92:	f840 1d04 	str.w	r1, [r0, #-4]!
 800ba96:	d1ea      	bne.n	800ba6e <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop

0800ba9c <lite_decompress_ilutof32>:
 800ba9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baa0:	4604      	mov	r4, r0
 800baa2:	9d08      	ldr	r5, [sp, #32]
 800baa4:	2b04      	cmp	r3, #4
 800baa6:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800baaa:	4608      	mov	r0, r1
 800baac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bab0:	d012      	beq.n	800bad8 <lite_decompress_ilutof32+0x3c>
 800bab2:	2b08      	cmp	r3, #8
 800bab4:	d10e      	bne.n	800bad4 <lite_decompress_ilutof32+0x38>
 800bab6:	42ac      	cmp	r4, r5
 800bab8:	d20c      	bcs.n	800bad4 <lite_decompress_ilutof32+0x38>
 800baba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f844 3b04 	str.w	r3, [r4], #4
 800bac8:	42a5      	cmp	r5, r4
 800baca:	d8f6      	bhi.n	800baba <lite_decompress_ilutof32+0x1e>
 800bacc:	3e01      	subs	r6, #1
 800bace:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 800bad2:	1c70      	adds	r0, r6, #1
 800bad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bad8:	9b07      	ldr	r3, [sp, #28]
 800bada:	085f      	lsrs	r7, r3, #1
 800badc:	f003 0601 	and.w	r6, r3, #1
 800bae0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800bae4:	f107 38ff 	add.w	r8, r7, #4294967295
 800bae8:	42ac      	cmp	r4, r5
 800baea:	d2f3      	bcs.n	800bad4 <lite_decompress_ilutof32+0x38>
 800baec:	b30f      	cbz	r7, 800bb32 <lite_decompress_ilutof32+0x96>
 800baee:	f104 0e08 	add.w	lr, r4, #8
 800baf2:	f100 3cff 	add.w	ip, r0, #4294967295
 800baf6:	eb00 0108 	add.w	r1, r0, r8
 800bafa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800bafe:	f10e 0e08 	add.w	lr, lr, #8
 800bb02:	091b      	lsrs	r3, r3, #4
 800bb04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4561      	cmp	r1, ip
 800bb0c:	f84e 3c10 	str.w	r3, [lr, #-16]
 800bb10:	f89c 3000 	ldrb.w	r3, [ip]
 800bb14:	f003 030f 	and.w	r3, r3, #15
 800bb18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800bb22:	d1ea      	bne.n	800bafa <lite_decompress_ilutof32+0x5e>
 800bb24:	4438      	add	r0, r7
 800bb26:	444c      	add	r4, r9
 800bb28:	b92e      	cbnz	r6, 800bb36 <lite_decompress_ilutof32+0x9a>
 800bb2a:	42a5      	cmp	r5, r4
 800bb2c:	d8df      	bhi.n	800baee <lite_decompress_ilutof32+0x52>
 800bb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb32:	b906      	cbnz	r6, 800bb36 <lite_decompress_ilutof32+0x9a>
 800bb34:	e7fe      	b.n	800bb34 <lite_decompress_ilutof32+0x98>
 800bb36:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb3a:	091b      	lsrs	r3, r3, #4
 800bb3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f844 3b04 	str.w	r3, [r4], #4
 800bb46:	e7cf      	b.n	800bae8 <lite_decompress_ilutof32+0x4c>

0800bb48 <forward_lite_dense_if32of32wf32>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	ed2d 8b10 	vpush	{d8-d15}
 800bb50:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800bb54:	fb06 f303 	mul.w	r3, r6, r3
 800bb58:	6801      	ldr	r1, [r0, #0]
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bb60:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bb64:	4281      	cmp	r1, r0
 800bb66:	b083      	sub	sp, #12
 800bb68:	f080 811d 	bcs.w	800bda6 <forward_lite_dense_if32of32wf32+0x25e>
 800bb6c:	6915      	ldr	r5, [r2, #16]
 800bb6e:	00b7      	lsls	r7, r6, #2
 800bb70:	eb01 0907 	add.w	r9, r1, r7
 800bb74:	4589      	cmp	r9, r1
 800bb76:	6897      	ldr	r7, [r2, #8]
 800bb78:	f240 8109 	bls.w	800bd8e <forward_lite_dense_if32of32wf32+0x246>
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	f1a5 0e10 	sub.w	lr, r5, #16
 800bb82:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800bb86:	e9cd 0100 	strd	r0, r1, [sp]
 800bb8a:	f10e 0e01 	add.w	lr, lr, #1
 800bb8e:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 800bb92:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800bb96:	eb08 1e8e 	add.w	lr, r8, lr, lsl #6
 800bb9a:	2d0f      	cmp	r5, #15
 800bb9c:	f240 8108 	bls.w	800bdb0 <forward_lite_dense_if32of32wf32+0x268>
 800bba0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800bdfc <forward_lite_dense_if32of32wf32+0x2b4>
 800bba4:	4628      	mov	r0, r5
 800bba6:	f108 0140 	add.w	r1, r8, #64	@ 0x40
 800bbaa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bbae:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 800bbb2:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800bbb6:	ed51 fa10 	vldr	s31, [r1, #-64]	@ 0xffffffc0
 800bbba:	ed13 fa10 	vldr	s30, [r3, #-64]	@ 0xffffffc0
 800bbbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bbc2:	ed51 ea0e 	vldr	s29, [r1, #-56]	@ 0xffffffc8
 800bbc6:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800bbca:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800bbce:	ed11 da0d 	vldr	s26, [r1, #-52]	@ 0xffffffcc
 800bbd2:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800bbd6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800bbda:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800bbde:	ed11 ca0c 	vldr	s24, [r1, #-48]	@ 0xffffffd0
 800bbe2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800bbe6:	ed11 ba0b 	vldr	s22, [r1, #-44]	@ 0xffffffd4
 800bbea:	ed53 ba0b 	vldr	s23, [r3, #-44]	@ 0xffffffd4
 800bbee:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800bbf2:	ed11 aa0a 	vldr	s20, [r1, #-40]	@ 0xffffffd8
 800bbf6:	ed53 aa0a 	vldr	s21, [r3, #-40]	@ 0xffffffd8
 800bbfa:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800bbfe:	ed11 9a09 	vldr	s18, [r1, #-36]	@ 0xffffffdc
 800bc02:	ed53 9a09 	vldr	s19, [r3, #-36]	@ 0xffffffdc
 800bc06:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800bc0a:	ed51 8a08 	vldr	s17, [r1, #-32]	@ 0xffffffe0
 800bc0e:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 800bc12:	eee9 7a89 	vfma.f32	s15, s19, s18
 800bc16:	ed11 0a07 	vldr	s0, [r1, #-28]	@ 0xffffffe4
 800bc1a:	ed53 0a07 	vldr	s1, [r3, #-28]	@ 0xffffffe4
 800bc1e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800bc22:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800bc26:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800bc2a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bc2e:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800bc32:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800bc36:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bc3a:	ed11 3a04 	vldr	s6, [r1, #-16]
 800bc3e:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bc42:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bc46:	ed51 4a03 	vldr	s9, [r1, #-12]
 800bc4a:	ed13 4a03 	vldr	s8, [r3, #-12]
 800bc4e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bc52:	ed51 5a02 	vldr	s11, [r1, #-8]
 800bc56:	ed13 5a02 	vldr	s10, [r3, #-8]
 800bc5a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bc5e:	ed51 6a01 	vldr	s13, [r1, #-4]
 800bc62:	ed13 6a01 	vldr	s12, [r3, #-4]
 800bc66:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bc6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bc6e:	3810      	subs	r0, #16
 800bc70:	280f      	cmp	r0, #15
 800bc72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc76:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800bc7a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800bc7e:	d896      	bhi.n	800bbae <forward_lite_dense_if32of32wf32+0x66>
 800bc80:	4673      	mov	r3, lr
 800bc82:	eb07 010b 	add.w	r1, r7, fp
 800bc86:	f005 000f 	and.w	r0, r5, #15
 800bc8a:	2803      	cmp	r0, #3
 800bc8c:	d95f      	bls.n	800bd4e <forward_lite_dense_if32of32wf32+0x206>
 800bc8e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc92:	edd1 3a01 	vldr	s7, [r1, #4]
 800bc96:	ed93 4a00 	vldr	s8, [r3]
 800bc9a:	edd1 4a00 	vldr	s9, [r1]
 800bc9e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bca2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bca6:	ed93 5a02 	vldr	s10, [r3, #8]
 800bcaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcae:	edd1 5a02 	vldr	s11, [r1, #8]
 800bcb2:	ed93 6a03 	vldr	s12, [r3, #12]
 800bcb6:	edd1 6a03 	vldr	s13, [r1, #12]
 800bcba:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bcbe:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bcc2:	1f04      	subs	r4, r0, #4
 800bcc4:	2c03      	cmp	r4, #3
 800bcc6:	eeb0 7a67 	vmov.f32	s14, s15
 800bcca:	d938      	bls.n	800bd3e <forward_lite_dense_if32of32wf32+0x1f6>
 800bccc:	edd3 7a05 	vldr	s15, [r3, #20]
 800bcd0:	edd1 3a05 	vldr	s7, [r1, #20]
 800bcd4:	ed93 4a04 	vldr	s8, [r3, #16]
 800bcd8:	edd1 4a04 	vldr	s9, [r1, #16]
 800bcdc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bce0:	ed93 5a06 	vldr	s10, [r3, #24]
 800bce4:	edd1 5a06 	vldr	s11, [r1, #24]
 800bce8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bcec:	ed93 6a07 	vldr	s12, [r3, #28]
 800bcf0:	edd1 6a07 	vldr	s13, [r1, #28]
 800bcf4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bcf8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bcfc:	f1a0 0c08 	sub.w	ip, r0, #8
 800bd00:	f1bc 0f03 	cmp.w	ip, #3
 800bd04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd08:	d919      	bls.n	800bd3e <forward_lite_dense_if32of32wf32+0x1f6>
 800bd0a:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 800bd0e:	edd3 3a09 	vldr	s7, [r3, #36]	@ 0x24
 800bd12:	ed91 4a08 	vldr	s8, [r1, #32]
 800bd16:	edd3 4a08 	vldr	s9, [r3, #32]
 800bd1a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bd1e:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 800bd22:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800bd26:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd2a:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 800bd2e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800bd32:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd36:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd3e:	08a4      	lsrs	r4, r4, #2
 800bd40:	3401      	adds	r4, #1
 800bd42:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800bd46:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800bd4a:	f000 0003 	and.w	r0, r0, #3
 800bd4e:	b1a8      	cbz	r0, 800bd7c <forward_lite_dense_if32of32wf32+0x234>
 800bd50:	edd3 6a00 	vldr	s13, [r3]
 800bd54:	edd1 7a00 	vldr	s15, [r1]
 800bd58:	2801      	cmp	r0, #1
 800bd5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd5e:	d00d      	beq.n	800bd7c <forward_lite_dense_if32of32wf32+0x234>
 800bd60:	edd3 6a01 	vldr	s13, [r3, #4]
 800bd64:	edd1 7a01 	vldr	s15, [r1, #4]
 800bd68:	2802      	cmp	r0, #2
 800bd6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd6e:	d005      	beq.n	800bd7c <forward_lite_dense_if32of32wf32+0x234>
 800bd70:	edd1 6a02 	vldr	s13, [r1, #8]
 800bd74:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd7c:	eca6 7a01 	vstmia	r6!, {s14}
 800bd80:	45b1      	cmp	r9, r6
 800bd82:	4457      	add	r7, sl
 800bd84:	f63f af09 	bhi.w	800bb9a <forward_lite_dense_if32of32wf32+0x52>
 800bd88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd8c:	6956      	ldr	r6, [r2, #20]
 800bd8e:	68d3      	ldr	r3, [r2, #12]
 800bd90:	b9a3      	cbnz	r3, 800bdbc <forward_lite_dense_if32of32wf32+0x274>
 800bd92:	6915      	ldr	r5, [r2, #16]
 800bd94:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800bd98:	4288      	cmp	r0, r1
 800bd9a:	eb08 0885 	add.w	r8, r8, r5, lsl #2
 800bd9e:	ea4f 0786 	mov.w	r7, r6, lsl #2
 800bda2:	f63f aee5 	bhi.w	800bb70 <forward_lite_dense_if32of32wf32+0x28>
 800bda6:	b003      	add	sp, #12
 800bda8:	ecbd 8b10 	vpop	{d8-d15}
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bdfc <forward_lite_dense_if32of32wf32+0x2b4>
 800bdb6:	4639      	mov	r1, r7
 800bdb8:	4643      	mov	r3, r8
 800bdba:	e766      	b.n	800bc8a <forward_lite_dense_if32of32wf32+0x142>
 800bdbc:	2e00      	cmp	r6, #0
 800bdbe:	d0e8      	beq.n	800bd92 <forward_lite_dense_if32of32wf32+0x24a>
 800bdc0:	edd1 7a00 	vldr	s15, [r1]
 800bdc4:	ed93 7a00 	vldr	s14, [r3]
 800bdc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdcc:	edc1 7a00 	vstr	s15, [r1]
 800bdd0:	6956      	ldr	r6, [r2, #20]
 800bdd2:	2e01      	cmp	r6, #1
 800bdd4:	d9dd      	bls.n	800bd92 <forward_lite_dense_if32of32wf32+0x24a>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	1d0d      	adds	r5, r1, #4
 800bdda:	68d4      	ldr	r4, [r2, #12]
 800bddc:	ed95 7a00 	vldr	s14, [r5]
 800bde0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bde4:	edd4 7a00 	vldr	s15, [r4]
 800bde8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdec:	ece5 7a01 	vstmia	r5!, {s15}
 800bdf0:	6956      	ldr	r6, [r2, #20]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	429e      	cmp	r6, r3
 800bdf6:	d8f0      	bhi.n	800bdda <forward_lite_dense_if32of32wf32+0x292>
 800bdf8:	e7cb      	b.n	800bd92 <forward_lite_dense_if32of32wf32+0x24a>
 800bdfa:	bf00      	nop
 800bdfc:	00000000 	.word	0x00000000

0800be00 <forward_lite_dense_if32of32wf32_lut4>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	b08d      	sub	sp, #52	@ 0x34
 800be06:	e9dd 5419 	ldrd	r5, r4, [sp, #100]	@ 0x64
 800be0a:	fb04 fc05 	mul.w	ip, r4, r5
 800be0e:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 800be12:	4604      	mov	r4, r0
 800be14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be18:	4618      	mov	r0, r3
 800be1a:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800be1e:	460d      	mov	r5, r1
 800be20:	920a      	str	r2, [sp, #40]	@ 0x28
 800be22:	9308      	str	r3, [sp, #32]
 800be24:	f1b8 0f00 	cmp.w	r8, #0
 800be28:	d004      	beq.n	800be34 <forward_lite_dense_if32of32wf32_lut4+0x34>
 800be2a:	2240      	movs	r2, #64	@ 0x40
 800be2c:	4641      	mov	r1, r8
 800be2e:	f000 fa79 	bl	800c324 <st_int8_copy>
 800be32:	4640      	mov	r0, r8
 800be34:	9b08      	ldr	r3, [sp, #32]
 800be36:	429c      	cmp	r4, r3
 800be38:	f080 8108 	bcs.w	800c04c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800be3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be3e:	08fa      	lsrs	r2, r7, #3
 800be40:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800be44:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 800be48:	9405      	str	r4, [sp, #20]
 800be4a:	46e6      	mov	lr, ip
 800be4c:	465c      	mov	r4, fp
 800be4e:	f007 0301 	and.w	r3, r7, #1
 800be52:	9303      	str	r3, [sp, #12]
 800be54:	00bb      	lsls	r3, r7, #2
 800be56:	9202      	str	r2, [sp, #8]
 800be58:	f027 0901 	bic.w	r9, r7, #1
 800be5c:	0092      	lsls	r2, r2, #2
 800be5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be60:	9b05      	ldr	r3, [sp, #20]
 800be62:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800be66:	f105 0120 	add.w	r1, r5, #32
 800be6a:	9204      	str	r2, [sp, #16]
 800be6c:	f8cd c01c 	str.w	ip, [sp, #28]
 800be70:	9617      	str	r6, [sp, #92]	@ 0x5c
 800be72:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800be76:	9a07      	ldr	r2, [sp, #28]
 800be78:	eb03 0a02 	add.w	sl, r3, r2
 800be7c:	459a      	cmp	sl, r3
 800be7e:	f1a1 0220 	sub.w	r2, r1, #32
 800be82:	9206      	str	r2, [sp, #24]
 800be84:	f240 80e5 	bls.w	800c052 <forward_lite_dense_if32of32wf32_lut4+0x252>
 800be88:	f109 3bff 	add.w	fp, r9, #4294967295
 800be8c:	4698      	mov	r8, r3
 800be8e:	465d      	mov	r5, fp
 800be90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be92:	9b02      	ldr	r3, [sp, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 80bc 	beq.w	800c012 <forward_lite_dense_if32of32wf32_lut4+0x212>
 800be9a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800c084 <forward_lite_dense_if32of32wf32_lut4+0x284>
 800be9e:	460b      	mov	r3, r1
 800bea0:	9e04      	ldr	r6, [sp, #16]
 800bea2:	eb02 0c06 	add.w	ip, r2, r6
 800bea6:	7817      	ldrb	r7, [r2, #0]
 800bea8:	ed13 6a07 	vldr	s12, [r3, #-28]	@ 0xffffffe4
 800beac:	f007 0e0f 	and.w	lr, r7, #15
 800beb0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800beb4:	edde 7a00 	vldr	s15, [lr]
 800beb8:	093f      	lsrs	r7, r7, #4
 800beba:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bebe:	ed53 0a08 	vldr	s1, [r3, #-32]	@ 0xffffffe0
 800bec2:	ed97 0a00 	vldr	s0, [r7]
 800bec6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800beca:	7856      	ldrb	r6, [r2, #1]
 800becc:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800bed0:	0937      	lsrs	r7, r6, #4
 800bed2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bed6:	ed97 1a00 	vldr	s2, [r7]
 800beda:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bede:	f006 060f 	and.w	r6, r6, #15
 800bee2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bee6:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800beea:	ed96 2a00 	vldr	s4, [r6]
 800beee:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bef2:	7897      	ldrb	r7, [r2, #2]
 800bef4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bef8:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 800befc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800bf00:	ed9e 3a00 	vldr	s6, [lr]
 800bf04:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bf08:	f007 070f 	and.w	r7, r7, #15
 800bf0c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bf10:	ed53 4a03 	vldr	s9, [r3, #-12]
 800bf14:	ed97 4a00 	vldr	s8, [r7]
 800bf18:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bf1c:	78d6      	ldrb	r6, [r2, #3]
 800bf1e:	ed53 5a02 	vldr	s11, [r3, #-8]
 800bf22:	0937      	lsrs	r7, r6, #4
 800bf24:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bf28:	ed97 5a00 	vldr	s10, [r7]
 800bf2c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bf30:	f006 060f 	and.w	r6, r6, #15
 800bf34:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bf38:	ed53 6a01 	vldr	s13, [r3, #-4]
 800bf3c:	ed96 6a00 	vldr	s12, [r6]
 800bf40:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bf44:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bf48:	3204      	adds	r2, #4
 800bf4a:	4562      	cmp	r2, ip
 800bf4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf50:	f103 0320 	add.w	r3, r3, #32
 800bf54:	d1a7      	bne.n	800bea6 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 800bf56:	46a6      	mov	lr, r4
 800bf58:	45ce      	cmp	lr, r9
 800bf5a:	d261      	bcs.n	800c020 <forward_lite_dense_if32of32wf32_lut4+0x220>
 800bf5c:	eba5 070e 	sub.w	r7, r5, lr
 800bf60:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 800bf64:	f10e 0208 	add.w	r2, lr, #8
 800bf68:	f10c 36ff 	add.w	r6, ip, #4294967295
 800bf6c:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 800bf70:	f8cd a004 	str.w	sl, [sp, #4]
 800bf74:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bf78:	ed52 5a01 	vldr	s11, [r2, #-4]
 800bf7c:	f003 0a0f 	and.w	sl, r3, #15
 800bf80:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800bf84:	edda 7a00 	vldr	s15, [sl]
 800bf88:	091b      	lsrs	r3, r3, #4
 800bf8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bf8e:	ed52 6a02 	vldr	s13, [r2, #-8]
 800bf92:	ed93 6a00 	vldr	s12, [r3]
 800bf96:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bf9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bf9e:	42b7      	cmp	r7, r6
 800bfa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfa4:	f102 0208 	add.w	r2, r2, #8
 800bfa8:	d1e4      	bne.n	800bf74 <forward_lite_dense_if32of32wf32_lut4+0x174>
 800bfaa:	f10b 0b01 	add.w	fp, fp, #1
 800bfae:	f8dd a004 	ldr.w	sl, [sp, #4]
 800bfb2:	eb0c 020b 	add.w	r2, ip, fp
 800bfb6:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	b30b      	cbz	r3, 800c002 <forward_lite_dense_if32of32wf32_lut4+0x202>
 800bfbe:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bfc2:	edde 7a00 	vldr	s15, [lr]
 800bfc6:	091b      	lsrs	r3, r3, #4
 800bfc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bfcc:	edd3 6a00 	vldr	s13, [r3]
 800bfd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bfd4:	eca8 7a01 	vstmia	r8!, {s14}
 800bfd8:	45c2      	cmp	sl, r8
 800bfda:	f63f af5a 	bhi.w	800be92 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800bfde:	9b05      	ldr	r3, [sp, #20]
 800bfe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfe2:	189d      	adds	r5, r3, r2
 800bfe4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfe6:	b9eb      	cbnz	r3, 800c024 <forward_lite_dense_if32of32wf32_lut4+0x224>
 800bfe8:	9b08      	ldr	r3, [sp, #32]
 800bfea:	42ab      	cmp	r3, r5
 800bfec:	d92e      	bls.n	800c04c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800bfee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bff0:	4499      	add	r9, r3
 800bff2:	441c      	add	r4, r3
 800bff4:	4419      	add	r1, r3
 800bff6:	9b05      	ldr	r3, [sp, #20]
 800bff8:	459a      	cmp	sl, r3
 800bffa:	d92c      	bls.n	800c056 <forward_lite_dense_if32of32wf32_lut4+0x256>
 800bffc:	462b      	mov	r3, r5
 800bffe:	9505      	str	r5, [sp, #20]
 800c000:	e739      	b.n	800be76 <forward_lite_dense_if32of32wf32_lut4+0x76>
 800c002:	eca8 7a01 	vstmia	r8!, {s14}
 800c006:	45c2      	cmp	sl, r8
 800c008:	d9e9      	bls.n	800bfde <forward_lite_dense_if32of32wf32_lut4+0x1de>
 800c00a:	9b02      	ldr	r3, [sp, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f47f af44 	bne.w	800be9a <forward_lite_dense_if32of32wf32_lut4+0x9a>
 800c012:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c016:	4694      	mov	ip, r2
 800c018:	45ce      	cmp	lr, r9
 800c01a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800c084 <forward_lite_dense_if32of32wf32_lut4+0x284>
 800c01e:	d39d      	bcc.n	800bf5c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 800c020:	4662      	mov	r2, ip
 800c022:	e7ca      	b.n	800bfba <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 800c024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0de      	beq.n	800bfe8 <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800c030:	1aea      	subs	r2, r5, r3
 800c032:	edd2 7a00 	vldr	s15, [r2]
 800c036:	ecbc 7a01 	vldmia	ip!, {s14}
 800c03a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c03e:	ece2 7a01 	vstmia	r2!, {s15}
 800c042:	42aa      	cmp	r2, r5
 800c044:	d1f5      	bne.n	800c032 <forward_lite_dense_if32of32wf32_lut4+0x232>
 800c046:	9b08      	ldr	r3, [sp, #32]
 800c048:	42ab      	cmp	r3, r5
 800c04a:	d8d0      	bhi.n	800bfee <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 800c04c:	b00d      	add	sp, #52	@ 0x34
 800c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c052:	461d      	mov	r5, r3
 800c054:	e7c6      	b.n	800bfe4 <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 800c056:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c05a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c05c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800c05e:	eba5 0c0c 	sub.w	ip, r5, ip
 800c062:	b169      	cbz	r1, 800c080 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c064:	4663      	mov	r3, ip
 800c066:	4632      	mov	r2, r6
 800c068:	ed93 7a00 	vldr	s14, [r3]
 800c06c:	ecf2 7a01 	vldmia	r2!, {s15}
 800c070:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c074:	ece3 7a01 	vstmia	r3!, {s15}
 800c078:	429d      	cmp	r5, r3
 800c07a:	d1f5      	bne.n	800c068 <forward_lite_dense_if32of32wf32_lut4+0x268>
 800c07c:	2900      	cmp	r1, #0
 800c07e:	d1f1      	bne.n	800c064 <forward_lite_dense_if32of32wf32_lut4+0x264>
 800c080:	e7fe      	b.n	800c080 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c082:	bf00      	nop
 800c084:	00000000 	.word	0x00000000

0800c088 <forward_lite_dense_if32of32wf32_lut8>:
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	b087      	sub	sp, #28
 800c08e:	e9dd 6513 	ldrd	r6, r5, [sp, #76]	@ 0x4c
 800c092:	fb05 fc06 	mul.w	ip, r5, r6
 800c096:	e9dd b511 	ldrd	fp, r5, [sp, #68]	@ 0x44
 800c09a:	4606      	mov	r6, r0
 800c09c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c09e:	4618      	mov	r0, r3
 800c0a0:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	9205      	str	r2, [sp, #20]
 800c0a8:	9303      	str	r3, [sp, #12]
 800c0aa:	b12c      	cbz	r4, 800c0b8 <forward_lite_dense_if32of32wf32_lut8+0x30>
 800c0ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	f000 f937 	bl	800c324 <st_int8_copy>
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	429e      	cmp	r6, r3
 800c0bc:	f080 8118 	bcs.w	800c2f0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c0c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0c2:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 800c0c6:	0099      	lsls	r1, r3, #2
 800c0c8:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800c0cc:	9600      	str	r6, [sp, #0]
 800c0ce:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800c0d2:	464e      	mov	r6, r9
 800c0d4:	4689      	mov	r9, r1
 800c0d6:	9b00      	ldr	r3, [sp, #0]
 800c0d8:	00aa      	lsls	r2, r5, #2
 800c0da:	9104      	str	r1, [sp, #16]
 800c0dc:	4611      	mov	r1, r2
 800c0de:	465a      	mov	r2, fp
 800c0e0:	eb03 0b09 	add.w	fp, r3, r9
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	459b      	cmp	fp, r3
 800c0e8:	f005 0407 	and.w	r4, r5, #7
 800c0ec:	f1a7 0e20 	sub.w	lr, r7, #32
 800c0f0:	f240 80d7 	bls.w	800c2a2 <forward_lite_dense_if32of32wf32_lut8+0x21a>
 800c0f4:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 800c0f8:	469c      	mov	ip, r3
 800c0fa:	9b05      	ldr	r3, [sp, #20]
 800c0fc:	2e00      	cmp	r6, #0
 800c0fe:	f000 80de 	beq.w	800c2be <forward_lite_dense_if32of32wf32_lut8+0x236>
 800c102:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800c320 <forward_lite_dense_if32of32wf32_lut8+0x298>
 800c106:	463d      	mov	r5, r7
 800c108:	eb03 090a 	add.w	r9, r3, sl
 800c10c:	f893 e001 	ldrb.w	lr, [r3, #1]
 800c110:	ed15 5a07 	vldr	s10, [r5, #-28]	@ 0xffffffe4
 800c114:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c118:	edde 7a00 	vldr	s15, [lr]
 800c11c:	f893 e000 	ldrb.w	lr, [r3]
 800c120:	ed15 6a08 	vldr	s12, [r5, #-32]	@ 0xffffffe0
 800c124:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c128:	edde 0a00 	vldr	s1, [lr]
 800c12c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c130:	f893 e002 	ldrb.w	lr, [r3, #2]
 800c134:	ed55 1a06 	vldr	s3, [r5, #-24]	@ 0xffffffe8
 800c138:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c13c:	ed9e 1a00 	vldr	s2, [lr]
 800c140:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c144:	f893 e003 	ldrb.w	lr, [r3, #3]
 800c148:	ed55 2a05 	vldr	s5, [r5, #-20]	@ 0xffffffec
 800c14c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c150:	ed9e 2a00 	vldr	s4, [lr]
 800c154:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c158:	f893 e004 	ldrb.w	lr, [r3, #4]
 800c15c:	ed55 3a04 	vldr	s7, [r5, #-16]
 800c160:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c164:	ed9e 3a00 	vldr	s6, [lr]
 800c168:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c16c:	f893 e005 	ldrb.w	lr, [r3, #5]
 800c170:	ed55 4a03 	vldr	s9, [r5, #-12]
 800c174:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c178:	ed9e 4a00 	vldr	s8, [lr]
 800c17c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c180:	f893 e006 	ldrb.w	lr, [r3, #6]
 800c184:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c188:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c18c:	ed9e 5a00 	vldr	s10, [lr]
 800c190:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c194:	f893 e007 	ldrb.w	lr, [r3, #7]
 800c198:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c19c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1a0:	ed9e 6a00 	vldr	s12, [lr]
 800c1a4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	454b      	cmp	r3, r9
 800c1b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1b4:	f105 0520 	add.w	r5, r5, #32
 800c1b8:	d1a8      	bne.n	800c10c <forward_lite_dense_if32of32wf32_lut8+0x84>
 800c1ba:	4643      	mov	r3, r8
 800c1bc:	2c00      	cmp	r4, #0
 800c1be:	d07c      	beq.n	800c2ba <forward_lite_dense_if32of32wf32_lut8+0x232>
 800c1c0:	f899 5000 	ldrb.w	r5, [r9]
 800c1c4:	edd3 7a00 	vldr	s15, [r3]
 800c1c8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c1cc:	edd5 6a00 	vldr	s13, [r5]
 800c1d0:	2c01      	cmp	r4, #1
 800c1d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1d6:	d045      	beq.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c1d8:	f899 5001 	ldrb.w	r5, [r9, #1]
 800c1dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1e0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c1e4:	edd5 6a00 	vldr	s13, [r5]
 800c1e8:	2c02      	cmp	r4, #2
 800c1ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1ee:	d039      	beq.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c1f0:	f899 5002 	ldrb.w	r5, [r9, #2]
 800c1f4:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1f8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c1fc:	edd5 6a00 	vldr	s13, [r5]
 800c200:	2c03      	cmp	r4, #3
 800c202:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c206:	d02d      	beq.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c208:	f899 5003 	ldrb.w	r5, [r9, #3]
 800c20c:	edd3 6a03 	vldr	s13, [r3, #12]
 800c210:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c214:	edd5 7a00 	vldr	s15, [r5]
 800c218:	2c04      	cmp	r4, #4
 800c21a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c21e:	d021      	beq.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c220:	f899 5004 	ldrb.w	r5, [r9, #4]
 800c224:	edd3 6a04 	vldr	s13, [r3, #16]
 800c228:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c22c:	edd5 7a00 	vldr	s15, [r5]
 800c230:	2c05      	cmp	r4, #5
 800c232:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c236:	d015      	beq.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c238:	f899 5005 	ldrb.w	r5, [r9, #5]
 800c23c:	edd3 6a05 	vldr	s13, [r3, #20]
 800c240:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c244:	edd5 7a00 	vldr	s15, [r5]
 800c248:	2c06      	cmp	r4, #6
 800c24a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c24e:	d009      	beq.n	800c264 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c250:	edd3 7a06 	vldr	s15, [r3, #24]
 800c254:	f899 3006 	ldrb.w	r3, [r9, #6]
 800c258:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c25c:	edd3 6a00 	vldr	s13, [r3]
 800c260:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c264:	eb09 0304 	add.w	r3, r9, r4
 800c268:	ecac 7a01 	vstmia	ip!, {s14}
 800c26c:	45e3      	cmp	fp, ip
 800c26e:	f63f af45 	bhi.w	800c0fc <forward_lite_dense_if32of32wf32_lut8+0x74>
 800c272:	e9dd 3900 	ldrd	r3, r9, [sp]
 800c276:	9d04      	ldr	r5, [sp, #16]
 800c278:	eb03 0e05 	add.w	lr, r3, r5
 800c27c:	bb2a      	cbnz	r2, 800c2ca <forward_lite_dense_if32of32wf32_lut8+0x242>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	4573      	cmp	r3, lr
 800c282:	d935      	bls.n	800c2f0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c284:	9b00      	ldr	r3, [sp, #0]
 800c286:	4488      	add	r8, r1
 800c288:	459b      	cmp	fp, r3
 800c28a:	440f      	add	r7, r1
 800c28c:	d944      	bls.n	800c318 <forward_lite_dense_if32of32wf32_lut8+0x290>
 800c28e:	4673      	mov	r3, lr
 800c290:	eb03 0b09 	add.w	fp, r3, r9
 800c294:	459b      	cmp	fp, r3
 800c296:	f8cd e000 	str.w	lr, [sp]
 800c29a:	f1a7 0e20 	sub.w	lr, r7, #32
 800c29e:	f63f af29 	bhi.w	800c0f4 <forward_lite_dense_if32of32wf32_lut8+0x6c>
 800c2a2:	b98a      	cbnz	r2, 800c2c8 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800c2a4:	461e      	mov	r6, r3
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	42b3      	cmp	r3, r6
 800c2ac:	4693      	mov	fp, r2
 800c2ae:	d91f      	bls.n	800c2f0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c2b0:	465b      	mov	r3, fp
 800c2b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2b4:	4249      	negs	r1, r1
 800c2b6:	b9f3      	cbnz	r3, 800c2f6 <forward_lite_dense_if32of32wf32_lut8+0x26e>
 800c2b8:	e7fe      	b.n	800c2b8 <forward_lite_dense_if32of32wf32_lut8+0x230>
 800c2ba:	464b      	mov	r3, r9
 800c2bc:	e7d4      	b.n	800c268 <forward_lite_dense_if32of32wf32_lut8+0x1e0>
 800c2be:	4699      	mov	r9, r3
 800c2c0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800c320 <forward_lite_dense_if32of32wf32_lut8+0x298>
 800c2c4:	9b02      	ldr	r3, [sp, #8]
 800c2c6:	e779      	b.n	800c1bc <forward_lite_dense_if32of32wf32_lut8+0x134>
 800c2c8:	469e      	mov	lr, r3
 800c2ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0d6      	beq.n	800c27e <forward_lite_dense_if32of32wf32_lut8+0x1f6>
 800c2d0:	4615      	mov	r5, r2
 800c2d2:	ebae 0309 	sub.w	r3, lr, r9
 800c2d6:	edd3 7a00 	vldr	s15, [r3]
 800c2da:	ecb5 7a01 	vldmia	r5!, {s14}
 800c2de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2e2:	ece3 7a01 	vstmia	r3!, {s15}
 800c2e6:	4573      	cmp	r3, lr
 800c2e8:	d1f5      	bne.n	800c2d6 <forward_lite_dense_if32of32wf32_lut8+0x24e>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	4573      	cmp	r3, lr
 800c2ee:	d8c9      	bhi.n	800c284 <forward_lite_dense_if32of32wf32_lut8+0x1fc>
 800c2f0:	b007      	add	sp, #28
 800c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	d0dd      	beq.n	800c2b6 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800c2fa:	469b      	mov	fp, r3
 800c2fc:	4431      	add	r1, r6
 800c2fe:	460b      	mov	r3, r1
 800c300:	465a      	mov	r2, fp
 800c302:	ed93 7a00 	vldr	s14, [r3]
 800c306:	ecf2 7a01 	vldmia	r2!, {s15}
 800c30a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c30e:	ece3 7a01 	vstmia	r3!, {s15}
 800c312:	42b3      	cmp	r3, r6
 800c314:	d1f5      	bne.n	800c302 <forward_lite_dense_if32of32wf32_lut8+0x27a>
 800c316:	e7f2      	b.n	800c2fe <forward_lite_dense_if32of32wf32_lut8+0x276>
 800c318:	4649      	mov	r1, r9
 800c31a:	4693      	mov	fp, r2
 800c31c:	4676      	mov	r6, lr
 800c31e:	e7c7      	b.n	800c2b0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800c320:	00000000 	.word	0x00000000

0800c324 <st_int8_copy>:
 800c324:	4288      	cmp	r0, r1
 800c326:	d021      	beq.n	800c36c <st_int8_copy+0x48>
 800c328:	b302      	cbz	r2, 800c36c <st_int8_copy+0x48>
 800c32a:	4288      	cmp	r0, r1
 800c32c:	d313      	bcc.n	800c356 <st_int8_copy+0x32>
 800c32e:	2a03      	cmp	r2, #3
 800c330:	d81d      	bhi.n	800c36e <st_int8_copy+0x4a>
 800c332:	3a01      	subs	r2, #1
 800c334:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c338:	f801 3b01 	strb.w	r3, [r1], #1
 800c33c:	b1b2      	cbz	r2, 800c36c <st_int8_copy+0x48>
 800c33e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c342:	f801 3b01 	strb.w	r3, [r1], #1
 800c346:	2a01      	cmp	r2, #1
 800c348:	f000 8088 	beq.w	800c45c <st_int8_copy+0x138>
 800c34c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c350:	f801 3b01 	strb.w	r3, [r1], #1
 800c354:	4770      	bx	lr
 800c356:	1883      	adds	r3, r0, r2
 800c358:	428b      	cmp	r3, r1
 800c35a:	d9e8      	bls.n	800c32e <st_int8_copy+0xa>
 800c35c:	440a      	add	r2, r1
 800c35e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800c362:	4298      	cmp	r0, r3
 800c364:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800c368:	d1f9      	bne.n	800c35e <st_int8_copy+0x3a>
 800c36a:	4770      	bx	lr
 800c36c:	4770      	bx	lr
 800c36e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c372:	f001 0e03 	and.w	lr, r1, #3
 800c376:	f1ce 0304 	rsb	r3, lr, #4
 800c37a:	eba2 0c03 	sub.w	ip, r2, r3
 800c37e:	f000 0803 	and.w	r8, r0, #3
 800c382:	f1ce 0203 	rsb	r2, lr, #3
 800c386:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c38a:	f801 3b01 	strb.w	r3, [r1], #1
 800c38e:	b182      	cbz	r2, 800c3b2 <st_int8_copy+0x8e>
 800c390:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c394:	f801 3b01 	strb.w	r3, [r1], #1
 800c398:	2a01      	cmp	r2, #1
 800c39a:	d00a      	beq.n	800c3b2 <st_int8_copy+0x8e>
 800c39c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c3a0:	f801 3b01 	strb.w	r3, [r1], #1
 800c3a4:	f1be 0f01 	cmp.w	lr, #1
 800c3a8:	d003      	beq.n	800c3b2 <st_int8_copy+0x8e>
 800c3aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c3ae:	f801 3b01 	strb.w	r3, [r1], #1
 800c3b2:	45c6      	cmp	lr, r8
 800c3b4:	d02a      	beq.n	800c40c <st_int8_copy+0xe8>
 800c3b6:	ea5f 121c 	movs.w	r2, ip, lsr #4
 800c3ba:	d00a      	beq.n	800c3d2 <st_int8_copy+0xae>
 800c3bc:	f850 3b04 	ldr.w	r3, [r0], #4
 800c3c0:	f850 4b04 	ldr.w	r4, [r0], #4
 800c3c4:	f850 5b04 	ldr.w	r5, [r0], #4
 800c3c8:	f850 6b04 	ldr.w	r6, [r0], #4
 800c3cc:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c3ce:	3a01      	subs	r2, #1
 800c3d0:	d1f4      	bne.n	800c3bc <st_int8_copy+0x98>
 800c3d2:	f01c 0f08 	tst.w	ip, #8
 800c3d6:	d004      	beq.n	800c3e2 <st_int8_copy+0xbe>
 800c3d8:	f850 3b04 	ldr.w	r3, [r0], #4
 800c3dc:	f850 4b04 	ldr.w	r4, [r0], #4
 800c3e0:	c118      	stmia	r1!, {r3, r4}
 800c3e2:	f01c 0f04 	tst.w	ip, #4
 800c3e6:	d003      	beq.n	800c3f0 <st_int8_copy+0xcc>
 800c3e8:	f850 3b04 	ldr.w	r3, [r0], #4
 800c3ec:	f841 3b04 	str.w	r3, [r1], #4
 800c3f0:	f01c 0f02 	tst.w	ip, #2
 800c3f4:	d003      	beq.n	800c3fe <st_int8_copy+0xda>
 800c3f6:	f830 3b02 	ldrh.w	r3, [r0], #2
 800c3fa:	f821 3b02 	strh.w	r3, [r1], #2
 800c3fe:	f01c 0f01 	tst.w	ip, #1
 800c402:	d001      	beq.n	800c408 <st_int8_copy+0xe4>
 800c404:	7803      	ldrb	r3, [r0, #0]
 800c406:	700b      	strb	r3, [r1, #0]
 800c408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c40c:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800c410:	d00e      	beq.n	800c430 <st_int8_copy+0x10c>
 800c412:	4688      	mov	r8, r1
 800c414:	4686      	mov	lr, r0
 800c416:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c41a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c41e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c422:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c426:	f1b9 0901 	subs.w	r9, r9, #1
 800c42a:	4641      	mov	r1, r8
 800c42c:	4670      	mov	r0, lr
 800c42e:	d1f0      	bne.n	800c412 <st_int8_copy+0xee>
 800c430:	f01c 0f20 	tst.w	ip, #32
 800c434:	d007      	beq.n	800c446 <st_int8_copy+0x122>
 800c436:	4688      	mov	r8, r1
 800c438:	4686      	mov	lr, r0
 800c43a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c43e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c442:	4641      	mov	r1, r8
 800c444:	4670      	mov	r0, lr
 800c446:	f01c 0f10 	tst.w	ip, #16
 800c44a:	d001      	beq.n	800c450 <st_int8_copy+0x12c>
 800c44c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800c44e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c450:	f01c 0f08 	tst.w	ip, #8
 800c454:	d0c5      	beq.n	800c3e2 <st_int8_copy+0xbe>
 800c456:	c818      	ldmia	r0!, {r3, r4}
 800c458:	c118      	stmia	r1!, {r3, r4}
 800c45a:	e7c2      	b.n	800c3e2 <st_int8_copy+0xbe>
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop

0800c460 <ai_array_to_buffer_fmt>:
 800c460:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c464:	2b02      	cmp	r3, #2
 800c466:	d055      	beq.n	800c514 <ai_array_to_buffer_fmt+0xb4>
 800c468:	4a2d      	ldr	r2, [pc, #180]	@ (800c520 <ai_array_to_buffer_fmt+0xc0>)
 800c46a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800c46e:	4293      	cmp	r3, r2
 800c470:	d010      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c472:	dc21      	bgt.n	800c4b8 <ai_array_to_buffer_fmt+0x58>
 800c474:	4a2b      	ldr	r2, [pc, #172]	@ (800c524 <ai_array_to_buffer_fmt+0xc4>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d00c      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c47a:	dd0f      	ble.n	800c49c <ai_array_to_buffer_fmt+0x3c>
 800c47c:	4a2a      	ldr	r2, [pc, #168]	@ (800c528 <ai_array_to_buffer_fmt+0xc8>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d008      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c482:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800c486:	4293      	cmp	r3, r2
 800c488:	d004      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c48a:	4a28      	ldr	r2, [pc, #160]	@ (800c52c <ai_array_to_buffer_fmt+0xcc>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	bf0c      	ite	eq
 800c490:	4613      	moveq	r3, r2
 800c492:	2340      	movne	r3, #64	@ 0x40
 800c494:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c498:	4318      	orrs	r0, r3
 800c49a:	4770      	bx	lr
 800c49c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d0f7      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c4a4:	dd2c      	ble.n	800c500 <ai_array_to_buffer_fmt+0xa0>
 800c4a6:	4a22      	ldr	r2, [pc, #136]	@ (800c530 <ai_array_to_buffer_fmt+0xd0>)
 800c4a8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	bf0c      	ite	eq
 800c4b0:	4613      	moveq	r3, r2
 800c4b2:	2340      	movne	r3, #64	@ 0x40
 800c4b4:	4318      	orrs	r0, r3
 800c4b6:	4770      	bx	lr
 800c4b8:	4a1e      	ldr	r2, [pc, #120]	@ (800c534 <ai_array_to_buffer_fmt+0xd4>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d0ea      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c4be:	dd10      	ble.n	800c4e2 <ai_array_to_buffer_fmt+0x82>
 800c4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c538 <ai_array_to_buffer_fmt+0xd8>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d0e6      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c4c6:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d0e2      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c4ce:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	bf0c      	ite	eq
 800c4d6:	4613      	moveq	r3, r2
 800c4d8:	2340      	movne	r3, #64	@ 0x40
 800c4da:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c4de:	4318      	orrs	r0, r3
 800c4e0:	4770      	bx	lr
 800c4e2:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d0d4      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c4ea:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d0d0      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c4f2:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	bf0c      	ite	eq
 800c4fa:	4613      	moveq	r3, r2
 800c4fc:	2340      	movne	r3, #64	@ 0x40
 800c4fe:	e7c9      	b.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c500:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c504:	4293      	cmp	r3, r2
 800c506:	d0c5      	beq.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c508:	3280      	adds	r2, #128	@ 0x80
 800c50a:	4293      	cmp	r3, r2
 800c50c:	bf0c      	ite	eq
 800c50e:	4613      	moveq	r3, r2
 800c510:	2340      	movne	r3, #64	@ 0x40
 800c512:	e7bf      	b.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c514:	4b09      	ldr	r3, [pc, #36]	@ (800c53c <ai_array_to_buffer_fmt+0xdc>)
 800c516:	4003      	ands	r3, r0
 800c518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c51c:	e7ba      	b.n	800c494 <ai_array_to_buffer_fmt+0x34>
 800c51e:	bf00      	nop
 800c520:	00821040 	.word	0x00821040
 800c524:	00040840 	.word	0x00040840
 800c528:	00041040 	.word	0x00041040
 800c52c:	0004084f 	.word	0x0004084f
 800c530:	00040447 	.word	0x00040447
 800c534:	00840447 	.word	0x00840447
 800c538:	0084084f 	.word	0x0084084f
 800c53c:	00803fff 	.word	0x00803fff

0800c540 <ai_array_get_data_byte_size>:
 800c540:	b161      	cbz	r1, 800c55c <ai_array_get_data_byte_size+0x1c>
 800c542:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c546:	fb03 f101 	mul.w	r1, r3, r1
 800c54a:	f3c0 5341 	ubfx	r3, r0, #21, #2
 800c54e:	1dc8      	adds	r0, r1, #7
 800c550:	f020 0007 	bic.w	r0, r0, #7
 800c554:	40d8      	lsrs	r0, r3
 800c556:	3007      	adds	r0, #7
 800c558:	08c0      	lsrs	r0, r0, #3
 800c55a:	4770      	bx	lr
 800c55c:	4608      	mov	r0, r1
 800c55e:	4770      	bx	lr

0800c560 <ai_version_get>:
 800c560:	0212      	lsls	r2, r2, #8
 800c562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c566:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c56a:	4770      	bx	lr

0800c56c <ai_platform_version_get>:
 800c56c:	2300      	movs	r3, #0
 800c56e:	0e02      	lsrs	r2, r0, #24
 800c570:	f362 0307 	bfi	r3, r2, #0, #8
 800c574:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800c578:	f362 230f 	bfi	r3, r2, #8, #8
 800c57c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c580:	f360 4317 	bfi	r3, r0, #16, #8
 800c584:	b082      	sub	sp, #8
 800c586:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 800c58a:	b002      	add	sp, #8
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop

0800c590 <get_tensor_byte_size>:
 800c590:	b410      	push	{r4}
 800c592:	68c4      	ldr	r4, [r0, #12]
 800c594:	6941      	ldr	r1, [r0, #20]
 800c596:	6983      	ldr	r3, [r0, #24]
 800c598:	68c9      	ldr	r1, [r1, #12]
 800c59a:	68e0      	ldr	r0, [r4, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	fb01 f000 	mul.w	r0, r1, r0
 800c5a2:	4a06      	ldr	r2, [pc, #24]	@ (800c5bc <get_tensor_byte_size+0x2c>)
 800c5a4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c5a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	bf04      	itt	eq
 800c5b0:	3007      	addeq	r0, #7
 800c5b2:	08c0      	lsreq	r0, r0, #3
 800c5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	000400c0 	.word	0x000400c0

0800c5c0 <expf>:
 800c5c0:	b508      	push	{r3, lr}
 800c5c2:	ed2d 8b02 	vpush	{d8}
 800c5c6:	eef0 8a40 	vmov.f32	s17, s0
 800c5ca:	f000 f881 	bl	800c6d0 <__ieee754_expf>
 800c5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800c5d2:	eeb0 0a68 	vmov.f32	s0, s17
 800c5d6:	f000 f847 	bl	800c668 <finitef>
 800c5da:	b160      	cbz	r0, 800c5f6 <expf+0x36>
 800c5dc:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c61c <expf+0x5c>
 800c5e0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e8:	dd0a      	ble.n	800c600 <expf+0x40>
 800c5ea:	f001 f891 	bl	800d710 <__errno>
 800c5ee:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c620 <expf+0x60>
 800c5f2:	2322      	movs	r3, #34	@ 0x22
 800c5f4:	6003      	str	r3, [r0, #0]
 800c5f6:	eeb0 0a48 	vmov.f32	s0, s16
 800c5fa:	ecbd 8b02 	vpop	{d8}
 800c5fe:	bd08      	pop	{r3, pc}
 800c600:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c624 <expf+0x64>
 800c604:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60c:	d5f3      	bpl.n	800c5f6 <expf+0x36>
 800c60e:	f001 f87f 	bl	800d710 <__errno>
 800c612:	2322      	movs	r3, #34	@ 0x22
 800c614:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c628 <expf+0x68>
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	e7ec      	b.n	800c5f6 <expf+0x36>
 800c61c:	42b17217 	.word	0x42b17217
 800c620:	7f800000 	.word	0x7f800000
 800c624:	c2cff1b5 	.word	0xc2cff1b5
 800c628:	00000000 	.word	0x00000000

0800c62c <sqrtf>:
 800c62c:	b508      	push	{r3, lr}
 800c62e:	ed2d 8b02 	vpush	{d8}
 800c632:	eeb0 8a40 	vmov.f32	s16, s0
 800c636:	f000 f847 	bl	800c6c8 <__ieee754_sqrtf>
 800c63a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c642:	d60c      	bvs.n	800c65e <sqrtf+0x32>
 800c644:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c664 <sqrtf+0x38>
 800c648:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c650:	d505      	bpl.n	800c65e <sqrtf+0x32>
 800c652:	f001 f85d 	bl	800d710 <__errno>
 800c656:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c65a:	2321      	movs	r3, #33	@ 0x21
 800c65c:	6003      	str	r3, [r0, #0]
 800c65e:	ecbd 8b02 	vpop	{d8}
 800c662:	bd08      	pop	{r3, pc}
 800c664:	00000000 	.word	0x00000000

0800c668 <finitef>:
 800c668:	ee10 3a10 	vmov	r3, s0
 800c66c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c670:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c674:	bfac      	ite	ge
 800c676:	2000      	movge	r0, #0
 800c678:	2001      	movlt	r0, #1
 800c67a:	4770      	bx	lr

0800c67c <with_errnof>:
 800c67c:	b510      	push	{r4, lr}
 800c67e:	ed2d 8b02 	vpush	{d8}
 800c682:	eeb0 8a40 	vmov.f32	s16, s0
 800c686:	4604      	mov	r4, r0
 800c688:	f001 f842 	bl	800d710 <__errno>
 800c68c:	6004      	str	r4, [r0, #0]
 800c68e:	eeb0 0a48 	vmov.f32	s0, s16
 800c692:	ecbd 8b02 	vpop	{d8}
 800c696:	bd10      	pop	{r4, pc}

0800c698 <xflowf>:
 800c698:	b130      	cbz	r0, 800c6a8 <xflowf+0x10>
 800c69a:	eef1 7a40 	vneg.f32	s15, s0
 800c69e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c6a2:	2022      	movs	r0, #34	@ 0x22
 800c6a4:	f7ff bfea 	b.w	800c67c <with_errnof>
 800c6a8:	eef0 7a40 	vmov.f32	s15, s0
 800c6ac:	e7f7      	b.n	800c69e <xflowf+0x6>
	...

0800c6b0 <__math_uflowf>:
 800c6b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c6b8 <__math_uflowf+0x8>
 800c6b4:	f7ff bff0 	b.w	800c698 <xflowf>
 800c6b8:	10000000 	.word	0x10000000

0800c6bc <__math_oflowf>:
 800c6bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c6c4 <__math_oflowf+0x8>
 800c6c0:	f7ff bfea 	b.w	800c698 <xflowf>
 800c6c4:	70000000 	.word	0x70000000

0800c6c8 <__ieee754_sqrtf>:
 800c6c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c6cc:	4770      	bx	lr
	...

0800c6d0 <__ieee754_expf>:
 800c6d0:	ee10 2a10 	vmov	r2, s0
 800c6d4:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c6d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c6dc:	d902      	bls.n	800c6e4 <__ieee754_expf+0x14>
 800c6de:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6e2:	4770      	bx	lr
 800c6e4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c6e8:	d105      	bne.n	800c6f6 <__ieee754_expf+0x26>
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c824 <__ieee754_expf+0x154>
 800c6f0:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800c6f4:	4770      	bx	lr
 800c6f6:	484c      	ldr	r0, [pc, #304]	@ (800c828 <__ieee754_expf+0x158>)
 800c6f8:	4282      	cmp	r2, r0
 800c6fa:	dd02      	ble.n	800c702 <__ieee754_expf+0x32>
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f7ff bfdd 	b.w	800c6bc <__math_oflowf>
 800c702:	2a00      	cmp	r2, #0
 800c704:	da05      	bge.n	800c712 <__ieee754_expf+0x42>
 800c706:	4a49      	ldr	r2, [pc, #292]	@ (800c82c <__ieee754_expf+0x15c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d902      	bls.n	800c712 <__ieee754_expf+0x42>
 800c70c:	2000      	movs	r0, #0
 800c70e:	f7ff bfcf 	b.w	800c6b0 <__math_uflowf>
 800c712:	4a47      	ldr	r2, [pc, #284]	@ (800c830 <__ieee754_expf+0x160>)
 800c714:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c718:	4293      	cmp	r3, r2
 800c71a:	d952      	bls.n	800c7c2 <__ieee754_expf+0xf2>
 800c71c:	4a45      	ldr	r2, [pc, #276]	@ (800c834 <__ieee754_expf+0x164>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c724:	d834      	bhi.n	800c790 <__ieee754_expf+0xc0>
 800c726:	4b44      	ldr	r3, [pc, #272]	@ (800c838 <__ieee754_expf+0x168>)
 800c728:	4413      	add	r3, r2
 800c72a:	ed93 7a00 	vldr	s14, [r3]
 800c72e:	4b43      	ldr	r3, [pc, #268]	@ (800c83c <__ieee754_expf+0x16c>)
 800c730:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c734:	4413      	add	r3, r2
 800c736:	f081 0201 	eor.w	r2, r1, #1
 800c73a:	edd3 7a00 	vldr	s15, [r3]
 800c73e:	1a52      	subs	r2, r2, r1
 800c740:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c744:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c748:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c840 <__ieee754_expf+0x170>
 800c74c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c844 <__ieee754_expf+0x174>
 800c750:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c754:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c848 <__ieee754_expf+0x178>
 800c758:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c75c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c84c <__ieee754_expf+0x17c>
 800c760:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c764:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c850 <__ieee754_expf+0x180>
 800c768:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c76c:	eef0 6a40 	vmov.f32	s13, s0
 800c770:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c774:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c778:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c77c:	bb92      	cbnz	r2, 800c7e4 <__ieee754_expf+0x114>
 800c77e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c782:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c786:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c78a:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c78e:	4770      	bx	lr
 800c790:	4b30      	ldr	r3, [pc, #192]	@ (800c854 <__ieee754_expf+0x184>)
 800c792:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c858 <__ieee754_expf+0x188>
 800c796:	4413      	add	r3, r2
 800c798:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c85c <__ieee754_expf+0x18c>
 800c79c:	edd3 7a00 	vldr	s15, [r3]
 800c7a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c7a4:	eeb0 7a40 	vmov.f32	s14, s0
 800c7a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7ac:	ee17 2a90 	vmov	r2, s15
 800c7b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7b4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c7b8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c860 <__ieee754_expf+0x190>
 800c7bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7c0:	e7be      	b.n	800c740 <__ieee754_expf+0x70>
 800c7c2:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c7c6:	d20b      	bcs.n	800c7e0 <__ieee754_expf+0x110>
 800c7c8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c864 <__ieee754_expf+0x194>
 800c7cc:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c7d0:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d8:	dd02      	ble.n	800c7e0 <__ieee754_expf+0x110>
 800c7da:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c7de:	4770      	bx	lr
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	e7af      	b.n	800c744 <__ieee754_expf+0x74>
 800c7e4:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c7e8:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c7ec:	bfb8      	it	lt
 800c7ee:	3264      	addlt	r2, #100	@ 0x64
 800c7f0:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c7f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7fc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c800:	ee17 3a90 	vmov	r3, s15
 800c804:	bfb5      	itete	lt
 800c806:	eddf 7a18 	vldrlt	s15, [pc, #96]	@ 800c868 <__ieee754_expf+0x198>
 800c80a:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c80e:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c812:	ee00 3a10 	vmovge	s0, r3
 800c816:	bfbc      	itt	lt
 800c818:	ee00 3a10 	vmovlt	s0, r3
 800c81c:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	00000000 	.word	0x00000000
 800c828:	42b17217 	.word	0x42b17217
 800c82c:	42cff1b5 	.word	0x42cff1b5
 800c830:	3eb17218 	.word	0x3eb17218
 800c834:	3f851591 	.word	0x3f851591
 800c838:	0801e5a0 	.word	0x0801e5a0
 800c83c:	0801e598 	.word	0x0801e598
 800c840:	3331bb4c 	.word	0x3331bb4c
 800c844:	b5ddea0e 	.word	0xb5ddea0e
 800c848:	388ab355 	.word	0x388ab355
 800c84c:	bb360b61 	.word	0xbb360b61
 800c850:	3e2aaaab 	.word	0x3e2aaaab
 800c854:	0801e5a8 	.word	0x0801e5a8
 800c858:	3fb8aa3b 	.word	0x3fb8aa3b
 800c85c:	3f317180 	.word	0x3f317180
 800c860:	3717f7d1 	.word	0x3717f7d1
 800c864:	7149f2ca 	.word	0x7149f2ca
 800c868:	0d800000 	.word	0x0d800000

0800c86c <malloc>:
 800c86c:	4b02      	ldr	r3, [pc, #8]	@ (800c878 <malloc+0xc>)
 800c86e:	4601      	mov	r1, r0
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	f000 b825 	b.w	800c8c0 <_malloc_r>
 800c876:	bf00      	nop
 800c878:	20000f88 	.word	0x20000f88

0800c87c <sbrk_aligned>:
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	4e0f      	ldr	r6, [pc, #60]	@ (800c8bc <sbrk_aligned+0x40>)
 800c880:	460c      	mov	r4, r1
 800c882:	4605      	mov	r5, r0
 800c884:	6831      	ldr	r1, [r6, #0]
 800c886:	b911      	cbnz	r1, 800c88e <sbrk_aligned+0x12>
 800c888:	f000 ff20 	bl	800d6cc <_sbrk_r>
 800c88c:	6030      	str	r0, [r6, #0]
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	f000 ff1b 	bl	800d6cc <_sbrk_r>
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	d103      	bne.n	800c8a2 <sbrk_aligned+0x26>
 800c89a:	f04f 34ff 	mov.w	r4, #4294967295
 800c89e:	4620      	mov	r0, r4
 800c8a0:	bd70      	pop	{r4, r5, r6, pc}
 800c8a2:	1cc4      	adds	r4, r0, #3
 800c8a4:	f024 0403 	bic.w	r4, r4, #3
 800c8a8:	42a0      	cmp	r0, r4
 800c8aa:	d0f8      	beq.n	800c89e <sbrk_aligned+0x22>
 800c8ac:	1a21      	subs	r1, r4, r0
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	f000 ff0c 	bl	800d6cc <_sbrk_r>
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d1f2      	bne.n	800c89e <sbrk_aligned+0x22>
 800c8b8:	e7ef      	b.n	800c89a <sbrk_aligned+0x1e>
 800c8ba:	bf00      	nop
 800c8bc:	2007af70 	.word	0x2007af70

0800c8c0 <_malloc_r>:
 800c8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	1ccd      	adds	r5, r1, #3
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	f025 0503 	bic.w	r5, r5, #3
 800c8cc:	3508      	adds	r5, #8
 800c8ce:	2d0c      	cmp	r5, #12
 800c8d0:	bf38      	it	cc
 800c8d2:	250c      	movcc	r5, #12
 800c8d4:	2d00      	cmp	r5, #0
 800c8d6:	db01      	blt.n	800c8dc <_malloc_r+0x1c>
 800c8d8:	42a9      	cmp	r1, r5
 800c8da:	d904      	bls.n	800c8e6 <_malloc_r+0x26>
 800c8dc:	230c      	movs	r3, #12
 800c8de:	6033      	str	r3, [r6, #0]
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9bc <_malloc_r+0xfc>
 800c8ea:	f000 f869 	bl	800c9c0 <__malloc_lock>
 800c8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c8f2:	461c      	mov	r4, r3
 800c8f4:	bb44      	cbnz	r4, 800c948 <_malloc_r+0x88>
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7ff ffbf 	bl	800c87c <sbrk_aligned>
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	4604      	mov	r4, r0
 800c902:	d158      	bne.n	800c9b6 <_malloc_r+0xf6>
 800c904:	f8d8 4000 	ldr.w	r4, [r8]
 800c908:	4627      	mov	r7, r4
 800c90a:	2f00      	cmp	r7, #0
 800c90c:	d143      	bne.n	800c996 <_malloc_r+0xd6>
 800c90e:	2c00      	cmp	r4, #0
 800c910:	d04b      	beq.n	800c9aa <_malloc_r+0xea>
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	4639      	mov	r1, r7
 800c916:	4630      	mov	r0, r6
 800c918:	eb04 0903 	add.w	r9, r4, r3
 800c91c:	f000 fed6 	bl	800d6cc <_sbrk_r>
 800c920:	4581      	cmp	r9, r0
 800c922:	d142      	bne.n	800c9aa <_malloc_r+0xea>
 800c924:	6821      	ldr	r1, [r4, #0]
 800c926:	4630      	mov	r0, r6
 800c928:	1a6d      	subs	r5, r5, r1
 800c92a:	4629      	mov	r1, r5
 800c92c:	f7ff ffa6 	bl	800c87c <sbrk_aligned>
 800c930:	3001      	adds	r0, #1
 800c932:	d03a      	beq.n	800c9aa <_malloc_r+0xea>
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	442b      	add	r3, r5
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	f8d8 3000 	ldr.w	r3, [r8]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	bb62      	cbnz	r2, 800c99c <_malloc_r+0xdc>
 800c942:	f8c8 7000 	str.w	r7, [r8]
 800c946:	e00f      	b.n	800c968 <_malloc_r+0xa8>
 800c948:	6822      	ldr	r2, [r4, #0]
 800c94a:	1b52      	subs	r2, r2, r5
 800c94c:	d420      	bmi.n	800c990 <_malloc_r+0xd0>
 800c94e:	2a0b      	cmp	r2, #11
 800c950:	d917      	bls.n	800c982 <_malloc_r+0xc2>
 800c952:	1961      	adds	r1, r4, r5
 800c954:	42a3      	cmp	r3, r4
 800c956:	6025      	str	r5, [r4, #0]
 800c958:	bf18      	it	ne
 800c95a:	6059      	strne	r1, [r3, #4]
 800c95c:	6863      	ldr	r3, [r4, #4]
 800c95e:	bf08      	it	eq
 800c960:	f8c8 1000 	streq.w	r1, [r8]
 800c964:	5162      	str	r2, [r4, r5]
 800c966:	604b      	str	r3, [r1, #4]
 800c968:	4630      	mov	r0, r6
 800c96a:	f000 f82f 	bl	800c9cc <__malloc_unlock>
 800c96e:	f104 000b 	add.w	r0, r4, #11
 800c972:	1d23      	adds	r3, r4, #4
 800c974:	f020 0007 	bic.w	r0, r0, #7
 800c978:	1ac2      	subs	r2, r0, r3
 800c97a:	bf1c      	itt	ne
 800c97c:	1a1b      	subne	r3, r3, r0
 800c97e:	50a3      	strne	r3, [r4, r2]
 800c980:	e7af      	b.n	800c8e2 <_malloc_r+0x22>
 800c982:	6862      	ldr	r2, [r4, #4]
 800c984:	42a3      	cmp	r3, r4
 800c986:	bf0c      	ite	eq
 800c988:	f8c8 2000 	streq.w	r2, [r8]
 800c98c:	605a      	strne	r2, [r3, #4]
 800c98e:	e7eb      	b.n	800c968 <_malloc_r+0xa8>
 800c990:	4623      	mov	r3, r4
 800c992:	6864      	ldr	r4, [r4, #4]
 800c994:	e7ae      	b.n	800c8f4 <_malloc_r+0x34>
 800c996:	463c      	mov	r4, r7
 800c998:	687f      	ldr	r7, [r7, #4]
 800c99a:	e7b6      	b.n	800c90a <_malloc_r+0x4a>
 800c99c:	461a      	mov	r2, r3
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	d1fb      	bne.n	800c99c <_malloc_r+0xdc>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6053      	str	r3, [r2, #4]
 800c9a8:	e7de      	b.n	800c968 <_malloc_r+0xa8>
 800c9aa:	230c      	movs	r3, #12
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	6033      	str	r3, [r6, #0]
 800c9b0:	f000 f80c 	bl	800c9cc <__malloc_unlock>
 800c9b4:	e794      	b.n	800c8e0 <_malloc_r+0x20>
 800c9b6:	6005      	str	r5, [r0, #0]
 800c9b8:	e7d6      	b.n	800c968 <_malloc_r+0xa8>
 800c9ba:	bf00      	nop
 800c9bc:	2007af74 	.word	0x2007af74

0800c9c0 <__malloc_lock>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	@ (800c9c8 <__malloc_lock+0x8>)
 800c9c2:	f000 bed0 	b.w	800d766 <__retarget_lock_acquire_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	2007b0b8 	.word	0x2007b0b8

0800c9cc <__malloc_unlock>:
 800c9cc:	4801      	ldr	r0, [pc, #4]	@ (800c9d4 <__malloc_unlock+0x8>)
 800c9ce:	f000 becb 	b.w	800d768 <__retarget_lock_release_recursive>
 800c9d2:	bf00      	nop
 800c9d4:	2007b0b8 	.word	0x2007b0b8

0800c9d8 <_realloc_r>:
 800c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9dc:	4607      	mov	r7, r0
 800c9de:	4614      	mov	r4, r2
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	b921      	cbnz	r1, 800c9ee <_realloc_r+0x16>
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ea:	f7ff bf69 	b.w	800c8c0 <_malloc_r>
 800c9ee:	b92a      	cbnz	r2, 800c9fc <_realloc_r+0x24>
 800c9f0:	4625      	mov	r5, r4
 800c9f2:	f001 fd37 	bl	800e464 <_free_r>
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9fc:	f002 f8fe 	bl	800ebfc <_malloc_usable_size_r>
 800ca00:	4284      	cmp	r4, r0
 800ca02:	4606      	mov	r6, r0
 800ca04:	d802      	bhi.n	800ca0c <_realloc_r+0x34>
 800ca06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca0a:	d8f4      	bhi.n	800c9f6 <_realloc_r+0x1e>
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	4638      	mov	r0, r7
 800ca10:	f7ff ff56 	bl	800c8c0 <_malloc_r>
 800ca14:	4680      	mov	r8, r0
 800ca16:	b908      	cbnz	r0, 800ca1c <_realloc_r+0x44>
 800ca18:	4645      	mov	r5, r8
 800ca1a:	e7ec      	b.n	800c9f6 <_realloc_r+0x1e>
 800ca1c:	42b4      	cmp	r4, r6
 800ca1e:	4622      	mov	r2, r4
 800ca20:	4629      	mov	r1, r5
 800ca22:	bf28      	it	cs
 800ca24:	4632      	movcs	r2, r6
 800ca26:	f000 feae 	bl	800d786 <memcpy>
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f001 fd19 	bl	800e464 <_free_r>
 800ca32:	e7f1      	b.n	800ca18 <_realloc_r+0x40>

0800ca34 <__cvt>:
 800ca34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca38:	ec57 6b10 	vmov	r6, r7, d0
 800ca3c:	2f00      	cmp	r7, #0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	4619      	mov	r1, r3
 800ca42:	463b      	mov	r3, r7
 800ca44:	bfb4      	ite	lt
 800ca46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ca4a:	2300      	movge	r3, #0
 800ca4c:	4691      	mov	r9, r2
 800ca4e:	bfbf      	itttt	lt
 800ca50:	4632      	movlt	r2, r6
 800ca52:	461f      	movlt	r7, r3
 800ca54:	232d      	movlt	r3, #45	@ 0x2d
 800ca56:	4616      	movlt	r6, r2
 800ca58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ca5c:	700b      	strb	r3, [r1, #0]
 800ca5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca60:	f023 0820 	bic.w	r8, r3, #32
 800ca64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca68:	d005      	beq.n	800ca76 <__cvt+0x42>
 800ca6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ca6e:	d100      	bne.n	800ca72 <__cvt+0x3e>
 800ca70:	3401      	adds	r4, #1
 800ca72:	2102      	movs	r1, #2
 800ca74:	e000      	b.n	800ca78 <__cvt+0x44>
 800ca76:	2103      	movs	r1, #3
 800ca78:	ab03      	add	r3, sp, #12
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	ab02      	add	r3, sp, #8
 800ca80:	ec47 6b10 	vmov	d0, r6, r7
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	4653      	mov	r3, sl
 800ca88:	f000 ff1a 	bl	800d8c0 <_dtoa_r>
 800ca8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca90:	4605      	mov	r5, r0
 800ca92:	d119      	bne.n	800cac8 <__cvt+0x94>
 800ca94:	f019 0f01 	tst.w	r9, #1
 800ca98:	d00e      	beq.n	800cab8 <__cvt+0x84>
 800ca9a:	eb00 0904 	add.w	r9, r0, r4
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2300      	movs	r3, #0
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f4 f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 800caaa:	b108      	cbz	r0, 800cab0 <__cvt+0x7c>
 800caac:	f8cd 900c 	str.w	r9, [sp, #12]
 800cab0:	2230      	movs	r2, #48	@ 0x30
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	454b      	cmp	r3, r9
 800cab6:	d31e      	bcc.n	800caf6 <__cvt+0xc2>
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	4628      	mov	r0, r5
 800cabc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cabe:	1b5b      	subs	r3, r3, r5
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	b004      	add	sp, #16
 800cac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cacc:	eb00 0904 	add.w	r9, r0, r4
 800cad0:	d1e5      	bne.n	800ca9e <__cvt+0x6a>
 800cad2:	7803      	ldrb	r3, [r0, #0]
 800cad4:	2b30      	cmp	r3, #48	@ 0x30
 800cad6:	d10a      	bne.n	800caee <__cvt+0xba>
 800cad8:	2200      	movs	r2, #0
 800cada:	2300      	movs	r3, #0
 800cadc:	4630      	mov	r0, r6
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f4 f802 	bl	8000ae8 <__aeabi_dcmpeq>
 800cae4:	b918      	cbnz	r0, 800caee <__cvt+0xba>
 800cae6:	f1c4 0401 	rsb	r4, r4, #1
 800caea:	f8ca 4000 	str.w	r4, [sl]
 800caee:	f8da 3000 	ldr.w	r3, [sl]
 800caf2:	4499      	add	r9, r3
 800caf4:	e7d3      	b.n	800ca9e <__cvt+0x6a>
 800caf6:	1c59      	adds	r1, r3, #1
 800caf8:	9103      	str	r1, [sp, #12]
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	e7d9      	b.n	800cab2 <__cvt+0x7e>

0800cafe <__exponent>:
 800cafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb00:	2900      	cmp	r1, #0
 800cb02:	7002      	strb	r2, [r0, #0]
 800cb04:	bfba      	itte	lt
 800cb06:	4249      	neglt	r1, r1
 800cb08:	232d      	movlt	r3, #45	@ 0x2d
 800cb0a:	232b      	movge	r3, #43	@ 0x2b
 800cb0c:	2909      	cmp	r1, #9
 800cb0e:	7043      	strb	r3, [r0, #1]
 800cb10:	dd28      	ble.n	800cb64 <__exponent+0x66>
 800cb12:	f10d 0307 	add.w	r3, sp, #7
 800cb16:	270a      	movs	r7, #10
 800cb18:	461d      	mov	r5, r3
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	fbb1 f6f7 	udiv	r6, r1, r7
 800cb22:	fb07 1416 	mls	r4, r7, r6, r1
 800cb26:	3430      	adds	r4, #48	@ 0x30
 800cb28:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb2c:	460c      	mov	r4, r1
 800cb2e:	4631      	mov	r1, r6
 800cb30:	2c63      	cmp	r4, #99	@ 0x63
 800cb32:	dcf2      	bgt.n	800cb1a <__exponent+0x1c>
 800cb34:	3130      	adds	r1, #48	@ 0x30
 800cb36:	1e94      	subs	r4, r2, #2
 800cb38:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb3c:	1c41      	adds	r1, r0, #1
 800cb3e:	4623      	mov	r3, r4
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	d30a      	bcc.n	800cb5a <__exponent+0x5c>
 800cb44:	f10d 0309 	add.w	r3, sp, #9
 800cb48:	1a9b      	subs	r3, r3, r2
 800cb4a:	42ac      	cmp	r4, r5
 800cb4c:	bf88      	it	hi
 800cb4e:	2300      	movhi	r3, #0
 800cb50:	3302      	adds	r3, #2
 800cb52:	4403      	add	r3, r0
 800cb54:	1a18      	subs	r0, r3, r0
 800cb56:	b003      	add	sp, #12
 800cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cb5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cb62:	e7ed      	b.n	800cb40 <__exponent+0x42>
 800cb64:	2330      	movs	r3, #48	@ 0x30
 800cb66:	3130      	adds	r1, #48	@ 0x30
 800cb68:	7083      	strb	r3, [r0, #2]
 800cb6a:	1d03      	adds	r3, r0, #4
 800cb6c:	70c1      	strb	r1, [r0, #3]
 800cb6e:	e7f1      	b.n	800cb54 <__exponent+0x56>

0800cb70 <_printf_float>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	b08d      	sub	sp, #52	@ 0x34
 800cb76:	460c      	mov	r4, r1
 800cb78:	4616      	mov	r6, r2
 800cb7a:	461f      	mov	r7, r3
 800cb7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cb80:	4605      	mov	r5, r0
 800cb82:	f000 fd0d 	bl	800d5a0 <_localeconv_r>
 800cb86:	6803      	ldr	r3, [r0, #0]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	9304      	str	r3, [sp, #16]
 800cb8c:	f7f3 fb80 	bl	8000290 <strlen>
 800cb90:	2300      	movs	r3, #0
 800cb92:	9005      	str	r0, [sp, #20]
 800cb94:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb96:	f8d8 3000 	ldr.w	r3, [r8]
 800cb9a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cb9e:	3307      	adds	r3, #7
 800cba0:	f8d4 b000 	ldr.w	fp, [r4]
 800cba4:	f023 0307 	bic.w	r3, r3, #7
 800cba8:	f103 0208 	add.w	r2, r3, #8
 800cbac:	f8c8 2000 	str.w	r2, [r8]
 800cbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cbbc:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbc0:	9307      	str	r3, [sp, #28]
 800cbc2:	4b9d      	ldr	r3, [pc, #628]	@ (800ce38 <_printf_float+0x2c8>)
 800cbc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cbcc:	f7f3 ffbe 	bl	8000b4c <__aeabi_dcmpun>
 800cbd0:	bb70      	cbnz	r0, 800cc30 <_printf_float+0xc0>
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	4b98      	ldr	r3, [pc, #608]	@ (800ce38 <_printf_float+0x2c8>)
 800cbd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbdc:	f7f3 ff98 	bl	8000b10 <__aeabi_dcmple>
 800cbe0:	bb30      	cbnz	r0, 800cc30 <_printf_float+0xc0>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 ff87 	bl	8000afc <__aeabi_dcmplt>
 800cbee:	b110      	cbz	r0, 800cbf6 <_printf_float+0x86>
 800cbf0:	232d      	movs	r3, #45	@ 0x2d
 800cbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbf6:	4a91      	ldr	r2, [pc, #580]	@ (800ce3c <_printf_float+0x2cc>)
 800cbf8:	4b91      	ldr	r3, [pc, #580]	@ (800ce40 <_printf_float+0x2d0>)
 800cbfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cbfe:	bf8c      	ite	hi
 800cc00:	4690      	movhi	r8, r2
 800cc02:	4698      	movls	r8, r3
 800cc04:	2303      	movs	r3, #3
 800cc06:	f04f 0900 	mov.w	r9, #0
 800cc0a:	6123      	str	r3, [r4, #16]
 800cc0c:	f02b 0304 	bic.w	r3, fp, #4
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	4633      	mov	r3, r6
 800cc14:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cc16:	4621      	mov	r1, r4
 800cc18:	4628      	mov	r0, r5
 800cc1a:	9700      	str	r7, [sp, #0]
 800cc1c:	f000 f9d2 	bl	800cfc4 <_printf_common>
 800cc20:	3001      	adds	r0, #1
 800cc22:	f040 808d 	bne.w	800cd40 <_printf_float+0x1d0>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2a:	b00d      	add	sp, #52	@ 0x34
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ff88 	bl	8000b4c <__aeabi_dcmpun>
 800cc3c:	b140      	cbz	r0, 800cc50 <_printf_float+0xe0>
 800cc3e:	464b      	mov	r3, r9
 800cc40:	4a80      	ldr	r2, [pc, #512]	@ (800ce44 <_printf_float+0x2d4>)
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfbc      	itt	lt
 800cc46:	232d      	movlt	r3, #45	@ 0x2d
 800cc48:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc4c:	4b7e      	ldr	r3, [pc, #504]	@ (800ce48 <_printf_float+0x2d8>)
 800cc4e:	e7d4      	b.n	800cbfa <_printf_float+0x8a>
 800cc50:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cc54:	6863      	ldr	r3, [r4, #4]
 800cc56:	9206      	str	r2, [sp, #24]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	d13b      	bne.n	800ccd4 <_printf_float+0x164>
 800cc5c:	2306      	movs	r3, #6
 800cc5e:	6063      	str	r3, [r4, #4]
 800cc60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cc64:	2300      	movs	r3, #0
 800cc66:	4628      	mov	r0, r5
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	9303      	str	r3, [sp, #12]
 800cc6c:	ab0a      	add	r3, sp, #40	@ 0x28
 800cc6e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cc72:	ab09      	add	r3, sp, #36	@ 0x24
 800cc74:	ec49 8b10 	vmov	d0, r8, r9
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cc7e:	6861      	ldr	r1, [r4, #4]
 800cc80:	f7ff fed8 	bl	800ca34 <__cvt>
 800cc84:	9b06      	ldr	r3, [sp, #24]
 800cc86:	4680      	mov	r8, r0
 800cc88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc8a:	2b47      	cmp	r3, #71	@ 0x47
 800cc8c:	d129      	bne.n	800cce2 <_printf_float+0x172>
 800cc8e:	1cc8      	adds	r0, r1, #3
 800cc90:	db02      	blt.n	800cc98 <_printf_float+0x128>
 800cc92:	6863      	ldr	r3, [r4, #4]
 800cc94:	4299      	cmp	r1, r3
 800cc96:	dd41      	ble.n	800cd1c <_printf_float+0x1ac>
 800cc98:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc9c:	fa5f fa8a 	uxtb.w	sl, sl
 800cca0:	3901      	subs	r1, #1
 800cca2:	4652      	mov	r2, sl
 800cca4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cca8:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccaa:	f7ff ff28 	bl	800cafe <__exponent>
 800ccae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccb0:	4681      	mov	r9, r0
 800ccb2:	1813      	adds	r3, r2, r0
 800ccb4:	2a01      	cmp	r2, #1
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	dc02      	bgt.n	800ccc0 <_printf_float+0x150>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	07d2      	lsls	r2, r2, #31
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_float+0x154>
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	6123      	str	r3, [r4, #16]
 800ccc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0a2      	beq.n	800cc12 <_printf_float+0xa2>
 800cccc:	232d      	movs	r3, #45	@ 0x2d
 800ccce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd2:	e79e      	b.n	800cc12 <_printf_float+0xa2>
 800ccd4:	9a06      	ldr	r2, [sp, #24]
 800ccd6:	2a47      	cmp	r2, #71	@ 0x47
 800ccd8:	d1c2      	bne.n	800cc60 <_printf_float+0xf0>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1c0      	bne.n	800cc60 <_printf_float+0xf0>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e7bd      	b.n	800cc5e <_printf_float+0xee>
 800cce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cce6:	d9db      	bls.n	800cca0 <_printf_float+0x130>
 800cce8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ccec:	d118      	bne.n	800cd20 <_printf_float+0x1b0>
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	dd0b      	ble.n	800cd0c <_printf_float+0x19c>
 800ccf4:	6121      	str	r1, [r4, #16]
 800ccf6:	b913      	cbnz	r3, 800ccfe <_printf_float+0x18e>
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	07d0      	lsls	r0, r2, #31
 800ccfc:	d502      	bpl.n	800cd04 <_printf_float+0x194>
 800ccfe:	3301      	adds	r3, #1
 800cd00:	440b      	add	r3, r1
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	f04f 0900 	mov.w	r9, #0
 800cd08:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cd0a:	e7db      	b.n	800ccc4 <_printf_float+0x154>
 800cd0c:	b913      	cbnz	r3, 800cd14 <_printf_float+0x1a4>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	07d2      	lsls	r2, r2, #31
 800cd12:	d501      	bpl.n	800cd18 <_printf_float+0x1a8>
 800cd14:	3302      	adds	r3, #2
 800cd16:	e7f4      	b.n	800cd02 <_printf_float+0x192>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e7f2      	b.n	800cd02 <_printf_float+0x192>
 800cd1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd22:	4299      	cmp	r1, r3
 800cd24:	db05      	blt.n	800cd32 <_printf_float+0x1c2>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	6121      	str	r1, [r4, #16]
 800cd2a:	07d8      	lsls	r0, r3, #31
 800cd2c:	d5ea      	bpl.n	800cd04 <_printf_float+0x194>
 800cd2e:	1c4b      	adds	r3, r1, #1
 800cd30:	e7e7      	b.n	800cd02 <_printf_float+0x192>
 800cd32:	2900      	cmp	r1, #0
 800cd34:	bfd4      	ite	le
 800cd36:	f1c1 0202 	rsble	r2, r1, #2
 800cd3a:	2201      	movgt	r2, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	e7e0      	b.n	800cd02 <_printf_float+0x192>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	055a      	lsls	r2, r3, #21
 800cd44:	d407      	bmi.n	800cd56 <_printf_float+0x1e6>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	4642      	mov	r2, r8
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	47b8      	blx	r7
 800cd50:	3001      	adds	r0, #1
 800cd52:	d12b      	bne.n	800cdac <_printf_float+0x23c>
 800cd54:	e767      	b.n	800cc26 <_printf_float+0xb6>
 800cd56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd5a:	f240 80dd 	bls.w	800cf18 <_printf_float+0x3a8>
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2300      	movs	r3, #0
 800cd62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd66:	f7f3 febf 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d033      	beq.n	800cdd6 <_printf_float+0x266>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	4a36      	ldr	r2, [pc, #216]	@ (800ce4c <_printf_float+0x2dc>)
 800cd72:	4631      	mov	r1, r6
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b8      	blx	r7
 800cd78:	3001      	adds	r0, #1
 800cd7a:	f43f af54 	beq.w	800cc26 <_printf_float+0xb6>
 800cd7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cd82:	4543      	cmp	r3, r8
 800cd84:	db02      	blt.n	800cd8c <_printf_float+0x21c>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	07d8      	lsls	r0, r3, #31
 800cd8a:	d50f      	bpl.n	800cdac <_printf_float+0x23c>
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f af45 	beq.w	800cc26 <_printf_float+0xb6>
 800cd9c:	f04f 0900 	mov.w	r9, #0
 800cda0:	f108 38ff 	add.w	r8, r8, #4294967295
 800cda4:	f104 0a1a 	add.w	sl, r4, #26
 800cda8:	45c8      	cmp	r8, r9
 800cdaa:	dc09      	bgt.n	800cdc0 <_printf_float+0x250>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	079b      	lsls	r3, r3, #30
 800cdb0:	f100 8103 	bmi.w	800cfba <_printf_float+0x44a>
 800cdb4:	68e0      	ldr	r0, [r4, #12]
 800cdb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdb8:	4298      	cmp	r0, r3
 800cdba:	bfb8      	it	lt
 800cdbc:	4618      	movlt	r0, r3
 800cdbe:	e734      	b.n	800cc2a <_printf_float+0xba>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	4652      	mov	r2, sl
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	47b8      	blx	r7
 800cdca:	3001      	adds	r0, #1
 800cdcc:	f43f af2b 	beq.w	800cc26 <_printf_float+0xb6>
 800cdd0:	f109 0901 	add.w	r9, r9, #1
 800cdd4:	e7e8      	b.n	800cda8 <_printf_float+0x238>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc39      	bgt.n	800ce50 <_printf_float+0x2e0>
 800cddc:	2301      	movs	r3, #1
 800cdde:	4a1b      	ldr	r2, [pc, #108]	@ (800ce4c <_printf_float+0x2dc>)
 800cde0:	4631      	mov	r1, r6
 800cde2:	4628      	mov	r0, r5
 800cde4:	47b8      	blx	r7
 800cde6:	3001      	adds	r0, #1
 800cde8:	f43f af1d 	beq.w	800cc26 <_printf_float+0xb6>
 800cdec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cdf0:	ea59 0303 	orrs.w	r3, r9, r3
 800cdf4:	d102      	bne.n	800cdfc <_printf_float+0x28c>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	07d9      	lsls	r1, r3, #31
 800cdfa:	d5d7      	bpl.n	800cdac <_printf_float+0x23c>
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4628      	mov	r0, r5
 800ce00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce04:	47b8      	blx	r7
 800ce06:	3001      	adds	r0, #1
 800ce08:	f43f af0d 	beq.w	800cc26 <_printf_float+0xb6>
 800ce0c:	f04f 0a00 	mov.w	sl, #0
 800ce10:	f104 0b1a 	add.w	fp, r4, #26
 800ce14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce16:	425b      	negs	r3, r3
 800ce18:	4553      	cmp	r3, sl
 800ce1a:	dc01      	bgt.n	800ce20 <_printf_float+0x2b0>
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	e793      	b.n	800cd48 <_printf_float+0x1d8>
 800ce20:	2301      	movs	r3, #1
 800ce22:	465a      	mov	r2, fp
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f43f aefb 	beq.w	800cc26 <_printf_float+0xb6>
 800ce30:	f10a 0a01 	add.w	sl, sl, #1
 800ce34:	e7ee      	b.n	800ce14 <_printf_float+0x2a4>
 800ce36:	bf00      	nop
 800ce38:	7fefffff 	.word	0x7fefffff
 800ce3c:	0801e5b4 	.word	0x0801e5b4
 800ce40:	0801e5b0 	.word	0x0801e5b0
 800ce44:	0801e5bc 	.word	0x0801e5bc
 800ce48:	0801e5b8 	.word	0x0801e5b8
 800ce4c:	0801e5c0 	.word	0x0801e5c0
 800ce50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce56:	4553      	cmp	r3, sl
 800ce58:	bfa8      	it	ge
 800ce5a:	4653      	movge	r3, sl
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	4699      	mov	r9, r3
 800ce60:	dc36      	bgt.n	800ced0 <_printf_float+0x360>
 800ce62:	f04f 0b00 	mov.w	fp, #0
 800ce66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce6a:	f104 021a 	add.w	r2, r4, #26
 800ce6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce70:	9306      	str	r3, [sp, #24]
 800ce72:	eba3 0309 	sub.w	r3, r3, r9
 800ce76:	455b      	cmp	r3, fp
 800ce78:	dc31      	bgt.n	800cede <_printf_float+0x36e>
 800ce7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce7c:	459a      	cmp	sl, r3
 800ce7e:	dc3a      	bgt.n	800cef6 <_printf_float+0x386>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	07da      	lsls	r2, r3, #31
 800ce84:	d437      	bmi.n	800cef6 <_printf_float+0x386>
 800ce86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce88:	ebaa 0903 	sub.w	r9, sl, r3
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	ebaa 0303 	sub.w	r3, sl, r3
 800ce92:	4599      	cmp	r9, r3
 800ce94:	bfa8      	it	ge
 800ce96:	4699      	movge	r9, r3
 800ce98:	f1b9 0f00 	cmp.w	r9, #0
 800ce9c:	dc33      	bgt.n	800cf06 <_printf_float+0x396>
 800ce9e:	f04f 0800 	mov.w	r8, #0
 800cea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cea6:	f104 0b1a 	add.w	fp, r4, #26
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	ebaa 0303 	sub.w	r3, sl, r3
 800ceb0:	eba3 0309 	sub.w	r3, r3, r9
 800ceb4:	4543      	cmp	r3, r8
 800ceb6:	f77f af79 	ble.w	800cdac <_printf_float+0x23c>
 800ceba:	2301      	movs	r3, #1
 800cebc:	465a      	mov	r2, fp
 800cebe:	4631      	mov	r1, r6
 800cec0:	4628      	mov	r0, r5
 800cec2:	47b8      	blx	r7
 800cec4:	3001      	adds	r0, #1
 800cec6:	f43f aeae 	beq.w	800cc26 <_printf_float+0xb6>
 800ceca:	f108 0801 	add.w	r8, r8, #1
 800cece:	e7ec      	b.n	800ceaa <_printf_float+0x33a>
 800ced0:	4642      	mov	r2, r8
 800ced2:	4631      	mov	r1, r6
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	d1c2      	bne.n	800ce62 <_printf_float+0x2f2>
 800cedc:	e6a3      	b.n	800cc26 <_printf_float+0xb6>
 800cede:	2301      	movs	r3, #1
 800cee0:	4631      	mov	r1, r6
 800cee2:	4628      	mov	r0, r5
 800cee4:	9206      	str	r2, [sp, #24]
 800cee6:	47b8      	blx	r7
 800cee8:	3001      	adds	r0, #1
 800ceea:	f43f ae9c 	beq.w	800cc26 <_printf_float+0xb6>
 800ceee:	f10b 0b01 	add.w	fp, fp, #1
 800cef2:	9a06      	ldr	r2, [sp, #24]
 800cef4:	e7bb      	b.n	800ce6e <_printf_float+0x2fe>
 800cef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefa:	4631      	mov	r1, r6
 800cefc:	4628      	mov	r0, r5
 800cefe:	47b8      	blx	r7
 800cf00:	3001      	adds	r0, #1
 800cf02:	d1c0      	bne.n	800ce86 <_printf_float+0x316>
 800cf04:	e68f      	b.n	800cc26 <_printf_float+0xb6>
 800cf06:	9a06      	ldr	r2, [sp, #24]
 800cf08:	464b      	mov	r3, r9
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	4442      	add	r2, r8
 800cf10:	47b8      	blx	r7
 800cf12:	3001      	adds	r0, #1
 800cf14:	d1c3      	bne.n	800ce9e <_printf_float+0x32e>
 800cf16:	e686      	b.n	800cc26 <_printf_float+0xb6>
 800cf18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf1c:	f1ba 0f01 	cmp.w	sl, #1
 800cf20:	dc01      	bgt.n	800cf26 <_printf_float+0x3b6>
 800cf22:	07db      	lsls	r3, r3, #31
 800cf24:	d536      	bpl.n	800cf94 <_printf_float+0x424>
 800cf26:	2301      	movs	r3, #1
 800cf28:	4642      	mov	r2, r8
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b8      	blx	r7
 800cf30:	3001      	adds	r0, #1
 800cf32:	f43f ae78 	beq.w	800cc26 <_printf_float+0xb6>
 800cf36:	4631      	mov	r1, r6
 800cf38:	4628      	mov	r0, r5
 800cf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3e:	47b8      	blx	r7
 800cf40:	3001      	adds	r0, #1
 800cf42:	f43f ae70 	beq.w	800cc26 <_printf_float+0xb6>
 800cf46:	2200      	movs	r2, #0
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf52:	f7f3 fdc9 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf56:	b9c0      	cbnz	r0, 800cf8a <_printf_float+0x41a>
 800cf58:	4653      	mov	r3, sl
 800cf5a:	f108 0201 	add.w	r2, r8, #1
 800cf5e:	4631      	mov	r1, r6
 800cf60:	4628      	mov	r0, r5
 800cf62:	47b8      	blx	r7
 800cf64:	3001      	adds	r0, #1
 800cf66:	d10c      	bne.n	800cf82 <_printf_float+0x412>
 800cf68:	e65d      	b.n	800cc26 <_printf_float+0xb6>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	465a      	mov	r2, fp
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	f43f ae56 	beq.w	800cc26 <_printf_float+0xb6>
 800cf7a:	f108 0801 	add.w	r8, r8, #1
 800cf7e:	45d0      	cmp	r8, sl
 800cf80:	dbf3      	blt.n	800cf6a <_printf_float+0x3fa>
 800cf82:	464b      	mov	r3, r9
 800cf84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf88:	e6df      	b.n	800cd4a <_printf_float+0x1da>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	f104 0b1a 	add.w	fp, r4, #26
 800cf92:	e7f4      	b.n	800cf7e <_printf_float+0x40e>
 800cf94:	2301      	movs	r3, #1
 800cf96:	4642      	mov	r2, r8
 800cf98:	e7e1      	b.n	800cf5e <_printf_float+0x3ee>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	f43f ae3e 	beq.w	800cc26 <_printf_float+0xb6>
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfb2:	1a5b      	subs	r3, r3, r1
 800cfb4:	4543      	cmp	r3, r8
 800cfb6:	dcf0      	bgt.n	800cf9a <_printf_float+0x42a>
 800cfb8:	e6fc      	b.n	800cdb4 <_printf_float+0x244>
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	f104 0919 	add.w	r9, r4, #25
 800cfc2:	e7f4      	b.n	800cfae <_printf_float+0x43e>

0800cfc4 <_printf_common>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	4616      	mov	r6, r2
 800cfca:	4698      	mov	r8, r3
 800cfcc:	688a      	ldr	r2, [r1, #8]
 800cfce:	4607      	mov	r7, r0
 800cfd0:	690b      	ldr	r3, [r1, #16]
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	bfb8      	it	lt
 800cfdc:	4613      	movlt	r3, r2
 800cfde:	6033      	str	r3, [r6, #0]
 800cfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfe4:	b10a      	cbz	r2, 800cfea <_printf_common+0x26>
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	0699      	lsls	r1, r3, #26
 800cfee:	bf42      	ittt	mi
 800cff0:	6833      	ldrmi	r3, [r6, #0]
 800cff2:	3302      	addmi	r3, #2
 800cff4:	6033      	strmi	r3, [r6, #0]
 800cff6:	6825      	ldr	r5, [r4, #0]
 800cff8:	f015 0506 	ands.w	r5, r5, #6
 800cffc:	d106      	bne.n	800d00c <_printf_common+0x48>
 800cffe:	f104 0a19 	add.w	sl, r4, #25
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	6832      	ldr	r2, [r6, #0]
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	42ab      	cmp	r3, r5
 800d00a:	dc2b      	bgt.n	800d064 <_printf_common+0xa0>
 800d00c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d010:	6822      	ldr	r2, [r4, #0]
 800d012:	3b00      	subs	r3, #0
 800d014:	bf18      	it	ne
 800d016:	2301      	movne	r3, #1
 800d018:	0692      	lsls	r2, r2, #26
 800d01a:	d430      	bmi.n	800d07e <_printf_common+0xba>
 800d01c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d020:	4641      	mov	r1, r8
 800d022:	4638      	mov	r0, r7
 800d024:	47c8      	blx	r9
 800d026:	3001      	adds	r0, #1
 800d028:	d023      	beq.n	800d072 <_printf_common+0xae>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	341a      	adds	r4, #26
 800d02e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d032:	f003 0306 	and.w	r3, r3, #6
 800d036:	2b04      	cmp	r3, #4
 800d038:	bf0a      	itet	eq
 800d03a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d03e:	2500      	movne	r5, #0
 800d040:	6833      	ldreq	r3, [r6, #0]
 800d042:	f04f 0600 	mov.w	r6, #0
 800d046:	bf08      	it	eq
 800d048:	1aed      	subeq	r5, r5, r3
 800d04a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d04e:	bf08      	it	eq
 800d050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d054:	4293      	cmp	r3, r2
 800d056:	bfc4      	itt	gt
 800d058:	1a9b      	subgt	r3, r3, r2
 800d05a:	18ed      	addgt	r5, r5, r3
 800d05c:	42b5      	cmp	r5, r6
 800d05e:	d11a      	bne.n	800d096 <_printf_common+0xd2>
 800d060:	2000      	movs	r0, #0
 800d062:	e008      	b.n	800d076 <_printf_common+0xb2>
 800d064:	2301      	movs	r3, #1
 800d066:	4652      	mov	r2, sl
 800d068:	4641      	mov	r1, r8
 800d06a:	4638      	mov	r0, r7
 800d06c:	47c8      	blx	r9
 800d06e:	3001      	adds	r0, #1
 800d070:	d103      	bne.n	800d07a <_printf_common+0xb6>
 800d072:	f04f 30ff 	mov.w	r0, #4294967295
 800d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07a:	3501      	adds	r5, #1
 800d07c:	e7c1      	b.n	800d002 <_printf_common+0x3e>
 800d07e:	18e1      	adds	r1, r4, r3
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	2030      	movs	r0, #48	@ 0x30
 800d084:	3302      	adds	r3, #2
 800d086:	4422      	add	r2, r4
 800d088:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d08c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d094:	e7c2      	b.n	800d01c <_printf_common+0x58>
 800d096:	2301      	movs	r3, #1
 800d098:	4622      	mov	r2, r4
 800d09a:	4641      	mov	r1, r8
 800d09c:	4638      	mov	r0, r7
 800d09e:	47c8      	blx	r9
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	d0e6      	beq.n	800d072 <_printf_common+0xae>
 800d0a4:	3601      	adds	r6, #1
 800d0a6:	e7d9      	b.n	800d05c <_printf_common+0x98>

0800d0a8 <_printf_i>:
 800d0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ac:	7e0f      	ldrb	r7, [r1, #24]
 800d0ae:	4691      	mov	r9, r2
 800d0b0:	4680      	mov	r8, r0
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	2f78      	cmp	r7, #120	@ 0x78
 800d0b6:	469a      	mov	sl, r3
 800d0b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0be:	d807      	bhi.n	800d0d0 <_printf_i+0x28>
 800d0c0:	2f62      	cmp	r7, #98	@ 0x62
 800d0c2:	d80a      	bhi.n	800d0da <_printf_i+0x32>
 800d0c4:	2f00      	cmp	r7, #0
 800d0c6:	f000 80d1 	beq.w	800d26c <_printf_i+0x1c4>
 800d0ca:	2f58      	cmp	r7, #88	@ 0x58
 800d0cc:	f000 80b8 	beq.w	800d240 <_printf_i+0x198>
 800d0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0d8:	e03a      	b.n	800d150 <_printf_i+0xa8>
 800d0da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0de:	2b15      	cmp	r3, #21
 800d0e0:	d8f6      	bhi.n	800d0d0 <_printf_i+0x28>
 800d0e2:	a101      	add	r1, pc, #4	@ (adr r1, 800d0e8 <_printf_i+0x40>)
 800d0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0e8:	0800d141 	.word	0x0800d141
 800d0ec:	0800d155 	.word	0x0800d155
 800d0f0:	0800d0d1 	.word	0x0800d0d1
 800d0f4:	0800d0d1 	.word	0x0800d0d1
 800d0f8:	0800d0d1 	.word	0x0800d0d1
 800d0fc:	0800d0d1 	.word	0x0800d0d1
 800d100:	0800d155 	.word	0x0800d155
 800d104:	0800d0d1 	.word	0x0800d0d1
 800d108:	0800d0d1 	.word	0x0800d0d1
 800d10c:	0800d0d1 	.word	0x0800d0d1
 800d110:	0800d0d1 	.word	0x0800d0d1
 800d114:	0800d253 	.word	0x0800d253
 800d118:	0800d17f 	.word	0x0800d17f
 800d11c:	0800d20d 	.word	0x0800d20d
 800d120:	0800d0d1 	.word	0x0800d0d1
 800d124:	0800d0d1 	.word	0x0800d0d1
 800d128:	0800d275 	.word	0x0800d275
 800d12c:	0800d0d1 	.word	0x0800d0d1
 800d130:	0800d17f 	.word	0x0800d17f
 800d134:	0800d0d1 	.word	0x0800d0d1
 800d138:	0800d0d1 	.word	0x0800d0d1
 800d13c:	0800d215 	.word	0x0800d215
 800d140:	6833      	ldr	r3, [r6, #0]
 800d142:	1d1a      	adds	r2, r3, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6032      	str	r2, [r6, #0]
 800d148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d14c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d150:	2301      	movs	r3, #1
 800d152:	e09c      	b.n	800d28e <_printf_i+0x1e6>
 800d154:	6833      	ldr	r3, [r6, #0]
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	1d19      	adds	r1, r3, #4
 800d15a:	6031      	str	r1, [r6, #0]
 800d15c:	0606      	lsls	r6, r0, #24
 800d15e:	d501      	bpl.n	800d164 <_printf_i+0xbc>
 800d160:	681d      	ldr	r5, [r3, #0]
 800d162:	e003      	b.n	800d16c <_printf_i+0xc4>
 800d164:	0645      	lsls	r5, r0, #25
 800d166:	d5fb      	bpl.n	800d160 <_printf_i+0xb8>
 800d168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	da03      	bge.n	800d178 <_printf_i+0xd0>
 800d170:	232d      	movs	r3, #45	@ 0x2d
 800d172:	426d      	negs	r5, r5
 800d174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d178:	4858      	ldr	r0, [pc, #352]	@ (800d2dc <_printf_i+0x234>)
 800d17a:	230a      	movs	r3, #10
 800d17c:	e011      	b.n	800d1a2 <_printf_i+0xfa>
 800d17e:	6821      	ldr	r1, [r4, #0]
 800d180:	6833      	ldr	r3, [r6, #0]
 800d182:	0608      	lsls	r0, r1, #24
 800d184:	f853 5b04 	ldr.w	r5, [r3], #4
 800d188:	d402      	bmi.n	800d190 <_printf_i+0xe8>
 800d18a:	0649      	lsls	r1, r1, #25
 800d18c:	bf48      	it	mi
 800d18e:	b2ad      	uxthmi	r5, r5
 800d190:	2f6f      	cmp	r7, #111	@ 0x6f
 800d192:	6033      	str	r3, [r6, #0]
 800d194:	4851      	ldr	r0, [pc, #324]	@ (800d2dc <_printf_i+0x234>)
 800d196:	bf14      	ite	ne
 800d198:	230a      	movne	r3, #10
 800d19a:	2308      	moveq	r3, #8
 800d19c:	2100      	movs	r1, #0
 800d19e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d1a2:	6866      	ldr	r6, [r4, #4]
 800d1a4:	2e00      	cmp	r6, #0
 800d1a6:	60a6      	str	r6, [r4, #8]
 800d1a8:	db05      	blt.n	800d1b6 <_printf_i+0x10e>
 800d1aa:	6821      	ldr	r1, [r4, #0]
 800d1ac:	432e      	orrs	r6, r5
 800d1ae:	f021 0104 	bic.w	r1, r1, #4
 800d1b2:	6021      	str	r1, [r4, #0]
 800d1b4:	d04b      	beq.n	800d24e <_printf_i+0x1a6>
 800d1b6:	4616      	mov	r6, r2
 800d1b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1bc:	fb03 5711 	mls	r7, r3, r1, r5
 800d1c0:	5dc7      	ldrb	r7, [r0, r7]
 800d1c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1c6:	462f      	mov	r7, r5
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	42bb      	cmp	r3, r7
 800d1cc:	d9f4      	bls.n	800d1b8 <_printf_i+0x110>
 800d1ce:	2b08      	cmp	r3, #8
 800d1d0:	d10b      	bne.n	800d1ea <_printf_i+0x142>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	07df      	lsls	r7, r3, #31
 800d1d6:	d508      	bpl.n	800d1ea <_printf_i+0x142>
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	6861      	ldr	r1, [r4, #4]
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	bfde      	ittt	le
 800d1e0:	2330      	movle	r3, #48	@ 0x30
 800d1e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1ea:	1b92      	subs	r2, r2, r6
 800d1ec:	6122      	str	r2, [r4, #16]
 800d1ee:	464b      	mov	r3, r9
 800d1f0:	aa03      	add	r2, sp, #12
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4640      	mov	r0, r8
 800d1f6:	f8cd a000 	str.w	sl, [sp]
 800d1fa:	f7ff fee3 	bl	800cfc4 <_printf_common>
 800d1fe:	3001      	adds	r0, #1
 800d200:	d14a      	bne.n	800d298 <_printf_i+0x1f0>
 800d202:	f04f 30ff 	mov.w	r0, #4294967295
 800d206:	b004      	add	sp, #16
 800d208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	f043 0320 	orr.w	r3, r3, #32
 800d212:	6023      	str	r3, [r4, #0]
 800d214:	2778      	movs	r7, #120	@ 0x78
 800d216:	4832      	ldr	r0, [pc, #200]	@ (800d2e0 <_printf_i+0x238>)
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d21e:	061f      	lsls	r7, r3, #24
 800d220:	6831      	ldr	r1, [r6, #0]
 800d222:	f851 5b04 	ldr.w	r5, [r1], #4
 800d226:	d402      	bmi.n	800d22e <_printf_i+0x186>
 800d228:	065f      	lsls	r7, r3, #25
 800d22a:	bf48      	it	mi
 800d22c:	b2ad      	uxthmi	r5, r5
 800d22e:	6031      	str	r1, [r6, #0]
 800d230:	07d9      	lsls	r1, r3, #31
 800d232:	bf44      	itt	mi
 800d234:	f043 0320 	orrmi.w	r3, r3, #32
 800d238:	6023      	strmi	r3, [r4, #0]
 800d23a:	b11d      	cbz	r5, 800d244 <_printf_i+0x19c>
 800d23c:	2310      	movs	r3, #16
 800d23e:	e7ad      	b.n	800d19c <_printf_i+0xf4>
 800d240:	4826      	ldr	r0, [pc, #152]	@ (800d2dc <_printf_i+0x234>)
 800d242:	e7e9      	b.n	800d218 <_printf_i+0x170>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	f023 0320 	bic.w	r3, r3, #32
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	e7f6      	b.n	800d23c <_printf_i+0x194>
 800d24e:	4616      	mov	r6, r2
 800d250:	e7bd      	b.n	800d1ce <_printf_i+0x126>
 800d252:	6833      	ldr	r3, [r6, #0]
 800d254:	6825      	ldr	r5, [r4, #0]
 800d256:	1d18      	adds	r0, r3, #4
 800d258:	6961      	ldr	r1, [r4, #20]
 800d25a:	6030      	str	r0, [r6, #0]
 800d25c:	062e      	lsls	r6, r5, #24
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	d501      	bpl.n	800d266 <_printf_i+0x1be>
 800d262:	6019      	str	r1, [r3, #0]
 800d264:	e002      	b.n	800d26c <_printf_i+0x1c4>
 800d266:	0668      	lsls	r0, r5, #25
 800d268:	d5fb      	bpl.n	800d262 <_printf_i+0x1ba>
 800d26a:	8019      	strh	r1, [r3, #0]
 800d26c:	2300      	movs	r3, #0
 800d26e:	4616      	mov	r6, r2
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	e7bc      	b.n	800d1ee <_printf_i+0x146>
 800d274:	6833      	ldr	r3, [r6, #0]
 800d276:	2100      	movs	r1, #0
 800d278:	1d1a      	adds	r2, r3, #4
 800d27a:	6032      	str	r2, [r6, #0]
 800d27c:	681e      	ldr	r6, [r3, #0]
 800d27e:	6862      	ldr	r2, [r4, #4]
 800d280:	4630      	mov	r0, r6
 800d282:	f000 fa72 	bl	800d76a <memchr>
 800d286:	b108      	cbz	r0, 800d28c <_printf_i+0x1e4>
 800d288:	1b80      	subs	r0, r0, r6
 800d28a:	6060      	str	r0, [r4, #4]
 800d28c:	6863      	ldr	r3, [r4, #4]
 800d28e:	6123      	str	r3, [r4, #16]
 800d290:	2300      	movs	r3, #0
 800d292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d296:	e7aa      	b.n	800d1ee <_printf_i+0x146>
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	4632      	mov	r2, r6
 800d29c:	4649      	mov	r1, r9
 800d29e:	4640      	mov	r0, r8
 800d2a0:	47d0      	blx	sl
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	d0ad      	beq.n	800d202 <_printf_i+0x15a>
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	079b      	lsls	r3, r3, #30
 800d2aa:	d413      	bmi.n	800d2d4 <_printf_i+0x22c>
 800d2ac:	68e0      	ldr	r0, [r4, #12]
 800d2ae:	9b03      	ldr	r3, [sp, #12]
 800d2b0:	4298      	cmp	r0, r3
 800d2b2:	bfb8      	it	lt
 800d2b4:	4618      	movlt	r0, r3
 800d2b6:	e7a6      	b.n	800d206 <_printf_i+0x15e>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	4632      	mov	r2, r6
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4640      	mov	r0, r8
 800d2c0:	47d0      	blx	sl
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d09d      	beq.n	800d202 <_printf_i+0x15a>
 800d2c6:	3501      	adds	r5, #1
 800d2c8:	68e3      	ldr	r3, [r4, #12]
 800d2ca:	9903      	ldr	r1, [sp, #12]
 800d2cc:	1a5b      	subs	r3, r3, r1
 800d2ce:	42ab      	cmp	r3, r5
 800d2d0:	dcf2      	bgt.n	800d2b8 <_printf_i+0x210>
 800d2d2:	e7eb      	b.n	800d2ac <_printf_i+0x204>
 800d2d4:	2500      	movs	r5, #0
 800d2d6:	f104 0619 	add.w	r6, r4, #25
 800d2da:	e7f5      	b.n	800d2c8 <_printf_i+0x220>
 800d2dc:	0801e5c2 	.word	0x0801e5c2
 800d2e0:	0801e5d3 	.word	0x0801e5d3

0800d2e4 <std>:
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	6083      	str	r3, [r0, #8]
 800d2ec:	8181      	strh	r1, [r0, #12]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6643      	str	r3, [r0, #100]	@ 0x64
 800d2f2:	81c2      	strh	r2, [r0, #14]
 800d2f4:	2208      	movs	r2, #8
 800d2f6:	6183      	str	r3, [r0, #24]
 800d2f8:	e9c0 3300 	strd	r3, r3, [r0]
 800d2fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d300:	305c      	adds	r0, #92	@ 0x5c
 800d302:	f000 f944 	bl	800d58e <memset>
 800d306:	4b0d      	ldr	r3, [pc, #52]	@ (800d33c <std+0x58>)
 800d308:	6224      	str	r4, [r4, #32]
 800d30a:	6263      	str	r3, [r4, #36]	@ 0x24
 800d30c:	4b0c      	ldr	r3, [pc, #48]	@ (800d340 <std+0x5c>)
 800d30e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d310:	4b0c      	ldr	r3, [pc, #48]	@ (800d344 <std+0x60>)
 800d312:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d314:	4b0c      	ldr	r3, [pc, #48]	@ (800d348 <std+0x64>)
 800d316:	6323      	str	r3, [r4, #48]	@ 0x30
 800d318:	4b0c      	ldr	r3, [pc, #48]	@ (800d34c <std+0x68>)
 800d31a:	429c      	cmp	r4, r3
 800d31c:	d006      	beq.n	800d32c <std+0x48>
 800d31e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d322:	4294      	cmp	r4, r2
 800d324:	d002      	beq.n	800d32c <std+0x48>
 800d326:	33d0      	adds	r3, #208	@ 0xd0
 800d328:	429c      	cmp	r4, r3
 800d32a:	d105      	bne.n	800d338 <std+0x54>
 800d32c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d334:	f000 ba16 	b.w	800d764 <__retarget_lock_init_recursive>
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	bf00      	nop
 800d33c:	0800d4d5 	.word	0x0800d4d5
 800d340:	0800d4f7 	.word	0x0800d4f7
 800d344:	0800d52f 	.word	0x0800d52f
 800d348:	0800d553 	.word	0x0800d553
 800d34c:	2007af78 	.word	0x2007af78

0800d350 <stdio_exit_handler>:
 800d350:	4a02      	ldr	r2, [pc, #8]	@ (800d35c <stdio_exit_handler+0xc>)
 800d352:	4903      	ldr	r1, [pc, #12]	@ (800d360 <stdio_exit_handler+0x10>)
 800d354:	4803      	ldr	r0, [pc, #12]	@ (800d364 <stdio_exit_handler+0x14>)
 800d356:	f000 b869 	b.w	800d42c <_fwalk_sglue>
 800d35a:	bf00      	nop
 800d35c:	20000f7c 	.word	0x20000f7c
 800d360:	0800efc5 	.word	0x0800efc5
 800d364:	20000f8c 	.word	0x20000f8c

0800d368 <cleanup_stdio>:
 800d368:	6841      	ldr	r1, [r0, #4]
 800d36a:	4b0c      	ldr	r3, [pc, #48]	@ (800d39c <cleanup_stdio+0x34>)
 800d36c:	4299      	cmp	r1, r3
 800d36e:	b510      	push	{r4, lr}
 800d370:	4604      	mov	r4, r0
 800d372:	d001      	beq.n	800d378 <cleanup_stdio+0x10>
 800d374:	f001 fe26 	bl	800efc4 <_fflush_r>
 800d378:	68a1      	ldr	r1, [r4, #8]
 800d37a:	4b09      	ldr	r3, [pc, #36]	@ (800d3a0 <cleanup_stdio+0x38>)
 800d37c:	4299      	cmp	r1, r3
 800d37e:	d002      	beq.n	800d386 <cleanup_stdio+0x1e>
 800d380:	4620      	mov	r0, r4
 800d382:	f001 fe1f 	bl	800efc4 <_fflush_r>
 800d386:	68e1      	ldr	r1, [r4, #12]
 800d388:	4b06      	ldr	r3, [pc, #24]	@ (800d3a4 <cleanup_stdio+0x3c>)
 800d38a:	4299      	cmp	r1, r3
 800d38c:	d004      	beq.n	800d398 <cleanup_stdio+0x30>
 800d38e:	4620      	mov	r0, r4
 800d390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d394:	f001 be16 	b.w	800efc4 <_fflush_r>
 800d398:	bd10      	pop	{r4, pc}
 800d39a:	bf00      	nop
 800d39c:	2007af78 	.word	0x2007af78
 800d3a0:	2007afe0 	.word	0x2007afe0
 800d3a4:	2007b048 	.word	0x2007b048

0800d3a8 <global_stdio_init.part.0>:
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d3d8 <global_stdio_init.part.0+0x30>)
 800d3ac:	2104      	movs	r1, #4
 800d3ae:	4c0b      	ldr	r4, [pc, #44]	@ (800d3dc <global_stdio_init.part.0+0x34>)
 800d3b0:	4a0b      	ldr	r2, [pc, #44]	@ (800d3e0 <global_stdio_init.part.0+0x38>)
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f7ff ff94 	bl	800d2e4 <std>
 800d3bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	2109      	movs	r1, #9
 800d3c4:	f7ff ff8e 	bl	800d2e4 <std>
 800d3c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	2112      	movs	r1, #18
 800d3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d4:	f7ff bf86 	b.w	800d2e4 <std>
 800d3d8:	2007b0b0 	.word	0x2007b0b0
 800d3dc:	2007af78 	.word	0x2007af78
 800d3e0:	0800d351 	.word	0x0800d351

0800d3e4 <__sfp_lock_acquire>:
 800d3e4:	4801      	ldr	r0, [pc, #4]	@ (800d3ec <__sfp_lock_acquire+0x8>)
 800d3e6:	f000 b9be 	b.w	800d766 <__retarget_lock_acquire_recursive>
 800d3ea:	bf00      	nop
 800d3ec:	2007b0b9 	.word	0x2007b0b9

0800d3f0 <__sfp_lock_release>:
 800d3f0:	4801      	ldr	r0, [pc, #4]	@ (800d3f8 <__sfp_lock_release+0x8>)
 800d3f2:	f000 b9b9 	b.w	800d768 <__retarget_lock_release_recursive>
 800d3f6:	bf00      	nop
 800d3f8:	2007b0b9 	.word	0x2007b0b9

0800d3fc <__sinit>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	4604      	mov	r4, r0
 800d400:	f7ff fff0 	bl	800d3e4 <__sfp_lock_acquire>
 800d404:	6a23      	ldr	r3, [r4, #32]
 800d406:	b11b      	cbz	r3, 800d410 <__sinit+0x14>
 800d408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d40c:	f7ff bff0 	b.w	800d3f0 <__sfp_lock_release>
 800d410:	4b04      	ldr	r3, [pc, #16]	@ (800d424 <__sinit+0x28>)
 800d412:	6223      	str	r3, [r4, #32]
 800d414:	4b04      	ldr	r3, [pc, #16]	@ (800d428 <__sinit+0x2c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f5      	bne.n	800d408 <__sinit+0xc>
 800d41c:	f7ff ffc4 	bl	800d3a8 <global_stdio_init.part.0>
 800d420:	e7f2      	b.n	800d408 <__sinit+0xc>
 800d422:	bf00      	nop
 800d424:	0800d369 	.word	0x0800d369
 800d428:	2007b0b0 	.word	0x2007b0b0

0800d42c <_fwalk_sglue>:
 800d42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d430:	4607      	mov	r7, r0
 800d432:	4688      	mov	r8, r1
 800d434:	4614      	mov	r4, r2
 800d436:	2600      	movs	r6, #0
 800d438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d43c:	f1b9 0901 	subs.w	r9, r9, #1
 800d440:	d505      	bpl.n	800d44e <_fwalk_sglue+0x22>
 800d442:	6824      	ldr	r4, [r4, #0]
 800d444:	2c00      	cmp	r4, #0
 800d446:	d1f7      	bne.n	800d438 <_fwalk_sglue+0xc>
 800d448:	4630      	mov	r0, r6
 800d44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d907      	bls.n	800d464 <_fwalk_sglue+0x38>
 800d454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d458:	3301      	adds	r3, #1
 800d45a:	d003      	beq.n	800d464 <_fwalk_sglue+0x38>
 800d45c:	4629      	mov	r1, r5
 800d45e:	4638      	mov	r0, r7
 800d460:	47c0      	blx	r8
 800d462:	4306      	orrs	r6, r0
 800d464:	3568      	adds	r5, #104	@ 0x68
 800d466:	e7e9      	b.n	800d43c <_fwalk_sglue+0x10>

0800d468 <sniprintf>:
 800d468:	b40c      	push	{r2, r3}
 800d46a:	4b19      	ldr	r3, [pc, #100]	@ (800d4d0 <sniprintf+0x68>)
 800d46c:	b530      	push	{r4, r5, lr}
 800d46e:	1e0c      	subs	r4, r1, #0
 800d470:	b09d      	sub	sp, #116	@ 0x74
 800d472:	681d      	ldr	r5, [r3, #0]
 800d474:	da08      	bge.n	800d488 <sniprintf+0x20>
 800d476:	238b      	movs	r3, #139	@ 0x8b
 800d478:	f04f 30ff 	mov.w	r0, #4294967295
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	b01d      	add	sp, #116	@ 0x74
 800d480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d484:	b002      	add	sp, #8
 800d486:	4770      	bx	lr
 800d488:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d48c:	9002      	str	r0, [sp, #8]
 800d48e:	9006      	str	r0, [sp, #24]
 800d490:	a902      	add	r1, sp, #8
 800d492:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d496:	f04f 0300 	mov.w	r3, #0
 800d49a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d49c:	4628      	mov	r0, r5
 800d49e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d4a0:	bf14      	ite	ne
 800d4a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d4a6:	4623      	moveq	r3, r4
 800d4a8:	9304      	str	r3, [sp, #16]
 800d4aa:	9307      	str	r3, [sp, #28]
 800d4ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4b4:	ab21      	add	r3, sp, #132	@ 0x84
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	f001 fc04 	bl	800ecc4 <_svfiprintf_r>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	bfbc      	itt	lt
 800d4c0:	238b      	movlt	r3, #139	@ 0x8b
 800d4c2:	602b      	strlt	r3, [r5, #0]
 800d4c4:	2c00      	cmp	r4, #0
 800d4c6:	d0da      	beq.n	800d47e <sniprintf+0x16>
 800d4c8:	9b02      	ldr	r3, [sp, #8]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	701a      	strb	r2, [r3, #0]
 800d4ce:	e7d6      	b.n	800d47e <sniprintf+0x16>
 800d4d0:	20000f88 	.word	0x20000f88

0800d4d4 <__sread>:
 800d4d4:	b510      	push	{r4, lr}
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4dc:	f000 f8e4 	bl	800d6a8 <_read_r>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	bfab      	itete	ge
 800d4e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d4e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d4e8:	181b      	addge	r3, r3, r0
 800d4ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d4ee:	bfac      	ite	ge
 800d4f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d4f2:	81a3      	strhlt	r3, [r4, #12]
 800d4f4:	bd10      	pop	{r4, pc}

0800d4f6 <__swrite>:
 800d4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fa:	461f      	mov	r7, r3
 800d4fc:	898b      	ldrh	r3, [r1, #12]
 800d4fe:	4605      	mov	r5, r0
 800d500:	460c      	mov	r4, r1
 800d502:	05db      	lsls	r3, r3, #23
 800d504:	4616      	mov	r6, r2
 800d506:	d505      	bpl.n	800d514 <__swrite+0x1e>
 800d508:	2302      	movs	r3, #2
 800d50a:	2200      	movs	r2, #0
 800d50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d510:	f000 f8b8 	bl	800d684 <_lseek_r>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	4632      	mov	r2, r6
 800d518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d51c:	4628      	mov	r0, r5
 800d51e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	463b      	mov	r3, r7
 800d526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d52a:	f000 b8df 	b.w	800d6ec <_write_r>

0800d52e <__sseek>:
 800d52e:	b510      	push	{r4, lr}
 800d530:	460c      	mov	r4, r1
 800d532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d536:	f000 f8a5 	bl	800d684 <_lseek_r>
 800d53a:	1c43      	adds	r3, r0, #1
 800d53c:	89a3      	ldrh	r3, [r4, #12]
 800d53e:	bf15      	itete	ne
 800d540:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d54a:	81a3      	strheq	r3, [r4, #12]
 800d54c:	bf18      	it	ne
 800d54e:	81a3      	strhne	r3, [r4, #12]
 800d550:	bd10      	pop	{r4, pc}

0800d552 <__sclose>:
 800d552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d556:	f000 b827 	b.w	800d5a8 <_close_r>

0800d55a <memmove>:
 800d55a:	4288      	cmp	r0, r1
 800d55c:	b510      	push	{r4, lr}
 800d55e:	eb01 0402 	add.w	r4, r1, r2
 800d562:	d902      	bls.n	800d56a <memmove+0x10>
 800d564:	4284      	cmp	r4, r0
 800d566:	4623      	mov	r3, r4
 800d568:	d807      	bhi.n	800d57a <memmove+0x20>
 800d56a:	1e43      	subs	r3, r0, #1
 800d56c:	42a1      	cmp	r1, r4
 800d56e:	d008      	beq.n	800d582 <memmove+0x28>
 800d570:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d574:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d578:	e7f8      	b.n	800d56c <memmove+0x12>
 800d57a:	4402      	add	r2, r0
 800d57c:	4601      	mov	r1, r0
 800d57e:	428a      	cmp	r2, r1
 800d580:	d100      	bne.n	800d584 <memmove+0x2a>
 800d582:	bd10      	pop	{r4, pc}
 800d584:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d588:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d58c:	e7f7      	b.n	800d57e <memmove+0x24>

0800d58e <memset>:
 800d58e:	4402      	add	r2, r0
 800d590:	4603      	mov	r3, r0
 800d592:	4293      	cmp	r3, r2
 800d594:	d100      	bne.n	800d598 <memset+0xa>
 800d596:	4770      	bx	lr
 800d598:	f803 1b01 	strb.w	r1, [r3], #1
 800d59c:	e7f9      	b.n	800d592 <memset+0x4>
	...

0800d5a0 <_localeconv_r>:
 800d5a0:	4800      	ldr	r0, [pc, #0]	@ (800d5a4 <_localeconv_r+0x4>)
 800d5a2:	4770      	bx	lr
 800d5a4:	200010c8 	.word	0x200010c8

0800d5a8 <_close_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4d05      	ldr	r5, [pc, #20]	@ (800d5c4 <_close_r+0x1c>)
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	602b      	str	r3, [r5, #0]
 800d5b4:	f002 f836 	bl	800f624 <_close>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_close_r+0x1a>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_close_r+0x1a>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	2007b0b4 	.word	0x2007b0b4

0800d5c8 <_reclaim_reent>:
 800d5c8:	4b2d      	ldr	r3, [pc, #180]	@ (800d680 <_reclaim_reent+0xb8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4283      	cmp	r3, r0
 800d5ce:	b570      	push	{r4, r5, r6, lr}
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	d053      	beq.n	800d67c <_reclaim_reent+0xb4>
 800d5d4:	69c3      	ldr	r3, [r0, #28]
 800d5d6:	b31b      	cbz	r3, 800d620 <_reclaim_reent+0x58>
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	b163      	cbz	r3, 800d5f6 <_reclaim_reent+0x2e>
 800d5dc:	2500      	movs	r5, #0
 800d5de:	69e3      	ldr	r3, [r4, #28]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	5959      	ldr	r1, [r3, r5]
 800d5e4:	b9b1      	cbnz	r1, 800d614 <_reclaim_reent+0x4c>
 800d5e6:	3504      	adds	r5, #4
 800d5e8:	2d80      	cmp	r5, #128	@ 0x80
 800d5ea:	d1f8      	bne.n	800d5de <_reclaim_reent+0x16>
 800d5ec:	69e3      	ldr	r3, [r4, #28]
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	68d9      	ldr	r1, [r3, #12]
 800d5f2:	f000 ff37 	bl	800e464 <_free_r>
 800d5f6:	69e3      	ldr	r3, [r4, #28]
 800d5f8:	6819      	ldr	r1, [r3, #0]
 800d5fa:	b111      	cbz	r1, 800d602 <_reclaim_reent+0x3a>
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f000 ff31 	bl	800e464 <_free_r>
 800d602:	69e3      	ldr	r3, [r4, #28]
 800d604:	689d      	ldr	r5, [r3, #8]
 800d606:	b15d      	cbz	r5, 800d620 <_reclaim_reent+0x58>
 800d608:	4629      	mov	r1, r5
 800d60a:	4620      	mov	r0, r4
 800d60c:	682d      	ldr	r5, [r5, #0]
 800d60e:	f000 ff29 	bl	800e464 <_free_r>
 800d612:	e7f8      	b.n	800d606 <_reclaim_reent+0x3e>
 800d614:	680e      	ldr	r6, [r1, #0]
 800d616:	4620      	mov	r0, r4
 800d618:	f000 ff24 	bl	800e464 <_free_r>
 800d61c:	4631      	mov	r1, r6
 800d61e:	e7e1      	b.n	800d5e4 <_reclaim_reent+0x1c>
 800d620:	6961      	ldr	r1, [r4, #20]
 800d622:	b111      	cbz	r1, 800d62a <_reclaim_reent+0x62>
 800d624:	4620      	mov	r0, r4
 800d626:	f000 ff1d 	bl	800e464 <_free_r>
 800d62a:	69e1      	ldr	r1, [r4, #28]
 800d62c:	b111      	cbz	r1, 800d634 <_reclaim_reent+0x6c>
 800d62e:	4620      	mov	r0, r4
 800d630:	f000 ff18 	bl	800e464 <_free_r>
 800d634:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d636:	b111      	cbz	r1, 800d63e <_reclaim_reent+0x76>
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 ff13 	bl	800e464 <_free_r>
 800d63e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d640:	b111      	cbz	r1, 800d648 <_reclaim_reent+0x80>
 800d642:	4620      	mov	r0, r4
 800d644:	f000 ff0e 	bl	800e464 <_free_r>
 800d648:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d64a:	b111      	cbz	r1, 800d652 <_reclaim_reent+0x8a>
 800d64c:	4620      	mov	r0, r4
 800d64e:	f000 ff09 	bl	800e464 <_free_r>
 800d652:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d654:	b111      	cbz	r1, 800d65c <_reclaim_reent+0x94>
 800d656:	4620      	mov	r0, r4
 800d658:	f000 ff04 	bl	800e464 <_free_r>
 800d65c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d65e:	b111      	cbz	r1, 800d666 <_reclaim_reent+0x9e>
 800d660:	4620      	mov	r0, r4
 800d662:	f000 feff 	bl	800e464 <_free_r>
 800d666:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d668:	b111      	cbz	r1, 800d670 <_reclaim_reent+0xa8>
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 fefa 	bl	800e464 <_free_r>
 800d670:	6a23      	ldr	r3, [r4, #32]
 800d672:	b11b      	cbz	r3, 800d67c <_reclaim_reent+0xb4>
 800d674:	4620      	mov	r0, r4
 800d676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d67a:	4718      	bx	r3
 800d67c:	bd70      	pop	{r4, r5, r6, pc}
 800d67e:	bf00      	nop
 800d680:	20000f88 	.word	0x20000f88

0800d684 <_lseek_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	4d06      	ldr	r5, [pc, #24]	@ (800d6a4 <_lseek_r+0x20>)
 800d68a:	4608      	mov	r0, r1
 800d68c:	4611      	mov	r1, r2
 800d68e:	2200      	movs	r2, #0
 800d690:	602a      	str	r2, [r5, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	f001 ffee 	bl	800f674 <_lseek>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_lseek_r+0x1e>
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_lseek_r+0x1e>
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	2007b0b4 	.word	0x2007b0b4

0800d6a8 <_read_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4d06      	ldr	r5, [pc, #24]	@ (800d6c8 <_read_r+0x20>)
 800d6ae:	4608      	mov	r0, r1
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	602a      	str	r2, [r5, #0]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f001 ffe4 	bl	800f684 <_read>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d102      	bne.n	800d6c6 <_read_r+0x1e>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b103      	cbz	r3, 800d6c6 <_read_r+0x1e>
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	2007b0b4 	.word	0x2007b0b4

0800d6cc <_sbrk_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4d05      	ldr	r5, [pc, #20]	@ (800d6e8 <_sbrk_r+0x1c>)
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	4608      	mov	r0, r1
 800d6d6:	602b      	str	r3, [r5, #0]
 800d6d8:	f001 ffdc 	bl	800f694 <_sbrk>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d102      	bne.n	800d6e6 <_sbrk_r+0x1a>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b103      	cbz	r3, 800d6e6 <_sbrk_r+0x1a>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	2007b0b4 	.word	0x2007b0b4

0800d6ec <_write_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	4d06      	ldr	r5, [pc, #24]	@ (800d70c <_write_r+0x20>)
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	602a      	str	r2, [r5, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f001 ffd8 	bl	800f6b0 <_write>
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	d102      	bne.n	800d70a <_write_r+0x1e>
 800d704:	682b      	ldr	r3, [r5, #0]
 800d706:	b103      	cbz	r3, 800d70a <_write_r+0x1e>
 800d708:	6023      	str	r3, [r4, #0]
 800d70a:	bd38      	pop	{r3, r4, r5, pc}
 800d70c:	2007b0b4 	.word	0x2007b0b4

0800d710 <__errno>:
 800d710:	4b01      	ldr	r3, [pc, #4]	@ (800d718 <__errno+0x8>)
 800d712:	6818      	ldr	r0, [r3, #0]
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	20000f88 	.word	0x20000f88

0800d71c <__libc_init_array>:
 800d71c:	b570      	push	{r4, r5, r6, lr}
 800d71e:	4d0d      	ldr	r5, [pc, #52]	@ (800d754 <__libc_init_array+0x38>)
 800d720:	2600      	movs	r6, #0
 800d722:	4c0d      	ldr	r4, [pc, #52]	@ (800d758 <__libc_init_array+0x3c>)
 800d724:	1b64      	subs	r4, r4, r5
 800d726:	10a4      	asrs	r4, r4, #2
 800d728:	42a6      	cmp	r6, r4
 800d72a:	d109      	bne.n	800d740 <__libc_init_array+0x24>
 800d72c:	4d0b      	ldr	r5, [pc, #44]	@ (800d75c <__libc_init_array+0x40>)
 800d72e:	2600      	movs	r6, #0
 800d730:	4c0b      	ldr	r4, [pc, #44]	@ (800d760 <__libc_init_array+0x44>)
 800d732:	f001 ffc7 	bl	800f6c4 <_init>
 800d736:	1b64      	subs	r4, r4, r5
 800d738:	10a4      	asrs	r4, r4, #2
 800d73a:	42a6      	cmp	r6, r4
 800d73c:	d105      	bne.n	800d74a <__libc_init_array+0x2e>
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
 800d740:	f855 3b04 	ldr.w	r3, [r5], #4
 800d744:	3601      	adds	r6, #1
 800d746:	4798      	blx	r3
 800d748:	e7ee      	b.n	800d728 <__libc_init_array+0xc>
 800d74a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d74e:	3601      	adds	r6, #1
 800d750:	4798      	blx	r3
 800d752:	e7f2      	b.n	800d73a <__libc_init_array+0x1e>
 800d754:	0801e92c 	.word	0x0801e92c
 800d758:	0801e92c 	.word	0x0801e92c
 800d75c:	0801e92c 	.word	0x0801e92c
 800d760:	0801e930 	.word	0x0801e930

0800d764 <__retarget_lock_init_recursive>:
 800d764:	4770      	bx	lr

0800d766 <__retarget_lock_acquire_recursive>:
 800d766:	4770      	bx	lr

0800d768 <__retarget_lock_release_recursive>:
 800d768:	4770      	bx	lr

0800d76a <memchr>:
 800d76a:	b2c9      	uxtb	r1, r1
 800d76c:	4603      	mov	r3, r0
 800d76e:	4402      	add	r2, r0
 800d770:	b510      	push	{r4, lr}
 800d772:	4293      	cmp	r3, r2
 800d774:	4618      	mov	r0, r3
 800d776:	d101      	bne.n	800d77c <memchr+0x12>
 800d778:	2000      	movs	r0, #0
 800d77a:	e003      	b.n	800d784 <memchr+0x1a>
 800d77c:	7804      	ldrb	r4, [r0, #0]
 800d77e:	3301      	adds	r3, #1
 800d780:	428c      	cmp	r4, r1
 800d782:	d1f6      	bne.n	800d772 <memchr+0x8>
 800d784:	bd10      	pop	{r4, pc}

0800d786 <memcpy>:
 800d786:	440a      	add	r2, r1
 800d788:	1e43      	subs	r3, r0, #1
 800d78a:	4291      	cmp	r1, r2
 800d78c:	d100      	bne.n	800d790 <memcpy+0xa>
 800d78e:	4770      	bx	lr
 800d790:	b510      	push	{r4, lr}
 800d792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d796:	4291      	cmp	r1, r2
 800d798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d79c:	d1f9      	bne.n	800d792 <memcpy+0xc>
 800d79e:	bd10      	pop	{r4, pc}

0800d7a0 <quorem>:
 800d7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	6903      	ldr	r3, [r0, #16]
 800d7a6:	4607      	mov	r7, r0
 800d7a8:	690c      	ldr	r4, [r1, #16]
 800d7aa:	42a3      	cmp	r3, r4
 800d7ac:	f2c0 8083 	blt.w	800d8b6 <quorem+0x116>
 800d7b0:	3c01      	subs	r4, #1
 800d7b2:	f100 0514 	add.w	r5, r0, #20
 800d7b6:	f101 0814 	add.w	r8, r1, #20
 800d7ba:	00a3      	lsls	r3, r4, #2
 800d7bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7d8:	d331      	bcc.n	800d83e <quorem+0x9e>
 800d7da:	f04f 0a00 	mov.w	sl, #0
 800d7de:	46c4      	mov	ip, r8
 800d7e0:	46ae      	mov	lr, r5
 800d7e2:	46d3      	mov	fp, sl
 800d7e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d7e8:	b298      	uxth	r0, r3
 800d7ea:	45e1      	cmp	r9, ip
 800d7ec:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d7f0:	fb06 a000 	mla	r0, r6, r0, sl
 800d7f4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d7f8:	b280      	uxth	r0, r0
 800d7fa:	fb06 2303 	mla	r3, r6, r3, r2
 800d7fe:	f8de 2000 	ldr.w	r2, [lr]
 800d802:	b292      	uxth	r2, r2
 800d804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d808:	eba2 0200 	sub.w	r2, r2, r0
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	f8de 0000 	ldr.w	r0, [lr]
 800d812:	445a      	add	r2, fp
 800d814:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d818:	b292      	uxth	r2, r2
 800d81a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d81e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d822:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d826:	f84e 2b04 	str.w	r2, [lr], #4
 800d82a:	d2db      	bcs.n	800d7e4 <quorem+0x44>
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	58eb      	ldr	r3, [r5, r3]
 800d830:	b92b      	cbnz	r3, 800d83e <quorem+0x9e>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	3b04      	subs	r3, #4
 800d836:	429d      	cmp	r5, r3
 800d838:	461a      	mov	r2, r3
 800d83a:	d330      	bcc.n	800d89e <quorem+0xfe>
 800d83c:	613c      	str	r4, [r7, #16]
 800d83e:	4638      	mov	r0, r7
 800d840:	f001 f8d0 	bl	800e9e4 <__mcmp>
 800d844:	2800      	cmp	r0, #0
 800d846:	db26      	blt.n	800d896 <quorem+0xf6>
 800d848:	4629      	mov	r1, r5
 800d84a:	2000      	movs	r0, #0
 800d84c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d850:	f8d1 c000 	ldr.w	ip, [r1]
 800d854:	fa1f fe82 	uxth.w	lr, r2
 800d858:	45c1      	cmp	r9, r8
 800d85a:	fa1f f38c 	uxth.w	r3, ip
 800d85e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d862:	eba3 030e 	sub.w	r3, r3, lr
 800d866:	4403      	add	r3, r0
 800d868:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d876:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d87a:	f841 3b04 	str.w	r3, [r1], #4
 800d87e:	d2e5      	bcs.n	800d84c <quorem+0xac>
 800d880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d888:	b922      	cbnz	r2, 800d894 <quorem+0xf4>
 800d88a:	3b04      	subs	r3, #4
 800d88c:	429d      	cmp	r5, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	d30b      	bcc.n	800d8aa <quorem+0x10a>
 800d892:	613c      	str	r4, [r7, #16]
 800d894:	3601      	adds	r6, #1
 800d896:	4630      	mov	r0, r6
 800d898:	b003      	add	sp, #12
 800d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89e:	6812      	ldr	r2, [r2, #0]
 800d8a0:	3b04      	subs	r3, #4
 800d8a2:	2a00      	cmp	r2, #0
 800d8a4:	d1ca      	bne.n	800d83c <quorem+0x9c>
 800d8a6:	3c01      	subs	r4, #1
 800d8a8:	e7c5      	b.n	800d836 <quorem+0x96>
 800d8aa:	6812      	ldr	r2, [r2, #0]
 800d8ac:	3b04      	subs	r3, #4
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	d1ef      	bne.n	800d892 <quorem+0xf2>
 800d8b2:	3c01      	subs	r4, #1
 800d8b4:	e7ea      	b.n	800d88c <quorem+0xec>
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	e7ee      	b.n	800d898 <quorem+0xf8>
 800d8ba:	0000      	movs	r0, r0
 800d8bc:	0000      	movs	r0, r0
	...

0800d8c0 <_dtoa_r>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	69c7      	ldr	r7, [r0, #28]
 800d8c6:	b097      	sub	sp, #92	@ 0x5c
 800d8c8:	4681      	mov	r9, r0
 800d8ca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d8cc:	9107      	str	r1, [sp, #28]
 800d8ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800d8d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d8d2:	ec55 4b10 	vmov	r4, r5, d0
 800d8d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d8da:	b97f      	cbnz	r7, 800d8fc <_dtoa_r+0x3c>
 800d8dc:	2010      	movs	r0, #16
 800d8de:	f7fe ffc5 	bl	800c86c <malloc>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	f8c9 001c 	str.w	r0, [r9, #28]
 800d8e8:	b920      	cbnz	r0, 800d8f4 <_dtoa_r+0x34>
 800d8ea:	4ba9      	ldr	r3, [pc, #676]	@ (800db90 <_dtoa_r+0x2d0>)
 800d8ec:	21ef      	movs	r1, #239	@ 0xef
 800d8ee:	48a9      	ldr	r0, [pc, #676]	@ (800db94 <_dtoa_r+0x2d4>)
 800d8f0:	f001 fb90 	bl	800f014 <__assert_func>
 800d8f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d8f8:	6007      	str	r7, [r0, #0]
 800d8fa:	60c7      	str	r7, [r0, #12]
 800d8fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d900:	6819      	ldr	r1, [r3, #0]
 800d902:	b159      	cbz	r1, 800d91c <_dtoa_r+0x5c>
 800d904:	685a      	ldr	r2, [r3, #4]
 800d906:	2301      	movs	r3, #1
 800d908:	4648      	mov	r0, r9
 800d90a:	4093      	lsls	r3, r2
 800d90c:	604a      	str	r2, [r1, #4]
 800d90e:	608b      	str	r3, [r1, #8]
 800d910:	f000 fe32 	bl	800e578 <_Bfree>
 800d914:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	1e2b      	subs	r3, r5, #0
 800d91e:	bfb7      	itett	lt
 800d920:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d924:	2300      	movge	r3, #0
 800d926:	2201      	movlt	r2, #1
 800d928:	9305      	strlt	r3, [sp, #20]
 800d92a:	bfa8      	it	ge
 800d92c:	6033      	strge	r3, [r6, #0]
 800d92e:	9f05      	ldr	r7, [sp, #20]
 800d930:	4b99      	ldr	r3, [pc, #612]	@ (800db98 <_dtoa_r+0x2d8>)
 800d932:	bfb8      	it	lt
 800d934:	6032      	strlt	r2, [r6, #0]
 800d936:	43bb      	bics	r3, r7
 800d938:	d112      	bne.n	800d960 <_dtoa_r+0xa0>
 800d93a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d93e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d946:	4323      	orrs	r3, r4
 800d948:	f000 855a 	beq.w	800e400 <_dtoa_r+0xb40>
 800d94c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d94e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dbac <_dtoa_r+0x2ec>
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 855c 	beq.w	800e410 <_dtoa_r+0xb50>
 800d958:	f10a 0303 	add.w	r3, sl, #3
 800d95c:	f000 bd56 	b.w	800e40c <_dtoa_r+0xb4c>
 800d960:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d964:	2200      	movs	r2, #0
 800d966:	2300      	movs	r3, #0
 800d968:	ec51 0b17 	vmov	r0, r1, d7
 800d96c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d970:	f7f3 f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 800d974:	4680      	mov	r8, r0
 800d976:	b158      	cbz	r0, 800d990 <_dtoa_r+0xd0>
 800d978:	2301      	movs	r3, #1
 800d97a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d980:	b113      	cbz	r3, 800d988 <_dtoa_r+0xc8>
 800d982:	4b86      	ldr	r3, [pc, #536]	@ (800db9c <_dtoa_r+0x2dc>)
 800d984:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d986:	6013      	str	r3, [r2, #0]
 800d988:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800dbb0 <_dtoa_r+0x2f0>
 800d98c:	f000 bd40 	b.w	800e410 <_dtoa_r+0xb50>
 800d990:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d994:	aa14      	add	r2, sp, #80	@ 0x50
 800d996:	a915      	add	r1, sp, #84	@ 0x54
 800d998:	4648      	mov	r0, r9
 800d99a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d99e:	f001 f8d5 	bl	800eb4c <__d2b>
 800d9a2:	9002      	str	r0, [sp, #8]
 800d9a4:	2e00      	cmp	r6, #0
 800d9a6:	d076      	beq.n	800da96 <_dtoa_r+0x1d6>
 800d9a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9aa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d9ae:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d9b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9b6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d9ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d9be:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	4b76      	ldr	r3, [pc, #472]	@ (800dba0 <_dtoa_r+0x2e0>)
 800d9c8:	f7f2 fc6e 	bl	80002a8 <__aeabi_dsub>
 800d9cc:	a36a      	add	r3, pc, #424	@ (adr r3, 800db78 <_dtoa_r+0x2b8>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	f7f2 fe21 	bl	8000618 <__aeabi_dmul>
 800d9d6:	a36a      	add	r3, pc, #424	@ (adr r3, 800db80 <_dtoa_r+0x2c0>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 fc66 	bl	80002ac <__adddf3>
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	460d      	mov	r5, r1
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f7f2 fdad 	bl	8000544 <__aeabi_i2d>
 800d9ea:	a367      	add	r3, pc, #412	@ (adr r3, 800db88 <_dtoa_r+0x2c8>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fe12 	bl	8000618 <__aeabi_dmul>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	f7f2 fc56 	bl	80002ac <__adddf3>
 800da00:	4604      	mov	r4, r0
 800da02:	460d      	mov	r5, r1
 800da04:	f7f3 f8b8 	bl	8000b78 <__aeabi_d2iz>
 800da08:	2200      	movs	r2, #0
 800da0a:	4607      	mov	r7, r0
 800da0c:	2300      	movs	r3, #0
 800da0e:	4620      	mov	r0, r4
 800da10:	4629      	mov	r1, r5
 800da12:	f7f3 f873 	bl	8000afc <__aeabi_dcmplt>
 800da16:	b140      	cbz	r0, 800da2a <_dtoa_r+0x16a>
 800da18:	4638      	mov	r0, r7
 800da1a:	f7f2 fd93 	bl	8000544 <__aeabi_i2d>
 800da1e:	4622      	mov	r2, r4
 800da20:	462b      	mov	r3, r5
 800da22:	f7f3 f861 	bl	8000ae8 <__aeabi_dcmpeq>
 800da26:	b900      	cbnz	r0, 800da2a <_dtoa_r+0x16a>
 800da28:	3f01      	subs	r7, #1
 800da2a:	2f16      	cmp	r7, #22
 800da2c:	d852      	bhi.n	800dad4 <_dtoa_r+0x214>
 800da2e:	4b5d      	ldr	r3, [pc, #372]	@ (800dba4 <_dtoa_r+0x2e4>)
 800da30:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3c:	f7f3 f85e 	bl	8000afc <__aeabi_dcmplt>
 800da40:	2800      	cmp	r0, #0
 800da42:	d049      	beq.n	800dad8 <_dtoa_r+0x218>
 800da44:	3f01      	subs	r7, #1
 800da46:	2300      	movs	r3, #0
 800da48:	9310      	str	r3, [sp, #64]	@ 0x40
 800da4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da4c:	1b9b      	subs	r3, r3, r6
 800da4e:	1e5a      	subs	r2, r3, #1
 800da50:	bf4c      	ite	mi
 800da52:	f1c3 0301 	rsbmi	r3, r3, #1
 800da56:	2300      	movpl	r3, #0
 800da58:	9206      	str	r2, [sp, #24]
 800da5a:	bf45      	ittet	mi
 800da5c:	9300      	strmi	r3, [sp, #0]
 800da5e:	2300      	movmi	r3, #0
 800da60:	9300      	strpl	r3, [sp, #0]
 800da62:	9306      	strmi	r3, [sp, #24]
 800da64:	2f00      	cmp	r7, #0
 800da66:	db39      	blt.n	800dadc <_dtoa_r+0x21c>
 800da68:	9b06      	ldr	r3, [sp, #24]
 800da6a:	970d      	str	r7, [sp, #52]	@ 0x34
 800da6c:	443b      	add	r3, r7
 800da6e:	9306      	str	r3, [sp, #24]
 800da70:	2300      	movs	r3, #0
 800da72:	9308      	str	r3, [sp, #32]
 800da74:	9b07      	ldr	r3, [sp, #28]
 800da76:	2b09      	cmp	r3, #9
 800da78:	d863      	bhi.n	800db42 <_dtoa_r+0x282>
 800da7a:	2b05      	cmp	r3, #5
 800da7c:	bfc5      	ittet	gt
 800da7e:	3b04      	subgt	r3, #4
 800da80:	2400      	movgt	r4, #0
 800da82:	2401      	movle	r4, #1
 800da84:	9307      	strgt	r3, [sp, #28]
 800da86:	9b07      	ldr	r3, [sp, #28]
 800da88:	3b02      	subs	r3, #2
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d865      	bhi.n	800db5a <_dtoa_r+0x29a>
 800da8e:	e8df f003 	tbb	[pc, r3]
 800da92:	5654      	.short	0x5654
 800da94:	2d39      	.short	0x2d39
 800da96:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800da9a:	441e      	add	r6, r3
 800da9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800daa0:	2b20      	cmp	r3, #32
 800daa2:	bfc9      	itett	gt
 800daa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800daa8:	f1c3 0320 	rsble	r3, r3, #32
 800daac:	409f      	lslgt	r7, r3
 800daae:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dab2:	bfd8      	it	le
 800dab4:	fa04 f003 	lslle.w	r0, r4, r3
 800dab8:	f106 36ff 	add.w	r6, r6, #4294967295
 800dabc:	bfc4      	itt	gt
 800dabe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dac2:	ea47 0003 	orrgt.w	r0, r7, r3
 800dac6:	f7f2 fd2d 	bl	8000524 <__aeabi_ui2d>
 800daca:	2201      	movs	r2, #1
 800dacc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dad0:	9212      	str	r2, [sp, #72]	@ 0x48
 800dad2:	e776      	b.n	800d9c2 <_dtoa_r+0x102>
 800dad4:	2301      	movs	r3, #1
 800dad6:	e7b7      	b.n	800da48 <_dtoa_r+0x188>
 800dad8:	9010      	str	r0, [sp, #64]	@ 0x40
 800dada:	e7b6      	b.n	800da4a <_dtoa_r+0x18a>
 800dadc:	9b00      	ldr	r3, [sp, #0]
 800dade:	1bdb      	subs	r3, r3, r7
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	427b      	negs	r3, r7
 800dae4:	9308      	str	r3, [sp, #32]
 800dae6:	2300      	movs	r3, #0
 800dae8:	930d      	str	r3, [sp, #52]	@ 0x34
 800daea:	e7c3      	b.n	800da74 <_dtoa_r+0x1b4>
 800daec:	2301      	movs	r3, #1
 800daee:	9309      	str	r3, [sp, #36]	@ 0x24
 800daf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800daf2:	eb07 0b03 	add.w	fp, r7, r3
 800daf6:	f10b 0301 	add.w	r3, fp, #1
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	9303      	str	r3, [sp, #12]
 800dafe:	bfb8      	it	lt
 800db00:	2301      	movlt	r3, #1
 800db02:	e006      	b.n	800db12 <_dtoa_r+0x252>
 800db04:	2301      	movs	r3, #1
 800db06:	9309      	str	r3, [sp, #36]	@ 0x24
 800db08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dd28      	ble.n	800db60 <_dtoa_r+0x2a0>
 800db0e:	469b      	mov	fp, r3
 800db10:	9303      	str	r3, [sp, #12]
 800db12:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800db16:	2100      	movs	r1, #0
 800db18:	2204      	movs	r2, #4
 800db1a:	f102 0514 	add.w	r5, r2, #20
 800db1e:	429d      	cmp	r5, r3
 800db20:	d926      	bls.n	800db70 <_dtoa_r+0x2b0>
 800db22:	6041      	str	r1, [r0, #4]
 800db24:	4648      	mov	r0, r9
 800db26:	f000 fce7 	bl	800e4f8 <_Balloc>
 800db2a:	4682      	mov	sl, r0
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d141      	bne.n	800dbb4 <_dtoa_r+0x2f4>
 800db30:	4b1d      	ldr	r3, [pc, #116]	@ (800dba8 <_dtoa_r+0x2e8>)
 800db32:	4602      	mov	r2, r0
 800db34:	f240 11af 	movw	r1, #431	@ 0x1af
 800db38:	e6d9      	b.n	800d8ee <_dtoa_r+0x2e>
 800db3a:	2300      	movs	r3, #0
 800db3c:	e7e3      	b.n	800db06 <_dtoa_r+0x246>
 800db3e:	2300      	movs	r3, #0
 800db40:	e7d5      	b.n	800daee <_dtoa_r+0x22e>
 800db42:	2401      	movs	r4, #1
 800db44:	2300      	movs	r3, #0
 800db46:	9409      	str	r4, [sp, #36]	@ 0x24
 800db48:	9307      	str	r3, [sp, #28]
 800db4a:	f04f 3bff 	mov.w	fp, #4294967295
 800db4e:	2200      	movs	r2, #0
 800db50:	2312      	movs	r3, #18
 800db52:	f8cd b00c 	str.w	fp, [sp, #12]
 800db56:	920c      	str	r2, [sp, #48]	@ 0x30
 800db58:	e7db      	b.n	800db12 <_dtoa_r+0x252>
 800db5a:	2301      	movs	r3, #1
 800db5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db5e:	e7f4      	b.n	800db4a <_dtoa_r+0x28a>
 800db60:	f04f 0b01 	mov.w	fp, #1
 800db64:	465b      	mov	r3, fp
 800db66:	f8cd b00c 	str.w	fp, [sp, #12]
 800db6a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800db6e:	e7d0      	b.n	800db12 <_dtoa_r+0x252>
 800db70:	3101      	adds	r1, #1
 800db72:	0052      	lsls	r2, r2, #1
 800db74:	e7d1      	b.n	800db1a <_dtoa_r+0x25a>
 800db76:	bf00      	nop
 800db78:	636f4361 	.word	0x636f4361
 800db7c:	3fd287a7 	.word	0x3fd287a7
 800db80:	8b60c8b3 	.word	0x8b60c8b3
 800db84:	3fc68a28 	.word	0x3fc68a28
 800db88:	509f79fb 	.word	0x509f79fb
 800db8c:	3fd34413 	.word	0x3fd34413
 800db90:	0801e5f1 	.word	0x0801e5f1
 800db94:	0801e608 	.word	0x0801e608
 800db98:	7ff00000 	.word	0x7ff00000
 800db9c:	0801e5c1 	.word	0x0801e5c1
 800dba0:	3ff80000 	.word	0x3ff80000
 800dba4:	0801e758 	.word	0x0801e758
 800dba8:	0801e660 	.word	0x0801e660
 800dbac:	0801e5ed 	.word	0x0801e5ed
 800dbb0:	0801e5c0 	.word	0x0801e5c0
 800dbb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbb8:	6018      	str	r0, [r3, #0]
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	2b0e      	cmp	r3, #14
 800dbbe:	f200 80a1 	bhi.w	800dd04 <_dtoa_r+0x444>
 800dbc2:	2c00      	cmp	r4, #0
 800dbc4:	f000 809e 	beq.w	800dd04 <_dtoa_r+0x444>
 800dbc8:	2f00      	cmp	r7, #0
 800dbca:	dd33      	ble.n	800dc34 <_dtoa_r+0x374>
 800dbcc:	f007 020f 	and.w	r2, r7, #15
 800dbd0:	4b9b      	ldr	r3, [pc, #620]	@ (800de40 <_dtoa_r+0x580>)
 800dbd2:	05f8      	lsls	r0, r7, #23
 800dbd4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dbd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbdc:	ed93 7b00 	vldr	d7, [r3]
 800dbe0:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dbe4:	d516      	bpl.n	800dc14 <_dtoa_r+0x354>
 800dbe6:	4b97      	ldr	r3, [pc, #604]	@ (800de44 <_dtoa_r+0x584>)
 800dbe8:	f004 040f 	and.w	r4, r4, #15
 800dbec:	2603      	movs	r6, #3
 800dbee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dbf6:	f7f2 fe39 	bl	800086c <__aeabi_ddiv>
 800dbfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbfe:	4d91      	ldr	r5, [pc, #580]	@ (800de44 <_dtoa_r+0x584>)
 800dc00:	b954      	cbnz	r4, 800dc18 <_dtoa_r+0x358>
 800dc02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc0a:	f7f2 fe2f 	bl	800086c <__aeabi_ddiv>
 800dc0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc12:	e028      	b.n	800dc66 <_dtoa_r+0x3a6>
 800dc14:	2602      	movs	r6, #2
 800dc16:	e7f2      	b.n	800dbfe <_dtoa_r+0x33e>
 800dc18:	07e1      	lsls	r1, r4, #31
 800dc1a:	d508      	bpl.n	800dc2e <_dtoa_r+0x36e>
 800dc1c:	3601      	adds	r6, #1
 800dc1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dc22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc26:	f7f2 fcf7 	bl	8000618 <__aeabi_dmul>
 800dc2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc2e:	1064      	asrs	r4, r4, #1
 800dc30:	3508      	adds	r5, #8
 800dc32:	e7e5      	b.n	800dc00 <_dtoa_r+0x340>
 800dc34:	f000 80af 	beq.w	800dd96 <_dtoa_r+0x4d6>
 800dc38:	427c      	negs	r4, r7
 800dc3a:	4b81      	ldr	r3, [pc, #516]	@ (800de40 <_dtoa_r+0x580>)
 800dc3c:	4d81      	ldr	r5, [pc, #516]	@ (800de44 <_dtoa_r+0x584>)
 800dc3e:	2602      	movs	r6, #2
 800dc40:	f004 020f 	and.w	r2, r4, #15
 800dc44:	1124      	asrs	r4, r4, #4
 800dc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc52:	f7f2 fce1 	bl	8000618 <__aeabi_dmul>
 800dc56:	2300      	movs	r3, #0
 800dc58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc5c:	2c00      	cmp	r4, #0
 800dc5e:	f040 808f 	bne.w	800dd80 <_dtoa_r+0x4c0>
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1d3      	bne.n	800dc0e <_dtoa_r+0x34e>
 800dc66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 8094 	beq.w	800dd9a <_dtoa_r+0x4da>
 800dc72:	2200      	movs	r2, #0
 800dc74:	4b74      	ldr	r3, [pc, #464]	@ (800de48 <_dtoa_r+0x588>)
 800dc76:	4620      	mov	r0, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f2 ff3f 	bl	8000afc <__aeabi_dcmplt>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	f000 808b 	beq.w	800dd9a <_dtoa_r+0x4da>
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 8087 	beq.w	800dd9a <_dtoa_r+0x4da>
 800dc8c:	f1bb 0f00 	cmp.w	fp, #0
 800dc90:	dd34      	ble.n	800dcfc <_dtoa_r+0x43c>
 800dc92:	4620      	mov	r0, r4
 800dc94:	f107 38ff 	add.w	r8, r7, #4294967295
 800dc98:	3601      	adds	r6, #1
 800dc9a:	465c      	mov	r4, fp
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4b6b      	ldr	r3, [pc, #428]	@ (800de4c <_dtoa_r+0x58c>)
 800dca0:	4629      	mov	r1, r5
 800dca2:	f7f2 fcb9 	bl	8000618 <__aeabi_dmul>
 800dca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7f2 fc4a 	bl	8000544 <__aeabi_i2d>
 800dcb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcb4:	f7f2 fcb0 	bl	8000618 <__aeabi_dmul>
 800dcb8:	2200      	movs	r2, #0
 800dcba:	4b65      	ldr	r3, [pc, #404]	@ (800de50 <_dtoa_r+0x590>)
 800dcbc:	f7f2 faf6 	bl	80002ac <__adddf3>
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dcc6:	2c00      	cmp	r4, #0
 800dcc8:	d16a      	bne.n	800dda0 <_dtoa_r+0x4e0>
 800dcca:	2200      	movs	r2, #0
 800dccc:	4b61      	ldr	r3, [pc, #388]	@ (800de54 <_dtoa_r+0x594>)
 800dcce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcd2:	f7f2 fae9 	bl	80002a8 <__aeabi_dsub>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcde:	462a      	mov	r2, r5
 800dce0:	4633      	mov	r3, r6
 800dce2:	f7f2 ff29 	bl	8000b38 <__aeabi_dcmpgt>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	f040 8298 	bne.w	800e21c <_dtoa_r+0x95c>
 800dcec:	462a      	mov	r2, r5
 800dcee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dcf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcf6:	f7f2 ff01 	bl	8000afc <__aeabi_dcmplt>
 800dcfa:	bb38      	cbnz	r0, 800dd4c <_dtoa_r+0x48c>
 800dcfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dd00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dd04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f2c0 8157 	blt.w	800dfba <_dtoa_r+0x6fa>
 800dd0c:	2f0e      	cmp	r7, #14
 800dd0e:	f300 8154 	bgt.w	800dfba <_dtoa_r+0x6fa>
 800dd12:	4b4b      	ldr	r3, [pc, #300]	@ (800de40 <_dtoa_r+0x580>)
 800dd14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd18:	ed93 7b00 	vldr	d7, [r3]
 800dd1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	ed8d 7b00 	vstr	d7, [sp]
 800dd24:	f280 80e5 	bge.w	800def2 <_dtoa_r+0x632>
 800dd28:	9b03      	ldr	r3, [sp, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f300 80e1 	bgt.w	800def2 <_dtoa_r+0x632>
 800dd30:	d10c      	bne.n	800dd4c <_dtoa_r+0x48c>
 800dd32:	2200      	movs	r2, #0
 800dd34:	4b47      	ldr	r3, [pc, #284]	@ (800de54 <_dtoa_r+0x594>)
 800dd36:	ec51 0b17 	vmov	r0, r1, d7
 800dd3a:	f7f2 fc6d 	bl	8000618 <__aeabi_dmul>
 800dd3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd42:	f7f2 feef 	bl	8000b24 <__aeabi_dcmpge>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f000 8266 	beq.w	800e218 <_dtoa_r+0x958>
 800dd4c:	2400      	movs	r4, #0
 800dd4e:	4625      	mov	r5, r4
 800dd50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd52:	4656      	mov	r6, sl
 800dd54:	ea6f 0803 	mvn.w	r8, r3
 800dd58:	2700      	movs	r7, #0
 800dd5a:	4621      	mov	r1, r4
 800dd5c:	4648      	mov	r0, r9
 800dd5e:	f000 fc0b 	bl	800e578 <_Bfree>
 800dd62:	2d00      	cmp	r5, #0
 800dd64:	f000 80bd 	beq.w	800dee2 <_dtoa_r+0x622>
 800dd68:	b12f      	cbz	r7, 800dd76 <_dtoa_r+0x4b6>
 800dd6a:	42af      	cmp	r7, r5
 800dd6c:	d003      	beq.n	800dd76 <_dtoa_r+0x4b6>
 800dd6e:	4639      	mov	r1, r7
 800dd70:	4648      	mov	r0, r9
 800dd72:	f000 fc01 	bl	800e578 <_Bfree>
 800dd76:	4629      	mov	r1, r5
 800dd78:	4648      	mov	r0, r9
 800dd7a:	f000 fbfd 	bl	800e578 <_Bfree>
 800dd7e:	e0b0      	b.n	800dee2 <_dtoa_r+0x622>
 800dd80:	07e2      	lsls	r2, r4, #31
 800dd82:	d505      	bpl.n	800dd90 <_dtoa_r+0x4d0>
 800dd84:	3601      	adds	r6, #1
 800dd86:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd8a:	f7f2 fc45 	bl	8000618 <__aeabi_dmul>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	1064      	asrs	r4, r4, #1
 800dd92:	3508      	adds	r5, #8
 800dd94:	e762      	b.n	800dc5c <_dtoa_r+0x39c>
 800dd96:	2602      	movs	r6, #2
 800dd98:	e765      	b.n	800dc66 <_dtoa_r+0x3a6>
 800dd9a:	46b8      	mov	r8, r7
 800dd9c:	9c03      	ldr	r4, [sp, #12]
 800dd9e:	e784      	b.n	800dcaa <_dtoa_r+0x3ea>
 800dda0:	4b27      	ldr	r3, [pc, #156]	@ (800de40 <_dtoa_r+0x580>)
 800dda2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dda4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dda8:	4454      	add	r4, sl
 800ddaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddae:	2900      	cmp	r1, #0
 800ddb0:	d054      	beq.n	800de5c <_dtoa_r+0x59c>
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	4928      	ldr	r1, [pc, #160]	@ (800de58 <_dtoa_r+0x598>)
 800ddb6:	f7f2 fd59 	bl	800086c <__aeabi_ddiv>
 800ddba:	4633      	mov	r3, r6
 800ddbc:	4656      	mov	r6, sl
 800ddbe:	462a      	mov	r2, r5
 800ddc0:	f7f2 fa72 	bl	80002a8 <__aeabi_dsub>
 800ddc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ddc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddcc:	f7f2 fed4 	bl	8000b78 <__aeabi_d2iz>
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	f7f2 fbb7 	bl	8000544 <__aeabi_i2d>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	3530      	adds	r5, #48	@ 0x30
 800dddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dde0:	f7f2 fa62 	bl	80002a8 <__aeabi_dsub>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	f806 5b01 	strb.w	r5, [r6], #1
 800ddec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ddf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ddf4:	f7f2 fe82 	bl	8000afc <__aeabi_dcmplt>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d172      	bne.n	800dee2 <_dtoa_r+0x622>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	4912      	ldr	r1, [pc, #72]	@ (800de48 <_dtoa_r+0x588>)
 800de00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de04:	f7f2 fa50 	bl	80002a8 <__aeabi_dsub>
 800de08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de0c:	f7f2 fe76 	bl	8000afc <__aeabi_dcmplt>
 800de10:	2800      	cmp	r0, #0
 800de12:	f040 80b4 	bne.w	800df7e <_dtoa_r+0x6be>
 800de16:	42a6      	cmp	r6, r4
 800de18:	f43f af70 	beq.w	800dcfc <_dtoa_r+0x43c>
 800de1c:	2200      	movs	r2, #0
 800de1e:	4b0b      	ldr	r3, [pc, #44]	@ (800de4c <_dtoa_r+0x58c>)
 800de20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de24:	f7f2 fbf8 	bl	8000618 <__aeabi_dmul>
 800de28:	2200      	movs	r2, #0
 800de2a:	4b08      	ldr	r3, [pc, #32]	@ (800de4c <_dtoa_r+0x58c>)
 800de2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de34:	f7f2 fbf0 	bl	8000618 <__aeabi_dmul>
 800de38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de3c:	e7c4      	b.n	800ddc8 <_dtoa_r+0x508>
 800de3e:	bf00      	nop
 800de40:	0801e758 	.word	0x0801e758
 800de44:	0801e730 	.word	0x0801e730
 800de48:	3ff00000 	.word	0x3ff00000
 800de4c:	40240000 	.word	0x40240000
 800de50:	401c0000 	.word	0x401c0000
 800de54:	40140000 	.word	0x40140000
 800de58:	3fe00000 	.word	0x3fe00000
 800de5c:	4631      	mov	r1, r6
 800de5e:	4656      	mov	r6, sl
 800de60:	4628      	mov	r0, r5
 800de62:	f7f2 fbd9 	bl	8000618 <__aeabi_dmul>
 800de66:	9413      	str	r4, [sp, #76]	@ 0x4c
 800de68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de70:	f7f2 fe82 	bl	8000b78 <__aeabi_d2iz>
 800de74:	4605      	mov	r5, r0
 800de76:	f7f2 fb65 	bl	8000544 <__aeabi_i2d>
 800de7a:	4602      	mov	r2, r0
 800de7c:	3530      	adds	r5, #48	@ 0x30
 800de7e:	460b      	mov	r3, r1
 800de80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de84:	f7f2 fa10 	bl	80002a8 <__aeabi_dsub>
 800de88:	f806 5b01 	strb.w	r5, [r6], #1
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	42a6      	cmp	r6, r4
 800de92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	d124      	bne.n	800dee6 <_dtoa_r+0x626>
 800de9c:	4baf      	ldr	r3, [pc, #700]	@ (800e15c <_dtoa_r+0x89c>)
 800de9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dea2:	f7f2 fa03 	bl	80002ac <__adddf3>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deae:	f7f2 fe43 	bl	8000b38 <__aeabi_dcmpgt>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d163      	bne.n	800df7e <_dtoa_r+0x6be>
 800deb6:	2000      	movs	r0, #0
 800deb8:	49a8      	ldr	r1, [pc, #672]	@ (800e15c <_dtoa_r+0x89c>)
 800deba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800debe:	f7f2 f9f3 	bl	80002a8 <__aeabi_dsub>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deca:	f7f2 fe17 	bl	8000afc <__aeabi_dcmplt>
 800dece:	2800      	cmp	r0, #0
 800ded0:	f43f af14 	beq.w	800dcfc <_dtoa_r+0x43c>
 800ded4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ded6:	1e73      	subs	r3, r6, #1
 800ded8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800deda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dede:	2b30      	cmp	r3, #48	@ 0x30
 800dee0:	d0f8      	beq.n	800ded4 <_dtoa_r+0x614>
 800dee2:	4647      	mov	r7, r8
 800dee4:	e03b      	b.n	800df5e <_dtoa_r+0x69e>
 800dee6:	4b9e      	ldr	r3, [pc, #632]	@ (800e160 <_dtoa_r+0x8a0>)
 800dee8:	f7f2 fb96 	bl	8000618 <__aeabi_dmul>
 800deec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800def0:	e7bc      	b.n	800de6c <_dtoa_r+0x5ac>
 800def2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800def6:	4656      	mov	r6, sl
 800def8:	4620      	mov	r0, r4
 800defa:	4629      	mov	r1, r5
 800defc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df00:	f7f2 fcb4 	bl	800086c <__aeabi_ddiv>
 800df04:	f7f2 fe38 	bl	8000b78 <__aeabi_d2iz>
 800df08:	4680      	mov	r8, r0
 800df0a:	f7f2 fb1b 	bl	8000544 <__aeabi_i2d>
 800df0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df12:	f7f2 fb81 	bl	8000618 <__aeabi_dmul>
 800df16:	4602      	mov	r2, r0
 800df18:	4620      	mov	r0, r4
 800df1a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df1e:	460b      	mov	r3, r1
 800df20:	4629      	mov	r1, r5
 800df22:	f7f2 f9c1 	bl	80002a8 <__aeabi_dsub>
 800df26:	9d03      	ldr	r5, [sp, #12]
 800df28:	f806 4b01 	strb.w	r4, [r6], #1
 800df2c:	eba6 040a 	sub.w	r4, r6, sl
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	42a5      	cmp	r5, r4
 800df36:	d133      	bne.n	800dfa0 <_dtoa_r+0x6e0>
 800df38:	f7f2 f9b8 	bl	80002ac <__adddf3>
 800df3c:	4604      	mov	r4, r0
 800df3e:	460d      	mov	r5, r1
 800df40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df44:	f7f2 fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 800df48:	b9c0      	cbnz	r0, 800df7c <_dtoa_r+0x6bc>
 800df4a:	4620      	mov	r0, r4
 800df4c:	4629      	mov	r1, r5
 800df4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df52:	f7f2 fdc9 	bl	8000ae8 <__aeabi_dcmpeq>
 800df56:	b110      	cbz	r0, 800df5e <_dtoa_r+0x69e>
 800df58:	f018 0f01 	tst.w	r8, #1
 800df5c:	d10e      	bne.n	800df7c <_dtoa_r+0x6bc>
 800df5e:	9902      	ldr	r1, [sp, #8]
 800df60:	4648      	mov	r0, r9
 800df62:	f000 fb09 	bl	800e578 <_Bfree>
 800df66:	2300      	movs	r3, #0
 800df68:	3701      	adds	r7, #1
 800df6a:	7033      	strb	r3, [r6, #0]
 800df6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df6e:	601f      	str	r7, [r3, #0]
 800df70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df72:	2b00      	cmp	r3, #0
 800df74:	f000 824c 	beq.w	800e410 <_dtoa_r+0xb50>
 800df78:	601e      	str	r6, [r3, #0]
 800df7a:	e249      	b.n	800e410 <_dtoa_r+0xb50>
 800df7c:	46b8      	mov	r8, r7
 800df7e:	4633      	mov	r3, r6
 800df80:	461e      	mov	r6, r3
 800df82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df86:	2a39      	cmp	r2, #57	@ 0x39
 800df88:	d106      	bne.n	800df98 <_dtoa_r+0x6d8>
 800df8a:	459a      	cmp	sl, r3
 800df8c:	d1f8      	bne.n	800df80 <_dtoa_r+0x6c0>
 800df8e:	2230      	movs	r2, #48	@ 0x30
 800df90:	f108 0801 	add.w	r8, r8, #1
 800df94:	f88a 2000 	strb.w	r2, [sl]
 800df98:	781a      	ldrb	r2, [r3, #0]
 800df9a:	3201      	adds	r2, #1
 800df9c:	701a      	strb	r2, [r3, #0]
 800df9e:	e7a0      	b.n	800dee2 <_dtoa_r+0x622>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	4b6f      	ldr	r3, [pc, #444]	@ (800e160 <_dtoa_r+0x8a0>)
 800dfa4:	f7f2 fb38 	bl	8000618 <__aeabi_dmul>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2300      	movs	r3, #0
 800dfac:	4604      	mov	r4, r0
 800dfae:	460d      	mov	r5, r1
 800dfb0:	f7f2 fd9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d09f      	beq.n	800def8 <_dtoa_r+0x638>
 800dfb8:	e7d1      	b.n	800df5e <_dtoa_r+0x69e>
 800dfba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	f000 80ea 	beq.w	800e196 <_dtoa_r+0x8d6>
 800dfc2:	9a07      	ldr	r2, [sp, #28]
 800dfc4:	2a01      	cmp	r2, #1
 800dfc6:	f300 80cd 	bgt.w	800e164 <_dtoa_r+0x8a4>
 800dfca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dfcc:	2a00      	cmp	r2, #0
 800dfce:	f000 80c1 	beq.w	800e154 <_dtoa_r+0x894>
 800dfd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dfd6:	9c08      	ldr	r4, [sp, #32]
 800dfd8:	9e00      	ldr	r6, [sp, #0]
 800dfda:	9a00      	ldr	r2, [sp, #0]
 800dfdc:	2101      	movs	r1, #1
 800dfde:	4648      	mov	r0, r9
 800dfe0:	441a      	add	r2, r3
 800dfe2:	9200      	str	r2, [sp, #0]
 800dfe4:	9a06      	ldr	r2, [sp, #24]
 800dfe6:	441a      	add	r2, r3
 800dfe8:	9206      	str	r2, [sp, #24]
 800dfea:	f000 fb7b 	bl	800e6e4 <__i2b>
 800dfee:	4605      	mov	r5, r0
 800dff0:	b166      	cbz	r6, 800e00c <_dtoa_r+0x74c>
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	dd09      	ble.n	800e00c <_dtoa_r+0x74c>
 800dff8:	42b3      	cmp	r3, r6
 800dffa:	9a00      	ldr	r2, [sp, #0]
 800dffc:	bfa8      	it	ge
 800dffe:	4633      	movge	r3, r6
 800e000:	1ad2      	subs	r2, r2, r3
 800e002:	1af6      	subs	r6, r6, r3
 800e004:	9200      	str	r2, [sp, #0]
 800e006:	9a06      	ldr	r2, [sp, #24]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	9306      	str	r3, [sp, #24]
 800e00c:	9b08      	ldr	r3, [sp, #32]
 800e00e:	b30b      	cbz	r3, 800e054 <_dtoa_r+0x794>
 800e010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 80c6 	beq.w	800e1a4 <_dtoa_r+0x8e4>
 800e018:	2c00      	cmp	r4, #0
 800e01a:	f000 80c0 	beq.w	800e19e <_dtoa_r+0x8de>
 800e01e:	4629      	mov	r1, r5
 800e020:	4622      	mov	r2, r4
 800e022:	4648      	mov	r0, r9
 800e024:	f000 fc18 	bl	800e858 <__pow5mult>
 800e028:	9a02      	ldr	r2, [sp, #8]
 800e02a:	4601      	mov	r1, r0
 800e02c:	4605      	mov	r5, r0
 800e02e:	4648      	mov	r0, r9
 800e030:	f000 fb6e 	bl	800e710 <__multiply>
 800e034:	9902      	ldr	r1, [sp, #8]
 800e036:	4680      	mov	r8, r0
 800e038:	4648      	mov	r0, r9
 800e03a:	f000 fa9d 	bl	800e578 <_Bfree>
 800e03e:	9b08      	ldr	r3, [sp, #32]
 800e040:	1b1b      	subs	r3, r3, r4
 800e042:	9308      	str	r3, [sp, #32]
 800e044:	f000 80b1 	beq.w	800e1aa <_dtoa_r+0x8ea>
 800e048:	9a08      	ldr	r2, [sp, #32]
 800e04a:	4641      	mov	r1, r8
 800e04c:	4648      	mov	r0, r9
 800e04e:	f000 fc03 	bl	800e858 <__pow5mult>
 800e052:	9002      	str	r0, [sp, #8]
 800e054:	2101      	movs	r1, #1
 800e056:	4648      	mov	r0, r9
 800e058:	f000 fb44 	bl	800e6e4 <__i2b>
 800e05c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e05e:	4604      	mov	r4, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	f000 81d9 	beq.w	800e418 <_dtoa_r+0xb58>
 800e066:	461a      	mov	r2, r3
 800e068:	4601      	mov	r1, r0
 800e06a:	4648      	mov	r0, r9
 800e06c:	f000 fbf4 	bl	800e858 <__pow5mult>
 800e070:	9b07      	ldr	r3, [sp, #28]
 800e072:	4604      	mov	r4, r0
 800e074:	2b01      	cmp	r3, #1
 800e076:	f300 809f 	bgt.w	800e1b8 <_dtoa_r+0x8f8>
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f040 8097 	bne.w	800e1b0 <_dtoa_r+0x8f0>
 800e082:	9b05      	ldr	r3, [sp, #20]
 800e084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f040 8093 	bne.w	800e1b4 <_dtoa_r+0x8f4>
 800e08e:	9b05      	ldr	r3, [sp, #20]
 800e090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e094:	0d1b      	lsrs	r3, r3, #20
 800e096:	051b      	lsls	r3, r3, #20
 800e098:	b133      	cbz	r3, 800e0a8 <_dtoa_r+0x7e8>
 800e09a:	9b00      	ldr	r3, [sp, #0]
 800e09c:	3301      	adds	r3, #1
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	9b06      	ldr	r3, [sp, #24]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	9306      	str	r3, [sp, #24]
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	9308      	str	r3, [sp, #32]
 800e0aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 81b9 	beq.w	800e424 <_dtoa_r+0xb64>
 800e0b2:	6923      	ldr	r3, [r4, #16]
 800e0b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0b8:	6918      	ldr	r0, [r3, #16]
 800e0ba:	f000 fac7 	bl	800e64c <__hi0bits>
 800e0be:	f1c0 0020 	rsb	r0, r0, #32
 800e0c2:	9b06      	ldr	r3, [sp, #24]
 800e0c4:	4418      	add	r0, r3
 800e0c6:	f010 001f 	ands.w	r0, r0, #31
 800e0ca:	f000 8082 	beq.w	800e1d2 <_dtoa_r+0x912>
 800e0ce:	f1c0 0320 	rsb	r3, r0, #32
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	dd73      	ble.n	800e1be <_dtoa_r+0x8fe>
 800e0d6:	f1c0 001c 	rsb	r0, r0, #28
 800e0da:	9b00      	ldr	r3, [sp, #0]
 800e0dc:	4403      	add	r3, r0
 800e0de:	4406      	add	r6, r0
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	9b06      	ldr	r3, [sp, #24]
 800e0e4:	4403      	add	r3, r0
 800e0e6:	9306      	str	r3, [sp, #24]
 800e0e8:	9b00      	ldr	r3, [sp, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	dd05      	ble.n	800e0fa <_dtoa_r+0x83a>
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	9902      	ldr	r1, [sp, #8]
 800e0f2:	4648      	mov	r0, r9
 800e0f4:	f000 fc0a 	bl	800e90c <__lshift>
 800e0f8:	9002      	str	r0, [sp, #8]
 800e0fa:	9b06      	ldr	r3, [sp, #24]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	dd05      	ble.n	800e10c <_dtoa_r+0x84c>
 800e100:	4621      	mov	r1, r4
 800e102:	461a      	mov	r2, r3
 800e104:	4648      	mov	r0, r9
 800e106:	f000 fc01 	bl	800e90c <__lshift>
 800e10a:	4604      	mov	r4, r0
 800e10c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d061      	beq.n	800e1d6 <_dtoa_r+0x916>
 800e112:	4621      	mov	r1, r4
 800e114:	9802      	ldr	r0, [sp, #8]
 800e116:	f000 fc65 	bl	800e9e4 <__mcmp>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	da5b      	bge.n	800e1d6 <_dtoa_r+0x916>
 800e11e:	2300      	movs	r3, #0
 800e120:	220a      	movs	r2, #10
 800e122:	9902      	ldr	r1, [sp, #8]
 800e124:	4648      	mov	r0, r9
 800e126:	f000 fa49 	bl	800e5bc <__multadd>
 800e12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e12c:	f107 38ff 	add.w	r8, r7, #4294967295
 800e130:	9002      	str	r0, [sp, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 8178 	beq.w	800e428 <_dtoa_r+0xb68>
 800e138:	4629      	mov	r1, r5
 800e13a:	2300      	movs	r3, #0
 800e13c:	220a      	movs	r2, #10
 800e13e:	4648      	mov	r0, r9
 800e140:	f000 fa3c 	bl	800e5bc <__multadd>
 800e144:	f1bb 0f00 	cmp.w	fp, #0
 800e148:	4605      	mov	r5, r0
 800e14a:	dc6f      	bgt.n	800e22c <_dtoa_r+0x96c>
 800e14c:	9b07      	ldr	r3, [sp, #28]
 800e14e:	2b02      	cmp	r3, #2
 800e150:	dc49      	bgt.n	800e1e6 <_dtoa_r+0x926>
 800e152:	e06b      	b.n	800e22c <_dtoa_r+0x96c>
 800e154:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e156:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e15a:	e73c      	b.n	800dfd6 <_dtoa_r+0x716>
 800e15c:	3fe00000 	.word	0x3fe00000
 800e160:	40240000 	.word	0x40240000
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	1e5c      	subs	r4, r3, #1
 800e168:	9b08      	ldr	r3, [sp, #32]
 800e16a:	42a3      	cmp	r3, r4
 800e16c:	db09      	blt.n	800e182 <_dtoa_r+0x8c2>
 800e16e:	1b1c      	subs	r4, r3, r4
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f6bf af30 	bge.w	800dfd8 <_dtoa_r+0x718>
 800e178:	9b00      	ldr	r3, [sp, #0]
 800e17a:	9a03      	ldr	r2, [sp, #12]
 800e17c:	1a9e      	subs	r6, r3, r2
 800e17e:	2300      	movs	r3, #0
 800e180:	e72b      	b.n	800dfda <_dtoa_r+0x71a>
 800e182:	9b08      	ldr	r3, [sp, #32]
 800e184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e186:	1ae3      	subs	r3, r4, r3
 800e188:	9408      	str	r4, [sp, #32]
 800e18a:	9e00      	ldr	r6, [sp, #0]
 800e18c:	2400      	movs	r4, #0
 800e18e:	441a      	add	r2, r3
 800e190:	9b03      	ldr	r3, [sp, #12]
 800e192:	920d      	str	r2, [sp, #52]	@ 0x34
 800e194:	e721      	b.n	800dfda <_dtoa_r+0x71a>
 800e196:	9c08      	ldr	r4, [sp, #32]
 800e198:	9e00      	ldr	r6, [sp, #0]
 800e19a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e19c:	e728      	b.n	800dff0 <_dtoa_r+0x730>
 800e19e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e1a2:	e751      	b.n	800e048 <_dtoa_r+0x788>
 800e1a4:	9a08      	ldr	r2, [sp, #32]
 800e1a6:	9902      	ldr	r1, [sp, #8]
 800e1a8:	e750      	b.n	800e04c <_dtoa_r+0x78c>
 800e1aa:	f8cd 8008 	str.w	r8, [sp, #8]
 800e1ae:	e751      	b.n	800e054 <_dtoa_r+0x794>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e779      	b.n	800e0a8 <_dtoa_r+0x7e8>
 800e1b4:	9b04      	ldr	r3, [sp, #16]
 800e1b6:	e777      	b.n	800e0a8 <_dtoa_r+0x7e8>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	9308      	str	r3, [sp, #32]
 800e1bc:	e779      	b.n	800e0b2 <_dtoa_r+0x7f2>
 800e1be:	d093      	beq.n	800e0e8 <_dtoa_r+0x828>
 800e1c0:	331c      	adds	r3, #28
 800e1c2:	9a00      	ldr	r2, [sp, #0]
 800e1c4:	441a      	add	r2, r3
 800e1c6:	441e      	add	r6, r3
 800e1c8:	9200      	str	r2, [sp, #0]
 800e1ca:	9a06      	ldr	r2, [sp, #24]
 800e1cc:	441a      	add	r2, r3
 800e1ce:	9206      	str	r2, [sp, #24]
 800e1d0:	e78a      	b.n	800e0e8 <_dtoa_r+0x828>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	e7f4      	b.n	800e1c0 <_dtoa_r+0x900>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	46b8      	mov	r8, r7
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	dc20      	bgt.n	800e220 <_dtoa_r+0x960>
 800e1de:	469b      	mov	fp, r3
 800e1e0:	9b07      	ldr	r3, [sp, #28]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	dd1e      	ble.n	800e224 <_dtoa_r+0x964>
 800e1e6:	f1bb 0f00 	cmp.w	fp, #0
 800e1ea:	f47f adb1 	bne.w	800dd50 <_dtoa_r+0x490>
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	465b      	mov	r3, fp
 800e1f2:	2205      	movs	r2, #5
 800e1f4:	4648      	mov	r0, r9
 800e1f6:	f000 f9e1 	bl	800e5bc <__multadd>
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	9802      	ldr	r0, [sp, #8]
 800e200:	f000 fbf0 	bl	800e9e4 <__mcmp>
 800e204:	2800      	cmp	r0, #0
 800e206:	f77f ada3 	ble.w	800dd50 <_dtoa_r+0x490>
 800e20a:	4656      	mov	r6, sl
 800e20c:	2331      	movs	r3, #49	@ 0x31
 800e20e:	f108 0801 	add.w	r8, r8, #1
 800e212:	f806 3b01 	strb.w	r3, [r6], #1
 800e216:	e59f      	b.n	800dd58 <_dtoa_r+0x498>
 800e218:	46b8      	mov	r8, r7
 800e21a:	9c03      	ldr	r4, [sp, #12]
 800e21c:	4625      	mov	r5, r4
 800e21e:	e7f4      	b.n	800e20a <_dtoa_r+0x94a>
 800e220:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 8102 	beq.w	800e430 <_dtoa_r+0xb70>
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	dd05      	ble.n	800e23c <_dtoa_r+0x97c>
 800e230:	4629      	mov	r1, r5
 800e232:	4632      	mov	r2, r6
 800e234:	4648      	mov	r0, r9
 800e236:	f000 fb69 	bl	800e90c <__lshift>
 800e23a:	4605      	mov	r5, r0
 800e23c:	9b08      	ldr	r3, [sp, #32]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d05c      	beq.n	800e2fc <_dtoa_r+0xa3c>
 800e242:	6869      	ldr	r1, [r5, #4]
 800e244:	4648      	mov	r0, r9
 800e246:	f000 f957 	bl	800e4f8 <_Balloc>
 800e24a:	4606      	mov	r6, r0
 800e24c:	b928      	cbnz	r0, 800e25a <_dtoa_r+0x99a>
 800e24e:	4b83      	ldr	r3, [pc, #524]	@ (800e45c <_dtoa_r+0xb9c>)
 800e250:	4602      	mov	r2, r0
 800e252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e256:	f7ff bb4a 	b.w	800d8ee <_dtoa_r+0x2e>
 800e25a:	692a      	ldr	r2, [r5, #16]
 800e25c:	f105 010c 	add.w	r1, r5, #12
 800e260:	300c      	adds	r0, #12
 800e262:	3202      	adds	r2, #2
 800e264:	0092      	lsls	r2, r2, #2
 800e266:	f7ff fa8e 	bl	800d786 <memcpy>
 800e26a:	2201      	movs	r2, #1
 800e26c:	4631      	mov	r1, r6
 800e26e:	4648      	mov	r0, r9
 800e270:	f000 fb4c 	bl	800e90c <__lshift>
 800e274:	f10a 0301 	add.w	r3, sl, #1
 800e278:	462f      	mov	r7, r5
 800e27a:	4605      	mov	r5, r0
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	eb0a 030b 	add.w	r3, sl, fp
 800e282:	9308      	str	r3, [sp, #32]
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	9306      	str	r3, [sp, #24]
 800e28c:	9b00      	ldr	r3, [sp, #0]
 800e28e:	4621      	mov	r1, r4
 800e290:	9802      	ldr	r0, [sp, #8]
 800e292:	f103 3bff 	add.w	fp, r3, #4294967295
 800e296:	f7ff fa83 	bl	800d7a0 <quorem>
 800e29a:	4603      	mov	r3, r0
 800e29c:	4639      	mov	r1, r7
 800e29e:	9003      	str	r0, [sp, #12]
 800e2a0:	3330      	adds	r3, #48	@ 0x30
 800e2a2:	9802      	ldr	r0, [sp, #8]
 800e2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2a6:	f000 fb9d 	bl	800e9e4 <__mcmp>
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	9004      	str	r0, [sp, #16]
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	4648      	mov	r0, r9
 800e2b2:	f000 fbb3 	bl	800ea1c <__mdiff>
 800e2b6:	68c2      	ldr	r2, [r0, #12]
 800e2b8:	4606      	mov	r6, r0
 800e2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2bc:	bb02      	cbnz	r2, 800e300 <_dtoa_r+0xa40>
 800e2be:	4601      	mov	r1, r0
 800e2c0:	9802      	ldr	r0, [sp, #8]
 800e2c2:	f000 fb8f 	bl	800e9e4 <__mcmp>
 800e2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	4631      	mov	r1, r6
 800e2cc:	4648      	mov	r0, r9
 800e2ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800e2d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2d2:	f000 f951 	bl	800e578 <_Bfree>
 800e2d6:	9b07      	ldr	r3, [sp, #28]
 800e2d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e2da:	9e00      	ldr	r6, [sp, #0]
 800e2dc:	ea42 0103 	orr.w	r1, r2, r3
 800e2e0:	9b06      	ldr	r3, [sp, #24]
 800e2e2:	4319      	orrs	r1, r3
 800e2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e6:	d10d      	bne.n	800e304 <_dtoa_r+0xa44>
 800e2e8:	2b39      	cmp	r3, #57	@ 0x39
 800e2ea:	d027      	beq.n	800e33c <_dtoa_r+0xa7c>
 800e2ec:	9a04      	ldr	r2, [sp, #16]
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	dd01      	ble.n	800e2f6 <_dtoa_r+0xa36>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	3331      	adds	r3, #49	@ 0x31
 800e2f6:	f88b 3000 	strb.w	r3, [fp]
 800e2fa:	e52e      	b.n	800dd5a <_dtoa_r+0x49a>
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	e7b9      	b.n	800e274 <_dtoa_r+0x9b4>
 800e300:	2201      	movs	r2, #1
 800e302:	e7e2      	b.n	800e2ca <_dtoa_r+0xa0a>
 800e304:	9904      	ldr	r1, [sp, #16]
 800e306:	2900      	cmp	r1, #0
 800e308:	db04      	blt.n	800e314 <_dtoa_r+0xa54>
 800e30a:	9807      	ldr	r0, [sp, #28]
 800e30c:	4301      	orrs	r1, r0
 800e30e:	9806      	ldr	r0, [sp, #24]
 800e310:	4301      	orrs	r1, r0
 800e312:	d120      	bne.n	800e356 <_dtoa_r+0xa96>
 800e314:	2a00      	cmp	r2, #0
 800e316:	ddee      	ble.n	800e2f6 <_dtoa_r+0xa36>
 800e318:	2201      	movs	r2, #1
 800e31a:	9902      	ldr	r1, [sp, #8]
 800e31c:	4648      	mov	r0, r9
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	f000 faf4 	bl	800e90c <__lshift>
 800e324:	4621      	mov	r1, r4
 800e326:	9002      	str	r0, [sp, #8]
 800e328:	f000 fb5c 	bl	800e9e4 <__mcmp>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	9b00      	ldr	r3, [sp, #0]
 800e330:	dc02      	bgt.n	800e338 <_dtoa_r+0xa78>
 800e332:	d1e0      	bne.n	800e2f6 <_dtoa_r+0xa36>
 800e334:	07da      	lsls	r2, r3, #31
 800e336:	d5de      	bpl.n	800e2f6 <_dtoa_r+0xa36>
 800e338:	2b39      	cmp	r3, #57	@ 0x39
 800e33a:	d1da      	bne.n	800e2f2 <_dtoa_r+0xa32>
 800e33c:	2339      	movs	r3, #57	@ 0x39
 800e33e:	f88b 3000 	strb.w	r3, [fp]
 800e342:	4633      	mov	r3, r6
 800e344:	461e      	mov	r6, r3
 800e346:	3b01      	subs	r3, #1
 800e348:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e34c:	2a39      	cmp	r2, #57	@ 0x39
 800e34e:	d04f      	beq.n	800e3f0 <_dtoa_r+0xb30>
 800e350:	3201      	adds	r2, #1
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	e501      	b.n	800dd5a <_dtoa_r+0x49a>
 800e356:	2a00      	cmp	r2, #0
 800e358:	dd03      	ble.n	800e362 <_dtoa_r+0xaa2>
 800e35a:	2b39      	cmp	r3, #57	@ 0x39
 800e35c:	d0ee      	beq.n	800e33c <_dtoa_r+0xa7c>
 800e35e:	3301      	adds	r3, #1
 800e360:	e7c9      	b.n	800e2f6 <_dtoa_r+0xa36>
 800e362:	9a00      	ldr	r2, [sp, #0]
 800e364:	9908      	ldr	r1, [sp, #32]
 800e366:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e36a:	428a      	cmp	r2, r1
 800e36c:	d029      	beq.n	800e3c2 <_dtoa_r+0xb02>
 800e36e:	2300      	movs	r3, #0
 800e370:	220a      	movs	r2, #10
 800e372:	9902      	ldr	r1, [sp, #8]
 800e374:	4648      	mov	r0, r9
 800e376:	f000 f921 	bl	800e5bc <__multadd>
 800e37a:	42af      	cmp	r7, r5
 800e37c:	9002      	str	r0, [sp, #8]
 800e37e:	f04f 0300 	mov.w	r3, #0
 800e382:	f04f 020a 	mov.w	r2, #10
 800e386:	4639      	mov	r1, r7
 800e388:	4648      	mov	r0, r9
 800e38a:	d107      	bne.n	800e39c <_dtoa_r+0xadc>
 800e38c:	f000 f916 	bl	800e5bc <__multadd>
 800e390:	4607      	mov	r7, r0
 800e392:	4605      	mov	r5, r0
 800e394:	9b00      	ldr	r3, [sp, #0]
 800e396:	3301      	adds	r3, #1
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	e777      	b.n	800e28c <_dtoa_r+0x9cc>
 800e39c:	f000 f90e 	bl	800e5bc <__multadd>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4607      	mov	r7, r0
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	220a      	movs	r2, #10
 800e3a8:	4648      	mov	r0, r9
 800e3aa:	f000 f907 	bl	800e5bc <__multadd>
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	e7f0      	b.n	800e394 <_dtoa_r+0xad4>
 800e3b2:	f1bb 0f00 	cmp.w	fp, #0
 800e3b6:	f04f 0700 	mov.w	r7, #0
 800e3ba:	bfcc      	ite	gt
 800e3bc:	465e      	movgt	r6, fp
 800e3be:	2601      	movle	r6, #1
 800e3c0:	4456      	add	r6, sl
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	9902      	ldr	r1, [sp, #8]
 800e3c6:	4648      	mov	r0, r9
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	f000 fa9f 	bl	800e90c <__lshift>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	9002      	str	r0, [sp, #8]
 800e3d2:	f000 fb07 	bl	800e9e4 <__mcmp>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	dcb3      	bgt.n	800e342 <_dtoa_r+0xa82>
 800e3da:	d102      	bne.n	800e3e2 <_dtoa_r+0xb22>
 800e3dc:	9b00      	ldr	r3, [sp, #0]
 800e3de:	07db      	lsls	r3, r3, #31
 800e3e0:	d4af      	bmi.n	800e342 <_dtoa_r+0xa82>
 800e3e2:	4633      	mov	r3, r6
 800e3e4:	461e      	mov	r6, r3
 800e3e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3ea:	2a30      	cmp	r2, #48	@ 0x30
 800e3ec:	d0fa      	beq.n	800e3e4 <_dtoa_r+0xb24>
 800e3ee:	e4b4      	b.n	800dd5a <_dtoa_r+0x49a>
 800e3f0:	459a      	cmp	sl, r3
 800e3f2:	d1a7      	bne.n	800e344 <_dtoa_r+0xa84>
 800e3f4:	2331      	movs	r3, #49	@ 0x31
 800e3f6:	f108 0801 	add.w	r8, r8, #1
 800e3fa:	f88a 3000 	strb.w	r3, [sl]
 800e3fe:	e4ac      	b.n	800dd5a <_dtoa_r+0x49a>
 800e400:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e402:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e460 <_dtoa_r+0xba0>
 800e406:	b11b      	cbz	r3, 800e410 <_dtoa_r+0xb50>
 800e408:	f10a 0308 	add.w	r3, sl, #8
 800e40c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	4650      	mov	r0, sl
 800e412:	b017      	add	sp, #92	@ 0x5c
 800e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e418:	9b07      	ldr	r3, [sp, #28]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	f77f ae2d 	ble.w	800e07a <_dtoa_r+0x7ba>
 800e420:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e422:	9308      	str	r3, [sp, #32]
 800e424:	2001      	movs	r0, #1
 800e426:	e64c      	b.n	800e0c2 <_dtoa_r+0x802>
 800e428:	f1bb 0f00 	cmp.w	fp, #0
 800e42c:	f77f aed8 	ble.w	800e1e0 <_dtoa_r+0x920>
 800e430:	4656      	mov	r6, sl
 800e432:	4621      	mov	r1, r4
 800e434:	9802      	ldr	r0, [sp, #8]
 800e436:	f7ff f9b3 	bl	800d7a0 <quorem>
 800e43a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e43e:	f806 3b01 	strb.w	r3, [r6], #1
 800e442:	eba6 020a 	sub.w	r2, r6, sl
 800e446:	4593      	cmp	fp, r2
 800e448:	ddb3      	ble.n	800e3b2 <_dtoa_r+0xaf2>
 800e44a:	2300      	movs	r3, #0
 800e44c:	220a      	movs	r2, #10
 800e44e:	9902      	ldr	r1, [sp, #8]
 800e450:	4648      	mov	r0, r9
 800e452:	f000 f8b3 	bl	800e5bc <__multadd>
 800e456:	9002      	str	r0, [sp, #8]
 800e458:	e7eb      	b.n	800e432 <_dtoa_r+0xb72>
 800e45a:	bf00      	nop
 800e45c:	0801e660 	.word	0x0801e660
 800e460:	0801e5e4 	.word	0x0801e5e4

0800e464 <_free_r>:
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4605      	mov	r5, r0
 800e468:	2900      	cmp	r1, #0
 800e46a:	d041      	beq.n	800e4f0 <_free_r+0x8c>
 800e46c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e470:	1f0c      	subs	r4, r1, #4
 800e472:	2b00      	cmp	r3, #0
 800e474:	bfb8      	it	lt
 800e476:	18e4      	addlt	r4, r4, r3
 800e478:	f7fe faa2 	bl	800c9c0 <__malloc_lock>
 800e47c:	4a1d      	ldr	r2, [pc, #116]	@ (800e4f4 <_free_r+0x90>)
 800e47e:	6813      	ldr	r3, [r2, #0]
 800e480:	b933      	cbnz	r3, 800e490 <_free_r+0x2c>
 800e482:	6063      	str	r3, [r4, #4]
 800e484:	6014      	str	r4, [r2, #0]
 800e486:	4628      	mov	r0, r5
 800e488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e48c:	f7fe ba9e 	b.w	800c9cc <__malloc_unlock>
 800e490:	42a3      	cmp	r3, r4
 800e492:	d908      	bls.n	800e4a6 <_free_r+0x42>
 800e494:	6820      	ldr	r0, [r4, #0]
 800e496:	1821      	adds	r1, r4, r0
 800e498:	428b      	cmp	r3, r1
 800e49a:	bf01      	itttt	eq
 800e49c:	6819      	ldreq	r1, [r3, #0]
 800e49e:	685b      	ldreq	r3, [r3, #4]
 800e4a0:	1809      	addeq	r1, r1, r0
 800e4a2:	6021      	streq	r1, [r4, #0]
 800e4a4:	e7ed      	b.n	800e482 <_free_r+0x1e>
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	b10b      	cbz	r3, 800e4b0 <_free_r+0x4c>
 800e4ac:	42a3      	cmp	r3, r4
 800e4ae:	d9fa      	bls.n	800e4a6 <_free_r+0x42>
 800e4b0:	6811      	ldr	r1, [r2, #0]
 800e4b2:	1850      	adds	r0, r2, r1
 800e4b4:	42a0      	cmp	r0, r4
 800e4b6:	d10b      	bne.n	800e4d0 <_free_r+0x6c>
 800e4b8:	6820      	ldr	r0, [r4, #0]
 800e4ba:	4401      	add	r1, r0
 800e4bc:	1850      	adds	r0, r2, r1
 800e4be:	6011      	str	r1, [r2, #0]
 800e4c0:	4283      	cmp	r3, r0
 800e4c2:	d1e0      	bne.n	800e486 <_free_r+0x22>
 800e4c4:	6818      	ldr	r0, [r3, #0]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	4408      	add	r0, r1
 800e4ca:	6053      	str	r3, [r2, #4]
 800e4cc:	6010      	str	r0, [r2, #0]
 800e4ce:	e7da      	b.n	800e486 <_free_r+0x22>
 800e4d0:	d902      	bls.n	800e4d8 <_free_r+0x74>
 800e4d2:	230c      	movs	r3, #12
 800e4d4:	602b      	str	r3, [r5, #0]
 800e4d6:	e7d6      	b.n	800e486 <_free_r+0x22>
 800e4d8:	6820      	ldr	r0, [r4, #0]
 800e4da:	1821      	adds	r1, r4, r0
 800e4dc:	428b      	cmp	r3, r1
 800e4de:	bf02      	ittt	eq
 800e4e0:	6819      	ldreq	r1, [r3, #0]
 800e4e2:	685b      	ldreq	r3, [r3, #4]
 800e4e4:	1809      	addeq	r1, r1, r0
 800e4e6:	6063      	str	r3, [r4, #4]
 800e4e8:	bf08      	it	eq
 800e4ea:	6021      	streq	r1, [r4, #0]
 800e4ec:	6054      	str	r4, [r2, #4]
 800e4ee:	e7ca      	b.n	800e486 <_free_r+0x22>
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	bf00      	nop
 800e4f4:	2007af74 	.word	0x2007af74

0800e4f8 <_Balloc>:
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	69c6      	ldr	r6, [r0, #28]
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	460d      	mov	r5, r1
 800e500:	b976      	cbnz	r6, 800e520 <_Balloc+0x28>
 800e502:	2010      	movs	r0, #16
 800e504:	f7fe f9b2 	bl	800c86c <malloc>
 800e508:	4602      	mov	r2, r0
 800e50a:	61e0      	str	r0, [r4, #28]
 800e50c:	b920      	cbnz	r0, 800e518 <_Balloc+0x20>
 800e50e:	4b18      	ldr	r3, [pc, #96]	@ (800e570 <_Balloc+0x78>)
 800e510:	216b      	movs	r1, #107	@ 0x6b
 800e512:	4818      	ldr	r0, [pc, #96]	@ (800e574 <_Balloc+0x7c>)
 800e514:	f000 fd7e 	bl	800f014 <__assert_func>
 800e518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e51c:	6006      	str	r6, [r0, #0]
 800e51e:	60c6      	str	r6, [r0, #12]
 800e520:	69e6      	ldr	r6, [r4, #28]
 800e522:	68f3      	ldr	r3, [r6, #12]
 800e524:	b183      	cbz	r3, 800e548 <_Balloc+0x50>
 800e526:	69e3      	ldr	r3, [r4, #28]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e52e:	b9b8      	cbnz	r0, 800e560 <_Balloc+0x68>
 800e530:	2101      	movs	r1, #1
 800e532:	4620      	mov	r0, r4
 800e534:	fa01 f605 	lsl.w	r6, r1, r5
 800e538:	1d72      	adds	r2, r6, #5
 800e53a:	0092      	lsls	r2, r2, #2
 800e53c:	f000 fd88 	bl	800f050 <_calloc_r>
 800e540:	b160      	cbz	r0, 800e55c <_Balloc+0x64>
 800e542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e546:	e00e      	b.n	800e566 <_Balloc+0x6e>
 800e548:	2221      	movs	r2, #33	@ 0x21
 800e54a:	2104      	movs	r1, #4
 800e54c:	4620      	mov	r0, r4
 800e54e:	f000 fd7f 	bl	800f050 <_calloc_r>
 800e552:	69e3      	ldr	r3, [r4, #28]
 800e554:	60f0      	str	r0, [r6, #12]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e4      	bne.n	800e526 <_Balloc+0x2e>
 800e55c:	2000      	movs	r0, #0
 800e55e:	bd70      	pop	{r4, r5, r6, pc}
 800e560:	6802      	ldr	r2, [r0, #0]
 800e562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e566:	2300      	movs	r3, #0
 800e568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e56c:	e7f7      	b.n	800e55e <_Balloc+0x66>
 800e56e:	bf00      	nop
 800e570:	0801e5f1 	.word	0x0801e5f1
 800e574:	0801e671 	.word	0x0801e671

0800e578 <_Bfree>:
 800e578:	b570      	push	{r4, r5, r6, lr}
 800e57a:	69c6      	ldr	r6, [r0, #28]
 800e57c:	4605      	mov	r5, r0
 800e57e:	460c      	mov	r4, r1
 800e580:	b976      	cbnz	r6, 800e5a0 <_Bfree+0x28>
 800e582:	2010      	movs	r0, #16
 800e584:	f7fe f972 	bl	800c86c <malloc>
 800e588:	4602      	mov	r2, r0
 800e58a:	61e8      	str	r0, [r5, #28]
 800e58c:	b920      	cbnz	r0, 800e598 <_Bfree+0x20>
 800e58e:	4b09      	ldr	r3, [pc, #36]	@ (800e5b4 <_Bfree+0x3c>)
 800e590:	218f      	movs	r1, #143	@ 0x8f
 800e592:	4809      	ldr	r0, [pc, #36]	@ (800e5b8 <_Bfree+0x40>)
 800e594:	f000 fd3e 	bl	800f014 <__assert_func>
 800e598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e59c:	6006      	str	r6, [r0, #0]
 800e59e:	60c6      	str	r6, [r0, #12]
 800e5a0:	b13c      	cbz	r4, 800e5b2 <_Bfree+0x3a>
 800e5a2:	69eb      	ldr	r3, [r5, #28]
 800e5a4:	6862      	ldr	r2, [r4, #4]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5ac:	6021      	str	r1, [r4, #0]
 800e5ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	0801e5f1 	.word	0x0801e5f1
 800e5b8:	0801e671 	.word	0x0801e671

0800e5bc <__multadd>:
 800e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c0:	f101 0c14 	add.w	ip, r1, #20
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	460c      	mov	r4, r1
 800e5c8:	461e      	mov	r6, r3
 800e5ca:	690d      	ldr	r5, [r1, #16]
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	f8dc 3000 	ldr.w	r3, [ip]
 800e5d2:	3001      	adds	r0, #1
 800e5d4:	b299      	uxth	r1, r3
 800e5d6:	4285      	cmp	r5, r0
 800e5d8:	fb02 6101 	mla	r1, r2, r1, r6
 800e5dc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5e0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e5e4:	b289      	uxth	r1, r1
 800e5e6:	fb02 3306 	mla	r3, r2, r6, r3
 800e5ea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5f2:	f84c 1b04 	str.w	r1, [ip], #4
 800e5f6:	dcea      	bgt.n	800e5ce <__multadd+0x12>
 800e5f8:	b30e      	cbz	r6, 800e63e <__multadd+0x82>
 800e5fa:	68a3      	ldr	r3, [r4, #8]
 800e5fc:	42ab      	cmp	r3, r5
 800e5fe:	dc19      	bgt.n	800e634 <__multadd+0x78>
 800e600:	6861      	ldr	r1, [r4, #4]
 800e602:	4638      	mov	r0, r7
 800e604:	3101      	adds	r1, #1
 800e606:	f7ff ff77 	bl	800e4f8 <_Balloc>
 800e60a:	4680      	mov	r8, r0
 800e60c:	b928      	cbnz	r0, 800e61a <__multadd+0x5e>
 800e60e:	4602      	mov	r2, r0
 800e610:	4b0c      	ldr	r3, [pc, #48]	@ (800e644 <__multadd+0x88>)
 800e612:	21ba      	movs	r1, #186	@ 0xba
 800e614:	480c      	ldr	r0, [pc, #48]	@ (800e648 <__multadd+0x8c>)
 800e616:	f000 fcfd 	bl	800f014 <__assert_func>
 800e61a:	6922      	ldr	r2, [r4, #16]
 800e61c:	f104 010c 	add.w	r1, r4, #12
 800e620:	300c      	adds	r0, #12
 800e622:	3202      	adds	r2, #2
 800e624:	0092      	lsls	r2, r2, #2
 800e626:	f7ff f8ae 	bl	800d786 <memcpy>
 800e62a:	4621      	mov	r1, r4
 800e62c:	4644      	mov	r4, r8
 800e62e:	4638      	mov	r0, r7
 800e630:	f7ff ffa2 	bl	800e578 <_Bfree>
 800e634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e638:	3501      	adds	r5, #1
 800e63a:	615e      	str	r6, [r3, #20]
 800e63c:	6125      	str	r5, [r4, #16]
 800e63e:	4620      	mov	r0, r4
 800e640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e644:	0801e660 	.word	0x0801e660
 800e648:	0801e671 	.word	0x0801e671

0800e64c <__hi0bits>:
 800e64c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e650:	4603      	mov	r3, r0
 800e652:	bf36      	itet	cc
 800e654:	0403      	lslcc	r3, r0, #16
 800e656:	2000      	movcs	r0, #0
 800e658:	2010      	movcc	r0, #16
 800e65a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e65e:	bf3c      	itt	cc
 800e660:	021b      	lslcc	r3, r3, #8
 800e662:	3008      	addcc	r0, #8
 800e664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e668:	bf3c      	itt	cc
 800e66a:	011b      	lslcc	r3, r3, #4
 800e66c:	3004      	addcc	r0, #4
 800e66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e672:	bf3c      	itt	cc
 800e674:	009b      	lslcc	r3, r3, #2
 800e676:	3002      	addcc	r0, #2
 800e678:	2b00      	cmp	r3, #0
 800e67a:	db05      	blt.n	800e688 <__hi0bits+0x3c>
 800e67c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e680:	f100 0001 	add.w	r0, r0, #1
 800e684:	bf08      	it	eq
 800e686:	2020      	moveq	r0, #32
 800e688:	4770      	bx	lr

0800e68a <__lo0bits>:
 800e68a:	6803      	ldr	r3, [r0, #0]
 800e68c:	4602      	mov	r2, r0
 800e68e:	f013 0007 	ands.w	r0, r3, #7
 800e692:	d00b      	beq.n	800e6ac <__lo0bits+0x22>
 800e694:	07d9      	lsls	r1, r3, #31
 800e696:	d421      	bmi.n	800e6dc <__lo0bits+0x52>
 800e698:	0798      	lsls	r0, r3, #30
 800e69a:	bf47      	ittee	mi
 800e69c:	085b      	lsrmi	r3, r3, #1
 800e69e:	2001      	movmi	r0, #1
 800e6a0:	089b      	lsrpl	r3, r3, #2
 800e6a2:	2002      	movpl	r0, #2
 800e6a4:	bf4c      	ite	mi
 800e6a6:	6013      	strmi	r3, [r2, #0]
 800e6a8:	6013      	strpl	r3, [r2, #0]
 800e6aa:	4770      	bx	lr
 800e6ac:	b299      	uxth	r1, r3
 800e6ae:	b909      	cbnz	r1, 800e6b4 <__lo0bits+0x2a>
 800e6b0:	0c1b      	lsrs	r3, r3, #16
 800e6b2:	2010      	movs	r0, #16
 800e6b4:	b2d9      	uxtb	r1, r3
 800e6b6:	b909      	cbnz	r1, 800e6bc <__lo0bits+0x32>
 800e6b8:	3008      	adds	r0, #8
 800e6ba:	0a1b      	lsrs	r3, r3, #8
 800e6bc:	0719      	lsls	r1, r3, #28
 800e6be:	bf04      	itt	eq
 800e6c0:	091b      	lsreq	r3, r3, #4
 800e6c2:	3004      	addeq	r0, #4
 800e6c4:	0799      	lsls	r1, r3, #30
 800e6c6:	bf04      	itt	eq
 800e6c8:	089b      	lsreq	r3, r3, #2
 800e6ca:	3002      	addeq	r0, #2
 800e6cc:	07d9      	lsls	r1, r3, #31
 800e6ce:	d403      	bmi.n	800e6d8 <__lo0bits+0x4e>
 800e6d0:	085b      	lsrs	r3, r3, #1
 800e6d2:	f100 0001 	add.w	r0, r0, #1
 800e6d6:	d003      	beq.n	800e6e0 <__lo0bits+0x56>
 800e6d8:	6013      	str	r3, [r2, #0]
 800e6da:	4770      	bx	lr
 800e6dc:	2000      	movs	r0, #0
 800e6de:	4770      	bx	lr
 800e6e0:	2020      	movs	r0, #32
 800e6e2:	4770      	bx	lr

0800e6e4 <__i2b>:
 800e6e4:	b510      	push	{r4, lr}
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	f7ff ff05 	bl	800e4f8 <_Balloc>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	b928      	cbnz	r0, 800e6fe <__i2b+0x1a>
 800e6f2:	4b05      	ldr	r3, [pc, #20]	@ (800e708 <__i2b+0x24>)
 800e6f4:	f240 1145 	movw	r1, #325	@ 0x145
 800e6f8:	4804      	ldr	r0, [pc, #16]	@ (800e70c <__i2b+0x28>)
 800e6fa:	f000 fc8b 	bl	800f014 <__assert_func>
 800e6fe:	2301      	movs	r3, #1
 800e700:	6144      	str	r4, [r0, #20]
 800e702:	6103      	str	r3, [r0, #16]
 800e704:	bd10      	pop	{r4, pc}
 800e706:	bf00      	nop
 800e708:	0801e660 	.word	0x0801e660
 800e70c:	0801e671 	.word	0x0801e671

0800e710 <__multiply>:
 800e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e714:	4617      	mov	r7, r2
 800e716:	690a      	ldr	r2, [r1, #16]
 800e718:	4689      	mov	r9, r1
 800e71a:	b085      	sub	sp, #20
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	429a      	cmp	r2, r3
 800e720:	bfa2      	ittt	ge
 800e722:	463b      	movge	r3, r7
 800e724:	460f      	movge	r7, r1
 800e726:	4699      	movge	r9, r3
 800e728:	693d      	ldr	r5, [r7, #16]
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e730:	6879      	ldr	r1, [r7, #4]
 800e732:	eb05 060a 	add.w	r6, r5, sl
 800e736:	42b3      	cmp	r3, r6
 800e738:	bfb8      	it	lt
 800e73a:	3101      	addlt	r1, #1
 800e73c:	f7ff fedc 	bl	800e4f8 <_Balloc>
 800e740:	b930      	cbnz	r0, 800e750 <__multiply+0x40>
 800e742:	4602      	mov	r2, r0
 800e744:	4b42      	ldr	r3, [pc, #264]	@ (800e850 <__multiply+0x140>)
 800e746:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e74a:	4842      	ldr	r0, [pc, #264]	@ (800e854 <__multiply+0x144>)
 800e74c:	f000 fc62 	bl	800f014 <__assert_func>
 800e750:	f100 0414 	add.w	r4, r0, #20
 800e754:	2200      	movs	r2, #0
 800e756:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e75a:	4623      	mov	r3, r4
 800e75c:	4573      	cmp	r3, lr
 800e75e:	d320      	bcc.n	800e7a2 <__multiply+0x92>
 800e760:	f107 0814 	add.w	r8, r7, #20
 800e764:	f109 0114 	add.w	r1, r9, #20
 800e768:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e76c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e770:	9302      	str	r3, [sp, #8]
 800e772:	1beb      	subs	r3, r5, r7
 800e774:	3715      	adds	r7, #21
 800e776:	3b15      	subs	r3, #21
 800e778:	f023 0303 	bic.w	r3, r3, #3
 800e77c:	3304      	adds	r3, #4
 800e77e:	42bd      	cmp	r5, r7
 800e780:	bf38      	it	cc
 800e782:	2304      	movcc	r3, #4
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	9b02      	ldr	r3, [sp, #8]
 800e788:	9103      	str	r1, [sp, #12]
 800e78a:	428b      	cmp	r3, r1
 800e78c:	d80c      	bhi.n	800e7a8 <__multiply+0x98>
 800e78e:	2e00      	cmp	r6, #0
 800e790:	dd03      	ble.n	800e79a <__multiply+0x8a>
 800e792:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e796:	2b00      	cmp	r3, #0
 800e798:	d057      	beq.n	800e84a <__multiply+0x13a>
 800e79a:	6106      	str	r6, [r0, #16]
 800e79c:	b005      	add	sp, #20
 800e79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a2:	f843 2b04 	str.w	r2, [r3], #4
 800e7a6:	e7d9      	b.n	800e75c <__multiply+0x4c>
 800e7a8:	f8b1 a000 	ldrh.w	sl, [r1]
 800e7ac:	f1ba 0f00 	cmp.w	sl, #0
 800e7b0:	d021      	beq.n	800e7f6 <__multiply+0xe6>
 800e7b2:	46c4      	mov	ip, r8
 800e7b4:	46a1      	mov	r9, r4
 800e7b6:	2700      	movs	r7, #0
 800e7b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7bc:	f8d9 3000 	ldr.w	r3, [r9]
 800e7c0:	fa1f fb82 	uxth.w	fp, r2
 800e7c4:	4565      	cmp	r5, ip
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e7cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800e7d0:	443b      	add	r3, r7
 800e7d2:	f8d9 7000 	ldr.w	r7, [r9]
 800e7d6:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800e7da:	fb0a 7202 	mla	r2, sl, r2, r7
 800e7de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e7e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7ec:	f849 3b04 	str.w	r3, [r9], #4
 800e7f0:	d8e2      	bhi.n	800e7b8 <__multiply+0xa8>
 800e7f2:	9b01      	ldr	r3, [sp, #4]
 800e7f4:	50e7      	str	r7, [r4, r3]
 800e7f6:	9b03      	ldr	r3, [sp, #12]
 800e7f8:	3104      	adds	r1, #4
 800e7fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e7fe:	f1b9 0f00 	cmp.w	r9, #0
 800e802:	d020      	beq.n	800e846 <__multiply+0x136>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	4647      	mov	r7, r8
 800e808:	46a4      	mov	ip, r4
 800e80a:	f04f 0a00 	mov.w	sl, #0
 800e80e:	f8b7 b000 	ldrh.w	fp, [r7]
 800e812:	b29b      	uxth	r3, r3
 800e814:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e818:	fb09 220b 	mla	r2, r9, fp, r2
 800e81c:	4452      	add	r2, sl
 800e81e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e822:	f84c 3b04 	str.w	r3, [ip], #4
 800e826:	f857 3b04 	ldr.w	r3, [r7], #4
 800e82a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e82e:	f8bc 3000 	ldrh.w	r3, [ip]
 800e832:	42bd      	cmp	r5, r7
 800e834:	fb09 330a 	mla	r3, r9, sl, r3
 800e838:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e83c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e840:	d8e5      	bhi.n	800e80e <__multiply+0xfe>
 800e842:	9a01      	ldr	r2, [sp, #4]
 800e844:	50a3      	str	r3, [r4, r2]
 800e846:	3404      	adds	r4, #4
 800e848:	e79d      	b.n	800e786 <__multiply+0x76>
 800e84a:	3e01      	subs	r6, #1
 800e84c:	e79f      	b.n	800e78e <__multiply+0x7e>
 800e84e:	bf00      	nop
 800e850:	0801e660 	.word	0x0801e660
 800e854:	0801e671 	.word	0x0801e671

0800e858 <__pow5mult>:
 800e858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e85c:	4615      	mov	r5, r2
 800e85e:	f012 0203 	ands.w	r2, r2, #3
 800e862:	4607      	mov	r7, r0
 800e864:	460e      	mov	r6, r1
 800e866:	d007      	beq.n	800e878 <__pow5mult+0x20>
 800e868:	3a01      	subs	r2, #1
 800e86a:	4c25      	ldr	r4, [pc, #148]	@ (800e900 <__pow5mult+0xa8>)
 800e86c:	2300      	movs	r3, #0
 800e86e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e872:	f7ff fea3 	bl	800e5bc <__multadd>
 800e876:	4606      	mov	r6, r0
 800e878:	10ad      	asrs	r5, r5, #2
 800e87a:	d03d      	beq.n	800e8f8 <__pow5mult+0xa0>
 800e87c:	69fc      	ldr	r4, [r7, #28]
 800e87e:	b97c      	cbnz	r4, 800e8a0 <__pow5mult+0x48>
 800e880:	2010      	movs	r0, #16
 800e882:	f7fd fff3 	bl	800c86c <malloc>
 800e886:	4602      	mov	r2, r0
 800e888:	61f8      	str	r0, [r7, #28]
 800e88a:	b928      	cbnz	r0, 800e898 <__pow5mult+0x40>
 800e88c:	4b1d      	ldr	r3, [pc, #116]	@ (800e904 <__pow5mult+0xac>)
 800e88e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e892:	481d      	ldr	r0, [pc, #116]	@ (800e908 <__pow5mult+0xb0>)
 800e894:	f000 fbbe 	bl	800f014 <__assert_func>
 800e898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e89c:	6004      	str	r4, [r0, #0]
 800e89e:	60c4      	str	r4, [r0, #12]
 800e8a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e8a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8a8:	b94c      	cbnz	r4, 800e8be <__pow5mult+0x66>
 800e8aa:	f240 2171 	movw	r1, #625	@ 0x271
 800e8ae:	4638      	mov	r0, r7
 800e8b0:	f7ff ff18 	bl	800e6e4 <__i2b>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8bc:	6003      	str	r3, [r0, #0]
 800e8be:	f04f 0900 	mov.w	r9, #0
 800e8c2:	07eb      	lsls	r3, r5, #31
 800e8c4:	d50a      	bpl.n	800e8dc <__pow5mult+0x84>
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4622      	mov	r2, r4
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	f7ff ff20 	bl	800e710 <__multiply>
 800e8d0:	4680      	mov	r8, r0
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	4638      	mov	r0, r7
 800e8d6:	4646      	mov	r6, r8
 800e8d8:	f7ff fe4e 	bl	800e578 <_Bfree>
 800e8dc:	106d      	asrs	r5, r5, #1
 800e8de:	d00b      	beq.n	800e8f8 <__pow5mult+0xa0>
 800e8e0:	6820      	ldr	r0, [r4, #0]
 800e8e2:	b938      	cbnz	r0, 800e8f4 <__pow5mult+0x9c>
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	4638      	mov	r0, r7
 800e8ea:	f7ff ff11 	bl	800e710 <__multiply>
 800e8ee:	6020      	str	r0, [r4, #0]
 800e8f0:	f8c0 9000 	str.w	r9, [r0]
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	e7e4      	b.n	800e8c2 <__pow5mult+0x6a>
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	bf00      	nop
 800e900:	0801e724 	.word	0x0801e724
 800e904:	0801e5f1 	.word	0x0801e5f1
 800e908:	0801e671 	.word	0x0801e671

0800e90c <__lshift>:
 800e90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e910:	460c      	mov	r4, r1
 800e912:	4607      	mov	r7, r0
 800e914:	4691      	mov	r9, r2
 800e916:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e91a:	6923      	ldr	r3, [r4, #16]
 800e91c:	6849      	ldr	r1, [r1, #4]
 800e91e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e922:	68a3      	ldr	r3, [r4, #8]
 800e924:	f108 0601 	add.w	r6, r8, #1
 800e928:	42b3      	cmp	r3, r6
 800e92a:	db0b      	blt.n	800e944 <__lshift+0x38>
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7ff fde3 	bl	800e4f8 <_Balloc>
 800e932:	4605      	mov	r5, r0
 800e934:	b948      	cbnz	r0, 800e94a <__lshift+0x3e>
 800e936:	4602      	mov	r2, r0
 800e938:	4b28      	ldr	r3, [pc, #160]	@ (800e9dc <__lshift+0xd0>)
 800e93a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e93e:	4828      	ldr	r0, [pc, #160]	@ (800e9e0 <__lshift+0xd4>)
 800e940:	f000 fb68 	bl	800f014 <__assert_func>
 800e944:	3101      	adds	r1, #1
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	e7ee      	b.n	800e928 <__lshift+0x1c>
 800e94a:	2300      	movs	r3, #0
 800e94c:	f100 0114 	add.w	r1, r0, #20
 800e950:	f100 0210 	add.w	r2, r0, #16
 800e954:	4618      	mov	r0, r3
 800e956:	4553      	cmp	r3, sl
 800e958:	db33      	blt.n	800e9c2 <__lshift+0xb6>
 800e95a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e95e:	f104 0314 	add.w	r3, r4, #20
 800e962:	6920      	ldr	r0, [r4, #16]
 800e964:	f019 091f 	ands.w	r9, r9, #31
 800e968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e96c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e970:	d02b      	beq.n	800e9ca <__lshift+0xbe>
 800e972:	f1c9 0e20 	rsb	lr, r9, #32
 800e976:	468a      	mov	sl, r1
 800e978:	2200      	movs	r2, #0
 800e97a:	6818      	ldr	r0, [r3, #0]
 800e97c:	fa00 f009 	lsl.w	r0, r0, r9
 800e980:	4310      	orrs	r0, r2
 800e982:	f84a 0b04 	str.w	r0, [sl], #4
 800e986:	f853 2b04 	ldr.w	r2, [r3], #4
 800e98a:	459c      	cmp	ip, r3
 800e98c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e990:	d8f3      	bhi.n	800e97a <__lshift+0x6e>
 800e992:	ebac 0304 	sub.w	r3, ip, r4
 800e996:	f104 0015 	add.w	r0, r4, #21
 800e99a:	3b15      	subs	r3, #21
 800e99c:	f023 0303 	bic.w	r3, r3, #3
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	4560      	cmp	r0, ip
 800e9a4:	bf88      	it	hi
 800e9a6:	2304      	movhi	r3, #4
 800e9a8:	50ca      	str	r2, [r1, r3]
 800e9aa:	b10a      	cbz	r2, 800e9b0 <__lshift+0xa4>
 800e9ac:	f108 0602 	add.w	r6, r8, #2
 800e9b0:	3e01      	subs	r6, #1
 800e9b2:	4638      	mov	r0, r7
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	612e      	str	r6, [r5, #16]
 800e9b8:	f7ff fdde 	bl	800e578 <_Bfree>
 800e9bc:	4628      	mov	r0, r5
 800e9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9c8:	e7c5      	b.n	800e956 <__lshift+0x4a>
 800e9ca:	3904      	subs	r1, #4
 800e9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9d0:	459c      	cmp	ip, r3
 800e9d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9d6:	d8f9      	bhi.n	800e9cc <__lshift+0xc0>
 800e9d8:	e7ea      	b.n	800e9b0 <__lshift+0xa4>
 800e9da:	bf00      	nop
 800e9dc:	0801e660 	.word	0x0801e660
 800e9e0:	0801e671 	.word	0x0801e671

0800e9e4 <__mcmp>:
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	690a      	ldr	r2, [r1, #16]
 800e9e8:	6900      	ldr	r0, [r0, #16]
 800e9ea:	1a80      	subs	r0, r0, r2
 800e9ec:	b530      	push	{r4, r5, lr}
 800e9ee:	d10e      	bne.n	800ea0e <__mcmp+0x2a>
 800e9f0:	3314      	adds	r3, #20
 800e9f2:	3114      	adds	r1, #20
 800e9f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e9f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea04:	4295      	cmp	r5, r2
 800ea06:	d003      	beq.n	800ea10 <__mcmp+0x2c>
 800ea08:	d205      	bcs.n	800ea16 <__mcmp+0x32>
 800ea0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0e:	bd30      	pop	{r4, r5, pc}
 800ea10:	42a3      	cmp	r3, r4
 800ea12:	d3f3      	bcc.n	800e9fc <__mcmp+0x18>
 800ea14:	e7fb      	b.n	800ea0e <__mcmp+0x2a>
 800ea16:	2001      	movs	r0, #1
 800ea18:	e7f9      	b.n	800ea0e <__mcmp+0x2a>
	...

0800ea1c <__mdiff>:
 800ea1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	4689      	mov	r9, r1
 800ea22:	4606      	mov	r6, r0
 800ea24:	4611      	mov	r1, r2
 800ea26:	4614      	mov	r4, r2
 800ea28:	4648      	mov	r0, r9
 800ea2a:	f7ff ffdb 	bl	800e9e4 <__mcmp>
 800ea2e:	1e05      	subs	r5, r0, #0
 800ea30:	d112      	bne.n	800ea58 <__mdiff+0x3c>
 800ea32:	4629      	mov	r1, r5
 800ea34:	4630      	mov	r0, r6
 800ea36:	f7ff fd5f 	bl	800e4f8 <_Balloc>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	b928      	cbnz	r0, 800ea4a <__mdiff+0x2e>
 800ea3e:	4b41      	ldr	r3, [pc, #260]	@ (800eb44 <__mdiff+0x128>)
 800ea40:	f240 2137 	movw	r1, #567	@ 0x237
 800ea44:	4840      	ldr	r0, [pc, #256]	@ (800eb48 <__mdiff+0x12c>)
 800ea46:	f000 fae5 	bl	800f014 <__assert_func>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea50:	4610      	mov	r0, r2
 800ea52:	b003      	add	sp, #12
 800ea54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea58:	bfbc      	itt	lt
 800ea5a:	464b      	movlt	r3, r9
 800ea5c:	46a1      	movlt	r9, r4
 800ea5e:	4630      	mov	r0, r6
 800ea60:	bfb8      	it	lt
 800ea62:	2501      	movlt	r5, #1
 800ea64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea68:	bfb4      	ite	lt
 800ea6a:	461c      	movlt	r4, r3
 800ea6c:	2500      	movge	r5, #0
 800ea6e:	f7ff fd43 	bl	800e4f8 <_Balloc>
 800ea72:	4602      	mov	r2, r0
 800ea74:	b918      	cbnz	r0, 800ea7e <__mdiff+0x62>
 800ea76:	4b33      	ldr	r3, [pc, #204]	@ (800eb44 <__mdiff+0x128>)
 800ea78:	f240 2145 	movw	r1, #581	@ 0x245
 800ea7c:	e7e2      	b.n	800ea44 <__mdiff+0x28>
 800ea7e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea82:	f104 0e14 	add.w	lr, r4, #20
 800ea86:	6926      	ldr	r6, [r4, #16]
 800ea88:	f100 0b14 	add.w	fp, r0, #20
 800ea8c:	60c5      	str	r5, [r0, #12]
 800ea8e:	f109 0514 	add.w	r5, r9, #20
 800ea92:	f109 0310 	add.w	r3, r9, #16
 800ea96:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea9a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea9e:	46d9      	mov	r9, fp
 800eaa0:	f04f 0c00 	mov.w	ip, #0
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	9b01      	ldr	r3, [sp, #4]
 800eaa8:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eaac:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eab0:	4576      	cmp	r6, lr
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	fa1f f38a 	uxth.w	r3, sl
 800eab8:	4619      	mov	r1, r3
 800eaba:	b283      	uxth	r3, r0
 800eabc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800eac0:	eba1 0303 	sub.w	r3, r1, r3
 800eac4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eac8:	4463      	add	r3, ip
 800eaca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eace:	b29b      	uxth	r3, r3
 800ead0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ead4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ead8:	f849 3b04 	str.w	r3, [r9], #4
 800eadc:	d8e3      	bhi.n	800eaa6 <__mdiff+0x8a>
 800eade:	1b33      	subs	r3, r6, r4
 800eae0:	3415      	adds	r4, #21
 800eae2:	3b15      	subs	r3, #21
 800eae4:	f023 0303 	bic.w	r3, r3, #3
 800eae8:	3304      	adds	r3, #4
 800eaea:	42a6      	cmp	r6, r4
 800eaec:	bf38      	it	cc
 800eaee:	2304      	movcc	r3, #4
 800eaf0:	441d      	add	r5, r3
 800eaf2:	445b      	add	r3, fp
 800eaf4:	462c      	mov	r4, r5
 800eaf6:	461e      	mov	r6, r3
 800eaf8:	4544      	cmp	r4, r8
 800eafa:	d30e      	bcc.n	800eb1a <__mdiff+0xfe>
 800eafc:	f108 0103 	add.w	r1, r8, #3
 800eb00:	1b49      	subs	r1, r1, r5
 800eb02:	3d03      	subs	r5, #3
 800eb04:	f021 0103 	bic.w	r1, r1, #3
 800eb08:	45a8      	cmp	r8, r5
 800eb0a:	bf38      	it	cc
 800eb0c:	2100      	movcc	r1, #0
 800eb0e:	440b      	add	r3, r1
 800eb10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb14:	b199      	cbz	r1, 800eb3e <__mdiff+0x122>
 800eb16:	6117      	str	r7, [r2, #16]
 800eb18:	e79a      	b.n	800ea50 <__mdiff+0x34>
 800eb1a:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb1e:	46e6      	mov	lr, ip
 800eb20:	fa1f fc81 	uxth.w	ip, r1
 800eb24:	0c08      	lsrs	r0, r1, #16
 800eb26:	4471      	add	r1, lr
 800eb28:	44f4      	add	ip, lr
 800eb2a:	b289      	uxth	r1, r1
 800eb2c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb38:	f846 1b04 	str.w	r1, [r6], #4
 800eb3c:	e7dc      	b.n	800eaf8 <__mdiff+0xdc>
 800eb3e:	3f01      	subs	r7, #1
 800eb40:	e7e6      	b.n	800eb10 <__mdiff+0xf4>
 800eb42:	bf00      	nop
 800eb44:	0801e660 	.word	0x0801e660
 800eb48:	0801e671 	.word	0x0801e671

0800eb4c <__d2b>:
 800eb4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb50:	460f      	mov	r7, r1
 800eb52:	2101      	movs	r1, #1
 800eb54:	4616      	mov	r6, r2
 800eb56:	ec59 8b10 	vmov	r8, r9, d0
 800eb5a:	f7ff fccd 	bl	800e4f8 <_Balloc>
 800eb5e:	4604      	mov	r4, r0
 800eb60:	b930      	cbnz	r0, 800eb70 <__d2b+0x24>
 800eb62:	4602      	mov	r2, r0
 800eb64:	4b23      	ldr	r3, [pc, #140]	@ (800ebf4 <__d2b+0xa8>)
 800eb66:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb6a:	4823      	ldr	r0, [pc, #140]	@ (800ebf8 <__d2b+0xac>)
 800eb6c:	f000 fa52 	bl	800f014 <__assert_func>
 800eb70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb78:	b10d      	cbz	r5, 800eb7e <__d2b+0x32>
 800eb7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb7e:	9301      	str	r3, [sp, #4]
 800eb80:	f1b8 0300 	subs.w	r3, r8, #0
 800eb84:	d023      	beq.n	800ebce <__d2b+0x82>
 800eb86:	4668      	mov	r0, sp
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	f7ff fd7e 	bl	800e68a <__lo0bits>
 800eb8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb92:	b1d0      	cbz	r0, 800ebca <__d2b+0x7e>
 800eb94:	f1c0 0320 	rsb	r3, r0, #32
 800eb98:	fa02 f303 	lsl.w	r3, r2, r3
 800eb9c:	40c2      	lsrs	r2, r0
 800eb9e:	430b      	orrs	r3, r1
 800eba0:	9201      	str	r2, [sp, #4]
 800eba2:	6163      	str	r3, [r4, #20]
 800eba4:	9b01      	ldr	r3, [sp, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	61a3      	str	r3, [r4, #24]
 800ebaa:	bf0c      	ite	eq
 800ebac:	2201      	moveq	r2, #1
 800ebae:	2202      	movne	r2, #2
 800ebb0:	6122      	str	r2, [r4, #16]
 800ebb2:	b1a5      	cbz	r5, 800ebde <__d2b+0x92>
 800ebb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ebb8:	4405      	add	r5, r0
 800ebba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ebbe:	603d      	str	r5, [r7, #0]
 800ebc0:	6030      	str	r0, [r6, #0]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	b003      	add	sp, #12
 800ebc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebca:	6161      	str	r1, [r4, #20]
 800ebcc:	e7ea      	b.n	800eba4 <__d2b+0x58>
 800ebce:	a801      	add	r0, sp, #4
 800ebd0:	f7ff fd5b 	bl	800e68a <__lo0bits>
 800ebd4:	9b01      	ldr	r3, [sp, #4]
 800ebd6:	3020      	adds	r0, #32
 800ebd8:	2201      	movs	r2, #1
 800ebda:	6163      	str	r3, [r4, #20]
 800ebdc:	e7e8      	b.n	800ebb0 <__d2b+0x64>
 800ebde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ebe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebe6:	6038      	str	r0, [r7, #0]
 800ebe8:	6918      	ldr	r0, [r3, #16]
 800ebea:	f7ff fd2f 	bl	800e64c <__hi0bits>
 800ebee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebf2:	e7e5      	b.n	800ebc0 <__d2b+0x74>
 800ebf4:	0801e660 	.word	0x0801e660
 800ebf8:	0801e671 	.word	0x0801e671

0800ebfc <_malloc_usable_size_r>:
 800ebfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec00:	1f18      	subs	r0, r3, #4
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	bfbc      	itt	lt
 800ec06:	580b      	ldrlt	r3, [r1, r0]
 800ec08:	18c0      	addlt	r0, r0, r3
 800ec0a:	4770      	bx	lr

0800ec0c <__ssputs_r>:
 800ec0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec10:	461f      	mov	r7, r3
 800ec12:	688e      	ldr	r6, [r1, #8]
 800ec14:	4682      	mov	sl, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	42be      	cmp	r6, r7
 800ec1a:	4690      	mov	r8, r2
 800ec1c:	680b      	ldr	r3, [r1, #0]
 800ec1e:	d82d      	bhi.n	800ec7c <__ssputs_r+0x70>
 800ec20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ec28:	d026      	beq.n	800ec78 <__ssputs_r+0x6c>
 800ec2a:	6965      	ldr	r5, [r4, #20]
 800ec2c:	6909      	ldr	r1, [r1, #16]
 800ec2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec32:	eba3 0901 	sub.w	r9, r3, r1
 800ec36:	1c7b      	adds	r3, r7, #1
 800ec38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec3c:	444b      	add	r3, r9
 800ec3e:	106d      	asrs	r5, r5, #1
 800ec40:	429d      	cmp	r5, r3
 800ec42:	bf38      	it	cc
 800ec44:	461d      	movcc	r5, r3
 800ec46:	0553      	lsls	r3, r2, #21
 800ec48:	d527      	bpl.n	800ec9a <__ssputs_r+0x8e>
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7fd fe38 	bl	800c8c0 <_malloc_r>
 800ec50:	4606      	mov	r6, r0
 800ec52:	b360      	cbz	r0, 800ecae <__ssputs_r+0xa2>
 800ec54:	464a      	mov	r2, r9
 800ec56:	6921      	ldr	r1, [r4, #16]
 800ec58:	f7fe fd95 	bl	800d786 <memcpy>
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ec62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec66:	81a3      	strh	r3, [r4, #12]
 800ec68:	6126      	str	r6, [r4, #16]
 800ec6a:	444e      	add	r6, r9
 800ec6c:	6165      	str	r5, [r4, #20]
 800ec6e:	eba5 0509 	sub.w	r5, r5, r9
 800ec72:	6026      	str	r6, [r4, #0]
 800ec74:	463e      	mov	r6, r7
 800ec76:	60a5      	str	r5, [r4, #8]
 800ec78:	42be      	cmp	r6, r7
 800ec7a:	d900      	bls.n	800ec7e <__ssputs_r+0x72>
 800ec7c:	463e      	mov	r6, r7
 800ec7e:	4632      	mov	r2, r6
 800ec80:	4641      	mov	r1, r8
 800ec82:	6820      	ldr	r0, [r4, #0]
 800ec84:	f7fe fc69 	bl	800d55a <memmove>
 800ec88:	68a3      	ldr	r3, [r4, #8]
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	1b9b      	subs	r3, r3, r6
 800ec8e:	60a3      	str	r3, [r4, #8]
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	4433      	add	r3, r6
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9a:	462a      	mov	r2, r5
 800ec9c:	f7fd fe9c 	bl	800c9d8 <_realloc_r>
 800eca0:	4606      	mov	r6, r0
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d1e0      	bne.n	800ec68 <__ssputs_r+0x5c>
 800eca6:	6921      	ldr	r1, [r4, #16]
 800eca8:	4650      	mov	r0, sl
 800ecaa:	f7ff fbdb 	bl	800e464 <_free_r>
 800ecae:	230c      	movs	r3, #12
 800ecb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb4:	f8ca 3000 	str.w	r3, [sl]
 800ecb8:	89a3      	ldrh	r3, [r4, #12]
 800ecba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecbe:	81a3      	strh	r3, [r4, #12]
 800ecc0:	e7e9      	b.n	800ec96 <__ssputs_r+0x8a>
	...

0800ecc4 <_svfiprintf_r>:
 800ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc8:	4698      	mov	r8, r3
 800ecca:	898b      	ldrh	r3, [r1, #12]
 800eccc:	b09d      	sub	sp, #116	@ 0x74
 800ecce:	4607      	mov	r7, r0
 800ecd0:	061b      	lsls	r3, r3, #24
 800ecd2:	460d      	mov	r5, r1
 800ecd4:	4614      	mov	r4, r2
 800ecd6:	d510      	bpl.n	800ecfa <_svfiprintf_r+0x36>
 800ecd8:	690b      	ldr	r3, [r1, #16]
 800ecda:	b973      	cbnz	r3, 800ecfa <_svfiprintf_r+0x36>
 800ecdc:	2140      	movs	r1, #64	@ 0x40
 800ecde:	f7fd fdef 	bl	800c8c0 <_malloc_r>
 800ece2:	6028      	str	r0, [r5, #0]
 800ece4:	6128      	str	r0, [r5, #16]
 800ece6:	b930      	cbnz	r0, 800ecf6 <_svfiprintf_r+0x32>
 800ece8:	230c      	movs	r3, #12
 800ecea:	603b      	str	r3, [r7, #0]
 800ecec:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf0:	b01d      	add	sp, #116	@ 0x74
 800ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf6:	2340      	movs	r3, #64	@ 0x40
 800ecf8:	616b      	str	r3, [r5, #20]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed00:	f04f 0901 	mov.w	r9, #1
 800ed04:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800eea8 <_svfiprintf_r+0x1e4>
 800ed08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed0a:	2320      	movs	r3, #32
 800ed0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed10:	2330      	movs	r3, #48	@ 0x30
 800ed12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed16:	4623      	mov	r3, r4
 800ed18:	469a      	mov	sl, r3
 800ed1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed1e:	b10a      	cbz	r2, 800ed24 <_svfiprintf_r+0x60>
 800ed20:	2a25      	cmp	r2, #37	@ 0x25
 800ed22:	d1f9      	bne.n	800ed18 <_svfiprintf_r+0x54>
 800ed24:	ebba 0b04 	subs.w	fp, sl, r4
 800ed28:	d00b      	beq.n	800ed42 <_svfiprintf_r+0x7e>
 800ed2a:	465b      	mov	r3, fp
 800ed2c:	4622      	mov	r2, r4
 800ed2e:	4629      	mov	r1, r5
 800ed30:	4638      	mov	r0, r7
 800ed32:	f7ff ff6b 	bl	800ec0c <__ssputs_r>
 800ed36:	3001      	adds	r0, #1
 800ed38:	f000 80a7 	beq.w	800ee8a <_svfiprintf_r+0x1c6>
 800ed3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed3e:	445a      	add	r2, fp
 800ed40:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed42:	f89a 3000 	ldrb.w	r3, [sl]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 809f 	beq.w	800ee8a <_svfiprintf_r+0x1c6>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed52:	f10a 0a01 	add.w	sl, sl, #1
 800ed56:	9304      	str	r3, [sp, #16]
 800ed58:	9307      	str	r3, [sp, #28]
 800ed5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed64:	4654      	mov	r4, sl
 800ed66:	2205      	movs	r2, #5
 800ed68:	484f      	ldr	r0, [pc, #316]	@ (800eea8 <_svfiprintf_r+0x1e4>)
 800ed6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed6e:	f7fe fcfc 	bl	800d76a <memchr>
 800ed72:	9a04      	ldr	r2, [sp, #16]
 800ed74:	b9d8      	cbnz	r0, 800edae <_svfiprintf_r+0xea>
 800ed76:	06d0      	lsls	r0, r2, #27
 800ed78:	bf44      	itt	mi
 800ed7a:	2320      	movmi	r3, #32
 800ed7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed80:	0711      	lsls	r1, r2, #28
 800ed82:	bf44      	itt	mi
 800ed84:	232b      	movmi	r3, #43	@ 0x2b
 800ed86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed90:	d015      	beq.n	800edbe <_svfiprintf_r+0xfa>
 800ed92:	9a07      	ldr	r2, [sp, #28]
 800ed94:	4654      	mov	r4, sl
 800ed96:	2000      	movs	r0, #0
 800ed98:	f04f 0c0a 	mov.w	ip, #10
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eda2:	3b30      	subs	r3, #48	@ 0x30
 800eda4:	2b09      	cmp	r3, #9
 800eda6:	d94b      	bls.n	800ee40 <_svfiprintf_r+0x17c>
 800eda8:	b1b0      	cbz	r0, 800edd8 <_svfiprintf_r+0x114>
 800edaa:	9207      	str	r2, [sp, #28]
 800edac:	e014      	b.n	800edd8 <_svfiprintf_r+0x114>
 800edae:	eba0 0308 	sub.w	r3, r0, r8
 800edb2:	46a2      	mov	sl, r4
 800edb4:	fa09 f303 	lsl.w	r3, r9, r3
 800edb8:	4313      	orrs	r3, r2
 800edba:	9304      	str	r3, [sp, #16]
 800edbc:	e7d2      	b.n	800ed64 <_svfiprintf_r+0xa0>
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	1d19      	adds	r1, r3, #4
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	9103      	str	r1, [sp, #12]
 800edc8:	bfbb      	ittet	lt
 800edca:	425b      	neglt	r3, r3
 800edcc:	f042 0202 	orrlt.w	r2, r2, #2
 800edd0:	9307      	strge	r3, [sp, #28]
 800edd2:	9307      	strlt	r3, [sp, #28]
 800edd4:	bfb8      	it	lt
 800edd6:	9204      	strlt	r2, [sp, #16]
 800edd8:	7823      	ldrb	r3, [r4, #0]
 800edda:	2b2e      	cmp	r3, #46	@ 0x2e
 800eddc:	d10a      	bne.n	800edf4 <_svfiprintf_r+0x130>
 800edde:	7863      	ldrb	r3, [r4, #1]
 800ede0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ede2:	d132      	bne.n	800ee4a <_svfiprintf_r+0x186>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	3402      	adds	r4, #2
 800ede8:	1d1a      	adds	r2, r3, #4
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edf0:	9203      	str	r2, [sp, #12]
 800edf2:	9305      	str	r3, [sp, #20]
 800edf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eeb8 <_svfiprintf_r+0x1f4>
 800edf8:	2203      	movs	r2, #3
 800edfa:	7821      	ldrb	r1, [r4, #0]
 800edfc:	4650      	mov	r0, sl
 800edfe:	f7fe fcb4 	bl	800d76a <memchr>
 800ee02:	b138      	cbz	r0, 800ee14 <_svfiprintf_r+0x150>
 800ee04:	eba0 000a 	sub.w	r0, r0, sl
 800ee08:	2240      	movs	r2, #64	@ 0x40
 800ee0a:	9b04      	ldr	r3, [sp, #16]
 800ee0c:	3401      	adds	r4, #1
 800ee0e:	4082      	lsls	r2, r0
 800ee10:	4313      	orrs	r3, r2
 800ee12:	9304      	str	r3, [sp, #16]
 800ee14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee18:	2206      	movs	r2, #6
 800ee1a:	4824      	ldr	r0, [pc, #144]	@ (800eeac <_svfiprintf_r+0x1e8>)
 800ee1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee20:	f7fe fca3 	bl	800d76a <memchr>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d036      	beq.n	800ee96 <_svfiprintf_r+0x1d2>
 800ee28:	4b21      	ldr	r3, [pc, #132]	@ (800eeb0 <_svfiprintf_r+0x1ec>)
 800ee2a:	bb1b      	cbnz	r3, 800ee74 <_svfiprintf_r+0x1b0>
 800ee2c:	9b03      	ldr	r3, [sp, #12]
 800ee2e:	3307      	adds	r3, #7
 800ee30:	f023 0307 	bic.w	r3, r3, #7
 800ee34:	3308      	adds	r3, #8
 800ee36:	9303      	str	r3, [sp, #12]
 800ee38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee3a:	4433      	add	r3, r6
 800ee3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee3e:	e76a      	b.n	800ed16 <_svfiprintf_r+0x52>
 800ee40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee44:	460c      	mov	r4, r1
 800ee46:	2001      	movs	r0, #1
 800ee48:	e7a8      	b.n	800ed9c <_svfiprintf_r+0xd8>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	3401      	adds	r4, #1
 800ee4e:	f04f 0c0a 	mov.w	ip, #10
 800ee52:	4619      	mov	r1, r3
 800ee54:	9305      	str	r3, [sp, #20]
 800ee56:	4620      	mov	r0, r4
 800ee58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee5c:	3a30      	subs	r2, #48	@ 0x30
 800ee5e:	2a09      	cmp	r2, #9
 800ee60:	d903      	bls.n	800ee6a <_svfiprintf_r+0x1a6>
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d0c6      	beq.n	800edf4 <_svfiprintf_r+0x130>
 800ee66:	9105      	str	r1, [sp, #20]
 800ee68:	e7c4      	b.n	800edf4 <_svfiprintf_r+0x130>
 800ee6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee6e:	4604      	mov	r4, r0
 800ee70:	2301      	movs	r3, #1
 800ee72:	e7f0      	b.n	800ee56 <_svfiprintf_r+0x192>
 800ee74:	ab03      	add	r3, sp, #12
 800ee76:	462a      	mov	r2, r5
 800ee78:	a904      	add	r1, sp, #16
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb4 <_svfiprintf_r+0x1f0>)
 800ee80:	f7fd fe76 	bl	800cb70 <_printf_float>
 800ee84:	1c42      	adds	r2, r0, #1
 800ee86:	4606      	mov	r6, r0
 800ee88:	d1d6      	bne.n	800ee38 <_svfiprintf_r+0x174>
 800ee8a:	89ab      	ldrh	r3, [r5, #12]
 800ee8c:	065b      	lsls	r3, r3, #25
 800ee8e:	f53f af2d 	bmi.w	800ecec <_svfiprintf_r+0x28>
 800ee92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee94:	e72c      	b.n	800ecf0 <_svfiprintf_r+0x2c>
 800ee96:	ab03      	add	r3, sp, #12
 800ee98:	462a      	mov	r2, r5
 800ee9a:	a904      	add	r1, sp, #16
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	4b04      	ldr	r3, [pc, #16]	@ (800eeb4 <_svfiprintf_r+0x1f0>)
 800eea2:	f7fe f901 	bl	800d0a8 <_printf_i>
 800eea6:	e7ed      	b.n	800ee84 <_svfiprintf_r+0x1c0>
 800eea8:	0801e6ca 	.word	0x0801e6ca
 800eeac:	0801e6d4 	.word	0x0801e6d4
 800eeb0:	0800cb71 	.word	0x0800cb71
 800eeb4:	0800ec0d 	.word	0x0800ec0d
 800eeb8:	0801e6d0 	.word	0x0801e6d0

0800eebc <__sflush_r>:
 800eebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec4:	0716      	lsls	r6, r2, #28
 800eec6:	4605      	mov	r5, r0
 800eec8:	460c      	mov	r4, r1
 800eeca:	d454      	bmi.n	800ef76 <__sflush_r+0xba>
 800eecc:	684b      	ldr	r3, [r1, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	dc02      	bgt.n	800eed8 <__sflush_r+0x1c>
 800eed2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	dd48      	ble.n	800ef6a <__sflush_r+0xae>
 800eed8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eeda:	2e00      	cmp	r6, #0
 800eedc:	d045      	beq.n	800ef6a <__sflush_r+0xae>
 800eede:	2300      	movs	r3, #0
 800eee0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eee4:	682f      	ldr	r7, [r5, #0]
 800eee6:	6a21      	ldr	r1, [r4, #32]
 800eee8:	602b      	str	r3, [r5, #0]
 800eeea:	d030      	beq.n	800ef4e <__sflush_r+0x92>
 800eeec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eeee:	89a3      	ldrh	r3, [r4, #12]
 800eef0:	0759      	lsls	r1, r3, #29
 800eef2:	d505      	bpl.n	800ef00 <__sflush_r+0x44>
 800eef4:	6863      	ldr	r3, [r4, #4]
 800eef6:	1ad2      	subs	r2, r2, r3
 800eef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eefa:	b10b      	cbz	r3, 800ef00 <__sflush_r+0x44>
 800eefc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eefe:	1ad2      	subs	r2, r2, r3
 800ef00:	2300      	movs	r3, #0
 800ef02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef04:	6a21      	ldr	r1, [r4, #32]
 800ef06:	4628      	mov	r0, r5
 800ef08:	47b0      	blx	r6
 800ef0a:	1c43      	adds	r3, r0, #1
 800ef0c:	89a3      	ldrh	r3, [r4, #12]
 800ef0e:	d106      	bne.n	800ef1e <__sflush_r+0x62>
 800ef10:	6829      	ldr	r1, [r5, #0]
 800ef12:	291d      	cmp	r1, #29
 800ef14:	d82b      	bhi.n	800ef6e <__sflush_r+0xb2>
 800ef16:	4a2a      	ldr	r2, [pc, #168]	@ (800efc0 <__sflush_r+0x104>)
 800ef18:	40ca      	lsrs	r2, r1
 800ef1a:	07d6      	lsls	r6, r2, #31
 800ef1c:	d527      	bpl.n	800ef6e <__sflush_r+0xb2>
 800ef1e:	2200      	movs	r2, #0
 800ef20:	04d9      	lsls	r1, r3, #19
 800ef22:	6062      	str	r2, [r4, #4]
 800ef24:	6922      	ldr	r2, [r4, #16]
 800ef26:	6022      	str	r2, [r4, #0]
 800ef28:	d504      	bpl.n	800ef34 <__sflush_r+0x78>
 800ef2a:	1c42      	adds	r2, r0, #1
 800ef2c:	d101      	bne.n	800ef32 <__sflush_r+0x76>
 800ef2e:	682b      	ldr	r3, [r5, #0]
 800ef30:	b903      	cbnz	r3, 800ef34 <__sflush_r+0x78>
 800ef32:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef36:	602f      	str	r7, [r5, #0]
 800ef38:	b1b9      	cbz	r1, 800ef6a <__sflush_r+0xae>
 800ef3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef3e:	4299      	cmp	r1, r3
 800ef40:	d002      	beq.n	800ef48 <__sflush_r+0x8c>
 800ef42:	4628      	mov	r0, r5
 800ef44:	f7ff fa8e 	bl	800e464 <_free_r>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef4c:	e00d      	b.n	800ef6a <__sflush_r+0xae>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b0      	blx	r6
 800ef54:	4602      	mov	r2, r0
 800ef56:	1c50      	adds	r0, r2, #1
 800ef58:	d1c9      	bne.n	800eeee <__sflush_r+0x32>
 800ef5a:	682b      	ldr	r3, [r5, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d0c6      	beq.n	800eeee <__sflush_r+0x32>
 800ef60:	2b1d      	cmp	r3, #29
 800ef62:	d001      	beq.n	800ef68 <__sflush_r+0xac>
 800ef64:	2b16      	cmp	r3, #22
 800ef66:	d11d      	bne.n	800efa4 <__sflush_r+0xe8>
 800ef68:	602f      	str	r7, [r5, #0]
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	e021      	b.n	800efb2 <__sflush_r+0xf6>
 800ef6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef72:	b21b      	sxth	r3, r3
 800ef74:	e01a      	b.n	800efac <__sflush_r+0xf0>
 800ef76:	690f      	ldr	r7, [r1, #16]
 800ef78:	2f00      	cmp	r7, #0
 800ef7a:	d0f6      	beq.n	800ef6a <__sflush_r+0xae>
 800ef7c:	0793      	lsls	r3, r2, #30
 800ef7e:	680e      	ldr	r6, [r1, #0]
 800ef80:	600f      	str	r7, [r1, #0]
 800ef82:	bf0c      	ite	eq
 800ef84:	694b      	ldreq	r3, [r1, #20]
 800ef86:	2300      	movne	r3, #0
 800ef88:	eba6 0807 	sub.w	r8, r6, r7
 800ef8c:	608b      	str	r3, [r1, #8]
 800ef8e:	f1b8 0f00 	cmp.w	r8, #0
 800ef92:	ddea      	ble.n	800ef6a <__sflush_r+0xae>
 800ef94:	4643      	mov	r3, r8
 800ef96:	463a      	mov	r2, r7
 800ef98:	6a21      	ldr	r1, [r4, #32]
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef9e:	47b0      	blx	r6
 800efa0:	2800      	cmp	r0, #0
 800efa2:	dc08      	bgt.n	800efb6 <__sflush_r+0xfa>
 800efa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efac:	f04f 30ff 	mov.w	r0, #4294967295
 800efb0:	81a3      	strh	r3, [r4, #12]
 800efb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb6:	4407      	add	r7, r0
 800efb8:	eba8 0800 	sub.w	r8, r8, r0
 800efbc:	e7e7      	b.n	800ef8e <__sflush_r+0xd2>
 800efbe:	bf00      	nop
 800efc0:	20400001 	.word	0x20400001

0800efc4 <_fflush_r>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	690b      	ldr	r3, [r1, #16]
 800efc8:	4605      	mov	r5, r0
 800efca:	460c      	mov	r4, r1
 800efcc:	b913      	cbnz	r3, 800efd4 <_fflush_r+0x10>
 800efce:	2500      	movs	r5, #0
 800efd0:	4628      	mov	r0, r5
 800efd2:	bd38      	pop	{r3, r4, r5, pc}
 800efd4:	b118      	cbz	r0, 800efde <_fflush_r+0x1a>
 800efd6:	6a03      	ldr	r3, [r0, #32]
 800efd8:	b90b      	cbnz	r3, 800efde <_fflush_r+0x1a>
 800efda:	f7fe fa0f 	bl	800d3fc <__sinit>
 800efde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d0f3      	beq.n	800efce <_fflush_r+0xa>
 800efe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efe8:	07d0      	lsls	r0, r2, #31
 800efea:	d404      	bmi.n	800eff6 <_fflush_r+0x32>
 800efec:	0599      	lsls	r1, r3, #22
 800efee:	d402      	bmi.n	800eff6 <_fflush_r+0x32>
 800eff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eff2:	f7fe fbb8 	bl	800d766 <__retarget_lock_acquire_recursive>
 800eff6:	4628      	mov	r0, r5
 800eff8:	4621      	mov	r1, r4
 800effa:	f7ff ff5f 	bl	800eebc <__sflush_r>
 800effe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f000:	4605      	mov	r5, r0
 800f002:	07da      	lsls	r2, r3, #31
 800f004:	d4e4      	bmi.n	800efd0 <_fflush_r+0xc>
 800f006:	89a3      	ldrh	r3, [r4, #12]
 800f008:	059b      	lsls	r3, r3, #22
 800f00a:	d4e1      	bmi.n	800efd0 <_fflush_r+0xc>
 800f00c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f00e:	f7fe fbab 	bl	800d768 <__retarget_lock_release_recursive>
 800f012:	e7dd      	b.n	800efd0 <_fflush_r+0xc>

0800f014 <__assert_func>:
 800f014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f016:	4614      	mov	r4, r2
 800f018:	461a      	mov	r2, r3
 800f01a:	4b09      	ldr	r3, [pc, #36]	@ (800f040 <__assert_func+0x2c>)
 800f01c:	4605      	mov	r5, r0
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	68d8      	ldr	r0, [r3, #12]
 800f022:	b14c      	cbz	r4, 800f038 <__assert_func+0x24>
 800f024:	4b07      	ldr	r3, [pc, #28]	@ (800f044 <__assert_func+0x30>)
 800f026:	9100      	str	r1, [sp, #0]
 800f028:	4907      	ldr	r1, [pc, #28]	@ (800f048 <__assert_func+0x34>)
 800f02a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f02e:	462b      	mov	r3, r5
 800f030:	f000 f842 	bl	800f0b8 <fiprintf>
 800f034:	f000 f852 	bl	800f0dc <abort>
 800f038:	4b04      	ldr	r3, [pc, #16]	@ (800f04c <__assert_func+0x38>)
 800f03a:	461c      	mov	r4, r3
 800f03c:	e7f3      	b.n	800f026 <__assert_func+0x12>
 800f03e:	bf00      	nop
 800f040:	20000f88 	.word	0x20000f88
 800f044:	0801e6e5 	.word	0x0801e6e5
 800f048:	0801e6f2 	.word	0x0801e6f2
 800f04c:	0801e720 	.word	0x0801e720

0800f050 <_calloc_r>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	fba1 5402 	umull	r5, r4, r1, r2
 800f056:	b934      	cbnz	r4, 800f066 <_calloc_r+0x16>
 800f058:	4629      	mov	r1, r5
 800f05a:	f7fd fc31 	bl	800c8c0 <_malloc_r>
 800f05e:	4606      	mov	r6, r0
 800f060:	b928      	cbnz	r0, 800f06e <_calloc_r+0x1e>
 800f062:	4630      	mov	r0, r6
 800f064:	bd70      	pop	{r4, r5, r6, pc}
 800f066:	220c      	movs	r2, #12
 800f068:	2600      	movs	r6, #0
 800f06a:	6002      	str	r2, [r0, #0]
 800f06c:	e7f9      	b.n	800f062 <_calloc_r+0x12>
 800f06e:	462a      	mov	r2, r5
 800f070:	4621      	mov	r1, r4
 800f072:	f7fe fa8c 	bl	800d58e <memset>
 800f076:	e7f4      	b.n	800f062 <_calloc_r+0x12>

0800f078 <__ascii_mbtowc>:
 800f078:	b082      	sub	sp, #8
 800f07a:	b901      	cbnz	r1, 800f07e <__ascii_mbtowc+0x6>
 800f07c:	a901      	add	r1, sp, #4
 800f07e:	b142      	cbz	r2, 800f092 <__ascii_mbtowc+0x1a>
 800f080:	b14b      	cbz	r3, 800f096 <__ascii_mbtowc+0x1e>
 800f082:	7813      	ldrb	r3, [r2, #0]
 800f084:	600b      	str	r3, [r1, #0]
 800f086:	7812      	ldrb	r2, [r2, #0]
 800f088:	1e10      	subs	r0, r2, #0
 800f08a:	bf18      	it	ne
 800f08c:	2001      	movne	r0, #1
 800f08e:	b002      	add	sp, #8
 800f090:	4770      	bx	lr
 800f092:	4610      	mov	r0, r2
 800f094:	e7fb      	b.n	800f08e <__ascii_mbtowc+0x16>
 800f096:	f06f 0001 	mvn.w	r0, #1
 800f09a:	e7f8      	b.n	800f08e <__ascii_mbtowc+0x16>

0800f09c <__ascii_wctomb>:
 800f09c:	4603      	mov	r3, r0
 800f09e:	4608      	mov	r0, r1
 800f0a0:	b141      	cbz	r1, 800f0b4 <__ascii_wctomb+0x18>
 800f0a2:	2aff      	cmp	r2, #255	@ 0xff
 800f0a4:	d904      	bls.n	800f0b0 <__ascii_wctomb+0x14>
 800f0a6:	228a      	movs	r2, #138	@ 0x8a
 800f0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	4770      	bx	lr
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	700a      	strb	r2, [r1, #0]
 800f0b4:	4770      	bx	lr
	...

0800f0b8 <fiprintf>:
 800f0b8:	b40e      	push	{r1, r2, r3}
 800f0ba:	b503      	push	{r0, r1, lr}
 800f0bc:	ab03      	add	r3, sp, #12
 800f0be:	4601      	mov	r1, r0
 800f0c0:	4805      	ldr	r0, [pc, #20]	@ (800f0d8 <fiprintf+0x20>)
 800f0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0c6:	6800      	ldr	r0, [r0, #0]
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	f000 f837 	bl	800f13c <_vfiprintf_r>
 800f0ce:	b002      	add	sp, #8
 800f0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0d4:	b003      	add	sp, #12
 800f0d6:	4770      	bx	lr
 800f0d8:	20000f88 	.word	0x20000f88

0800f0dc <abort>:
 800f0dc:	2006      	movs	r0, #6
 800f0de:	b508      	push	{r3, lr}
 800f0e0:	f000 fa00 	bl	800f4e4 <raise>
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	f000 faeb 	bl	800f6c0 <_exit>

0800f0ea <__sfputc_r>:
 800f0ea:	6893      	ldr	r3, [r2, #8]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	b410      	push	{r4}
 800f0f2:	6093      	str	r3, [r2, #8]
 800f0f4:	da08      	bge.n	800f108 <__sfputc_r+0x1e>
 800f0f6:	6994      	ldr	r4, [r2, #24]
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	db01      	blt.n	800f100 <__sfputc_r+0x16>
 800f0fc:	290a      	cmp	r1, #10
 800f0fe:	d103      	bne.n	800f108 <__sfputc_r+0x1e>
 800f100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f104:	f000 b932 	b.w	800f36c <__swbuf_r>
 800f108:	6813      	ldr	r3, [r2, #0]
 800f10a:	1c58      	adds	r0, r3, #1
 800f10c:	6010      	str	r0, [r2, #0]
 800f10e:	4608      	mov	r0, r1
 800f110:	7019      	strb	r1, [r3, #0]
 800f112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <__sfputs_r>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	4606      	mov	r6, r0
 800f11c:	460f      	mov	r7, r1
 800f11e:	4614      	mov	r4, r2
 800f120:	18d5      	adds	r5, r2, r3
 800f122:	42ac      	cmp	r4, r5
 800f124:	d101      	bne.n	800f12a <__sfputs_r+0x12>
 800f126:	2000      	movs	r0, #0
 800f128:	e007      	b.n	800f13a <__sfputs_r+0x22>
 800f12a:	463a      	mov	r2, r7
 800f12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f130:	4630      	mov	r0, r6
 800f132:	f7ff ffda 	bl	800f0ea <__sfputc_r>
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	d1f3      	bne.n	800f122 <__sfputs_r+0xa>
 800f13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f13c <_vfiprintf_r>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	460d      	mov	r5, r1
 800f142:	b09d      	sub	sp, #116	@ 0x74
 800f144:	4614      	mov	r4, r2
 800f146:	4698      	mov	r8, r3
 800f148:	4606      	mov	r6, r0
 800f14a:	b118      	cbz	r0, 800f154 <_vfiprintf_r+0x18>
 800f14c:	6a03      	ldr	r3, [r0, #32]
 800f14e:	b90b      	cbnz	r3, 800f154 <_vfiprintf_r+0x18>
 800f150:	f7fe f954 	bl	800d3fc <__sinit>
 800f154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f156:	07d9      	lsls	r1, r3, #31
 800f158:	d405      	bmi.n	800f166 <_vfiprintf_r+0x2a>
 800f15a:	89ab      	ldrh	r3, [r5, #12]
 800f15c:	059a      	lsls	r2, r3, #22
 800f15e:	d402      	bmi.n	800f166 <_vfiprintf_r+0x2a>
 800f160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f162:	f7fe fb00 	bl	800d766 <__retarget_lock_acquire_recursive>
 800f166:	89ab      	ldrh	r3, [r5, #12]
 800f168:	071b      	lsls	r3, r3, #28
 800f16a:	d501      	bpl.n	800f170 <_vfiprintf_r+0x34>
 800f16c:	692b      	ldr	r3, [r5, #16]
 800f16e:	b99b      	cbnz	r3, 800f198 <_vfiprintf_r+0x5c>
 800f170:	4629      	mov	r1, r5
 800f172:	4630      	mov	r0, r6
 800f174:	f000 f938 	bl	800f3e8 <__swsetup_r>
 800f178:	b170      	cbz	r0, 800f198 <_vfiprintf_r+0x5c>
 800f17a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f17c:	07dc      	lsls	r4, r3, #31
 800f17e:	d504      	bpl.n	800f18a <_vfiprintf_r+0x4e>
 800f180:	f04f 30ff 	mov.w	r0, #4294967295
 800f184:	b01d      	add	sp, #116	@ 0x74
 800f186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18a:	89ab      	ldrh	r3, [r5, #12]
 800f18c:	0598      	lsls	r0, r3, #22
 800f18e:	d4f7      	bmi.n	800f180 <_vfiprintf_r+0x44>
 800f190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f192:	f7fe fae9 	bl	800d768 <__retarget_lock_release_recursive>
 800f196:	e7f3      	b.n	800f180 <_vfiprintf_r+0x44>
 800f198:	2300      	movs	r3, #0
 800f19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f19e:	f04f 0901 	mov.w	r9, #1
 800f1a2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f358 <_vfiprintf_r+0x21c>
 800f1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1a8:	2320      	movs	r3, #32
 800f1aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1ae:	2330      	movs	r3, #48	@ 0x30
 800f1b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1b4:	4623      	mov	r3, r4
 800f1b6:	469a      	mov	sl, r3
 800f1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1bc:	b10a      	cbz	r2, 800f1c2 <_vfiprintf_r+0x86>
 800f1be:	2a25      	cmp	r2, #37	@ 0x25
 800f1c0:	d1f9      	bne.n	800f1b6 <_vfiprintf_r+0x7a>
 800f1c2:	ebba 0b04 	subs.w	fp, sl, r4
 800f1c6:	d00b      	beq.n	800f1e0 <_vfiprintf_r+0xa4>
 800f1c8:	465b      	mov	r3, fp
 800f1ca:	4622      	mov	r2, r4
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f7ff ffa2 	bl	800f118 <__sfputs_r>
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	f000 80a7 	beq.w	800f328 <_vfiprintf_r+0x1ec>
 800f1da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1dc:	445a      	add	r2, fp
 800f1de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f000 809f 	beq.w	800f328 <_vfiprintf_r+0x1ec>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f1f0:	f10a 0a01 	add.w	sl, sl, #1
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	9307      	str	r3, [sp, #28]
 800f1f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f202:	4654      	mov	r4, sl
 800f204:	2205      	movs	r2, #5
 800f206:	4854      	ldr	r0, [pc, #336]	@ (800f358 <_vfiprintf_r+0x21c>)
 800f208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20c:	f7fe faad 	bl	800d76a <memchr>
 800f210:	9a04      	ldr	r2, [sp, #16]
 800f212:	b9d8      	cbnz	r0, 800f24c <_vfiprintf_r+0x110>
 800f214:	06d1      	lsls	r1, r2, #27
 800f216:	bf44      	itt	mi
 800f218:	2320      	movmi	r3, #32
 800f21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f21e:	0713      	lsls	r3, r2, #28
 800f220:	bf44      	itt	mi
 800f222:	232b      	movmi	r3, #43	@ 0x2b
 800f224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f228:	f89a 3000 	ldrb.w	r3, [sl]
 800f22c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f22e:	d015      	beq.n	800f25c <_vfiprintf_r+0x120>
 800f230:	9a07      	ldr	r2, [sp, #28]
 800f232:	4654      	mov	r4, sl
 800f234:	2000      	movs	r0, #0
 800f236:	f04f 0c0a 	mov.w	ip, #10
 800f23a:	4621      	mov	r1, r4
 800f23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f240:	3b30      	subs	r3, #48	@ 0x30
 800f242:	2b09      	cmp	r3, #9
 800f244:	d94b      	bls.n	800f2de <_vfiprintf_r+0x1a2>
 800f246:	b1b0      	cbz	r0, 800f276 <_vfiprintf_r+0x13a>
 800f248:	9207      	str	r2, [sp, #28]
 800f24a:	e014      	b.n	800f276 <_vfiprintf_r+0x13a>
 800f24c:	eba0 0308 	sub.w	r3, r0, r8
 800f250:	46a2      	mov	sl, r4
 800f252:	fa09 f303 	lsl.w	r3, r9, r3
 800f256:	4313      	orrs	r3, r2
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	e7d2      	b.n	800f202 <_vfiprintf_r+0xc6>
 800f25c:	9b03      	ldr	r3, [sp, #12]
 800f25e:	1d19      	adds	r1, r3, #4
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	9103      	str	r1, [sp, #12]
 800f266:	bfbb      	ittet	lt
 800f268:	425b      	neglt	r3, r3
 800f26a:	f042 0202 	orrlt.w	r2, r2, #2
 800f26e:	9307      	strge	r3, [sp, #28]
 800f270:	9307      	strlt	r3, [sp, #28]
 800f272:	bfb8      	it	lt
 800f274:	9204      	strlt	r2, [sp, #16]
 800f276:	7823      	ldrb	r3, [r4, #0]
 800f278:	2b2e      	cmp	r3, #46	@ 0x2e
 800f27a:	d10a      	bne.n	800f292 <_vfiprintf_r+0x156>
 800f27c:	7863      	ldrb	r3, [r4, #1]
 800f27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f280:	d132      	bne.n	800f2e8 <_vfiprintf_r+0x1ac>
 800f282:	9b03      	ldr	r3, [sp, #12]
 800f284:	3402      	adds	r4, #2
 800f286:	1d1a      	adds	r2, r3, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f28e:	9203      	str	r2, [sp, #12]
 800f290:	9305      	str	r3, [sp, #20]
 800f292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f368 <_vfiprintf_r+0x22c>
 800f296:	2203      	movs	r2, #3
 800f298:	7821      	ldrb	r1, [r4, #0]
 800f29a:	4650      	mov	r0, sl
 800f29c:	f7fe fa65 	bl	800d76a <memchr>
 800f2a0:	b138      	cbz	r0, 800f2b2 <_vfiprintf_r+0x176>
 800f2a2:	eba0 000a 	sub.w	r0, r0, sl
 800f2a6:	2240      	movs	r2, #64	@ 0x40
 800f2a8:	9b04      	ldr	r3, [sp, #16]
 800f2aa:	3401      	adds	r4, #1
 800f2ac:	4082      	lsls	r2, r0
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	9304      	str	r3, [sp, #16]
 800f2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b6:	2206      	movs	r2, #6
 800f2b8:	4828      	ldr	r0, [pc, #160]	@ (800f35c <_vfiprintf_r+0x220>)
 800f2ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2be:	f7fe fa54 	bl	800d76a <memchr>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d03f      	beq.n	800f346 <_vfiprintf_r+0x20a>
 800f2c6:	4b26      	ldr	r3, [pc, #152]	@ (800f360 <_vfiprintf_r+0x224>)
 800f2c8:	bb1b      	cbnz	r3, 800f312 <_vfiprintf_r+0x1d6>
 800f2ca:	9b03      	ldr	r3, [sp, #12]
 800f2cc:	3307      	adds	r3, #7
 800f2ce:	f023 0307 	bic.w	r3, r3, #7
 800f2d2:	3308      	adds	r3, #8
 800f2d4:	9303      	str	r3, [sp, #12]
 800f2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2d8:	443b      	add	r3, r7
 800f2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2dc:	e76a      	b.n	800f1b4 <_vfiprintf_r+0x78>
 800f2de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	e7a8      	b.n	800f23a <_vfiprintf_r+0xfe>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	3401      	adds	r4, #1
 800f2ec:	f04f 0c0a 	mov.w	ip, #10
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	9305      	str	r3, [sp, #20]
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2fa:	3a30      	subs	r2, #48	@ 0x30
 800f2fc:	2a09      	cmp	r2, #9
 800f2fe:	d903      	bls.n	800f308 <_vfiprintf_r+0x1cc>
 800f300:	2b00      	cmp	r3, #0
 800f302:	d0c6      	beq.n	800f292 <_vfiprintf_r+0x156>
 800f304:	9105      	str	r1, [sp, #20]
 800f306:	e7c4      	b.n	800f292 <_vfiprintf_r+0x156>
 800f308:	fb0c 2101 	mla	r1, ip, r1, r2
 800f30c:	4604      	mov	r4, r0
 800f30e:	2301      	movs	r3, #1
 800f310:	e7f0      	b.n	800f2f4 <_vfiprintf_r+0x1b8>
 800f312:	ab03      	add	r3, sp, #12
 800f314:	462a      	mov	r2, r5
 800f316:	a904      	add	r1, sp, #16
 800f318:	4630      	mov	r0, r6
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	4b11      	ldr	r3, [pc, #68]	@ (800f364 <_vfiprintf_r+0x228>)
 800f31e:	f7fd fc27 	bl	800cb70 <_printf_float>
 800f322:	4607      	mov	r7, r0
 800f324:	1c78      	adds	r0, r7, #1
 800f326:	d1d6      	bne.n	800f2d6 <_vfiprintf_r+0x19a>
 800f328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f32a:	07d9      	lsls	r1, r3, #31
 800f32c:	d405      	bmi.n	800f33a <_vfiprintf_r+0x1fe>
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	059a      	lsls	r2, r3, #22
 800f332:	d402      	bmi.n	800f33a <_vfiprintf_r+0x1fe>
 800f334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f336:	f7fe fa17 	bl	800d768 <__retarget_lock_release_recursive>
 800f33a:	89ab      	ldrh	r3, [r5, #12]
 800f33c:	065b      	lsls	r3, r3, #25
 800f33e:	f53f af1f 	bmi.w	800f180 <_vfiprintf_r+0x44>
 800f342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f344:	e71e      	b.n	800f184 <_vfiprintf_r+0x48>
 800f346:	ab03      	add	r3, sp, #12
 800f348:	462a      	mov	r2, r5
 800f34a:	a904      	add	r1, sp, #16
 800f34c:	4630      	mov	r0, r6
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	4b04      	ldr	r3, [pc, #16]	@ (800f364 <_vfiprintf_r+0x228>)
 800f352:	f7fd fea9 	bl	800d0a8 <_printf_i>
 800f356:	e7e4      	b.n	800f322 <_vfiprintf_r+0x1e6>
 800f358:	0801e6ca 	.word	0x0801e6ca
 800f35c:	0801e6d4 	.word	0x0801e6d4
 800f360:	0800cb71 	.word	0x0800cb71
 800f364:	0800f119 	.word	0x0800f119
 800f368:	0801e6d0 	.word	0x0801e6d0

0800f36c <__swbuf_r>:
 800f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36e:	460e      	mov	r6, r1
 800f370:	4614      	mov	r4, r2
 800f372:	4605      	mov	r5, r0
 800f374:	b118      	cbz	r0, 800f37e <__swbuf_r+0x12>
 800f376:	6a03      	ldr	r3, [r0, #32]
 800f378:	b90b      	cbnz	r3, 800f37e <__swbuf_r+0x12>
 800f37a:	f7fe f83f 	bl	800d3fc <__sinit>
 800f37e:	69a3      	ldr	r3, [r4, #24]
 800f380:	60a3      	str	r3, [r4, #8]
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	071a      	lsls	r2, r3, #28
 800f386:	d501      	bpl.n	800f38c <__swbuf_r+0x20>
 800f388:	6923      	ldr	r3, [r4, #16]
 800f38a:	b943      	cbnz	r3, 800f39e <__swbuf_r+0x32>
 800f38c:	4621      	mov	r1, r4
 800f38e:	4628      	mov	r0, r5
 800f390:	f000 f82a 	bl	800f3e8 <__swsetup_r>
 800f394:	b118      	cbz	r0, 800f39e <__swbuf_r+0x32>
 800f396:	f04f 37ff 	mov.w	r7, #4294967295
 800f39a:	4638      	mov	r0, r7
 800f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	b2f6      	uxtb	r6, r6
 800f3a2:	6922      	ldr	r2, [r4, #16]
 800f3a4:	4637      	mov	r7, r6
 800f3a6:	1a98      	subs	r0, r3, r2
 800f3a8:	6963      	ldr	r3, [r4, #20]
 800f3aa:	4283      	cmp	r3, r0
 800f3ac:	dc05      	bgt.n	800f3ba <__swbuf_r+0x4e>
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f7ff fe07 	bl	800efc4 <_fflush_r>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	d1ed      	bne.n	800f396 <__swbuf_r+0x2a>
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	60a3      	str	r3, [r4, #8]
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	6022      	str	r2, [r4, #0]
 800f3c6:	701e      	strb	r6, [r3, #0]
 800f3c8:	1c43      	adds	r3, r0, #1
 800f3ca:	6962      	ldr	r2, [r4, #20]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d004      	beq.n	800f3da <__swbuf_r+0x6e>
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	07db      	lsls	r3, r3, #31
 800f3d4:	d5e1      	bpl.n	800f39a <__swbuf_r+0x2e>
 800f3d6:	2e0a      	cmp	r6, #10
 800f3d8:	d1df      	bne.n	800f39a <__swbuf_r+0x2e>
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f7ff fdf1 	bl	800efc4 <_fflush_r>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d0d9      	beq.n	800f39a <__swbuf_r+0x2e>
 800f3e6:	e7d6      	b.n	800f396 <__swbuf_r+0x2a>

0800f3e8 <__swsetup_r>:
 800f3e8:	b538      	push	{r3, r4, r5, lr}
 800f3ea:	4b29      	ldr	r3, [pc, #164]	@ (800f490 <__swsetup_r+0xa8>)
 800f3ec:	4605      	mov	r5, r0
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	6818      	ldr	r0, [r3, #0]
 800f3f2:	b118      	cbz	r0, 800f3fc <__swsetup_r+0x14>
 800f3f4:	6a03      	ldr	r3, [r0, #32]
 800f3f6:	b90b      	cbnz	r3, 800f3fc <__swsetup_r+0x14>
 800f3f8:	f7fe f800 	bl	800d3fc <__sinit>
 800f3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f400:	0719      	lsls	r1, r3, #28
 800f402:	d422      	bmi.n	800f44a <__swsetup_r+0x62>
 800f404:	06da      	lsls	r2, r3, #27
 800f406:	d407      	bmi.n	800f418 <__swsetup_r+0x30>
 800f408:	2209      	movs	r2, #9
 800f40a:	602a      	str	r2, [r5, #0]
 800f40c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
 800f414:	81a3      	strh	r3, [r4, #12]
 800f416:	e033      	b.n	800f480 <__swsetup_r+0x98>
 800f418:	0758      	lsls	r0, r3, #29
 800f41a:	d512      	bpl.n	800f442 <__swsetup_r+0x5a>
 800f41c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f41e:	b141      	cbz	r1, 800f432 <__swsetup_r+0x4a>
 800f420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f424:	4299      	cmp	r1, r3
 800f426:	d002      	beq.n	800f42e <__swsetup_r+0x46>
 800f428:	4628      	mov	r0, r5
 800f42a:	f7ff f81b 	bl	800e464 <_free_r>
 800f42e:	2300      	movs	r3, #0
 800f430:	6363      	str	r3, [r4, #52]	@ 0x34
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f438:	81a3      	strh	r3, [r4, #12]
 800f43a:	2300      	movs	r3, #0
 800f43c:	6063      	str	r3, [r4, #4]
 800f43e:	6923      	ldr	r3, [r4, #16]
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	f043 0308 	orr.w	r3, r3, #8
 800f448:	81a3      	strh	r3, [r4, #12]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	b94b      	cbnz	r3, 800f462 <__swsetup_r+0x7a>
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f458:	d003      	beq.n	800f462 <__swsetup_r+0x7a>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4628      	mov	r0, r5
 800f45e:	f000 f882 	bl	800f566 <__smakebuf_r>
 800f462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f466:	f013 0201 	ands.w	r2, r3, #1
 800f46a:	d00a      	beq.n	800f482 <__swsetup_r+0x9a>
 800f46c:	2200      	movs	r2, #0
 800f46e:	60a2      	str	r2, [r4, #8]
 800f470:	6962      	ldr	r2, [r4, #20]
 800f472:	4252      	negs	r2, r2
 800f474:	61a2      	str	r2, [r4, #24]
 800f476:	6922      	ldr	r2, [r4, #16]
 800f478:	b942      	cbnz	r2, 800f48c <__swsetup_r+0xa4>
 800f47a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f47e:	d1c5      	bne.n	800f40c <__swsetup_r+0x24>
 800f480:	bd38      	pop	{r3, r4, r5, pc}
 800f482:	0799      	lsls	r1, r3, #30
 800f484:	bf58      	it	pl
 800f486:	6962      	ldrpl	r2, [r4, #20]
 800f488:	60a2      	str	r2, [r4, #8]
 800f48a:	e7f4      	b.n	800f476 <__swsetup_r+0x8e>
 800f48c:	2000      	movs	r0, #0
 800f48e:	e7f7      	b.n	800f480 <__swsetup_r+0x98>
 800f490:	20000f88 	.word	0x20000f88

0800f494 <_raise_r>:
 800f494:	291f      	cmp	r1, #31
 800f496:	b538      	push	{r3, r4, r5, lr}
 800f498:	4605      	mov	r5, r0
 800f49a:	460c      	mov	r4, r1
 800f49c:	d904      	bls.n	800f4a8 <_raise_r+0x14>
 800f49e:	2316      	movs	r3, #22
 800f4a0:	6003      	str	r3, [r0, #0]
 800f4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}
 800f4a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4aa:	b112      	cbz	r2, 800f4b2 <_raise_r+0x1e>
 800f4ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4b0:	b94b      	cbnz	r3, 800f4c6 <_raise_r+0x32>
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f000 f830 	bl	800f518 <_getpid_r>
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	4628      	mov	r0, r5
 800f4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4c2:	f000 b817 	b.w	800f4f4 <_kill_r>
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d00a      	beq.n	800f4e0 <_raise_r+0x4c>
 800f4ca:	1c59      	adds	r1, r3, #1
 800f4cc:	d103      	bne.n	800f4d6 <_raise_r+0x42>
 800f4ce:	2316      	movs	r3, #22
 800f4d0:	6003      	str	r3, [r0, #0]
 800f4d2:	2001      	movs	r0, #1
 800f4d4:	e7e7      	b.n	800f4a6 <_raise_r+0x12>
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f4de:	4798      	blx	r3
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e7e0      	b.n	800f4a6 <_raise_r+0x12>

0800f4e4 <raise>:
 800f4e4:	4b02      	ldr	r3, [pc, #8]	@ (800f4f0 <raise+0xc>)
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	6818      	ldr	r0, [r3, #0]
 800f4ea:	f7ff bfd3 	b.w	800f494 <_raise_r>
 800f4ee:	bf00      	nop
 800f4f0:	20000f88 	.word	0x20000f88

0800f4f4 <_kill_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4d06      	ldr	r5, [pc, #24]	@ (800f514 <_kill_r+0x20>)
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	4611      	mov	r1, r2
 800f500:	602b      	str	r3, [r5, #0]
 800f502:	f000 f8af 	bl	800f664 <_kill>
 800f506:	1c43      	adds	r3, r0, #1
 800f508:	d102      	bne.n	800f510 <_kill_r+0x1c>
 800f50a:	682b      	ldr	r3, [r5, #0]
 800f50c:	b103      	cbz	r3, 800f510 <_kill_r+0x1c>
 800f50e:	6023      	str	r3, [r4, #0]
 800f510:	bd38      	pop	{r3, r4, r5, pc}
 800f512:	bf00      	nop
 800f514:	2007b0b4 	.word	0x2007b0b4

0800f518 <_getpid_r>:
 800f518:	f000 b894 	b.w	800f644 <_getpid>

0800f51c <__swhatbuf_r>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	460c      	mov	r4, r1
 800f520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f524:	b096      	sub	sp, #88	@ 0x58
 800f526:	4615      	mov	r5, r2
 800f528:	2900      	cmp	r1, #0
 800f52a:	461e      	mov	r6, r3
 800f52c:	da0c      	bge.n	800f548 <__swhatbuf_r+0x2c>
 800f52e:	89a3      	ldrh	r3, [r4, #12]
 800f530:	2100      	movs	r1, #0
 800f532:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f536:	bf14      	ite	ne
 800f538:	2340      	movne	r3, #64	@ 0x40
 800f53a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f53e:	2000      	movs	r0, #0
 800f540:	6031      	str	r1, [r6, #0]
 800f542:	602b      	str	r3, [r5, #0]
 800f544:	b016      	add	sp, #88	@ 0x58
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	466a      	mov	r2, sp
 800f54a:	f000 f849 	bl	800f5e0 <_fstat_r>
 800f54e:	2800      	cmp	r0, #0
 800f550:	dbed      	blt.n	800f52e <__swhatbuf_r+0x12>
 800f552:	9901      	ldr	r1, [sp, #4]
 800f554:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f558:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f55c:	4259      	negs	r1, r3
 800f55e:	4159      	adcs	r1, r3
 800f560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f564:	e7eb      	b.n	800f53e <__swhatbuf_r+0x22>

0800f566 <__smakebuf_r>:
 800f566:	898b      	ldrh	r3, [r1, #12]
 800f568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f56a:	079d      	lsls	r5, r3, #30
 800f56c:	4606      	mov	r6, r0
 800f56e:	460c      	mov	r4, r1
 800f570:	d507      	bpl.n	800f582 <__smakebuf_r+0x1c>
 800f572:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f576:	6023      	str	r3, [r4, #0]
 800f578:	6123      	str	r3, [r4, #16]
 800f57a:	2301      	movs	r3, #1
 800f57c:	6163      	str	r3, [r4, #20]
 800f57e:	b003      	add	sp, #12
 800f580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f582:	ab01      	add	r3, sp, #4
 800f584:	466a      	mov	r2, sp
 800f586:	f7ff ffc9 	bl	800f51c <__swhatbuf_r>
 800f58a:	9f00      	ldr	r7, [sp, #0]
 800f58c:	4605      	mov	r5, r0
 800f58e:	4630      	mov	r0, r6
 800f590:	4639      	mov	r1, r7
 800f592:	f7fd f995 	bl	800c8c0 <_malloc_r>
 800f596:	b948      	cbnz	r0, 800f5ac <__smakebuf_r+0x46>
 800f598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f59c:	059a      	lsls	r2, r3, #22
 800f59e:	d4ee      	bmi.n	800f57e <__smakebuf_r+0x18>
 800f5a0:	f023 0303 	bic.w	r3, r3, #3
 800f5a4:	f043 0302 	orr.w	r3, r3, #2
 800f5a8:	81a3      	strh	r3, [r4, #12]
 800f5aa:	e7e2      	b.n	800f572 <__smakebuf_r+0xc>
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	6020      	str	r0, [r4, #0]
 800f5b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5b4:	81a3      	strh	r3, [r4, #12]
 800f5b6:	9b01      	ldr	r3, [sp, #4]
 800f5b8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f5bc:	b15b      	cbz	r3, 800f5d6 <__smakebuf_r+0x70>
 800f5be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f000 f81e 	bl	800f604 <_isatty_r>
 800f5c8:	b128      	cbz	r0, 800f5d6 <__smakebuf_r+0x70>
 800f5ca:	89a3      	ldrh	r3, [r4, #12]
 800f5cc:	f023 0303 	bic.w	r3, r3, #3
 800f5d0:	f043 0301 	orr.w	r3, r3, #1
 800f5d4:	81a3      	strh	r3, [r4, #12]
 800f5d6:	89a3      	ldrh	r3, [r4, #12]
 800f5d8:	431d      	orrs	r5, r3
 800f5da:	81a5      	strh	r5, [r4, #12]
 800f5dc:	e7cf      	b.n	800f57e <__smakebuf_r+0x18>
	...

0800f5e0 <_fstat_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	4d06      	ldr	r5, [pc, #24]	@ (800f600 <_fstat_r+0x20>)
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	602b      	str	r3, [r5, #0]
 800f5ee:	f000 f821 	bl	800f634 <_fstat>
 800f5f2:	1c43      	adds	r3, r0, #1
 800f5f4:	d102      	bne.n	800f5fc <_fstat_r+0x1c>
 800f5f6:	682b      	ldr	r3, [r5, #0]
 800f5f8:	b103      	cbz	r3, 800f5fc <_fstat_r+0x1c>
 800f5fa:	6023      	str	r3, [r4, #0]
 800f5fc:	bd38      	pop	{r3, r4, r5, pc}
 800f5fe:	bf00      	nop
 800f600:	2007b0b4 	.word	0x2007b0b4

0800f604 <_isatty_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	2300      	movs	r3, #0
 800f608:	4d05      	ldr	r5, [pc, #20]	@ (800f620 <_isatty_r+0x1c>)
 800f60a:	4604      	mov	r4, r0
 800f60c:	4608      	mov	r0, r1
 800f60e:	602b      	str	r3, [r5, #0]
 800f610:	f000 f820 	bl	800f654 <_isatty>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_isatty_r+0x1a>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_isatty_r+0x1a>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	2007b0b4 	.word	0x2007b0b4

0800f624 <_close>:
 800f624:	4b02      	ldr	r3, [pc, #8]	@ (800f630 <_close+0xc>)
 800f626:	2258      	movs	r2, #88	@ 0x58
 800f628:	f04f 30ff 	mov.w	r0, #4294967295
 800f62c:	601a      	str	r2, [r3, #0]
 800f62e:	4770      	bx	lr
 800f630:	2007b0b4 	.word	0x2007b0b4

0800f634 <_fstat>:
 800f634:	4b02      	ldr	r3, [pc, #8]	@ (800f640 <_fstat+0xc>)
 800f636:	2258      	movs	r2, #88	@ 0x58
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	4770      	bx	lr
 800f640:	2007b0b4 	.word	0x2007b0b4

0800f644 <_getpid>:
 800f644:	4b02      	ldr	r3, [pc, #8]	@ (800f650 <_getpid+0xc>)
 800f646:	2258      	movs	r2, #88	@ 0x58
 800f648:	f04f 30ff 	mov.w	r0, #4294967295
 800f64c:	601a      	str	r2, [r3, #0]
 800f64e:	4770      	bx	lr
 800f650:	2007b0b4 	.word	0x2007b0b4

0800f654 <_isatty>:
 800f654:	4b02      	ldr	r3, [pc, #8]	@ (800f660 <_isatty+0xc>)
 800f656:	2258      	movs	r2, #88	@ 0x58
 800f658:	2000      	movs	r0, #0
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	2007b0b4 	.word	0x2007b0b4

0800f664 <_kill>:
 800f664:	4b02      	ldr	r3, [pc, #8]	@ (800f670 <_kill+0xc>)
 800f666:	2258      	movs	r2, #88	@ 0x58
 800f668:	f04f 30ff 	mov.w	r0, #4294967295
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	4770      	bx	lr
 800f670:	2007b0b4 	.word	0x2007b0b4

0800f674 <_lseek>:
 800f674:	4b02      	ldr	r3, [pc, #8]	@ (800f680 <_lseek+0xc>)
 800f676:	2258      	movs	r2, #88	@ 0x58
 800f678:	f04f 30ff 	mov.w	r0, #4294967295
 800f67c:	601a      	str	r2, [r3, #0]
 800f67e:	4770      	bx	lr
 800f680:	2007b0b4 	.word	0x2007b0b4

0800f684 <_read>:
 800f684:	4b02      	ldr	r3, [pc, #8]	@ (800f690 <_read+0xc>)
 800f686:	2258      	movs	r2, #88	@ 0x58
 800f688:	f04f 30ff 	mov.w	r0, #4294967295
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	4770      	bx	lr
 800f690:	2007b0b4 	.word	0x2007b0b4

0800f694 <_sbrk>:
 800f694:	4a04      	ldr	r2, [pc, #16]	@ (800f6a8 <_sbrk+0x14>)
 800f696:	4603      	mov	r3, r0
 800f698:	6811      	ldr	r1, [r2, #0]
 800f69a:	b909      	cbnz	r1, 800f6a0 <_sbrk+0xc>
 800f69c:	4903      	ldr	r1, [pc, #12]	@ (800f6ac <_sbrk+0x18>)
 800f69e:	6011      	str	r1, [r2, #0]
 800f6a0:	6810      	ldr	r0, [r2, #0]
 800f6a2:	4403      	add	r3, r0
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	4770      	bx	lr
 800f6a8:	2007b0bc 	.word	0x2007b0bc
 800f6ac:	2007b0c0 	.word	0x2007b0c0

0800f6b0 <_write>:
 800f6b0:	4b02      	ldr	r3, [pc, #8]	@ (800f6bc <_write+0xc>)
 800f6b2:	2258      	movs	r2, #88	@ 0x58
 800f6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	4770      	bx	lr
 800f6bc:	2007b0b4 	.word	0x2007b0b4

0800f6c0 <_exit>:
 800f6c0:	e7fe      	b.n	800f6c0 <_exit>
	...

0800f6c4 <_init>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	bf00      	nop
 800f6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ca:	bc08      	pop	{r3}
 800f6cc:	469e      	mov	lr, r3
 800f6ce:	4770      	bx	lr

0800f6d0 <_fini>:
 800f6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d2:	bf00      	nop
 800f6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6d6:	bc08      	pop	{r3}
 800f6d8:	469e      	mov	lr, r3
 800f6da:	4770      	bx	lr
