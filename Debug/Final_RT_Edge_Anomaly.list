
Final_RT_Edge_Anomaly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f54c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f244  0800f7a0  0800f7a0  000107a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e9e4  0801e9e4  00021144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e9e4  0801e9e4  0001f9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e9ec  0801e9ec  00021144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e9ec  0801e9ec  0001f9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e9f0  0801e9f0  0001f9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001144  20000000  0801e9f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00079fc8  20001148  0801fb38  00021148  2**3
                  ALLOC
 10 ._user_heap_stack 00001800  2007b110  0801fb38  00022110  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00021144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f964  00000000  00000000  0002117a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e82  00000000  00000000  00050ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000199a1  00000000  00000000  00055960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0006f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002de3  00000000  00000000  00070788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000382e2  00000000  00000000  0007356b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000323df  00000000  00000000  000ab84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00166917  00000000  00000000  000ddc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00244543  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051e8  00000000  00000000  002445cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  002497b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20001148 	.word	0x20001148
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f784 	.word	0x0800f784

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000114c 	.word	0x2000114c
 800028c:	0800f784 	.word	0x0800f784

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <ECGSamplingTask>:
    xSemaphoreGive(adcSemaphore);
    return value;
}

/* Main ECG sampling & inference task */
void ECGSamplingTask(void *argument) {
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	ed2d 8b08 	vpush	{d8-d11}
    g_network_activations_table[1] = (ai_handle)ai_activations;
 8000f50:	4bb1      	ldr	r3, [pc, #708]	@ (8001218 <ECGSamplingTask+0x2d0>)
 8000f52:	49b2      	ldr	r1, [pc, #712]	@ (800121c <ECGSamplingTask+0x2d4>)
void ECGSamplingTask(void *argument) {
 8000f54:	b0c9      	sub	sp, #292	@ 0x124
    err = ai_network_create_and_init(
 8000f56:	4ab2      	ldr	r2, [pc, #712]	@ (8001220 <ECGSamplingTask+0x2d8>)
 8000f58:	48b2      	ldr	r0, [pc, #712]	@ (8001224 <ECGSamplingTask+0x2dc>)
    g_network_activations_table[1] = (ai_handle)ai_activations;
 8000f5a:	f841 3f04 	str.w	r3, [r1, #4]!
    err = ai_network_create_and_init(
 8000f5e:	f006 fc07 	bl	8007770 <ai_network_create_and_init>
    if (err.type != AI_ERROR_NONE) {
 8000f62:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 8000f66:	f040 821a 	bne.w	800139e <ECGSamplingTask+0x456>
    ai_network_get_info(ecg_network, &info);
 8000f6a:	4fae      	ldr	r7, [pc, #696]	@ (8001224 <ECGSamplingTask+0x2dc>)
 8000f6c:	f10d 0b98 	add.w	fp, sp, #152	@ 0x98
 8000f70:	4659      	mov	r1, fp
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f006 fa60 	bl	8007438 <ai_network_get_info>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Model initialized OK\r\n",
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	2216      	movs	r2, #22
 8000f7e:	49aa      	ldr	r1, [pc, #680]	@ (8001228 <ECGSamplingTask+0x2e0>)
 8000f80:	48aa      	ldr	r0, [pc, #680]	@ (800122c <ECGSamplingTask+0x2e4>)
 8000f82:	f005 fde9 	bl	8006b58 <HAL_UART_Transmit>
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f86:	4621      	mov	r1, r4
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f006 faaf 	bl	80074ec <ai_network_inputs_get>
 8000f8e:	4da8      	ldr	r5, [pc, #672]	@ (8001230 <ECGSamplingTask+0x2e8>)
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f90:	4621      	mov	r1, r4
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f92:	6028      	str	r0, [r5, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f94:	6838      	ldr	r0, [r7, #0]
        in_bufs  = ai_network_inputs_get(ecg_network,  NULL);
 8000f96:	950e      	str	r5, [sp, #56]	@ 0x38
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000f98:	f006 fab6 	bl	8007508 <ai_network_outputs_get>
 8000f9c:	4604      	mov	r4, r0
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000f9e:	9e35      	ldr	r6, [sp, #212]	@ 0xd4
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fa0:	4ba4      	ldr	r3, [pc, #656]	@ (8001234 <ECGSamplingTask+0x2ec>)
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fa2:	6828      	ldr	r0, [r5, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fa4:	930d      	str	r3, [sp, #52]	@ 0x34
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fa6:	6933      	ldr	r3, [r6, #16]
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fa8:	f8df 82c4 	ldr.w	r8, [pc, #708]	@ 8001270 <ECGSamplingTask+0x328>
        in_bufs[0].size = info.inputs[0].size;    // should be 1000
 8000fac:	6103      	str	r3, [r0, #16]
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fae:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
        in_bufs[0].data = AI_HANDLE_PTR(ai_input_buffer);
 8000fb0:	f8c0 8004 	str.w	r8, [r0, #4]
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fb4:	691d      	ldr	r5, [r3, #16]
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fb6:	4aa0      	ldr	r2, [pc, #640]	@ (8001238 <ECGSamplingTask+0x2f0>)
        out_bufs[0].size = info.outputs[0].size;  // should match your model’s output
 8000fb8:	6125      	str	r5, [r4, #16]
        snprintf(dbg, sizeof(dbg),
 8000fba:	6933      	ldr	r3, [r6, #16]
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fbc:	4e9e      	ldr	r6, [pc, #632]	@ (8001238 <ECGSamplingTask+0x2f0>)
        snprintf(dbg, sizeof(dbg),
 8000fbe:	2150      	movs	r1, #80	@ 0x50
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fc0:	6066      	str	r6, [r4, #4]
        snprintf(dbg, sizeof(dbg),
 8000fc2:	9500      	str	r5, [sp, #0]
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fc4:	4d9b      	ldr	r5, [pc, #620]	@ (8001234 <ECGSamplingTask+0x2ec>)
        out_bufs[0].data = AI_HANDLE_PTR(ai_output_buffer);
 8000fc6:	920f      	str	r2, [sp, #60]	@ 0x3c
        snprintf(dbg, sizeof(dbg),
 8000fc8:	a812      	add	r0, sp, #72	@ 0x48
 8000fca:	4a9c      	ldr	r2, [pc, #624]	@ (800123c <ECGSamplingTask+0x2f4>)
        out_bufs = ai_network_outputs_get(ecg_network, NULL);
 8000fcc:	602c      	str	r4, [r5, #0]
        snprintf(dbg, sizeof(dbg),
 8000fce:	f00c faab 	bl	800d528 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000fd2:	a812      	add	r0, sp, #72	@ 0x48
 8000fd4:	f7ff f95c 	bl	8000290 <strlen>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	4893      	ldr	r0, [pc, #588]	@ (800122c <ECGSamplingTask+0x2e4>)
 8000fe0:	a912      	add	r1, sp, #72	@ 0x48
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	f005 fdb8 	bl	8006b58 <HAL_UART_Transmit>

    InitAI();
    if(ecg_network == AI_HANDLE_NULL) {
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 81f6 	beq.w	80013dc <ECGSamplingTask+0x494>
        HAL_UART_Transmit(&huart3, (uint8_t*)"AI Init Failed!\r\n", 16, 100);
        vTaskDelete(NULL);
    }

    TickType_t last_wake = xTaskGetTickCount();
 8000ff0:	f007 ff12 	bl	8008e18 <xTaskGetTickCount>
        vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(SAMPLE_RATE_MS));

        // Read and preprocess ADC
        int16_t raw = ReadADC();
        float voltage = raw * (3.3f / 4095.0f);
        float centered = (voltage - 1.65f);
 8000ff4:	ed9f aa92 	vldr	s20, [pc, #584]	@ 8001240 <ECGSamplingTask+0x2f8>
 8000ff8:	eddf 8a92 	vldr	s17, [pc, #584]	@ 8001244 <ECGSamplingTask+0x2fc>
void ECGSamplingTask(void *argument) {
 8000ffc:	ed9f ba92 	vldr	s22, [pc, #584]	@ 8001248 <ECGSamplingTask+0x300>
                snprintf(errBuf, sizeof(errBuf), "Inference failed: code=%d, type=%d\r\n", err.code, err.type);
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);

                // Print input buffer stats
                float min_val = 255, max_val = 0;
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001000:	ed9f 9b83 	vldr	d9, [pc, #524]	@ 8001210 <ECGSamplingTask+0x2c8>
 8001004:	4d91      	ldr	r5, [pc, #580]	@ (800124c <ECGSamplingTask+0x304>)
 8001006:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8001274 <ECGSamplingTask+0x32c>
 800100a:	4e91      	ldr	r6, [pc, #580]	@ (8001250 <ECGSamplingTask+0x308>)
    TickType_t last_wake = xTaskGetTickCount();
 800100c:	9010      	str	r0, [sp, #64]	@ 0x40
 800100e:	f505 677a 	add.w	r7, r5, #4000	@ 0xfa0
    return sum / size;
 8001012:	eddf aa90 	vldr	s21, [pc, #576]	@ 8001254 <ECGSamplingTask+0x30c>
    HAL_StatusTypeDef status = HAL_ADC_Start(&hadc1);
 8001016:	f8df 9254 	ldr.w	r9, [pc, #596]	@ 800126c <ECGSamplingTask+0x324>
 800101a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800101e:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8001022:	e00b      	b.n	800103c <ECGSamplingTask+0xf4>
void ECGSamplingTask(void *argument) {
 8001024:	eeb0 7a4b 	vmov.f32	s14, s22
        modelInputBuffer[sampleCount++] = centered;
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	1c5a      	adds	r2, r3, #1
        if (sampleCount >= MODEL_INPUT_SIZE) {
 800102c:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
        modelInputBuffer[sampleCount++] = centered;
 8001030:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001034:	ed83 7a00 	vstr	s14, [r3]
 8001038:	6032      	str	r2, [r6, #0]
        if (sampleCount >= MODEL_INPUT_SIZE) {
 800103a:	d232      	bcs.n	80010a2 <ECGSamplingTask+0x15a>
        vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(SAMPLE_RATE_MS));
 800103c:	2102      	movs	r1, #2
 800103e:	a810      	add	r0, sp, #64	@ 0x40
 8001040:	f007 fde0 	bl	8008c04 <xTaskDelayUntil>
    if (xSemaphoreTake(adcSemaphore, pdMS_TO_TICKS(10)) != pdTRUE)
 8001044:	210a      	movs	r1, #10
 8001046:	f8da 0000 	ldr.w	r0, [sl]
 800104a:	f006 ffbf 	bl	8007fcc <xQueueSemaphoreTake>
 800104e:	2801      	cmp	r0, #1
 8001050:	4604      	mov	r4, r0
 8001052:	d1e7      	bne.n	8001024 <ECGSamplingTask+0xdc>
    HAL_StatusTypeDef status = HAL_ADC_Start(&hadc1);
 8001054:	4648      	mov	r0, r9
 8001056:	f001 fb79 	bl	800274c <HAL_ADC_Start>
    if (status != HAL_OK) {
 800105a:	4683      	mov	fp, r0
 800105c:	2800      	cmp	r0, #0
 800105e:	f040 80be 	bne.w	80011de <ECGSamplingTask+0x296>
    status = HAL_ADC_PollForConversion(&hadc1, 1);
 8001062:	4621      	mov	r1, r4
 8001064:	4648      	mov	r0, r9
 8001066:	f000 ff95 	bl	8001f94 <HAL_ADC_PollForConversion>
    if (status != HAL_OK) {
 800106a:	4680      	mov	r8, r0
 800106c:	2800      	cmp	r0, #0
 800106e:	f040 80c1 	bne.w	80011f4 <ECGSamplingTask+0x2ac>
    int16_t value = HAL_ADC_GetValue(&hadc1);
 8001072:	4648      	mov	r0, r9
 8001074:	f001 f804 	bl	8002080 <HAL_ADC_GetValue>
 8001078:	4604      	mov	r4, r0
    HAL_ADC_Stop(&hadc1);
 800107a:	4648      	mov	r0, r9
 800107c:	f001 fc0a 	bl	8002894 <HAL_ADC_Stop>
        float voltage = raw * (3.3f / 4095.0f);
 8001080:	b224      	sxth	r4, r4
    xSemaphoreGive(adcSemaphore);
 8001082:	4643      	mov	r3, r8
 8001084:	4642      	mov	r2, r8
 8001086:	4641      	mov	r1, r8
 8001088:	f8da 0000 	ldr.w	r0, [sl]
 800108c:	f006 fcae 	bl	80079ec <xQueueGenericSend>
        float voltage = raw * (3.3f / 4095.0f);
 8001090:	ee07 4a90 	vmov	s15, r4
        float centered = (voltage - 1.65f);
 8001094:	eeb0 7a68 	vmov.f32	s14, s17
        float voltage = raw * (3.3f / 4095.0f);
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        float centered = (voltage - 1.65f);
 800109c:	eea7 7a8a 	vfma.f32	s14, s15, s20
    return value;
 80010a0:	e7c2      	b.n	8001028 <ECGSamplingTask+0xe0>
 80010a2:	4d6a      	ldr	r5, [pc, #424]	@ (800124c <ECGSamplingTask+0x304>)
    float sum = 0.0f;
 80010a4:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8001258 <ECGSamplingTask+0x310>
        if (sampleCount >= MODEL_INPUT_SIZE) {
 80010a8:	462b      	mov	r3, r5
 80010aa:	462a      	mov	r2, r5
    float sum = 0.0f;
 80010ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80010b0:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
    for (uint32_t i = 0; i < size; i++) sum += buffer[i];
 80010b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80010b8:	4297      	cmp	r7, r2
 80010ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010be:	d1f9      	bne.n	80010b4 <ECGSamplingTask+0x16c>
    return sum / size;
 80010c0:	ee87 8aaa 	vdiv.f32	s16, s15, s21
    float variance = 0.0f;
 80010c4:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001258 <ECGSamplingTask+0x310>
        float diff = buffer[i] - mean;
 80010c8:	ecf3 7a01 	vldmia	r3!, {s15}
 80010cc:	ee77 7ac8 	vsub.f32	s15, s15, s16
    for (uint32_t i = 0; i < size; i++) {
 80010d0:	429f      	cmp	r7, r3
        variance += diff * diff;
 80010d2:	eea7 7aa7 	vfma.f32	s14, s15, s15
    for (uint32_t i = 0; i < size; i++) {
 80010d6:	d1f7      	bne.n	80010c8 <ECGSamplingTask+0x180>
    return sqrtf(variance / size);
 80010d8:	ee87 0a2a 	vdiv.f32	s0, s14, s21
 80010dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	f100 8184 	bmi.w	80013f0 <ECGSamplingTask+0x4a8>
 80010e8:	eef1 6ac0 	vsqrt.f32	s13, s0
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80010f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80010f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f6:	da18      	bge.n	800112a <ECGSamplingTask+0x1e2>
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 80010f8:	eddf 7a58 	vldr	s15, [pc, #352]	@ 800125c <ECGSamplingTask+0x314>
 80010fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001100:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8001102:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800110e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001114:	9a11      	ldr	r2, [sp, #68]	@ 0x44
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 8001116:	eb08 0383 	add.w	r3, r8, r3, lsl #2
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 800111a:	3201      	adds	r2, #1
 800111c:	9211      	str	r2, [sp, #68]	@ 0x44
 800111e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
            	ai_input_buffer[i] = (modelInputBuffer[i] - dynamicMean) / (dynamicStd + 1e-8f);
 8001120:	ed83 7a00 	vstr	s14, [r3]
            for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001124:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001128:	dbea      	blt.n	8001100 <ECGSamplingTask+0x1b8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800112a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800112e:	f3bf 8f6f 	isb	sy
            ai_i32 ret = ai_network_run(ecg_network, in_bufs, out_bufs);
 8001132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <ECGSamplingTask+0x2dc>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f006 fb71 	bl	8007824 <ai_network_run>
            if (ret == AI_NETWORK_OUT_NUM) {
 8001142:	2801      	cmp	r0, #1
 8001144:	f040 8098 	bne.w	8001278 <ECGSamplingTask+0x330>
            	ai_float yq = ai_output_buffer[0];
 8001148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
            	int is_anomaly = yq > 0.5f ? 1 : 0;
 8001152:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8001156:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            	snprintf(uartBuffer, sizeof(uartBuffer), "Anomaly:%d, Score:%.4f\r\n", is_anomaly, yq);
 8001162:	ee17 0a10 	vmov	r0, s14
            	int is_anomaly = yq > 0.5f ? 1 : 0;
 8001166:	bfcc      	ite	gt
 8001168:	2401      	movgt	r4, #1
 800116a:	2400      	movle	r4, #0
            	snprintf(uartBuffer, sizeof(uartBuffer), "Anomaly:%d, Score:%.4f\r\n", is_anomaly, yq);
 800116c:	f7ff f9fc 	bl	8000568 <__aeabi_f2d>
 8001170:	4623      	mov	r3, r4
 8001172:	e9cd 0100 	strd	r0, r1, [sp]
 8001176:	4a3a      	ldr	r2, [pc, #232]	@ (8001260 <ECGSamplingTask+0x318>)
 8001178:	2140      	movs	r1, #64	@ 0x40
 800117a:	4658      	mov	r0, fp
 800117c:	f00c f9d4 	bl	800d528 <sniprintf>
                // Print first few samples
                snprintf(errBuf, sizeof(errBuf), "Samples: %.2f, %.2f, %.2f, %.2f, %.2f\r\n",
                         ai_input_buffer[0], ai_input_buffer[1],
                         ai_input_buffer[2], ai_input_buffer[3],
                         ai_input_buffer[4]);
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 8001180:	4658      	mov	r0, fp
 8001182:	f7ff f885 	bl	8000290 <strlen>
 8001186:	4602      	mov	r2, r0
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	b292      	uxth	r2, r2
 800118e:	4659      	mov	r1, fp
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <ECGSamplingTask+0x2e4>)
 8001192:	f005 fce1 	bl	8006b58 <HAL_UART_Transmit>
            }

            sampleCount = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	6033      	str	r3, [r6, #0]
    if (xTaskGetTickCount() - last > pdMS_TO_TICKS(5000)) {
 800119a:	f007 fe3d 	bl	8008e18 <xTaskGetTickCount>
 800119e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011a2:	4a30      	ldr	r2, [pc, #192]	@ (8001264 <ECGSamplingTask+0x31c>)
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	1a80      	subs	r0, r0, r2
 80011a8:	4298      	cmp	r0, r3
 80011aa:	f67f af34 	bls.w	8001016 <ECGSamplingTask+0xce>
        last = xTaskGetTickCount();
 80011ae:	f007 fe33 	bl	8008e18 <xTaskGetTickCount>
 80011b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <ECGSamplingTask+0x31c>)
 80011b4:	6018      	str	r0, [r3, #0]
        snprintf(buf, sizeof(buf), "Free heap: %u bytes\r\n", xPortGetFreeHeapSize());
 80011b6:	f008 fd7f 	bl	8009cb8 <xPortGetFreeHeapSize>
 80011ba:	2140      	movs	r1, #64	@ 0x40
 80011bc:	4603      	mov	r3, r0
 80011be:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <ECGSamplingTask+0x320>)
 80011c0:	4658      	mov	r0, fp
 80011c2:	f00c f9b1 	bl	800d528 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80011c6:	4658      	mov	r0, fp
 80011c8:	f7ff f862 	bl	8000290 <strlen>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	4659      	mov	r1, fp
 80011d4:	b292      	uxth	r2, r2
 80011d6:	4815      	ldr	r0, [pc, #84]	@ (800122c <ECGSamplingTask+0x2e4>)
 80011d8:	f005 fcbe 	bl	8006b58 <HAL_UART_Transmit>
}
 80011dc:	e719      	b.n	8001012 <ECGSamplingTask+0xca>
        HAL_ADC_Stop(&hadc1);
 80011de:	4823      	ldr	r0, [pc, #140]	@ (800126c <ECGSamplingTask+0x324>)
 80011e0:	f001 fb58 	bl	8002894 <HAL_ADC_Stop>
        xSemaphoreGive(adcSemaphore);
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8da 0000 	ldr.w	r0, [sl]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	f006 fbfd 	bl	80079ec <xQueueGenericSend>
        return 2048;
 80011f2:	e717      	b.n	8001024 <ECGSamplingTask+0xdc>
        HAL_ADC_Stop(&hadc1);
 80011f4:	481d      	ldr	r0, [pc, #116]	@ (800126c <ECGSamplingTask+0x324>)
 80011f6:	f001 fb4d 	bl	8002894 <HAL_ADC_Stop>
        xSemaphoreGive(adcSemaphore);
 80011fa:	465b      	mov	r3, fp
 80011fc:	465a      	mov	r2, fp
 80011fe:	4659      	mov	r1, fp
 8001200:	f8da 0000 	ldr.w	r0, [sl]
 8001204:	f006 fbf2 	bl	80079ec <xQueueGenericSend>
        return 2048;
 8001208:	e70c      	b.n	8001024 <ECGSamplingTask+0xdc>
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
	...
 8001218:	20001170 	.word	0x20001170
 800121c:	20000f6c 	.word	0x20000f6c
 8001220:	20000f64 	.word	0x20000f64
 8001224:	20060714 	.word	0x20060714
 8001228:	0800f7ec 	.word	0x0800f7ec
 800122c:	200616d0 	.word	0x200616d0
 8001230:	2000116c 	.word	0x2000116c
 8001234:	20001168 	.word	0x20001168
 8001238:	2005f770 	.word	0x2005f770
 800123c:	0800f804 	.word	0x0800f804
 8001240:	3a534067 	.word	0x3a534067
 8001244:	bfd33333 	.word	0xbfd33333
 8001248:	39d34000 	.word	0x39d34000
 800124c:	2006071c 	.word	0x2006071c
 8001250:	20060718 	.word	0x20060718
 8001254:	447a0000 	.word	0x447a0000
 8001258:	00000000 	.word	0x00000000
 800125c:	322bcc77 	.word	0x322bcc77
 8001260:	0800f844 	.word	0x0800f844
 8001264:	20001164 	.word	0x20001164
 8001268:	0800f7c0 	.word	0x0800f7c0
 800126c:	200618cc 	.word	0x200618cc
 8001270:	2005f774 	.word	0x2005f774
 8001274:	200616c0 	.word	0x200616c0
                ai_error err = ai_network_get_error(ecg_network);
 8001278:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <ECGSamplingTask+0x4c0>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f006 f934 	bl	80074e8 <ai_network_get_error>
 8001280:	4603      	mov	r3, r0
                snprintf(errBuf, sizeof(errBuf), "Inference failed: code=%d, type=%d\r\n", err.code, err.type);
 8001282:	b2dc      	uxtb	r4, r3
 8001284:	2180      	movs	r1, #128	@ 0x80
 8001286:	4a61      	ldr	r2, [pc, #388]	@ (800140c <ECGSamplingTask+0x4c4>)
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	4658      	mov	r0, fp
 800128c:	9400      	str	r4, [sp, #0]
 800128e:	f00c f94b 	bl	800d528 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 8001292:	4658      	mov	r0, fp
 8001294:	f7fe fffc 	bl	8000290 <strlen>
 8001298:	4602      	mov	r2, r0
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	4659      	mov	r1, fp
 80012a0:	485b      	ldr	r0, [pc, #364]	@ (8001410 <ECGSamplingTask+0x4c8>)
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f005 fc58 	bl	8006b58 <HAL_UART_Transmit>
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80012ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b2:	da6e      	bge.n	8001392 <ECGSamplingTask+0x44a>
                float min_val = 255, max_val = 0;
 80012b4:	ed9f 8a57 	vldr	s16, [pc, #348]	@ 8001414 <ECGSamplingTask+0x4cc>
 80012b8:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001418 <ECGSamplingTask+0x4d0>
                    if (ai_input_buffer[i] < min_val) min_val = ai_input_buffer[i];
 80012bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012be:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d504      	bpl.n	80012da <ECGSamplingTask+0x392>
 80012d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012d2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012d6:	ed93 7a00 	vldr	s14, [r3]
                    if (ai_input_buffer[i] > max_val) max_val = ai_input_buffer[i];
 80012da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012dc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	dd04      	ble.n	80012f8 <ECGSamplingTask+0x3b0>
 80012ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012f0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012f4:	ed93 8a00 	vldr	s16, [r3]
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 80012f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80012fa:	3301      	adds	r3, #1
 80012fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80012fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8001300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001304:	dbda      	blt.n	80012bc <ECGSamplingTask+0x374>
                snprintf(errBuf, sizeof(errBuf), "Input range: min=%.2f, max=%.2f\r\n", min_val, max_val);
 8001306:	ee17 0a10 	vmov	r0, s14
 800130a:	f7ff f92d 	bl	8000568 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ee18 0a10 	vmov	r0, s16
 8001316:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800131a:	f7ff f925 	bl	8000568 <__aeabi_f2d>
 800131e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001322:	e9cd 2300 	strd	r2, r3, [sp]
 8001326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800132a:	4a3c      	ldr	r2, [pc, #240]	@ (800141c <ECGSamplingTask+0x4d4>)
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	4658      	mov	r0, fp
 8001330:	f00c f8fa 	bl	800d528 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)errBuf, strlen(errBuf), HAL_MAX_DELAY);
 8001334:	4658      	mov	r0, fp
 8001336:	f7fe ffab 	bl	8000290 <strlen>
 800133a:	4602      	mov	r2, r0
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	b292      	uxth	r2, r2
 8001342:	4659      	mov	r1, fp
 8001344:	4832      	ldr	r0, [pc, #200]	@ (8001410 <ECGSamplingTask+0x4c8>)
 8001346:	f005 fc07 	bl	8006b58 <HAL_UART_Transmit>
                snprintf(errBuf, sizeof(errBuf), "Samples: %.2f, %.2f, %.2f, %.2f, %.2f\r\n",
 800134a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800134e:	f7ff f90b 	bl	8000568 <__aeabi_f2d>
 8001352:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001356:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800135a:	f7ff f905 	bl	8000568 <__aeabi_f2d>
 800135e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001362:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001366:	f7ff f8ff 	bl	8000568 <__aeabi_f2d>
 800136a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800136e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001372:	f7ff f8f9 	bl	8000568 <__aeabi_f2d>
 8001376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800137a:	f8d8 0000 	ldr.w	r0, [r8]
 800137e:	f7ff f8f3 	bl	8000568 <__aeabi_f2d>
 8001382:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <ECGSamplingTask+0x4d8>)
 8001384:	e9cd 0100 	strd	r0, r1, [sp]
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	4658      	mov	r0, fp
 800138c:	f00c f8cc 	bl	800d528 <sniprintf>
 8001390:	e6f6      	b.n	8001180 <ECGSamplingTask+0x238>
                for (volatile int i = 0; i < MODEL_INPUT_SIZE; i++) {
 8001392:	ec51 0b19 	vmov	r0, r1, d9
 8001396:	a31a      	add	r3, pc, #104	@ (adr r3, 8001400 <ECGSamplingTask+0x4b8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	e7c1      	b.n	8001322 <ECGSamplingTask+0x3da>
        snprintf(buf, sizeof(buf), "AI Init error: %d\r\n", err.code);
 800139e:	4603      	mov	r3, r0
 80013a0:	f10d 0b98 	add.w	fp, sp, #152	@ 0x98
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <ECGSamplingTask+0x4dc>)
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	4658      	mov	r0, fp
 80013ac:	f00c f8bc 	bl	800d528 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80013b0:	4658      	mov	r0, fp
 80013b2:	f7fe ff6d 	bl	8000290 <strlen>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	b292      	uxth	r2, r2
 80013be:	4659      	mov	r1, fp
 80013c0:	4813      	ldr	r0, [pc, #76]	@ (8001410 <ECGSamplingTask+0x4c8>)
 80013c2:	f005 fbc9 	bl	8006b58 <HAL_UART_Transmit>
        ecg_network = AI_HANDLE_NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <ECGSamplingTask+0x4e0>)
 80013ca:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8001438 <ECGSamplingTask+0x4f0>
 80013ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80013d0:	4a16      	ldr	r2, [pc, #88]	@ (800142c <ECGSamplingTask+0x4e4>)
 80013d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80013d4:	4a16      	ldr	r2, [pc, #88]	@ (8001430 <ECGSamplingTask+0x4e8>)
 80013d6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <ECGSamplingTask+0x4c0>)
 80013da:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&huart3, (uint8_t*)"AI Init Failed!\r\n", 16, 100);
 80013dc:	2364      	movs	r3, #100	@ 0x64
 80013de:	2210      	movs	r2, #16
 80013e0:	4914      	ldr	r1, [pc, #80]	@ (8001434 <ECGSamplingTask+0x4ec>)
 80013e2:	480b      	ldr	r0, [pc, #44]	@ (8001410 <ECGSamplingTask+0x4c8>)
 80013e4:	f005 fbb8 	bl	8006b58 <HAL_UART_Transmit>
        vTaskDelete(NULL);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f007 fba1 	bl	8008b30 <vTaskDelete>
 80013ee:	e5ff      	b.n	8000ff0 <ECGSamplingTask+0xa8>
    return sqrtf(variance / size);
 80013f0:	f00b f97c 	bl	800c6ec <sqrtf>
 80013f4:	eef0 6a40 	vmov.f32	s13, s0
 80013f8:	e678      	b.n	80010ec <ECGSamplingTask+0x1a4>
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	406fe000 	.word	0x406fe000
 8001408:	20060714 	.word	0x20060714
 800140c:	0800f860 	.word	0x0800f860
 8001410:	200616d0 	.word	0x200616d0
 8001414:	00000000 	.word	0x00000000
 8001418:	437f0000 	.word	0x437f0000
 800141c:	0800f888 	.word	0x0800f888
 8001420:	0800f8ac 	.word	0x0800f8ac
 8001424:	0800f7d8 	.word	0x0800f7d8
 8001428:	2000116c 	.word	0x2000116c
 800142c:	20001168 	.word	0x20001168
 8001430:	2005f770 	.word	0x2005f770
 8001434:	0800f830 	.word	0x0800f830
 8001438:	2005f774 	.word	0x2005f774

0800143c <ECGTask_Init>:
//        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

/* ECG Task and Semaphore Initialization */
void ECGTask_Init(void) {
 800143c:	b508      	push	{r3, lr}
    adcSemaphore = xSemaphoreCreateMutex();
 800143e:	2001      	movs	r0, #1
 8001440:	f006 fc2e 	bl	8007ca0 <xQueueCreateMutex>
 8001444:	4602      	mov	r2, r0
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <ECGTask_Init+0x1c>)
    uartSemaphore = xSemaphoreCreateMutex();
 8001448:	2001      	movs	r0, #1
    adcSemaphore = xSemaphoreCreateMutex();
 800144a:	601a      	str	r2, [r3, #0]
    uartSemaphore = xSemaphoreCreateMutex();
 800144c:	f006 fc28 	bl	8007ca0 <xQueueCreateMutex>
 8001450:	4b02      	ldr	r3, [pc, #8]	@ (800145c <ECGTask_Init+0x20>)
 8001452:	6018      	str	r0, [r3, #0]
}
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	200616c0 	.word	0x200616c0
 800145c:	200616bc 	.word	0x200616bc

08001460 <spo2_handler>:
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
    taskDISABLE_INTERRUPTS();
    while (1);
}

void spo2_handler(void * parameters){
 8001460:	b500      	push	{lr}
 8001462:	b083      	sub	sp, #12
	TickType_t last_wake = xTaskGetTickCount();
 8001464:	f007 fcd8 	bl	8008e18 <xTaskGetTickCount>
//	 PPGSample_t sample;
	while(1){
		vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(1000));
		HAL_UART_Transmit(&huart3, (uint8_t *)"Hello from spo2\r\n", sizeof("Hello from spo2\r\n"), 100);
 8001468:	4e09      	ldr	r6, [pc, #36]	@ (8001490 <spo2_handler+0x30>)
 800146a:	4d0a      	ldr	r5, [pc, #40]	@ (8001494 <spo2_handler+0x34>)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800146c:	4c0a      	ldr	r4, [pc, #40]	@ (8001498 <spo2_handler+0x38>)
	TickType_t last_wake = xTaskGetTickCount();
 800146e:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil(&last_wake, pdMS_TO_TICKS(1000));
 8001470:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001474:	a801      	add	r0, sp, #4
 8001476:	f007 fbc5 	bl	8008c04 <xTaskDelayUntil>
		HAL_UART_Transmit(&huart3, (uint8_t *)"Hello from spo2\r\n", sizeof("Hello from spo2\r\n"), 100);
 800147a:	4631      	mov	r1, r6
 800147c:	2364      	movs	r3, #100	@ 0x64
 800147e:	2212      	movs	r2, #18
 8001480:	4628      	mov	r0, r5
 8001482:	f005 fb69 	bl	8006b58 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001486:	2101      	movs	r1, #1
 8001488:	4620      	mov	r0, r4
 800148a:	f001 fbef 	bl	8002c6c <HAL_GPIO_TogglePin>
	while(1){
 800148e:	e7ef      	b.n	8001470 <spo2_handler+0x10>
 8001490:	0800f8d4 	.word	0x0800f8d4
 8001494:	200616d0 	.word	0x200616d0
 8001498:	42020400 	.word	0x42020400

0800149c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 800149c:	b500      	push	{lr}
 800149e:	b091      	sub	sp, #68	@ 0x44
 80014a0:	460b      	mov	r3, r1
    snprintf(buf, sizeof(buf), "Stack overflow in %s\r\n", pcTaskName);
 80014a2:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <vApplicationStackOverflowHook+0x2c>)
 80014a4:	2140      	movs	r1, #64	@ 0x40
 80014a6:	4668      	mov	r0, sp
 80014a8:	f00c f83e 	bl	800d528 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80014ac:	4668      	mov	r0, sp
 80014ae:	f7fe feef 	bl	8000290 <strlen>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	4669      	mov	r1, sp
 80014ba:	b292      	uxth	r2, r2
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <vApplicationStackOverflowHook+0x30>)
 80014be:	f005 fb4b 	bl	8006b58 <HAL_UART_Transmit>
    taskDISABLE_INTERRUPTS();
 80014c2:	f008 fa83 	bl	80099cc <ulSetInterruptMask>
    while (1);
 80014c6:	e7fe      	b.n	80014c6 <vApplicationStackOverflowHook+0x2a>
 80014c8:	0800f8e8 	.word	0x0800f8e8
 80014cc:	200616d0 	.word	0x200616d0

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b5d0      	push	{r4, r6, r7, lr}
 80014d2:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d4:	2220      	movs	r2, #32
 80014d6:	2100      	movs	r1, #0
 80014d8:	a80a      	add	r0, sp, #40	@ 0x28
 80014da:	f00c f8b8 	bl	800d64e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014de:	2300      	movs	r3, #0
 80014e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80014e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80014e8:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014ec:	4a1f      	ldr	r2, [pc, #124]	@ (800156c <SystemClock_Config+0x9c>)
 80014ee:	6913      	ldr	r3, [r2, #16]
 80014f0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80014f4:	6113      	str	r3, [r2, #16]
 80014f6:	6913      	ldr	r3, [r2, #16]
 80014f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001500:	6953      	ldr	r3, [r2, #20]
 8001502:	071b      	lsls	r3, r3, #28
 8001504:	d5fc      	bpl.n	8001500 <SystemClock_Config+0x30>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001506:	26fa      	movs	r6, #250	@ 0xfa
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2001      	movs	r0, #1
 800150a:	f44f 11a8 	mov.w	r1, #1376256	@ 0x150000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001512:	9615      	str	r6, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001514:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001516:	2600      	movs	r6, #0
 8001518:	2700      	movs	r7, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001520:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001524:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001528:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800152a:	e9cd 671a 	strd	r6, r7, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152e:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001530:	9219      	str	r2, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f001 fcf3 	bl	8002f1c <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	b108      	cbz	r0, 800153e <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	231f      	movs	r3, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001544:	2105      	movs	r1, #5
 8001546:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001550:	f002 f83a 	bl	80035c8 <HAL_RCC_ClockConfig>
 8001554:	b108      	cbz	r0, 800155a <SystemClock_Config+0x8a>
 8001556:	b672      	cpsid	i
  while (1)
 8001558:	e7fe      	b.n	8001558 <SystemClock_Config+0x88>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <SystemClock_Config+0xa0>)
 800155c:	6813      	ldr	r3, [r2, #0]
 800155e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	b01c      	add	sp, #112	@ 0x70
 800156a:	bdd0      	pop	{r4, r6, r7, pc}
 800156c:	44020800 	.word	0x44020800
 8001570:	40022000 	.word	0x40022000

08001574 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	2400      	movs	r4, #0
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b092      	sub	sp, #72	@ 0x48
  HAL_Init();
 800157a:	f000 fc01 	bl	8001d80 <HAL_Init>
  SystemClock_Config();
 800157e:	f7ff ffa7 	bl	80014d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001586:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4bad      	ldr	r3, [pc, #692]	@ (8001840 <main+0x2cc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	f042 0204 	orr.w	r2, r2, #4
 8001598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800159c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a0:	2510      	movs	r5, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	f002 0204 	and.w	r2, r2, #4
 80015a6:	9203      	str	r2, [sp, #12]
 80015a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80015ae:	2110      	movs	r1, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80015b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80015bc:	48a1      	ldr	r0, [pc, #644]	@ (8001844 <main+0x2d0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015be:	f002 0220 	and.w	r2, r2, #32
 80015c2:	9204      	str	r2, [sp, #16]
 80015c4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  hi2c1.Init.Timing = 0x60808CD3;
 80015ca:	4f9f      	ldr	r7, [pc, #636]	@ (8001848 <main+0x2d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80015d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015d8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80015dc:	9205      	str	r2, [sp, #20]
 80015de:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80015ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015f0:	f002 0201 	and.w	r2, r2, #1
 80015f4:	9206      	str	r2, [sp, #24]
 80015f6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80015fc:	f042 0202 	orr.w	r2, r2, #2
 8001600:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001604:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001608:	f002 0202 	and.w	r2, r2, #2
 800160c:	9207      	str	r2, [sp, #28]
 800160e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001610:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001614:	f042 0208 	orr.w	r2, r2, #8
 8001618:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800161c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001620:	f002 0208 	and.w	r2, r2, #8
 8001624:	9208      	str	r2, [sp, #32]
 8001626:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001628:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800162c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001638:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8001642:	f001 fb0d 	bl	8002c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001646:	4622      	mov	r2, r4
 8001648:	2101      	movs	r1, #1
 800164a:	4880      	ldr	r0, [pc, #512]	@ (800184c <main+0x2d8>)
 800164c:	f001 fb08 	bl	8002c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001650:	4622      	mov	r2, r4
 8001652:	2110      	movs	r1, #16
 8001654:	487e      	ldr	r0, [pc, #504]	@ (8001850 <main+0x2dc>)
 8001656:	f001 fb03 	bl	8002c60 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165a:	487a      	ldr	r0, [pc, #488]	@ (8001844 <main+0x2d0>)
 800165c:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001666:	f001 fa37 	bl	8002ad8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	4878      	ldr	r0, [pc, #480]	@ (800184c <main+0x2d8>)
 800166c:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f001 fa2f 	bl	8002ad8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	e9cd 560a 	strd	r5, r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167e:	4874      	ldr	r0, [pc, #464]	@ (8001850 <main+0x2dc>)
  hi2c1.Instance = I2C1;
 8001680:	4d74      	ldr	r5, [pc, #464]	@ (8001854 <main+0x2e0>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001682:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001688:	f001 fa26 	bl	8002ad8 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x60808CD3;
 800168c:	4b72      	ldr	r3, [pc, #456]	@ (8001858 <main+0x2e4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168e:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x60808CD3;
 8001690:	e9c5 3700 	strd	r3, r7, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001694:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001698:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a2:	f001 faed 	bl	8002c80 <HAL_I2C_Init>
 80016a6:	b108      	cbz	r0, 80016ac <main+0x138>
 80016a8:	b672      	cpsid	i
  while (1)
 80016aa:	e7fe      	b.n	80016aa <main+0x136>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ac:	4601      	mov	r1, r0
 80016ae:	4628      	mov	r0, r5
 80016b0:	f001 fb40 	bl	8002d34 <HAL_I2CEx_ConfigAnalogFilter>
 80016b4:	b108      	cbz	r0, 80016ba <main+0x146>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0x144>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ba:	4601      	mov	r1, r0
 80016bc:	4628      	mov	r0, r5
 80016be:	f001 fb63 	bl	8002d88 <HAL_I2CEx_ConfigDigitalFilter>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b108      	cbz	r0, 80016ca <main+0x156>
 80016c6:	b672      	cpsid	i
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <main+0x154>
  hi2c2.Instance = I2C2;
 80016ca:	4c64      	ldr	r4, [pc, #400]	@ (800185c <main+0x2e8>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	e9c4 3602 	strd	r3, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80016d0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d8:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 80016da:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <main+0x2ec>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016dc:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x60808CD3;
 80016de:	6067      	str	r7, [r4, #4]
  hi2c2.Instance = I2C2;
 80016e0:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016e2:	f001 facd 	bl	8002c80 <HAL_I2C_Init>
 80016e6:	4601      	mov	r1, r0
 80016e8:	b108      	cbz	r0, 80016ee <main+0x17a>
 80016ea:	b672      	cpsid	i
  while (1)
 80016ec:	e7fe      	b.n	80016ec <main+0x178>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ee:	4620      	mov	r0, r4
 80016f0:	f001 fb20 	bl	8002d34 <HAL_I2CEx_ConfigAnalogFilter>
 80016f4:	4601      	mov	r1, r0
 80016f6:	b108      	cbz	r0, 80016fc <main+0x188>
 80016f8:	b672      	cpsid	i
  while (1)
 80016fa:	e7fe      	b.n	80016fa <main+0x186>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016fc:	4620      	mov	r0, r4
 80016fe:	f001 fb43 	bl	8002d88 <HAL_I2CEx_ConfigDigitalFilter>
 8001702:	b108      	cbz	r0, 8001708 <main+0x194>
 8001704:	b672      	cpsid	i
  while (1)
 8001706:	e7fe      	b.n	8001706 <main+0x192>
  huart3.Init.BaudRate = 115200;
 8001708:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 800170c:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 800170e:	4c55      	ldr	r4, [pc, #340]	@ (8001864 <main+0x2f0>)
 8001710:	4b55      	ldr	r3, [pc, #340]	@ (8001868 <main+0x2f4>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001712:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001716:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800171a:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart3.Init.Parity = UART_PARITY_NONE;
 800171e:	6120      	str	r0, [r4, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001720:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001722:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 115200;
 8001724:	6061      	str	r1, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001726:	6162      	str	r2, [r4, #20]
  huart3.Instance = USART3;
 8001728:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800172a:	f005 fc31 	bl	8006f90 <HAL_UART_Init>
 800172e:	4601      	mov	r1, r0
 8001730:	b108      	cbz	r0, 8001736 <main+0x1c2>
 8001732:	b672      	cpsid	i
  while (1)
 8001734:	e7fe      	b.n	8001734 <main+0x1c0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	4620      	mov	r0, r4
 8001738:	f005 fdfa 	bl	8007330 <HAL_UARTEx_SetTxFifoThreshold>
 800173c:	4601      	mov	r1, r0
 800173e:	b108      	cbz	r0, 8001744 <main+0x1d0>
 8001740:	b672      	cpsid	i
  while (1)
 8001742:	e7fe      	b.n	8001742 <main+0x1ce>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	4620      	mov	r0, r4
 8001746:	f005 fe35 	bl	80073b4 <HAL_UARTEx_SetRxFifoThreshold>
 800174a:	b108      	cbz	r0, 8001750 <main+0x1dc>
 800174c:	b672      	cpsid	i
  while (1)
 800174e:	e7fe      	b.n	800174e <main+0x1da>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001750:	4620      	mov	r0, r4
 8001752:	f005 fdcf 	bl	80072f4 <HAL_UARTEx_DisableFifoMode>
 8001756:	b108      	cbz	r0, 800175c <main+0x1e8>
 8001758:	b672      	cpsid	i
  while (1)
 800175a:	e7fe      	b.n	800175a <main+0x1e6>
  ADC_ChannelConfTypeDef sConfig = {0};
 800175c:	2220      	movs	r2, #32
 800175e:	2100      	movs	r1, #0
 8001760:	a80a      	add	r0, sp, #40	@ 0x28
 8001762:	f00b ff74 	bl	800d64e <memset>
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001766:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001768:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
  hadc1.Instance = ADC1;
 800176c:	4c3f      	ldr	r4, [pc, #252]	@ (800186c <main+0x2f8>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176e:	2504      	movs	r5, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001770:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001774:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800177c:	8323      	strh	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800177e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001782:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001786:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8001788:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800178c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hadc1.Init.NbrOfConversion = 1;
 8001790:	2601      	movs	r6, #1
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001792:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Instance = ADC1;
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <main+0x2fc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001796:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001798:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179a:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 800179c:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800179e:	f000 fb1b 	bl	8001dd8 <HAL_ADC_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b108      	cbz	r0, 80017aa <main+0x236>
 80017a6:	b672      	cpsid	i
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0x234>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017aa:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017ac:	2207      	movs	r2, #7
  sConfig.Offset = 0;
 80017ae:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b2:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017b4:	237f      	movs	r3, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	a90a      	add	r1, sp, #40	@ 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017b8:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017ba:	e9cd 420b 	strd	r4, r2, [sp, #44]	@ 0x2c
  sConfig.Channel = ADC_CHANNEL_0;
 80017be:	960a      	str	r6, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c0:	f000 fc62 	bl	8002088 <HAL_ADC_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b108      	cbz	r0, 80017cc <main+0x258>
 80017c8:	b672      	cpsid	i
  while (1)
 80017ca:	e7fe      	b.n	80017ca <main+0x256>
  huart2.Init.BaudRate = 921600;
 80017cc:	f44f 2161 	mov.w	r1, #921600	@ 0xe1000
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 80017d2:	4c28      	ldr	r4, [pc, #160]	@ (8001874 <main+0x300>)
 80017d4:	4828      	ldr	r0, [pc, #160]	@ (8001878 <main+0x304>)
  huart2.Init.BaudRate = 921600;
 80017d6:	6061      	str	r1, [r4, #4]
  huart2.Instance = USART2;
 80017d8:	6020      	str	r0, [r4, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017da:	4620      	mov	r0, r4
  huart2.Init.Parity = UART_PARITY_NONE;
 80017dc:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e4:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e8:	60a3      	str	r3, [r4, #8]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	6162      	str	r2, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	f005 fbcf 	bl	8006f90 <HAL_UART_Init>
 80017f2:	4601      	mov	r1, r0
 80017f4:	b108      	cbz	r0, 80017fa <main+0x286>
 80017f6:	b672      	cpsid	i
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <main+0x284>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fa:	4620      	mov	r0, r4
 80017fc:	f005 fd98 	bl	8007330 <HAL_UARTEx_SetTxFifoThreshold>
 8001800:	4601      	mov	r1, r0
 8001802:	b108      	cbz	r0, 8001808 <main+0x294>
 8001804:	b672      	cpsid	i
  while (1)
 8001806:	e7fe      	b.n	8001806 <main+0x292>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001808:	4620      	mov	r0, r4
 800180a:	f005 fdd3 	bl	80073b4 <HAL_UARTEx_SetRxFifoThreshold>
 800180e:	b108      	cbz	r0, 8001814 <main+0x2a0>
 8001810:	b672      	cpsid	i
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0x29e>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001814:	4620      	mov	r0, r4
 8001816:	f005 fd2f 	bl	8007278 <HAL_UARTEx_EnableFifoMode>
 800181a:	b108      	cbz	r0, 8001820 <main+0x2ac>
 800181c:	b672      	cpsid	i
  while (1)
 800181e:	e7fe      	b.n	800181e <main+0x2aa>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001820:	f001 fade 	bl	8002de0 <HAL_ICACHE_Enable>
 8001824:	4603      	mov	r3, r0
 8001826:	b108      	cbz	r0, 800182c <main+0x2b8>
 8001828:	b672      	cpsid	i
  while (1)
 800182a:	e7fe      	b.n	800182a <main+0x2b6>
  hdcache1.Instance = DCACHE1;
 800182c:	4813      	ldr	r0, [pc, #76]	@ (800187c <main+0x308>)
 800182e:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <main+0x30c>)
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8001830:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8001834:	f001 f912 	bl	8002a5c <HAL_DCACHE_Init>
 8001838:	4604      	mov	r4, r0
 800183a:	b318      	cbz	r0, 8001884 <main+0x310>
 800183c:	b672      	cpsid	i
  while (1)
 800183e:	e7fe      	b.n	800183e <main+0x2ca>
 8001840:	44020c00 	.word	0x44020c00
 8001844:	42021400 	.word	0x42021400
 8001848:	60808cd3 	.word	0x60808cd3
 800184c:	42020400 	.word	0x42020400
 8001850:	42021800 	.word	0x42021800
 8001854:	2006184c 	.word	0x2006184c
 8001858:	40005400 	.word	0x40005400
 800185c:	200617f8 	.word	0x200617f8
 8001860:	40005800 	.word	0x40005800
 8001864:	200616d0 	.word	0x200616d0
 8001868:	40004800 	.word	0x40004800
 800186c:	200618cc 	.word	0x200618cc
 8001870:	42028000 	.word	0x42028000
 8001874:	20061764 	.word	0x20061764
 8001878:	40004400 	.word	0x40004400
 800187c:	200618a0 	.word	0x200618a0
 8001880:	40031400 	.word	0x40031400
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 8001884:	2502      	movs	r5, #2
 8001886:	4e13      	ldr	r6, [pc, #76]	@ (80018d4 <main+0x360>)
  ECGTask_Init();
 8001888:	f7ff fdd8 	bl	800143c <ECGTask_Init>
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 800188c:	e9cd 5600 	strd	r5, r6, [sp]
 8001890:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001894:	4623      	mov	r3, r4
 8001896:	4910      	ldr	r1, [pc, #64]	@ (80018d8 <main+0x364>)
 8001898:	4810      	ldr	r0, [pc, #64]	@ (80018dc <main+0x368>)
 800189a:	f007 f8a7 	bl	80089ec <xTaskCreate>
 800189e:	4d10      	ldr	r5, [pc, #64]	@ (80018e0 <main+0x36c>)
  configASSERT(status == pdPASS);
 80018a0:	2801      	cmp	r0, #1
  status = xTaskCreate(spo2_handler, "max30102", 400, NULL, 2, &spo2_handle);
 80018a2:	6028      	str	r0, [r5, #0]
  configASSERT(status == pdPASS);
 80018a4:	d002      	beq.n	80018ac <main+0x338>
 80018a6:	f008 f891 	bl	80099cc <ulSetInterruptMask>
 80018aa:	e7fe      	b.n	80018aa <main+0x336>
  status = xTaskCreate(ECGSamplingTask, "ECGTask", 8192, NULL, 3, &ecg_handle);
 80018ac:	2603      	movs	r6, #3
 80018ae:	490d      	ldr	r1, [pc, #52]	@ (80018e4 <main+0x370>)
 80018b0:	4623      	mov	r3, r4
 80018b2:	9101      	str	r1, [sp, #4]
 80018b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b8:	490b      	ldr	r1, [pc, #44]	@ (80018e8 <main+0x374>)
 80018ba:	480c      	ldr	r0, [pc, #48]	@ (80018ec <main+0x378>)
 80018bc:	9600      	str	r6, [sp, #0]
 80018be:	f007 f895 	bl	80089ec <xTaskCreate>
  configASSERT(status == pdPASS);
 80018c2:	2801      	cmp	r0, #1
  status = xTaskCreate(ECGSamplingTask, "ECGTask", 8192, NULL, 3, &ecg_handle);
 80018c4:	6028      	str	r0, [r5, #0]
  configASSERT(status == pdPASS);
 80018c6:	d002      	beq.n	80018ce <main+0x35a>
 80018c8:	f008 f880 	bl	80099cc <ulSetInterruptMask>
 80018cc:	e7fe      	b.n	80018cc <main+0x358>
  vTaskStartScheduler();
 80018ce:	f007 fa01 	bl	8008cd4 <vTaskStartScheduler>
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <main+0x35e>
 80018d4:	200616cc 	.word	0x200616cc
 80018d8:	0800f900 	.word	0x0800f900
 80018dc:	08001461 	.word	0x08001461
 80018e0:	200616c4 	.word	0x200616c4
 80018e4:	200616c8 	.word	0x200616c8
 80018e8:	0800f90c 	.word	0x0800f90c
 80018ec:	08000f49 	.word	0x08000f49

080018f0 <Error_Handler>:
 80018f0:	b672      	cpsid	i
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <Error_Handler+0x2>

080018f4 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_ADC_MspInit>:
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	2300      	movs	r3, #0
{
 80018fa:	b500      	push	{lr}
  if(hadc->Instance==ADC1)
 80018fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 80018fe:	6801      	ldr	r1, [r0, #0]
{
 8001900:	b089      	sub	sp, #36	@ 0x24
  if(hadc->Instance==ADC1)
 8001902:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001908:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800190c:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 800190e:	d002      	beq.n	8001916 <HAL_ADC_MspInit+0x1e>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001910:	b009      	add	sp, #36	@ 0x24
 8001912:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001916:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8001960 <HAL_ADC_MspInit+0x68>
    __HAL_RCC_ADC_CLK_ENABLE();
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <HAL_ADC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	4814      	ldr	r0, [pc, #80]	@ (8001970 <HAL_ADC_MspInit+0x78>)
    __HAL_RCC_ADC_CLK_ENABLE();
 800191e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC_CLK_ENABLE();
 8001924:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001928:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800192c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001930:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001934:	9200      	str	r2, [sp, #0]
 8001936:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001948:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f001 f8c0 	bl	8002ad8 <HAL_GPIO_Init>
}
 8001958:	b009      	add	sp, #36	@ 0x24
 800195a:	f85d fb04 	ldr.w	pc, [sp], #4
 800195e:	bf00      	nop
 8001960:	00000001 	.word	0x00000001
 8001964:	00000003 	.word	0x00000003
 8001968:	42028000 	.word	0x42028000
 800196c:	44020c00 	.word	0x44020c00
 8001970:	42020000 	.word	0x42020000

08001974 <HAL_DCACHE_MspInit>:
  * @param hdcache: DCACHE handle pointer
  * @retval None
  */
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
  if(hdcache->Instance==DCACHE1)
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_DCACHE_MspInit+0x2c>)
 8001976:	6802      	ldr	r2, [r0, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d000      	beq.n	800197e <HAL_DCACHE_MspInit+0xa>
 800197c:	4770      	bx	lr
  {
    /* USER CODE BEGIN DCACHE1_MspInit 0 */

    /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_DCACHE_MspInit+0x30>)
{
 8001980:	b082      	sub	sp, #8
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001982:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001986:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800198a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001992:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END DCACHE1_MspInit 1 */

  }

}
 800199a:	b002      	add	sp, #8
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40031400 	.word	0x40031400
 80019a4:	44020c00 	.word	0x44020c00

080019a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	2100      	movs	r1, #0
{
 80019ac:	4604      	mov	r4, r0
 80019ae:	b0cc      	sub	sp, #304	@ 0x130
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b0:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80019b4:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80019ba:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80019be:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c0:	f00b fe45 	bl	800d64e <memset>
  if(hi2c->Instance==I2C1)
 80019c4:	4a39      	ldr	r2, [pc, #228]	@ (8001aac <HAL_I2C_MspInit+0x104>)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d004      	beq.n	80019d6 <HAL_I2C_MspInit+0x2e>
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80019cc:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <HAL_I2C_MspInit+0x108>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d034      	beq.n	8001a3c <HAL_I2C_MspInit+0x94>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019d2:	b04c      	add	sp, #304	@ 0x130
 80019d4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019da:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019dc:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019de:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e2:	f002 f965 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d15a      	bne.n	8001aa0 <HAL_I2C_MspInit+0xf8>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ea:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4c31      	ldr	r4, [pc, #196]	@ (8001ab4 <HAL_I2C_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	20c0      	movs	r0, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f4:	2112      	movs	r1, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 80019fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a02:	9208      	str	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	4828      	ldr	r0, [pc, #160]	@ (8001ab8 <HAL_I2C_MspInit+0x110>)
 8001a16:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f001 f85c 	bl	8002ad8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a20:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8001a24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a28:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8001a2c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	9b01      	ldr	r3, [sp, #4]
}
 8001a38:	b04c      	add	sp, #304	@ 0x130
 8001a3a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a40:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a44:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a48:	f002 f932 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	bb58      	cbnz	r0, 8001aa6 <HAL_I2C_MspInit+0xfe>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a4e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a50:	4c18      	ldr	r4, [pc, #96]	@ (8001ab4 <HAL_I2C_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a52:	2003      	movs	r0, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a54:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a58:	2112      	movs	r1, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8001a62:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a66:	9208      	str	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a6e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a78:	4810      	ldr	r0, [pc, #64]	@ (8001abc <HAL_I2C_MspInit+0x114>)
 8001a7a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a80:	f001 f82a 	bl	8002ad8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a84:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8001a88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a8c:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8001a90:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8001a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a98:	9303      	str	r3, [sp, #12]
 8001a9a:	9b03      	ldr	r3, [sp, #12]
}
 8001a9c:	b04c      	add	sp, #304	@ 0x130
 8001a9e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001aa0:	f7ff ff26 	bl	80018f0 <Error_Handler>
 8001aa4:	e7a1      	b.n	80019ea <HAL_I2C_MspInit+0x42>
      Error_Handler();
 8001aa6:	f7ff ff23 	bl	80018f0 <Error_Handler>
 8001aaa:	e7d0      	b.n	8001a4e <HAL_I2C_MspInit+0xa6>
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	40005800 	.word	0x40005800
 8001ab4:	44020c00 	.word	0x44020c00
 8001ab8:	42020400 	.word	0x42020400
 8001abc:	42021400 	.word	0x42021400

08001ac0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	2100      	movs	r1, #0
{
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	b0cc      	sub	sp, #304	@ 0x130
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001acc:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001ad2:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001ad6:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad8:	f00b fdb9 	bl	800d64e <memset>
  if(huart->Instance==USART2)
 8001adc:	4a39      	ldr	r2, [pc, #228]	@ (8001bc4 <HAL_UART_MspInit+0x104>)
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_UART_MspInit+0x2e>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001ae4:	4a38      	ldr	r2, [pc, #224]	@ (8001bc8 <HAL_UART_MspInit+0x108>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d033      	beq.n	8001b52 <HAL_UART_MspInit+0x92>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aea:	b04c      	add	sp, #304	@ 0x130
 8001aec:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aee:	2202      	movs	r2, #2
 8001af0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af2:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af8:	f002 f8da 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d15a      	bne.n	8001bb6 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b00:	4b32      	ldr	r3, [pc, #200]	@ (8001bcc <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b02:	2000      	movs	r0, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b04:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b08:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001b12:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001b16:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b1a:	9200      	str	r2, [sp, #0]
 8001b1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b2e:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	4823      	ldr	r0, [pc, #140]	@ (8001bd0 <HAL_UART_MspInit+0x110>)
 8001b42:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b48:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f000 ffc5 	bl	8002ad8 <HAL_GPIO_Init>
}
 8001b4e:	b04c      	add	sp, #304	@ 0x130
 8001b50:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b52:	2204      	movs	r2, #4
 8001b54:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b56:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b58:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5c:	f002 f8a8 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001b60:	bb60      	cbnz	r0, 8001bbc <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_UART_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b64:	2000      	movs	r0, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b66:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b6a:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b6c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001b74:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001b78:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001b7c:	9202      	str	r2, [sp, #8]
 8001b7e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b80:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001b84:	f042 0208 	orr.w	r2, r2, #8
 8001b88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b90:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	9303      	str	r3, [sp, #12]
 8001b9a:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <HAL_UART_MspInit+0x114>)
 8001ba6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bac:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bae:	f000 ff93 	bl	8002ad8 <HAL_GPIO_Init>
}
 8001bb2:	b04c      	add	sp, #304	@ 0x130
 8001bb4:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001bb6:	f7ff fe9b 	bl	80018f0 <Error_Handler>
 8001bba:	e7a1      	b.n	8001b00 <HAL_UART_MspInit+0x40>
      Error_Handler();
 8001bbc:	f7ff fe98 	bl	80018f0 <Error_Handler>
 8001bc0:	e7cf      	b.n	8001b62 <HAL_UART_MspInit+0xa2>
 8001bc2:	bf00      	nop
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40004800 	.word	0x40004800
 8001bcc:	44020c00 	.word	0x44020c00
 8001bd0:	42020000 	.word	0x42020000
 8001bd4:	42020c00 	.word	0x42020c00

08001bd8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler>
 8001bda:	bf00      	nop

08001bdc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <HardFault_Handler>
 8001bde:	bf00      	nop

08001be0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler>
 8001be2:	bf00      	nop

08001be4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <BusFault_Handler>
 8001be6:	bf00      	nop

08001be8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler>
 8001bea:	bf00      	nop

08001bec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf0:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bf2:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 8001bf4:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bf6:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bfa:	491d      	ldr	r1, [pc, #116]	@ (8001c70 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001bfc:	4c1d      	ldr	r4, [pc, #116]	@ (8001c74 <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bfe:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
  RCC->PLL1DIVR = 0x01010280U;
 8001c02:	481d      	ldr	r0, [pc, #116]	@ (8001c78 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR = RCC_CR_HSION;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001c0e:	4d1c      	ldr	r5, [pc, #112]	@ (8001c80 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 8001c10:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 8001c12:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c14:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001c16:	681f      	ldr	r7, [r3, #0]
 8001c18:	403c      	ands	r4, r7
 8001c1a:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL3CFGR = 0U;
 8001c20:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1DIVR = 0x01010280U;
 8001c22:	6358      	str	r0, [r3, #52]	@ 0x34
  RCC->PLL1FRACR = 0x00000000U;
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2DIVR = 0x01010280U;
 8001c26:	63d8      	str	r0, [r3, #60]	@ 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 8001c28:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3DIVR = 0x01010280U;
 8001c2a:	6458      	str	r0, [r3, #68]	@ 0x44
  RCC->PLL3FRACR = 0x00000000U;
 8001c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001c34:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 8001c36:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c38:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001c3a:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001c3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001c40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c44:	d001      	beq.n	8001c4a <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 8001c46:	bcf0      	pop	{r4, r5, r6, r7}
 8001c48:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001c4a:	69eb      	ldr	r3, [r5, #28]
 8001c4c:	07db      	lsls	r3, r3, #31
 8001c4e:	d503      	bpl.n	8001c58 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c50:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c54:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001c56:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <SystemInit+0x90>)
}
 8001c5a:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	f042 0202 	orr.w	r2, r2, #2
 8001c62:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	61da      	str	r2, [r3, #28]
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	eae2eae3 	.word	0xeae2eae3
 8001c78:	01010280 	.word	0x01010280
 8001c7c:	44020c00 	.word	0x44020c00
 8001c80:	40022000 	.word	0x40022000
 8001c84:	08192a3b 	.word	0x08192a3b
 8001c88:	4c5d6e7f 	.word	0x4c5d6e7f

08001c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c90:	f7ff ffae 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c96:	490d      	ldr	r1, [pc, #52]	@ (8001ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <LoopForever+0xe>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cac:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd8 <LoopForever+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cba:	f00b fd8f 	bl	800d7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fc59 	bl	8001574 <main>

08001cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   r0, =_estack
 8001cc4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20001144 	.word	0x20001144
  ldr r2, =_sidata
 8001cd0:	0801e9f4 	.word	0x0801e9f4
  ldr r2, =_sbss
 8001cd4:	20001148 	.word	0x20001148
  ldr r4, =_ebss
 8001cd8:	2007b110 	.word	0x2007b110

08001cdc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_IRQHandler>
	...

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ce2:	4e24      	ldr	r6, [pc, #144]	@ (8001d74 <HAL_InitTick+0x94>)
 8001ce4:	7832      	ldrb	r2, [r6, #0]
 8001ce6:	b1ea      	cbz	r2, 8001d24 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001cec:	691c      	ldr	r4, [r3, #16]
 8001cee:	4605      	mov	r5, r0
 8001cf0:	f014 0404 	ands.w	r4, r4, #4
 8001cf4:	d018      	beq.n	8001d28 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001cf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cfa:	fbb1 f2f2 	udiv	r2, r1, r2
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_InitTick+0x98>)
 8001d00:	681c      	ldr	r4, [r3, #0]
 8001d02:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d06:	4620      	mov	r0, r4
 8001d08:	f000 fe36 	bl	8002978 <HAL_SYSTICK_Config>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	b948      	cbnz	r0, 8001d24 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	4602      	mov	r2, r0
 8001d12:	4629      	mov	r1, r5
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 fdf2 	bl	8002900 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <HAL_InitTick+0x9c>)
 8001d1e:	4620      	mov	r0, r4
 8001d20:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
}
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d28:	f000 fe74 	bl	8002a14 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8001d2c:	2801      	cmp	r0, #1
 8001d2e:	d00d      	beq.n	8001d4c <HAL_InitTick+0x6c>
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d015      	beq.n	8001d60 <HAL_InitTick+0x80>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d1e6      	bne.n	8001d06 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d38:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d3c:	7831      	ldrb	r1, [r6, #0]
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_InitTick+0x98>)
 8001d40:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d44:	681c      	ldr	r4, [r3, #0]
 8001d46:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 8001d4a:	e7dc      	b.n	8001d06 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d50:	7831      	ldrb	r1, [r6, #0]
 8001d52:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8001d56:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d5a:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001d5e:	e7d2      	b.n	8001d06 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d64:	7831      	ldrb	r1, [r6, #0]
 8001d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d6e:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001d72:	e7c8      	b.n	8001d06 <HAL_InitTick+0x26>
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000008 	.word	0x20000008

08001d80 <HAL_Init>:
{
 8001d80:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d82:	2003      	movs	r0, #3
 8001d84:	f000 fdaa 	bl	80028dc <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d88:	f001 fd74 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <HAL_Init+0x40>)
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <HAL_Init+0x44>)
 8001d92:	6a12      	ldr	r2, [r2, #32]
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <HAL_Init+0x48>)
 8001d96:	f002 020f 	and.w	r2, r2, #15
 8001d9a:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d9c:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d9e:	40d3      	lsrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001da2:	f000 fdf9 	bl	8002998 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da6:	200f      	movs	r0, #15
 8001da8:	f7ff ff9a 	bl	8001ce0 <HAL_InitTick>
 8001dac:	b110      	cbz	r0, 8001db4 <HAL_Init+0x34>
    return HAL_ERROR;
 8001dae:	2401      	movs	r4, #1
}
 8001db0:	4620      	mov	r0, r4
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	4604      	mov	r4, r0
  HAL_MspInit();
 8001db6:	f7ff fd9d 	bl	80018f4 <HAL_MspInit>
}
 8001dba:	4620      	mov	r0, r4
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	bf00      	nop
 8001dc0:	44020c00 	.word	0x44020c00
 8001dc4:	0800f98c 	.word	0x0800f98c
 8001dc8:	20000000 	.word	0x20000000

08001dcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dcc:	4b01      	ldr	r3, [pc, #4]	@ (8001dd4 <HAL_GetTick+0x8>)
 8001dce:	6818      	ldr	r0, [r3, #0]
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20061934 	.word	0x20061934

08001dd8 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd8:	2300      	movs	r3, #0
{
 8001dda:	b530      	push	{r4, r5, lr}
 8001ddc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001dde:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001de0:	2800      	cmp	r0, #0
 8001de2:	f000 809c 	beq.w	8001f1e <HAL_ADC_Init+0x146>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de6:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8001de8:	4604      	mov	r4, r0
 8001dea:	2d00      	cmp	r5, #0
 8001dec:	f000 809c 	beq.w	8001f28 <HAL_ADC_Init+0x150>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df2:	6893      	ldr	r3, [r2, #8]
 8001df4:	009d      	lsls	r5, r3, #2
 8001df6:	d505      	bpl.n	8001e04 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001df8:	6893      	ldr	r3, [r2, #8]
 8001dfa:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dfe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e02:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e04:	6893      	ldr	r3, [r2, #8]
 8001e06:	00d8      	lsls	r0, r3, #3
 8001e08:	d419      	bmi.n	8001e3e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f7c <HAL_ADC_Init+0x1a4>)
 8001e0c:	485c      	ldr	r0, [pc, #368]	@ (8001f80 <HAL_ADC_Init+0x1a8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001e10:	6891      	ldr	r1, [r2, #8]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	fba0 0303 	umull	r0, r3, r0, r3
 8001e18:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001e2a:	6091      	str	r1, [r2, #8]
 8001e2c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001e2e:	9b01      	ldr	r3, [sp, #4]
 8001e30:	b12b      	cbz	r3, 8001e3e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8001e32:	9b01      	ldr	r3, [sp, #4]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001e38:	9b01      	ldr	r3, [sp, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e3e:	6893      	ldr	r3, [r2, #8]
 8001e40:	00d9      	lsls	r1, r3, #3
 8001e42:	d46f      	bmi.n	8001f24 <HAL_ADC_Init+0x14c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8001e44:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001e50:	4303      	orrs	r3, r0
 8001e52:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e54:	6893      	ldr	r3, [r2, #8]
 8001e56:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e5c:	d15b      	bne.n	8001f16 <HAL_ADC_Init+0x13e>
 8001e5e:	06db      	lsls	r3, r3, #27
 8001e60:	d459      	bmi.n	8001f16 <HAL_ADC_Init+0x13e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	07dd      	lsls	r5, r3, #31
 8001e72:	d408      	bmi.n	8001e86 <HAL_ADC_Init+0xae>
 8001e74:	4b43      	ldr	r3, [pc, #268]	@ (8001f84 <HAL_ADC_Init+0x1ac>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f013 0f01 	tst.w	r3, #1
 8001e7c:	4b42      	ldr	r3, [pc, #264]	@ (8001f88 <HAL_ADC_Init+0x1b0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Init+0xae>
 8001e82:	07d9      	lsls	r1, r3, #31
 8001e84:	d563      	bpl.n	8001f4e <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8001e86:	68e5      	ldr	r5, [r4, #12]
 8001e88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e8a:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8001e8e:	432b      	orrs	r3, r5
 8001e90:	68a5      	ldr	r5, [r4, #8]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e92:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8001e94:	ea43 0305 	orr.w	r3, r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e98:	7e65      	ldrb	r5, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 8001e9a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea2:	d04f      	beq.n	8001f44 <HAL_ADC_Init+0x16c>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ea6:	b121      	cbz	r1, 8001eb2 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8001ea8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eaa:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001eae:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb0:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001eb2:	68d5      	ldr	r5, [r2, #12]
 8001eb4:	4935      	ldr	r1, [pc, #212]	@ (8001f8c <HAL_ADC_Init+0x1b4>)
 8001eb6:	4029      	ands	r1, r5
 8001eb8:	4319      	orrs	r1, r3
 8001eba:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ebc:	6913      	ldr	r3, [r2, #16]
 8001ebe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001ec0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ec8:	6893      	ldr	r3, [r2, #8]
 8001eca:	071b      	lsls	r3, r3, #28
 8001ecc:	d414      	bmi.n	8001ef8 <HAL_ADC_Init+0x120>
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ece:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ed0:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ed4:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ed6:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eda:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001edc:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (
 8001ee0:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ee8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d036      	beq.n	8001f5e <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ef0:	6913      	ldr	r3, [r2, #16]
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ef8:	6923      	ldr	r3, [r4, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d01a      	beq.n	8001f34 <HAL_ADC_Init+0x15c>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001efe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001f00:	f023 030f 	bic.w	r3, r3, #15
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f08:	f023 0303 	bic.w	r3, r3, #3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001f12:	b003      	add	sp, #12
 8001f14:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
}
 8001f20:	b003      	add	sp, #12
 8001f22:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2000      	movs	r0, #0
 8001f26:	e795      	b.n	8001e54 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8001f28:	f7ff fce6 	bl	80018f8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f2c:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001f2e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8001f32:	e75d      	b.n	8001df0 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f34:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001f36:	69e3      	ldr	r3, [r4, #28]
 8001f38:	f021 010f 	bic.w	r1, r1, #15
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	e7e0      	b.n	8001f06 <HAL_ADC_Init+0x12e>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001f46:	3901      	subs	r1, #1
 8001f48:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001f4c:	e7aa      	b.n	8001ea4 <HAL_ADC_Init+0xcc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f4e:	4910      	ldr	r1, [pc, #64]	@ (8001f90 <HAL_ADC_Init+0x1b8>)
 8001f50:	6865      	ldr	r5, [r4, #4]
 8001f52:	688b      	ldr	r3, [r1, #8]
 8001f54:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001f58:	432b      	orrs	r3, r5
 8001f5a:	608b      	str	r3, [r1, #8]
}
 8001f5c:	e793      	b.n	8001e86 <HAL_ADC_Init+0xae>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f5e:	6911      	ldr	r1, [r2, #16]
 8001f60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f62:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001f64:	f36f 018a 	bfc	r1, #2, #9
 8001f68:	432b      	orrs	r3, r5
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001f72:	430b      	orrs	r3, r1
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6113      	str	r3, [r2, #16]
 8001f7a:	e7bd      	b.n	8001ef8 <HAL_ADC_Init+0x120>
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	053e2d63 	.word	0x053e2d63
 8001f84:	42028000 	.word	0x42028000
 8001f88:	42028100 	.word	0x42028100
 8001f8c:	fff04007 	.word	0xfff04007
 8001f90:	42028300 	.word	0x42028300

08001f94 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f94:	4a37      	ldr	r2, [pc, #220]	@ (8002074 <HAL_ADC_PollForConversion+0xe0>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f9a:	6944      	ldr	r4, [r0, #20]
 8001f9c:	6896      	ldr	r6, [r2, #8]
 8001f9e:	2c08      	cmp	r4, #8
{
 8001fa0:	4605      	mov	r5, r0
 8001fa2:	460f      	mov	r7, r1
 8001fa4:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fa8:	d014      	beq.n	8001fd4 <HAL_ADC_PollForConversion+0x40>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001faa:	f240 2321 	movw	r3, #545	@ 0x221
 8001fae:	40f3      	lsrs	r3, r6
 8001fb0:	07d9      	lsls	r1, r3, #31
 8001fb2:	d40a      	bmi.n	8001fca <HAL_ADC_PollForConversion+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fb4:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fb6:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8001fba:	d00a      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x3e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        return HAL_ERROR;
 8001fbe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	65ab      	str	r3, [r5, #88]	@ 0x58
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8001fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fca:	6803      	ldr	r3, [r0, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	07da      	lsls	r2, r3, #31
 8001fd0:	d4f4      	bmi.n	8001fbc <HAL_ADC_PollForConversion+0x28>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fd2:	2404      	movs	r4, #4
  tickstart = HAL_GetTick();
 8001fd4:	f7ff fefa 	bl	8001dcc <HAL_GetTick>
 8001fd8:	1c7b      	adds	r3, r7, #1
 8001fda:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fdc:	682a      	ldr	r2, [r5, #0]
 8001fde:	d133      	bne.n	8002048 <HAL_ADC_PollForConversion+0xb4>
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	4223      	tst	r3, r4
 8001fe4:	d0fc      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x4c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fec:	65ab      	str	r3, [r5, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fee:	68d3      	ldr	r3, [r2, #12]
 8001ff0:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 8001ff4:	d10f      	bne.n	8002016 <HAL_ADC_PollForConversion+0x82>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ff6:	7e6b      	ldrb	r3, [r5, #25]
 8001ff8:	b96b      	cbnz	r3, 8002016 <HAL_ADC_PollForConversion+0x82>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	071f      	lsls	r7, r3, #28
 8001ffe:	d50a      	bpl.n	8002016 <HAL_ADC_PollForConversion+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002000:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002002:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002006:	65ab      	str	r3, [r5, #88]	@ 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002008:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800200a:	04d8      	lsls	r0, r3, #19
 800200c:	d403      	bmi.n	8002016 <HAL_ADC_PollForConversion+0x82>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	65ab      	str	r3, [r5, #88]	@ 0x58
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_ADC_PollForConversion+0xe4>)
 8002018:	429a      	cmp	r2, r3
 800201a:	d009      	beq.n	8002030 <HAL_ADC_PollForConversion+0x9c>
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800201c:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800201e:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002020:	d00f      	beq.n	8002042 <HAL_ADC_PollForConversion+0xae>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002022:	045b      	lsls	r3, r3, #17
 8002024:	d401      	bmi.n	800202a <HAL_ADC_PollForConversion+0x96>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002026:	230c      	movs	r3, #12
 8002028:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800202a:	2000      	movs	r0, #0
}
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002030:	f240 2321 	movw	r3, #545	@ 0x221
 8002034:	40f3      	lsrs	r3, r6
 8002036:	07d9      	lsls	r1, r3, #31
 8002038:	d4f0      	bmi.n	800201c <HAL_ADC_PollForConversion+0x88>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <HAL_ADC_PollForConversion+0xe8>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800203c:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800203e:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002040:	d1ef      	bne.n	8002022 <HAL_ADC_PollForConversion+0x8e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002042:	6014      	str	r4, [r2, #0]
 8002044:	e7f1      	b.n	800202a <HAL_ADC_PollForConversion+0x96>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002046:	b14f      	cbz	r7, 800205c <HAL_ADC_PollForConversion+0xc8>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	4223      	tst	r3, r4
 800204c:	d1cb      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0x52>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800204e:	f7ff febd 	bl	8001dcc <HAL_GetTick>
 8002052:	eba0 0308 	sub.w	r3, r0, r8
 8002056:	42bb      	cmp	r3, r7
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800205a:	d9f4      	bls.n	8002046 <HAL_ADC_PollForConversion+0xb2>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	4023      	ands	r3, r4
 8002060:	d1f2      	bne.n	8002048 <HAL_ADC_PollForConversion+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002062:	6daa      	ldr	r2, [r5, #88]	@ 0x58
          return HAL_TIMEOUT;
 8002064:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002066:	f042 0204 	orr.w	r2, r2, #4
 800206a:	65aa      	str	r2, [r5, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800206c:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8002070:	e7dc      	b.n	800202c <HAL_ADC_PollForConversion+0x98>
 8002072:	bf00      	nop
 8002074:	42028300 	.word	0x42028300
 8002078:	42028100 	.word	0x42028100
 800207c:	42028000 	.word	0x42028000

08002080 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002080:	6803      	ldr	r3, [r0, #0]
 8002082:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2200      	movs	r2, #0
{
 800208a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800208e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002092:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8002096:	2a01      	cmp	r2, #1
 8002098:	f000 812f 	beq.w	80022fa <HAL_ADC_ConfigChannel+0x272>
 800209c:	4603      	mov	r3, r0
 800209e:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80020a2:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a6:	6894      	ldr	r4, [r2, #8]
 80020a8:	0764      	lsls	r4, r4, #29
 80020aa:	d509      	bpl.n	80020c0 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80020ba:	b002      	add	sp, #8
 80020bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80020c0:	6808      	ldr	r0, [r1, #0]
 80020c2:	2801      	cmp	r0, #1
 80020c4:	f000 80ae 	beq.w	8002224 <HAL_ADC_ConfigChannel+0x19c>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80020c8:	4cac      	ldr	r4, [pc, #688]	@ (800237c <HAL_ADC_ConfigChannel+0x2f4>)
 80020ca:	42a0      	cmp	r0, r4
 80020cc:	f000 80a5 	beq.w	800221a <HAL_ADC_ConfigChannel+0x192>
  MODIFY_REG(*preg,
 80020d0:	f04f 0c1f 	mov.w	ip, #31
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020d4:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020d6:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 80020da:	ea4f 1e94 	mov.w	lr, r4, lsr #6
 80020de:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80020e2:	ea04 040c 	and.w	r4, r4, ip
 80020e6:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80020ea:	40a0      	lsls	r0, r4
 80020ec:	fa0c fc04 	lsl.w	ip, ip, r4
 80020f0:	f855 400e 	ldr.w	r4, [r5, lr]
 80020f4:	ea24 0c0c 	bic.w	ip, r4, ip
 80020f8:	ea4c 0000 	orr.w	r0, ip, r0
 80020fc:	f845 000e 	str.w	r0, [r5, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002100:	6890      	ldr	r0, [r2, #8]
 8002102:	0740      	lsls	r0, r0, #29
 8002104:	d537      	bpl.n	8002176 <HAL_ADC_ConfigChannel+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002106:	6890      	ldr	r0, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002108:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800210a:	6894      	ldr	r4, [r2, #8]
 800210c:	07e6      	lsls	r6, r4, #31
 800210e:	d412      	bmi.n	8002136 <HAL_ADC_ConfigChannel+0xae>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002110:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002112:	4c9b      	ldr	r4, [pc, #620]	@ (8002380 <HAL_ADC_ConfigChannel+0x2f8>)
 8002114:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8002118:	f006 0718 	and.w	r7, r6, #24
 800211c:	40fc      	lsrs	r4, r7
 800211e:	f3c0 0713 	ubfx	r7, r0, #0, #20
 8002122:	4004      	ands	r4, r0
 8002124:	ea25 0507 	bic.w	r5, r5, r7
 8002128:	432c      	orrs	r4, r5
 800212a:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800212e:	4c95      	ldr	r4, [pc, #596]	@ (8002384 <HAL_ADC_ConfigChannel+0x2fc>)
 8002130:	42a6      	cmp	r6, r4
 8002132:	f000 809f 	beq.w	8002274 <HAL_ADC_ConfigChannel+0x1ec>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002136:	4994      	ldr	r1, [pc, #592]	@ (8002388 <HAL_ADC_ConfigChannel+0x300>)
 8002138:	4208      	tst	r0, r1
 800213a:	d01a      	beq.n	8002172 <HAL_ADC_ConfigChannel+0xea>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800213c:	4c93      	ldr	r4, [pc, #588]	@ (800238c <HAL_ADC_ConfigChannel+0x304>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213e:	4d94      	ldr	r5, [pc, #592]	@ (8002390 <HAL_ADC_ConfigChannel+0x308>)
 8002140:	68a1      	ldr	r1, [r4, #8]
 8002142:	42a8      	cmp	r0, r5
 8002144:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8002148:	d074      	beq.n	8002234 <HAL_ADC_ConfigChannel+0x1ac>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800214a:	4d92      	ldr	r5, [pc, #584]	@ (8002394 <HAL_ADC_ConfigChannel+0x30c>)
 800214c:	42a8      	cmp	r0, r5
 800214e:	f000 80d8 	beq.w	8002302 <HAL_ADC_ConfigChannel+0x27a>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002152:	4d91      	ldr	r5, [pc, #580]	@ (8002398 <HAL_ADC_ConfigChannel+0x310>)
 8002154:	42a8      	cmp	r0, r5
 8002156:	f000 80e3 	beq.w	8002320 <HAL_ADC_ConfigChannel+0x298>
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800215a:	4990      	ldr	r1, [pc, #576]	@ (800239c <HAL_ADC_ConfigChannel+0x314>)
 800215c:	4288      	cmp	r0, r1
 800215e:	d108      	bne.n	8002172 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002160:	498f      	ldr	r1, [pc, #572]	@ (80023a0 <HAL_ADC_ConfigChannel+0x318>)
 8002162:	428a      	cmp	r2, r1
 8002164:	d005      	beq.n	8002172 <HAL_ADC_ConfigChannel+0xea>
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8002166:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 800216a:	f041 0101 	orr.w	r1, r1, #1
 800216e:	f8c2 10c8 	str.w	r1, [r2, #200]	@ 0xc8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002172:	2000      	movs	r0, #0
 8002174:	e79e      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x2c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002176:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002178:	6808      	ldr	r0, [r1, #0]
 800217a:	0727      	lsls	r7, r4, #28
 800217c:	d4c5      	bmi.n	800210a <HAL_ADC_ConfigChannel+0x82>
  MODIFY_REG(*preg,
 800217e:	2407      	movs	r4, #7
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002180:	688d      	ldr	r5, [r1, #8]
 8002182:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8002186:	40b4      	lsls	r4, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002188:	0dc0      	lsrs	r0, r0, #23
 800218a:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  MODIFY_REG(*preg,
 800218e:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002192:	f000 0004 	and.w	r0, r0, #4
 8002196:	f000 80e7 	beq.w	8002368 <HAL_ADC_ConfigChannel+0x2e0>
 800219a:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 800219e:	40b5      	lsls	r5, r6
 80021a0:	583e      	ldr	r6, [r7, r0]
 80021a2:	4034      	ands	r4, r6
 80021a4:	432c      	orrs	r4, r5
 80021a6:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021a8:	6950      	ldr	r0, [r2, #20]
 80021aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80021ae:	6150      	str	r0, [r2, #20]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021b0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021b2:	e9d1 7404 	ldrd	r7, r4, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021b6:	2f04      	cmp	r7, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021b8:	4606      	mov	r6, r0
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021ba:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021bc:	f000 80fa 	beq.w	80023b4 <HAL_ADC_ConfigChannel+0x32c>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021c0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80021c4:	006d      	lsls	r5, r5, #1
 80021c6:	40ac      	lsls	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c8:	f102 0560 	add.w	r5, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 80021cc:	f855 c027 	ldr.w	ip, [r5, r7, lsl #2]
 80021d0:	4e74      	ldr	r6, [pc, #464]	@ (80023a4 <HAL_ADC_ConfigChannel+0x31c>)
 80021d2:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80021d6:	ea0c 0606 	and.w	r6, ip, r6
 80021da:	4306      	orrs	r6, r0
 80021dc:	4334      	orrs	r4, r6
 80021de:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80021e2:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e6:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(*preg,
 80021e8:	698e      	ldr	r6, [r1, #24]
 80021ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80021ee:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80021f2:	4330      	orrs	r0, r6
 80021f4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021f8:	7f0c      	ldrb	r4, [r1, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	690e      	ldr	r6, [r1, #16]
 80021fc:	f1a4 0401 	sub.w	r4, r4, #1
 8002200:	fab4 f484 	clz	r4, r4
  MODIFY_REG(*preg,
 8002204:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8002208:	0964      	lsrs	r4, r4, #5
 800220a:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800220e:	ea40 6044 	orr.w	r0, r0, r4, lsl #25
 8002212:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002216:	6808      	ldr	r0, [r1, #0]
}
 8002218:	e777      	b.n	800210a <HAL_ADC_ConfigChannel+0x82>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 800221a:	4c5a      	ldr	r4, [pc, #360]	@ (8002384 <HAL_ADC_ConfigChannel+0x2fc>)
 800221c:	68cd      	ldr	r5, [r1, #12]
 800221e:	42a5      	cmp	r5, r4
 8002220:	f47f af56 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x48>
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8002224:	4d5e      	ldr	r5, [pc, #376]	@ (80023a0 <HAL_ADC_ConfigChannel+0x318>)
 8002226:	f8d5 40c8 	ldr.w	r4, [r5, #200]	@ 0xc8
 800222a:	f044 0401 	orr.w	r4, r4, #1
 800222e:	f8c5 40c8 	str.w	r4, [r5, #200]	@ 0xc8
}
 8002232:	e74d      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x48>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002234:	020d      	lsls	r5, r1, #8
 8002236:	d49c      	bmi.n	8002172 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002238:	4959      	ldr	r1, [pc, #356]	@ (80023a0 <HAL_ADC_ConfigChannel+0x318>)
 800223a:	428a      	cmp	r2, r1
 800223c:	d199      	bne.n	8002172 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800223e:	68a2      	ldr	r2, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002240:	4959      	ldr	r1, [pc, #356]	@ (80023a8 <HAL_ADC_ConfigChannel+0x320>)
 8002242:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002246:	4332      	orrs	r2, r6
 8002248:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800224c:	60a2      	str	r2, [r4, #8]
 800224e:	680a      	ldr	r2, [r1, #0]
 8002250:	4956      	ldr	r1, [pc, #344]	@ (80023ac <HAL_ADC_ConfigChannel+0x324>)
 8002252:	0992      	lsrs	r2, r2, #6
 8002254:	fba1 1202 	umull	r1, r2, r1, r2
 8002258:	0992      	lsrs	r2, r2, #6
 800225a:	3201      	adds	r2, #1
 800225c:	0052      	lsls	r2, r2, #1
 800225e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002260:	9a01      	ldr	r2, [sp, #4]
 8002262:	2a00      	cmp	r2, #0
 8002264:	d085      	beq.n	8002172 <HAL_ADC_ConfigChannel+0xea>
            wait_loop_index--;
 8002266:	9a01      	ldr	r2, [sp, #4]
 8002268:	3a01      	subs	r2, #1
 800226a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800226c:	9a01      	ldr	r2, [sp, #4]
 800226e:	2a00      	cmp	r2, #0
 8002270:	d1f9      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1de>
 8002272:	e77e      	b.n	8002172 <HAL_ADC_ConfigChannel+0xea>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002274:	2f00      	cmp	r7, #0
 8002276:	d062      	beq.n	800233e <HAL_ADC_ConfigChannel+0x2b6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800227c:	2c00      	cmp	r4, #0
 800227e:	f000 80c4 	beq.w	800240a <HAL_ADC_ConfigChannel+0x382>
  return __builtin_clz(value);
 8002282:	fab4 f684 	clz	r6, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002286:	3601      	adds	r6, #1
 8002288:	f006 051f 	and.w	r5, r6, #31
 800228c:	2d09      	cmp	r5, #9
 800228e:	f240 80bc 	bls.w	800240a <HAL_ADC_ConfigChannel+0x382>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	fa90 f0a0 	rbit	r0, r0
  return __builtin_clz(value);
 8002296:	fab4 f584 	clz	r5, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800229a:	06b4      	lsls	r4, r6, #26
 800229c:	2601      	movs	r6, #1
 800229e:	4435      	add	r5, r6
 80022a0:	f005 051f 	and.w	r5, r5, #31
 80022a4:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 80022a8:	fa06 f505 	lsl.w	r5, r6, r5
 80022ac:	432c      	orrs	r4, r5
  if (value == 0U)
 80022ae:	2800      	cmp	r0, #0
 80022b0:	f000 8153 	beq.w	800255a <HAL_ADC_ConfigChannel+0x4d2>
  return __builtin_clz(value);
 80022b4:	fab0 f580 	clz	r5, r0
 80022b8:	f06f 061d 	mvn.w	r6, #29
 80022bc:	2003      	movs	r0, #3
 80022be:	3501      	adds	r5, #1
 80022c0:	f005 051f 	and.w	r5, r5, #31
 80022c4:	fb10 6005 	smlabb	r0, r0, r5, r6
 80022c8:	0500      	lsls	r0, r0, #20
 80022ca:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ce:	4320      	orrs	r0, r4
  MODIFY_REG(*preg,
 80022d0:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022d2:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80022d4:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022d6:	f005 0504 	and.w	r5, r5, #4
 80022da:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80022de:	f85c 4005 	ldr.w	r4, [ip, r5]
 80022e2:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80022e6:	4086      	lsls	r6, r0
 80022e8:	fa07 f000 	lsl.w	r0, r7, r0
 80022ec:	ea24 0000 	bic.w	r0, r4, r0
 80022f0:	4330      	orrs	r0, r6
 80022f2:	f84c 0005 	str.w	r0, [ip, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022f6:	6808      	ldr	r0, [r1, #0]
}
 80022f8:	e71d      	b.n	8002136 <HAL_ADC_ConfigChannel+0xae>
  __HAL_LOCK(hadc);
 80022fa:	2002      	movs	r0, #2
}
 80022fc:	b002      	add	sp, #8
 80022fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002302:	01c8      	lsls	r0, r1, #7
 8002304:	f53f af35 	bmi.w	8002172 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002308:	4929      	ldr	r1, [pc, #164]	@ (80023b0 <HAL_ADC_ConfigChannel+0x328>)
 800230a:	428a      	cmp	r2, r1
 800230c:	f47f af31 	bne.w	8002172 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002310:	68a2      	ldr	r2, [r4, #8]
 8002312:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002316:	4332      	orrs	r2, r6
 8002318:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800231c:	60a2      	str	r2, [r4, #8]
}
 800231e:	e728      	b.n	8002172 <HAL_ADC_ConfigChannel+0xea>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002320:	0249      	lsls	r1, r1, #9
 8002322:	f53f af26 	bmi.w	8002172 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002326:	491e      	ldr	r1, [pc, #120]	@ (80023a0 <HAL_ADC_ConfigChannel+0x318>)
 8002328:	428a      	cmp	r2, r1
 800232a:	f47f af22 	bne.w	8002172 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800232e:	68a2      	ldr	r2, [r4, #8]
 8002330:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002334:	4332      	orrs	r2, r6
 8002336:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800233a:	60a2      	str	r2, [r4, #8]
}
 800233c:	e719      	b.n	8002172 <HAL_ADC_ConfigChannel+0xea>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800233e:	2401      	movs	r4, #1
 8002340:	0e80      	lsrs	r0, r0, #26
 8002342:	3001      	adds	r0, #1
 8002344:	f000 061f 	and.w	r6, r0, #31
 8002348:	0680      	lsls	r0, r0, #26
 800234a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800234e:	40b4      	lsls	r4, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002350:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002352:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8002356:	ea44 0400 	orr.w	r4, r4, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235a:	d97b      	bls.n	8002454 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235c:	f1a5 001e 	sub.w	r0, r5, #30
 8002360:	0500      	lsls	r0, r0, #20
 8002362:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8002366:	e7b2      	b.n	80022ce <HAL_ADC_ConfigChannel+0x246>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002368:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 800236c:	5835      	ldr	r5, [r6, r0]
 800236e:	402c      	ands	r4, r5
 8002370:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002372:	6950      	ldr	r0, [r2, #20]
 8002374:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002378:	6150      	str	r0, [r2, #20]
}
 800237a:	e719      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x128>
 800237c:	04300002 	.word	0x04300002
 8002380:	000fffff 	.word	0x000fffff
 8002384:	407f0000 	.word	0x407f0000
 8002388:	80080000 	.word	0x80080000
 800238c:	42028300 	.word	0x42028300
 8002390:	c3210000 	.word	0xc3210000
 8002394:	43290000 	.word	0x43290000
 8002398:	c7520000 	.word	0xc7520000
 800239c:	475a0000 	.word	0x475a0000
 80023a0:	42028000 	.word	0x42028000
 80023a4:	03fff000 	.word	0x03fff000
 80023a8:	20000000 	.word	0x20000000
 80023ac:	053e2d63 	.word	0x053e2d63
 80023b0:	42028100 	.word	0x42028100
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023b4:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 80023b6:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b8:	f3c0 0513 	ubfx	r5, r0, #0, #20
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023bc:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	d14b      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3d4>
 80023c4:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023c8:	4284      	cmp	r4, r0
 80023ca:	d07f      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x444>
 80023cc:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80023ce:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d0:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023d4:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80023d8:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 80023dc:	4285      	cmp	r5, r0
 80023de:	f000 80a0 	beq.w	8002522 <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023e2:	68a5      	ldr	r5, [r4, #8]
 80023e4:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e6:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ea:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80023ee:	4285      	cmp	r5, r0
 80023f0:	f000 8081 	beq.w	80024f6 <HAL_ADC_ConfigChannel+0x46e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023f4:	68e5      	ldr	r5, [r4, #12]
 80023f6:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f8:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023fc:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8002400:	42a0      	cmp	r0, r4
 8002402:	f000 80a4 	beq.w	800254e <HAL_ADC_ConfigChannel+0x4c6>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002406:	4630      	mov	r0, r6
 8002408:	e67f      	b.n	800210a <HAL_ADC_ConfigChannel+0x82>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800240e:	2c00      	cmp	r4, #0
 8002410:	f000 80b4 	beq.w	800257c <HAL_ADC_ConfigChannel+0x4f4>
  return __builtin_clz(value);
 8002414:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002418:	3401      	adds	r4, #1
 800241a:	06a4      	lsls	r4, r4, #26
 800241c:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002424:	2d00      	cmp	r5, #0
 8002426:	f000 80a7 	beq.w	8002578 <HAL_ADC_ConfigChannel+0x4f0>
 800242a:	2601      	movs	r6, #1
  return __builtin_clz(value);
 800242c:	fab5 f585 	clz	r5, r5
 8002430:	4435      	add	r5, r6
 8002432:	f005 051f 	and.w	r5, r5, #31
 8002436:	fa06 f505 	lsl.w	r5, r6, r5
 800243a:	432c      	orrs	r4, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002440:	2800      	cmp	r0, #0
 8002442:	f000 8096 	beq.w	8002572 <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 8002446:	fab0 f580 	clz	r5, r0
 800244a:	3501      	adds	r5, #1
 800244c:	f005 051f 	and.w	r5, r5, #31
 8002450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002454:	052d      	lsls	r5, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002456:	ea45 0004 	orr.w	r0, r5, r4
 800245a:	e739      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x248>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002460:	b11d      	cbz	r5, 800246a <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8002462:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002466:	42ac      	cmp	r4, r5
 8002468:	d030      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800246a:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800246c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800246e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002472:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002476:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 800247a:	f104 0c08 	add.w	ip, r4, #8
 800247e:	46e0      	mov	r8, ip
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	fa96 f7a6 	rbit	r7, r6
  if (value == 0U)
 8002484:	2f00      	cmp	r7, #0
 8002486:	d06f      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x4e0>
  return __builtin_clz(value);
 8002488:	fab7 f787 	clz	r7, r7
 800248c:	42af      	cmp	r7, r5
 800248e:	d04a      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002490:	f8dc 5000 	ldr.w	r5, [ip]
 8002494:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002498:	f3c5 6584 	ubfx	r5, r5, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800249c:	f104 070c 	add.w	r7, r4, #12
 80024a0:	46b8      	mov	r8, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	fa96 fea6 	rbit	lr, r6
  if (value == 0U)
 80024a6:	f1be 0f00 	cmp.w	lr, #0
 80024aa:	d058      	beq.n	800255e <HAL_ADC_ConfigChannel+0x4d6>
  return __builtin_clz(value);
 80024ac:	fabe fe8e 	clz	lr, lr
 80024b0:	45ae      	cmp	lr, r5
 80024b2:	d022      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024b4:	683c      	ldr	r4, [r7, #0]
 80024b6:	683c      	ldr	r4, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b8:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	fa96 f5a6 	rbit	r5, r6
  if (value == 0U)
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	f43f ae22 	beq.w	800210a <HAL_ADC_ConfigChannel+0x82>
  return __builtin_clz(value);
 80024c6:	fab5 f085 	clz	r0, r5
 80024ca:	e799      	b.n	8002400 <HAL_ADC_ConfigChannel+0x378>
  MODIFY_REG(*preg,
 80024cc:	4614      	mov	r4, r2
 80024ce:	6e10      	ldr	r0, [r2, #96]	@ 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d0:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
  MODIFY_REG(*preg,
 80024d4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80024d8:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024dc:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024de:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80024e0:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80024e2:	f3c6 0713 	ubfx	r7, r6, #0, #20
 80024e6:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024e8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ec:	2f00      	cmp	r7, #0
 80024ee:	d1c4      	bne.n	800247a <HAL_ADC_ConfigChannel+0x3f2>
 80024f0:	f3c6 6084 	ubfx	r0, r6, #26, #5
 80024f4:	e772      	b.n	80023dc <HAL_ADC_ConfigChannel+0x354>
 80024f6:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80024fa:	f8dc 0000 	ldr.w	r0, [ip]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fe:	4647      	mov	r7, r8
  MODIFY_REG(*preg,
 8002500:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002504:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002508:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800250a:	68e0      	ldr	r0, [r4, #12]
 800250c:	68e4      	ldr	r4, [r4, #12]
 800250e:	f3c6 0513 	ubfx	r5, r6, #0, #20
 8002512:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002514:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002518:	2d00      	cmp	r5, #0
 800251a:	d1cf      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x434>
 800251c:	f3c6 6084 	ubfx	r0, r6, #26, #5
 8002520:	e76e      	b.n	8002400 <HAL_ADC_ConfigChannel+0x378>
 8002522:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8002526:	f8de 0000 	ldr.w	r0, [lr]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252a:	46c4      	mov	ip, r8
  MODIFY_REG(*preg,
 800252c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002530:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002534:	680e      	ldr	r6, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002536:	68a0      	ldr	r0, [r4, #8]
 8002538:	68a5      	ldr	r5, [r4, #8]
 800253a:	f3c6 0713 	ubfx	r7, r6, #0, #20
 800253e:	4630      	mov	r0, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002540:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002544:	2f00      	cmp	r7, #0
 8002546:	d1a9      	bne.n	800249c <HAL_ADC_ConfigChannel+0x414>
 8002548:	f3c6 6084 	ubfx	r0, r6, #26, #5
 800254c:	e74f      	b.n	80023ee <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002554:	6038      	str	r0, [r7, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002556:	6808      	ldr	r0, [r1, #0]
}
 8002558:	e5d7      	b.n	800210a <HAL_ADC_ConfigChannel+0x82>
 800255a:	480a      	ldr	r0, [pc, #40]	@ (8002584 <HAL_ADC_ConfigChannel+0x4fc>)
 800255c:	e6b7      	b.n	80022ce <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800255e:	68e5      	ldr	r5, [r4, #12]
 8002560:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002562:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002566:	e7a9      	b.n	80024bc <HAL_ADC_ConfigChannel+0x434>
 8002568:	68a5      	ldr	r5, [r4, #8]
 800256a:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800256c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002570:	e794      	b.n	800249c <HAL_ADC_ConfigChannel+0x414>
 8002572:	f44f 1540 	mov.w	r5, #3145728	@ 0x300000
 8002576:	e76e      	b.n	8002456 <HAL_ADC_ConfigChannel+0x3ce>
 8002578:	2502      	movs	r5, #2
 800257a:	e75e      	b.n	800243a <HAL_ADC_ConfigChannel+0x3b2>
 800257c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002580:	e74e      	b.n	8002420 <HAL_ADC_ConfigChannel+0x398>
 8002582:	bf00      	nop
 8002584:	fe500000 	.word	0xfe500000

08002588 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002588:	6803      	ldr	r3, [r0, #0]
{
 800258a:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	4604      	mov	r4, r0
 8002590:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002594:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002596:	d101      	bne.n	800259c <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002598:	0716      	lsls	r6, r2, #28
 800259a:	d53c      	bpl.n	8002616 <ADC_ConversionStop+0x8e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	0195      	lsls	r5, r2, #6
 80025a0:	d504      	bpl.n	80025ac <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80025a2:	f240 1201 	movw	r2, #257	@ 0x101
 80025a6:	8b20      	ldrh	r0, [r4, #24]
 80025a8:	4290      	cmp	r0, r2
 80025aa:	d045      	beq.n	8002638 <ADC_ConversionStop+0xb0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80025ac:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	d033      	beq.n	800261a <ADC_ConversionStop+0x92>
 80025b2:	0750      	lsls	r0, r2, #29
 80025b4:	d502      	bpl.n	80025bc <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	0792      	lsls	r2, r2, #30
 80025ba:	d559      	bpl.n	8002670 <ADC_ConversionStop+0xe8>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025bc:	2901      	cmp	r1, #1
 80025be:	d055      	beq.n	800266c <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	0710      	lsls	r0, r2, #28
 80025c4:	d50a      	bpl.n	80025dc <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	0792      	lsls	r2, r2, #30
 80025ca:	d407      	bmi.n	80025dc <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025d2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80025d6:	f042 0220 	orr.w	r2, r2, #32
 80025da:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80025dc:	2903      	cmp	r1, #3
 80025de:	d145      	bne.n	800266c <ADC_ConversionStop+0xe4>
 80025e0:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025e2:	f7ff fbf3 	bl	8001dcc <HAL_GetTick>
 80025e6:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	421d      	tst	r5, r3
 80025ee:	d012      	beq.n	8002616 <ADC_ConversionStop+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025f0:	f7ff fbec 	bl	8001dcc <HAL_GetTick>
 80025f4:	1b80      	subs	r0, r0, r6
 80025f6:	2805      	cmp	r0, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025f8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025fa:	d9f6      	bls.n	80025ea <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	422a      	tst	r2, r5
 8002600:	d0f3      	beq.n	80025ea <ADC_ConversionStop+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8002604:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	f043 0310 	orr.w	r3, r3, #16
 800260a:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	65e3      	str	r3, [r4, #92]	@ 0x5c

  }

  /* Return HAL status */
  return HAL_OK;
}
 8002614:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002616:	2000      	movs	r0, #0
}
 8002618:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800261a:	0716      	lsls	r6, r2, #28
 800261c:	d50a      	bpl.n	8002634 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	0795      	lsls	r5, r2, #30
 8002622:	d407      	bmi.n	8002634 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800262a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800262e:	f042 0220 	orr.w	r2, r2, #32
 8002632:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002634:	2508      	movs	r5, #8
 8002636:	e7d4      	b.n	80025e2 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	0650      	lsls	r0, r2, #25
 800263c:	d406      	bmi.n	800264c <ADC_ConversionStop+0xc4>
 800263e:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <ADC_ConversionStop+0xfc>)
 8002640:	e001      	b.n	8002646 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002642:	3a01      	subs	r2, #1
 8002644:	d0dd      	beq.n	8002602 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	0649      	lsls	r1, r1, #25
 800264a:	d5fa      	bpl.n	8002642 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800264c:	2240      	movs	r2, #64	@ 0x40
 800264e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	0756      	lsls	r6, r2, #29
 8002654:	d50a      	bpl.n	800266c <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	0795      	lsls	r5, r2, #30
 800265a:	d407      	bmi.n	800266c <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002662:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002666:	f042 0210 	orr.w	r2, r2, #16
 800266a:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800266c:	2504      	movs	r5, #4
 800266e:	e7b8      	b.n	80025e2 <ADC_ConversionStop+0x5a>
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002676:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800267a:	f042 0210 	orr.w	r2, r2, #16
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	e79c      	b.n	80025bc <ADC_ConversionStop+0x34>
 8002682:	bf00      	nop
 8002684:	a3400000 	.word	0xa3400000

08002688 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002688:	2300      	movs	r3, #0
{
 800268a:	b570      	push	{r4, r5, r6, lr}
 800268c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800268e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	07d2      	lsls	r2, r2, #31
 8002696:	d42c      	bmi.n	80026f2 <ADC_Enable+0x6a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	4a27      	ldr	r2, [pc, #156]	@ (8002738 <ADC_Enable+0xb0>)
 800269c:	4604      	mov	r4, r0
 800269e:	4211      	tst	r1, r2
 80026a0:	d12a      	bne.n	80026f8 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80026a2:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026a4:	4925      	ldr	r1, [pc, #148]	@ (800273c <ADC_Enable+0xb4>)
  MODIFY_REG(ADCx->CR,
 80026a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026aa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026b4:	688b      	ldr	r3, [r1, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	d429      	bmi.n	800270e <ADC_Enable+0x86>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026ba:	f7ff fb87 	bl	8001dcc <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026be:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80026c0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	07d6      	lsls	r6, r2, #31
 80026c6:	d414      	bmi.n	80026f2 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 80026c8:	4e1d      	ldr	r6, [pc, #116]	@ (8002740 <ADC_Enable+0xb8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	07d0      	lsls	r0, r2, #31
 80026ce:	d404      	bmi.n	80026da <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	4032      	ands	r2, r6
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026da:	f7ff fb77 	bl	8001dcc <HAL_GetTick>
 80026de:	1b43      	subs	r3, r0, r5
 80026e0:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e2:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e4:	d902      	bls.n	80026ec <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	07d1      	lsls	r1, r2, #31
 80026ea:	d505      	bpl.n	80026f8 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	07d2      	lsls	r2, r2, #31
 80026f0:	d5eb      	bpl.n	80026ca <ADC_Enable+0x42>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026f2:	2000      	movs	r0, #0
}
 80026f4:	b002      	add	sp, #8
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80026fc:	f043 0310 	orr.w	r3, r3, #16
 8002700:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002702:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 800270a:	b002      	add	sp, #8
 800270c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800270e:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <ADC_Enable+0xbc>)
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <ADC_Enable+0xc0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	3301      	adds	r3, #1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002722:	9b01      	ldr	r3, [sp, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0c8      	beq.n	80026ba <ADC_Enable+0x32>
        wait_loop_index--;
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800272e:	9b01      	ldr	r3, [sp, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f9      	bne.n	8002728 <ADC_Enable+0xa0>
 8002734:	e7c1      	b.n	80026ba <ADC_Enable+0x32>
 8002736:	bf00      	nop
 8002738:	8000003f 	.word	0x8000003f
 800273c:	42028300 	.word	0x42028300
 8002740:	7fffffc0 	.word	0x7fffffc0
 8002744:	20000000 	.word	0x20000000
 8002748:	053e2d63 	.word	0x053e2d63

0800274c <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <HAL_ADC_Start+0xc8>)
{
 800274e:	b570      	push	{r4, r5, r6, lr}
 8002750:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002752:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002754:	689d      	ldr	r5, [r3, #8]
 8002756:	f015 0504 	ands.w	r5, r5, #4
 800275a:	d140      	bne.n	80027de <HAL_ADC_Start+0x92>
    __HAL_LOCK(hadc);
 800275c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002760:	4604      	mov	r4, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d03b      	beq.n	80027de <HAL_ADC_Start+0x92>
 8002766:	2301      	movs	r3, #1
 8002768:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800276c:	f7ff ff8c 	bl	8002688 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002770:	2800      	cmp	r0, #0
 8002772:	d136      	bne.n	80027e2 <HAL_ADC_Start+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8002774:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002776:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002778:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002784:	65a3      	str	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_ADC_Start+0xcc>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002788:	f006 061f 	and.w	r6, r6, #31
 800278c:	429a      	cmp	r2, r3
 800278e:	d02b      	beq.n	80027e8 <HAL_ADC_Start+0x9c>
 8002790:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002792:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002794:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002798:	65a3      	str	r3, [r4, #88]	@ 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800279c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027a0:	bf1c      	itt	ne
 80027a2:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
 80027a4:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80027a8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027aa:	231c      	movs	r3, #28
 80027ac:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 80027ae:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b0:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 80027b2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b6:	d01b      	beq.n	80027f0 <HAL_ADC_Start+0xa4>
 80027b8:	f240 2321 	movw	r3, #545	@ 0x221
 80027bc:	40f3      	lsrs	r3, r6
 80027be:	07dd      	lsls	r5, r3, #31
 80027c0:	d416      	bmi.n	80027f0 <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c8:	65a3      	str	r3, [r4, #88]	@ 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027ca:	68cb      	ldr	r3, [r1, #12]
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	d505      	bpl.n	80027dc <HAL_ADC_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027da:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 80027dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80027de:	2002      	movs	r0, #2
}
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80027e2:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e8:	490c      	ldr	r1, [pc, #48]	@ (800281c <HAL_ADC_Start+0xd0>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ea:	2e00      	cmp	r6, #0
 80027ec:	d1d5      	bne.n	800279a <HAL_ADC_Start+0x4e>
 80027ee:	e7d0      	b.n	8002792 <HAL_ADC_Start+0x46>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027f0:	68d3      	ldr	r3, [r2, #12]
 80027f2:	0199      	lsls	r1, r3, #6
 80027f4:	d505      	bpl.n	8002802 <HAL_ADC_Start+0xb6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002800:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8002802:	6893      	ldr	r3, [r2, #8]
 8002804:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6093      	str	r3, [r2, #8]
}
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	42028300 	.word	0x42028300
 8002818:	42028100 	.word	0x42028100
 800281c:	42028000 	.word	0x42028000

08002820 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002820:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002822:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	0795      	lsls	r5, r2, #30
 8002828:	d502      	bpl.n	8002830 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800282a:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800282c:	2000      	movs	r0, #0
}
 800282e:	bd38      	pop	{r3, r4, r5, pc}
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	07d4      	lsls	r4, r2, #31
 8002834:	d5fa      	bpl.n	800282c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4604      	mov	r4, r0
 800283a:	f002 020d 	and.w	r2, r2, #13
 800283e:	2a01      	cmp	r2, #1
 8002840:	d009      	beq.n	8002856 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002844:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	f043 0310 	orr.w	r3, r3, #16
 800284a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8002854:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002856:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->CR,
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800285e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002862:	f042 0202 	orr.w	r2, r2, #2
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800286a:	f7ff faaf 	bl	8001dcc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800286e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002870:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	07d9      	lsls	r1, r3, #31
 8002876:	d403      	bmi.n	8002880 <ADC_Disable+0x60>
 8002878:	e7d8      	b.n	800282c <ADC_Disable+0xc>
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	07db      	lsls	r3, r3, #31
 800287e:	d5d5      	bpl.n	800282c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002880:	f7ff faa4 	bl	8001dcc <HAL_GetTick>
 8002884:	1b40      	subs	r0, r0, r5
 8002886:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002888:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800288a:	d9f6      	bls.n	800287a <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	07d2      	lsls	r2, r2, #31
 8002890:	d5f3      	bpl.n	800287a <ADC_Disable+0x5a>
 8002892:	e7d6      	b.n	8002842 <ADC_Disable+0x22>

08002894 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002894:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002898:	2b01      	cmp	r3, #1
 800289a:	d01d      	beq.n	80028d8 <HAL_ADC_Stop+0x44>
 800289c:	2301      	movs	r3, #1
{
 800289e:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028a0:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80028a2:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028a6:	4604      	mov	r4, r0
 80028a8:	f7ff fe6e 	bl	8002588 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80028ac:	b118      	cbz	r0, 80028b6 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80028b4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ffb2 	bl	8002820 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80028bc:	2800      	cmp	r0, #0
 80028be:	d1f6      	bne.n	80028ae <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80028c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80028d0:	2300      	movs	r3, #0
 80028d2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80028d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80028d8:	2002      	movs	r0, #2
}
 80028da:	4770      	bx	lr

080028dc <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028dc:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4906      	ldr	r1, [pc, #24]	@ (80028fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80028f8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002902:	b500      	push	{lr}
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290a:	f1c3 0e07 	rsb	lr, r3, #7
 800290e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002916:	bf28      	it	cs
 8002918:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291c:	f1bc 0f06 	cmp.w	ip, #6
 8002920:	d91c      	bls.n	800295c <HAL_NVIC_SetPriority+0x5c>
 8002922:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	fa03 f30c 	lsl.w	r3, r3, ip
 800292e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	fa03 f30e 	lsl.w	r3, r3, lr
 800293a:	ea21 0303 	bic.w	r3, r1, r3
 800293e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002942:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002946:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800294a:	db0a      	blt.n	8002962 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002950:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002954:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002958:	f85d fb04 	ldr.w	pc, [sp], #4
 800295c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	4694      	mov	ip, r2
 8002960:	e7e7      	b.n	8002932 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <HAL_NVIC_SetPriority+0x74>)
 8002964:	f000 000f 	and.w	r0, r0, #15
 8002968:	4402      	add	r2, r0
 800296a:	7613      	strb	r3, [r2, #24]
 800296c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002970:	e000ed00 	.word	0xe000ed00
 8002974:	e000ecfc 	.word	0xe000ecfc

08002978 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	1e43      	subs	r3, r0, #1
 800297a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297e:	d209      	bcs.n	8002994 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002980:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002984:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002986:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 8002988:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800298a:	6913      	ldr	r3, [r2, #16]
 800298c:	f043 0303 	orr.w	r3, r3, #3
 8002990:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8002992:	4770      	bx	lr
    return (1UL);
 8002994:	2001      	movs	r0, #1
}
 8002996:	4770      	bx	lr

08002998 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002998:	2804      	cmp	r0, #4
 800299a:	d813      	bhi.n	80029c4 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 800299c:	e8df f000 	tbb	[pc, r0]
 80029a0:	12031a2a 	.word	0x12031a2a
 80029a4:	13          	.byte	0x13
 80029a5:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029a6:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80029aa:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80029b4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80029b8:	f023 030c 	bic.w	r3, r3, #12
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 80029c4:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029c6:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80029ca:	6913      	ldr	r3, [r2, #16]
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6113      	str	r3, [r2, #16]
      break;
 80029d2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029d4:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80029d8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80029da:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80029e2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80029e6:	f023 030c 	bic.w	r3, r3, #12
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80029f2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029f4:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80029f8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80029fa:	4a05      	ldr	r2, [pc, #20]	@ (8002a10 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002a02:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8002a06:	f023 030c 	bic.w	r3, r3, #12
 8002a0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a0e:	4770      	bx	lr
 8002a10:	44020c00 	.word	0x44020c00

08002a14 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002a14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	075b      	lsls	r3, r3, #29
 8002a1c:	d40f      	bmi.n	8002a3e <HAL_SYSTICK_GetCLKSourceConfig+0x2a>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8002a20:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 8002a24:	f000 000c 	and.w	r0, r0, #12

    switch (systick_rcc_source)
 8002a28:	2804      	cmp	r0, #4
 8002a2a:	d006      	beq.n	8002a3a <HAL_SYSTICK_GetCLKSourceConfig+0x26>
 8002a2c:	f1a0 0008 	sub.w	r0, r0, #8
 8002a30:	fab0 f080 	clz	r0, r0
 8002a34:	0940      	lsrs	r0, r0, #5
 8002a36:	0040      	lsls	r0, r0, #1
 8002a38:	4770      	bx	lr
 8002a3a:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8002a3c:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002a3e:	2004      	movs	r0, #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	44020c00 	.word	0x44020c00

08002a48 <HAL_DCACHE_ErrorCallback>:
  * @brief  Error callback.
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop

08002a4c <HAL_DCACHE_CleanByAddrCallback>:
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <HAL_DCACHE_InvalidateByAddrCallback>:
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <HAL_DCACHE_InvalidateCompleteCallback>:
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop

08002a5c <HAL_DCACHE_Init>:
  if (hdcache == NULL)
 8002a5c:	b350      	cbz	r0, 8002ab4 <HAL_DCACHE_Init+0x58>
{
 8002a5e:	b510      	push	{r4, lr}
  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8002a60:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002a64:	4604      	mov	r4, r0
 8002a66:	b96b      	cbnz	r3, 8002a84 <HAL_DCACHE_Init+0x28>
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8002a68:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <HAL_DCACHE_Init+0x64>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <HAL_DCACHE_Init+0x68>)
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8002a6c:	4816      	ldr	r0, [pc, #88]	@ (8002ac8 <HAL_DCACHE_Init+0x6c>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8002a6e:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8002a72:	4916      	ldr	r1, [pc, #88]	@ (8002acc <HAL_DCACHE_Init+0x70>)
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8002a74:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_DCACHE_Init+0x74>)
    if (hdcache->MspInitCallback == NULL)
 8002a76:	69e3      	ldr	r3, [r4, #28]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8002a78:	e9c4 0104 	strd	r0, r1, [r4, #16]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8002a7c:	61a2      	str	r2, [r4, #24]
    if (hdcache->MspInitCallback == NULL)
 8002a7e:	b1db      	cbz	r3, 8002ab8 <HAL_DCACHE_Init+0x5c>
    hdcache->MspInitCallback(hdcache);
 8002a80:	4620      	mov	r0, r4
 8002a82:	4798      	blx	r3
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8002a84:	e9d4 2100 	ldrd	r2, r1, [r4]
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002a88:	2000      	movs	r0, #0
  hdcache->State = HAL_DCACHE_STATE_READY;
 8002a8a:	2301      	movs	r3, #1
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002a8c:	62a0      	str	r0, [r4, #40]	@ 0x28
  hdcache->State = HAL_DCACHE_STATE_READY;
 8002a8e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6013      	str	r3, [r2, #0]
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8002a9c:	6850      	ldr	r0, [r2, #4]
 8002a9e:	f010 0009 	ands.w	r0, r0, #9
 8002aa2:	d105      	bne.n	8002ab0 <HAL_DCACHE_Init+0x54>
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002aa4:	62a0      	str	r0, [r4, #40]	@ 0x28
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6013      	str	r3, [r2, #0]
}
 8002aae:	bd10      	pop	{r4, pc}
    status =  HAL_BUSY;
 8002ab0:	2002      	movs	r0, #2
}
 8002ab2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ab4:	2001      	movs	r0, #1
}
 8002ab6:	4770      	bx	lr
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8002ab8:	4a06      	ldr	r2, [pc, #24]	@ (8002ad4 <HAL_DCACHE_Init+0x78>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	61e2      	str	r2, [r4, #28]
 8002abe:	e7df      	b.n	8002a80 <HAL_DCACHE_Init+0x24>
 8002ac0:	08002a49 	.word	0x08002a49
 8002ac4:	08002a4d 	.word	0x08002a4d
 8002ac8:	08002a51 	.word	0x08002a51
 8002acc:	08002a59 	.word	0x08002a59
 8002ad0:	08002a55 	.word	0x08002a55
 8002ad4:	08001975 	.word	0x08001975

08002ad8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002adc:	680d      	ldr	r5, [r1, #0]
{
 8002ade:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ae0:	2d00      	cmp	r5, #0
 8002ae2:	f000 80b6 	beq.w	8002c52 <HAL_GPIO_Init+0x17a>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c58 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0U;
 8002ae8:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002aea:	ea02 2290 	and.w	r2, r2, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002aee:	f04f 0b01 	mov.w	fp, #1
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002af2:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8002c5c <HAL_GPIO_Init+0x184>
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002af6:	9203      	str	r2, [sp, #12]
        tmp = EXTI->RTSR1;
 8002af8:	9101      	str	r1, [sp, #4]
 8002afa:	e059      	b.n	8002bb0 <HAL_GPIO_Init+0xd8>
      tmp = GPIOx->MODER;
 8002afc:	f8d0 e000 	ldr.w	lr, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b00:	f10c 3cff 	add.w	ip, ip, #4294967295
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b04:	ea0e 0e06 	and.w	lr, lr, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b08:	ea4e 0e01 	orr.w	lr, lr, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0c:	f1bc 0f01 	cmp.w	ip, #1
      GPIOx->MODER = tmp;
 8002b10:	f8c0 e000 	str.w	lr, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b14:	f240 8085 	bls.w	8002c22 <HAL_GPIO_Init+0x14a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002b18:	9a01      	ldr	r2, [sp, #4]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002b1a:	f1b8 0f03 	cmp.w	r8, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002b1e:	6892      	ldr	r2, [r2, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x4e>
 8002b22:	2a01      	cmp	r2, #1
 8002b24:	d004      	beq.n	8002b30 <HAL_GPIO_Init+0x58>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b26:	40ba      	lsls	r2, r7
        tmp = GPIOx->PUPDR;
 8002b28:	68c7      	ldr	r7, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b2a:	403e      	ands	r6, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b2c:	4332      	orrs	r2, r6
        GPIOx->PUPDR = tmp;
 8002b2e:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b30:	00e2      	lsls	r2, r4, #3
 8002b32:	d539      	bpl.n	8002ba8 <HAL_GPIO_Init+0xd0>
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b34:	210f      	movs	r1, #15
 8002b36:	f023 0603 	bic.w	r6, r3, #3
 8002b3a:	f106 4688 	add.w	r6, r6, #1140850688	@ 0x44000000
 8002b3e:	f003 0203 	and.w	r2, r3, #3
 8002b42:	f506 3608 	add.w	r6, r6, #139264	@ 0x22000
 8002b46:	00d2      	lsls	r2, r2, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002b48:	6e37      	ldr	r7, [r6, #96]	@ 0x60
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b4a:	fa01 fc02 	lsl.w	ip, r1, r2
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b4e:	9903      	ldr	r1, [sp, #12]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b50:	ea27 070c 	bic.w	r7, r7, ip
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	433a      	orrs	r2, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b5a:	6632      	str	r2, [r6, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8002b5c:	ea6f 0609 	mvn.w	r6, r9
        tmp = EXTI->RTSR1;
 8002b60:	f8da 2000 	ldr.w	r2, [sl]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b64:	02e7      	lsls	r7, r4, #11
        tmp &= ~((uint32_t)iocurrent);
 8002b66:	bf54      	ite	pl
 8002b68:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b6a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = tmp;
 8002b6e:	f8ca 2000 	str.w	r2, [sl]

        tmp = EXTI->FTSR1;
 8002b72:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b76:	02a1      	lsls	r1, r4, #10
        tmp &= ~((uint32_t)iocurrent);
 8002b78:	bf54      	ite	pl
 8002b7a:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b7c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = tmp;
 8002b80:	f8ca 2004 	str.w	r2, [sl, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002b84:	f8da 2084 	ldr.w	r2, [sl, #132]	@ 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b88:	03a7      	lsls	r7, r4, #14
        tmp &= ~((uint32_t)iocurrent);
 8002b8a:	bf54      	ite	pl
 8002b8c:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002b8e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = tmp;
 8002b92:	f8ca 2084 	str.w	r2, [sl, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002b96:	f8da 2080 	ldr.w	r2, [sl, #128]	@ 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b9a:	03e1      	lsls	r1, r4, #15
        tmp &= ~((uint32_t)iocurrent);
 8002b9c:	bf54      	ite	pl
 8002b9e:	4032      	andpl	r2, r6
        {
          tmp |= iocurrent;
 8002ba0:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = tmp;
 8002ba4:	f8ca 2080 	str.w	r2, [sl, #128]	@ 0x80
      }
    }

    position++;
 8002ba8:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002baa:	fa35 f203 	lsrs.w	r2, r5, r3
 8002bae:	d050      	beq.n	8002c52 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002bb0:	fa0b f203 	lsl.w	r2, fp, r3
    if (iocurrent != 0U)
 8002bb4:	ea12 0905 	ands.w	r9, r2, r5
 8002bb8:	d0f6      	beq.n	8002ba8 <HAL_GPIO_Init+0xd0>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bba:	9901      	ldr	r1, [sp, #4]
 8002bbc:	005f      	lsls	r7, r3, #1
 8002bbe:	684c      	ldr	r4, [r1, #4]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bc0:	2103      	movs	r1, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc2:	f024 0c10 	bic.w	ip, r4, #16
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bc6:	ea04 0801 	and.w	r8, r4, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bca:	fa01 f607 	lsl.w	r6, r1, r7
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bce:	f1bc 0f02 	cmp.w	ip, #2
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bd2:	fa08 f107 	lsl.w	r1, r8, r7
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bd6:	ea6f 0606 	mvn.w	r6, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002bda:	9102      	str	r1, [sp, #8]
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bdc:	d18e      	bne.n	8002afc <HAL_GPIO_Init+0x24>
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bde:	9901      	ldr	r1, [sp, #4]
        tmp = GPIOx->AFR[position >> 3U];
 8002be0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002be4:	6909      	ldr	r1, [r1, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002be6:	f003 0c07 	and.w	ip, r3, #7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bea:	f001 0e0f 	and.w	lr, r1, #15
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bee:	210f      	movs	r1, #15
 8002bf0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002bf4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bf8:	fa0e fe0c 	lsl.w	lr, lr, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002bfc:	fa01 fc0c 	lsl.w	ip, r1, ip
        tmp = GPIOx->AFR[position >> 3U];
 8002c00:	f8d8 1020 	ldr.w	r1, [r8, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c04:	ea21 0c0c 	bic.w	ip, r1, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c08:	ea4e 0e0c 	orr.w	lr, lr, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8002c0c:	f8c8 e020 	str.w	lr, [r8, #32]
      tmp = GPIOx->MODER;
 8002c10:	f8d0 c000 	ldr.w	ip, [r0]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002c14:	9902      	ldr	r1, [sp, #8]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c16:	ea0c 0c06 	and.w	ip, ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002c1a:	ea4c 0c01 	orr.w	ip, ip, r1
      GPIOx->MODER = tmp;
 8002c1e:	f8c0 c000 	str.w	ip, [r0]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c22:	9901      	ldr	r1, [sp, #4]
        tmp = GPIOx->OSPEEDR;
 8002c24:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c28:	68c9      	ldr	r1, [r1, #12]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c2a:	ea0e 0e06 	and.w	lr, lr, r6
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c2e:	fa01 fc07 	lsl.w	ip, r1, r7
 8002c32:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = tmp;
 8002c36:	f8c0 c008 	str.w	ip, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002c3a:	f8d0 c004 	ldr.w	ip, [r0, #4]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c3e:	9901      	ldr	r1, [sp, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c40:	ea2c 0c02 	bic.w	ip, ip, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c44:	0922      	lsrs	r2, r4, #4
 8002c46:	409a      	lsls	r2, r3
 8002c48:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = tmp;
 8002c4c:	6042      	str	r2, [r0, #4]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c4e:	688a      	ldr	r2, [r1, #8]
 8002c50:	e769      	b.n	8002b26 <HAL_GPIO_Init+0x4e>
  }
}
 8002c52:	b005      	add	sp, #20
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c58:	002f7f7f 	.word	0x002f7f7f
 8002c5c:	44022000 	.word	0x44022000

08002c60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c60:	b10a      	cbz	r2, 8002c66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c62:	6181      	str	r1, [r0, #24]
 8002c64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c66:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop

08002c6c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c6c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c6e:	ea01 0203 	and.w	r2, r1, r3
 8002c72:	ea21 0103 	bic.w	r1, r1, r3
 8002c76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c7a:	6181      	str	r1, [r0, #24]
}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d055      	beq.n	8002d30 <HAL_I2C_Init+0xb0>
{
 8002c84:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d048      	beq.n	8002d26 <HAL_I2C_Init+0xa6>
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c94:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	2124      	movs	r1, #36	@ 0x24
 8002c9a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002c9e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	f021 0101 	bic.w	r1, r1, #1
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca8:	68e5      	ldr	r5, [r4, #12]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002caa:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002cac:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cb0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb2:	2d01      	cmp	r5, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cb8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cba:	d009      	beq.n	8002cd0 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cbc:	f440 4004 	orr.w	r0, r0, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc0:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cc2:	6098      	str	r0, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	e006      	b.n	8002cde <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd0:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002cd4:	6098      	str	r0, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cdc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cde:	2100      	movs	r1, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cee:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cf6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cf8:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 8002cfc:	4302      	orrs	r2, r0
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cfe:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d00:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002d04:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d06:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002d0a:	4302      	orrs	r2, r0
 8002d0c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002d0e:	681a      	ldr	r2, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8002d10:	4608      	mov	r0, r1
  __HAL_I2C_ENABLE(hi2c);
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	6461      	str	r1, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d1e:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
}
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002d26:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002d2a:	f7fe fe3d 	bl	80019a8 <HAL_I2C_MspInit>
 8002d2e:	e7b1      	b.n	8002c94 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002d30:	2001      	movs	r0, #1
}
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d34:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002d38:	2a20      	cmp	r2, #32
 8002d3a:	d123      	bne.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002d3c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d40:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002d44:	4603      	mov	r3, r0
 8002d46:	2a01      	cmp	r2, #1
 8002d48:	d01c      	beq.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4a:	2024      	movs	r0, #36	@ 0x24
{
 8002d4c:	b500      	push	{lr}
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4e:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8002d52:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002d58:	6810      	ldr	r0, [r2, #0]
 8002d5a:	f020 0001 	bic.w	r0, r0, #1
 8002d5e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d60:	6810      	ldr	r0, [r2, #0]
 8002d62:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002d66:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d68:	6810      	ldr	r0, [r2, #0]
 8002d6a:	4301      	orrs	r1, r0
 8002d6c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d6e:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8002d70:	4670      	mov	r0, lr
    __HAL_I2C_ENABLE(hi2c);
 8002d72:	f041 0101 	orr.w	r1, r1, #1
 8002d76:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002d7c:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002d80:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002d84:	2002      	movs	r0, #2
}
 8002d86:	4770      	bx	lr

08002d88 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d88:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002d8c:	2a20      	cmp	r2, #32
 8002d8e:	d122      	bne.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002d90:	b500      	push	{lr}
 8002d92:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d96:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2a01      	cmp	r2, #1
 8002d9e:	d01c      	beq.n	8002dda <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da2:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_DISABLE(hi2c);
 8002da6:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002dac:	6810      	ldr	r0, [r2, #0]
 8002dae:	f020 0001 	bic.w	r0, r0, #1
 8002db2:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002db4:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002db6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002dba:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002dbe:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002dc0:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8002dc2:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8002dc4:	f041 0101 	orr.w	r1, r1, #1
 8002dc8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002dce:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002dd6:	2002      	movs	r0, #2
}
 8002dd8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002dda:	2002      	movs	r0, #2
}
 8002ddc:	f85d fb04 	ldr.w	pc, [sp], #4

08002de0 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002de0:	4a03      	ldr	r2, [pc, #12]	@ (8002df0 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8002de2:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40030400 	.word	0x40030400

08002df4 <HAL_RCC_GetSysClockFreq.part.0>:
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002df4:	4b44      	ldr	r3, [pc, #272]	@ (8002f08 <HAL_RCC_GetSysClockFreq.part.0+0x114>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002df6:	b430      	push	{r4, r5}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002df8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002dfa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002dfe:	f411 5f7c 	tst.w	r1, #16128	@ 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e02:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002e04:	f3c1 2005 	ubfx	r0, r1, #8, #6
    if (pllm != 0U)
 8002e08:	d035      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq.part.0+0x82>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002e0a:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002e0e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e12:	fb05 f202 	mul.w	r2, r5, r2
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e16:	ee07 0a90 	vmov	s15, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e1a:	ee06 2a90 	vmov	s13, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e1e:	f004 0403 	and.w	r4, r4, #3
      switch (pllsource)
 8002e22:	2c01      	cmp	r4, #1
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e28:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
      switch (pllsource)
 8002e2c:	d039      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq.part.0+0xae>
 8002e2e:	2c03      	cmp	r4, #3
 8002e30:	d123      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq.part.0+0x86>
          }

          break;

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e34:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e44:	eddf 5a31 	vldr	s11, [pc, #196]	@ 8002f0c <HAL_RCC_GetSysClockFreq.part.0+0x118>
 8002e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4c:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e50:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e54:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
          break;
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCC_GetSysClockFreq.part.0+0x114>)
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002e60:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e62:	ee07 3a10 	vmov	s14, r3
 8002e66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002e6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e6e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002e72:	ee17 0a90 	vmov	r0, s15
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
  }

  return sysclockfreq;
}
 8002e76:	bc30      	pop	{r4, r5}
 8002e78:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e7c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8c:	eddf 5a20 	vldr	s11, [pc, #128]	@ 8002f10 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 8002e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e94:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e98:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
          break;
 8002ea0:	e7da      	b.n	8002e58 <HAL_RCC_GetSysClockFreq.part.0+0x64>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	0692      	lsls	r2, r2, #26
 8002ea6:	d51a      	bpl.n	8002ede <HAL_RCC_GetSysClockFreq.part.0+0xea>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ea8:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <HAL_RCC_GetSysClockFreq.part.0+0x120>)
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb2:	ee07 3a90 	vmov	s15, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002eb6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002eba:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec0:	ee06 2a10 	vmov	s12, r2
 8002ec4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002ec8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ecc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ed0:	eec6 7a07 	vdiv.f32	s15, s12, s14
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ed4:	ee36 7aa5 	vadd.f32	s14, s13, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002edc:	e7bc      	b.n	8002e58 <HAL_RCC_GetSysClockFreq.part.0+0x64>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ee0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef0:	eddf 5a09 	vldr	s11, [pc, #36]	@ 8002f18 <HAL_RCC_GetSysClockFreq.part.0+0x124>
 8002ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef8:	eec5 6a87 	vdiv.f32	s13, s11, s14
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002efc:	ee77 7a86 	vadd.f32	s15, s15, s12
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f04:	e7a8      	b.n	8002e58 <HAL_RCC_GetSysClockFreq.part.0+0x64>
 8002f06:	bf00      	nop
 8002f08:	44020c00 	.word	0x44020c00
 8002f0c:	4af42400 	.word	0x4af42400
 8002f10:	4a742400 	.word	0x4a742400
 8002f14:	03d09000 	.word	0x03d09000
 8002f18:	4c742400 	.word	0x4c742400

08002f1c <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f000 8349 	beq.w	80035b4 <HAL_RCC_OscConfig+0x698>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f22:	4aa3      	ldr	r2, [pc, #652]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f24:	6803      	ldr	r3, [r0, #0]
{
 8002f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2a:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002f2c:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 8002f2e:	4604      	mov	r4, r0
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f30:	06d8      	lsls	r0, r3, #27
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f32:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002f36:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f3a:	d524      	bpl.n	8002f86 <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002f3c:	2d08      	cmp	r5, #8
 8002f3e:	f000 813e 	beq.w	80031be <HAL_RCC_OscConfig+0x2a2>
 8002f42:	2d18      	cmp	r5, #24
 8002f44:	f000 8138 	beq.w	80031b8 <HAL_RCC_OscConfig+0x29c>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f48:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002f4a:	4f99      	ldr	r7, [pc, #612]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80ef 	beq.w	8003130 <HAL_RCC_OscConfig+0x214>
        __HAL_RCC_CSI_ENABLE();
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f58:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002f5a:	f7fe ff37 	bl	8001dcc <HAL_GetTick>
 8002f5e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002f60:	e006      	b.n	8002f70 <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002f62:	f7fe ff33 	bl	8001dcc <HAL_GetTick>
 8002f66:	eba0 0008 	sub.w	r0, r0, r8
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	f200 8169 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	059a      	lsls	r2, r3, #22
 8002f74:	d5f5      	bpl.n	8002f62 <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	6a22      	ldr	r2, [r4, #32]
 8002f7a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f82:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	07d8      	lsls	r0, r3, #31
 8002f88:	d538      	bpl.n	8002ffc <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f8a:	2d10      	cmp	r5, #16
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002f8c:	6862      	ldr	r2, [r4, #4]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f8e:	f000 80e5 	beq.w	800315c <HAL_RCC_OscConfig+0x240>
 8002f92:	2d18      	cmp	r5, #24
 8002f94:	f000 80df 	beq.w	8003156 <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002f98:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002f9c:	d018      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xb4>
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	f000 8152 	beq.w	8003248 <HAL_RCC_OscConfig+0x32c>
 8002fa4:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8002fa8:	4b81      	ldr	r3, [pc, #516]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
 8002faa:	f000 823e 	beq.w	800342a <HAL_RCC_OscConfig+0x50e>
 8002fae:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f000 82b9 	beq.w	800352a <HAL_RCC_OscConfig+0x60e>
 8002fb8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002fcc:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002fce:	e004      	b.n	8002fda <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002fd0:	4a77      	ldr	r2, [pc, #476]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fda:	f7fe fef7 	bl	8001dcc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fde:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 80031b0 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 8002fe2:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002fe6:	f7fe fef1 	bl	8001dcc <HAL_GetTick>
 8002fea:	1bc0      	subs	r0, r0, r7
 8002fec:	2864      	cmp	r0, #100	@ 0x64
 8002fee:	f200 8128 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff6:	039a      	lsls	r2, r3, #14
 8002ff8:	d5f5      	bpl.n	8002fe6 <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	0798      	lsls	r0, r3, #30
 8002ffe:	d524      	bpl.n	800304a <HAL_RCC_OscConfig+0x12e>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003000:	68e3      	ldr	r3, [r4, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003002:	2d00      	cmp	r5, #0
 8003004:	f040 8153 	bne.w	80032ae <HAL_RCC_OscConfig+0x392>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8159 	beq.w	80032c0 <HAL_RCC_OscConfig+0x3a4>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800300e:	4b68      	ldr	r3, [pc, #416]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
 8003010:	6921      	ldr	r1, [r4, #16]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f002 0218 	and.w	r2, r2, #24
 8003018:	428a      	cmp	r2, r1
 800301a:	f040 8193 	bne.w	8003344 <HAL_RCC_OscConfig+0x428>
        tickstart = HAL_GetTick();
 800301e:	f7fe fed5 	bl	8001dcc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003022:	4f63      	ldr	r7, [pc, #396]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8003024:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	e005      	b.n	8003034 <HAL_RCC_OscConfig+0x118>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003028:	f7fe fed0 	bl	8001dcc <HAL_GetTick>
 800302c:	1b80      	subs	r0, r0, r6
 800302e:	2802      	cmp	r0, #2
 8003030:	f200 8107 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	079a      	lsls	r2, r3, #30
 8003038:	d5f6      	bpl.n	8003028 <HAL_RCC_OscConfig+0x10c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6962      	ldr	r2, [r4, #20]
 800303e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8003042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003046:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	0719      	lsls	r1, r3, #28
 800304c:	d519      	bpl.n	8003082 <HAL_RCC_OscConfig+0x166>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800304e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 8003050:	4e57      	ldr	r6, [pc, #348]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8113 	beq.w	800327e <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_LSI_ENABLE();
 8003058:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800305c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003060:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8003064:	f7fe feb2 	bl	8001dcc <HAL_GetTick>
 8003068:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800306a:	e005      	b.n	8003078 <HAL_RCC_OscConfig+0x15c>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800306c:	f7fe feae 	bl	8001dcc <HAL_GetTick>
 8003070:	1bc0      	subs	r0, r0, r7
 8003072:	2802      	cmp	r0, #2
 8003074:	f200 80e5 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003078:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800307c:	011a      	lsls	r2, r3, #4
 800307e:	d5f5      	bpl.n	800306c <HAL_RCC_OscConfig+0x150>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	0758      	lsls	r0, r3, #29
 8003084:	d536      	bpl.n	80030f4 <HAL_RCC_OscConfig+0x1d8>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003086:	4e4b      	ldr	r6, [pc, #300]	@ (80031b4 <HAL_RCC_OscConfig+0x298>)
 8003088:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800308a:	07d9      	lsls	r1, r3, #31
 800308c:	f140 80c9 	bpl.w	8003222 <HAL_RCC_OscConfig+0x306>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003090:	68a3      	ldr	r3, [r4, #8]
 8003092:	2b01      	cmp	r3, #1
 8003094:	f000 81d6 	beq.w	8003444 <HAL_RCC_OscConfig+0x528>
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 809f 	beq.w	80031dc <HAL_RCC_OscConfig+0x2c0>
 800309e:	2b05      	cmp	r3, #5
 80030a0:	f000 824f 	beq.w	8003542 <HAL_RCC_OscConfig+0x626>
 80030a4:	2b85      	cmp	r3, #133	@ 0x85
 80030a6:	4b42      	ldr	r3, [pc, #264]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
 80030a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030ac:	f000 826d 	beq.w	800358a <HAL_RCC_OscConfig+0x66e>
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80030b8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030bc:	f022 0204 	bic.w	r2, r2, #4
 80030c0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80030c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030cc:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80030d0:	f7fe fe7c 	bl	8001dcc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80030d8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030da:	4f35      	ldr	r7, [pc, #212]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
 80030dc:	e005      	b.n	80030ea <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fe75 	bl	8001dcc <HAL_GetTick>
 80030e2:	1b80      	subs	r0, r0, r6
 80030e4:	4540      	cmp	r0, r8
 80030e6:	f200 80ac 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80030ee:	079b      	lsls	r3, r3, #30
 80030f0:	d5f5      	bpl.n	80030de <HAL_RCC_OscConfig+0x1c2>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	0699      	lsls	r1, r3, #26
 80030f6:	d515      	bpl.n	8003124 <HAL_RCC_OscConfig+0x208>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 80030fa:	4e2d      	ldr	r6, [pc, #180]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8110 	beq.w	8003322 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSI48_ENABLE();
 8003102:	6833      	ldr	r3, [r6, #0]
 8003104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003108:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800310a:	f7fe fe5f 	bl	8001dcc <HAL_GetTick>
 800310e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003110:	e005      	b.n	800311e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003112:	f7fe fe5b 	bl	8001dcc <HAL_GetTick>
 8003116:	1bc0      	subs	r0, r0, r7
 8003118:	2802      	cmp	r0, #2
 800311a:	f200 8092 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800311e:	6833      	ldr	r3, [r6, #0]
 8003120:	049a      	lsls	r2, r3, #18
 8003122:	d5f6      	bpl.n	8003112 <HAL_RCC_OscConfig+0x1f6>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003124:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 80cc 	bne.w	80032c4 <HAL_RCC_OscConfig+0x3a8>
  return HAL_OK;
 800312c:	2000      	movs	r0, #0
 800312e:	e089      	b.n	8003244 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_CSI_DISABLE();
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003136:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003138:	f7fe fe48 	bl	8001dcc <HAL_GetTick>
 800313c:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800313e:	e005      	b.n	800314c <HAL_RCC_OscConfig+0x230>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003140:	f7fe fe44 	bl	8001dcc <HAL_GetTick>
 8003144:	eba0 0008 	sub.w	r0, r0, r8
 8003148:	2802      	cmp	r0, #2
 800314a:	d87a      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	059b      	lsls	r3, r3, #22
 8003150:	d4f6      	bmi.n	8003140 <HAL_RCC_OscConfig+0x224>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	e717      	b.n	8002f86 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003156:	2e03      	cmp	r6, #3
 8003158:	f47f af1e 	bne.w	8002f98 <HAL_RCC_OscConfig+0x7c>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800315c:	2a00      	cmp	r2, #0
 800315e:	f000 80af 	beq.w	80032c0 <HAL_RCC_OscConfig+0x3a4>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	0799      	lsls	r1, r3, #30
 8003164:	f57f af71 	bpl.w	800304a <HAL_RCC_OscConfig+0x12e>
 8003168:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800316a:	4e11      	ldr	r6, [pc, #68]	@ (80031b0 <HAL_RCC_OscConfig+0x294>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80c6 	beq.w	80032fe <HAL_RCC_OscConfig+0x3e2>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003172:	6833      	ldr	r3, [r6, #0]
 8003174:	6922      	ldr	r2, [r4, #16]
 8003176:	f023 0318 	bic.w	r3, r3, #24
 800317a:	4313      	orrs	r3, r2
 800317c:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 800317e:	6833      	ldr	r3, [r6, #0]
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003186:	f7fe fe21 	bl	8001dcc <HAL_GetTick>
 800318a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318c:	e004      	b.n	8003198 <HAL_RCC_OscConfig+0x27c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800318e:	f7fe fe1d 	bl	8001dcc <HAL_GetTick>
 8003192:	1bc0      	subs	r0, r0, r7
 8003194:	2802      	cmp	r0, #2
 8003196:	d854      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003198:	6833      	ldr	r3, [r6, #0]
 800319a:	079b      	lsls	r3, r3, #30
 800319c:	d5f7      	bpl.n	800318e <HAL_RCC_OscConfig+0x272>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800319e:	6933      	ldr	r3, [r6, #16]
 80031a0:	6962      	ldr	r2, [r4, #20]
 80031a2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80031a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031aa:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	e74c      	b.n	800304a <HAL_RCC_OscConfig+0x12e>
 80031b0:	44020c00 	.word	0x44020c00
 80031b4:	44020800 	.word	0x44020800
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80031b8:	2e02      	cmp	r6, #2
 80031ba:	f47f aec5 	bne.w	8002f48 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80031be:	69e2      	ldr	r2, [r4, #28]
 80031c0:	2a00      	cmp	r2, #0
 80031c2:	d07d      	beq.n	80032c0 <HAL_RCC_OscConfig+0x3a4>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80031c4:	49a8      	ldr	r1, [pc, #672]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 80031c6:	6a20      	ldr	r0, [r4, #32]
 80031c8:	698a      	ldr	r2, [r1, #24]
 80031ca:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 80031ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80031d2:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d4:	07d9      	lsls	r1, r3, #31
 80031d6:	d566      	bpl.n	80032a6 <HAL_RCC_OscConfig+0x38a>
 80031d8:	6862      	ldr	r2, [r4, #4]
 80031da:	e6da      	b.n	8002f92 <HAL_RCC_OscConfig+0x76>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80031dc:	4ea2      	ldr	r6, [pc, #648]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80031e2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
 80031ee:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
 80031fa:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8003206:	f7fe fde1 	bl	8001dcc <HAL_GetTick>
 800320a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320c:	e004      	b.n	8003218 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fddd 	bl	8001dcc <HAL_GetTick>
 8003212:	1bc0      	subs	r0, r0, r7
 8003214:	4540      	cmp	r0, r8
 8003216:	d814      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003218:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800321c:	0798      	lsls	r0, r3, #30
 800321e:	d4f6      	bmi.n	800320e <HAL_RCC_OscConfig+0x2f2>
 8003220:	e767      	b.n	80030f2 <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003222:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6273      	str	r3, [r6, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800322a:	f7fe fdcf 	bl	8001dcc <HAL_GetTick>
 800322e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003230:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003232:	07da      	lsls	r2, r3, #31
 8003234:	f53f af2c 	bmi.w	8003090 <HAL_RCC_OscConfig+0x174>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fe fdc8 	bl	8001dcc <HAL_GetTick>
 800323c:	1bc0      	subs	r0, r0, r7
 800323e:	2802      	cmp	r0, #2
 8003240:	d9f6      	bls.n	8003230 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8003242:	2003      	movs	r0, #3
}
 8003244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003248:	4f87      	ldr	r7, [pc, #540]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003260:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003262:	f7fe fdb3 	bl	8001dcc <HAL_GetTick>
 8003266:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003268:	e005      	b.n	8003276 <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800326a:	f7fe fdaf 	bl	8001dcc <HAL_GetTick>
 800326e:	eba0 0008 	sub.w	r0, r0, r8
 8003272:	2864      	cmp	r0, #100	@ 0x64
 8003274:	d8e5      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	039b      	lsls	r3, r3, #14
 800327a:	d4f6      	bmi.n	800326a <HAL_RCC_OscConfig+0x34e>
 800327c:	e6bd      	b.n	8002ffa <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 800327e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003282:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003286:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800328a:	f7fe fd9f 	bl	8001dcc <HAL_GetTick>
 800328e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003290:	e004      	b.n	800329c <HAL_RCC_OscConfig+0x380>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003292:	f7fe fd9b 	bl	8001dcc <HAL_GetTick>
 8003296:	1bc0      	subs	r0, r0, r7
 8003298:	2802      	cmp	r0, #2
 800329a:	d8d2      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800329c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	d4f6      	bmi.n	8003292 <HAL_RCC_OscConfig+0x376>
 80032a4:	e6ec      	b.n	8003080 <HAL_RCC_OscConfig+0x164>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	079a      	lsls	r2, r3, #30
 80032a8:	f57f aecf 	bpl.w	800304a <HAL_RCC_OscConfig+0x12e>
 80032ac:	68e3      	ldr	r3, [r4, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80032ae:	2d18      	cmp	r5, #24
 80032b0:	f47f af5b 	bne.w	800316a <HAL_RCC_OscConfig+0x24e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80032b4:	2e01      	cmp	r6, #1
 80032b6:	f47f af58 	bne.w	800316a <HAL_RCC_OscConfig+0x24e>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f aeaf 	bne.w	800301e <HAL_RCC_OscConfig+0x102>
    return HAL_ERROR;
 80032c0:	2001      	movs	r0, #1
 80032c2:	e7bf      	b.n	8003244 <HAL_RCC_OscConfig+0x328>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c4:	2d18      	cmp	r5, #24
 80032c6:	d069      	beq.n	800339c <HAL_RCC_OscConfig+0x480>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	f000 80c3 	beq.w	8003454 <HAL_RCC_OscConfig+0x538>
        __HAL_RCC_PLL1_DISABLE();
 80032ce:	4c66      	ldr	r4, [pc, #408]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032d8:	f7fe fd78 	bl	8001dcc <HAL_GetTick>
 80032dc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032de:	e004      	b.n	80032ea <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80032e0:	f7fe fd74 	bl	8001dcc <HAL_GetTick>
 80032e4:	1b40      	subs	r0, r0, r5
 80032e6:	2802      	cmp	r0, #2
 80032e8:	d8ab      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	0199      	lsls	r1, r3, #6
 80032ee:	d4f7      	bmi.n	80032e0 <HAL_RCC_OscConfig+0x3c4>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80032f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032f2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032fc:	e716      	b.n	800312c <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_DISABLE();
 80032fe:	6833      	ldr	r3, [r6, #0]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003306:	f7fe fd61 	bl	8001dcc <HAL_GetTick>
 800330a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800330c:	e004      	b.n	8003318 <HAL_RCC_OscConfig+0x3fc>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800330e:	f7fe fd5d 	bl	8001dcc <HAL_GetTick>
 8003312:	1bc0      	subs	r0, r0, r7
 8003314:	2802      	cmp	r0, #2
 8003316:	d894      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003318:	6833      	ldr	r3, [r6, #0]
 800331a:	0798      	lsls	r0, r3, #30
 800331c:	d4f7      	bmi.n	800330e <HAL_RCC_OscConfig+0x3f2>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	e693      	b.n	800304a <HAL_RCC_OscConfig+0x12e>
      __HAL_RCC_HSI48_DISABLE();
 8003322:	6833      	ldr	r3, [r6, #0]
 8003324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003328:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800332a:	f7fe fd4f 	bl	8001dcc <HAL_GetTick>
 800332e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003330:	e004      	b.n	800333c <HAL_RCC_OscConfig+0x420>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003332:	f7fe fd4b 	bl	8001dcc <HAL_GetTick>
 8003336:	1bc0      	subs	r0, r0, r7
 8003338:	2802      	cmp	r0, #2
 800333a:	d882      	bhi.n	8003242 <HAL_RCC_OscConfig+0x326>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800333c:	6833      	ldr	r3, [r6, #0]
 800333e:	049b      	lsls	r3, r3, #18
 8003340:	d4f7      	bmi.n	8003332 <HAL_RCC_OscConfig+0x416>
 8003342:	e6ef      	b.n	8003124 <HAL_RCC_OscConfig+0x208>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f022 0218 	bic.w	r2, r2, #24
 800334a:	430a      	orrs	r2, r1
 800334c:	601a      	str	r2, [r3, #0]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	f002 0218 	and.w	r2, r2, #24
 8003354:	2a08      	cmp	r2, #8
 8003356:	f000 8129 	beq.w	80035ac <HAL_RCC_OscConfig+0x690>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	f012 0f18 	tst.w	r2, #24
 8003360:	f040 8103 	bne.w	800356a <HAL_RCC_OscConfig+0x64e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	0691      	lsls	r1, r2, #26
 8003368:	f140 810d 	bpl.w	8003586 <HAL_RCC_OscConfig+0x66a>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4b3f      	ldr	r3, [pc, #252]	@ (800346c <HAL_RCC_OscConfig+0x550>)
 8003370:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003374:	40d3      	lsrs	r3, r2
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003376:	4a3c      	ldr	r2, [pc, #240]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 8003378:	483d      	ldr	r0, [pc, #244]	@ (8003470 <HAL_RCC_OscConfig+0x554>)
 800337a:	6a12      	ldr	r2, [r2, #32]
 800337c:	493d      	ldr	r1, [pc, #244]	@ (8003474 <HAL_RCC_OscConfig+0x558>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800337e:	f002 020f 	and.w	r2, r2, #15
 8003382:	5c82      	ldrb	r2, [r0, r2]
 8003384:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003388:	40d3      	lsrs	r3, r2
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800338a:	4a3b      	ldr	r2, [pc, #236]	@ (8003478 <HAL_RCC_OscConfig+0x55c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800338c:	600b      	str	r3, [r1, #0]
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800338e:	6810      	ldr	r0, [r2, #0]
 8003390:	f7fe fca6 	bl	8001ce0 <HAL_InitTick>
 8003394:	2800      	cmp	r0, #0
 8003396:	f43f ae42 	beq.w	800301e <HAL_RCC_OscConfig+0x102>
 800339a:	e791      	b.n	80032c0 <HAL_RCC_OscConfig+0x3a4>
      temp1_pllckcfg = RCC->PLL1CFGR;
 800339c:	4a32      	ldr	r2, [pc, #200]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339e:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 80033a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033a2:	6b55      	ldr	r5, [r2, #52]	@ 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a4:	d08c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x3a4>
 80033a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80033a8:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	4283      	cmp	r3, r0
 80033ae:	d187      	bne.n	80032c0 <HAL_RCC_OscConfig+0x3a4>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80033b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80033b2:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80033b6:	4299      	cmp	r1, r3
 80033b8:	d182      	bne.n	80032c0 <HAL_RCC_OscConfig+0x3a4>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80033ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033bc:	f3c5 0108 	ubfx	r1, r5, #0, #9
 80033c0:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80033c2:	4299      	cmp	r1, r3
 80033c4:	f47f af7c 	bne.w	80032c0 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80033ca:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80033d0:	4299      	cmp	r1, r3
 80033d2:	f47f af75 	bne.w	80032c0 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80033d8:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033de:	4299      	cmp	r1, r3
 80033e0:	f47f af6e 	bne.w	80032c0 <HAL_RCC_OscConfig+0x3a4>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80033e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80033e6:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80033ea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033ec:	429d      	cmp	r5, r3
 80033ee:	f47f af67 	bne.w	80032c0 <HAL_RCC_OscConfig+0x3a4>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80033f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80033f4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80033f6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80033fa:	4293      	cmp	r3, r2
 80033fc:	f43f ae96 	beq.w	800312c <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003400:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 8003402:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003404:	f023 0310 	bic.w	r3, r3, #16
 8003408:	6293      	str	r3, [r2, #40]	@ 0x28
        tickstart = HAL_GetTick();
 800340a:	f7fe fcdf 	bl	8001dcc <HAL_GetTick>
 800340e:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003410:	f7fe fcdc 	bl	8001dcc <HAL_GetTick>
 8003414:	42a8      	cmp	r0, r5
 8003416:	d0fb      	beq.n	8003410 <HAL_RCC_OscConfig+0x4f4>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003418:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800341a:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 800341c:	00d2      	lsls	r2, r2, #3
 800341e:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003420:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003422:	f042 0210 	orr.w	r2, r2, #16
 8003426:	629a      	str	r2, [r3, #40]	@ 0x28
 8003428:	e680      	b.n	800312c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003440:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003442:	e5ca      	b.n	8002fda <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003444:	4a08      	ldr	r2, [pc, #32]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 8003446:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003452:	e63d      	b.n	80030d0 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_PLL1_DISABLE();
 8003454:	4d04      	ldr	r5, [pc, #16]	@ (8003468 <HAL_RCC_OscConfig+0x54c>)
 8003456:	682b      	ldr	r3, [r5, #0]
 8003458:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800345c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800345e:	f7fe fcb5 	bl	8001dcc <HAL_GetTick>
 8003462:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003464:	e010      	b.n	8003488 <HAL_RCC_OscConfig+0x56c>
 8003466:	bf00      	nop
 8003468:	44020c00 	.word	0x44020c00
 800346c:	03d09000 	.word	0x03d09000
 8003470:	0800f98c 	.word	0x0800f98c
 8003474:	20000000 	.word	0x20000000
 8003478:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800347c:	f7fe fca6 	bl	8001dcc <HAL_GetTick>
 8003480:	1b80      	subs	r0, r0, r6
 8003482:	2802      	cmp	r0, #2
 8003484:	f63f aedd 	bhi.w	8003242 <HAL_RCC_OscConfig+0x326>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	019f      	lsls	r7, r3, #6
 800348c:	d4f6      	bmi.n	800347c <HAL_RCC_OscConfig+0x560>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800348e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003490:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003492:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003496:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003498:	f023 0303 	bic.w	r3, r3, #3
 800349c:	430b      	orrs	r3, r1
 800349e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034a2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80034a4:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	@ 0x38
 80034a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034aa:	3b01      	subs	r3, #1
 80034ac:	3a01      	subs	r2, #1
 80034ae:	025b      	lsls	r3, r3, #9
 80034b0:	0412      	lsls	r2, r2, #16
 80034b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80034b6:	3901      	subs	r1, #1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f3c1 0208 	ubfx	r2, r1, #0, #9
 80034c0:	4313      	orrs	r3, r2
 80034c2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80034c4:	3a01      	subs	r2, #1
 80034c6:	0612      	lsls	r2, r2, #24
 80034c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80034cc:	4313      	orrs	r3, r2
 80034ce:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80034d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80034d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	63ab      	str	r3, [r5, #56]	@ 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80034de:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034e0:	f043 0310 	orr.w	r3, r3, #16
 80034e4:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80034e6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80034ea:	f023 030c 	bic.w	r3, r3, #12
 80034ee:	4313      	orrs	r3, r2
 80034f0:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80034f2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80034f4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80034f6:	f023 0320 	bic.w	r3, r3, #32
 80034fa:	4313      	orrs	r3, r2
 80034fc:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034fe:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003504:	62ab      	str	r3, [r5, #40]	@ 0x28
        __HAL_RCC_PLL1_ENABLE();
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800350c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800350e:	f7fe fc5d 	bl	8001dcc <HAL_GetTick>
 8003512:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003514:	4d28      	ldr	r5, [pc, #160]	@ (80035b8 <HAL_RCC_OscConfig+0x69c>)
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	0198      	lsls	r0, r3, #6
 800351a:	f53f ae07 	bmi.w	800312c <HAL_RCC_OscConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800351e:	f7fe fc55 	bl	8001dcc <HAL_GetTick>
 8003522:	1b00      	subs	r0, r0, r4
 8003524:	2802      	cmp	r0, #2
 8003526:	d9f6      	bls.n	8003516 <HAL_RCC_OscConfig+0x5fa>
 8003528:	e68b      	b.n	8003242 <HAL_RCC_OscConfig+0x326>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800352a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800353e:	601a      	str	r2, [r3, #0]
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	e54b      	b.n	8002fda <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <HAL_RCC_OscConfig+0x69c>)
 8003544:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003548:	f042 0204 	orr.w	r2, r2, #4
 800354c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003550:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003558:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800355c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003568:	e5b2      	b.n	80030d0 <HAL_RCC_OscConfig+0x1b4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	f002 0218 	and.w	r2, r2, #24
 8003570:	2a10      	cmp	r2, #16
 8003572:	d01d      	beq.n	80035b0 <HAL_RCC_OscConfig+0x694>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0318 	and.w	r3, r3, #24
 800357a:	2b18      	cmp	r3, #24
 800357c:	d103      	bne.n	8003586 <HAL_RCC_OscConfig+0x66a>
 800357e:	f7ff fc39 	bl	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
 8003582:	4603      	mov	r3, r0
 8003584:	e6f7      	b.n	8003376 <HAL_RCC_OscConfig+0x45a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <HAL_RCC_OscConfig+0x6a0>)
 8003588:	e6f5      	b.n	8003376 <HAL_RCC_OscConfig+0x45a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800358a:	f042 0204 	orr.w	r2, r2, #4
 800358e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003592:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003596:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800359e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80035aa:	e591      	b.n	80030d0 <HAL_RCC_OscConfig+0x1b4>
    sysclockfreq = CSI_VALUE;
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <HAL_RCC_OscConfig+0x6a4>)
 80035ae:	e6e2      	b.n	8003376 <HAL_RCC_OscConfig+0x45a>
    sysclockfreq = HSE_VALUE;
 80035b0:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <HAL_RCC_OscConfig+0x6a8>)
 80035b2:	e6e0      	b.n	8003376 <HAL_RCC_OscConfig+0x45a>
    return HAL_ERROR;
 80035b4:	2001      	movs	r0, #1
}
 80035b6:	4770      	bx	lr
 80035b8:	44020c00 	.word	0x44020c00
 80035bc:	03d09000 	.word	0x03d09000
 80035c0:	003d0900 	.word	0x003d0900
 80035c4:	007a1200 	.word	0x007a1200

080035c8 <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	f000 8133 	beq.w	8003834 <HAL_RCC_ClockConfig+0x26c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ce:	4a9e      	ldr	r2, [pc, #632]	@ (8003848 <HAL_RCC_ClockConfig+0x280>)
{
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	4604      	mov	r4, r0
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	428b      	cmp	r3, r1
 80035de:	460d      	mov	r5, r1
 80035e0:	d20c      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	f023 030f 	bic.w	r3, r3, #15
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ec:	6813      	ldr	r3, [r2, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	428b      	cmp	r3, r1
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80035f6:	2001      	movs	r0, #1
}
 80035f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	06d9      	lsls	r1, r3, #27
 8003600:	d50d      	bpl.n	800361e <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003602:	4992      	ldr	r1, [pc, #584]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003604:	6960      	ldr	r0, [r4, #20]
 8003606:	6a0a      	ldr	r2, [r1, #32]
 8003608:	0a12      	lsrs	r2, r2, #8
 800360a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800360e:	4290      	cmp	r0, r2
 8003610:	d905      	bls.n	800361e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003612:	6a0a      	ldr	r2, [r1, #32]
 8003614:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003618:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800361c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	071a      	lsls	r2, r3, #28
 8003620:	d50d      	bpl.n	800363e <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003622:	498a      	ldr	r1, [pc, #552]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003624:	6920      	ldr	r0, [r4, #16]
 8003626:	6a0a      	ldr	r2, [r1, #32]
 8003628:	0912      	lsrs	r2, r2, #4
 800362a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800362e:	4290      	cmp	r0, r2
 8003630:	d905      	bls.n	800363e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003632:	6a0a      	ldr	r2, [r1, #32]
 8003634:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003638:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800363c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363e:	075f      	lsls	r7, r3, #29
 8003640:	d50b      	bpl.n	800365a <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003642:	4982      	ldr	r1, [pc, #520]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003644:	68e0      	ldr	r0, [r4, #12]
 8003646:	6a0a      	ldr	r2, [r1, #32]
 8003648:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800364c:	4290      	cmp	r0, r2
 800364e:	d904      	bls.n	800365a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003650:	6a0a      	ldr	r2, [r1, #32]
 8003652:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003656:	4302      	orrs	r2, r0
 8003658:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365a:	079e      	lsls	r6, r3, #30
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365c:	f003 0201 	and.w	r2, r3, #1
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	f140 80a5 	bpl.w	80037ae <HAL_RCC_ClockConfig+0x1e6>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003664:	4e79      	ldr	r6, [pc, #484]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003666:	68a0      	ldr	r0, [r4, #8]
 8003668:	6a31      	ldr	r1, [r6, #32]
 800366a:	f001 010f 	and.w	r1, r1, #15
 800366e:	4288      	cmp	r0, r1
 8003670:	d904      	bls.n	800367c <HAL_RCC_ClockConfig+0xb4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003672:	6a31      	ldr	r1, [r6, #32]
 8003674:	f021 010f 	bic.w	r1, r1, #15
 8003678:	4301      	orrs	r1, r0
 800367a:	6231      	str	r1, [r6, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367c:	b382      	cbz	r2, 80036e0 <HAL_RCC_ClockConfig+0x118>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367e:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003680:	4b72      	ldr	r3, [pc, #456]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003682:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003684:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	f000 809a 	beq.w	80037be <HAL_RCC_ClockConfig+0x1f6>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	2a02      	cmp	r2, #2
 800368c:	f000 80ce 	beq.w	800382c <HAL_RCC_ClockConfig+0x264>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003690:	2a01      	cmp	r2, #1
 8003692:	f000 80e7 	beq.w	8003864 <HAL_RCC_ClockConfig+0x29c>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003696:	079f      	lsls	r7, r3, #30
 8003698:	d5ad      	bpl.n	80035f6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800369a:	4e6c      	ldr	r6, [pc, #432]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80036a0:	69f3      	ldr	r3, [r6, #28]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 80036aa:	f7fe fb8f 	bl	8001dcc <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ae:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80036b0:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	f000 808c 	beq.w	80037d0 <HAL_RCC_ClockConfig+0x208>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	f000 8094 	beq.w	80037e6 <HAL_RCC_ClockConfig+0x21e>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x108>
 80036c2:	e09b      	b.n	80037fc <HAL_RCC_ClockConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fe fb82 	bl	8001dcc <HAL_GetTick>
 80036c8:	1bc0      	subs	r0, r0, r7
 80036ca:	4540      	cmp	r0, r8
 80036cc:	f200 80b4 	bhi.w	8003838 <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d0:	69f3      	ldr	r3, [r6, #28]
 80036d2:	f013 0f18 	tst.w	r3, #24
 80036d6:	d1f5      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xfc>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	079e      	lsls	r6, r3, #30
 80036dc:	d507      	bpl.n	80036ee <HAL_RCC_ClockConfig+0x126>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80036de:	68a0      	ldr	r0, [r4, #8]
 80036e0:	495a      	ldr	r1, [pc, #360]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 80036e2:	6a0a      	ldr	r2, [r1, #32]
 80036e4:	f002 020f 	and.w	r2, r2, #15
 80036e8:	4282      	cmp	r2, r0
 80036ea:	f200 8099 	bhi.w	8003820 <HAL_RCC_ClockConfig+0x258>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ee:	4956      	ldr	r1, [pc, #344]	@ (8003848 <HAL_RCC_ClockConfig+0x280>)
 80036f0:	680a      	ldr	r2, [r1, #0]
 80036f2:	f002 020f 	and.w	r2, r2, #15
 80036f6:	42aa      	cmp	r2, r5
 80036f8:	d90a      	bls.n	8003710 <HAL_RCC_ClockConfig+0x148>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	680a      	ldr	r2, [r1, #0]
 80036fc:	f022 020f 	bic.w	r2, r2, #15
 8003700:	432a      	orrs	r2, r5
 8003702:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	680a      	ldr	r2, [r1, #0]
 8003706:	f002 020f 	and.w	r2, r2, #15
 800370a:	42aa      	cmp	r2, r5
 800370c:	f47f af73 	bne.w	80035f6 <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	075d      	lsls	r5, r3, #29
 8003712:	d50b      	bpl.n	800372c <HAL_RCC_ClockConfig+0x164>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003716:	68e0      	ldr	r0, [r4, #12]
 8003718:	6a0a      	ldr	r2, [r1, #32]
 800371a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800371e:	4290      	cmp	r0, r2
 8003720:	d204      	bcs.n	800372c <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003722:	6a0a      	ldr	r2, [r1, #32]
 8003724:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003728:	4302      	orrs	r2, r0
 800372a:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	0718      	lsls	r0, r3, #28
 800372e:	d50d      	bpl.n	800374c <HAL_RCC_ClockConfig+0x184>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003730:	4946      	ldr	r1, [pc, #280]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003732:	6920      	ldr	r0, [r4, #16]
 8003734:	6a0a      	ldr	r2, [r1, #32]
 8003736:	0912      	lsrs	r2, r2, #4
 8003738:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800373c:	4290      	cmp	r0, r2
 800373e:	d205      	bcs.n	800374c <HAL_RCC_ClockConfig+0x184>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003740:	6a0a      	ldr	r2, [r1, #32]
 8003742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003746:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800374a:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800374c:	06d9      	lsls	r1, r3, #27
 800374e:	d50d      	bpl.n	800376c <HAL_RCC_ClockConfig+0x1a4>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003750:	4a3e      	ldr	r2, [pc, #248]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003752:	6961      	ldr	r1, [r4, #20]
 8003754:	6a13      	ldr	r3, [r2, #32]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375c:	4299      	cmp	r1, r3
 800375e:	d205      	bcs.n	800376c <HAL_RCC_ClockConfig+0x1a4>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003760:	6a13      	ldr	r3, [r2, #32]
 8003762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003766:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800376a:	6213      	str	r3, [r2, #32]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800376c:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	f002 0218 	and.w	r2, r2, #24
 8003774:	2a08      	cmp	r2, #8
 8003776:	d061      	beq.n	800383c <HAL_RCC_ClockConfig+0x274>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	f012 0f18 	tst.w	r2, #24
 800377e:	d143      	bne.n	8003808 <HAL_RCC_ClockConfig+0x240>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	0692      	lsls	r2, r2, #26
 8003784:	d54a      	bpl.n	800381c <HAL_RCC_ClockConfig+0x254>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_RCC_ClockConfig+0x288>)
 800378a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800378e:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003790:	4a2e      	ldr	r2, [pc, #184]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
 8003792:	4830      	ldr	r0, [pc, #192]	@ (8003854 <HAL_RCC_ClockConfig+0x28c>)
 8003794:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 8003796:	4930      	ldr	r1, [pc, #192]	@ (8003858 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003798:	f002 020f 	and.w	r2, r2, #15
 800379c:	5c80      	ldrb	r0, [r0, r2]
 800379e:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <HAL_RCC_ClockConfig+0x294>)
 80037a0:	40c3      	lsrs	r3, r0
}
 80037a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80037a6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80037a8:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80037aa:	f7fe ba99 	b.w	8001ce0 <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	d09d      	beq.n	80036ee <HAL_RCC_ClockConfig+0x126>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_RCC_ClockConfig+0x284>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b6:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037b8:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ba:	f47f af66 	bne.w	800368a <HAL_RCC_ClockConfig+0xc2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037be:	0198      	lsls	r0, r3, #6
 80037c0:	f53f af6b 	bmi.w	800369a <HAL_RCC_ClockConfig+0xd2>
 80037c4:	e717      	b.n	80035f6 <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037c6:	f7fe fb01 	bl	8001dcc <HAL_GetTick>
 80037ca:	1bc3      	subs	r3, r0, r7
 80037cc:	4543      	cmp	r3, r8
 80037ce:	d833      	bhi.n	8003838 <HAL_RCC_ClockConfig+0x270>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d0:	69f3      	ldr	r3, [r6, #28]
 80037d2:	f003 0318 	and.w	r3, r3, #24
 80037d6:	2b18      	cmp	r3, #24
 80037d8:	d1f5      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1fe>
 80037da:	e77d      	b.n	80036d8 <HAL_RCC_ClockConfig+0x110>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe faf6 	bl	8001dcc <HAL_GetTick>
 80037e0:	1bc0      	subs	r0, r0, r7
 80037e2:	4540      	cmp	r0, r8
 80037e4:	d828      	bhi.n	8003838 <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e6:	69f3      	ldr	r3, [r6, #28]
 80037e8:	f003 0318 	and.w	r3, r3, #24
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d1f5      	bne.n	80037dc <HAL_RCC_ClockConfig+0x214>
 80037f0:	e772      	b.n	80036d8 <HAL_RCC_ClockConfig+0x110>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037f2:	f7fe faeb 	bl	8001dcc <HAL_GetTick>
 80037f6:	1bc0      	subs	r0, r0, r7
 80037f8:	4540      	cmp	r0, r8
 80037fa:	d81d      	bhi.n	8003838 <HAL_RCC_ClockConfig+0x270>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80037fc:	69f3      	ldr	r3, [r6, #28]
 80037fe:	f003 0318 	and.w	r3, r3, #24
 8003802:	2b08      	cmp	r3, #8
 8003804:	d1f5      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x22a>
 8003806:	e767      	b.n	80036d8 <HAL_RCC_ClockConfig+0x110>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	f002 0218 	and.w	r2, r2, #24
 800380e:	2a10      	cmp	r2, #16
 8003810:	d02c      	beq.n	800386c <HAL_RCC_ClockConfig+0x2a4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 0318 	and.w	r3, r3, #24
 8003818:	2b18      	cmp	r3, #24
 800381a:	d011      	beq.n	8003840 <HAL_RCC_ClockConfig+0x278>
      sysclockfreq = (uint32_t) HSI_VALUE;
 800381c:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <HAL_RCC_ClockConfig+0x288>)
 800381e:	e7b7      	b.n	8003790 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003820:	6a0a      	ldr	r2, [r1, #32]
 8003822:	f022 020f 	bic.w	r2, r2, #15
 8003826:	4302      	orrs	r2, r0
 8003828:	620a      	str	r2, [r1, #32]
 800382a:	e760      	b.n	80036ee <HAL_RCC_ClockConfig+0x126>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382c:	0399      	lsls	r1, r3, #14
 800382e:	f53f af34 	bmi.w	800369a <HAL_RCC_ClockConfig+0xd2>
 8003832:	e6e0      	b.n	80035f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003834:	2001      	movs	r0, #1
}
 8003836:	4770      	bx	lr
          return HAL_TIMEOUT;
 8003838:	2003      	movs	r0, #3
 800383a:	e6dd      	b.n	80035f8 <HAL_RCC_ClockConfig+0x30>
    sysclockfreq = CSI_VALUE;
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <HAL_RCC_ClockConfig+0x298>)
 800383e:	e7a7      	b.n	8003790 <HAL_RCC_ClockConfig+0x1c8>
 8003840:	f7ff fad8 	bl	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
 8003844:	4603      	mov	r3, r0
 8003846:	e7a3      	b.n	8003790 <HAL_RCC_ClockConfig+0x1c8>
 8003848:	40022000 	.word	0x40022000
 800384c:	44020c00 	.word	0x44020c00
 8003850:	03d09000 	.word	0x03d09000
 8003854:	0800f98c 	.word	0x0800f98c
 8003858:	20000008 	.word	0x20000008
 800385c:	20000000 	.word	0x20000000
 8003860:	003d0900 	.word	0x003d0900
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003864:	059b      	lsls	r3, r3, #22
 8003866:	f53f af18 	bmi.w	800369a <HAL_RCC_ClockConfig+0xd2>
 800386a:	e6c4      	b.n	80035f6 <HAL_RCC_ClockConfig+0x2e>
    sysclockfreq = HSE_VALUE;
 800386c:	4b00      	ldr	r3, [pc, #0]	@ (8003870 <HAL_RCC_ClockConfig+0x2a8>)
 800386e:	e78f      	b.n	8003790 <HAL_RCC_ClockConfig+0x1c8>
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	f002 0218 	and.w	r2, r2, #24
 800387c:	2a08      	cmp	r2, #8
 800387e:	d018      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x3e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	f012 0f18 	tst.w	r2, #24
 8003886:	d108      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	0692      	lsls	r2, r2, #26
 800388c:	d50f      	bpl.n	80038ae <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	480c      	ldr	r0, [pc, #48]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x50>)
 8003892:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003896:	40d8      	lsrs	r0, r3
 8003898:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	f002 0218 	and.w	r2, r2, #24
 80038a0:	2a10      	cmp	r2, #16
 80038a2:	d00a      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f003 0318 	and.w	r3, r3, #24
 80038aa:	2b18      	cmp	r3, #24
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80038ae:	4805      	ldr	r0, [pc, #20]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x50>)
}
 80038b0:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80038b2:	4805      	ldr	r0, [pc, #20]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x54>)
 80038b4:	4770      	bx	lr
 80038b6:	f7ff ba9d 	b.w	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
    sysclockfreq = HSE_VALUE;
 80038ba:	4804      	ldr	r0, [pc, #16]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x58>)
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	44020c00 	.word	0x44020c00
 80038c4:	03d09000 	.word	0x03d09000
 80038c8:	003d0900 	.word	0x003d0900
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
{
 80038d0:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80038d2:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x64>)
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	f002 0218 	and.w	r2, r2, #24
 80038da:	2a08      	cmp	r2, #8
 80038dc:	d023      	beq.n	8003926 <HAL_RCC_GetHCLKFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	f012 0f18 	tst.w	r2, #24
 80038e4:	d113      	bne.n	800390e <HAL_RCC_GetHCLKFreq+0x3e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	0692      	lsls	r2, r2, #26
 80038ea:	d51a      	bpl.n	8003922 <HAL_RCC_GetHCLKFreq+0x52>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4812      	ldr	r0, [pc, #72]	@ (8003938 <HAL_RCC_GetHCLKFreq+0x68>)
 80038f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80038f4:	40d8      	lsrs	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x64>)
 80038f8:	4910      	ldr	r1, [pc, #64]	@ (800393c <HAL_RCC_GetHCLKFreq+0x6c>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4a10      	ldr	r2, [pc, #64]	@ (8003940 <HAL_RCC_GetHCLKFreq+0x70>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003908:	40d8      	lsrs	r0, r3
 800390a:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 800390c:	bd08      	pop	{r3, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	f002 0218 	and.w	r2, r2, #24
 8003914:	2a10      	cmp	r2, #16
 8003916:	d00b      	beq.n	8003930 <HAL_RCC_GetHCLKFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0318 	and.w	r3, r3, #24
 800391e:	2b18      	cmp	r3, #24
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetHCLKFreq+0x5a>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003922:	4805      	ldr	r0, [pc, #20]	@ (8003938 <HAL_RCC_GetHCLKFreq+0x68>)
 8003924:	e7e7      	b.n	80038f6 <HAL_RCC_GetHCLKFreq+0x26>
    sysclockfreq = CSI_VALUE;
 8003926:	4807      	ldr	r0, [pc, #28]	@ (8003944 <HAL_RCC_GetHCLKFreq+0x74>)
 8003928:	e7e5      	b.n	80038f6 <HAL_RCC_GetHCLKFreq+0x26>
 800392a:	f7ff fa63 	bl	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
 800392e:	e7e2      	b.n	80038f6 <HAL_RCC_GetHCLKFreq+0x26>
    sysclockfreq = HSE_VALUE;
 8003930:	4805      	ldr	r0, [pc, #20]	@ (8003948 <HAL_RCC_GetHCLKFreq+0x78>)
 8003932:	e7e0      	b.n	80038f6 <HAL_RCC_GetHCLKFreq+0x26>
 8003934:	44020c00 	.word	0x44020c00
 8003938:	03d09000 	.word	0x03d09000
 800393c:	0800f98c 	.word	0x0800f98c
 8003940:	20000000 	.word	0x20000000
 8003944:	003d0900 	.word	0x003d0900
 8003948:	007a1200 	.word	0x007a1200

0800394c <HAL_RCC_GetPCLK1Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x78>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394e:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	f002 0218 	and.w	r2, r2, #24
 8003956:	2a08      	cmp	r2, #8
 8003958:	d02c      	beq.n	80039b4 <HAL_RCC_GetPCLK1Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	f012 0f18 	tst.w	r2, #24
 8003960:	d11c      	bne.n	800399c <HAL_RCC_GetPCLK1Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	0692      	lsls	r2, r2, #26
 8003966:	d523      	bpl.n	80039b0 <HAL_RCC_GetPCLK1Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800396c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003970:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003972:	4914      	ldr	r1, [pc, #80]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x78>)
 8003974:	4c15      	ldr	r4, [pc, #84]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x80>)
 8003976:	6a0a      	ldr	r2, [r1, #32]
 8003978:	4815      	ldr	r0, [pc, #84]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800397a:	f002 020f 	and.w	r2, r2, #15
 800397e:	5ca2      	ldrb	r2, [r4, r2]
 8003980:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003984:	40d3      	lsrs	r3, r2
 8003986:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003988:	6a0a      	ldr	r2, [r1, #32]
 800398a:	4912      	ldr	r1, [pc, #72]	@ (80039d4 <HAL_RCC_GetPCLK1Freq+0x88>)
 800398c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003990:	5c88      	ldrb	r0, [r1, r2]
 8003992:	f000 001f 	and.w	r0, r0, #31
}
 8003996:	fa23 f000 	lsr.w	r0, r3, r0
 800399a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	f002 0218 	and.w	r2, r2, #24
 80039a2:	2a10      	cmp	r2, #16
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_GetPCLK1Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 0318 	and.w	r3, r3, #24
 80039ac:	2b18      	cmp	r3, #24
 80039ae:	d003      	beq.n	80039b8 <HAL_RCC_GetPCLK1Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80039b2:	e7de      	b.n	8003972 <HAL_RCC_GetPCLK1Freq+0x26>
    sysclockfreq = CSI_VALUE;
 80039b4:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80039b6:	e7dc      	b.n	8003972 <HAL_RCC_GetPCLK1Freq+0x26>
 80039b8:	f7ff fa1c 	bl	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
 80039bc:	4603      	mov	r3, r0
 80039be:	e7d8      	b.n	8003972 <HAL_RCC_GetPCLK1Freq+0x26>
    sysclockfreq = HSE_VALUE;
 80039c0:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x90>)
 80039c2:	e7d6      	b.n	8003972 <HAL_RCC_GetPCLK1Freq+0x26>
 80039c4:	44020c00 	.word	0x44020c00
 80039c8:	03d09000 	.word	0x03d09000
 80039cc:	0800f98c 	.word	0x0800f98c
 80039d0:	20000000 	.word	0x20000000
 80039d4:	0800f984 	.word	0x0800f984
 80039d8:	003d0900 	.word	0x003d0900
 80039dc:	007a1200 	.word	0x007a1200

080039e0 <HAL_RCC_GetPCLK2Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80039e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x78>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e2:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	f002 0218 	and.w	r2, r2, #24
 80039ea:	2a08      	cmp	r2, #8
 80039ec:	d02c      	beq.n	8003a48 <HAL_RCC_GetPCLK2Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	f012 0f18 	tst.w	r2, #24
 80039f4:	d11c      	bne.n	8003a30 <HAL_RCC_GetPCLK2Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	0692      	lsls	r2, r2, #26
 80039fa:	d523      	bpl.n	8003a44 <HAL_RCC_GetPCLK2Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003a00:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a04:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a06:	4914      	ldr	r1, [pc, #80]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x78>)
 8003a08:	4c15      	ldr	r4, [pc, #84]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x80>)
 8003a0a:	6a0a      	ldr	r2, [r1, #32]
 8003a0c:	4815      	ldr	r0, [pc, #84]	@ (8003a64 <HAL_RCC_GetPCLK2Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003a0e:	f002 020f 	and.w	r2, r2, #15
 8003a12:	5ca2      	ldrb	r2, [r4, r2]
 8003a14:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a18:	40d3      	lsrs	r3, r2
 8003a1a:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003a1c:	6a0a      	ldr	r2, [r1, #32]
 8003a1e:	4912      	ldr	r1, [pc, #72]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x88>)
 8003a20:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003a24:	5c88      	ldrb	r0, [r1, r2]
 8003a26:	f000 001f 	and.w	r0, r0, #31
}
 8003a2a:	fa23 f000 	lsr.w	r0, r3, r0
 8003a2e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	f002 0218 	and.w	r2, r2, #24
 8003a36:	2a10      	cmp	r2, #16
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_GetPCLK2Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 0318 	and.w	r3, r3, #24
 8003a40:	2b18      	cmp	r3, #24
 8003a42:	d003      	beq.n	8003a4c <HAL_RCC_GetPCLK2Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003a46:	e7de      	b.n	8003a06 <HAL_RCC_GetPCLK2Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003a48:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8003a4a:	e7dc      	b.n	8003a06 <HAL_RCC_GetPCLK2Freq+0x26>
 8003a4c:	f7ff f9d2 	bl	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
 8003a50:	4603      	mov	r3, r0
 8003a52:	e7d8      	b.n	8003a06 <HAL_RCC_GetPCLK2Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_RCC_GetPCLK2Freq+0x90>)
 8003a56:	e7d6      	b.n	8003a06 <HAL_RCC_GetPCLK2Freq+0x26>
 8003a58:	44020c00 	.word	0x44020c00
 8003a5c:	03d09000 	.word	0x03d09000
 8003a60:	0800f98c 	.word	0x0800f98c
 8003a64:	20000000 	.word	0x20000000
 8003a68:	0800f984 	.word	0x0800f984
 8003a6c:	003d0900 	.word	0x003d0900
 8003a70:	007a1200 	.word	0x007a1200

08003a74 <HAL_RCC_GetPCLK3Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_RCC_GetPCLK3Freq+0x78>)
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003a76:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	f002 0218 	and.w	r2, r2, #24
 8003a7e:	2a08      	cmp	r2, #8
 8003a80:	d02c      	beq.n	8003adc <HAL_RCC_GetPCLK3Freq+0x68>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	f012 0f18 	tst.w	r2, #24
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_GetPCLK3Freq+0x50>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	0692      	lsls	r2, r2, #26
 8003a8e:	d523      	bpl.n	8003ad8 <HAL_RCC_GetPCLK3Freq+0x64>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4b17      	ldr	r3, [pc, #92]	@ (8003af0 <HAL_RCC_GetPCLK3Freq+0x7c>)
 8003a94:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a98:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a9a:	4914      	ldr	r1, [pc, #80]	@ (8003aec <HAL_RCC_GetPCLK3Freq+0x78>)
 8003a9c:	4c15      	ldr	r4, [pc, #84]	@ (8003af4 <HAL_RCC_GetPCLK3Freq+0x80>)
 8003a9e:	6a0a      	ldr	r2, [r1, #32]
 8003aa0:	4815      	ldr	r0, [pc, #84]	@ (8003af8 <HAL_RCC_GetPCLK3Freq+0x84>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003aa2:	f002 020f 	and.w	r2, r2, #15
 8003aa6:	5ca2      	ldrb	r2, [r4, r2]
 8003aa8:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003aac:	40d3      	lsrs	r3, r2
 8003aae:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003ab0:	6a0a      	ldr	r2, [r1, #32]
 8003ab2:	4912      	ldr	r1, [pc, #72]	@ (8003afc <HAL_RCC_GetPCLK3Freq+0x88>)
 8003ab4:	f3c2 3202 	ubfx	r2, r2, #12, #3
 8003ab8:	5c88      	ldrb	r0, [r1, r2]
 8003aba:	f000 001f 	and.w	r0, r0, #31
}
 8003abe:	fa23 f000 	lsr.w	r0, r3, r0
 8003ac2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	f002 0218 	and.w	r2, r2, #24
 8003aca:	2a10      	cmp	r2, #16
 8003acc:	d00c      	beq.n	8003ae8 <HAL_RCC_GetPCLK3Freq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 0318 	and.w	r3, r3, #24
 8003ad4:	2b18      	cmp	r3, #24
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCC_GetPCLK3Freq+0x6c>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_GetPCLK3Freq+0x7c>)
 8003ada:	e7de      	b.n	8003a9a <HAL_RCC_GetPCLK3Freq+0x26>
    sysclockfreq = CSI_VALUE;
 8003adc:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <HAL_RCC_GetPCLK3Freq+0x8c>)
 8003ade:	e7dc      	b.n	8003a9a <HAL_RCC_GetPCLK3Freq+0x26>
 8003ae0:	f7ff f988 	bl	8002df4 <HAL_RCC_GetSysClockFreq.part.0>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	e7d8      	b.n	8003a9a <HAL_RCC_GetPCLK3Freq+0x26>
    sysclockfreq = HSE_VALUE;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_RCC_GetPCLK3Freq+0x90>)
 8003aea:	e7d6      	b.n	8003a9a <HAL_RCC_GetPCLK3Freq+0x26>
 8003aec:	44020c00 	.word	0x44020c00
 8003af0:	03d09000 	.word	0x03d09000
 8003af4:	0800f98c 	.word	0x0800f98c
 8003af8:	20000000 	.word	0x20000000
 8003afc:	0800f984 	.word	0x0800f984
 8003b00:	003d0900 	.word	0x003d0900
 8003b04:	007a1200 	.word	0x007a1200

08003b08 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003b08:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003b0a:	4c33      	ldr	r4, [pc, #204]	@ (8003bd8 <RCCEx_PLL2_Config+0xd0>)
{
 8003b0c:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b14:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b16:	f7fe f959 	bl	8001dcc <HAL_GetTick>
 8003b1a:	4605      	mov	r5, r0

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b1c:	e004      	b.n	8003b28 <RCCEx_PLL2_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b1e:	f7fe f955 	bl	8001dcc <HAL_GetTick>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	2802      	cmp	r0, #2
 8003b26:	d855      	bhi.n	8003bd4 <RCCEx_PLL2_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	011a      	lsls	r2, r3, #4
 8003b2c:	d4f7      	bmi.n	8003b1e <RCCEx_PLL2_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003b2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b30:	6831      	ldr	r1, [r6, #0]
 8003b32:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b36:	6872      	ldr	r2, [r6, #4]
 8003b38:	f023 0303 	bic.w	r3, r3, #3
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b44:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	0412      	lsls	r2, r2, #16
 8003b50:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	68b1      	ldr	r1, [r6, #8]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	6972      	ldr	r2, [r6, #20]
 8003b5c:	3901      	subs	r1, #1
 8003b5e:	3a01      	subs	r2, #1
 8003b60:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003b64:	0612      	lsls	r2, r2, #24
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	63e3      	str	r3, [r4, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003b70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b72:	69b2      	ldr	r2, [r6, #24]
 8003b74:	f023 030c 	bic.w	r3, r3, #12
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003b7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b7e:	69f2      	ldr	r2, [r6, #28]
 8003b80:	f023 0320 	bic.w	r3, r3, #32
 8003b84:	4313      	orrs	r3, r2
 8003b86:	62e3      	str	r3, [r4, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003b88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b8a:	6a72      	ldr	r2, [r6, #36]	@ 0x24

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b8c:	4d12      	ldr	r5, [pc, #72]	@ (8003bd8 <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003b92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003b94:	f023 0310 	bic.w	r3, r3, #16
 8003b98:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b9c:	6a32      	ldr	r2, [r6, #32]
 8003b9e:	f36f 03cf 	bfc	r3, #3, #13
 8003ba2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ba6:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003ba8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bb6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003bb8:	f7fe f908 	bl	8001dcc <HAL_GetTick>
 8003bbc:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bbe:	e004      	b.n	8003bca <RCCEx_PLL2_Config+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bc0:	f7fe f904 	bl	8001dcc <HAL_GetTick>
 8003bc4:	1b00      	subs	r0, r0, r4
 8003bc6:	2802      	cmp	r0, #2
 8003bc8:	d804      	bhi.n	8003bd4 <RCCEx_PLL2_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bca:	682b      	ldr	r3, [r5, #0]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	d5f7      	bpl.n	8003bc0 <RCCEx_PLL2_Config+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003bd0:	2000      	movs	r0, #0

}
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003bd4:	2003      	movs	r0, #3
}
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	44020c00 	.word	0x44020c00

08003bdc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8003bde:	4c33      	ldr	r4, [pc, #204]	@ (8003cac <RCCEx_PLL3_Config+0xd0>)
{
 8003be0:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bea:	f7fe f8ef 	bl	8001dcc <HAL_GetTick>
 8003bee:	4605      	mov	r5, r0

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bf0:	e004      	b.n	8003bfc <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003bf2:	f7fe f8eb 	bl	8001dcc <HAL_GetTick>
 8003bf6:	1b40      	subs	r0, r0, r5
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	d855      	bhi.n	8003ca8 <RCCEx_PLL3_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	d4f7      	bmi.n	8003bf2 <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c04:	6831      	ldr	r1, [r6, #0]
 8003c06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c0a:	6872      	ldr	r2, [r6, #4]
 8003c0c:	f023 0303 	bic.w	r3, r3, #3
 8003c10:	430b      	orrs	r3, r1
 8003c12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c16:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c18:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	025b      	lsls	r3, r3, #9
 8003c22:	0412      	lsls	r2, r2, #16
 8003c24:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	68b1      	ldr	r1, [r6, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	6972      	ldr	r2, [r6, #20]
 8003c30:	3901      	subs	r1, #1
 8003c32:	3a01      	subs	r2, #1
 8003c34:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003c38:	0612      	lsls	r2, r2, #24
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003c40:	4313      	orrs	r3, r2
 8003c42:	6463      	str	r3, [r4, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c46:	69b2      	ldr	r2, [r6, #24]
 8003c48:	f023 030c 	bic.w	r3, r3, #12
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8003c50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c52:	69f2      	ldr	r2, [r6, #28]
 8003c54:	f023 0320 	bic.w	r3, r3, #32
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003c5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c5e:	6a72      	ldr	r2, [r6, #36]	@ 0x24

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c60:	4d12      	ldr	r5, [pc, #72]	@ (8003cac <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003c62:	4313      	orrs	r3, r2
 8003c64:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8003c66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c68:	f023 0310 	bic.w	r3, r3, #16
 8003c6c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8003c6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003c70:	6a32      	ldr	r2, [r6, #32]
 8003c72:	f36f 03cf 	bfc	r3, #3, #13
 8003c76:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c7a:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8003c7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c7e:	f043 0310 	orr.w	r3, r3, #16
 8003c82:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003c8c:	f7fe f89e 	bl	8001dcc <HAL_GetTick>
 8003c90:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c92:	e004      	b.n	8003c9e <RCCEx_PLL3_Config+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c94:	f7fe f89a 	bl	8001dcc <HAL_GetTick>
 8003c98:	1b00      	subs	r0, r0, r4
 8003c9a:	2802      	cmp	r0, #2
 8003c9c:	d804      	bhi.n	8003ca8 <RCCEx_PLL3_Config+0xcc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	d5f7      	bpl.n	8003c94 <RCCEx_PLL3_Config+0xb8>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003ca4:	2000      	movs	r0, #0
}
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003ca8:	2003      	movs	r0, #3
}
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	44020c00 	.word	0x44020c00

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cb4:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003cb8:	01de      	lsls	r6, r3, #7
{
 8003cba:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cbc:	d508      	bpl.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003cbe:	482d      	ldr	r0, [pc, #180]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc4>)
 8003cc0:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8003cc2:	f8d0 10e8 	ldr.w	r1, [r0, #232]	@ 0xe8
 8003cc6:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8003cca:	4329      	orrs	r1, r5
 8003ccc:	f8c0 10e8 	str.w	r1, [r0, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd0:	f013 0601 	ands.w	r6, r3, #1
 8003cd4:	d01d      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8003cd6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003cd8:	2905      	cmp	r1, #5
 8003cda:	f201 8165 	bhi.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003cde:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003ce2:	000f      	.short	0x000f
 8003ce4:	07e10006 	.word	0x07e10006
 8003ce8:	000f000f 	.word	0x000f000f
 8003cec:	000f      	.short	0x000f
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cee:	f104 0008 	add.w	r0, r4, #8
 8003cf2:	f7ff ff09 	bl	8003b08 <RCCEx_PLL2_Config>
 8003cf6:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cfc:	b94e      	cbnz	r6, 8003d12 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003cfe:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d00:	2600      	movs	r6, #0
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003d02:	4d1c      	ldr	r5, [pc, #112]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc4>)
 8003d04:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
 8003d08:	f020 0007 	bic.w	r0, r0, #7
 8003d0c:	4301      	orrs	r1, r0
 8003d0e:	f8c5 10d8 	str.w	r1, [r5, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d12:	079d      	lsls	r5, r3, #30
 8003d14:	d531      	bpl.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8003d16:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003d18:	2928      	cmp	r1, #40	@ 0x28
 8003d1a:	d82d      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003d1c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003d20:	002c07b4 	.word	0x002c07b4
 8003d24:	002c002c 	.word	0x002c002c
 8003d28:	002c002c 	.word	0x002c002c
 8003d2c:	002c002c 	.word	0x002c002c
 8003d30:	002c07e4 	.word	0x002c07e4
 8003d34:	002c002c 	.word	0x002c002c
 8003d38:	002c002c 	.word	0x002c002c
 8003d3c:	002c002c 	.word	0x002c002c
 8003d40:	002c07f0 	.word	0x002c07f0
 8003d44:	002c002c 	.word	0x002c002c
 8003d48:	002c002c 	.word	0x002c002c
 8003d4c:	002c002c 	.word	0x002c002c
 8003d50:	002c07b4 	.word	0x002c07b4
 8003d54:	002c002c 	.word	0x002c002c
 8003d58:	002c002c 	.word	0x002c002c
 8003d5c:	002c002c 	.word	0x002c002c
 8003d60:	002c07b4 	.word	0x002c07b4
 8003d64:	002c002c 	.word	0x002c002c
 8003d68:	002c002c 	.word	0x002c002c
 8003d6c:	002c002c 	.word	0x002c002c
 8003d70:	07b4      	.short	0x07b4
 8003d72:	bf00      	nop
 8003d74:	44020c00 	.word	0x44020c00
 8003d78:	2601      	movs	r6, #1
 8003d7a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7c:	0758      	lsls	r0, r3, #29
 8003d7e:	d51c      	bpl.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8003d80:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003d82:	2980      	cmp	r1, #128	@ 0x80
 8003d84:	f000 8700 	beq.w	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8003d88:	f201 80c2 	bhi.w	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003d8c:	b149      	cbz	r1, 8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8003d8e:	2940      	cmp	r1, #64	@ 0x40
 8003d90:	f041 80c7 	bne.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1272>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d94:	f104 0008 	add.w	r0, r4, #8
 8003d98:	f7ff feb6 	bl	8003b08 <RCCEx_PLL2_Config>
 8003d9c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003da2:	2d00      	cmp	r5, #0
 8003da4:	f040 8542 	bne.w	800482c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003da8:	4f80      	ldr	r7, [pc, #512]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003daa:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003dac:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003db0:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8003db4:	4301      	orrs	r1, r0
 8003db6:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dba:	0719      	lsls	r1, r3, #28
 8003dbc:	d51e      	bpl.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8003dbe:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003dc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003dc4:	f000 86ee 	beq.w	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xef4>
 8003dc8:	f200 87fa 	bhi.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
 8003dcc:	b151      	cbz	r1, 8003de4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8003dce:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003dd2:	f040 87ff 	bne.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1124>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dd6:	f104 0008 	add.w	r0, r4, #8
 8003dda:	f7ff fe95 	bl	8003b08 <RCCEx_PLL2_Config>
 8003dde:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	f040 8500 	bne.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003dea:	4f70      	ldr	r7, [pc, #448]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003dec:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003dee:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003df2:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8003df6:	4301      	orrs	r1, r0
 8003df8:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dfc:	06df      	lsls	r7, r3, #27
 8003dfe:	d51e      	bpl.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8003e00:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8003e02:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003e06:	f000 86d9 	beq.w	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003e0a:	f200 8787 	bhi.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003e0e:	b151      	cbz	r1, 8003e26 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8003e10:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003e14:	f040 878c 	bne.w	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1080>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e18:	f104 0008 	add.w	r0, r4, #8
 8003e1c:	f7ff fe74 	bl	8003b08 <RCCEx_PLL2_Config>
 8003e20:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	f040 8503 	bne.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb82>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003e2c:	4f5f      	ldr	r7, [pc, #380]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e2e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003e30:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e34:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8003e38:	4301      	orrs	r1, r0
 8003e3a:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e3e:	0698      	lsls	r0, r3, #26
 8003e40:	d51e      	bpl.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8003e42:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003e44:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003e48:	f000 86c4 	beq.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003e4c:	f200 87e2 	bhi.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1164>
 8003e50:	b151      	cbz	r1, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e52:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003e56:	f040 87e7 	bne.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e5a:	f104 0008 	add.w	r0, r4, #8
 8003e5e:	f7ff fe53 	bl	8003b08 <RCCEx_PLL2_Config>
 8003e62:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003e68:	2d00      	cmp	r5, #0
 8003e6a:	f040 84e7 	bne.w	800483c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003e6e:	4f4f      	ldr	r7, [pc, #316]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e70:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003e72:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003e76:	f421 3160 	bic.w	r1, r1, #229376	@ 0x38000
 8003e7a:	4301      	orrs	r1, r0
 8003e7c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e80:	0659      	lsls	r1, r3, #25
 8003e82:	d51e      	bpl.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8003e84:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8003e86:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8003e8a:	f000 863a 	beq.w	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xe52>
 8003e8e:	f201 8015 	bhi.w	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x120c>
 8003e92:	b151      	cbz	r1, 8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e94:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8003e98:	f041 801a 	bne.w	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e9c:	f104 0008 	add.w	r0, r4, #8
 8003ea0:	f7ff fe32 	bl	8003b08 <RCCEx_PLL2_Config>
 8003ea4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	f040 84cb 	bne.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb96>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003eb0:	4f3e      	ldr	r7, [pc, #248]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003eb2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003eb4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003eb8:	f421 11e0 	bic.w	r1, r1, #1835008	@ 0x1c0000
 8003ebc:	4301      	orrs	r1, r0
 8003ebe:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ec2:	061f      	lsls	r7, r3, #24
 8003ec4:	d51e      	bpl.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8003ec6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003ec8:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003ecc:	f000 8625 	beq.w	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xe6a>
 8003ed0:	f200 8792 	bhi.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003ed4:	b151      	cbz	r1, 8003eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8003ed6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003eda:	f040 8797 	bne.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x115c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ede:	f104 0008 	add.w	r0, r4, #8
 8003ee2:	f7ff fe11 	bl	8003b08 <RCCEx_PLL2_Config>
 8003ee6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003eec:	2d00      	cmp	r5, #0
 8003eee:	f040 848f 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0xb60>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003ef2:	4f2e      	ldr	r7, [pc, #184]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003ef4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003ef6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003efa:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8003efe:	4301      	orrs	r1, r0
 8003f00:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003f04:	05d8      	lsls	r0, r3, #23
 8003f06:	d51e      	bpl.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8003f08:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003f0a:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003f0e:	f000 85e0 	beq.w	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8003f12:	f200 8711 	bhi.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003f16:	b151      	cbz	r1, 8003f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003f18:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003f1c:	f040 8716 	bne.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x109c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f20:	f104 0008 	add.w	r0, r4, #8
 8003f24:	f7ff fdf0 	bl	8003b08 <RCCEx_PLL2_Config>
 8003f28:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	f040 8466 	bne.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0xb50>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003f34:	4f1d      	ldr	r7, [pc, #116]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f36:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003f38:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003f3c:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003f40:	4301      	orrs	r1, r0
 8003f42:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003f46:	0599      	lsls	r1, r3, #22
 8003f48:	d520      	bpl.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8003f4a:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003f4e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003f52:	f000 85ca 	beq.w	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003f56:	f200 87cd 	bhi.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 8003f5a:	b151      	cbz	r1, 8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f5c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8003f60:	f040 87d2 	bne.w	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1258>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f64:	f104 0008 	add.w	r0, r4, #8
 8003f68:	f7ff fdce 	bl	8003b08 <RCCEx_PLL2_Config>
 8003f6c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003f72:	2d00      	cmp	r5, #0
 8003f74:	f040 844f 	bne.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb66>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003f78:	4f0c      	ldr	r7, [pc, #48]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f7a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003f7e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003f82:	f021 5160 	bic.w	r1, r1, #939524096	@ 0x38000000
 8003f86:	4301      	orrs	r1, r0
 8003f88:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003f8c:	055f      	lsls	r7, r3, #21
 8003f8e:	d51a      	bpl.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8003f90:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8003f94:	2905      	cmp	r1, #5
 8003f96:	f201 800a 	bhi.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x12fe>
 8003f9a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003f9e:	0010      	.short	0x0010
 8003fa0:	068a0009 	.word	0x068a0009
 8003fa4:	00100010 	.word	0x00100010
 8003fa8:	0010      	.short	0x0010
 8003faa:	bf00      	nop
 8003fac:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fb0:	f104 0008 	add.w	r0, r4, #8
 8003fb4:	f7ff fda8 	bl	8003b08 <RCCEx_PLL2_Config>
 8003fb8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	f000 8403 	beq.w	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      status = ret;
 8003fc4:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003fc6:	0518      	lsls	r0, r3, #20
 8003fc8:	d51e      	bpl.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8003fca:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8003fce:	2920      	cmp	r1, #32
 8003fd0:	f000 8573 	beq.w	8004aba <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 8003fd4:	f200 86be 	bhi.w	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8003fd8:	b149      	cbz	r1, 8003fee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003fda:	2910      	cmp	r1, #16
 8003fdc:	f040 86c2 	bne.w	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe0:	f104 0008 	add.w	r0, r4, #8
 8003fe4:	f7ff fd90 	bl	8003b08 <RCCEx_PLL2_Config>
 8003fe8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	f040 8409 	bne.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003ff4:	4fb0      	ldr	r7, [pc, #704]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8003ff6:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003ffa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8003ffe:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004002:	4301      	orrs	r1, r0
 8004004:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004008:	04d9      	lsls	r1, r3, #19
 800400a:	d520      	bpl.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800400c:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8004010:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004014:	f000 853c 	beq.w	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004018:	f200 8742 	bhi.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x11f0>
 800401c:	b151      	cbz	r1, 8004034 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800401e:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004022:	f040 8747 	bne.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1204>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004026:	f104 0008 	add.w	r0, r4, #8
 800402a:	f7ff fd6d 	bl	8003b08 <RCCEx_PLL2_Config>
 800402e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004034:	2d00      	cmp	r5, #0
 8004036:	f040 83e9 	bne.w	800480c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800403a:	4f9f      	ldr	r7, [pc, #636]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800403c:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004040:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8004044:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8004048:	4301      	orrs	r1, r0
 800404a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404e:	049f      	lsls	r7, r3, #18
 8004050:	d50f      	bpl.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8004052:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8004056:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800405a:	f000 843c 	beq.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800405e:	f240 84a7 	bls.w	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004062:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004066:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800406a:	f000 843b 	beq.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800406e:	2601      	movs	r6, #1
 8004070:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004072:	0458      	lsls	r0, r3, #17
 8004074:	d50f      	bpl.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8004076:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800407a:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 800407e:	f000 83e5 	beq.w	800484c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004082:	f240 84a6 	bls.w	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004086:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800408a:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 800408e:	f000 83e4 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004092:	2601      	movs	r6, #1
 8004094:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004096:	0419      	lsls	r1, r3, #16
 8004098:	d50f      	bpl.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (pPeriphClkInit->I2c3ClockSelection)
 800409a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800409e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80040a2:	f000 8402 	beq.w	80048aa <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80040a6:	f240 848b 	bls.w	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80040aa:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 80040ae:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80040b2:	f000 8401 	beq.w	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80040b6:	2601      	movs	r6, #1
 80040b8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ba:	0557      	lsls	r7, r2, #21
 80040bc:	d50f      	bpl.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (pPeriphClkInit->I2c4ClockSelection)
 80040be:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80040c2:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80040c6:	f000 83db 	beq.w	8004880 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80040ca:	f240 8468 	bls.w	800499e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80040ce:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80040d2:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80040d6:	f000 83da 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80040da:	2601      	movs	r6, #1
 80040dc:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80040de:	03d8      	lsls	r0, r3, #15
 80040e0:	d50b      	bpl.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    switch (pPeriphClkInit->I3c1ClockSelection)
 80040e2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80040e6:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80040ea:	f000 8357 	beq.w	800479c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80040ee:	f031 7100 	bics.w	r1, r1, #33554432	@ 0x2000000
 80040f2:	f000 835a 	beq.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0xafa>
 80040f6:	2601      	movs	r6, #1
 80040f8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040fa:	0511      	lsls	r1, r2, #20
 80040fc:	d509      	bpl.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x462>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80040fe:	496e      	ldr	r1, [pc, #440]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004100:	69c8      	ldr	r0, [r1, #28]
 8004102:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004106:	61c8      	str	r0, [r1, #28]
 8004108:	69c8      	ldr	r0, [r1, #28]
 800410a:	f8d4 7104 	ldr.w	r7, [r4, #260]	@ 0x104
 800410e:	4338      	orrs	r0, r7
 8004110:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004112:	039f      	lsls	r7, r3, #14
 8004114:	d520      	bpl.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004116:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800411a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800411e:	f000 84ab 	beq.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
 8004122:	f200 8693 	bhi.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x119c>
 8004126:	b151      	cbz	r1, 800413e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004128:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800412c:	f040 8698 	bne.w	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004130:	f104 0008 	add.w	r0, r4, #8
 8004134:	f7ff fce8 	bl	8003b08 <RCCEx_PLL2_Config>
 8004138:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800413e:	2d00      	cmp	r5, #0
 8004140:	f040 835c 	bne.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004144:	4f5c      	ldr	r7, [pc, #368]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004146:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800414a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800414e:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004152:	4301      	orrs	r1, r0
 8004154:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004158:	0358      	lsls	r0, r3, #13
 800415a:	d520      	bpl.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 800415c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004160:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004164:	f000 8464 	beq.w	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004168:	f200 861c 	bhi.w	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x10f4>
 800416c:	b151      	cbz	r1, 8004184 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800416e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004172:	f040 8621 	bne.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1108>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004176:	f104 0008 	add.w	r0, r4, #8
 800417a:	f7ff fcc5 	bl	8003b08 <RCCEx_PLL2_Config>
 800417e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004184:	2d00      	cmp	r5, #0
 8004186:	f040 8349 	bne.w	800481c <HAL_RCCEx_PeriphCLKConfig+0xb6c>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800418a:	4f4b      	ldr	r7, [pc, #300]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800418c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004190:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004194:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004198:	4301      	orrs	r1, r0
 800419a:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800419e:	0691      	lsls	r1, r2, #26
 80041a0:	d520      	bpl.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 80041a2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80041a6:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80041aa:	f000 844d 	beq.w	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80041ae:	f200 8669 	bhi.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
 80041b2:	b151      	cbz	r1, 80041ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80041b4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80041b8:	f040 866e 	bne.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041bc:	f104 0008 	add.w	r0, r4, #8
 80041c0:	f7ff fca2 	bl	8003b08 <RCCEx_PLL2_Config>
 80041c4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80041ca:	2d00      	cmp	r5, #0
 80041cc:	f040 8310 	bne.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb40>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80041d0:	4f39      	ldr	r7, [pc, #228]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80041d2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80041d6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80041da:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80041de:	4301      	orrs	r1, r0
 80041e0:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80041e4:	0657      	lsls	r7, r2, #25
 80041e6:	d520      	bpl.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 80041e8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80041ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80041f0:	f000 84ab 	beq.w	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80041f4:	f200 8670 	bhi.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1228>
 80041f8:	b151      	cbz	r1, 8004210 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80041fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80041fe:	f040 8675 	bne.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x123c>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004202:	f104 0008 	add.w	r0, r4, #8
 8004206:	f7ff fc7f 	bl	8003b08 <RCCEx_PLL2_Config>
 800420a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004210:	2d00      	cmp	r5, #0
 8004212:	f040 82ef 	bne.w	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004216:	4f28      	ldr	r7, [pc, #160]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8004218:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800421c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004220:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8004224:	4301      	orrs	r1, r0
 8004226:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800422a:	0610      	lsls	r0, r2, #24
 800422c:	d520      	bpl.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 800422e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8004232:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004236:	f000 8413 	beq.w	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800423a:	f200 85a5 	bhi.w	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10d8>
 800423e:	b151      	cbz	r1, 8004256 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004240:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004244:	f040 85aa 	bne.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10ec>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004248:	f104 0008 	add.w	r0, r4, #8
 800424c:	f7ff fc5c 	bl	8003b08 <RCCEx_PLL2_Config>
 8004250:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004256:	2d00      	cmp	r5, #0
 8004258:	f040 82e2 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800425c:	4f16      	ldr	r7, [pc, #88]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800425e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8004262:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8004266:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800426a:	4301      	orrs	r1, r0
 800426c:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004270:	05d1      	lsls	r1, r2, #23
 8004272:	d523      	bpl.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004274:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8004278:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800427c:	f000 8459 	beq.w	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004280:	f200 85d6 	bhi.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004284:	b151      	cbz	r1, 800429c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004286:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800428a:	f040 85db 	bne.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1194>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800428e:	f104 0008 	add.w	r0, r4, #8
 8004292:	f7ff fc39 	bl	8003b08 <RCCEx_PLL2_Config>
 8004296:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800429c:	2d00      	cmp	r5, #0
 800429e:	f040 82a2 	bne.w	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80042a2:	4f05      	ldr	r7, [pc, #20]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80042a4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 80042a8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80042ac:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80042b0:	4301      	orrs	r1, r0
 80042b2:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80042b6:	e001      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80042b8:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042bc:	031f      	lsls	r7, r3, #12
 80042be:	d522      	bpl.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80042c0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80042c4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80042c8:	f000 84bb 	beq.w	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xf92>
 80042cc:	f200 8630 	bhi.w	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1280>
 80042d0:	2900      	cmp	r1, #0
 80042d2:	f000 848e 	beq.w	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
 80042d6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80042da:	f040 8631 	bne.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1290>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042de:	f104 0008 	add.w	r0, r4, #8
 80042e2:	f7ff fc11 	bl	8003b08 <RCCEx_PLL2_Config>
 80042e6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	f040 8488 	bne.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xf52>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80042f2:	4fa2      	ldr	r7, [pc, #648]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042f4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80042f8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80042fc:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8004300:	4301      	orrs	r1, r0
 8004302:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004306:	02d8      	lsls	r0, r3, #11
 8004308:	d522      	bpl.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800430a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800430e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004312:	f000 8489 	beq.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8004316:	f200 8617 	bhi.w	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1298>
 800431a:	2900      	cmp	r1, #0
 800431c:	f000 84a6 	beq.w	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8004320:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8004324:	f040 8618 	bne.w	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004328:	f104 0008 	add.w	r0, r4, #8
 800432c:	f7ff fbec 	bl	8003b08 <RCCEx_PLL2_Config>
 8004330:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004336:	2d00      	cmp	r5, #0
 8004338:	f040 8480 	bne.w	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800433c:	4f8f      	ldr	r7, [pc, #572]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800433e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8004342:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004346:	f421 1160 	bic.w	r1, r1, #3670016	@ 0x380000
 800434a:	4301      	orrs	r1, r0
 800434c:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004350:	0299      	lsls	r1, r3, #10
 8004352:	d50c      	bpl.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6be>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8004354:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8004358:	2902      	cmp	r1, #2
 800435a:	f000 8162 	beq.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800435e:	f240 8167 	bls.w	8004630 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004362:	3903      	subs	r1, #3
 8004364:	2902      	cmp	r1, #2
 8004366:	f240 8163 	bls.w	8004630 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800436a:	2601      	movs	r6, #1
 800436c:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800436e:	0597      	lsls	r7, r2, #22
 8004370:	d507      	bpl.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004372:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 8004376:	f031 0008 	bics.w	r0, r1, #8
 800437a:	f000 817b 	beq.w	8004674 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 800437e:	2601      	movs	r6, #1
 8004380:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004382:	0198      	lsls	r0, r3, #6
 8004384:	f100 8184 	bmi.w	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004388:	0159      	lsls	r1, r3, #5
 800438a:	d50d      	bpl.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    switch (pPeriphClkInit->RngClockSelection)
 800438c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
 8004390:	2910      	cmp	r1, #16
 8004392:	f000 82db 	beq.w	800494c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004396:	f240 8325 	bls.w	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800439a:	f021 0010 	bic.w	r0, r1, #16
 800439e:	2820      	cmp	r0, #32
 80043a0:	f000 82d9 	beq.w	8004956 <HAL_RCCEx_PeriphCLKConfig+0xca6>
 80043a4:	2601      	movs	r6, #1
 80043a6:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043a8:	025f      	lsls	r7, r3, #9
 80043aa:	d509      	bpl.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x710>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80043ac:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 80043b0:	2900      	cmp	r1, #0
 80043b2:	f000 82a5 	beq.w	8004900 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80043b6:	2940      	cmp	r1, #64	@ 0x40
 80043b8:	f000 82d8 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0xcbc>
 80043bc:	2601      	movs	r6, #1
 80043be:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043c0:	0218      	lsls	r0, r3, #8
 80043c2:	d509      	bpl.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80043c4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80043c8:	2900      	cmp	r1, #0
 80043ca:	f000 82ab 	beq.w	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80043ce:	2980      	cmp	r1, #128	@ 0x80
 80043d0:	f000 82da 	beq.w	8004988 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 80043d4:	2601      	movs	r6, #1
 80043d6:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80043d8:	0119      	lsls	r1, r3, #4
 80043da:	d50c      	bpl.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (pPeriphClkInit->Spi1ClockSelection)
 80043dc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80043e0:	2904      	cmp	r1, #4
 80043e2:	f200 85d9 	bhi.w	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
 80043e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80043ea:	0109      	.short	0x0109
 80043ec:	0417040f 	.word	0x0417040f
 80043f0:	010e010e 	.word	0x010e010e
      status = ret;
 80043f4:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80043f6:	00df      	lsls	r7, r3, #3
 80043f8:	d528      	bpl.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    switch (pPeriphClkInit->Spi2ClockSelection)
 80043fa:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
 80043fe:	2920      	cmp	r1, #32
 8004400:	d822      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x798>
 8004402:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004406:	01a8      	.short	0x01a8
 8004408:	00210021 	.word	0x00210021
 800440c:	00210021 	.word	0x00210021
 8004410:	00210021 	.word	0x00210021
 8004414:	04690021 	.word	0x04690021
 8004418:	00210021 	.word	0x00210021
 800441c:	00210021 	.word	0x00210021
 8004420:	00210021 	.word	0x00210021
 8004424:	04610021 	.word	0x04610021
 8004428:	00210021 	.word	0x00210021
 800442c:	00210021 	.word	0x00210021
 8004430:	00210021 	.word	0x00210021
 8004434:	01ad0021 	.word	0x01ad0021
 8004438:	00210021 	.word	0x00210021
 800443c:	00210021 	.word	0x00210021
 8004440:	00210021 	.word	0x00210021
 8004444:	01ad0021 	.word	0x01ad0021
 8004448:	2601      	movs	r6, #1
 800444a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800444c:	0098      	lsls	r0, r3, #2
 800444e:	d520      	bpl.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8004450:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8004454:	2980      	cmp	r1, #128	@ 0x80
 8004456:	f000 83fd 	beq.w	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800445a:	f200 8581 	bhi.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
 800445e:	2900      	cmp	r1, #0
 8004460:	f000 840b 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xfca>
 8004464:	2940      	cmp	r1, #64	@ 0x40
 8004466:	f040 8582 	bne.w	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x12be>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800446a:	f104 0008 	add.w	r0, r4, #8
 800446e:	f7ff fb4b 	bl	8003b08 <RCCEx_PLL2_Config>
 8004472:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004478:	2d00      	cmp	r5, #0
 800447a:	f040 83f5 	bne.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800447e:	4f3f      	ldr	r7, [pc, #252]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004480:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
 8004484:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8004488:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800448c:	4301      	orrs	r1, r0
 800448e:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004492:	0059      	lsls	r1, r3, #1
 8004494:	d520      	bpl.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x828>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8004496:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 800449a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800449e:	f000 82a8 	beq.w	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80044a2:	f200 8463 	bhi.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80044a6:	b151      	cbz	r1, 80044be <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80044a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80044ac:	f040 8468 	bne.w	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044b0:	f104 0008 	add.w	r0, r4, #8
 80044b4:	f7ff fb28 	bl	8003b08 <RCCEx_PLL2_Config>
 80044b8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80044be:	2d00      	cmp	r5, #0
 80044c0:	f040 81bf 	bne.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb92>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80044c4:	4f2d      	ldr	r7, [pc, #180]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044c6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 80044ca:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80044ce:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 80044d2:	4301      	orrs	r1, r0
 80044d4:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80044d8:	2b00      	cmp	r3, #0
 80044da:	da1f      	bge.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    switch (pPeriphClkInit->Spi5ClockSelection)
 80044dc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e4:	f000 8290 	beq.w	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80044e8:	f200 8478 	bhi.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x112c>
 80044ec:	b14b      	cbz	r3, 8004502 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f2:	f040 847d 	bne.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044f6:	f104 0008 	add.w	r0, r4, #8
 80044fa:	f7ff fb05 	bl	8003b08 <RCCEx_PLL2_Config>
 80044fe:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004500:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004502:	2d00      	cmp	r5, #0
 8004504:	f040 8178 	bne.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004508:	491c      	ldr	r1, [pc, #112]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800450a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 800450e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004516:	4303      	orrs	r3, r0
 8004518:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800451c:	07d3      	lsls	r3, r2, #31
 800451e:	d51f      	bpl.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8004520:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004528:	f000 8278 	beq.w	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800452c:	f200 849c 	bhi.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
 8004530:	b14b      	cbz	r3, 8004546 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004536:	f040 84a1 	bne.w	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x11cc>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800453a:	f104 0008 	add.w	r0, r4, #8
 800453e:	f7ff fae3 	bl	8003b08 <RCCEx_PLL2_Config>
 8004542:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004544:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004546:	2d00      	cmp	r5, #0
 8004548:	f040 8176 	bne.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0xb88>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800454c:	490b      	ldr	r1, [pc, #44]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800454e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8004552:	f8d1 30e0 	ldr.w	r3, [r1, #224]	@ 0xe0
 8004556:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 800455a:	4303      	orrs	r3, r0
 800455c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004560:	0797      	lsls	r7, r2, #30
 8004562:	d51f      	bpl.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch (pPeriphClkInit->OspiClockSelection)
 8004564:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
 8004568:	2b03      	cmp	r3, #3
 800456a:	f200 8519 	bhi.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
 800456e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004572:	000c      	.short	0x000c
 8004574:	02f80007 	.word	0x02f80007
 8004578:	000c      	.short	0x000c
 800457a:	bf00      	nop
 800457c:	44020c00 	.word	0x44020c00
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004580:	49bd      	ldr	r1, [pc, #756]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004582:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004588:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 800458a:	2d00      	cmp	r5, #0
 800458c:	f040 814c 	bne.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004590:	49b9      	ldr	r1, [pc, #740]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004592:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 8004596:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	4303      	orrs	r3, r0
 80045a0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045a4:	0750      	lsls	r0, r2, #29
 80045a6:	d50c      	bpl.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
    switch (pPeriphClkInit->FdcanClockSelection)
 80045a8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b0:	f000 82e1 	beq.w	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xec6>
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b8:	d048      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x99c>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d04c      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80045be:	2601      	movs	r6, #1
 80045c0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045c2:	06d1      	lsls	r1, r2, #27
 80045c4:	d50b      	bpl.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x92e>
    switch (pPeriphClkInit->UsbClockSelection)
 80045c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f000 80d4 	beq.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80045d0:	2b30      	cmp	r3, #48	@ 0x30
 80045d2:	f000 80d7 	beq.w	8004784 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	f000 8266 	beq.w	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80045dc:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045de:	0713      	lsls	r3, r2, #28
 80045e0:	d509      	bpl.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x946>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80045e2:	4aa5      	ldr	r2, [pc, #660]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045e4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	@ 0xfc
 80045e8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80045ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80045f0:	430b      	orrs	r3, r1
 80045f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 80045f6:	4630      	mov	r0, r6
 80045f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fc:	489e      	ldr	r0, [pc, #632]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045fe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004600:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004604:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004606:	2d00      	cmp	r5, #0
 8004608:	f47f aef4 	bne.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800460c:	4f9a      	ldr	r7, [pc, #616]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800460e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8004612:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8004616:	f021 0107 	bic.w	r1, r1, #7
 800461a:	4301      	orrs	r1, r0
 800461c:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8004620:	e6e9      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004622:	f104 0008 	add.w	r0, r4, #8
 8004626:	f7ff fa6f 	bl	8003b08 <RCCEx_PLL2_Config>
 800462a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004630:	2d00      	cmp	r5, #0
 8004632:	f040 8189 	bne.w	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004636:	4f90      	ldr	r7, [pc, #576]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004638:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 800463c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004640:	f021 0107 	bic.w	r1, r1, #7
 8004644:	4301      	orrs	r1, r0
 8004646:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 800464a:	e690      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6be>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800464c:	f104 0008 	add.w	r0, r4, #8
 8004650:	f7ff fa5a 	bl	8003b08 <RCCEx_PLL2_Config>
 8004654:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004656:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004658:	2d00      	cmp	r5, #0
 800465a:	f040 80e3 	bne.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0xb74>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800465e:	4986      	ldr	r1, [pc, #536]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004660:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8004664:	f8d1 30e8 	ldr.w	r3, [r1, #232]	@ 0xe8
 8004668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466c:	4303      	orrs	r3, r0
 800466e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004672:	e7a6      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
    if (ret == HAL_OK)
 8004674:	2d00      	cmp	r5, #0
 8004676:	f040 82b9 	bne.w	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800467a:	4f7f      	ldr	r7, [pc, #508]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800467c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8004680:	f020 0008 	bic.w	r0, r0, #8
 8004684:	4301      	orrs	r1, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004686:	0198      	lsls	r0, r3, #6
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004688:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800468c:	f57f ae7c 	bpl.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004690:	4f7a      	ldr	r7, [pc, #488]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0xbcc>)
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
    tickstart = HAL_GetTick();
 800469a:	f7fd fb97 	bl	8001dcc <HAL_GetTick>
 800469e:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a2:	f7fd fb93 	bl	8001dcc <HAL_GetTick>
 80046a6:	eba0 0008 	sub.w	r0, r0, r8
 80046aa:	2802      	cmp	r0, #2
 80046ac:	f200 8330 	bhi.w	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1060>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	07d9      	lsls	r1, r3, #31
 80046b4:	d5f5      	bpl.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    if (ret == HAL_OK)
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	f040 832b 	bne.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1062>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046bc:	4f6e      	ldr	r7, [pc, #440]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046be:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046c2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046c6:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80046ca:	d028      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d026      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 80046d4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80046d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046dc:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046e0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80046e4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046e8:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046ec:	f421 7240 	bic.w	r2, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 80046f0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f4:	07ca      	lsls	r2, r1, #31
 80046f6:	d512      	bpl.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
        tickstart = HAL_GetTick();
 80046f8:	f7fd fb68 	bl	8001dcc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004700:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	e006      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xa62>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fd fb62 	bl	8001dcc <HAL_GetTick>
 8004708:	eba0 0008 	sub.w	r0, r0, r8
 800470c:	4548      	cmp	r0, r9
 800470e:	f200 843d 	bhi.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004712:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004716:	0798      	lsls	r0, r3, #30
 8004718:	d5f4      	bpl.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa54>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800471a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 800471e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004722:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004726:	f000 8426 	beq.w	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x12c6>
 800472a:	4953      	ldr	r1, [pc, #332]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800472c:	69ca      	ldr	r2, [r1, #28]
 800472e:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004732:	61ca      	str	r2, [r1, #28]
 8004734:	4a50      	ldr	r2, [pc, #320]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473a:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800473e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004742:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
 8004746:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800474a:	430b      	orrs	r3, r1
 800474c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004750:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004754:	e618      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004756:	4848      	ldr	r0, [pc, #288]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004758:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800475a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800475e:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004760:	bb8d      	cbnz	r5, 80047c6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004762:	4f45      	ldr	r7, [pc, #276]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004764:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 8004768:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800476c:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004770:	4301      	orrs	r1, r0
 8004772:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8004776:	e669      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x79c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004778:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800477c:	f7ff fa2e 	bl	8003bdc <RCCEx_PLL3_Config>
 8004780:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004782:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004784:	bb6d      	cbnz	r5, 80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb32>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004786:	493c      	ldr	r1, [pc, #240]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004788:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 800478c:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 8004790:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004794:	4303      	orrs	r3, r0
 8004796:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800479a:	e720      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800479c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80047a0:	f7ff fa1c 	bl	8003bdc <RCCEx_PLL3_Config>
 80047a4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	f040 80e9 	bne.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80047b0:	4f31      	ldr	r7, [pc, #196]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047b2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80047b6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80047ba:	f021 7140 	bic.w	r1, r1, #50331648	@ 0x3000000
 80047be:	4301      	orrs	r1, r0
 80047c0:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80047c4:	e499      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      status = ret;
 80047c6:	462e      	mov	r6, r5
 80047c8:	e640      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80047ca:	4f2b      	ldr	r7, [pc, #172]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047cc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80047d0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80047d4:	f021 0107 	bic.w	r1, r1, #7
 80047d8:	4301      	orrs	r1, r0
 80047da:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80047de:	f7ff bbf2 	b.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      status = ret;
 80047e2:	462e      	mov	r6, r5
 80047e4:	e6fb      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x92e>
      status = ret;
 80047e6:	462e      	mov	r6, r5
 80047e8:	e568      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
      status = ret;
 80047ea:	462e      	mov	r6, r5
 80047ec:	f7ff bb06 	b.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      status = ret;
 80047f0:	462e      	mov	r6, r5
 80047f2:	e4f7      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = ret;
 80047f4:	462e      	mov	r6, r5
 80047f6:	e518      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x57a>
      status = ret;
 80047f8:	462e      	mov	r6, r5
 80047fa:	e68f      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      status = ret;
 80047fc:	462e      	mov	r6, r5
 80047fe:	e4ab      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      status = ret;
 8004800:	462e      	mov	r6, r5
 8004802:	f7ff bba0 	b.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x296>
      status = ret;
 8004806:	462e      	mov	r6, r5
 8004808:	f7ff bbfe 	b.w	8004008 <HAL_RCCEx_PeriphCLKConfig+0x358>
      status = ret;
 800480c:	462e      	mov	r6, r5
 800480e:	e41e      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      status = ret;
 8004810:	462e      	mov	r6, r5
 8004812:	f7ff bb77 	b.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x254>
      status = ret;
 8004816:	462e      	mov	r6, r5
 8004818:	f7ff bbb8 	b.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      status = ret;
 800481c:	462e      	mov	r6, r5
 800481e:	e4be      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      status = ret;
 8004820:	462e      	mov	r6, r5
 8004822:	e525      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      status = ret;
 8004824:	462e      	mov	r6, r5
 8004826:	e6cc      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      status = ret;
 8004828:	462e      	mov	r6, r5
 800482a:	e6bb      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      status = ret;
 800482c:	462e      	mov	r6, r5
 800482e:	f7ff bac4 	b.w	8003dba <HAL_RCCEx_PeriphCLKConfig+0x10a>
      status = ret;
 8004832:	462e      	mov	r6, r5
 8004834:	f7ff bb03 	b.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      status = ret;
 8004838:	462e      	mov	r6, r5
 800483a:	e691      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      status = ret;
 800483c:	462e      	mov	r6, r5
 800483e:	f7ff bb1f 	b.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 8004842:	462e      	mov	r6, r5
 8004844:	e648      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x828>
      status = ret;
 8004846:	462e      	mov	r6, r5
 8004848:	f7ff bb3b 	b.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800484c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004850:	f7ff f9c4 	bl	8003bdc <RCCEx_PLL3_Config>
 8004854:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800485a:	2d00      	cmp	r5, #0
 800485c:	f040 80bf 	bne.w	80049de <HAL_RCCEx_PeriphCLKConfig+0xd2e>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004860:	4f05      	ldr	r7, [pc, #20]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004862:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8004866:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800486a:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 800486e:	4301      	orrs	r1, r0
 8004870:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004874:	e40f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004876:	bf00      	nop
 8004878:	44020c00 	.word	0x44020c00
 800487c:	44020800 	.word	0x44020800
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004880:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004884:	f7ff f9aa 	bl	8003bdc <RCCEx_PLL3_Config>
 8004888:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800488e:	2d00      	cmp	r5, #0
 8004890:	f040 808b 	bne.w	80049aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004894:	4fc2      	ldr	r7, [pc, #776]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004896:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800489a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800489e:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 80048a2:	4301      	orrs	r1, r0
 80048a4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80048a8:	e419      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x42e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048aa:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80048ae:	f7ff f995 	bl	8003bdc <RCCEx_PLL3_Config>
 80048b2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	f040 8087 	bne.w	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80048be:	4fb8      	ldr	r7, [pc, #736]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80048c0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80048c4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80048c8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80048cc:	4301      	orrs	r1, r0
 80048ce:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80048d2:	f7ff bbf2 	b.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048d6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80048da:	f7ff f97f 	bl	8003bdc <RCCEx_PLL3_Config>
 80048de:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	d168      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xd0a>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80048e8:	4fad      	ldr	r7, [pc, #692]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 80048ea:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80048ee:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80048f2:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80048f6:	4301      	orrs	r1, r0
 80048f8:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80048fc:	f7ff bbb9 	b.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	48a7      	ldr	r0, [pc, #668]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004902:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004904:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004908:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 800490a:	2d00      	cmp	r5, #0
 800490c:	d137      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xcce>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800490e:	4fa4      	ldr	r7, [pc, #656]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004910:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8004914:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8004918:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800491c:	4301      	orrs	r1, r0
 800491e:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004922:	e54d      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x710>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	489e      	ldr	r0, [pc, #632]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004926:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004928:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800492c:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 800492e:	2d00      	cmp	r5, #0
 8004930:	d133      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xcea>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004932:	4f9b      	ldr	r7, [pc, #620]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004934:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 8004938:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800493c:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004940:	4301      	orrs	r1, r0
 8004942:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8004946:	e547      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
      status = ret;
 8004948:	462e      	mov	r6, r5
 800494a:	e510      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6be>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494c:	4f94      	ldr	r7, [pc, #592]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800494e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004950:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8004954:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (ret == HAL_OK)
 8004956:	2d00      	cmp	r5, #0
 8004958:	d149      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800495a:	4f91      	ldr	r7, [pc, #580]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 800495c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8004960:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 8004964:	4301      	orrs	r1, r0
 8004966:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 800496a:	e51d      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800496c:	f104 0008 	add.w	r0, r4, #8
 8004970:	f7ff f8ca 	bl	8003b08 <RCCEx_PLL2_Config>
 8004974:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800497a:	2d00      	cmp	r5, #0
 800497c:	d0c7      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
      status = ret;
 800497e:	462e      	mov	r6, r5
 8004980:	e51e      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x710>
      status = ret;
 8004982:	462e      	mov	r6, r5
 8004984:	f7ff bbb9 	b.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004988:	f104 0008 	add.w	r0, r4, #8
 800498c:	f7ff f8bc 	bl	8003b08 <RCCEx_PLL2_Config>
 8004990:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004996:	2d00      	cmp	r5, #0
 8004998:	d0cb      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc82>
      status = ret;
 800499a:	462e      	mov	r6, r5
 800499c:	e51c      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    switch (pPeriphClkInit->I2c4ClockSelection)
 800499e:	2900      	cmp	r1, #0
 80049a0:	f47f ab9b 	bne.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x42a>
    if (ret == HAL_OK)
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	f43f af75 	beq.w	8004894 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
      status = ret;
 80049aa:	462e      	mov	r6, r5
 80049ac:	f7ff bb97 	b.w	80040de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch (pPeriphClkInit->I2c1ClockSelection)
 80049b0:	2900      	cmp	r1, #0
 80049b2:	f47f ab5c 	bne.w	800406e <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	d096      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      status = ret;
 80049ba:	462e      	mov	r6, r5
 80049bc:	f7ff bb59 	b.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (pPeriphClkInit->I2c3ClockSelection)
 80049c0:	2900      	cmp	r1, #0
 80049c2:	f47f ab78 	bne.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	f43f af79 	beq.w	80048be <HAL_RCCEx_PeriphCLKConfig+0xc0e>
      status = ret;
 80049cc:	462e      	mov	r6, r5
 80049ce:	f7ff bb74 	b.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (pPeriphClkInit->I2c2ClockSelection)
 80049d2:	2900      	cmp	r1, #0
 80049d4:	f47f ab5d 	bne.w	8004092 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    if (ret == HAL_OK)
 80049d8:	2d00      	cmp	r5, #0
 80049da:	f43f af41 	beq.w	8004860 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      status = ret;
 80049de:	462e      	mov	r6, r5
 80049e0:	f7ff bb59 	b.w	8004096 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (pPeriphClkInit->RngClockSelection)
 80049e4:	2900      	cmp	r1, #0
 80049e6:	f47f acdd 	bne.w	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if (ret == HAL_OK)
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	d0b5      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
      status = ret;
 80049ee:	462e      	mov	r6, r5
 80049f0:	e4da      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049f2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049f6:	f7ff f8f1 	bl	8003bdc <RCCEx_PLL3_Config>
 80049fa:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a00:	2d00      	cmp	r5, #0
 8004a02:	f47f af1e 	bne.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004a06:	e55d      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a08:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a0c:	f7ff f8e6 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a10:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a12:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	f47f aeef 	bne.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
 8004a1a:	e575      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x858>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a1c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a20:	f7ff f8dc 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a24:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a26:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	f47f af05 	bne.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004a2e:	e58d      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x89c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a30:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a34:	f7ff f8d2 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a38:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	f47f aeec 	bne.w	800481c <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8004a44:	f7ff bba1 	b.w	800418a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a48:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a4c:	f7ff f8c6 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a50:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	f47f aeca 	bne.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8004a5c:	f7ff bbb8 	b.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a60:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a64:	f7ff f8ba 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a68:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	f47f aed6 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8004a74:	f7ff bbf2 	b.w	800425c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a78:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a7c:	f7ff f8ae 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a80:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	f47f aeb8 	bne.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004a8c:	f7ff bb5a 	b.w	8004144 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a90:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004a94:	f7ff f8a2 	bl	8003bdc <RCCEx_PLL3_Config>
 8004a98:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	f47f aeb4 	bne.w	800480c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8004aa4:	f7ff bac9 	b.w	800403a <HAL_RCCEx_PeriphCLKConfig+0x38a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa8:	493d      	ldr	r1, [pc, #244]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004aaa:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab0:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	f47f ae95 	bne.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8004ab8:	e665      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aba:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004abe:	f7ff f88d 	bl	8003bdc <RCCEx_PLL3_Config>
 8004ac2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004ac8:	2d00      	cmp	r5, #0
 8004aca:	f47f ae9c 	bne.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004ace:	f7ff ba91 	b.w	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x344>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ad2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ad6:	f7ff f881 	bl	8003bdc <RCCEx_PLL3_Config>
 8004ada:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	f47f ae8d 	bne.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0xb50>
 8004ae6:	f7ff ba25 	b.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x284>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aea:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004aee:	f7ff f875 	bl	8003bdc <RCCEx_PLL3_Config>
 8004af2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	f47f ae8c 	bne.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004afe:	f7ff ba3b 	b.w	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b02:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b06:	f7ff f869 	bl	8003bdc <RCCEx_PLL3_Config>
 8004b0a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b10:	2d00      	cmp	r5, #0
 8004b12:	f47f ae98 	bne.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb96>
 8004b16:	f7ff b9cb 	b.w	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b1a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b1e:	f7ff f85d 	bl	8003bdc <RCCEx_PLL3_Config>
 8004b22:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	f47f ae71 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8004b2e:	f7ff b9e0 	b.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b32:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b36:	f7ff f851 	bl	8003bdc <RCCEx_PLL3_Config>
 8004b3a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b40:	2d00      	cmp	r5, #0
 8004b42:	f47f ae50 	bne.w	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
 8004b46:	f7ff bbac 	b.w	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b4a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b4e:	f7ff f845 	bl	8003bdc <RCCEx_PLL3_Config>
 8004b52:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	f47f ae4b 	bne.w	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004b5e:	f7ff bb5a 	b.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0x566>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b62:	f104 0008 	add.w	r0, r4, #8
 8004b66:	f7fe ffcf 	bl	8003b08 <RCCEx_PLL2_Config>
 8004b6a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b6c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	f47f ae5a 	bne.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004b74:	e50c      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b76:	490a      	ldr	r1, [pc, #40]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xef0>)
 8004b78:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	628b      	str	r3, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	f47f ae4f 	bne.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b86:	e56a      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b88:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004b8c:	f7ff f826 	bl	8003bdc <RCCEx_PLL3_Config>
 8004b90:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	f47f ae48 	bne.w	800482c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004b9c:	f7ff b904 	b.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004ba0:	44020c00 	.word	0x44020c00
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ba4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ba8:	f7ff f818 	bl	8003bdc <RCCEx_PLL3_Config>
 8004bac:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	f47f ae19 	bne.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8004bb8:	f7ff b917 	b.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x13a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bbc:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004bc0:	f7ff f80c 	bl	8003bdc <RCCEx_PLL3_Config>
 8004bc4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	f47f ae31 	bne.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004bd0:	f7ff b92c 	b.w	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004bd8:	f7ff f800 	bl	8003bdc <RCCEx_PLL3_Config>
 8004bdc:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f47f ae2a 	bne.w	800483c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004be8:	f7ff b941 	b.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
      status = ret;
 8004bec:	462e      	mov	r6, r5
 8004bee:	f7ff bbc8 	b.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf2:	48ce      	ldr	r0, [pc, #824]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004bf4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004bf6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004bfa:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	f43f ab78 	beq.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      status = ret;
 8004c02:	462e      	mov	r6, r5
 8004c04:	f7ff bb7f 	b.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c08:	f104 0008 	add.w	r0, r4, #8
 8004c0c:	f7fe ff7c 	bl	8003b08 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c10:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c12:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c14:	6862      	ldr	r2, [r4, #4]
        break;
 8004c16:	e4f6      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x956>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c18:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c1c:	f7fe ffde 	bl	8003bdc <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c20:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c22:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c24:	6862      	ldr	r2, [r4, #4]
        break;
 8004c26:	e4ee      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x956>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c28:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c2c:	f7fe ffd6 	bl	8003bdc <RCCEx_PLL3_Config>
 8004c30:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	f43f ab80 	beq.w	800433c <HAL_RCCEx_PeriphCLKConfig+0x68c>
      status = ret;
 8004c3c:	462e      	mov	r6, r5
 8004c3e:	f7ff bb87 	b.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c42:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c46:	f7fe ffc9 	bl	8003bdc <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004c4a:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c4c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004c4e:	6862      	ldr	r2, [r4, #4]
        break;
 8004c50:	f7ff bb4c 	b.w	80042ec <HAL_RCCEx_PeriphCLKConfig+0x63c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c54:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004c58:	f7fe ffc0 	bl	8003bdc <RCCEx_PLL3_Config>
 8004c5c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	f43f ac0b 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      status = ret;
 8004c68:	462e      	mov	r6, r5
 8004c6a:	e412      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6c:	48af      	ldr	r0, [pc, #700]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004c6e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004c70:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004c74:	6281      	str	r1, [r0, #40]	@ 0x28
        break;
 8004c76:	f7ff bb5e 	b.w	8004336 <HAL_RCCEx_PeriphCLKConfig+0x686>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7a:	48ac      	ldr	r0, [pc, #688]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004c7c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004c7e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004c82:	6281      	str	r1, [r0, #40]	@ 0x28
        break;
 8004c84:	f7ff bbf8 	b.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8004c88:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	d135      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x104a>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c8e:	4fa7      	ldr	r7, [pc, #668]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 8004c90:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004c92:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004c96:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004c9a:	4301      	orrs	r1, r0
 8004c9c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8004ca0:	f7ff b86c 	b.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ca4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ca8:	f7fe ff98 	bl	8003bdc <RCCEx_PLL3_Config>
 8004cac:	4606      	mov	r6, r0
        break;
 8004cae:	f7ff b823 	b.w	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cb2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004cb6:	f7fe ff91 	bl	8003bdc <RCCEx_PLL3_Config>
 8004cba:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004cc0:	2d00      	cmp	r5, #0
 8004cc2:	f47f a97f 	bne.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004cc6:	e580      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cc8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004ccc:	f7fe ff86 	bl	8003bdc <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004cd0:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cd2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004cd4:	6862      	ldr	r2, [r4, #4]
        break;
 8004cd6:	e543      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xab0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd8:	f104 0008 	add.w	r0, r4, #8
 8004cdc:	f7fe ff14 	bl	8003b08 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004ce0:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ce2:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004ce4:	6862      	ldr	r2, [r4, #4]
        break;
 8004ce6:	e53b      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xab0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ce8:	f104 0008 	add.w	r0, r4, #8
 8004cec:	f7fe ff0c 	bl	8003b08 <RCCEx_PLL2_Config>
 8004cf0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	d0c9      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xfde>
      status = ret;
 8004cfa:	462e      	mov	r6, r5
 8004cfc:	f7ff b83e 	b.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d00:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004d04:	f7fe ff6a 	bl	8003bdc <RCCEx_PLL3_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d08:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d0a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d0c:	6862      	ldr	r2, [r4, #4]
        break;
 8004d0e:	e7bc      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xfda>
        ret = HAL_TIMEOUT;
 8004d10:	2503      	movs	r5, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d12:	e9d4 3200 	ldrd	r3, r2, [r4]
      status = ret;
 8004d16:	462e      	mov	r6, r5
 8004d18:	f7ff bb36 	b.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8004d1c:	f421 5080 	bic.w	r0, r1, #4096	@ 0x1000
 8004d20:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004d24:	f43f a87f 	beq.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004d28:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004d2c:	f43f a87b 	beq.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004d30:	2601      	movs	r6, #1
 8004d32:	4635      	mov	r5, r6
 8004d34:	f7ff b883 	b.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8004d38:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004d3c:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004d40:	f43f a8f5 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d44:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004d48:	f43f a8f1 	beq.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d4c:	2601      	movs	r6, #1
 8004d4e:	4635      	mov	r5, r6
 8004d50:	f7ff b8f9 	b.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8004d54:	f021 0010 	bic.w	r0, r1, #16
 8004d58:	2840      	cmp	r0, #64	@ 0x40
 8004d5a:	f43f a948 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d5e:	2930      	cmp	r1, #48	@ 0x30
 8004d60:	f43f a945 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d64:	2601      	movs	r6, #1
 8004d66:	4635      	mov	r5, r6
 8004d68:	f7ff b94e 	b.w	8004008 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8004d6c:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8004d70:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004d74:	f43f aba3 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004d78:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004d7c:	f43f ab9f 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004d80:	2601      	movs	r6, #1
 8004d82:	4635      	mov	r5, r6
 8004d84:	f7ff bba8 	b.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x828>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004d88:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004d8c:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004d90:	f43f aa61 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d94:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004d98:	f43f aa5d 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d9c:	2601      	movs	r6, #1
 8004d9e:	4635      	mov	r5, r6
 8004da0:	f7ff ba66 	b.w	8004270 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004da4:	f421 5080 	bic.w	r0, r1, #4096	@ 0x1000
 8004da8:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004dac:	f43f a9ea 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004db0:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004db4:	f43f a9e6 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004db8:	2601      	movs	r6, #1
 8004dba:	4635      	mov	r5, r6
 8004dbc:	f7ff b9ef 	b.w	800419e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8004dc0:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8004dc4:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8004dc8:	f43f a80c 	beq.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004dcc:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004dd0:	f43f a808 	beq.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004dd4:	2601      	movs	r6, #1
 8004dd6:	4635      	mov	r5, r6
 8004dd8:	f7ff b810 	b.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8004ddc:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004de0:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8004de4:	f43f ab8d 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004de8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dec:	f43f ab89 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004df0:	2601      	movs	r6, #1
 8004df2:	4635      	mov	r5, r6
 8004df4:	f7ff bb92 	b.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8004df8:	f421 1000 	bic.w	r0, r1, #2097152	@ 0x200000
 8004dfc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004e00:	f43f a874 	beq.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004e04:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8004e08:	f43f a870 	beq.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8004e0c:	2601      	movs	r6, #1
 8004e0e:	4635      	mov	r5, r6
 8004e10:	f7ff b878 	b.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8004e14:	f421 4000 	bic.w	r0, r1, #32768	@ 0x8000
 8004e18:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8004e1c:	f43f a824 	beq.w	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e20:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
 8004e24:	f43f a820 	beq.w	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e28:	2601      	movs	r6, #1
 8004e2a:	4635      	mov	r5, r6
 8004e2c:	f7ff b828 	b.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004e30:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8004e34:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004e38:	f43f aa30 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004e3c:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004e40:	f43f aa2c 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004e44:	2601      	movs	r6, #1
 8004e46:	4635      	mov	r5, r6
 8004e48:	f7ff ba38 	b.w	80042bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004e4c:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8004e50:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8004e54:	f43f a973 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004e58:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8004e5c:	f43f a96f 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004e60:	2601      	movs	r6, #1
 8004e62:	4635      	mov	r5, r6
 8004e64:	f7ff b978 	b.w	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8004e68:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e6c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004e70:	f43f ab69 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004e74:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e78:	f43f ab65 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004e7c:	2601      	movs	r6, #1
 8004e7e:	4635      	mov	r5, r6
 8004e80:	f7ff bb6e 	b.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004e84:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8004e88:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8004e8c:	f43f a99d 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e90:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004e94:	f43f a999 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e98:	2601      	movs	r6, #1
 8004e9a:	4635      	mov	r5, r6
 8004e9c:	f7ff b9a2 	b.w	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004ea0:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 8004ea4:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8004ea8:	f43f a8c4 	beq.w	8004034 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004eac:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004eb0:	f43f a8c0 	beq.w	8004034 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004eb4:	2601      	movs	r6, #1
 8004eb6:	4635      	mov	r5, r6
 8004eb8:	f7ff b8c9 	b.w	800404e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8004ebc:	f421 2080 	bic.w	r0, r1, #262144	@ 0x40000
 8004ec0:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8004ec4:	f43e aff1 	beq.w	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ec8:	f5b1 2f40 	cmp.w	r1, #786432	@ 0xc0000
 8004ecc:	f43e afed 	beq.w	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ed0:	2601      	movs	r6, #1
 8004ed2:	4635      	mov	r5, r6
 8004ed4:	f7fe bff5 	b.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004ed8:	f421 1080 	bic.w	r0, r1, #1048576	@ 0x100000
 8004edc:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8004ee0:	f43f a996 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004ee4:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8004ee8:	f43f a992 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004eec:	2601      	movs	r6, #1
 8004eee:	4635      	mov	r5, r6
 8004ef0:	f7ff b99b 	b.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8004ef4:	f021 6000 	bic.w	r0, r1, #134217728	@ 0x8000000
 8004ef8:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8004efc:	f43f a839 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f00:	f1b1 5fc0 	cmp.w	r1, #402653184	@ 0x18000000
 8004f04:	f43f a835 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f08:	2601      	movs	r6, #1
 8004f0a:	4635      	mov	r5, r6
 8004f0c:	f7ff b83e 	b.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8004f10:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8004f14:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004f18:	f43e af43 	beq.w	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004f1c:	29c0      	cmp	r1, #192	@ 0xc0
 8004f1e:	f43e af40 	beq.w	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004f22:	2601      	movs	r6, #1
 8004f24:	4635      	mov	r5, r6
 8004f26:	f7fe bf48 	b.w	8003dba <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004f2a:	bf00      	nop
 8004f2c:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f30:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004f34:	f43f a9da 	beq.w	80042ec <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004f38:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8004f3c:	f43f a9d6 	beq.w	80042ec <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004f40:	2601      	movs	r6, #1
 8004f42:	4635      	mov	r5, r6
 8004f44:	f7ff b9df 	b.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8004f48:	f5b1 1fc0 	cmp.w	r1, #1572864	@ 0x180000
 8004f4c:	f43f a9f3 	beq.w	8004336 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8004f50:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004f54:	f43f a9ef 	beq.w	8004336 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8004f58:	2601      	movs	r6, #1
 8004f5a:	4635      	mov	r5, r6
 8004f5c:	f7ff b9f8 	b.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8004f60:	29c0      	cmp	r1, #192	@ 0xc0
 8004f62:	f43f aa89 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f66:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004f6a:	f43f aa85 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f6e:	2601      	movs	r6, #1
 8004f70:	4635      	mov	r5, r6
 8004f72:	f7ff ba8e 	b.w	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f76:	4810      	ldr	r0, [pc, #64]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1308>)
 8004f78:	4a10      	ldr	r2, [pc, #64]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x130c>)
 8004f7a:	69c1      	ldr	r1, [r0, #28]
 8004f7c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004f80:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004f84:	430a      	orrs	r2, r1
 8004f86:	61c2      	str	r2, [r0, #28]
 8004f88:	f7ff bbd4 	b.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa84>
        status = ret;
 8004f8c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f8e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f92:	4635      	mov	r5, r6
 8004f94:	f7ff b9f8 	b.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8004f98:	2601      	movs	r6, #1
 8004f9a:	4635      	mov	r5, r6
 8004f9c:	f7ff ba2b 	b.w	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (pPeriphClkInit->OspiClockSelection)
 8004fa0:	2601      	movs	r6, #1
 8004fa2:	4635      	mov	r5, r6
 8004fa4:	f7ff bafe 	b.w	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8004fa8:	2601      	movs	r6, #1
 8004faa:	f7fe beb2 	b.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8004fae:	2601      	movs	r6, #1
 8004fb0:	4635      	mov	r5, r6
 8004fb2:	f7ff b808 	b.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004fb6:	bf00      	nop
 8004fb8:	44020c00 	.word	0x44020c00
 8004fbc:	00ffffcf 	.word	0x00ffffcf

08004fc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fc0:	4a50      	ldr	r2, [pc, #320]	@ (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
{
 8004fc2:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fc4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004fc6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fc8:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004fca:	6a97      	ldr	r7, [r2, #40]	@ 0x28
  if (pll1m != 0U)
 8004fcc:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fd0:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004fd2:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 8004fd6:	d05d      	beq.n	8005094 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fd8:	ee07 4a90 	vmov	s15, r4
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fdc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004fe0:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fe4:	fb07 f101 	mul.w	r1, r7, r1
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ff0:	ee07 1a10 	vmov	s14, r1
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004ff4:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ff8:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8005108 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8004ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005004:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005008:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800500c:	f005 0303 	and.w	r3, r5, #3
    switch (pll1source)
 8005010:	2b02      	cmp	r3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005012:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll1source)
 8005016:	d067      	beq.n	80050e8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8005018:	2b03      	cmp	r3, #3
 800501a:	d06c      	beq.n	80050f6 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	4b3b      	ldr	r3, [pc, #236]	@ (800510c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 8005020:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005024:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005026:	ee07 3a10 	vmov	s14, r3
 800502a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800502e:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8005032:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005036:	4a33      	ldr	r2, [pc, #204]	@ (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 8005038:	6813      	ldr	r3, [r2, #0]
 800503a:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 800503e:	d003      	beq.n	8005048 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005040:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005042:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8005046:	d13d      	bne.n	80050c4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005048:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800504a:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800504c:	6813      	ldr	r3, [r2, #0]
 800504e:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_GetPLL1ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005054:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005056:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800505a:	d121      	bne.n	80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800505c:	4a29      	ldr	r2, [pc, #164]	@ (8005104 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800505e:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	0199      	lsls	r1, r3, #6
 8005064:	d518      	bpl.n	8005098 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005066:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005068:	035b      	lsls	r3, r3, #13
 800506a:	d515      	bpl.n	8005098 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
}
 800506c:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800506e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005074:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005078:	ee06 3a90 	vmov	s13, r3
 800507c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005080:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005084:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005088:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800508c:	ee17 3a90 	vmov	r3, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005090:	6083      	str	r3, [r0, #8]
}
 8005092:	4770      	bx	lr
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005094:	e9c0 4400 	strd	r4, r4, [r0]
}
 8005098:	bcf0      	pop	{r4, r5, r6, r7}
{
 800509a:	2300      	movs	r3, #0
        pPLL1_Clocks->PLL1_R_Frequency = \
 800509c:	6083      	str	r3, [r0, #8]
}
 800509e:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050a0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80050a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050a6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80050aa:	ee06 3a90 	vmov	s13, r3
 80050ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80050b2:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80050b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050ba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80050be:	ee17 3a10 	vmov	r3, s14
 80050c2:	e7cb      	b.n	800505c <HAL_RCCEx_GetPLL1ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050c4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80050c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050ca:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80050ce:	ee06 3a90 	vmov	s13, r3
 80050d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80050d6:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80050da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80050e2:	ee17 3a10 	vmov	r3, s14
 80050e6:	e7af      	b.n	8005048 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050e8:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8005110 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80050ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80050f0:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80050f4:	e79f      	b.n	8005036 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050f6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8005114 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 80050fa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 8005102:	e798      	b.n	8005036 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
 8005104:	44020c00 	.word	0x44020c00
 8005108:	39000000 	.word	0x39000000
 800510c:	03d09000 	.word	0x03d09000
 8005110:	4a742400 	.word	0x4a742400
 8005114:	4af42400 	.word	0x4af42400

08005118 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005118:	4a50      	ldr	r2, [pc, #320]	@ (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800511a:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800511c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800511e:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005120:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005122:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005124:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005128:	6c11      	ldr	r1, [r2, #64]	@ 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800512a:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 800512e:	d05d      	beq.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005130:	ee07 4a90 	vmov	s15, r4
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005134:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005138:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800513c:	fb07 f101 	mul.w	r1, r7, r1
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005140:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005144:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005148:	ee07 1a10 	vmov	s14, r1
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800514c:	ee07 3a90 	vmov	s15, r3
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005150:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005158:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800515c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005160:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005164:	f005 0303 	and.w	r3, r5, #3
    switch (pll2source)
 8005168:	2b02      	cmp	r3, #2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800516a:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll2source)
 800516e:	d067      	beq.n	8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8005170:	2b03      	cmp	r3, #3
 8005172:	d06c      	beq.n	800524e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8005178:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800517c:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800517e:	ee07 3a10 	vmov	s14, r3
 8005182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005186:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800518a:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800518e:	4a33      	ldr	r2, [pc, #204]	@ (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8005190:	6813      	ldr	r3, [r2, #0]
 8005192:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 8005196:	d003      	beq.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005198:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800519a:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800519e:	d13d      	bne.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051a0:	4a2e      	ldr	r2, [pc, #184]	@ (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80051a2:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051a4:	6813      	ldr	r3, [r2, #0]
 80051a6:	f013 6300 	ands.w	r3, r3, #134217728	@ 0x8000000
 80051aa:	d003      	beq.n	80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80051ac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80051ae:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80051b2:	d121      	bne.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051b4:	4a29      	ldr	r2, [pc, #164]	@ (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051b6:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051b8:	6813      	ldr	r3, [r2, #0]
 80051ba:	0119      	lsls	r1, r3, #4
 80051bc:	d518      	bpl.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80051be:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80051c0:	035b      	lsls	r3, r3, #13
 80051c2:	d515      	bpl.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
}
 80051c4:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051c6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80051c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051cc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051d0:	ee06 3a90 	vmov	s13, r3
 80051d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80051d8:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80051dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051e0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80051e4:	ee17 3a90 	vmov	r3, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80051e8:	6083      	str	r3, [r0, #8]
}
 80051ea:	4770      	bx	lr
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80051ec:	e9c0 4400 	strd	r4, r4, [r0]
}
 80051f0:	bcf0      	pop	{r4, r5, r6, r7}
{
 80051f2:	2300      	movs	r3, #0
        pPLL2_Clocks->PLL2_R_Frequency = \
 80051f4:	6083      	str	r3, [r0, #8]
}
 80051f6:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051f8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80051fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051fe:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005202:	ee06 3a90 	vmov	s13, r3
 8005206:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800520a:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800520e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005212:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005216:	ee17 3a10 	vmov	r3, s14
 800521a:	e7cb      	b.n	80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800521c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800521e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005222:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005226:	ee06 3a90 	vmov	s13, r3
 800522a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800522e:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005232:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005236:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800523a:	ee17 3a10 	vmov	r3, s14
 800523e:	e7af      	b.n	80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005240:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8005268 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005244:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005248:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 800524c:	e79f      	b.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800524e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800526c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005252:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 800525a:	e798      	b.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
 800525c:	44020c00 	.word	0x44020c00
 8005260:	39000000 	.word	0x39000000
 8005264:	03d09000 	.word	0x03d09000
 8005268:	4a742400 	.word	0x4a742400
 800526c:	4af42400 	.word	0x4af42400

08005270 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005270:	4a50      	ldr	r2, [pc, #320]	@ (80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8005272:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005274:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005276:	6b15      	ldr	r5, [r2, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005278:	6b16      	ldr	r6, [r2, #48]	@ 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800527a:	6b17      	ldr	r7, [r2, #48]	@ 0x30
  if (pll3m != 0U)
 800527c:	f416 5f7c 	tst.w	r6, #16128	@ 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005280:	6c91      	ldr	r1, [r2, #72]	@ 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005282:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 8005286:	d05d      	beq.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005288:	ee07 4a90 	vmov	s15, r4
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800528c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005290:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005294:	fb07 f101 	mul.w	r1, r7, r1
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800529c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80052a0:	ee07 1a10 	vmov	s14, r1
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80052a4:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052a8:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80052ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80052b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052b4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80052b8:	eee7 7a25 	vfma.f32	s15, s14, s11
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80052bc:	f005 0303 	and.w	r3, r5, #3
    switch (pll3source)
 80052c0:	2b02      	cmp	r3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052c2:	ee77 7a86 	vadd.f32	s15, s15, s12
    switch (pll3source)
 80052c6:	d067      	beq.n	8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d06c      	beq.n	80053a6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	4b3b      	ldr	r3, [pc, #236]	@ (80053bc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 80052d0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80052d4:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052d6:	ee07 3a10 	vmov	s14, r3
 80052da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80052de:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80052e2:	ee66 7a27 	vmul.f32	s15, s12, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052e6:	4a33      	ldr	r2, [pc, #204]	@ (80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 80052ee:	d003      	beq.n	80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80052f0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80052f2:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80052f6:	d13d      	bne.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052f8:	4a2e      	ldr	r2, [pc, #184]	@ (80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80052fa:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052fc:	6813      	ldr	r3, [r2, #0]
 80052fe:	f013 5300 	ands.w	r3, r3, #536870912	@ 0x20000000
 8005302:	d003      	beq.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x9c>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005304:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005306:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800530a:	d121      	bne.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0xe0>
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800530c:	4a29      	ldr	r2, [pc, #164]	@ (80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800530e:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005310:	6813      	ldr	r3, [r2, #0]
 8005312:	0099      	lsls	r1, r3, #2
 8005314:	d518      	bpl.n	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005316:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005318:	035b      	lsls	r3, r3, #13
 800531a:	d515      	bpl.n	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
}
 800531c:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800531e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005324:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005328:	ee06 3a90 	vmov	s13, r3
 800532c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005330:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005338:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800533c:	ee17 3a90 	vmov	r3, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005340:	6083      	str	r3, [r0, #8]
}
 8005342:	4770      	bx	lr
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005344:	e9c0 4400 	strd	r4, r4, [r0]
}
 8005348:	bcf0      	pop	{r4, r5, r6, r7}
{
 800534a:	2300      	movs	r3, #0
        pPLL3_Clocks->PLL3_R_Frequency = \
 800534c:	6083      	str	r3, [r0, #8]
}
 800534e:	4770      	bx	lr
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005350:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005356:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800535a:	ee06 3a90 	vmov	s13, r3
 800535e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005362:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005366:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800536a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800536e:	ee17 3a10 	vmov	r3, s14
 8005372:	e7cb      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x9c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005374:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800537a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800537e:	ee06 3a90 	vmov	s13, r3
 8005382:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005386:	ee76 6a87 	vadd.f32	s13, s13, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800538a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800538e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005392:	ee17 3a10 	vmov	r3, s14
 8005396:	e7af      	b.n	80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005398:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800539c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80053a0:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80053a4:	e79f      	b.n	80052e6 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80053a6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80053aa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
        break;
 80053b2:	e798      	b.n	80052e6 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
 80053b4:	44020c00 	.word	0x44020c00
 80053b8:	39000000 	.word	0x39000000
 80053bc:	03d09000 	.word	0x03d09000
 80053c0:	4a742400 	.word	0x4a742400
 80053c4:	4af42400 	.word	0x4af42400

080053c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80053c8:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 80053cc:	430b      	orrs	r3, r1
 80053ce:	d062      	beq.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
{
 80053d0:	b500      	push	{lr}
    switch (PeriphClk)
 80053d2:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 80053d6:	430b      	orrs	r3, r1
{
 80053d8:	b085      	sub	sp, #20
    switch (PeriphClk)
 80053da:	f000 8785 	beq.w	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80053de:	4bac      	ldr	r3, [pc, #688]	@ (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80053e0:	4298      	cmp	r0, r3
 80053e2:	f171 0300 	sbcs.w	r3, r1, #0
 80053e6:	d21f      	bcs.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80053e8:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80053ec:	430b      	orrs	r3, r1
 80053ee:	f000 85fc 	beq.w	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80053f2:	f240 4301 	movw	r3, #1025	@ 0x401
 80053f6:	4298      	cmp	r0, r3
 80053f8:	f171 0300 	sbcs.w	r3, r1, #0
 80053fc:	d26d      	bcs.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80053fe:	2821      	cmp	r0, #33	@ 0x21
 8005400:	f171 0300 	sbcs.w	r3, r1, #0
 8005404:	f080 80f9 	bcs.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8005408:	ea50 0301 	orrs.w	r3, r0, r1
 800540c:	f001 816f 	beq.w	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
 8005410:	3801      	subs	r0, #1
 8005412:	f141 31ff 	adc.w	r1, r1, #4294967295
 8005416:	2820      	cmp	r0, #32
 8005418:	f171 0100 	sbcs.w	r1, r1, #0
 800541c:	f0c0 8328 	bcc.w	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
        frequency = 0U;
 8005420:	2000      	movs	r0, #0
}
 8005422:	b005      	add	sp, #20
 8005424:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8005428:	2300      	movs	r3, #0
 800542a:	2202      	movs	r2, #2
 800542c:	4291      	cmp	r1, r2
 800542e:	bf08      	it	eq
 8005430:	4298      	cmpeq	r0, r3
 8005432:	f000 877e 	beq.w	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8005436:	4283      	cmp	r3, r0
 8005438:	418a      	sbcs	r2, r1
 800543a:	f0c0 809d 	bcc.w	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800543e:	f100 4270 	add.w	r2, r0, #4026531840	@ 0xf0000000
 8005442:	430a      	orrs	r2, r1
 8005444:	f000 8602 	beq.w	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005448:	4a92      	ldr	r2, [pc, #584]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800544a:	4290      	cmp	r0, r2
 800544c:	f171 0200 	sbcs.w	r2, r1, #0
 8005450:	f080 8154 	bcs.w	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8005454:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005458:	430b      	orrs	r3, r1
 800545a:	f000 82f4 	beq.w	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800545e:	4b8e      	ldr	r3, [pc, #568]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005460:	4298      	cmp	r0, r3
 8005462:	f171 0300 	sbcs.w	r3, r1, #0
 8005466:	f080 81cd 	bcs.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800546a:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
 800546e:	430b      	orrs	r3, r1
 8005470:	f000 8651 	beq.w	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xd4e>
 8005474:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
 8005478:	4308      	orrs	r0, r1
        frequency = 0U;
 800547a:	bf18      	it	ne
 800547c:	2000      	movne	r0, #0
    switch (PeriphClk)
 800547e:	d1d0      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005480:	4b86      	ldr	r3, [pc, #536]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005486:	0659      	lsls	r1, r3, #25
 8005488:	f140 82e3 	bpl.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800548c:	a801      	add	r0, sp, #4
 800548e:	f7ff fe43 	bl	8005118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005492:	9803      	ldr	r0, [sp, #12]
 8005494:	e7c5      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005496:	4a81      	ldr	r2, [pc, #516]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005498:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800549c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80054a4:	0791      	lsls	r1, r2, #30
 80054a6:	d503      	bpl.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ac:	f000 81a4 	beq.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80054b0:	4a7a      	ldr	r2, [pc, #488]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054b2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80054b6:	0112      	lsls	r2, r2, #4
 80054b8:	d503      	bpl.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80054ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054be:	f000 819e 	beq.w	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80054c2:	4a76      	ldr	r2, [pc, #472]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80054c4:	6810      	ldr	r0, [r2, #0]
 80054c6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80054ca:	d005      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054d0:	f000 82ab 	beq.w	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
        frequency = 0U;
 80054d4:	2000      	movs	r0, #0
 80054d6:	4770      	bx	lr
}
 80054d8:	4770      	bx	lr
    switch (PeriphClk)
 80054da:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 80054de:	430b      	orrs	r3, r1
 80054e0:	f000 8762 	beq.w	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 80054e4:	f248 0301 	movw	r3, #32769	@ 0x8001
 80054e8:	4298      	cmp	r0, r3
 80054ea:	f171 0300 	sbcs.w	r3, r1, #0
 80054ee:	f080 80d7 	bcs.w	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80054f2:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80054f6:	430b      	orrs	r3, r1
 80054f8:	f000 819f 	beq.w	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80054fc:	f242 0301 	movw	r3, #8193	@ 0x2001
 8005500:	4298      	cmp	r0, r3
 8005502:	f171 0300 	sbcs.w	r3, r1, #0
 8005506:	f080 84b8 	bcs.w	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800550a:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 800550e:	430b      	orrs	r3, r1
 8005510:	f000 8648 	beq.w	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005514:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8005518:	4308      	orrs	r0, r1
        frequency = 0U;
 800551a:	bf18      	it	ne
 800551c:	2000      	movne	r0, #0
    switch (PeriphClk)
 800551e:	d180      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005520:	495e      	ldr	r1, [pc, #376]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005522:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005526:	f012 62e0 	ands.w	r2, r2, #117440512	@ 0x7000000
 800552a:	f000 8160 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800552e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005532:	f000 8293 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005536:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800553a:	f000 8294 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800553e:	680b      	ldr	r3, [r1, #0]
 8005540:	0798      	lsls	r0, r3, #30
 8005542:	d503      	bpl.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005544:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8005548:	f001 8269 	beq.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1656>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800554c:	4b53      	ldr	r3, [pc, #332]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0599      	lsls	r1, r3, #22
 8005552:	d503      	bpl.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005554:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8005558:	f001 82cf 	beq.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x1732>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800555c:	4b4f      	ldr	r3, [pc, #316]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800555e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005562:	f010 0002 	ands.w	r0, r0, #2
 8005566:	f43f af5c 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800556a:	f1a2 63a0 	sub.w	r3, r2, #83886080	@ 0x5000000
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	03d8      	lsls	r0, r3, #15
 8005576:	e754      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005578:	2240      	movs	r2, #64	@ 0x40
 800557a:	4291      	cmp	r1, r2
 800557c:	bf08      	it	eq
 800557e:	4298      	cmpeq	r0, r3
 8005580:	f000 85ef 	beq.w	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005584:	4283      	cmp	r3, r0
 8005586:	418a      	sbcs	r2, r1
 8005588:	f0c0 8102 	bcc.w	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800558c:	2210      	movs	r2, #16
 800558e:	4291      	cmp	r1, r2
 8005590:	bf08      	it	eq
 8005592:	4298      	cmpeq	r0, r3
 8005594:	f000 81d1 	beq.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8005598:	4283      	cmp	r3, r0
 800559a:	418a      	sbcs	r2, r1
 800559c:	f0c0 84d8 	bcc.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80055a0:	2904      	cmp	r1, #4
 80055a2:	bf08      	it	eq
 80055a4:	4298      	cmpeq	r0, r3
 80055a6:	f000 84f3 	beq.w	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2908      	cmp	r1, #8
 80055ae:	bf08      	it	eq
 80055b0:	4298      	cmpeq	r0, r3
        frequency = 0U;
 80055b2:	bf18      	it	ne
 80055b4:	4618      	movne	r0, r3
    switch (PeriphClk)
 80055b6:	f47f af34 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80055ba:	4b38      	ldr	r3, [pc, #224]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80055c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80055c4:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80055c8:	0798      	lsls	r0, r3, #30
 80055ca:	d502      	bpl.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	f001 8000 	beq.w	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x120a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80055d2:	4b32      	ldr	r3, [pc, #200]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055d8:	0119      	lsls	r1, r3, #4
 80055da:	d502      	bpl.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80055dc:	2a40      	cmp	r2, #64	@ 0x40
 80055de:	f001 8196 	beq.w	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80055e2:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 80055ea:	f43f af1a 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80055ee:	2a80      	cmp	r2, #128	@ 0x80
 80055f0:	f248 0012 	movw	r0, #32786	@ 0x8012
 80055f4:	bf18      	it	ne
 80055f6:	2000      	movne	r0, #0
 80055f8:	e713      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80055fa:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80055fe:	430b      	orrs	r3, r1
 8005600:	f000 81be 	beq.w	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005604:	f240 1301 	movw	r3, #257	@ 0x101
 8005608:	4298      	cmp	r0, r3
 800560a:	f171 0300 	sbcs.w	r3, r1, #0
 800560e:	f080 8463 	bcs.w	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005612:	f1a0 0340 	sub.w	r3, r0, #64	@ 0x40
 8005616:	430b      	orrs	r3, r1
 8005618:	f000 8631 	beq.w	800627e <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
 800561c:	3880      	subs	r0, #128	@ 0x80
 800561e:	4308      	orrs	r0, r1
        frequency = 0U;
 8005620:	bf18      	it	ne
 8005622:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005624:	f47f aefd 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005628:	491c      	ldr	r1, [pc, #112]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800562a:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800562e:	f412 0260 	ands.w	r2, r2, #14680064	@ 0xe00000
 8005632:	f000 8136 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005636:	680b      	ldr	r3, [r1, #0]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	d503      	bpl.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800563c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8005640:	f000 820c 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0098      	lsls	r0, r3, #2
 800564a:	d503      	bpl.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 800564c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005650:	f000 8209 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005654:	4b11      	ldr	r3, [pc, #68]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005656:	6819      	ldr	r1, [r3, #0]
 8005658:	0789      	lsls	r1, r1, #30
 800565a:	d503      	bpl.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800565c:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8005660:	f001 8139 	beq.w	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8005664:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	0598      	lsls	r0, r3, #22
 800566a:	d503      	bpl.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800566c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005670:	f001 8222 	beq.w	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x16f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8005674:	4b09      	ldr	r3, [pc, #36]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005676:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800567a:	f010 0002 	ands.w	r0, r0, #2
 800567e:	f43f aed0 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005682:	f5a2 0320 	sub.w	r3, r2, #10485760	@ 0xa00000
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	03d8      	lsls	r0, r3, #15
 800568e:	e6c8      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005690:	00100001 	.word	0x00100001
 8005694:	10000001 	.word	0x10000001
 8005698:	00800001 	.word	0x00800001
 800569c:	44020c00 	.word	0x44020c00
    switch (PeriphClk)
 80056a0:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f000 80e6 	beq.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80056aa:	4bb0      	ldr	r3, [pc, #704]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80056ac:	4298      	cmp	r0, r3
 80056ae:	f171 0300 	sbcs.w	r3, r1, #0
 80056b2:	f080 83b6 	bcs.w	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
 80056b6:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80056ba:	430b      	orrs	r3, r1
 80056bc:	f000 847e 	beq.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80056c0:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
 80056c4:	4308      	orrs	r0, r1
        frequency = 0U;
 80056c6:	bf18      	it	ne
 80056c8:	2000      	movne	r0, #0
    switch (PeriphClk)
 80056ca:	f47f aeaa 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80056ce:	4aa8      	ldr	r2, [pc, #672]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80056d0:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 80056d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
        switch (srcclk)
 80056d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056dc:	f000 8797 	beq.w	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80056e0:	f200 870d 	bhi.w	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e8:	f000 817c 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f0:	f000 867d 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d07a      	beq.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 80056f8:	2000      	movs	r0, #0
 80056fa:	e692      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 80056fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005700:	4299      	cmp	r1, r3
 8005702:	bf08      	it	eq
 8005704:	4290      	cmpeq	r0, r2
 8005706:	f000 80e7 	beq.w	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800570a:	4282      	cmp	r2, r0
 800570c:	eb73 0201 	sbcs.w	r2, r3, r1
 8005710:	f0c0 8326 	bcc.w	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005714:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
 8005718:	430b      	orrs	r3, r1
 800571a:	f000 8574 	beq.w	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
 800571e:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
 8005722:	4308      	orrs	r0, r1
        frequency = 0U;
 8005724:	bf18      	it	ne
 8005726:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005728:	f47f ae7b 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800572c:	4990      	ldr	r1, [pc, #576]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800572e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005732:	f412 6260 	ands.w	r2, r2, #3584	@ 0xe00
 8005736:	f000 8655 	beq.w	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800573a:	680b      	ldr	r3, [r1, #0]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	d503      	bpl.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005740:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005744:	f000 818a 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8005748:	4b89      	ldr	r3, [pc, #548]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	0098      	lsls	r0, r3, #2
 800574e:	d503      	bpl.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005750:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005754:	f000 8187 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005758:	4b85      	ldr	r3, [pc, #532]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800575a:	6819      	ldr	r1, [r3, #0]
 800575c:	0789      	lsls	r1, r1, #30
 800575e:	d503      	bpl.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
 8005760:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8005764:	f001 80ec 	beq.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1578>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005768:	4b81      	ldr	r3, [pc, #516]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0598      	lsls	r0, r3, #22
 800576e:	d503      	bpl.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 8005770:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005774:	f001 8191 	beq.w	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005778:	4b7d      	ldr	r3, [pc, #500]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005780:	f43f ae4f 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005784:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
 8005788:	487a      	ldr	r0, [pc, #488]	@ (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800578a:	bf18      	it	ne
 800578c:	2000      	movne	r0, #0
 800578e:	e648      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005794:	4291      	cmp	r1, r2
 8005796:	bf08      	it	eq
 8005798:	4298      	cmpeq	r0, r3
 800579a:	f000 8087 	beq.w	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800579e:	4283      	cmp	r3, r0
 80057a0:	418a      	sbcs	r2, r1
 80057a2:	f0c0 8317 	bcc.w	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 80057a6:	2980      	cmp	r1, #128	@ 0x80
 80057a8:	bf08      	it	eq
 80057aa:	4298      	cmpeq	r0, r3
 80057ac:	f000 854e 	beq.w	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 80057b0:	2300      	movs	r3, #0
 80057b2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80057b6:	bf08      	it	eq
 80057b8:	4298      	cmpeq	r0, r3
        frequency = 0U;
 80057ba:	bf18      	it	ne
 80057bc:	4618      	movne	r0, r3
    switch (PeriphClk)
 80057be:	f47f ae30 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80057c2:	496b      	ldr	r1, [pc, #428]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80057c4:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
 80057c8:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
        switch (srcclk)
 80057cc:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 80057d0:	f000 8762 	beq.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 80057d4:	f200 8644 	bhi.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80057d8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80057dc:	f000 8102 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80057e0:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80057e4:	f000 8603 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	f041 8106 	bne.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
}
 80057ee:	b005      	add	sp, #20
 80057f0:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 80057f4:	f7fe b93e 	b.w	8003a74 <HAL_RCC_GetPCLK3Freq>
      frequency = LSE_VALUE;
 80057f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80057fc:	4770      	bx	lr
      frequency = LSI_VALUE;
 80057fe:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8005802:	4770      	bx	lr
    switch (PeriphClk)
 8005804:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 8005808:	430b      	orrs	r3, r1
 800580a:	f000 85a5 	beq.w	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0xf90>
 800580e:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
 8005812:	4308      	orrs	r0, r1
        frequency = 0U;
 8005814:	bf18      	it	ne
 8005816:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005818:	f47f ae03 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800581c:	4b54      	ldr	r3, [pc, #336]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800581e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005822:	f003 0307 	and.w	r3, r3, #7
        switch (srcclk)
 8005826:	2b04      	cmp	r3, #4
 8005828:	f201 818e 	bhi.w	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>
 800582c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005830:	00da00df 	.word	0x00da00df
 8005834:	00e900e4 	.word	0x00e900e4
 8005838:	00eb      	.short	0x00eb
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800583a:	4b4d      	ldr	r3, [pc, #308]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800583c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005840:	f412 3240 	ands.w	r2, r2, #196608	@ 0x30000
 8005844:	d02d      	beq.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005846:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800584a:	f000 85d6 	beq.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800584e:	4b48      	ldr	r3, [pc, #288]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	0789      	lsls	r1, r1, #30
 8005854:	d503      	bpl.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005856:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800585a:	f001 8051 	beq.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800585e:	4b44      	ldr	r3, [pc, #272]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005866:	f43f addc 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800586a:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 800586e:	4842      	ldr	r0, [pc, #264]	@ (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005870:	bf18      	it	ne
 8005872:	2000      	movne	r0, #0
 8005874:	e5d5      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005876:	4a3e      	ldr	r2, [pc, #248]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005878:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 800587c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
        switch (srcclk)
 8005880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005884:	f000 86d4 	beq.w	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 8005888:	f200 8604 	bhi.w	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 800588c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005890:	f000 80a8 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005898:	f000 85a9 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800589c:	2b00      	cmp	r3, #0
 800589e:	f041 80af 	bne.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
}
 80058a2:	b005      	add	sp, #20
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7fe b850 	b.w	800394c <HAL_RCC_GetPCLK1Freq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80058ac:	4a30      	ldr	r2, [pc, #192]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058ae:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80058b2:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80058b6:	f003 0308 	and.w	r3, r3, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80058ba:	0789      	lsls	r1, r1, #30
 80058bc:	f140 85a3 	bpl.w	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8682 	beq.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80058c6:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80058ca:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80058ce:	bf14      	ite	ne
 80058d0:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80058d4:	2000      	moveq	r0, #0
 80058d6:	e5a4      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80058d8:	4925      	ldr	r1, [pc, #148]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058da:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80058de:	f412 42e0 	ands.w	r2, r2, #28672	@ 0x7000
 80058e2:	d084      	beq.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80058e4:	680b      	ldr	r3, [r1, #0]
 80058e6:	0119      	lsls	r1, r3, #4
 80058e8:	d503      	bpl.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80058ea:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80058ee:	f000 80b5 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80058f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	d503      	bpl.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 80058fa:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80058fe:	f000 80b2 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8005902:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	0788      	lsls	r0, r1, #30
 8005908:	d503      	bpl.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800590a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800590e:	f000 87d4 	beq.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8005912:	4b17      	ldr	r3, [pc, #92]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	0599      	lsls	r1, r3, #22
 8005918:	d503      	bpl.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 800591a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800591e:	f001 80c8 	beq.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8005922:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800592a:	f43f ad7a 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800592e:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 8005932:	4810      	ldr	r0, [pc, #64]	@ (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005934:	bf18      	it	ne
 8005936:	2000      	movne	r0, #0
 8005938:	e573      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800593c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005940:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005944:	2a10      	cmp	r2, #16
 8005946:	f000 8084 	beq.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	d502      	bpl.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005950:	2a20      	cmp	r2, #32
 8005952:	f000 8088 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005956:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	f410 5000 	ands.w	r0, r0, #8192	@ 0x2000
 800595e:	f43f ad60 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005962:	2a30      	cmp	r2, #48	@ 0x30
 8005964:	4805      	ldr	r0, [pc, #20]	@ (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005966:	bf18      	it	ne
 8005968:	2000      	movne	r0, #0
 800596a:	e55a      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800596c:	00040001 	.word	0x00040001
 8005970:	44020c00 	.word	0x44020c00
 8005974:	007a1200 	.word	0x007a1200
 8005978:	003d0900 	.word	0x003d0900
 800597c:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8005980:	49a5      	ldr	r1, [pc, #660]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005982:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005986:	f012 62e0 	ands.w	r2, r2, #117440512	@ 0x7000000
 800598a:	d08a      	beq.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800598c:	680b      	ldr	r3, [r1, #0]
 800598e:	0119      	lsls	r1, r3, #4
 8005990:	d502      	bpl.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8005992:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005996:	d061      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8005998:	4b9f      	ldr	r3, [pc, #636]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	d502      	bpl.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 80059a0:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 80059a4:	d05f      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80059a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	0788      	lsls	r0, r1, #30
 80059ac:	d503      	bpl.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80059ae:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 80059b2:	f001 8004 	beq.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80059b6:	4b98      	ldr	r3, [pc, #608]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	0599      	lsls	r1, r3, #22
 80059bc:	d503      	bpl.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80059be:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80059c2:	f001 8058 	beq.w	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x16ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80059c6:	4b94      	ldr	r3, [pc, #592]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80059c8:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80059cc:	f010 0002 	ands.w	r0, r0, #2
 80059d0:	f43f ad27 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80059d4:	f1a2 63a0 	sub.w	r3, r2, #83886080	@ 0x5000000
 80059d8:	fab3 f383 	clz	r3, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	03d8      	lsls	r0, r3, #15
 80059e0:	e51f      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80059e2:	b123      	cbz	r3, 80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x626>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059e4:	a801      	add	r0, sp, #4
 80059e6:	f7ff fb97 	bl	8005118 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80059ea:	9801      	ldr	r0, [sp, #4]
            break;
 80059ec:	e519      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059ee:	a801      	add	r0, sp, #4
 80059f0:	f7ff fae6 	bl	8004fc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80059f4:	9802      	ldr	r0, [sp, #8]
            break;
 80059f6:	e514      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f8:	a801      	add	r0, sp, #4
 80059fa:	f7ff fc39 	bl	8005270 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80059fe:	9801      	ldr	r0, [sp, #4]
            break;
 8005a00:	e50f      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a02:	4886      	ldr	r0, [pc, #536]	@ (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005a04:	e50d      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a06:	4b84      	ldr	r3, [pc, #528]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a08:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a0c:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a0e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a12:	0789      	lsls	r1, r1, #30
 8005a14:	f140 8683 	bpl.w	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x1356>
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	f040 8680 	bne.w	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x1356>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	487f      	ldr	r0, [pc, #508]	@ (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005a22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a26:	40d8      	lsrs	r0, r3
 8005a28:	e4fb      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a2a:	69d3      	ldr	r3, [r2, #28]
 8005a2c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a34:	f4ff ad4e 	bcc.w	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a38:	69d3      	ldr	r3, [r2, #28]
 8005a3a:	487a      	ldr	r0, [pc, #488]	@ (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005a3c:	f3c3 2305 	ubfx	r3, r3, #8, #6
 8005a40:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a44:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005a46:	4b74      	ldr	r3, [pc, #464]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005a4c:	061a      	lsls	r2, r3, #24
 8005a4e:	f53f ad1d 	bmi.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a52:	a801      	add	r0, sp, #4
 8005a54:	f7ff fab4 	bl	8004fc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a58:	9802      	ldr	r0, [sp, #8]
 8005a5a:	e4e2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a5c:	a801      	add	r0, sp, #4
 8005a5e:	f7ff fb5b 	bl	8005118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a62:	9802      	ldr	r0, [sp, #8]
 8005a64:	e4dd      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a66:	a801      	add	r0, sp, #4
 8005a68:	f7ff fc02 	bl	8005270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a6c:	9802      	ldr	r0, [sp, #8]
 8005a6e:	e4d8      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005a70:	281f      	cmp	r0, #31
 8005a72:	f63f acd5 	bhi.w	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005a76:	a301      	add	r3, pc, #4	@ (adr r3, 8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>)
 8005a78:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8005a7c:	08005bb9 	.word	0x08005bb9
 8005a80:	08005b61 	.word	0x08005b61
 8005a84:	08005421 	.word	0x08005421
 8005a88:	08005c93 	.word	0x08005c93
 8005a8c:	08005421 	.word	0x08005421
 8005a90:	08005421 	.word	0x08005421
 8005a94:	08005421 	.word	0x08005421
 8005a98:	08005c29 	.word	0x08005c29
 8005a9c:	08005421 	.word	0x08005421
 8005aa0:	08005421 	.word	0x08005421
 8005aa4:	08005421 	.word	0x08005421
 8005aa8:	08005421 	.word	0x08005421
 8005aac:	08005421 	.word	0x08005421
 8005ab0:	08005421 	.word	0x08005421
 8005ab4:	08005421 	.word	0x08005421
 8005ab8:	08005cf7 	.word	0x08005cf7
 8005abc:	08005421 	.word	0x08005421
 8005ac0:	08005421 	.word	0x08005421
 8005ac4:	08005421 	.word	0x08005421
 8005ac8:	08005421 	.word	0x08005421
 8005acc:	08005421 	.word	0x08005421
 8005ad0:	08005421 	.word	0x08005421
 8005ad4:	08005421 	.word	0x08005421
 8005ad8:	08005421 	.word	0x08005421
 8005adc:	08005421 	.word	0x08005421
 8005ae0:	08005421 	.word	0x08005421
 8005ae4:	08005421 	.word	0x08005421
 8005ae8:	08005421 	.word	0x08005421
 8005aec:	08005421 	.word	0x08005421
 8005af0:	08005421 	.word	0x08005421
 8005af4:	08005421 	.word	0x08005421
 8005af8:	08005afd 	.word	0x08005afd
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005afc:	4946      	ldr	r1, [pc, #280]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005afe:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005b02:	f412 3260 	ands.w	r2, r2, #229376	@ 0x38000
 8005b06:	f43f aecc 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005b0a:	680b      	ldr	r3, [r1, #0]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	d502      	bpl.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005b10:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005b14:	d0a2      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005b16:	4b40      	ldr	r3, [pc, #256]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	0098      	lsls	r0, r3, #2
 8005b1c:	d502      	bpl.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8005b1e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005b22:	d0a0      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005b24:	4b3c      	ldr	r3, [pc, #240]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	0789      	lsls	r1, r1, #30
 8005b2a:	d503      	bpl.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005b2c:	f5b2 3fc0 	cmp.w	r2, #98304	@ 0x18000
 8005b30:	f000 8729 	beq.w	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x15be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005b34:	4b38      	ldr	r3, [pc, #224]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	0598      	lsls	r0, r3, #22
 8005b3a:	d503      	bpl.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 8005b3c:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005b40:	f000 87cf 	beq.w	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x171a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005b44:	4b34      	ldr	r3, [pc, #208]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b46:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005b4a:	f010 0002 	ands.w	r0, r0, #2
 8005b4e:	f43f ac68 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005b52:	f5a2 3320 	sub.w	r3, r2, #163840	@ 0x28000
 8005b56:	fab3 f383 	clz	r3, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	03d8      	lsls	r0, r3, #15
 8005b5e:	e460      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005b60:	492d      	ldr	r1, [pc, #180]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b62:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005b66:	f012 0238 	ands.w	r2, r2, #56	@ 0x38
 8005b6a:	f43f ae9a 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005b6e:	680b      	ldr	r3, [r1, #0]
 8005b70:	0118      	lsls	r0, r3, #4
 8005b72:	d502      	bpl.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005b74:	2a08      	cmp	r2, #8
 8005b76:	f43f af71 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005b7a:	2a10      	cmp	r2, #16
 8005b7c:	f43f af73 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005b80:	4b25      	ldr	r3, [pc, #148]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	0789      	lsls	r1, r1, #30
 8005b86:	d502      	bpl.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8005b88:	2a18      	cmp	r2, #24
 8005b8a:	f000 871f 	beq.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005b8e:	4b22      	ldr	r3, [pc, #136]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	0598      	lsls	r0, r3, #22
 8005b94:	d502      	bpl.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005b96:	2a20      	cmp	r2, #32
 8005b98:	f000 87ac 	beq.w	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x172c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005b9e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005ba2:	f010 0002 	ands.w	r0, r0, #2
 8005ba6:	f43f ac3c 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005baa:	f1a2 0328 	sub.w	r3, r2, #40	@ 0x28
 8005bae:	fab3 f383 	clz	r3, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	03d8      	lsls	r0, r3, #15
 8005bb6:	e434      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005bb8:	4917      	ldr	r1, [pc, #92]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bba:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005bbe:	f012 0207 	ands.w	r2, r2, #7
 8005bc2:	f000 840f 	beq.w	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005bc6:	680b      	ldr	r3, [r1, #0]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	d502      	bpl.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005bcc:	2a01      	cmp	r2, #1
 8005bce:	f43f af45 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005bd2:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	0098      	lsls	r0, r3, #2
 8005bd8:	d502      	bpl.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005bda:	2a02      	cmp	r2, #2
 8005bdc:	f43f af43 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005be0:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	0789      	lsls	r1, r1, #30
 8005be6:	d502      	bpl.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8005be8:	2a03      	cmp	r2, #3
 8005bea:	f000 86be 	beq.w	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x15a2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005bee:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	059b      	lsls	r3, r3, #22
 8005bf4:	d502      	bpl.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005bf6:	2a04      	cmp	r2, #4
 8005bf8:	f000 8770 	beq.w	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x1714>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005bfc:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bfe:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005c02:	f010 0002 	ands.w	r0, r0, #2
 8005c06:	f43f ac0c 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c0a:	f1a2 0305 	sub.w	r3, r2, #5
 8005c0e:	fab3 f383 	clz	r3, r3
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	03d8      	lsls	r0, r3, #15
 8005c16:	e404      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c18:	44020c00 	.word	0x44020c00
 8005c1c:	00bb8000 	.word	0x00bb8000
 8005c20:	03d09000 	.word	0x03d09000
 8005c24:	007a1200 	.word	0x007a1200
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c28:	49a7      	ldr	r1, [pc, #668]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c2a:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005c2e:	f412 6260 	ands.w	r2, r2, #3584	@ 0xe00
 8005c32:	f43f ae36 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005c36:	680b      	ldr	r3, [r1, #0]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	d503      	bpl.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005c3c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005c40:	f43f af0c 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005c44:	4ba0      	ldr	r3, [pc, #640]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	0098      	lsls	r0, r3, #2
 8005c4a:	d503      	bpl.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005c4c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005c50:	f43f af09 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005c54:	4b9c      	ldr	r3, [pc, #624]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c56:	6819      	ldr	r1, [r3, #0]
 8005c58:	0789      	lsls	r1, r1, #30
 8005c5a:	d503      	bpl.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8005c5c:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8005c60:	f000 868a 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005c64:	4b98      	ldr	r3, [pc, #608]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0598      	lsls	r0, r3, #22
 8005c6a:	d503      	bpl.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8005c6c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005c70:	f000 873a 	beq.w	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1720>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005c74:	4b94      	ldr	r3, [pc, #592]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c76:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005c7a:	f010 0002 	ands.w	r0, r0, #2
 8005c7e:	f43f abd0 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c82:	f5a2 6320 	sub.w	r3, r2, #2560	@ 0xa00
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	03d8      	lsls	r0, r3, #15
 8005c8e:	f7ff bbc8 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c92:	498d      	ldr	r1, [pc, #564]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005c94:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005c98:	f412 72e0 	ands.w	r2, r2, #448	@ 0x1c0
 8005c9c:	f43f ae01 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005ca0:	680b      	ldr	r3, [r1, #0]
 8005ca2:	0119      	lsls	r1, r3, #4
 8005ca4:	d502      	bpl.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005ca6:	2a40      	cmp	r2, #64	@ 0x40
 8005ca8:	f43f aed8 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005cac:	4b86      	ldr	r3, [pc, #536]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	d502      	bpl.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005cb4:	2a80      	cmp	r2, #128	@ 0x80
 8005cb6:	f43f aed6 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005cba:	4b83      	ldr	r3, [pc, #524]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	0788      	lsls	r0, r1, #30
 8005cc0:	d502      	bpl.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 8005cc2:	2ac0      	cmp	r2, #192	@ 0xc0
 8005cc4:	f000 8666 	beq.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	0599      	lsls	r1, r3, #22
 8005cce:	d503      	bpl.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
 8005cd0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005cd4:	f000 86ff 	beq.w	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x170e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cda:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005cde:	f010 0002 	ands.w	r0, r0, #2
 8005ce2:	f43f ab9e 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005ce6:	f5a2 73a0 	sub.w	r3, r2, #320	@ 0x140
 8005cea:	fab3 f383 	clz	r3, r3
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	03d8      	lsls	r0, r3, #15
 8005cf2:	f7ff bb96 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005cf6:	4974      	ldr	r1, [pc, #464]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005cf8:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005cfc:	f412 42e0 	ands.w	r2, r2, #28672	@ 0x7000
 8005d00:	f43f adcf 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005d04:	680b      	ldr	r3, [r1, #0]
 8005d06:	0119      	lsls	r1, r3, #4
 8005d08:	d503      	bpl.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8005d0a:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8005d0e:	f43f aea5 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005d12:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	d503      	bpl.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005d1a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005d1e:	f43f aea2 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005d22:	4b69      	ldr	r3, [pc, #420]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	0788      	lsls	r0, r1, #30
 8005d28:	d503      	bpl.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005d2a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8005d2e:	f000 8615 	beq.w	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005d32:	4b65      	ldr	r3, [pc, #404]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	0599      	lsls	r1, r3, #22
 8005d38:	d503      	bpl.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005d3a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8005d3e:	f000 8691 	beq.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005d42:	4b61      	ldr	r3, [pc, #388]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d44:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005d48:	f010 0002 	ands.w	r0, r0, #2
 8005d4c:	f43f ab69 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005d50:	f5a2 43a0 	sub.w	r3, r2, #20480	@ 0x5000
 8005d54:	fab3 f383 	clz	r3, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	03d8      	lsls	r0, r3, #15
 8005d5c:	f7ff bb61 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005d60:	2901      	cmp	r1, #1
 8005d62:	bf08      	it	eq
 8005d64:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005d66:	bf18      	it	ne
 8005d68:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005d6a:	f47f ab5a 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005d6e:	4956      	ldr	r1, [pc, #344]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d70:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8005d74:	f412 3260 	ands.w	r2, r2, #229376	@ 0x38000
 8005d78:	f000 8334 	beq.w	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005d7c:	680b      	ldr	r3, [r1, #0]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	d503      	bpl.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005d82:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005d86:	f43f ae69 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8005d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	0098      	lsls	r0, r3, #2
 8005d90:	d503      	bpl.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8005d92:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005d96:	f43f ae66 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d9c:	6819      	ldr	r1, [r3, #0]
 8005d9e:	0789      	lsls	r1, r1, #30
 8005da0:	d503      	bpl.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8005da2:	f5b2 3fc0 	cmp.w	r2, #98304	@ 0x18000
 8005da6:	f000 85bd 	beq.w	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8005daa:	4b47      	ldr	r3, [pc, #284]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	059b      	lsls	r3, r3, #22
 8005db0:	d503      	bpl.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8005db2:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8005db6:	f000 8661 	beq.w	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8005dba:	4b43      	ldr	r3, [pc, #268]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005dc2:	f43f ab2e 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005dc6:	f5b2 3f20 	cmp.w	r2, #163840	@ 0x28000
 8005dca:	4840      	ldr	r0, [pc, #256]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005dcc:	bf18      	it	ne
 8005dce:	2000      	movne	r0, #0
 8005dd0:	f7ff bb27 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005dd4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005dd8:	bf08      	it	eq
 8005dda:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005ddc:	bf18      	it	ne
 8005dde:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005de0:	f47f ab1f 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005de4:	4938      	ldr	r1, [pc, #224]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005de6:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005dea:	f412 0240 	ands.w	r2, r2, #12582912	@ 0xc00000
 8005dee:	f43f acfe 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005df2:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005df6:	f000 8300 	beq.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005dfa:	680b      	ldr	r3, [r1, #0]
 8005dfc:	079b      	lsls	r3, r3, #30
 8005dfe:	d503      	bpl.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8005e00:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005e04:	f000 8575 	beq.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005e08:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005e10:	f43f ab07 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005e14:	f5b2 0f40 	cmp.w	r2, #12582912	@ 0xc00000
 8005e18:	482d      	ldr	r0, [pc, #180]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005e1a:	bf18      	it	ne
 8005e1c:	2000      	movne	r0, #0
 8005e1e:	f7ff bb00 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005e22:	f5a0 2000 	sub.w	r0, r0, #524288	@ 0x80000
 8005e26:	4308      	orrs	r0, r1
        frequency = 0U;
 8005e28:	bf18      	it	ne
 8005e2a:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005e2c:	f47f aaf9 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e30:	4a25      	ldr	r2, [pc, #148]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005e32:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8005e36:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8005e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e3e:	f43f addb 	beq.w	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005e42:	f67f adce 	bls.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8005e46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e4a:	f000 83c6 	beq.w	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x1212>
 8005e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e52:	f040 85c5 	bne.w	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e56:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e5a:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e5c:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e60:	0798      	lsls	r0, r3, #30
 8005e62:	f140 8447 	bpl.w	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>
 8005e66:	2900      	cmp	r1, #0
 8005e68:	f040 8444 	bne.w	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e6c:	6813      	ldr	r3, [r2, #0]
 8005e6e:	4819      	ldr	r0, [pc, #100]	@ (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>)
 8005e70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005e74:	40d8      	lsrs	r0, r3
 8005e76:	f7ff bad4 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005e7a:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 8005e7e:	4308      	orrs	r0, r1
        frequency = 0U;
 8005e80:	bf18      	it	ne
 8005e82:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005e84:	f47f aacd 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005e88:	490f      	ldr	r1, [pc, #60]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005e8a:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005e8e:	f412 2240 	ands.w	r2, r2, #786432	@ 0xc0000
 8005e92:	f43f ad06 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005e96:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005e9a:	f000 82ae 	beq.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005e9e:	680b      	ldr	r3, [r1, #0]
 8005ea0:	079b      	lsls	r3, r3, #30
 8005ea2:	d503      	bpl.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005ea4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8005ea8:	f000 857b 	beq.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8005eb4:	f43f aab5 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8005eb8:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8005ebc:	4804      	ldr	r0, [pc, #16]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005ebe:	bf18      	it	ne
 8005ec0:	2000      	movne	r0, #0
 8005ec2:	f7ff baae 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005ec6:	bf00      	nop
 8005ec8:	44020c00 	.word	0x44020c00
 8005ecc:	007a1200 	.word	0x007a1200
 8005ed0:	003d0900 	.word	0x003d0900
 8005ed4:	03d09000 	.word	0x03d09000
    switch (PeriphClk)
 8005ed8:	f5a0 7000 	sub.w	r0, r0, #512	@ 0x200
 8005edc:	4308      	orrs	r0, r1
        frequency = 0U;
 8005ede:	bf18      	it	ne
 8005ee0:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005ee2:	f47f aa9e 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005ee6:	4bab      	ldr	r3, [pc, #684]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005ee8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005eec:	f012 5260 	ands.w	r2, r2, #939524096	@ 0x38000000
 8005ef0:	f43f acd7 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	d503      	bpl.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 8005efa:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8005efe:	f43f adad 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005f02:	4ba4      	ldr	r3, [pc, #656]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	0098      	lsls	r0, r3, #2
 8005f08:	d503      	bpl.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005f0a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8005f0e:	f43f adaa 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005f12:	4ba0      	ldr	r3, [pc, #640]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	0789      	lsls	r1, r1, #30
 8005f18:	d503      	bpl.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8005f1a:	f1b2 5fc0 	cmp.w	r2, #402653184	@ 0x18000000
 8005f1e:	f000 84e1 	beq.w	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005f22:	4b9c      	ldr	r3, [pc, #624]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	0598      	lsls	r0, r3, #22
 8005f28:	d503      	bpl.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8005f2a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8005f2e:	f000 85b7 	beq.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005f32:	4b98      	ldr	r3, [pc, #608]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f34:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8005f38:	f010 0002 	ands.w	r0, r0, #2
 8005f3c:	f43f aa71 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005f40:	f1a2 5320 	sub.w	r3, r2, #671088640	@ 0x28000000
 8005f44:	fab3 f383 	clz	r3, r3
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	03d8      	lsls	r0, r3, #15
 8005f4c:	f7ff ba69 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
    switch (PeriphClk)
 8005f50:	2920      	cmp	r1, #32
 8005f52:	bf08      	it	eq
 8005f54:	4298      	cmpeq	r0, r3
        frequency = 0U;
 8005f56:	bf18      	it	ne
 8005f58:	2000      	movne	r0, #0
    switch (PeriphClk)
 8005f5a:	f47f aa62 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005f5e:	4a8d      	ldr	r2, [pc, #564]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f60:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8005f64:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
        switch (srcclk)
 8005f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f6c:	f000 8371 	beq.w	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x128a>
 8005f70:	f200 82ab 	bhi.w	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f78:	f43f ad34 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8005f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f80:	f000 8235 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f43f ac32 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f7ff ba49 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f90:	4a80      	ldr	r2, [pc, #512]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005f92:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005f96:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005f9c:	0390      	lsls	r0, r2, #14
 8005f9e:	d502      	bpl.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 830c 	beq.w	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005faa:	f43f ad52 	beq.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb2:	f43f ad53 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        frequency = 0U;
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7ff ba33 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005fbc:	4975      	ldr	r1, [pc, #468]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005fbe:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005fc2:	f012 7240 	ands.w	r2, r2, #50331648	@ 0x3000000
 8005fc6:	f43f ac6c 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005fca:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8005fce:	f000 8214 	beq.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005fd2:	6808      	ldr	r0, [r1, #0]
 8005fd4:	f010 0002 	ands.w	r0, r0, #2
 8005fd8:	f43f aa23 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005fdc:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8005fe0:	f000 84b5 	beq.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        frequency = 0U;
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f7ff ba1c 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8005fea:	496a      	ldr	r1, [pc, #424]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8005fec:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8005ff0:	f012 0207 	ands.w	r2, r2, #7
 8005ff4:	f43f ac55 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8005ff8:	680b      	ldr	r3, [r1, #0]
 8005ffa:	0119      	lsls	r1, r3, #4
 8005ffc:	d502      	bpl.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
 8005ffe:	2a01      	cmp	r2, #1
 8006000:	f43f ad2c 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006004:	4b63      	ldr	r3, [pc, #396]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	d502      	bpl.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800600c:	2a02      	cmp	r2, #2
 800600e:	f43f ad2a 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006012:	4b60      	ldr	r3, [pc, #384]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	0788      	lsls	r0, r1, #30
 8006018:	d502      	bpl.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 800601a:	2a03      	cmp	r2, #3
 800601c:	f000 847b 	beq.w	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006020:	4b5c      	ldr	r3, [pc, #368]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	0599      	lsls	r1, r3, #22
 8006026:	d502      	bpl.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8006028:	2a04      	cmp	r2, #4
 800602a:	f000 8548 	beq.w	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800602e:	4b59      	ldr	r3, [pc, #356]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006030:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8006034:	f010 0002 	ands.w	r0, r0, #2
 8006038:	f43f a9f3 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800603c:	f1a2 0305 	sub.w	r3, r2, #5
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	03d8      	lsls	r0, r3, #15
 8006048:	f7ff b9eb 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800604c:	4b51      	ldr	r3, [pc, #324]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 800604e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
        switch (srcclk)
 8006056:	2b20      	cmp	r3, #32
 8006058:	d844      	bhi.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800605a:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	080059ef 	.word	0x080059ef
 8006064:	080060e5 	.word	0x080060e5
 8006068:	080060e5 	.word	0x080060e5
 800606c:	080060e5 	.word	0x080060e5
 8006070:	080060e5 	.word	0x080060e5
 8006074:	080060e5 	.word	0x080060e5
 8006078:	080060e5 	.word	0x080060e5
 800607c:	080060e5 	.word	0x080060e5
 8006080:	080059e5 	.word	0x080059e5
 8006084:	080060e5 	.word	0x080060e5
 8006088:	080060e5 	.word	0x080060e5
 800608c:	080060e5 	.word	0x080060e5
 8006090:	080060e5 	.word	0x080060e5
 8006094:	080060e5 	.word	0x080060e5
 8006098:	080060e5 	.word	0x080060e5
 800609c:	080060e5 	.word	0x080060e5
 80060a0:	080059f9 	.word	0x080059f9
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	080060e5 	.word	0x080060e5
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	08006111 	.word	0x08006111
 80060c4:	080060e5 	.word	0x080060e5
 80060c8:	080060e5 	.word	0x080060e5
 80060cc:	080060e5 	.word	0x080060e5
 80060d0:	080060e5 	.word	0x080060e5
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060e5 	.word	0x080060e5
 80060dc:	080060e5 	.word	0x080060e5
 80060e0:	080060eb 	.word	0x080060eb
        frequency = 0U;
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7ff b99c 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 80060ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060f0:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060f2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060f6:	0789      	lsls	r1, r1, #30
 80060f8:	f140 8326 	bpl.w	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	f040 8323 	bne.w	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4824      	ldr	r0, [pc, #144]	@ (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>)
 8006106:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800610a:	40d8      	lsrs	r0, r3
 800610c:	f7ff b989 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 8006110:	4822      	ldr	r0, [pc, #136]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>)
 8006112:	f7ff b986 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006116:	491f      	ldr	r1, [pc, #124]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006118:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800611c:	f012 0207 	ands.w	r2, r2, #7
 8006120:	f000 8115 	beq.w	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006124:	2a01      	cmp	r2, #1
 8006126:	f000 82c8 	beq.w	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800612a:	2a02      	cmp	r2, #2
 800612c:	f000 836b 	beq.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006130:	680b      	ldr	r3, [r1, #0]
 8006132:	039b      	lsls	r3, r3, #14
 8006134:	d502      	bpl.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8006136:	2a03      	cmp	r2, #3
 8006138:	f000 84d9 	beq.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x1726>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800613c:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	0788      	lsls	r0, r1, #30
 8006142:	d502      	bpl.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
 8006144:	2a04      	cmp	r2, #4
 8006146:	f000 8477 	beq.w	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800614a:	4b12      	ldr	r3, [pc, #72]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 8006152:	f43f a966 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006156:	2a05      	cmp	r2, #5
 8006158:	4811      	ldr	r0, [pc, #68]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd8>)
 800615a:	bf18      	it	ne
 800615c:	2000      	movne	r0, #0
 800615e:	f7ff b960 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006162:	4a0c      	ldr	r2, [pc, #48]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
 8006164:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8006168:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
        switch (srcclk)
 800616c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006170:	f000 823c 	beq.w	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8006174:	f200 8153 	bhi.w	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 8006178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800617c:	f43f ac32 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006184:	f000 8133 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006188:	2b00      	cmp	r3, #0
 800618a:	f43f ab30 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 800618e:	2000      	movs	r0, #0
 8006190:	f7ff b947 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006194:	44020c00 	.word	0x44020c00
 8006198:	03d09000 	.word	0x03d09000
 800619c:	00bb8000 	.word	0x00bb8000
 80061a0:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80061a4:	49ab      	ldr	r1, [pc, #684]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061a6:	f8d1 20dc 	ldr.w	r2, [r1, #220]	@ 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80061aa:	f012 0270 	ands.w	r2, r2, #112	@ 0x70
 80061ae:	f43f ab78 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80061b2:	680b      	ldr	r3, [r1, #0]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	d502      	bpl.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80061b8:	2a10      	cmp	r2, #16
 80061ba:	f43f ac4f 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80061be:	4ba5      	ldr	r3, [pc, #660]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	0098      	lsls	r0, r3, #2
 80061c4:	d502      	bpl.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 80061c6:	2a20      	cmp	r2, #32
 80061c8:	f43f ac4d 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80061cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	0789      	lsls	r1, r1, #30
 80061d2:	d502      	bpl.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
 80061d4:	2a30      	cmp	r2, #48	@ 0x30
 80061d6:	f000 8377 	beq.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80061da:	4b9e      	ldr	r3, [pc, #632]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	059b      	lsls	r3, r3, #22
 80061e0:	d502      	bpl.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
 80061e2:	2a40      	cmp	r2, #64	@ 0x40
 80061e4:	f000 846e 	beq.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80061e8:	4b9a      	ldr	r3, [pc, #616]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80061ea:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80061ee:	f010 0002 	ands.w	r0, r0, #2
 80061f2:	f43f a916 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80061f6:	f1a2 0350 	sub.w	r3, r2, #80	@ 0x50
 80061fa:	fab3 f383 	clz	r3, r3
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	03d8      	lsls	r0, r3, #15
 8006202:	f7ff b90e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006206:	4a93      	ldr	r2, [pc, #588]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006208:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800620c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
        switch (srcclk)
 8006210:	2b80      	cmp	r3, #128	@ 0x80
 8006212:	f43f abf1 	beq.w	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006216:	f67f abe4 	bls.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800621a:	2bc0      	cmp	r3, #192	@ 0xc0
 800621c:	f000 81e0 	beq.w	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
 8006220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006224:	f040 83df 	bne.w	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x161e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006228:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800622c:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800622e:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006232:	0798      	lsls	r0, r3, #30
 8006234:	f140 82a8 	bpl.w	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
 8006238:	2900      	cmp	r1, #0
 800623a:	f040 82a5 	bne.w	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800623e:	6813      	ldr	r3, [r2, #0]
 8006240:	4885      	ldr	r0, [pc, #532]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 8006242:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006246:	40d8      	lsrs	r0, r3
 8006248:	f7ff b8eb 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800624c:	4a81      	ldr	r2, [pc, #516]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800624e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
 8006252:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
        switch (srcclk)
 8006256:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800625a:	f000 820c 	beq.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 800625e:	f200 8168 	bhi.w	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
 8006262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006266:	f43f abbd 	beq.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800626a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800626e:	f000 80be 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006272:	2b00      	cmp	r3, #0
 8006274:	f43f aabb 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = 0U;
 8006278:	2000      	movs	r0, #0
 800627a:	f7ff b8d2 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800627e:	4b75      	ldr	r3, [pc, #468]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006280:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006284:	f412 12e0 	ands.w	r2, r2, #1835008	@ 0x1c0000
 8006288:	f43f ab0b 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	0119      	lsls	r1, r3, #4
 8006290:	d503      	bpl.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 8006292:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8006296:	f43f abe1 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800629a:	4b6e      	ldr	r3, [pc, #440]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	d503      	bpl.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 80062a2:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80062a6:	f43f abde 	beq.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80062aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062ac:	6819      	ldr	r1, [r3, #0]
 80062ae:	0788      	lsls	r0, r1, #30
 80062b0:	d503      	bpl.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80062b2:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 80062b6:	f000 837b 	beq.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80062ba:	4b66      	ldr	r3, [pc, #408]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	0599      	lsls	r1, r3, #22
 80062c0:	d503      	bpl.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 80062c2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80062c6:	f000 8400 	beq.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x1702>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80062ca:	4b62      	ldr	r3, [pc, #392]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062cc:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80062d0:	f010 0002 	ands.w	r0, r0, #2
 80062d4:	f43f a8a5 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80062d8:	f5a2 13a0 	sub.w	r3, r2, #1310720	@ 0x140000
 80062dc:	fab3 f383 	clz	r3, r3
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	03d8      	lsls	r0, r3, #15
 80062e4:	f7ff b89d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80062e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80062ea:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80062ee:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
        switch (srcclk)
 80062f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062f6:	f43f ab7f 	beq.w	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80062fa:	f67f ab72 	bls.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80062fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006302:	f000 8170 	beq.w	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 8006306:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800630a:	f040 8366 	bne.w	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800630e:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006312:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006314:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006318:	079b      	lsls	r3, r3, #30
 800631a:	f140 81d3 	bpl.w	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12fc>
 800631e:	2900      	cmp	r1, #0
 8006320:	f040 81d0 	bne.w	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12fc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006324:	6813      	ldr	r3, [r2, #0]
 8006326:	484c      	ldr	r0, [pc, #304]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 8006328:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800632c:	40d8      	lsrs	r0, r3
 800632e:	f7ff b878 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006332:	4a48      	ldr	r2, [pc, #288]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006334:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006338:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 800633c:	2b02      	cmp	r3, #2
 800633e:	f000 8111 	beq.w	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 8006342:	2b03      	cmp	r3, #3
 8006344:	f000 8117 	beq.w	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x11ae>
 8006348:	2b01      	cmp	r3, #1
 800634a:	f43f ab50 	beq.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x626>
}
 800634e:	b005      	add	sp, #20
 8006350:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 8006354:	f7fd babc 	b.w	80038d0 <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006358:	4b3e      	ldr	r3, [pc, #248]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800635a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800635e:	681b      	ldr	r3, [r3, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006360:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006364:	049b      	lsls	r3, r3, #18
 8006366:	d502      	bpl.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 8006368:	2a00      	cmp	r2, #0
 800636a:	f000 812b 	beq.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800636e:	4b39      	ldr	r3, [pc, #228]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	0198      	lsls	r0, r3, #6
 8006374:	d502      	bpl.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>
 8006376:	2a10      	cmp	r2, #16
 8006378:	f43f ab6b 	beq.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800637c:	4b35      	ldr	r3, [pc, #212]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800637e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006382:	0799      	lsls	r1, r3, #30
 8006384:	d502      	bpl.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>
 8006386:	2a20      	cmp	r2, #32
 8006388:	f000 8333 	beq.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800638c:	4b31      	ldr	r3, [pc, #196]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 800638e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8006392:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006396:	f43f a844 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800639a:	2a30      	cmp	r2, #48	@ 0x30
 800639c:	bf0c      	ite	eq
 800639e:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 80063a2:	2000      	movne	r0, #0
 80063a4:	f7ff b83d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80063a8:	492a      	ldr	r1, [pc, #168]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80063aa:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80063ae:	f412 1240 	ands.w	r2, r2, #3145728	@ 0x300000
 80063b2:	f43f aa1c 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80063b6:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80063ba:	d01e      	beq.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x1032>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80063bc:	680b      	ldr	r3, [r1, #0]
 80063be:	0798      	lsls	r0, r3, #30
 80063c0:	d503      	bpl.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x1002>
 80063c2:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 80063c6:	f000 82b4 	beq.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x156a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80063ca:	4b22      	ldr	r3, [pc, #136]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f410 7000 	ands.w	r0, r0, #512	@ 0x200
 80063d2:	f43f a826 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80063d6:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 80063da:	4820      	ldr	r0, [pc, #128]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>)
 80063dc:	bf18      	it	ne
 80063de:	2000      	movne	r0, #0
 80063e0:	f7ff b81f 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
}
 80063e4:	b005      	add	sp, #20
 80063e6:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 80063ea:	f7fd baf9 	b.w	80039e0 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ee:	a801      	add	r0, sp, #4
 80063f0:	f7fe ff3e 	bl	8005270 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80063f4:	9803      	ldr	r0, [sp, #12]
            break;
 80063f6:	f7ff b814 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fa:	a801      	add	r0, sp, #4
 80063fc:	f7fe ff38 	bl	8005270 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006400:	9803      	ldr	r0, [sp, #12]
 8006402:	f7ff b80e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006406:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800640a:	0112      	lsls	r2, r2, #4
 800640c:	f140 80b0 	bpl.w	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        frequency = 0U;
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf14      	ite	ne
 8006414:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006418:	2000      	moveq	r0, #0
 800641a:	f7ff b802 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 800641e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006422:	f000 8140 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8006426:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800642a:	f040 82ec 	bne.w	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800642e:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x108c>)
 8006430:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006434:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006436:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800643a:	0789      	lsls	r1, r1, #30
 800643c:	f140 8213 	bpl.w	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
 8006440:	2a00      	cmp	r2, #0
 8006442:	f040 8210 	bne.w	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4803      	ldr	r0, [pc, #12]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>)
 800644a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800644e:	40d8      	lsrs	r0, r3
 8006450:	f7fe bfe7 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006454:	44020c00 	.word	0x44020c00
 8006458:	03d09000 	.word	0x03d09000
 800645c:	003d0900 	.word	0x003d0900
        switch (srcclk)
 8006460:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006464:	f000 80eb 	beq.w	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8006468:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800646c:	f040 82d4 	bne.w	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006470:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006474:	680b      	ldr	r3, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006476:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800647a:	0798      	lsls	r0, r3, #30
 800647c:	f140 81ae 	bpl.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
 8006480:	2a00      	cmp	r2, #0
 8006482:	f040 81ab 	bne.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x1414>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006486:	680b      	ldr	r3, [r1, #0]
 8006488:	48ba      	ldr	r0, [pc, #744]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800648a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800648e:	40d8      	lsrs	r0, r3
 8006490:	f7fe bfc7 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8006494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006498:	f000 80e2 	beq.w	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800649c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80064a0:	f040 82c4 	bne.w	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064a4:	4bb4      	ldr	r3, [pc, #720]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80064a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064aa:	6819      	ldr	r1, [r3, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ac:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064b0:	0788      	lsls	r0, r1, #30
 80064b2:	f140 81ed 	bpl.w	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x14c8>
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	f040 81ea 	bne.w	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x14c8>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	48ad      	ldr	r0, [pc, #692]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80064c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064c4:	40d8      	lsrs	r0, r3
 80064c6:	f7fe bfac 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80064ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064ce:	f000 80a5 	beq.w	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80064d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064d6:	f040 829c 	bne.w	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x164a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064da:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064de:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064e0:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064e4:	079b      	lsls	r3, r3, #30
 80064e6:	f140 81a9 	bpl.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x1474>
 80064ea:	2900      	cmp	r1, #0
 80064ec:	f040 81a6 	bne.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x1474>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064f0:	6813      	ldr	r3, [r2, #0]
 80064f2:	48a0      	ldr	r0, [pc, #640]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80064f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064f8:	40d8      	lsrs	r0, r3
 80064fa:	f7fe bf92 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006502:	f000 80bf 	beq.w	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8006506:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800650a:	f040 8292 	bne.w	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800650e:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006512:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006514:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006518:	0798      	lsls	r0, r3, #30
 800651a:	f140 814a 	bpl.w	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
 800651e:	2900      	cmp	r1, #0
 8006520:	f040 8147 	bne.w	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006524:	6813      	ldr	r3, [r2, #0]
 8006526:	4893      	ldr	r0, [pc, #588]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8006528:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800652c:	40d8      	lsrs	r0, r3
 800652e:	f7fe bf78 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        switch (srcclk)
 8006532:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006536:	d060      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
 8006538:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800653c:	f040 8266 	bne.w	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006540:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006544:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006546:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800654a:	0798      	lsls	r0, r3, #30
 800654c:	f140 8161 	bpl.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
 8006550:	2900      	cmp	r1, #0
 8006552:	f040 815e 	bne.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x144a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006556:	6813      	ldr	r3, [r2, #0]
 8006558:	4886      	ldr	r0, [pc, #536]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800655a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800655e:	40d8      	lsrs	r0, r3
 8006560:	f7fe bf5f 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006564:	a801      	add	r0, sp, #4
 8006566:	f7fe fdd7 	bl	8005118 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800656a:	9803      	ldr	r0, [sp, #12]
            break;
 800656c:	f7fe bf59 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006570:	2000      	movs	r0, #0
 8006572:	f7fe bf56 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006576:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800657a:	6813      	ldr	r3, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800657c:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006580:	0798      	lsls	r0, r3, #30
 8006582:	d507      	bpl.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x11cc>
 8006584:	b931      	cbnz	r1, 8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x11cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	487a      	ldr	r0, [pc, #488]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800658a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800658e:	40d8      	lsrs	r0, r3
 8006590:	f7fe bf47 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006594:	4b78      	ldr	r3, [pc, #480]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d503      	bpl.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 800659c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80065a0:	f000 82ae 	beq.w	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1738>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065a4:	4b74      	ldr	r3, [pc, #464]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80065ac:	f000 821e 	beq.w	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1624>
        frequency = 0U;
 80065b0:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80065b4:	4871      	ldr	r0, [pc, #452]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80065b6:	bf18      	it	ne
 80065b8:	2000      	movne	r0, #0
 80065ba:	f7fe bf32 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = HSE_VALUE;
 80065be:	486f      	ldr	r0, [pc, #444]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80065c0:	f7fe bf2f 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSI48_VALUE;
 80065c4:	486e      	ldr	r0, [pc, #440]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80065c6:	f7fe bf2c 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSE_VALUE;
 80065ca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80065ce:	f7fe bf28 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80065d2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80065d6:	f7fe bf24 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            frequency = EXTERNAL_CLOCK_VALUE;
 80065da:	486a      	ldr	r0, [pc, #424]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80065dc:	f7fe bf21 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80065e0:	4868      	ldr	r0, [pc, #416]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80065e2:	f7fe bf1e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80065e6:	4867      	ldr	r0, [pc, #412]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80065e8:	f7fe bf1b 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065ec:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80065f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80065f4:	03c0      	lsls	r0, r0, #15
 80065f6:	f7fe bf14 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80065fa:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80065fe:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006602:	bf14      	ite	ne
 8006604:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006608:	2000      	moveq	r0, #0
 800660a:	f7fe bf0a 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800660e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006612:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006616:	03c0      	lsls	r0, r0, #15
 8006618:	f7fe bf03 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800661c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 8006620:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006624:	bf14      	ite	ne
 8006626:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800662a:	2000      	moveq	r0, #0
 800662c:	f7fe bef9 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006630:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006634:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006638:	03c0      	lsls	r0, r0, #15
 800663a:	f7fe bef2 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800663e:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
        frequency = 0U;
 8006642:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006646:	bf14      	ite	ne
 8006648:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 800664c:	2000      	moveq	r0, #0
 800664e:	f7fe bee8 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006652:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006656:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800665a:	03c0      	lsls	r0, r0, #15
 800665c:	f7fe bee1 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006660:	4b45      	ldr	r3, [pc, #276]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = 0U;
 8006666:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800666a:	bf14      	ite	ne
 800666c:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006670:	2000      	moveq	r0, #0
 8006672:	f7fe bed6 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006676:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800667a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800667e:	03c0      	lsls	r0, r0, #15
 8006680:	f7fe becf 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006684:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 8006688:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800668c:	bf14      	ite	ne
 800668e:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8006692:	2000      	moveq	r0, #0
 8006694:	f7fe bec5 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006698:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 800669c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80066a0:	03c0      	lsls	r0, r0, #15
 80066a2:	f7fe bebe 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80066a6:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = 0U;
 80066aa:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80066ae:	bf14      	ite	ne
 80066b0:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 80066b4:	2000      	moveq	r0, #0
 80066b6:	f7fe beb4 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
}
 80066ba:	b005      	add	sp, #20
 80066bc:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 80066c0:	f7fd b8d8 	b.w	8003874 <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c4:	4b2c      	ldr	r3, [pc, #176]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	0598      	lsls	r0, r3, #22
 80066ca:	d503      	bpl.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 80066cc:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80066d0:	f000 8219 	beq.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066d4:	4b28      	ldr	r3, [pc, #160]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80066dc:	f000 81b3 	beq.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x167e>
        frequency = 0U;
 80066e0:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80066e4:	4825      	ldr	r0, [pc, #148]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80066e6:	bf18      	it	ne
 80066e8:	2000      	movne	r0, #0
 80066ea:	f7fe be9a 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80066ee:	2000      	movs	r0, #0
 80066f0:	f7fe be97 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066f4:	4b20      	ldr	r3, [pc, #128]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	059a      	lsls	r2, r3, #22
 80066fa:	d503      	bpl.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 80066fc:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006700:	f000 8204 	beq.w	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006704:	4b1c      	ldr	r3, [pc, #112]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800670c:	f000 81a1 	beq.w	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x168a>
        frequency = 0U;
 8006710:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006714:	4819      	ldr	r0, [pc, #100]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006716:	bf18      	it	ne
 8006718:	2000      	movne	r0, #0
 800671a:	f7fe be82 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800671e:	4b16      	ldr	r3, [pc, #88]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	0598      	lsls	r0, r3, #22
 8006724:	d503      	bpl.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8006726:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800672a:	f000 8201 	beq.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1768>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800672e:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006736:	f000 818f 	beq.w	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>
        frequency = 0U;
 800673a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800673e:	480f      	ldr	r0, [pc, #60]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006740:	bf18      	it	ne
 8006742:	2000      	movne	r0, #0
 8006744:	f7fe be6d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006748:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	059b      	lsls	r3, r3, #22
 800674e:	d503      	bpl.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 8006750:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006754:	f000 81ef 	beq.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006758:	4b07      	ldr	r3, [pc, #28]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006760:	f000 817d 	beq.w	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1696>
        frequency = 0U;
 8006764:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006768:	4804      	ldr	r0, [pc, #16]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800676a:	bf18      	it	ne
 800676c:	2000      	movne	r0, #0
 800676e:	f7fe be58 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006772:	bf00      	nop
 8006774:	03d09000 	.word	0x03d09000
 8006778:	44020c00 	.word	0x44020c00
 800677c:	007a1200 	.word	0x007a1200
 8006780:	02dc6c00 	.word	0x02dc6c00
 8006784:	00bb8000 	.word	0x00bb8000
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006788:	4bbe      	ldr	r3, [pc, #760]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	059a      	lsls	r2, r3, #22
 800678e:	d503      	bpl.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8006790:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006794:	f000 81d2 	beq.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006798:	4bba      	ldr	r3, [pc, #744]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067a0:	f000 8154 	beq.w	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1684>
        frequency = 0U;
 80067a4:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80067a8:	48b7      	ldr	r0, [pc, #732]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067aa:	bf18      	it	ne
 80067ac:	2000      	movne	r0, #0
 80067ae:	f7fe be38 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067b2:	4bb4      	ldr	r3, [pc, #720]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	059b      	lsls	r3, r3, #22
 80067b8:	d503      	bpl.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13fa>
 80067ba:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80067be:	f000 81c0 	beq.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x177a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067c2:	4bb0      	ldr	r3, [pc, #704]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067ca:	f000 8151 	beq.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
        frequency = 0U;
 80067ce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80067d2:	48ad      	ldr	r0, [pc, #692]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067d4:	bf18      	it	ne
 80067d6:	2000      	movne	r0, #0
 80067d8:	f7fe be23 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067dc:	4ba9      	ldr	r3, [pc, #676]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	059b      	lsls	r3, r3, #22
 80067e2:	d503      	bpl.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 80067e4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80067e8:	f000 8193 	beq.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067ec:	4ba5      	ldr	r3, [pc, #660]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80067f4:	f000 816c 	beq.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
        frequency = 0U;
 80067f8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80067fc:	48a2      	ldr	r0, [pc, #648]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80067fe:	bf18      	it	ne
 8006800:	2000      	movne	r0, #0
 8006802:	f7fe be0e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006806:	a801      	add	r0, sp, #4
 8006808:	f7fe fc86 	bl	8005118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800680c:	9803      	ldr	r0, [sp, #12]
 800680e:	f7fe be08 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006812:	4b9c      	ldr	r3, [pc, #624]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	059b      	lsls	r3, r3, #22
 8006818:	d503      	bpl.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800681a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800681e:	f000 817b 	beq.w	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1750>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006822:	4b98      	ldr	r3, [pc, #608]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800682a:	f000 811e 	beq.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
        frequency = 0U;
 800682e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8006832:	4895      	ldr	r0, [pc, #596]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006834:	bf18      	it	ne
 8006836:	2000      	movne	r0, #0
 8006838:	f7fe bdf3 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800683c:	4b91      	ldr	r3, [pc, #580]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	0598      	lsls	r0, r3, #22
 8006842:	d503      	bpl.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x1484>
 8006844:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006848:	f000 8169 	beq.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1756>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800684c:	4b8d      	ldr	r3, [pc, #564]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8006854:	f000 812a 	beq.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x16e4>
        frequency = 0U;
 8006858:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800685c:	488a      	ldr	r0, [pc, #552]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800685e:	bf18      	it	ne
 8006860:	2000      	movne	r0, #0
 8006862:	f7fe bdde 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006866:	4b87      	ldr	r3, [pc, #540]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	059b      	lsls	r3, r3, #22
 800686c:	d503      	bpl.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x14ae>
 800686e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006872:	f000 8157 	beq.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006876:	4b83      	ldr	r3, [pc, #524]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800687e:	f000 8109 	beq.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x16cc>
        frequency = 0U;
 8006882:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006886:	4880      	ldr	r0, [pc, #512]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8006888:	bf18      	it	ne
 800688a:	2000      	movne	r0, #0
 800688c:	f7fe bdc9 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006890:	4b7c      	ldr	r3, [pc, #496]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	0599      	lsls	r1, r3, #22
 8006896:	d503      	bpl.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14d8>
 8006898:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800689c:	f000 8145 	beq.w	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068a0:	4b78      	ldr	r3, [pc, #480]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80068a8:	f000 80fd 	beq.w	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
        frequency = 0U;
 80068ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80068b0:	4875      	ldr	r0, [pc, #468]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80068b2:	bf18      	it	ne
 80068b4:	2000      	movne	r0, #0
 80068b6:	f7fe bdb4 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4873      	ldr	r0, [pc, #460]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068c2:	40d8      	lsrs	r0, r3
 80068c4:	f7fe bdad 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4870      	ldr	r0, [pc, #448]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068d0:	40d8      	lsrs	r0, r3
 80068d2:	f7fe bda6 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	486c      	ldr	r0, [pc, #432]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068de:	40d8      	lsrs	r0, r3
 80068e0:	f7fe bd9f 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4869      	ldr	r0, [pc, #420]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068ec:	40d8      	lsrs	r0, r3
 80068ee:	f7fe bd98 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068f2:	680b      	ldr	r3, [r1, #0]
 80068f4:	4865      	ldr	r0, [pc, #404]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80068f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068fa:	40d8      	lsrs	r0, r3
 80068fc:	f7fe bd91 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4862      	ldr	r0, [pc, #392]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006904:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006908:	40d8      	lsrs	r0, r3
 800690a:	f7fe bd8a 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSI_VALUE;
 800690e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8006912:	f7fe bd86 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	485c      	ldr	r0, [pc, #368]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800691a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800691e:	40d8      	lsrs	r0, r3
 8006920:	f7fe bd7f 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4859      	ldr	r0, [pc, #356]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006928:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800692c:	40d8      	lsrs	r0, r3
 800692e:	f7fe bd78 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006932:	680b      	ldr	r3, [r1, #0]
 8006934:	4855      	ldr	r0, [pc, #340]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006936:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800693a:	40d8      	lsrs	r0, r3
 800693c:	f7fe bd71 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4852      	ldr	r0, [pc, #328]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006944:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006948:	40d8      	lsrs	r0, r3
 800694a:	f7fe bd6a 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800694e:	680b      	ldr	r3, [r1, #0]
 8006950:	484e      	ldr	r0, [pc, #312]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006952:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006956:	40d8      	lsrs	r0, r3
 8006958:	f7fe bd63 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	484b      	ldr	r0, [pc, #300]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006960:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006964:	40d8      	lsrs	r0, r3
 8006966:	f7fe bd5c 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4847      	ldr	r0, [pc, #284]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800696e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006972:	40d8      	lsrs	r0, r3
 8006974:	f7fe bd55 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4844      	ldr	r0, [pc, #272]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800697c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006980:	40d8      	lsrs	r0, r3
 8006982:	f7fe bd4e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4840      	ldr	r0, [pc, #256]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 800698a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800698e:	40d8      	lsrs	r0, r3
 8006990:	f7fe bd47 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	483d      	ldr	r0, [pc, #244]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006998:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800699c:	40d8      	lsrs	r0, r3
 800699e:	f7fe bd40 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069a2:	680b      	ldr	r3, [r1, #0]
 80069a4:	4839      	ldr	r0, [pc, #228]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80069a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069aa:	40d8      	lsrs	r0, r3
 80069ac:	f7fe bd39 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4836      	ldr	r0, [pc, #216]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80069b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069b8:	40d8      	lsrs	r0, r3
 80069ba:	f7fe bd32 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4832      	ldr	r0, [pc, #200]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80069c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069c6:	40d8      	lsrs	r0, r3
 80069c8:	f7fe bd2b 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	482f      	ldr	r0, [pc, #188]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 80069d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069d4:	40d8      	lsrs	r0, r3
 80069d6:	f7fe bd24 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80069da:	2000      	movs	r0, #0
 80069dc:	f7fe bd21 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069e0:	2000      	movs	r0, #0
 80069e2:	f7fe bd1e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069e6:	2000      	movs	r0, #0
 80069e8:	f7fe bd1b 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe bd18 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = LSE_VALUE;
 80069f2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80069f6:	f7fe bd14 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe bd11 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a00:	2000      	movs	r0, #0
 8006a02:	f7fe bd0e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a06:	2000      	movs	r0, #0
 8006a08:	f7fe bd0b 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f7fe bd08 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a12:	2000      	movs	r0, #0
 8006a14:	f7fe bd05 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe bd02 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a1e:	680b      	ldr	r3, [r1, #0]
 8006a20:	481a      	ldr	r0, [pc, #104]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006a22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a26:	40d8      	lsrs	r0, r3
 8006a28:	f7fe bcfb 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	f7fe bcf8 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7fe bcf5 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4814      	ldr	r0, [pc, #80]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c4>)
 8006a3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a40:	40d8      	lsrs	r0, r3
 8006a42:	f7fe bcee 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fe bceb 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe bce8 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe bce5 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe bce2 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe bcdf 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a64:	480a      	ldr	r0, [pc, #40]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 8006a66:	f7fe bcdc 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe bcd9 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe bcd6 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a76:	4806      	ldr	r0, [pc, #24]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 8006a78:	f7fe bcd3 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a7c:	4804      	ldr	r0, [pc, #16]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>)
 8006a7e:	f7fe bcd0 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a82:	bf00      	nop
 8006a84:	44020c00 	.word	0x44020c00
 8006a88:	007a1200 	.word	0x007a1200
 8006a8c:	03d09000 	.word	0x03d09000
 8006a90:	003d0900 	.word	0x003d0900
        frequency = 0U;
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe bcc4 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006a9a:	482d      	ldr	r0, [pc, #180]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006a9c:	f7fe bcc1 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aa0:	482b      	ldr	r0, [pc, #172]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006aa2:	f7fe bcbe 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe bcbb 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe bcb8 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006ab2:	4827      	ldr	r0, [pc, #156]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ab4:	f7fe bcb5 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ab8:	4825      	ldr	r0, [pc, #148]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006aba:	f7fe bcb2 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006abe:	4824      	ldr	r0, [pc, #144]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ac0:	f7fe bcaf 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ac4:	4822      	ldr	r0, [pc, #136]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ac6:	f7fe bcac 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006aca:	4821      	ldr	r0, [pc, #132]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006acc:	f7fe bca9 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe bca6 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006ad6:	481e      	ldr	r0, [pc, #120]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ad8:	f7fe bca3 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006adc:	481c      	ldr	r0, [pc, #112]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ade:	f7fe bca0 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ae2:	481b      	ldr	r0, [pc, #108]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006ae4:	f7fe bc9d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006ae8:	4819      	ldr	r0, [pc, #100]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006aea:	f7fe bc9a 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = HSE_VALUE;
 8006aee:	4819      	ldr	r0, [pc, #100]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x178c>)
 8006af0:	f7fe bc97 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
              frequency = CSI_VALUE;
 8006af4:	4816      	ldr	r0, [pc, #88]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006af6:	f7fe bc94 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006afa:	4815      	ldr	r0, [pc, #84]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006afc:	f7fe bc91 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b00:	4813      	ldr	r0, [pc, #76]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b02:	f7fe bc8e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b06:	4812      	ldr	r0, [pc, #72]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b08:	f7fe bc8b 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b0c:	4810      	ldr	r0, [pc, #64]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b0e:	f7fe bc88 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b12:	480f      	ldr	r0, [pc, #60]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b14:	f7fe bc85 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b18:	480d      	ldr	r0, [pc, #52]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b1a:	f7fe bc82 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b1e:	480c      	ldr	r0, [pc, #48]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b20:	f7fe bc7f 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b24:	480a      	ldr	r0, [pc, #40]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b26:	f7fe bc7c 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b2a:	4809      	ldr	r0, [pc, #36]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b2c:	f7fe bc79 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b30:	4807      	ldr	r0, [pc, #28]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b32:	f7fe bc76 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b36:	4806      	ldr	r0, [pc, #24]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b38:	f7fe bc73 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b3c:	4804      	ldr	r0, [pc, #16]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b3e:	f7fe bc70 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b42:	4803      	ldr	r0, [pc, #12]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>)
 8006b44:	f7fe bc6d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7fe bc6a 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006b4e:	bf00      	nop
 8006b50:	003d0900 	.word	0x003d0900
 8006b54:	007a1200 	.word	0x007a1200

08006b58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	4616      	mov	r6, r2
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b5e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8006b62:	2a20      	cmp	r2, #32
 8006b64:	d16a      	bne.n	8006c3c <HAL_UART_Transmit+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b66:	460d      	mov	r5, r1
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d03d      	beq.n	8006be8 <HAL_UART_Transmit+0x90>
 8006b6c:	2e00      	cmp	r6, #0
 8006b6e:	d03b      	beq.n	8006be8 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006b70:	461f      	mov	r7, r3
 8006b72:	6803      	ldr	r3, [r0, #0]
 8006b74:	4604      	mov	r4, r0
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	0612      	lsls	r2, r2, #24
 8006b7a:	d462      	bmi.n	8006c42 <HAL_UART_Transmit+0xea>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b7c:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b86:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b8a:	f7fb f91f 	bl	8001dcc <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006b90:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize  = Size;
 8006b96:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b9a:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9e:	d055      	beq.n	8006c4c <HAL_UART_Transmit+0xf4>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8006ba0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba4:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d055      	beq.n	8006c58 <HAL_UART_Transmit+0x100>
 8006bac:	1c7b      	adds	r3, r7, #1
 8006bae:	d12d      	bne.n	8006c0c <HAL_UART_Transmit+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb0:	69d3      	ldr	r3, [r2, #28]
 8006bb2:	061f      	lsls	r7, r3, #24
 8006bb4:	d5fc      	bpl.n	8006bb0 <HAL_UART_Transmit+0x58>
      if (pdata8bits == NULL)
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	d03b      	beq.n	8006c32 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bba:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bbe:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006bc0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bcc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ec      	bne.n	8006bb0 <HAL_UART_Transmit+0x58>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd6:	69d3      	ldr	r3, [r2, #28]
 8006bd8:	0659      	lsls	r1, r3, #25
 8006bda:	d5fc      	bpl.n	8006bd6 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8006bdc:	2320      	movs	r3, #32
    return HAL_OK;
 8006bde:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8006be0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006be8:	2001      	movs	r0, #1
}
 8006bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	d045      	beq.n	8006c7e <HAL_UART_Transmit+0x126>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bf6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006bf8:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c04:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	b33b      	cbz	r3, 8006c5c <HAL_UART_Transmit+0x104>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0c:	69d3      	ldr	r3, [r2, #28]
 8006c0e:	061e      	lsls	r6, r3, #24
 8006c10:	d4ed      	bmi.n	8006bee <HAL_UART_Transmit+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c12:	f7fb f8db 	bl	8001dcc <HAL_GetTick>
 8006c16:	eba0 0309 	sub.w	r3, r0, r9
 8006c1a:	429f      	cmp	r7, r3
 8006c1c:	d303      	bcc.n	8006c26 <HAL_UART_Transmit+0xce>
 8006c1e:	b117      	cbz	r7, 8006c26 <HAL_UART_Transmit+0xce>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	e7f2      	b.n	8006c0c <HAL_UART_Transmit+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 8006c26:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8006c28:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8006c2a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c32:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3a:	e7c0      	b.n	8006bbe <HAL_UART_Transmit+0x66>
    return HAL_BUSY;
 8006c3c:	2002      	movs	r0, #2
}
 8006c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	e797      	b.n	8006b7c <HAL_UART_Transmit+0x24>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1a6      	bne.n	8006ba0 <HAL_UART_Transmit+0x48>
      pdata16bits = (const uint16_t *) pData;
 8006c52:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006c54:	461d      	mov	r5, r3
 8006c56:	e7a3      	b.n	8006ba0 <HAL_UART_Transmit+0x48>
 8006c58:	1c78      	adds	r0, r7, #1
 8006c5a:	d0bc      	beq.n	8006bd6 <HAL_UART_Transmit+0x7e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5c:	69d3      	ldr	r3, [r2, #28]
 8006c5e:	065b      	lsls	r3, r3, #25
 8006c60:	d4bc      	bmi.n	8006bdc <HAL_UART_Transmit+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fb f8b3 	bl	8001dcc <HAL_GetTick>
 8006c66:	eba0 0309 	sub.w	r3, r0, r9
 8006c6a:	429f      	cmp	r7, r3
 8006c6c:	d3db      	bcc.n	8006c26 <HAL_UART_Transmit+0xce>
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	d0d9      	beq.n	8006c26 <HAL_UART_Transmit+0xce>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c72:	6822      	ldr	r2, [r4, #0]
 8006c74:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c76:	69d3      	ldr	r3, [r2, #28]
 8006c78:	065b      	lsls	r3, r3, #25
 8006c7a:	d5f2      	bpl.n	8006c62 <HAL_UART_Transmit+0x10a>
 8006c7c:	e7ae      	b.n	8006bdc <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c7e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c86:	e7b6      	b.n	8006bf6 <HAL_UART_Transmit+0x9e>

08006c88 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c88:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8006c8a:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8c:	071a      	lsls	r2, r3, #28
 8006c8e:	d506      	bpl.n	8006c9e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c90:	6801      	ldr	r1, [r0, #0]
 8006c92:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006c94:	684a      	ldr	r2, [r1, #4]
 8006c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c9a:	4322      	orrs	r2, r4
 8006c9c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c9e:	07dc      	lsls	r4, r3, #31
 8006ca0:	d506      	bpl.n	8006cb0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca2:	6801      	ldr	r1, [r0, #0]
 8006ca4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006ca6:	684a      	ldr	r2, [r1, #4]
 8006ca8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006cac:	4322      	orrs	r2, r4
 8006cae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cb0:	0799      	lsls	r1, r3, #30
 8006cb2:	d506      	bpl.n	8006cc2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cb4:	6801      	ldr	r1, [r0, #0]
 8006cb6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006cb8:	684a      	ldr	r2, [r1, #4]
 8006cba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006cbe:	4322      	orrs	r2, r4
 8006cc0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cc2:	075a      	lsls	r2, r3, #29
 8006cc4:	d506      	bpl.n	8006cd4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc6:	6801      	ldr	r1, [r0, #0]
 8006cc8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006cca:	684a      	ldr	r2, [r1, #4]
 8006ccc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006cd0:	4322      	orrs	r2, r4
 8006cd2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cd4:	06dc      	lsls	r4, r3, #27
 8006cd6:	d506      	bpl.n	8006ce6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd8:	6801      	ldr	r1, [r0, #0]
 8006cda:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006cdc:	688a      	ldr	r2, [r1, #8]
 8006cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ce2:	4322      	orrs	r2, r4
 8006ce4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ce6:	0699      	lsls	r1, r3, #26
 8006ce8:	d506      	bpl.n	8006cf8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cea:	6801      	ldr	r1, [r0, #0]
 8006cec:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006cee:	688a      	ldr	r2, [r1, #8]
 8006cf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cf4:	4322      	orrs	r2, r4
 8006cf6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf8:	065a      	lsls	r2, r3, #25
 8006cfa:	d50a      	bpl.n	8006d12 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cfc:	6801      	ldr	r1, [r0, #0]
 8006cfe:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006d00:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d02:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d06:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006d0a:	ea42 0204 	orr.w	r2, r2, r4
 8006d0e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d10:	d00b      	beq.n	8006d2a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d12:	061b      	lsls	r3, r3, #24
 8006d14:	d506      	bpl.n	8006d24 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d16:	6802      	ldr	r2, [r0, #0]
 8006d18:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006d1a:	6853      	ldr	r3, [r2, #4]
 8006d1c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6053      	str	r3, [r2, #4]
}
 8006d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d28:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d2a:	684a      	ldr	r2, [r1, #4]
 8006d2c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006d2e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006d32:	4322      	orrs	r2, r4
 8006d34:	604a      	str	r2, [r1, #4]
 8006d36:	e7ec      	b.n	8006d12 <UART_AdvFeatureConfig+0x8a>

08006d38 <UART_CheckIdleState>:
{
 8006d38:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3a:	2300      	movs	r3, #0
{
 8006d3c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006d42:	f7fb f843 	bl	8001dcc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d46:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006d48:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	071b      	lsls	r3, r3, #28
 8006d4e:	d40f      	bmi.n	8006d70 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	0759      	lsls	r1, r3, #29
 8006d54:	d431      	bmi.n	8006dba <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d58:	2220      	movs	r2, #32
  return HAL_OK;
 8006d5a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d60:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d64:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d66:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d70:	69d3      	ldr	r3, [r2, #28]
 8006d72:	0298      	lsls	r0, r3, #10
 8006d74:	d4ec      	bmi.n	8006d50 <UART_CheckIdleState+0x18>
 8006d76:	e00c      	b.n	8006d92 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	0749      	lsls	r1, r1, #29
 8006d7e:	d505      	bpl.n	8006d8c <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d80:	69d9      	ldr	r1, [r3, #28]
 8006d82:	0708      	lsls	r0, r1, #28
 8006d84:	d44a      	bmi.n	8006e1c <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d86:	69d9      	ldr	r1, [r3, #28]
 8006d88:	0509      	lsls	r1, r1, #20
 8006d8a:	d475      	bmi.n	8006e78 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	0298      	lsls	r0, r3, #10
 8006d90:	d4de      	bmi.n	8006d50 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d92:	f7fb f81b 	bl	8001dcc <HAL_GetTick>
 8006d96:	1b43      	subs	r3, r0, r5
 8006d98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d9c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	d3eb      	bcc.n	8006d78 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	e843 2100 	strex	r1, r2, [r3]
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d1f7      	bne.n	8006da0 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8006db0:	2320      	movs	r3, #32
 8006db2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8006db6:	2003      	movs	r0, #3
 8006db8:	e7d6      	b.n	8006d68 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dba:	69d3      	ldr	r3, [r2, #28]
 8006dbc:	025b      	lsls	r3, r3, #9
 8006dbe:	d4ca      	bmi.n	8006d56 <UART_CheckIdleState+0x1e>
 8006dc0:	e00d      	b.n	8006dde <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	0750      	lsls	r0, r2, #29
 8006dc6:	d507      	bpl.n	8006dd8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	0711      	lsls	r1, r2, #28
 8006dcc:	f100 8082 	bmi.w	8006ed4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	0512      	lsls	r2, r2, #20
 8006dd4:	f100 80ac 	bmi.w	8006f30 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	025b      	lsls	r3, r3, #9
 8006ddc:	d4bb      	bmi.n	8006d56 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fa fff5 	bl	8001dcc <HAL_GetTick>
 8006de2:	1b43      	subs	r3, r0, r5
 8006de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	d3ea      	bcc.n	8006dc2 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006df0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	e843 2100 	strex	r1, r2, [r3]
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	d1f7      	bne.n	8006dec <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	f103 0208 	add.w	r2, r3, #8
 8006e00:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	f103 0008 	add.w	r0, r3, #8
 8006e0c:	e840 2100 	strex	r1, r2, [r0]
 8006e10:	2900      	cmp	r1, #0
 8006e12:	d1f3      	bne.n	8006dfc <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8006e14:	2320      	movs	r3, #32
 8006e16:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8006e1a:	e7cc      	b.n	8006db6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e24:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	e843 2100 	strex	r1, r2, [r3]
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d1f7      	bne.n	8006e20 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e30:	4856      	ldr	r0, [pc, #344]	@ (8006f8c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	f103 0208 	add.w	r2, r3, #8
 8006e36:	e852 2f00 	ldrex	r2, [r2]
 8006e3a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	f103 0508 	add.w	r5, r3, #8
 8006e40:	e845 2100 	strex	r1, r2, [r5]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d1f4      	bne.n	8006e32 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e48:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006e4a:	2a01      	cmp	r2, #1
 8006e4c:	d00b      	beq.n	8006e66 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e50:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e52:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006e54:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e58:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006e5c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e60:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006e64:	e79c      	b.n	8006da0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	e843 2100 	strex	r1, r2, [r3]
 8006e72:	2900      	cmp	r1, #0
 8006e74:	d1f7      	bne.n	8006e66 <UART_CheckIdleState+0x12e>
 8006e76:	e7ea      	b.n	8006e4e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e7c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e82:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	e843 2100 	strex	r1, r2, [r3]
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	d1f7      	bne.n	8006e7e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e8e:	483f      	ldr	r0, [pc, #252]	@ (8006f8c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f103 0208 	add.w	r2, r3, #8
 8006e94:	e852 2f00 	ldrex	r2, [r2]
 8006e98:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	f103 0508 	add.w	r5, r3, #8
 8006e9e:	e845 2100 	strex	r1, r2, [r5]
 8006ea2:	2900      	cmp	r1, #0
 8006ea4:	d1f4      	bne.n	8006e90 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006ea8:	2a01      	cmp	r2, #1
 8006eaa:	d00a      	beq.n	8006ec2 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eac:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006eae:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006eb0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006eb6:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ebc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006ec0:	e76e      	b.n	8006da0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	e843 2100 	strex	r1, r2, [r3]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d1f7      	bne.n	8006ec2 <UART_CheckIdleState+0x18a>
 8006ed2:	e7eb      	b.n	8006eac <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006edc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	e843 2100 	strex	r1, r2, [r3]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d1f7      	bne.n	8006ed8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee8:	4828      	ldr	r0, [pc, #160]	@ (8006f8c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	f103 0208 	add.w	r2, r3, #8
 8006eee:	e852 2f00 	ldrex	r2, [r2]
 8006ef2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	f103 0508 	add.w	r5, r3, #8
 8006ef8:	e845 2100 	strex	r1, r2, [r5]
 8006efc:	2900      	cmp	r1, #0
 8006efe:	d1f4      	bne.n	8006eea <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f00:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006f02:	2a01      	cmp	r2, #1
 8006f04:	d00b      	beq.n	8006f1e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006f08:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f0a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006f10:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006f14:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f18:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006f1c:	e766      	b.n	8006dec <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	e843 2100 	strex	r1, r2, [r3]
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	d1f7      	bne.n	8006f1e <UART_CheckIdleState+0x1e6>
 8006f2e:	e7ea      	b.n	8006f06 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f34:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f3a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	e843 2100 	strex	r1, r2, [r3]
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d1f7      	bne.n	8006f36 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f46:	4811      	ldr	r0, [pc, #68]	@ (8006f8c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	f103 0208 	add.w	r2, r3, #8
 8006f4c:	e852 2f00 	ldrex	r2, [r2]
 8006f50:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	f103 0508 	add.w	r5, r3, #8
 8006f56:	e845 2100 	strex	r1, r2, [r5]
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	d1f4      	bne.n	8006f48 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006f60:	2a01      	cmp	r2, #1
 8006f62:	d00a      	beq.n	8006f7a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006f66:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006f68:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006f6e:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f74:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006f78:	e738      	b.n	8006dec <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	e843 2100 	strex	r1, r2, [r3]
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d1f7      	bne.n	8006f7a <UART_CheckIdleState+0x242>
 8006f8a:	e7eb      	b.n	8006f64 <UART_CheckIdleState+0x22c>
 8006f8c:	effffffe 	.word	0xeffffffe

08006f90 <HAL_UART_Init>:
  if (huart == NULL)
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f000 80ef 	beq.w	8007174 <HAL_UART_Init+0x1e4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f96:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006f9a:	b570      	push	{r4, r5, r6, lr}
 8006f9c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d070      	beq.n	8007084 <HAL_UART_Init+0xf4>
  huart->gState = HAL_UART_STATE_BUSY;
 8006fa2:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8006fa4:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006fa6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006faa:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 8006fae:	f023 0301 	bic.w	r3, r3, #1
 8006fb2:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	d161      	bne.n	800707c <HAL_UART_Init+0xec>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fb8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006fbc:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fbe:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc6:	49a5      	ldr	r1, [pc, #660]	@ (800725c <HAL_UART_Init+0x2cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fca:	4001      	ands	r1, r0
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd0:	686b      	ldr	r3, [r5, #4]
 8006fd2:	68e1      	ldr	r1, [r4, #12]
 8006fd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006fd8:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fda:	49a1      	ldr	r1, [pc, #644]	@ (8007260 <HAL_UART_Init+0x2d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fdc:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fde:	428d      	cmp	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fe2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe4:	f000 812a 	beq.w	800723c <HAL_UART_Init+0x2ac>
 8006fe8:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006fec:	428d      	cmp	r5, r1
 8006fee:	f000 80c6 	beq.w	800717e <HAL_UART_Init+0x1ee>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff2:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006ff4:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff6:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8006ffa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006ffe:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007000:	430b      	orrs	r3, r1
 8007002:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007004:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007006:	4997      	ldr	r1, [pc, #604]	@ (8007264 <HAL_UART_Init+0x2d4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007008:	f023 030f 	bic.w	r3, r3, #15
 800700c:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700e:	428d      	cmp	r5, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007010:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007012:	d03c      	beq.n	800708e <HAL_UART_Init+0xfe>
 8007014:	4b94      	ldr	r3, [pc, #592]	@ (8007268 <HAL_UART_Init+0x2d8>)
 8007016:	429d      	cmp	r5, r3
 8007018:	d072      	beq.n	8007100 <HAL_UART_Init+0x170>
 800701a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800701e:	429d      	cmp	r5, r3
 8007020:	f000 80a5 	beq.w	800716e <HAL_UART_Init+0x1de>
 8007024:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007028:	429d      	cmp	r5, r3
 800702a:	f000 8095 	beq.w	8007158 <HAL_UART_Init+0x1c8>
 800702e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007032:	429d      	cmp	r5, r3
 8007034:	f000 80a0 	beq.w	8007178 <HAL_UART_Init+0x1e8>
 8007038:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800703c:	429d      	cmp	r5, r3
 800703e:	f000 80e7 	beq.w	8007210 <HAL_UART_Init+0x280>
 8007042:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8007046:	429d      	cmp	r5, r3
 8007048:	f000 80e5 	beq.w	8007216 <HAL_UART_Init+0x286>
 800704c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007050:	429d      	cmp	r5, r3
 8007052:	f000 80d3 	beq.w	80071fc <HAL_UART_Init+0x26c>
 8007056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800705a:	429d      	cmp	r5, r3
 800705c:	f000 80de 	beq.w	800721c <HAL_UART_Init+0x28c>
 8007060:	f5a3 53c0 	sub.w	r3, r3, #6144	@ 0x1800
 8007064:	429d      	cmp	r5, r3
 8007066:	f000 80dd 	beq.w	8007224 <HAL_UART_Init+0x294>
 800706a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800706e:	429d      	cmp	r5, r3
 8007070:	f040 80dc 	bne.w	800722c <HAL_UART_Init+0x29c>
 8007074:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007078:	2100      	movs	r1, #0
 800707a:	e00a      	b.n	8007092 <HAL_UART_Init+0x102>
    UART_AdvFeatureConfig(huart);
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff fe03 	bl	8006c88 <UART_AdvFeatureConfig>
 8007082:	e799      	b.n	8006fb8 <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8007084:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8007088:	f7fa fd1a 	bl	8001ac0 <HAL_UART_MspInit>
 800708c:	e789      	b.n	8006fa2 <HAL_UART_Init+0x12>
 800708e:	2001      	movs	r0, #1
 8007090:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007092:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007096:	d03a      	beq.n	800710e <HAL_UART_Init+0x17e>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007098:	f7fe f996 	bl	80053c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800709c:	b1c8      	cbz	r0, 80070d2 <HAL_UART_Init+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709e:	4a73      	ldr	r2, [pc, #460]	@ (800726c <HAL_UART_Init+0x2dc>)
 80070a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ac:	fbb0 f0f1 	udiv	r0, r0, r1
 80070b0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80070b4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b8:	f1a0 0310 	sub.w	r3, r0, #16
 80070bc:	4293      	cmp	r3, r2
 80070be:	d84e      	bhi.n	800715e <HAL_UART_Init+0x1ce>
  huart->RxISR = NULL;
 80070c0:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80070c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80070ca:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80070cc:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80070ce:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ret;
 80070d0:	e005      	b.n	80070de <HAL_UART_Init+0x14e>
  huart->NbRxDataToProcess = 1;
 80070d2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 80070d6:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
        huart->Instance->BRR = brrtemp;
 80070da:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80070dc:	66a3      	str	r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070de:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 80070e0:	4620      	mov	r0, r4
}
 80070e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80070ea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ec:	6893      	ldr	r3, [r2, #8]
 80070ee:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80070f2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80070fc:	f7ff be1c 	b.w	8006d38 <UART_CheckIdleState>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007100:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007104:	f04f 0002 	mov.w	r0, #2
 8007108:	f04f 0100 	mov.w	r1, #0
 800710c:	d1c4      	bne.n	8007098 <HAL_UART_Init+0x108>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800710e:	f7fe f95b 	bl	80053c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8007112:	2800      	cmp	r0, #0
 8007114:	d0dd      	beq.n	80070d2 <HAL_UART_Init+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007116:	4b55      	ldr	r3, [pc, #340]	@ (800726c <HAL_UART_Init+0x2dc>)
 8007118:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800711a:	6862      	ldr	r2, [r4, #4]
 800711c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007120:	0853      	lsrs	r3, r2, #1
 8007122:	fbb0 f0f1 	udiv	r0, r0, r1
 8007126:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800712a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712e:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 8007132:	f1a3 0210 	sub.w	r2, r3, #16
 8007136:	428a      	cmp	r2, r1
 8007138:	d811      	bhi.n	800715e <HAL_UART_Init+0x1ce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800713a:	f023 010f 	bic.w	r1, r3, #15
 800713e:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007140:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007144:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 8007146:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800714a:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8007150:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007152:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007154:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 8007156:	e7c2      	b.n	80070de <HAL_UART_Init+0x14e>
 8007158:	2008      	movs	r0, #8
 800715a:	2100      	movs	r1, #0
 800715c:	e799      	b.n	8007092 <HAL_UART_Init+0x102>
  huart->RxISR = NULL;
 800715e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007160:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 8007164:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007166:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007168:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800716a:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800716c:	bd70      	pop	{r4, r5, r6, pc}
 800716e:	2004      	movs	r0, #4
 8007170:	2100      	movs	r1, #0
 8007172:	e78e      	b.n	8007092 <HAL_UART_Init+0x102>
 8007174:	2001      	movs	r0, #1
 8007176:	4770      	bx	lr
 8007178:	2010      	movs	r0, #16
 800717a:	2100      	movs	r1, #0
 800717c:	e789      	b.n	8007092 <HAL_UART_Init+0x102>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800717e:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007180:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007182:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8007186:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800718a:	431a      	orrs	r2, r3
 800718c:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800718e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007190:	f023 030f 	bic.w	r3, r3, #15
 8007194:	4303      	orrs	r3, r0
 8007196:	2000      	movs	r0, #0
 8007198:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800719a:	f7fe f915 	bl	80053c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800719e:	b380      	cbz	r0, 8007202 <HAL_UART_Init+0x272>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80071a2:	4a32      	ldr	r2, [pc, #200]	@ (800726c <HAL_UART_Init+0x2dc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071a6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071aa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071ae:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b2:	428b      	cmp	r3, r1
 80071b4:	d3d3      	bcc.n	800715e <HAL_UART_Init+0x1ce>
 80071b6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80071ba:	d8d0      	bhi.n	800715e <HAL_UART_Init+0x1ce>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071bc:	2600      	movs	r6, #0
 80071be:	4633      	mov	r3, r6
 80071c0:	4631      	mov	r1, r6
 80071c2:	f7f9 fd01 	bl	8000bc8 <__aeabi_uldivmod>
 80071c6:	0209      	lsls	r1, r1, #8
 80071c8:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 80071cc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80071d0:	0200      	lsls	r0, r0, #8
 80071d2:	eb10 000c 	adds.w	r0, r0, ip
 80071d6:	462a      	mov	r2, r5
 80071d8:	4633      	mov	r3, r6
 80071da:	f141 0100 	adc.w	r1, r1, #0
 80071de:	f7f9 fcf3 	bl	8000bc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e2:	4b23      	ldr	r3, [pc, #140]	@ (8007270 <HAL_UART_Init+0x2e0>)
 80071e4:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d8b8      	bhi.n	800715e <HAL_UART_Init+0x1ce>
  huart->NbRxDataToProcess = 1;
 80071ec:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80071f4:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80071f8:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 80071fa:	e770      	b.n	80070de <HAL_UART_Init+0x14e>
 80071fc:	2080      	movs	r0, #128	@ 0x80
 80071fe:	2100      	movs	r1, #0
 8007200:	e747      	b.n	8007092 <HAL_UART_Init+0x102>
  huart->NbRxDataToProcess = 1;
 8007202:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  huart->TxISR = NULL;
 8007206:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
          huart->Instance->BRR = usartdiv;
 800720a:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800720c:	66a1      	str	r1, [r4, #104]	@ 0x68
  return ret;
 800720e:	e766      	b.n	80070de <HAL_UART_Init+0x14e>
 8007210:	2020      	movs	r0, #32
 8007212:	2100      	movs	r1, #0
 8007214:	e73d      	b.n	8007092 <HAL_UART_Init+0x102>
 8007216:	2040      	movs	r0, #64	@ 0x40
 8007218:	2100      	movs	r1, #0
 800721a:	e73a      	b.n	8007092 <HAL_UART_Init+0x102>
 800721c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007220:	2100      	movs	r1, #0
 8007222:	e736      	b.n	8007092 <HAL_UART_Init+0x102>
 8007224:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007228:	2100      	movs	r1, #0
 800722a:	e732      	b.n	8007092 <HAL_UART_Init+0x102>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800722c:	4811      	ldr	r0, [pc, #68]	@ (8007274 <HAL_UART_Init+0x2e4>)
 800722e:	2100      	movs	r1, #0
 8007230:	1a28      	subs	r0, r5, r0
 8007232:	fab0 f080 	clz	r0, r0
 8007236:	0940      	lsrs	r0, r0, #5
 8007238:	02c0      	lsls	r0, r0, #11
 800723a:	e72a      	b.n	8007092 <HAL_UART_Init+0x102>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800723c:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800723e:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007240:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8007244:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8007248:	431a      	orrs	r2, r3
 800724a:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800724c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800724e:	f023 030f 	bic.w	r3, r3, #15
 8007252:	4303      	orrs	r3, r0
 8007254:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8007256:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800725a:	e79e      	b.n	800719a <HAL_UART_Init+0x20a>
 800725c:	cfff69f3 	.word	0xcfff69f3
 8007260:	44002400 	.word	0x44002400
 8007264:	40013800 	.word	0x40013800
 8007268:	40004400 	.word	0x40004400
 800726c:	0800f99c 	.word	0x0800f99c
 8007270:	000ffcff 	.word	0x000ffcff
 8007274:	40008400 	.word	0x40008400

08007278 <HAL_UARTEx_EnableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007278:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800727c:	2a01      	cmp	r2, #1
 800727e:	d032      	beq.n	80072e6 <HAL_UARTEx_EnableFifoMode+0x6e>

  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	4603      	mov	r3, r0
 8007282:	2124      	movs	r1, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007284:	f04f 5c00 	mov.w	ip, #536870912	@ 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007288:	6802      	ldr	r2, [r0, #0]
{
 800728a:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800728c:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007290:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007292:	6814      	ldr	r4, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007294:	ea41 010c 	orr.w	r1, r1, ip
  __HAL_UART_DISABLE(huart);
 8007298:	f024 0401 	bic.w	r4, r4, #1
 800729c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800729e:	f8c3 c064 	str.w	ip, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a2:	6011      	str	r1, [r2, #0]
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072a4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072a6:	6892      	ldr	r2, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072a8:	4e10      	ldr	r6, [pc, #64]	@ (80072ec <HAL_UARTEx_EnableFifoMode+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072aa:	ea4f 7e52 	mov.w	lr, r2, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ae:	f3c1 6c42 	ubfx	ip, r1, #25, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072b2:	4d0f      	ldr	r5, [pc, #60]	@ (80072f0 <HAL_UARTEx_EnableFifoMode+0x78>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b4:	f816 100e 	ldrb.w	r1, [r6, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072b8:	f816 200c 	ldrb.w	r2, [r6, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 80072bc:	f815 400c 	ldrb.w	r4, [r5, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80072c0:	f815 600e 	ldrb.w	r6, [r5, lr]
  __HAL_UNLOCK(huart);
 80072c4:	2000      	movs	r0, #0
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c6:	00c9      	lsls	r1, r1, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072c8:	00d2      	lsls	r2, r2, #3
  huart->gState = HAL_UART_STATE_READY;
 80072ca:	2720      	movs	r7, #32
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072cc:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d0:	fbb2 f2f4 	udiv	r2, r2, r4
  __HAL_UNLOCK(huart);
 80072d4:	f883 0084 	strb.w	r0, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80072d8:	f8c3 7088 	str.w	r7, [r3, #136]	@ 0x88
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072dc:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80072e6:	2002      	movs	r0, #2
}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	0800f9bc 	.word	0x0800f9bc
 80072f0:	0800f9b4 	.word	0x0800f9b4

080072f4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80072f4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80072f8:	2a01      	cmp	r2, #1
 80072fa:	d017      	beq.n	800732c <HAL_UARTEx_DisableFifoMode+0x38>
 80072fc:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80072fe:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007300:	2100      	movs	r1, #0
{
 8007302:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_READY;
 8007304:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007306:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007308:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800730c:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800730e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007310:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007314:	f024 0401 	bic.w	r4, r4, #1
 8007318:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800731a:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800731c:	6010      	str	r0, [r2, #0]
  __HAL_UNLOCK(huart);
 800731e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007322:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007324:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007328:	bc30      	pop	{r4, r5}
 800732a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800732c:	2002      	movs	r0, #2
}
 800732e:	4770      	bx	lr

08007330 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8007330:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007334:	2a01      	cmp	r2, #1
 8007336:	d037      	beq.n	80073a8 <HAL_UARTEx_SetTxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	4603      	mov	r3, r0
 800733a:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800733c:	681a      	ldr	r2, [r3, #0]
{
 800733e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007340:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007344:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007346:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007348:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800734a:	f020 0001 	bic.w	r0, r0, #1
 800734e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007350:	6890      	ldr	r0, [r2, #8]
 8007352:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007356:	4301      	orrs	r1, r0
 8007358:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800735a:	b315      	cbz	r5, 80073a2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800735c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800735e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007360:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007364:	4911      	ldr	r1, [pc, #68]	@ (80073ac <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8007366:	4d12      	ldr	r5, [pc, #72]	@ (80073b0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007368:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007370:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007374:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007378:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800737c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800737e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007380:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007384:	fbb1 f1f5 	udiv	r1, r1, r5
 8007388:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800738c:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800738e:	2520      	movs	r5, #32
 8007390:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007394:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007396:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800739a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800739c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80073a0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80073a2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80073a4:	4608      	mov	r0, r1
 80073a6:	e7ef      	b.n	8007388 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80073a8:	2002      	movs	r0, #2
}
 80073aa:	4770      	bx	lr
 80073ac:	0800f9bc 	.word	0x0800f9bc
 80073b0:	0800f9b4 	.word	0x0800f9b4

080073b4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80073b4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80073b8:	2a01      	cmp	r2, #1
 80073ba:	d037      	beq.n	800742c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80073bc:	4603      	mov	r3, r0
 80073be:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073c0:	681a      	ldr	r2, [r3, #0]
{
 80073c2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80073c4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073c8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80073ca:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073cc:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 80073ce:	f020 0001 	bic.w	r0, r0, #1
 80073d2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073d4:	6890      	ldr	r0, [r2, #8]
 80073d6:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80073da:	4301      	orrs	r1, r0
 80073dc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073de:	b315      	cbz	r5, 8007426 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073e0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073e2:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e4:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e8:	4911      	ldr	r1, [pc, #68]	@ (8007430 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ea:	4d12      	ldr	r5, [pc, #72]	@ (8007434 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073ec:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073f4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073f8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80073fc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007400:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007402:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007404:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007408:	fbb1 f1f5 	udiv	r1, r1, r5
 800740c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007410:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007412:	2520      	movs	r5, #32
 8007414:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007418:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800741a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800741e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007420:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007424:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007426:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007428:	4608      	mov	r0, r1
 800742a:	e7ef      	b.n	800740c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800742c:	2002      	movs	r0, #2
}
 800742e:	4770      	bx	lr
 8007430:	0800f9bc 	.word	0x0800f9bc
 8007434:	0800f9b4 	.word	0x0800f9b4

08007438 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8007438:	b530      	push	{r4, r5, lr}
 800743a:	460d      	mov	r5, r1
 800743c:	b0a3      	sub	sp, #140	@ 0x8c
 800743e:	4604      	mov	r4, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8007440:	f002 fd9a 	bl	8009f78 <ai_platform_context_acquire>

  if (report && net_ctx)
 8007444:	2d00      	cmp	r5, #0
 8007446:	d03a      	beq.n	80074be <ai_network_get_info+0x86>
 8007448:	2800      	cmp	r0, #0
 800744a:	d034      	beq.n	80074b6 <ai_network_get_info+0x7e>
  {
    ai_network_report r = {
 800744c:	2278      	movs	r2, #120	@ 0x78
 800744e:	2100      	movs	r1, #0
 8007450:	a804      	add	r0, sp, #16
 8007452:	f006 f8fc 	bl	800d64e <memset>
 8007456:	491e      	ldr	r1, [pc, #120]	@ (80074d0 <ai_network_get_info+0x98>)
 8007458:	4a1e      	ldr	r2, [pc, #120]	@ (80074d4 <ai_network_get_info+0x9c>)
 800745a:	4b1f      	ldr	r3, [pc, #124]	@ (80074d8 <ai_network_get_info+0xa0>)
 800745c:	481f      	ldr	r0, [pc, #124]	@ (80074dc <ai_network_get_info+0xa4>)
 800745e:	e9cd 1200 	strd	r1, r2, [sp]
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	9003      	str	r0, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8007466:	f002 fd3b 	bl	8009ee0 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800746a:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 800746c:	f002 fd3c 	bl	8009ee8 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8007470:	f240 2302 	movw	r3, #514	@ 0x202
 8007474:	4a1a      	ldr	r2, [pc, #104]	@ (80074e0 <ai_network_get_info+0xa8>)
 8007476:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 800747a:	e9cd 0205 	strd	r0, r2, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800747e:	f002 fd4b 	bl	8009f18 <ai_platform_api_get_version>
 8007482:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8007484:	f002 fd60 	bl	8009f48 <ai_platform_interface_api_get_version>
 8007488:	4603      	mov	r3, r0
    ai_network_report r = {
 800748a:	a10f      	add	r1, pc, #60	@ (adr r1, 80074c8 <ai_network_get_info+0x90>)
 800748c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007490:	4a14      	ldr	r2, [pc, #80]	@ (80074e4 <ai_network_get_info+0xac>)
 8007492:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xcc5d1adc,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8007496:	4620      	mov	r0, r4
 8007498:	4669      	mov	r1, sp
    ai_network_report r = {
 800749a:	9220      	str	r2, [sp, #128]	@ 0x80
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800749c:	930a      	str	r3, [sp, #40]	@ 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800749e:	f002 fe6d 	bl	800a17c <ai_platform_api_get_network_report>
 80074a2:	4604      	mov	r4, r0
 80074a4:	b140      	cbz	r0, 80074b8 <ai_network_get_info+0x80>

    *report = r;
 80074a6:	2288      	movs	r2, #136	@ 0x88
 80074a8:	4669      	mov	r1, sp
 80074aa:	4628      	mov	r0, r5
 80074ac:	f006 f9cb 	bl	800d846 <memcpy>
    return true;
  }
  return false;
}
 80074b0:	4620      	mov	r0, r4
 80074b2:	b023      	add	sp, #140	@ 0x8c
 80074b4:	bd30      	pop	{r4, r5, pc}
  return false;
 80074b6:	4604      	mov	r4, r0
}
 80074b8:	4620      	mov	r0, r4
 80074ba:	b023      	add	sp, #140	@ 0x8c
 80074bc:	bd30      	pop	{r4, r5, pc}
  return false;
 80074be:	462c      	mov	r4, r5
}
 80074c0:	4620      	mov	r0, r4
 80074c2:	b023      	add	sp, #140	@ 0x8c
 80074c4:	bd30      	pop	{r4, r5, pc}
 80074c6:	bf00      	nop
 80074c8:	003d505b 	.word	0x003d505b
 80074cc:	00000000 	.word	0x00000000
 80074d0:	0800f914 	.word	0x0800f914
 80074d4:	0800f91c 	.word	0x0800f91c
 80074d8:	0800f940 	.word	0x0800f940
 80074dc:	0800f95c 	.word	0x0800f95c
 80074e0:	0800f884 	.word	0x0800f884
 80074e4:	cc5d1adc 	.word	0xcc5d1adc

080074e8 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80074e8:	f002 bd4e 	b.w	8009f88 <ai_platform_network_get_error>

080074ec <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80074ec:	b108      	cbz	r0, 80074f2 <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 80074ee:	f002 bd5d 	b.w	8009fac <ai_platform_inputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80074f2:	4b03      	ldr	r3, [pc, #12]	@ (8007500 <ai_network_inputs_get+0x14>)
 80074f4:	4a03      	ldr	r2, [pc, #12]	@ (8007504 <ai_network_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80074f6:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80074f8:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 80074fa:	f002 bd57 	b.w	8009fac <ai_platform_inputs_get>
 80074fe:	bf00      	nop
 8007500:	2000000c 	.word	0x2000000c
 8007504:	a1c00100 	.word	0xa1c00100

08007508 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8007508:	b108      	cbz	r0, 800750e <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 800750a:	f002 bdc5 	b.w	800a098 <ai_platform_outputs_get>
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800750e:	4b03      	ldr	r3, [pc, #12]	@ (800751c <ai_network_outputs_get+0x14>)
 8007510:	4a03      	ldr	r2, [pc, #12]	@ (8007520 <ai_network_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007512:	4618      	mov	r0, r3
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007514:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 8007516:	f002 bdbf 	b.w	800a098 <ai_platform_outputs_get>
 800751a:	bf00      	nop
 800751c:	2000000c 	.word	0x2000000c
 8007520:	a1c00100 	.word	0xa1c00100

08007524 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	4683      	mov	fp, r0
 800752a:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800752c:	f003 f814 	bl	800a558 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8007530:	4604      	mov	r4, r0
 8007532:	2800      	cmp	r0, #0
 8007534:	f000 80d4 	beq.w	80076e0 <ai_network_init+0x1bc>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8007538:	4e70      	ldr	r6, [pc, #448]	@ (80076fc <ai_network_init+0x1d8>)
 800753a:	462a      	mov	r2, r5
 800753c:	2101      	movs	r1, #1
 800753e:	4630      	mov	r0, r6
 8007540:	f002 fc0a 	bl	8009d58 <ai_platform_get_weights_map>
 8007544:	4680      	mov	r8, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	f000 80cc 	beq.w	80076e4 <ai_network_init+0x1c0>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800754c:	f8df 9204 	ldr.w	r9, [pc, #516]	@ 8007754 <ai_network_init+0x230>
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8007550:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007552:	f8d9 2000 	ldr.w	r2, [r9]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007556:	4e6a      	ldr	r6, [pc, #424]	@ (8007700 <ai_network_init+0x1dc>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007558:	486a      	ldr	r0, [pc, #424]	@ (8007704 <ai_network_init+0x1e0>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800755a:	f042 4a80 	orr.w	sl, r2, #1073741824	@ 0x40000000
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800755e:	6832      	ldr	r2, [r6, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007560:	4969      	ldr	r1, [pc, #420]	@ (8007708 <ai_network_init+0x1e4>)
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8007562:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007566:	f8c9 a000 	str.w	sl, [r9]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800756a:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800756e:	6802      	ldr	r2, [r0, #0]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007570:	f8c6 9000 	str.w	r9, [r6]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007574:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007578:	680a      	ldr	r2, [r1, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800757a:	f8c0 9000 	str.w	r9, [r0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800757e:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8007582:	4a62      	ldr	r2, [pc, #392]	@ (800770c <ai_network_init+0x1e8>)
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8007584:	4f62      	ldr	r7, [pc, #392]	@ (8007710 <ai_network_init+0x1ec>)
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8007586:	6812      	ldr	r2, [r2, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007588:	f8c1 9000 	str.w	r9, [r1]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800758c:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
 8007590:	4a5e      	ldr	r2, [pc, #376]	@ (800770c <ai_network_init+0x1e8>)
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8007592:	f8df c1c4 	ldr.w	ip, [pc, #452]	@ 8007758 <ai_network_init+0x234>
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8007596:	f8c2 9000 	str.w	r9, [r2]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800759a:	683a      	ldr	r2, [r7, #0]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800759c:	f8df e1bc 	ldr.w	lr, [pc, #444]	@ 800775c <ai_network_init+0x238>
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80075a0:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80075a4:	f8dc 2000 	ldr.w	r2, [ip]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80075a8:	f8c7 9000 	str.w	r9, [r7]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80075ac:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80075b0:	f8de 2000 	ldr.w	r2, [lr]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80075b4:	f8cc 9000 	str.w	r9, [ip]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80075b8:	f042 4980 	orr.w	r9, r2, #1073741824	@ 0x40000000
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 320);
 80075bc:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80075c0:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 384);
 80075c4:	f503 76c0 	add.w	r6, r3, #384	@ 0x180
 80075c8:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 10752);
 80075cc:	4a4f      	ldr	r2, [pc, #316]	@ (800770c <ai_network_init+0x1e8>)
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 10624);
 80075ce:	f503 5026 	add.w	r0, r3, #10624	@ 0x2980
 80075d2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 10752);
 80075d6:	f503 5128 	add.w	r1, r3, #10752	@ 0x2a00
 80075da:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 51712);
 80075de:	f503 424a 	add.w	r2, r3, #51712	@ 0xca00
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80075e2:	f8df a17c 	ldr.w	sl, [pc, #380]	@ 8007760 <ai_network_init+0x23c>
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 51712);
 80075e6:	e9c7 2202 	strd	r2, r2, [r7, #8]
    gemm_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 51968);
 80075ea:	f503 424b 	add.w	r2, r3, #51968	@ 0xcb00
 80075ee:	e9cc 2202 	strd	r2, r2, [ip, #8]
    gemm_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 60160);
 80075f2:	f503 426b 	add.w	r2, r3, #60160	@ 0xeb00
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80075f6:	f8ce 9000 	str.w	r9, [lr]
    gemm_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 60160);
 80075fa:	e9ce 2202 	strd	r2, r2, [lr, #8]
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80075fe:	f8da 2000 	ldr.w	r2, [sl]
    gemm_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8007602:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 8007764 <ai_network_init+0x240>
    gemm_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8007606:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800760a:	f8ca 2000 	str.w	r2, [sl]
    gemm_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800760e:	f8d9 2000 	ldr.w	r2, [r9]
 8007612:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007616:	f8c9 2000 	str.w	r2, [r9]
    gemm_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 60288);
 800761a:	f503 426b 	add.w	r2, r3, #60160	@ 0xeb00
 800761e:	3280      	adds	r2, #128	@ 0x80
    gemm_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 60416);
 8007620:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
    gemm_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 60288);
 8007624:	e9ca 2202 	strd	r2, r2, [sl, #8]
    gemm_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 60416);
 8007628:	e9c9 3302 	strd	r3, r3, [r9, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800762c:	4e39      	ldr	r6, [pc, #228]	@ (8007714 <ai_network_init+0x1f0>)
 800762e:	462a      	mov	r2, r5
 8007630:	2101      	movs	r1, #1
 8007632:	4630      	mov	r0, r6
 8007634:	f002 fbe0 	bl	8009df8 <ai_platform_get_activations_map>
 8007638:	4605      	mov	r5, r0
 800763a:	2800      	cmp	r0, #0
 800763c:	d058      	beq.n	80076f0 <ai_network_init+0x1cc>
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 28320);
 800763e:	6833      	ldr	r3, [r6, #0]
 8007640:	4935      	ldr	r1, [pc, #212]	@ (8007718 <ai_network_init+0x1f4>)
 8007642:	f503 42dd 	add.w	r2, r3, #28288	@ 0x6e80
 8007646:	3220      	adds	r2, #32
 8007648:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 28300);
 800764c:	4933      	ldr	r1, [pc, #204]	@ (800771c <ai_network_init+0x1f8>)
 800764e:	f503 42dd 	add.w	r2, r3, #28288	@ 0x6e80
 8007652:	320c      	adds	r2, #12
 8007654:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007658:	4931      	ldr	r1, [pc, #196]	@ (8007720 <ai_network_init+0x1fc>)
 800765a:	f503 42fc 	add.w	r2, r3, #32256	@ 0x7e00
 800765e:	3240      	adds	r2, #64	@ 0x40
 8007660:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007664:	492f      	ldr	r1, [pc, #188]	@ (8007724 <ai_network_init+0x200>)
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 8007666:	f8df e100 	ldr.w	lr, [pc, #256]	@ 8007768 <ai_network_init+0x244>
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 800766a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800766e:	492e      	ldr	r1, [pc, #184]	@ (8007728 <ai_network_init+0x204>)
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 8007670:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 800776c <ai_network_init+0x248>
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007674:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007678:	492c      	ldr	r1, [pc, #176]	@ (800772c <ai_network_init+0x208>)
    pool_4_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 800767a:	4f2d      	ldr	r7, [pc, #180]	@ (8007730 <ai_network_init+0x20c>)
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 800767c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007680:	492c      	ldr	r1, [pc, #176]	@ (8007734 <ai_network_init+0x210>)
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 32000);
 8007682:	4e2d      	ldr	r6, [pc, #180]	@ (8007738 <ai_network_init+0x214>)
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32320);
 8007684:	e9c1 2202 	strd	r2, r2, [r1, #8]
    pool_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007688:	4a2c      	ldr	r2, [pc, #176]	@ (800773c <ai_network_init+0x218>)
    gemm_16_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800768a:	4c2d      	ldr	r4, [pc, #180]	@ (8007740 <ai_network_init+0x21c>)
    pool_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800768c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    pool_15_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007690:	4a2c      	ldr	r2, [pc, #176]	@ (8007744 <ai_network_init+0x220>)
    gemm_17_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8007692:	482d      	ldr	r0, [pc, #180]	@ (8007748 <ai_network_init+0x224>)
    pool_15_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007694:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007698:	4a2c      	ldr	r2, [pc, #176]	@ (800774c <ai_network_init+0x228>)
    nl_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800769a:	492d      	ldr	r1, [pc, #180]	@ (8007750 <ai_network_init+0x22c>)
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800769c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 80076a0:	f503 42ff 	add.w	r2, r3, #32640	@ 0x7f80
 80076a4:	e9ce 2202 	strd	r2, r2, [lr, #8]
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 32640);
 80076a8:	e9cc 2202 	strd	r2, r2, [ip, #8]
    pool_4_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 80076ac:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80076b0:	e9c7 2202 	strd	r2, r2, [r7, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 32000);
 80076b4:	f503 42fa 	add.w	r2, r3, #32000	@ 0x7d00
 80076b8:	e9c6 2202 	strd	r2, r2, [r6, #8]
    gemm_16_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 80076bc:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 80076c0:	e9c4 2202 	strd	r2, r2, [r4, #8]
    gemm_17_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 80076c4:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80076c8:	e9c0 2202 	strd	r2, r2, [r0, #8]
    nl_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80076cc:	e9c1 3302 	strd	r3, r3, [r1, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80076d0:	4658      	mov	r0, fp
 80076d2:	f002 ffd9 	bl	800a688 <ai_platform_network_post_init>
 80076d6:	4028      	ands	r0, r5
 80076d8:	ea08 0800 	and.w	r8, r8, r0
 80076dc:	fa5f f088 	uxtb.w	r0, r8

  return ok;
}
 80076e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80076e4:	2212      	movs	r2, #18
 80076e6:	2130      	movs	r1, #48	@ 0x30
 80076e8:	4620      	mov	r0, r4
 80076ea:	f002 fc59 	bl	8009fa0 <ai_platform_network_set_error>
  return false;
 80076ee:	e79d      	b.n	800762c <ai_network_init+0x108>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80076f0:	2213      	movs	r2, #19
 80076f2:	4620      	mov	r0, r4
 80076f4:	2130      	movs	r1, #48	@ 0x30
 80076f6:	f002 fc53 	bl	8009fa0 <ai_platform_network_set_error>
  return false;
 80076fa:	e7e9      	b.n	80076d0 <ai_network_init+0x1ac>
 80076fc:	20061a18 	.word	0x20061a18
 8007700:	20000e08 	.word	0x20000e08
 8007704:	20000df8 	.word	0x20000df8
 8007708:	20000de8 	.word	0x20000de8
 800770c:	20000dd8 	.word	0x20000dd8
 8007710:	20000dc8 	.word	0x20000dc8
 8007714:	20061a1c 	.word	0x20061a1c
 8007718:	20000ef8 	.word	0x20000ef8
 800771c:	20000d78 	.word	0x20000d78
 8007720:	20000ee8 	.word	0x20000ee8
 8007724:	20000ed8 	.word	0x20000ed8
 8007728:	20000d68 	.word	0x20000d68
 800772c:	20000eb8 	.word	0x20000eb8
 8007730:	20000ec8 	.word	0x20000ec8
 8007734:	20000ea8 	.word	0x20000ea8
 8007738:	20000d58 	.word	0x20000d58
 800773c:	20000e98 	.word	0x20000e98
 8007740:	20000e58 	.word	0x20000e58
 8007744:	20000e68 	.word	0x20000e68
 8007748:	20000e38 	.word	0x20000e38
 800774c:	20000e48 	.word	0x20000e48
 8007750:	20000e28 	.word	0x20000e28
 8007754:	20000e18 	.word	0x20000e18
 8007758:	20000db8 	.word	0x20000db8
 800775c:	20000da8 	.word	0x20000da8
 8007760:	20000d98 	.word	0x20000d98
 8007764:	20000d88 	.word	0x20000d88
 8007768:	20000e88 	.word	0x20000e88
 800776c:	20000e78 	.word	0x20000e78

08007770 <ai_network_create_and_init>:
{
 8007770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 8007774:	2300      	movs	r3, #0
 8007776:	2405      	movs	r4, #5
{
 8007778:	b091      	sub	sp, #68	@ 0x44
  return ai_platform_network_create(
 800777a:	e9cd 4300 	strd	r4, r3, [sp]
{
 800777e:	4689      	mov	r9, r1
 8007780:	4616      	mov	r6, r2
  return ai_platform_network_create(
 8007782:	4619      	mov	r1, r3
 8007784:	4a26      	ldr	r2, [pc, #152]	@ (8007820 <ai_network_create_and_init+0xb0>)
 8007786:	2301      	movs	r3, #1
{
 8007788:	4607      	mov	r7, r0
  return ai_platform_network_create(
 800778a:	f002 fea3 	bl	800a4d4 <ai_platform_network_create>
  if (err.type != AI_ERROR_NONE) {
 800778e:	f010 08ff 	ands.w	r8, r0, #255	@ 0xff
  return ai_platform_network_create(
 8007792:	4605      	mov	r5, r0
  if (err.type != AI_ERROR_NONE) {
 8007794:	d003      	beq.n	800779e <ai_network_create_and_init+0x2e>
}
 8007796:	4628      	mov	r0, r5
 8007798:	b011      	add	sp, #68	@ 0x44
 800779a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ai_network_data_params_get(&params) != true) {
 800779e:	a802      	add	r0, sp, #8
 80077a0:	f000 f842 	bl	8007828 <ai_network_data_params_get>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d035      	beq.n	8007814 <ai_network_create_and_init+0xa4>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	d00f      	beq.n	80077ce <ai_network_create_and_init+0x5e>
 80077ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80077b2:	4644      	mov	r4, r8
 80077b4:	b15b      	cbz	r3, 80077ce <ai_network_create_and_init+0x5e>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80077b6:	b2a1      	uxth	r1, r4
 80077b8:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 80077bc:	a805      	add	r0, sp, #20
 80077be:	f002 fabd 	bl	8009d3c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80077c2:	3401      	adds	r4, #1
 80077c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80077c8:	b2a3      	uxth	r3, r4
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d8f3      	bhi.n	80077b6 <ai_network_create_and_init+0x46>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80077ce:	b17e      	cbz	r6, 80077f0 <ai_network_create_and_init+0x80>
 80077d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80077d4:	2400      	movs	r4, #0
 80077d6:	b15b      	cbz	r3, 80077f0 <ai_network_create_and_init+0x80>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80077d8:	b2a1      	uxth	r1, r4
 80077da:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80077de:	a803      	add	r0, sp, #12
 80077e0:	f002 faac 	bl	8009d3c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80077e4:	3401      	adds	r4, #1
 80077e6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80077ea:	b2a3      	uxth	r3, r4
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d8f3      	bhi.n	80077d8 <ai_network_create_and_init+0x68>
  if (ai_network_init(*network, &params) != true) {
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	a902      	add	r1, sp, #8
 80077f4:	f7ff fe96 	bl	8007524 <ai_network_init>
 80077f8:	b128      	cbz	r0, 8007806 <ai_network_create_and_init+0x96>
  return err;
 80077fa:	f368 0507 	bfi	r5, r8, #0, #8
}
 80077fe:	4628      	mov	r0, r5
 8007800:	b011      	add	sp, #68	@ 0x44
 8007802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8007806:	6838      	ldr	r0, [r7, #0]
 8007808:	f002 fbbe 	bl	8009f88 <ai_platform_network_get_error>
 800780c:	4605      	mov	r5, r0
 800780e:	fa5f f880 	uxtb.w	r8, r0
 8007812:	e7f2      	b.n	80077fa <ai_network_create_and_init+0x8a>
 8007814:	6838      	ldr	r0, [r7, #0]
 8007816:	f002 fbb7 	bl	8009f88 <ai_platform_network_get_error>
 800781a:	4605      	mov	r5, r0
    return err;
 800781c:	e7bb      	b.n	8007796 <ai_network_create_and_init+0x26>
 800781e:	bf00      	nop
 8007820:	2000000c 	.word	0x2000000c

08007824 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8007824:	f002 bf5c 	b.w	800a6e0 <ai_platform_network_process>

08007828 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8007828:	4603      	mov	r3, r0
 800782a:	b1a0      	cbz	r0, 8007856 <ai_network_data_params_get+0x2e>
{
 800782c:	b510      	push	{r4, lr}
 800782e:	b084      	sub	sp, #16
  
  const ai_buffer_array map_activations = 
 8007830:	466a      	mov	r2, sp
 8007832:	4c09      	ldr	r4, [pc, #36]	@ (8007858 <ai_network_data_params_get+0x30>)
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007834:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 8007838:	e894 0003 	ldmia.w	r4, {r0, r1}
  const ai_buffer_array map_weights = 
 800783c:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 800783e:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8007842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007846:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800784a:	4661      	mov	r1, ip
 800784c:	4618      	mov	r0, r3
 800784e:	f002 fb25 	bl	8009e9c <ai_platform_bind_network_params>
}
 8007852:	b004      	add	sp, #16
 8007854:	bd10      	pop	{r4, pc}
 8007856:	4770      	bx	lr
 8007858:	0800f7a0 	.word	0x0800f7a0

0800785c <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800785c:	f04f 31ff 	mov.w	r1, #4294967295
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007860:	2200      	movs	r2, #0
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8007862:	f100 0308 	add.w	r3, r0, #8
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007866:	e9c0 3101 	strd	r3, r1, [r0, #4]
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800786a:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800786e:	6002      	str	r2, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop

08007874 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop

0800787c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800787c:	b410      	push	{r4}
    pxIndex->pxPrevious = pxNewListItem;

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800787e:	e9d0 3200 	ldrd	r3, r2, [r0]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007882:	6894      	ldr	r4, [r2, #8]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8007884:	3301      	adds	r3, #1
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007886:	e9c1 2401 	strd	r2, r4, [r1, #4]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800788a:	6061      	str	r1, [r4, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800788c:	6091      	str	r1, [r2, #8]

    traceRETURN_vListInsertEnd();
}
 800788e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pxNewListItem->pxContainer = pxList;
 8007892:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8007894:	6003      	str	r3, [r0, #0]
}
 8007896:	4770      	bx	lr

08007898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007898:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800789a:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800789c:	1c6b      	adds	r3, r5, #1
 800789e:	d010      	beq.n	80078c2 <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80078a0:	f100 0308 	add.w	r3, r0, #8
 80078a4:	461c      	mov	r4, r3
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	42aa      	cmp	r2, r5
 80078ac:	d9fa      	bls.n	80078a4 <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80078ae:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80078b0:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80078b2:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078b4:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80078b6:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80078b8:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 80078ba:	6108      	str	r0, [r1, #16]

    traceRETURN_vListInsert();
}
 80078bc:	bc30      	pop	{r4, r5}
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80078be:	6002      	str	r2, [r0, #0]
}
 80078c0:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80078c2:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	e7f2      	b.n	80078ae <vListInsert+0x16>

080078c8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c8:	4603      	mov	r3, r0
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80078ca:	6902      	ldr	r2, [r0, #16]
{
 80078cc:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80078ce:	6854      	ldr	r4, [r2, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d0:	6840      	ldr	r0, [r0, #4]
 80078d2:	6899      	ldr	r1, [r3, #8]
    if( pxList->pxIndex == pxItemToRemove )
 80078d4:	429c      	cmp	r4, r3
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d6:	6081      	str	r1, [r0, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078d8:	6048      	str	r0, [r1, #4]
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078da:	bf08      	it	eq
 80078dc:	6051      	streq	r1, [r2, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80078de:	2100      	movs	r1, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80078e0:	6810      	ldr	r0, [r2, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 80078e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80078e6:	3801      	subs	r0, #1
    pxItemToRemove->pxContainer = NULL;
 80078e8:	6119      	str	r1, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80078ea:	6010      	str	r0, [r2, #0]
}
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4616      	mov	r6, r2

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078f4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 80078f6:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078f8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078fa:	b92a      	cbnz	r2, 8007908 <prvCopyDataToQueue+0x18>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078fc:	6806      	ldr	r6, [r0, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80078fe:	3501      	adds	r5, #1
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007900:	b34e      	cbz	r6, 8007956 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 8007902:	4610      	mov	r0, r2
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007904:	63a5      	str	r5, [r4, #56]	@ 0x38

    return xReturn;
}
 8007906:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8007908:	b98e      	cbnz	r6, 800792e <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800790a:	6840      	ldr	r0, [r0, #4]
 800790c:	f005 ff9b 	bl	800d846 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8007914:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007916:	440b      	add	r3, r1
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8007918:	4293      	cmp	r3, r2
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800791a:	6063      	str	r3, [r4, #4]
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800791c:	bf28      	it	cs
 800791e:	6823      	ldrcs	r3, [r4, #0]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007920:	f105 0501 	add.w	r5, r5, #1
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007924:	bf28      	it	cs
 8007926:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8007928:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800792a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800792c:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800792e:	68c0      	ldr	r0, [r0, #12]
 8007930:	f005 ff89 	bl	800d846 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007934:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007936:	68e3      	ldr	r3, [r4, #12]
 8007938:	4251      	negs	r1, r2
 800793a:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800793c:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800793e:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8007940:	4293      	cmp	r3, r2
 8007942:	d202      	bcs.n	800794a <prvCopyDataToQueue+0x5a>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007944:	68a3      	ldr	r3, [r4, #8]
 8007946:	440b      	add	r3, r1
 8007948:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 800794a:	2e02      	cmp	r6, #2
 800794c:	d008      	beq.n	8007960 <prvCopyDataToQueue+0x70>
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800794e:	3501      	adds	r5, #1
    BaseType_t xReturn = pdFALSE;
 8007950:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8007952:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007954:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007956:	6880      	ldr	r0, [r0, #8]
 8007958:	f001 fc46 	bl	80091e8 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800795c:	60a6      	str	r6, [r4, #8]
 800795e:	e7d1      	b.n	8007904 <prvCopyDataToQueue+0x14>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007960:	2d01      	cmp	r5, #1
 8007962:	bf38      	it	cc
 8007964:	2501      	movcc	r5, #1
 8007966:	e7df      	b.n	8007928 <prvCopyDataToQueue+0x38>

08007968 <xQueueGenericCreate>:
    {
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	b082      	sub	sp, #8
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800796c:	b140      	cbz	r0, 8007980 <xQueueGenericCreate+0x18>
 800796e:	4604      	mov	r4, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007970:	fba1 0304 	umull	r0, r3, r1, r4
 8007974:	b923      	cbnz	r3, 8007980 <xQueueGenericCreate+0x18>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007976:	fb01 f004 	mul.w	r0, r1, r4
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800797a:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 800797e:	d902      	bls.n	8007986 <xQueueGenericCreate+0x1e>
            configASSERT( pxNewQueue );
 8007980:	f002 f824 	bl	80099cc <ulSetInterruptMask>
 8007984:	e7fe      	b.n	8007984 <xQueueGenericCreate+0x1c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007986:	3050      	adds	r0, #80	@ 0x50
 8007988:	4616      	mov	r6, r2
 800798a:	9101      	str	r1, [sp, #4]
 800798c:	f002 f86c 	bl	8009a68 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8007990:	4605      	mov	r5, r0
 8007992:	b330      	cbz	r0, 80079e2 <xQueueGenericCreate+0x7a>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8007994:	9901      	ldr	r1, [sp, #4]
 8007996:	b339      	cbz	r1, 80079e8 <xQueueGenericCreate+0x80>
                pucQueueStorage += sizeof( Queue_t );
 8007998:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    pxNewQueue->uxItemSize = uxItemSize;
 800799c:	e9c5 410f 	strd	r4, r1, [r5, #60]	@ 0x3c
 80079a0:	602b      	str	r3, [r5, #0]
        taskENTER_CRITICAL();
 80079a2:	f001 fee1 	bl	8009768 <vPortEnterCritical>
            pxQueue->cRxLock = queueUNLOCKED;
 80079a6:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079a8:	2100      	movs	r1, #0
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80079aa:	6c2c      	ldr	r4, [r5, #64]	@ 0x40
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079ac:	63a9      	str	r1, [r5, #56]	@ 0x38
            pxQueue->cRxLock = queueUNLOCKED;
 80079ae:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80079b2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80079b6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80079b8:	6829      	ldr	r1, [r5, #0]
 80079ba:	fb04 f303 	mul.w	r3, r4, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80079be:	1b1c      	subs	r4, r3, r4
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80079c0:	6069      	str	r1, [r5, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80079c2:	440b      	add	r3, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80079c4:	4421      	add	r1, r4
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80079c6:	60ab      	str	r3, [r5, #8]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80079c8:	60e9      	str	r1, [r5, #12]
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079ca:	f105 0010 	add.w	r0, r5, #16
 80079ce:	f7ff ff45 	bl	800785c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079d2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80079d6:	f7ff ff41 	bl	800785c <vListInitialise>
        taskEXIT_CRITICAL();
 80079da:	f001 fed3 	bl	8009784 <vPortExitCritical>
        pxNewQueue->ucQueueType = ucQueueType;
 80079de:	f885 604c 	strb.w	r6, [r5, #76]	@ 0x4c
    }
 80079e2:	4628      	mov	r0, r5
 80079e4:	b002      	add	sp, #8
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079e8:	4603      	mov	r3, r0
 80079ea:	e7d7      	b.n	800799c <xQueueGenericCreate+0x34>

080079ec <xQueueGenericSend>:
{
 80079ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079f0:	b085      	sub	sp, #20
 80079f2:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f000 810d 	beq.w	8007c14 <xQueueGenericSend+0x228>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079fa:	4604      	mov	r4, r0
 80079fc:	4688      	mov	r8, r1
 80079fe:	461f      	mov	r7, r3
 8007a00:	2900      	cmp	r1, #0
 8007a02:	f000 80f3 	beq.w	8007bec <xQueueGenericSend+0x200>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a06:	2f02      	cmp	r7, #2
 8007a08:	d103      	bne.n	8007a12 <xQueueGenericSend+0x26>
 8007a0a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	f040 80f4 	bne.w	8007bfa <xQueueGenericSend+0x20e>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a12:	f001 fb91 	bl	8009138 <xTaskGetSchedulerState>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f000 8090 	beq.w	8007b3c <xQueueGenericSend+0x150>
        taskENTER_CRITICAL();
 8007a1c:	f001 fea4 	bl	8009768 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a22:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d379      	bcc.n	8007b1c <xQueueGenericSend+0x130>
 8007a28:	2f02      	cmp	r7, #2
 8007a2a:	d077      	beq.n	8007b1c <xQueueGenericSend+0x130>
 8007a2c:	2300      	movs	r3, #0
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a2e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
                if( xTicksToWait == ( TickType_t ) 0 )
 8007a32:	9a01      	ldr	r2, [sp, #4]
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	f000 80f0 	beq.w	8007c1a <xQueueGenericSend+0x22e>
                else if( xEntryTimeSet == pdFALSE )
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80d2 	beq.w	8007be4 <xQueueGenericSend+0x1f8>
        taskEXIT_CRITICAL();
 8007a40:	f001 fea0 	bl	8009784 <vPortExitCritical>
        vTaskSuspendAll();
 8007a44:	f001 f9d0 	bl	8008de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007a48:	f001 fe8e 	bl	8009768 <vPortEnterCritical>
 8007a4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007a50:	2bff      	cmp	r3, #255	@ 0xff
 8007a52:	bf04      	itt	eq
 8007a54:	2300      	moveq	r3, #0
 8007a56:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007a5a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007a5e:	2bff      	cmp	r3, #255	@ 0xff
 8007a60:	bf04      	itt	eq
 8007a62:	2300      	moveq	r3, #0
 8007a64:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007a68:	f001 fe8c 	bl	8009784 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a6c:	a802      	add	r0, sp, #8
 8007a6e:	a901      	add	r1, sp, #4
 8007a70:	f001 fb24 	bl	80090bc <xTaskCheckForTimeOut>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f040 80d6 	bne.w	8007c26 <xQueueGenericSend+0x23a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007a7a:	f001 fe75 	bl	8009768 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a7e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d061      	beq.n	8007b4a <xQueueGenericSend+0x15e>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8007a86:	f001 fe7d 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007a8a:	f001 fe6d 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007a8e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8007a92:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	dc04      	bgt.n	8007aa2 <xQueueGenericSend+0xb6>
 8007a98:	e011      	b.n	8007abe <xQueueGenericSend+0xd2>
            --cTxLock;
 8007a9a:	1e6a      	subs	r2, r5, #1
 8007a9c:	b2d3      	uxtb	r3, r2
 8007a9e:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aa0:	b16b      	cbz	r3, 8007abe <xQueueGenericSend+0xd2>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aa2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007aa4:	b15b      	cbz	r3, 8007abe <xQueueGenericSend+0xd2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f001 fa92 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0f4      	beq.n	8007a9a <xQueueGenericSend+0xae>
                        vTaskMissedYield();
 8007ab0:	f001 fb3c 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8007ab4:	1e6a      	subs	r2, r5, #1
 8007ab6:	b2d3      	uxtb	r3, r2
 8007ab8:	b255      	sxtb	r5, r2
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f1      	bne.n	8007aa2 <xQueueGenericSend+0xb6>
        pxQueue->cTxLock = queueUNLOCKED;
 8007abe:	23ff      	movs	r3, #255	@ 0xff
 8007ac0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007ac4:	f001 fe5e 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007ac8:	f001 fe4e 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007acc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8007ad0:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	dd14      	ble.n	8007b00 <xQueueGenericSend+0x114>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad6:	f104 0910 	add.w	r9, r4, #16
 8007ada:	e003      	b.n	8007ae4 <xQueueGenericSend+0xf8>
                --cRxLock;
 8007adc:	1e6a      	subs	r2, r5, #1
 8007ade:	b2d3      	uxtb	r3, r2
 8007ae0:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ae2:	b16b      	cbz	r3, 8007b00 <xQueueGenericSend+0x114>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b15b      	cbz	r3, 8007b00 <xQueueGenericSend+0x114>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae8:	4648      	mov	r0, r9
 8007aea:	f001 fa71 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d0f4      	beq.n	8007adc <xQueueGenericSend+0xf0>
                    vTaskMissedYield();
 8007af2:	f001 fb1b 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8007af6:	1e6a      	subs	r2, r5, #1
 8007af8:	b2d3      	uxtb	r3, r2
 8007afa:	b255      	sxtb	r5, r2
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1f1      	bne.n	8007ae4 <xQueueGenericSend+0xf8>
        pxQueue->cRxLock = queueUNLOCKED;
 8007b00:	23ff      	movs	r3, #255	@ 0xff
 8007b02:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007b06:	f001 fe3d 	bl	8009784 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8007b0a:	f001 f975 	bl	8008df8 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8007b0e:	f001 fe2b 	bl	8009768 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b12:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007b14:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007b16:	2301      	movs	r3, #1
 8007b18:	4291      	cmp	r1, r2
 8007b1a:	d28a      	bcs.n	8007a32 <xQueueGenericSend+0x46>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	4641      	mov	r1, r8
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff fee5 	bl	80078f0 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d16c      	bne.n	8007c06 <xQueueGenericSend+0x21a>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d167      	bne.n	8007c00 <xQueueGenericSend+0x214>
                taskEXIT_CRITICAL();
 8007b30:	f001 fe28 	bl	8009784 <vPortExitCritical>
                return pdPASS;
 8007b34:	2001      	movs	r0, #1
}
 8007b36:	b005      	add	sp, #20
 8007b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f43f af6c 	beq.w	8007a1c <xQueueGenericSend+0x30>
 8007b44:	f001 ff42 	bl	80099cc <ulSetInterruptMask>
 8007b48:	e7fe      	b.n	8007b48 <xQueueGenericSend+0x15c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b4a:	f104 0910 	add.w	r9, r4, #16
    taskEXIT_CRITICAL();
 8007b4e:	f001 fe19 	bl	8009784 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b52:	4648      	mov	r0, r9
 8007b54:	9901      	ldr	r1, [sp, #4]
 8007b56:	f001 f983 	bl	8008e60 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8007b5a:	f001 fe05 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007b5e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b62:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	dc04      	bgt.n	8007b72 <xQueueGenericSend+0x186>
 8007b68:	e011      	b.n	8007b8e <xQueueGenericSend+0x1a2>
            --cTxLock;
 8007b6a:	1e6b      	subs	r3, r5, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b70:	b16a      	cbz	r2, 8007b8e <xQueueGenericSend+0x1a2>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b74:	b15b      	cbz	r3, 8007b8e <xQueueGenericSend+0x1a2>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b76:	4630      	mov	r0, r6
 8007b78:	f001 fa2a 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0f4      	beq.n	8007b6a <xQueueGenericSend+0x17e>
                        vTaskMissedYield();
 8007b80:	f001 fad4 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8007b84:	1e6b      	subs	r3, r5, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	d1f1      	bne.n	8007b72 <xQueueGenericSend+0x186>
        pxQueue->cTxLock = queueUNLOCKED;
 8007b8e:	23ff      	movs	r3, #255	@ 0xff
 8007b90:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007b94:	f001 fdf6 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007b98:	f001 fde6 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007b9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ba0:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	dc04      	bgt.n	8007bb0 <xQueueGenericSend+0x1c4>
 8007ba6:	e011      	b.n	8007bcc <xQueueGenericSend+0x1e0>
                --cRxLock;
 8007ba8:	1e6b      	subs	r3, r5, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bae:	b16a      	cbz	r2, 8007bcc <xQueueGenericSend+0x1e0>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	b15b      	cbz	r3, 8007bcc <xQueueGenericSend+0x1e0>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb4:	4648      	mov	r0, r9
 8007bb6:	f001 fa0b 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d0f4      	beq.n	8007ba8 <xQueueGenericSend+0x1bc>
                    vTaskMissedYield();
 8007bbe:	f001 fab5 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8007bc2:	1e6b      	subs	r3, r5, #1
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	d1f1      	bne.n	8007bb0 <xQueueGenericSend+0x1c4>
        pxQueue->cRxLock = queueUNLOCKED;
 8007bcc:	23ff      	movs	r3, #255	@ 0xff
 8007bce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007bd2:	f001 fdd7 	bl	8009784 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8007bd6:	f001 f90f 	bl	8008df8 <xTaskResumeAll>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d197      	bne.n	8007b0e <xQueueGenericSend+0x122>
                    taskYIELD_WITHIN_API();
 8007bde:	f001 fdb7 	bl	8009750 <vPortYield>
 8007be2:	e794      	b.n	8007b0e <xQueueGenericSend+0x122>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007be4:	a802      	add	r0, sp, #8
 8007be6:	f001 fa5d 	bl	80090a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007bea:	e729      	b.n	8007a40 <xQueueGenericSend+0x54>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f43f af09 	beq.w	8007a06 <xQueueGenericSend+0x1a>
 8007bf4:	f001 feea 	bl	80099cc <ulSetInterruptMask>
 8007bf8:	e7fe      	b.n	8007bf8 <xQueueGenericSend+0x20c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bfa:	f001 fee7 	bl	80099cc <ulSetInterruptMask>
 8007bfe:	e7fe      	b.n	8007bfe <xQueueGenericSend+0x212>
                            queueYIELD_IF_USING_PREEMPTION();
 8007c00:	f001 fda6 	bl	8009750 <vPortYield>
 8007c04:	e794      	b.n	8007b30 <xQueueGenericSend+0x144>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c06:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c0a:	f001 f9e1 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d08e      	beq.n	8007b30 <xQueueGenericSend+0x144>
 8007c12:	e7f5      	b.n	8007c00 <xQueueGenericSend+0x214>
    configASSERT( pxQueue );
 8007c14:	f001 feda 	bl	80099cc <ulSetInterruptMask>
 8007c18:	e7fe      	b.n	8007c18 <xQueueGenericSend+0x22c>
                    taskEXIT_CRITICAL();
 8007c1a:	f001 fdb3 	bl	8009784 <vPortExitCritical>
                    return errQUEUE_FULL;
 8007c1e:	2000      	movs	r0, #0
}
 8007c20:	b005      	add	sp, #20
 8007c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskENTER_CRITICAL();
 8007c26:	f001 fd9f 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007c2a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007c2e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c30:	2d00      	cmp	r5, #0
 8007c32:	dd10      	ble.n	8007c56 <xQueueGenericSend+0x26a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c34:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8007c38:	e003      	b.n	8007c42 <xQueueGenericSend+0x256>
            --cTxLock;
 8007c3a:	1e6b      	subs	r3, r5, #1
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c40:	b14a      	cbz	r2, 8007c56 <xQueueGenericSend+0x26a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c44:	b13b      	cbz	r3, 8007c56 <xQueueGenericSend+0x26a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c46:	4630      	mov	r0, r6
 8007c48:	f001 f9c2 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d0f4      	beq.n	8007c3a <xQueueGenericSend+0x24e>
                        vTaskMissedYield();
 8007c50:	f001 fa6c 	bl	800912c <vTaskMissedYield>
 8007c54:	e7f1      	b.n	8007c3a <xQueueGenericSend+0x24e>
        pxQueue->cTxLock = queueUNLOCKED;
 8007c56:	23ff      	movs	r3, #255	@ 0xff
 8007c58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007c5c:	f001 fd92 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007c60:	f001 fd82 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007c64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007c68:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	dd10      	ble.n	8007c90 <xQueueGenericSend+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c6e:	f104 0610 	add.w	r6, r4, #16
 8007c72:	e003      	b.n	8007c7c <xQueueGenericSend+0x290>
                --cRxLock;
 8007c74:	1e6b      	subs	r3, r5, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c7a:	b14a      	cbz	r2, 8007c90 <xQueueGenericSend+0x2a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	b13b      	cbz	r3, 8007c90 <xQueueGenericSend+0x2a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c80:	4630      	mov	r0, r6
 8007c82:	f001 f9a5 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d0f4      	beq.n	8007c74 <xQueueGenericSend+0x288>
                    vTaskMissedYield();
 8007c8a:	f001 fa4f 	bl	800912c <vTaskMissedYield>
 8007c8e:	e7f1      	b.n	8007c74 <xQueueGenericSend+0x288>
        pxQueue->cRxLock = queueUNLOCKED;
 8007c90:	23ff      	movs	r3, #255	@ 0xff
 8007c92:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007c96:	f001 fd75 	bl	8009784 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8007c9a:	f001 f8ad 	bl	8008df8 <xTaskResumeAll>
            return errQUEUE_FULL;
 8007c9e:	e7be      	b.n	8007c1e <xQueueGenericSend+0x232>

08007ca0 <xQueueCreateMutex>:
    {
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4605      	mov	r5, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007ca4:	2050      	movs	r0, #80	@ 0x50
 8007ca6:	f001 fedf 	bl	8009a68 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8007caa:	4604      	mov	r4, r0
 8007cac:	b368      	cbz	r0, 8007d0a <xQueueCreateMutex+0x6a>
    pxNewQueue->uxLength = uxQueueLength;
 8007cae:	2600      	movs	r6, #0
 8007cb0:	2301      	movs	r3, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cb2:	6020      	str	r0, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8007cb4:	e9c0 360f 	strd	r3, r6, [r0, #60]	@ 0x3c
        taskENTER_CRITICAL();
 8007cb8:	f001 fd56 	bl	8009768 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007cbc:	e9d4 2c0f 	ldrd	r2, ip, [r4, #60]	@ 0x3c
            pxQueue->cRxLock = queueUNLOCKED;
 8007cc0:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007cc2:	fb02 f20c 	mul.w	r2, r2, ip
 8007cc6:	6821      	ldr	r1, [r4, #0]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007cc8:	eba2 0c0c 	sub.w	ip, r2, ip
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ccc:	6061      	str	r1, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007cce:	440a      	add	r2, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8007cd0:	4461      	add	r1, ip
 8007cd2:	e9c4 2102 	strd	r2, r1, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cd6:	63a6      	str	r6, [r4, #56]	@ 0x38
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cd8:	f104 0010 	add.w	r0, r4, #16
            pxQueue->cRxLock = queueUNLOCKED;
 8007cdc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007ce0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ce4:	f7ff fdba 	bl	800785c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ce8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007cec:	f7ff fdb6 	bl	800785c <vListInitialise>
        taskEXIT_CRITICAL();
 8007cf0:	f001 fd48 	bl	8009784 <vPortExitCritical>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007cf4:	4633      	mov	r3, r6
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
 8007cfc:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d00:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d02:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d04:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d06:	f7ff fe71 	bl	80079ec <xQueueGenericSend>
    }
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	bd70      	pop	{r4, r5, r6, pc}
 8007d0e:	bf00      	nop

08007d10 <xQueueReceive>:
{
 8007d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d14:	b085      	sub	sp, #20
 8007d16:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f000 8135 	beq.w	8007f88 <xQueueReceive+0x278>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d1e:	4604      	mov	r4, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	2900      	cmp	r1, #0
 8007d24:	f000 8122 	beq.w	8007f6c <xQueueReceive+0x25c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d28:	f001 fa06 	bl	8009138 <xTaskGetSchedulerState>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f000 8124 	beq.w	8007f7a <xQueueReceive+0x26a>
        taskENTER_CRITICAL();
 8007d32:	f001 fd19 	bl	8009768 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d36:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	f040 8128 	bne.w	8007f8e <xQueueReceive+0x27e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80be 	beq.w	8007ec2 <xQueueReceive+0x1b2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007d46:	a802      	add	r0, sp, #8
 8007d48:	f001 f9ac 	bl	80090a4 <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
 8007d4c:	46a8      	mov	r8, r5
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d4e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        taskEXIT_CRITICAL();
 8007d52:	f001 fd17 	bl	8009784 <vPortExitCritical>
        vTaskSuspendAll();
 8007d56:	f001 f847 	bl	8008de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007d5a:	f001 fd05 	bl	8009768 <vPortEnterCritical>
 8007d5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d62:	2bff      	cmp	r3, #255	@ 0xff
 8007d64:	bf08      	it	eq
 8007d66:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007d6a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d6e:	2bff      	cmp	r3, #255	@ 0xff
 8007d70:	bf08      	it	eq
 8007d72:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007d76:	f001 fd05 	bl	8009784 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d7a:	a901      	add	r1, sp, #4
 8007d7c:	a802      	add	r0, sp, #8
 8007d7e:	f001 f99d 	bl	80090bc <xTaskCheckForTimeOut>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d14c      	bne.n	8007e20 <xQueueReceive+0x110>
    taskENTER_CRITICAL();
 8007d86:	f001 fcef 	bl	8009768 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007d8a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 809e 	beq.w	8007ece <xQueueReceive+0x1be>
    taskEXIT_CRITICAL();
 8007d92:	f001 fcf7 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007d96:	f001 fce7 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007d9a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d9e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	dd14      	ble.n	8007dce <xQueueReceive+0xbe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007da4:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8007da8:	e003      	b.n	8007db2 <xQueueReceive+0xa2>
            --cTxLock;
 8007daa:	1e6b      	subs	r3, r5, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007db0:	b16a      	cbz	r2, 8007dce <xQueueReceive+0xbe>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007db4:	b15b      	cbz	r3, 8007dce <xQueueReceive+0xbe>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db6:	4648      	mov	r0, r9
 8007db8:	f001 f90a 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d0f4      	beq.n	8007daa <xQueueReceive+0x9a>
                        vTaskMissedYield();
 8007dc0:	f001 f9b4 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8007dc4:	1e6b      	subs	r3, r5, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	d1f1      	bne.n	8007db2 <xQueueReceive+0xa2>
        pxQueue->cTxLock = queueUNLOCKED;
 8007dce:	23ff      	movs	r3, #255	@ 0xff
 8007dd0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007dd4:	f001 fcd6 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007dd8:	f001 fcc6 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007ddc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007de0:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	dd14      	ble.n	8007e10 <xQueueReceive+0x100>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007de6:	f104 0910 	add.w	r9, r4, #16
 8007dea:	e003      	b.n	8007df4 <xQueueReceive+0xe4>
                --cRxLock;
 8007dec:	1e6b      	subs	r3, r5, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007df2:	b16a      	cbz	r2, 8007e10 <xQueueReceive+0x100>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	b15b      	cbz	r3, 8007e10 <xQueueReceive+0x100>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f001 f8e9 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d0f4      	beq.n	8007dec <xQueueReceive+0xdc>
                    vTaskMissedYield();
 8007e02:	f001 f993 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8007e06:	1e6b      	subs	r3, r5, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	d1f1      	bne.n	8007df4 <xQueueReceive+0xe4>
        pxQueue->cRxLock = queueUNLOCKED;
 8007e10:	23ff      	movs	r3, #255	@ 0xff
 8007e12:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007e16:	f001 fcb5 	bl	8009784 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 8007e1a:	f000 ffed 	bl	8008df8 <xTaskResumeAll>
 8007e1e:	e047      	b.n	8007eb0 <xQueueReceive+0x1a0>
    taskENTER_CRITICAL();
 8007e20:	f001 fca2 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007e24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007e28:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	dc04      	bgt.n	8007e38 <xQueueReceive+0x128>
 8007e2e:	e011      	b.n	8007e54 <xQueueReceive+0x144>
            --cTxLock;
 8007e30:	1e6b      	subs	r3, r5, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e36:	b16a      	cbz	r2, 8007e54 <xQueueReceive+0x144>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e3a:	b15b      	cbz	r3, 8007e54 <xQueueReceive+0x144>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f001 f8c7 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d0f4      	beq.n	8007e30 <xQueueReceive+0x120>
                        vTaskMissedYield();
 8007e46:	f001 f971 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8007e4a:	1e6b      	subs	r3, r5, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	d1f1      	bne.n	8007e38 <xQueueReceive+0x128>
        pxQueue->cTxLock = queueUNLOCKED;
 8007e54:	23ff      	movs	r3, #255	@ 0xff
 8007e56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007e5a:	f001 fc93 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007e5e:	f001 fc83 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007e62:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007e66:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	dd14      	ble.n	8007e96 <xQueueReceive+0x186>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e6c:	f104 0910 	add.w	r9, r4, #16
 8007e70:	e003      	b.n	8007e7a <xQueueReceive+0x16a>
                --cRxLock;
 8007e72:	1e6b      	subs	r3, r5, #1
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e78:	b16a      	cbz	r2, 8007e96 <xQueueReceive+0x186>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	b15b      	cbz	r3, 8007e96 <xQueueReceive+0x186>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7e:	4648      	mov	r0, r9
 8007e80:	f001 f8a6 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d0f4      	beq.n	8007e72 <xQueueReceive+0x162>
                    vTaskMissedYield();
 8007e88:	f001 f950 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8007e8c:	1e6b      	subs	r3, r5, #1
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	d1f1      	bne.n	8007e7a <xQueueReceive+0x16a>
        pxQueue->cRxLock = queueUNLOCKED;
 8007e96:	23ff      	movs	r3, #255	@ 0xff
 8007e98:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007e9c:	f001 fc72 	bl	8009784 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 8007ea0:	f000 ffaa 	bl	8008df8 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8007ea4:	f001 fc60 	bl	8009768 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007ea8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007eaa:	b153      	cbz	r3, 8007ec2 <xQueueReceive+0x1b2>
    taskEXIT_CRITICAL();
 8007eac:	f001 fc6a 	bl	8009784 <vPortExitCritical>
        taskENTER_CRITICAL();
 8007eb0:	f001 fc5a 	bl	8009768 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eb4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	d169      	bne.n	8007f8e <xQueueReceive+0x27e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f47f af48 	bne.w	8007d52 <xQueueReceive+0x42>
                    taskEXIT_CRITICAL();
 8007ec2:	f001 fc5f 	bl	8009784 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8007ec6:	2000      	movs	r0, #0
}
 8007ec8:	b005      	add	sp, #20
 8007eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ece:	f104 0924 	add.w	r9, r4, #36	@ 0x24
    taskEXIT_CRITICAL();
 8007ed2:	f001 fc57 	bl	8009784 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ed6:	4648      	mov	r0, r9
 8007ed8:	9901      	ldr	r1, [sp, #4]
 8007eda:	f000 ffc1 	bl	8008e60 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 8007ede:	f001 fc43 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8007ee2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ee6:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	dc04      	bgt.n	8007ef6 <xQueueReceive+0x1e6>
 8007eec:	e011      	b.n	8007f12 <xQueueReceive+0x202>
            --cTxLock;
 8007eee:	1e6b      	subs	r3, r5, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef4:	b16a      	cbz	r2, 8007f12 <xQueueReceive+0x202>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ef6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ef8:	b15b      	cbz	r3, 8007f12 <xQueueReceive+0x202>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007efa:	4648      	mov	r0, r9
 8007efc:	f001 f868 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d0f4      	beq.n	8007eee <xQueueReceive+0x1de>
                        vTaskMissedYield();
 8007f04:	f001 f912 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8007f08:	1e6b      	subs	r3, r5, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d1f1      	bne.n	8007ef6 <xQueueReceive+0x1e6>
        pxQueue->cTxLock = queueUNLOCKED;
 8007f12:	23ff      	movs	r3, #255	@ 0xff
 8007f14:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8007f18:	f001 fc34 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8007f1c:	f001 fc24 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8007f20:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f24:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	dd14      	ble.n	8007f54 <xQueueReceive+0x244>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f2a:	f104 0910 	add.w	r9, r4, #16
 8007f2e:	e003      	b.n	8007f38 <xQueueReceive+0x228>
                --cRxLock;
 8007f30:	1e6b      	subs	r3, r5, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f36:	b16a      	cbz	r2, 8007f54 <xQueueReceive+0x244>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	b15b      	cbz	r3, 8007f54 <xQueueReceive+0x244>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f001 f847 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0f4      	beq.n	8007f30 <xQueueReceive+0x220>
                    vTaskMissedYield();
 8007f46:	f001 f8f1 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8007f4a:	1e6b      	subs	r3, r5, #1
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	d1f1      	bne.n	8007f38 <xQueueReceive+0x228>
        pxQueue->cRxLock = queueUNLOCKED;
 8007f54:	23ff      	movs	r3, #255	@ 0xff
 8007f56:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8007f5a:	f001 fc13 	bl	8009784 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 8007f5e:	f000 ff4b 	bl	8008df8 <xTaskResumeAll>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1a4      	bne.n	8007eb0 <xQueueReceive+0x1a0>
                    taskYIELD_WITHIN_API();
 8007f66:	f001 fbf3 	bl	8009750 <vPortYield>
 8007f6a:	e7a1      	b.n	8007eb0 <xQueueReceive+0x1a0>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f6c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f43f aeda 	beq.w	8007d28 <xQueueReceive+0x18>
 8007f74:	f001 fd2a 	bl	80099cc <ulSetInterruptMask>
 8007f78:	e7fe      	b.n	8007f78 <xQueueReceive+0x268>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f43f aed8 	beq.w	8007d32 <xQueueReceive+0x22>
 8007f82:	f001 fd23 	bl	80099cc <ulSetInterruptMask>
 8007f86:	e7fe      	b.n	8007f86 <xQueueReceive+0x276>
    configASSERT( ( pxQueue ) );
 8007f88:	f001 fd20 	bl	80099cc <ulSetInterruptMask>
 8007f8c:	e7fe      	b.n	8007f8c <xQueueReceive+0x27c>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f8e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007f90:	b15a      	cbz	r2, 8007faa <xQueueReceive+0x29a>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007f92:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8007f94:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007f96:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8007f98:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8007f9a:	60e1      	str	r1, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f9c:	bf28      	it	cs
 8007f9e:	6821      	ldrcs	r1, [r4, #0]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8007fa0:	4638      	mov	r0, r7
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fa2:	bf28      	it	cs
 8007fa4:	60e1      	strcs	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8007fa6:	f005 fc4e 	bl	800d846 <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007faa:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8007fac:	3d01      	subs	r5, #1
 8007fae:	63a5      	str	r5, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb0:	b91b      	cbnz	r3, 8007fba <xQueueReceive+0x2aa>
                taskEXIT_CRITICAL();
 8007fb2:	f001 fbe7 	bl	8009784 <vPortExitCritical>
                return pdPASS;
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e786      	b.n	8007ec8 <xQueueReceive+0x1b8>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fba:	f104 0010 	add.w	r0, r4, #16
 8007fbe:	f001 f807 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d0f5      	beq.n	8007fb2 <xQueueReceive+0x2a2>
                        queueYIELD_IF_USING_PREEMPTION();
 8007fc6:	f001 fbc3 	bl	8009750 <vPortYield>
 8007fca:	e7f2      	b.n	8007fb2 <xQueueReceive+0x2a2>

08007fcc <xQueueSemaphoreTake>:
{
 8007fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f000 8142 	beq.w	800825e <xQueueSemaphoreTake+0x292>
    configASSERT( pxQueue->uxItemSize == 0 );
 8007fda:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007fdc:	4604      	mov	r4, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f040 8088 	bne.w	80080f4 <xQueueSemaphoreTake+0x128>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fe4:	f001 f8a8 	bl	8009138 <xTaskGetSchedulerState>
 8007fe8:	b918      	cbnz	r0, 8007ff2 <xQueueSemaphoreTake+0x26>
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f040 8133 	bne.w	8008258 <xQueueSemaphoreTake+0x28c>
        taskENTER_CRITICAL();
 8007ff2:	f001 fbb9 	bl	8009768 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ff6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	f040 8141 	bne.w	8008280 <xQueueSemaphoreTake+0x2b4>
                if( xTicksToWait == ( TickType_t ) 0 )
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8126 	beq.w	8008252 <xQueueSemaphoreTake+0x286>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008006:	a802      	add	r0, sp, #8
 8008008:	f001 f84c 	bl	80090a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800800c:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 800800e:	46a8      	mov	r8, r5
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008010:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        taskEXIT_CRITICAL();
 8008014:	f001 fbb6 	bl	8009784 <vPortExitCritical>
        vTaskSuspendAll();
 8008018:	f000 fee6 	bl	8008de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800801c:	f001 fba4 	bl	8009768 <vPortEnterCritical>
 8008020:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008024:	2bff      	cmp	r3, #255	@ 0xff
 8008026:	bf08      	it	eq
 8008028:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800802c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008030:	2bff      	cmp	r3, #255	@ 0xff
 8008032:	bf08      	it	eq
 8008034:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008038:	f001 fba4 	bl	8009784 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800803c:	a901      	add	r1, sp, #4
 800803e:	a802      	add	r0, sp, #8
 8008040:	f001 f83c 	bl	80090bc <xTaskCheckForTimeOut>
 8008044:	2800      	cmp	r0, #0
 8008046:	d158      	bne.n	80080fa <xQueueSemaphoreTake+0x12e>
    taskENTER_CRITICAL();
 8008048:	f001 fb8e 	bl	8009768 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800804c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 80a2 	beq.w	8008198 <xQueueSemaphoreTake+0x1cc>
    taskEXIT_CRITICAL();
 8008054:	f001 fb96 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8008058:	f001 fb86 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800805c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008060:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008062:	2d00      	cmp	r5, #0
 8008064:	dd14      	ble.n	8008090 <xQueueSemaphoreTake+0xc4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008066:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 800806a:	e003      	b.n	8008074 <xQueueSemaphoreTake+0xa8>
            --cTxLock;
 800806c:	1e6b      	subs	r3, r5, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008072:	b16a      	cbz	r2, 8008090 <xQueueSemaphoreTake+0xc4>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008074:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008076:	b15b      	cbz	r3, 8008090 <xQueueSemaphoreTake+0xc4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008078:	4648      	mov	r0, r9
 800807a:	f000 ffa9 	bl	8008fd0 <xTaskRemoveFromEventList>
 800807e:	2800      	cmp	r0, #0
 8008080:	d0f4      	beq.n	800806c <xQueueSemaphoreTake+0xa0>
                        vTaskMissedYield();
 8008082:	f001 f853 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8008086:	1e6b      	subs	r3, r5, #1
 8008088:	b2da      	uxtb	r2, r3
 800808a:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800808c:	2a00      	cmp	r2, #0
 800808e:	d1f1      	bne.n	8008074 <xQueueSemaphoreTake+0xa8>
        pxQueue->cTxLock = queueUNLOCKED;
 8008090:	23ff      	movs	r3, #255	@ 0xff
 8008092:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008096:	f001 fb75 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 800809a:	f001 fb65 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800809e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80080a2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	dd14      	ble.n	80080d2 <xQueueSemaphoreTake+0x106>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a8:	f104 0910 	add.w	r9, r4, #16
 80080ac:	e003      	b.n	80080b6 <xQueueSemaphoreTake+0xea>
                --cRxLock;
 80080ae:	1e6b      	subs	r3, r5, #1
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b4:	b16a      	cbz	r2, 80080d2 <xQueueSemaphoreTake+0x106>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	b15b      	cbz	r3, 80080d2 <xQueueSemaphoreTake+0x106>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ba:	4648      	mov	r0, r9
 80080bc:	f000 ff88 	bl	8008fd0 <xTaskRemoveFromEventList>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d0f4      	beq.n	80080ae <xQueueSemaphoreTake+0xe2>
                    vTaskMissedYield();
 80080c4:	f001 f832 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 80080c8:	1e6b      	subs	r3, r5, #1
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	d1f1      	bne.n	80080b6 <xQueueSemaphoreTake+0xea>
        pxQueue->cRxLock = queueUNLOCKED;
 80080d2:	23ff      	movs	r3, #255	@ 0xff
 80080d4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 80080d8:	f001 fb54 	bl	8009784 <vPortExitCritical>
                ( void ) xTaskResumeAll();
 80080dc:	f000 fe8c 	bl	8008df8 <xTaskResumeAll>
        taskENTER_CRITICAL();
 80080e0:	f001 fb42 	bl	8009768 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080e4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	f040 80ca 	bne.w	8008280 <xQueueSemaphoreTake+0x2b4>
                if( xTicksToWait == ( TickType_t ) 0 )
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d190      	bne.n	8008014 <xQueueSemaphoreTake+0x48>
 80080f2:	e0ae      	b.n	8008252 <xQueueSemaphoreTake+0x286>
    configASSERT( pxQueue->uxItemSize == 0 );
 80080f4:	f001 fc6a 	bl	80099cc <ulSetInterruptMask>
 80080f8:	e7fe      	b.n	80080f8 <xQueueSemaphoreTake+0x12c>
    taskENTER_CRITICAL();
 80080fa:	f001 fb35 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80080fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008102:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008104:	2d00      	cmp	r5, #0
 8008106:	dc04      	bgt.n	8008112 <xQueueSemaphoreTake+0x146>
 8008108:	e011      	b.n	800812e <xQueueSemaphoreTake+0x162>
            --cTxLock;
 800810a:	1e6b      	subs	r3, r5, #1
 800810c:	b2da      	uxtb	r2, r3
 800810e:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008110:	b16a      	cbz	r2, 800812e <xQueueSemaphoreTake+0x162>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008112:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008114:	b15b      	cbz	r3, 800812e <xQueueSemaphoreTake+0x162>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008116:	4630      	mov	r0, r6
 8008118:	f000 ff5a 	bl	8008fd0 <xTaskRemoveFromEventList>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0f4      	beq.n	800810a <xQueueSemaphoreTake+0x13e>
                        vTaskMissedYield();
 8008120:	f001 f804 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8008124:	1e6b      	subs	r3, r5, #1
 8008126:	b2da      	uxtb	r2, r3
 8008128:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800812a:	2a00      	cmp	r2, #0
 800812c:	d1f1      	bne.n	8008112 <xQueueSemaphoreTake+0x146>
        pxQueue->cTxLock = queueUNLOCKED;
 800812e:	23ff      	movs	r3, #255	@ 0xff
 8008130:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008134:	f001 fb26 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8008138:	f001 fb16 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800813c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008140:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008142:	2d00      	cmp	r5, #0
 8008144:	dd14      	ble.n	8008170 <xQueueSemaphoreTake+0x1a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008146:	f104 0910 	add.w	r9, r4, #16
 800814a:	e003      	b.n	8008154 <xQueueSemaphoreTake+0x188>
                --cRxLock;
 800814c:	1e6b      	subs	r3, r5, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008152:	b16a      	cbz	r2, 8008170 <xQueueSemaphoreTake+0x1a4>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	b15b      	cbz	r3, 8008170 <xQueueSemaphoreTake+0x1a4>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008158:	4648      	mov	r0, r9
 800815a:	f000 ff39 	bl	8008fd0 <xTaskRemoveFromEventList>
 800815e:	2800      	cmp	r0, #0
 8008160:	d0f4      	beq.n	800814c <xQueueSemaphoreTake+0x180>
                    vTaskMissedYield();
 8008162:	f000 ffe3 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8008166:	1e6b      	subs	r3, r5, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800816c:	2a00      	cmp	r2, #0
 800816e:	d1f1      	bne.n	8008154 <xQueueSemaphoreTake+0x188>
        pxQueue->cRxLock = queueUNLOCKED;
 8008170:	23ff      	movs	r3, #255	@ 0xff
 8008172:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8008176:	f001 fb05 	bl	8009784 <vPortExitCritical>
            ( void ) xTaskResumeAll();
 800817a:	f000 fe3d 	bl	8008df8 <xTaskResumeAll>
    taskENTER_CRITICAL();
 800817e:	f001 faf3 	bl	8009768 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008182:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d15a      	bne.n	800823e <xQueueSemaphoreTake+0x272>
    taskEXIT_CRITICAL();
 8008188:	f001 fafc 	bl	8009784 <vPortExitCritical>
                    if( xInheritanceOccurred != pdFALSE )
 800818c:	2f00      	cmp	r7, #0
 800818e:	d159      	bne.n	8008244 <xQueueSemaphoreTake+0x278>
                    return errQUEUE_EMPTY;
 8008190:	2000      	movs	r0, #0
}
 8008192:	b005      	add	sp, #20
 8008194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    taskEXIT_CRITICAL();
 8008198:	f001 faf4 	bl	8009784 <vPortExitCritical>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d065      	beq.n	800826e <xQueueSemaphoreTake+0x2a2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081a2:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 80081a6:	4648      	mov	r0, r9
 80081a8:	9901      	ldr	r1, [sp, #4]
 80081aa:	f000 fe59 	bl	8008e60 <vTaskPlaceOnEventList>
    taskENTER_CRITICAL();
 80081ae:	f001 fadb 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80081b2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80081b6:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	dc04      	bgt.n	80081c6 <xQueueSemaphoreTake+0x1fa>
 80081bc:	e011      	b.n	80081e2 <xQueueSemaphoreTake+0x216>
            --cTxLock;
 80081be:	1e6b      	subs	r3, r5, #1
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081c4:	b16a      	cbz	r2, 80081e2 <xQueueSemaphoreTake+0x216>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081c8:	b15b      	cbz	r3, 80081e2 <xQueueSemaphoreTake+0x216>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ca:	4648      	mov	r0, r9
 80081cc:	f000 ff00 	bl	8008fd0 <xTaskRemoveFromEventList>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d0f4      	beq.n	80081be <xQueueSemaphoreTake+0x1f2>
                        vTaskMissedYield();
 80081d4:	f000 ffaa 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 80081d8:	1e6b      	subs	r3, r5, #1
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	b25d      	sxtb	r5, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081de:	2a00      	cmp	r2, #0
 80081e0:	d1f1      	bne.n	80081c6 <xQueueSemaphoreTake+0x1fa>
        pxQueue->cTxLock = queueUNLOCKED;
 80081e2:	23ff      	movs	r3, #255	@ 0xff
 80081e4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 80081e8:	f001 facc 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 80081ec:	f001 fabc 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80081f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80081f4:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	dd14      	ble.n	8008224 <xQueueSemaphoreTake+0x258>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081fa:	f104 0910 	add.w	r9, r4, #16
 80081fe:	e003      	b.n	8008208 <xQueueSemaphoreTake+0x23c>
                --cRxLock;
 8008200:	1e6b      	subs	r3, r5, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008206:	b16a      	cbz	r2, 8008224 <xQueueSemaphoreTake+0x258>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	b15b      	cbz	r3, 8008224 <xQueueSemaphoreTake+0x258>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800820c:	4648      	mov	r0, r9
 800820e:	f000 fedf 	bl	8008fd0 <xTaskRemoveFromEventList>
 8008212:	2800      	cmp	r0, #0
 8008214:	d0f4      	beq.n	8008200 <xQueueSemaphoreTake+0x234>
                    vTaskMissedYield();
 8008216:	f000 ff89 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 800821a:	1e6b      	subs	r3, r5, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	b25d      	sxtb	r5, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008220:	2a00      	cmp	r2, #0
 8008222:	d1f1      	bne.n	8008208 <xQueueSemaphoreTake+0x23c>
        pxQueue->cRxLock = queueUNLOCKED;
 8008224:	23ff      	movs	r3, #255	@ 0xff
 8008226:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    taskEXIT_CRITICAL();
 800822a:	f001 faab 	bl	8009784 <vPortExitCritical>
                if( xTaskResumeAll() == pdFALSE )
 800822e:	f000 fde3 	bl	8008df8 <xTaskResumeAll>
 8008232:	2800      	cmp	r0, #0
 8008234:	f47f af54 	bne.w	80080e0 <xQueueSemaphoreTake+0x114>
                    taskYIELD_WITHIN_API();
 8008238:	f001 fa8a 	bl	8009750 <vPortYield>
 800823c:	e750      	b.n	80080e0 <xQueueSemaphoreTake+0x114>
    taskEXIT_CRITICAL();
 800823e:	f001 faa1 	bl	8009784 <vPortExitCritical>
    return xReturn;
 8008242:	e74d      	b.n	80080e0 <xQueueSemaphoreTake+0x114>
                        taskENTER_CRITICAL();
 8008244:	f001 fa90 	bl	8009768 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008248:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800824a:	b959      	cbnz	r1, 8008264 <xQueueSemaphoreTake+0x298>
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800824c:	68a0      	ldr	r0, [r4, #8]
 800824e:	f001 f80f 	bl	8009270 <vTaskPriorityDisinheritAfterTimeout>
                        taskEXIT_CRITICAL();
 8008252:	f001 fa97 	bl	8009784 <vPortExitCritical>
 8008256:	e79b      	b.n	8008190 <xQueueSemaphoreTake+0x1c4>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008258:	f001 fbb8 	bl	80099cc <ulSetInterruptMask>
 800825c:	e7fe      	b.n	800825c <xQueueSemaphoreTake+0x290>
    configASSERT( ( pxQueue ) );
 800825e:	f001 fbb5 	bl	80099cc <ulSetInterruptMask>
 8008262:	e7fe      	b.n	8008262 <xQueueSemaphoreTake+0x296>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8008264:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 800826c:	e7ee      	b.n	800824c <xQueueSemaphoreTake+0x280>
                        taskENTER_CRITICAL();
 800826e:	f001 fa7b 	bl	8009768 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008272:	68a0      	ldr	r0, [r4, #8]
 8008274:	f000 ff70 	bl	8009158 <xTaskPriorityInherit>
 8008278:	4607      	mov	r7, r0
                        taskEXIT_CRITICAL();
 800827a:	f001 fa83 	bl	8009784 <vPortExitCritical>
 800827e:	e790      	b.n	80081a2 <xQueueSemaphoreTake+0x1d6>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008280:	6823      	ldr	r3, [r4, #0]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8008282:	3d01      	subs	r5, #1
 8008284:	63a5      	str	r5, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008286:	b173      	cbz	r3, 80082a6 <xQueueSemaphoreTake+0x2da>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	b91b      	cbnz	r3, 8008294 <xQueueSemaphoreTake+0x2c8>
                taskEXIT_CRITICAL();
 800828c:	f001 fa7a 	bl	8009784 <vPortExitCritical>
                return pdPASS;
 8008290:	2001      	movs	r0, #1
 8008292:	e77e      	b.n	8008192 <xQueueSemaphoreTake+0x1c6>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008294:	f104 0010 	add.w	r0, r4, #16
 8008298:	f000 fe9a 	bl	8008fd0 <xTaskRemoveFromEventList>
 800829c:	2800      	cmp	r0, #0
 800829e:	d0f5      	beq.n	800828c <xQueueSemaphoreTake+0x2c0>
                        queueYIELD_IF_USING_PREEMPTION();
 80082a0:	f001 fa56 	bl	8009750 <vPortYield>
 80082a4:	e7f2      	b.n	800828c <xQueueSemaphoreTake+0x2c0>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082a6:	f001 f82d 	bl	8009304 <pvTaskIncrementMutexHeldCount>
 80082aa:	60a0      	str	r0, [r4, #8]
 80082ac:	e7ec      	b.n	8008288 <xQueueSemaphoreTake+0x2bc>
 80082ae:	bf00      	nop

080082b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80082b0:	b510      	push	{r4, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d032      	beq.n	800831c <vQueueAddToRegistry+0x6c>

        if( pcQueueName != NULL )
 80082b6:	2900      	cmp	r1, #0
 80082b8:	d02f      	beq.n	800831a <vQueueAddToRegistry+0x6a>
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082ba:	4b40      	ldr	r3, [pc, #256]	@ (80083bc <vQueueAddToRegistry+0x10c>)
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	4290      	cmp	r0, r2
 80082c0:	d06a      	beq.n	8008398 <vQueueAddToRegistry+0xe8>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
                    break;
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d02c      	beq.n	8008322 <vQueueAddToRegistry+0x72>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	4290      	cmp	r0, r2
 80082cc:	d074      	beq.n	80083b8 <vQueueAddToRegistry+0x108>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	d041      	beq.n	8008358 <vQueueAddToRegistry+0xa8>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082d4:	695a      	ldr	r2, [r3, #20]
 80082d6:	4290      	cmp	r0, r2
 80082d8:	d06c      	beq.n	80083b4 <vQueueAddToRegistry+0x104>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	2a00      	cmp	r2, #0
 80082de:	d041      	beq.n	8008364 <vQueueAddToRegistry+0xb4>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	4290      	cmp	r0, r2
 80082e4:	d05c      	beq.n	80083a0 <vQueueAddToRegistry+0xf0>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d041      	beq.n	8008370 <vQueueAddToRegistry+0xc0>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082ee:	4290      	cmp	r0, r2
 80082f0:	d058      	beq.n	80083a4 <vQueueAddToRegistry+0xf4>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082f2:	6a1a      	ldr	r2, [r3, #32]
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	d040      	beq.n	800837a <vQueueAddToRegistry+0xca>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80082f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082fa:	4290      	cmp	r0, r2
 80082fc:	d054      	beq.n	80083a8 <vQueueAddToRegistry+0xf8>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80082fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008300:	2a00      	cmp	r2, #0
 8008302:	d03f      	beq.n	8008384 <vQueueAddToRegistry+0xd4>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008306:	4290      	cmp	r0, r2
 8008308:	d050      	beq.n	80083ac <vQueueAddToRegistry+0xfc>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800830a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830c:	2a00      	cmp	r2, #0
 800830e:	d03e      	beq.n	800838e <vQueueAddToRegistry+0xde>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008310:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008312:	4290      	cmp	r0, r2
 8008314:	d04c      	beq.n	80083b0 <vQueueAddToRegistry+0x100>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008318:	b1e3      	cbz	r3, 8008354 <vQueueAddToRegistry+0xa4>

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800831a:	bd10      	pop	{r4, pc}
        configASSERT( xQueue );
 800831c:	f001 fb56 	bl	80099cc <ulSetInterruptMask>
 8008320:	e7fe      	b.n	8008320 <vQueueAddToRegistry+0x70>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	4290      	cmp	r0, r2
 8008326:	d047      	beq.n	80083b8 <vQueueAddToRegistry+0x108>
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	4290      	cmp	r0, r2
 800832c:	d042      	beq.n	80083b4 <vQueueAddToRegistry+0x104>
 800832e:	461a      	mov	r2, r3
 8008330:	69dc      	ldr	r4, [r3, #28]
 8008332:	42a0      	cmp	r0, r4
 8008334:	d034      	beq.n	80083a0 <vQueueAddToRegistry+0xf0>
 8008336:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008338:	42a0      	cmp	r0, r4
 800833a:	d033      	beq.n	80083a4 <vQueueAddToRegistry+0xf4>
 800833c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800833e:	42a0      	cmp	r0, r4
 8008340:	d032      	beq.n	80083a8 <vQueueAddToRegistry+0xf8>
 8008342:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8008344:	42a0      	cmp	r0, r4
 8008346:	d031      	beq.n	80083ac <vQueueAddToRegistry+0xfc>
 8008348:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800834a:	42a0      	cmp	r0, r4
 800834c:	d030      	beq.n	80083b0 <vQueueAddToRegistry+0x100>
            pxEntryToWrite->xHandle = xQueue;
 800834e:	e9c2 1000 	strd	r1, r0, [r2]
    }
 8008352:	bd10      	pop	{r4, pc}
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008354:	4a1a      	ldr	r2, [pc, #104]	@ (80083c0 <vQueueAddToRegistry+0x110>)
 8008356:	e7fa      	b.n	800834e <vQueueAddToRegistry+0x9e>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008358:	695a      	ldr	r2, [r3, #20]
 800835a:	4290      	cmp	r0, r2
 800835c:	d02a      	beq.n	80083b4 <vQueueAddToRegistry+0x104>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800835e:	f103 0208 	add.w	r2, r3, #8
 8008362:	e7e5      	b.n	8008330 <vQueueAddToRegistry+0x80>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008364:	69da      	ldr	r2, [r3, #28]
 8008366:	4290      	cmp	r0, r2
 8008368:	d01a      	beq.n	80083a0 <vQueueAddToRegistry+0xf0>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800836a:	f103 0210 	add.w	r2, r3, #16
 800836e:	e7e2      	b.n	8008336 <vQueueAddToRegistry+0x86>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008372:	4290      	cmp	r0, r2
 8008374:	d016      	beq.n	80083a4 <vQueueAddToRegistry+0xf4>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008376:	4a13      	ldr	r2, [pc, #76]	@ (80083c4 <vQueueAddToRegistry+0x114>)
 8008378:	e7e0      	b.n	800833c <vQueueAddToRegistry+0x8c>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800837a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837c:	4290      	cmp	r0, r2
 800837e:	d013      	beq.n	80083a8 <vQueueAddToRegistry+0xf8>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008380:	4a11      	ldr	r2, [pc, #68]	@ (80083c8 <vQueueAddToRegistry+0x118>)
 8008382:	e7de      	b.n	8008342 <vQueueAddToRegistry+0x92>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008386:	4290      	cmp	r0, r2
 8008388:	d010      	beq.n	80083ac <vQueueAddToRegistry+0xfc>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800838a:	4a10      	ldr	r2, [pc, #64]	@ (80083cc <vQueueAddToRegistry+0x11c>)
 800838c:	e7dc      	b.n	8008348 <vQueueAddToRegistry+0x98>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800838e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008390:	4290      	cmp	r0, r2
 8008392:	d00d      	beq.n	80083b0 <vQueueAddToRegistry+0x100>
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008394:	4a0e      	ldr	r2, [pc, #56]	@ (80083d0 <vQueueAddToRegistry+0x120>)
        if( pxEntryToWrite != NULL )
 8008396:	e7da      	b.n	800834e <vQueueAddToRegistry+0x9e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008398:	2200      	movs	r2, #0
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800839a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if( pxEntryToWrite != NULL )
 800839e:	e7d6      	b.n	800834e <vQueueAddToRegistry+0x9e>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a0:	2203      	movs	r2, #3
 80083a2:	e7fa      	b.n	800839a <vQueueAddToRegistry+0xea>
 80083a4:	2204      	movs	r2, #4
 80083a6:	e7f8      	b.n	800839a <vQueueAddToRegistry+0xea>
 80083a8:	2205      	movs	r2, #5
 80083aa:	e7f6      	b.n	800839a <vQueueAddToRegistry+0xea>
 80083ac:	2206      	movs	r2, #6
 80083ae:	e7f4      	b.n	800839a <vQueueAddToRegistry+0xea>
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80083b0:	2207      	movs	r2, #7
 80083b2:	e7f2      	b.n	800839a <vQueueAddToRegistry+0xea>
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b4:	2202      	movs	r2, #2
 80083b6:	e7f0      	b.n	800839a <vQueueAddToRegistry+0xea>
 80083b8:	2201      	movs	r2, #1
 80083ba:	e7ee      	b.n	800839a <vQueueAddToRegistry+0xea>
 80083bc:	20061a20 	.word	0x20061a20
 80083c0:	20061a58 	.word	0x20061a58
 80083c4:	20061a38 	.word	0x20061a38
 80083c8:	20061a40 	.word	0x20061a40
 80083cc:	20061a48 	.word	0x20061a48
 80083d0:	20061a50 	.word	0x20061a50

080083d4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	4605      	mov	r5, r0
 80083d8:	460e      	mov	r6, r1
 80083da:	4614      	mov	r4, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80083dc:	f001 f9c4 	bl	8009768 <vPortEnterCritical>
 80083e0:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 80083e4:	2bff      	cmp	r3, #255	@ 0xff
 80083e6:	bf04      	itt	eq
 80083e8:	2300      	moveq	r3, #0
 80083ea:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 80083ee:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80083f2:	2bff      	cmp	r3, #255	@ 0xff
 80083f4:	bf04      	itt	eq
 80083f6:	2300      	moveq	r3, #0
 80083f8:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 80083fc:	f001 f9c2 	bl	8009784 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008400:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8008402:	2b00      	cmp	r3, #0
 8008404:	d043      	beq.n	800848e <vQueueWaitForMessageRestricted+0xba>
    taskENTER_CRITICAL();
 8008406:	f001 f9af 	bl	8009768 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 800840a:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800840e:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008410:	2c00      	cmp	r4, #0
 8008412:	dd14      	ble.n	800843e <vQueueWaitForMessageRestricted+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008414:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8008418:	e003      	b.n	8008422 <vQueueWaitForMessageRestricted+0x4e>
            --cTxLock;
 800841a:	1e63      	subs	r3, r4, #1
 800841c:	b2da      	uxtb	r2, r3
 800841e:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008420:	b16a      	cbz	r2, 800843e <vQueueWaitForMessageRestricted+0x6a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008422:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8008424:	b15b      	cbz	r3, 800843e <vQueueWaitForMessageRestricted+0x6a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008426:	4630      	mov	r0, r6
 8008428:	f000 fdd2 	bl	8008fd0 <xTaskRemoveFromEventList>
 800842c:	2800      	cmp	r0, #0
 800842e:	d0f4      	beq.n	800841a <vQueueWaitForMessageRestricted+0x46>
                        vTaskMissedYield();
 8008430:	f000 fe7c 	bl	800912c <vTaskMissedYield>
            --cTxLock;
 8008434:	1e63      	subs	r3, r4, #1
 8008436:	b2da      	uxtb	r2, r3
 8008438:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800843a:	2a00      	cmp	r2, #0
 800843c:	d1f1      	bne.n	8008422 <vQueueWaitForMessageRestricted+0x4e>
        pxQueue->cTxLock = queueUNLOCKED;
 800843e:	23ff      	movs	r3, #255	@ 0xff
 8008440:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8008444:	f001 f99e 	bl	8009784 <vPortExitCritical>
    taskENTER_CRITICAL();
 8008448:	f001 f98e 	bl	8009768 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800844c:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8008450:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008452:	2c00      	cmp	r4, #0
 8008454:	dd14      	ble.n	8008480 <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008456:	f105 0610 	add.w	r6, r5, #16
 800845a:	e003      	b.n	8008464 <vQueueWaitForMessageRestricted+0x90>
                --cRxLock;
 800845c:	1e63      	subs	r3, r4, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008462:	b16a      	cbz	r2, 8008480 <vQueueWaitForMessageRestricted+0xac>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008464:	692b      	ldr	r3, [r5, #16]
 8008466:	b15b      	cbz	r3, 8008480 <vQueueWaitForMessageRestricted+0xac>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008468:	4630      	mov	r0, r6
 800846a:	f000 fdb1 	bl	8008fd0 <xTaskRemoveFromEventList>
 800846e:	2800      	cmp	r0, #0
 8008470:	d0f4      	beq.n	800845c <vQueueWaitForMessageRestricted+0x88>
                    vTaskMissedYield();
 8008472:	f000 fe5b 	bl	800912c <vTaskMissedYield>
                --cRxLock;
 8008476:	1e63      	subs	r3, r4, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800847c:	2a00      	cmp	r2, #0
 800847e:	d1f1      	bne.n	8008464 <vQueueWaitForMessageRestricted+0x90>
        pxQueue->cRxLock = queueUNLOCKED;
 8008480:	23ff      	movs	r3, #255	@ 0xff
 8008482:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        }

        prvUnlockQueue( pxQueue );

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8008486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 800848a:	f001 b97b 	b.w	8009784 <vPortExitCritical>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800848e:	4622      	mov	r2, r4
 8008490:	4631      	mov	r1, r6
 8008492:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8008496:	f000 fd33 	bl	8008f00 <vTaskPlaceOnEventListRestricted>
 800849a:	e7b4      	b.n	8008406 <vQueueWaitForMessageRestricted+0x32>

0800849c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800849c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	4605      	mov	r5, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80084a2:	f001 f961 	bl	8009768 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80084a6:	4a37      	ldr	r2, [pc, #220]	@ (8008584 <prvAddNewTaskToReadyList+0xe8>)

            if( pxCurrentTCB == NULL )
 80084a8:	4f37      	ldr	r7, [pc, #220]	@ (8008588 <prvAddNewTaskToReadyList+0xec>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	6013      	str	r3, [r2, #0]
            if( pxCurrentTCB == NULL )
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d035      	beq.n	8008522 <prvAddNewTaskToReadyList+0x86>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80084b6:	4c35      	ldr	r4, [pc, #212]	@ (800858c <prvAddNewTaskToReadyList+0xf0>)
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084b8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
                if( xSchedulerRunning == pdFALSE )
 80084ba:	6822      	ldr	r2, [r4, #0]
 80084bc:	b352      	cbz	r2, 8008514 <prvAddNewTaskToReadyList+0x78>
 80084be:	4e34      	ldr	r6, [pc, #208]	@ (8008590 <prvAddNewTaskToReadyList+0xf4>)
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80084c0:	4934      	ldr	r1, [pc, #208]	@ (8008594 <prvAddNewTaskToReadyList+0xf8>)
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80084c2:	4835      	ldr	r0, [pc, #212]	@ (8008598 <prvAddNewTaskToReadyList+0xfc>)
            uxTaskNumber++;
 80084c4:	680a      	ldr	r2, [r1, #0]
            prvAddTaskToReadyList( pxNewTCB );
 80084c6:	f105 0c04 	add.w	ip, r5, #4
            uxTaskNumber++;
 80084ca:	3201      	adds	r2, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084cc:	646a      	str	r2, [r5, #68]	@ 0x44
            uxTaskNumber++;
 80084ce:	600a      	str	r2, [r1, #0]
            prvAddTaskToReadyList( pxNewTCB );
 80084d0:	6802      	ldr	r2, [r0, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	bf38      	it	cc
 80084d6:	6003      	strcc	r3, [r0, #0]
 80084d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084dc:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80084e0:	6841      	ldr	r1, [r0, #4]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	58f2      	ldr	r2, [r6, r3]
 80084e6:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80084ea:	60a9      	str	r1, [r5, #8]
 80084ec:	f8c5 e00c 	str.w	lr, [r5, #12]
 80084f0:	3201      	adds	r2, #1
 80084f2:	f8ce c004 	str.w	ip, [lr, #4]
 80084f6:	f8c1 c008 	str.w	ip, [r1, #8]
 80084fa:	6168      	str	r0, [r5, #20]
 80084fc:	50f2      	str	r2, [r6, r3]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80084fe:	f001 f941 	bl	8009784 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	b123      	cbz	r3, 8008510 <prvAddNewTaskToReadyList+0x74>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800850a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800850c:	429a      	cmp	r2, r3
 800850e:	d310      	bcc.n	8008532 <prvAddNewTaskToReadyList+0x96>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	4e1e      	ldr	r6, [pc, #120]	@ (8008590 <prvAddNewTaskToReadyList+0xf4>)
 8008518:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800851a:	429a      	cmp	r2, r3
                        pxCurrentTCB = pxNewTCB;
 800851c:	bf98      	it	ls
 800851e:	603d      	strls	r5, [r7, #0]
 8008520:	e7ce      	b.n	80084c0 <prvAddNewTaskToReadyList+0x24>
                pxCurrentTCB = pxNewTCB;
 8008522:	603d      	str	r5, [r7, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008524:	6813      	ldr	r3, [r2, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d007      	beq.n	800853a <prvAddNewTaskToReadyList+0x9e>
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800852a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800852c:	4e18      	ldr	r6, [pc, #96]	@ (8008590 <prvAddNewTaskToReadyList+0xf4>)
 800852e:	4c17      	ldr	r4, [pc, #92]	@ (800858c <prvAddNewTaskToReadyList+0xf0>)
 8008530:	e7c6      	b.n	80084c0 <prvAddNewTaskToReadyList+0x24>
    }
 8008532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8008536:	f001 b90b 	b.w	8009750 <vPortYield>
 800853a:	4e15      	ldr	r6, [pc, #84]	@ (8008590 <prvAddNewTaskToReadyList+0xf4>)
 800853c:	4634      	mov	r4, r6
 800853e:	f506 688c 	add.w	r8, r6, #1120	@ 0x460
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008542:	4620      	mov	r0, r4
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008544:	3414      	adds	r4, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008546:	f7ff f989 	bl	800785c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800854a:	4544      	cmp	r4, r8
 800854c:	d1f9      	bne.n	8008542 <prvAddNewTaskToReadyList+0xa6>
    }

    vListInitialise( &xDelayedTaskList1 );
 800854e:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80085b4 <prvAddNewTaskToReadyList+0x118>
    vListInitialise( &xDelayedTaskList2 );
 8008552:	4c12      	ldr	r4, [pc, #72]	@ (800859c <prvAddNewTaskToReadyList+0x100>)
    vListInitialise( &xDelayedTaskList1 );
 8008554:	4640      	mov	r0, r8
 8008556:	f7ff f981 	bl	800785c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff f97e 	bl	800785c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008560:	480f      	ldr	r0, [pc, #60]	@ (80085a0 <prvAddNewTaskToReadyList+0x104>)
 8008562:	f7ff f97b 	bl	800785c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8008566:	480f      	ldr	r0, [pc, #60]	@ (80085a4 <prvAddNewTaskToReadyList+0x108>)
 8008568:	f7ff f978 	bl	800785c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800856c:	480e      	ldr	r0, [pc, #56]	@ (80085a8 <prvAddNewTaskToReadyList+0x10c>)
 800856e:	f7ff f975 	bl	800785c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008572:	4b0e      	ldr	r3, [pc, #56]	@ (80085ac <prvAddNewTaskToReadyList+0x110>)
 8008574:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008578:	4b0d      	ldr	r3, [pc, #52]	@ (80085b0 <prvAddNewTaskToReadyList+0x114>)
 800857a:	601c      	str	r4, [r3, #0]
            prvAddTaskToReadyList( pxNewTCB );
 800857c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800857e:	4c03      	ldr	r4, [pc, #12]	@ (800858c <prvAddNewTaskToReadyList+0xf0>)
}
 8008580:	e79e      	b.n	80084c0 <prvAddNewTaskToReadyList+0x24>
 8008582:	bf00      	nop
 8008584:	20061a88 	.word	0x20061a88
 8008588:	20061f5c 	.word	0x20061f5c
 800858c:	20061a7c 	.word	0x20061a7c
 8008590:	20061afc 	.word	0x20061afc
 8008594:	20061a6c 	.word	0x20061a6c
 8008598:	20061a80 	.word	0x20061a80
 800859c:	20061ad4 	.word	0x20061ad4
 80085a0:	20061ab8 	.word	0x20061ab8
 80085a4:	20061aa4 	.word	0x20061aa4
 80085a8:	20061a8c 	.word	0x20061a8c
 80085ac:	20061ad0 	.word	0x20061ad0
 80085b0:	20061acc 	.word	0x20061acc
 80085b4:	20061ae8 	.word	0x20061ae8

080085b8 <vTaskSwitchContext.part.0>:
            xYieldPendings[ 0 ] = pdFALSE;
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b24      	ldr	r3, [pc, #144]	@ (800864c <vTaskSwitchContext.part.0+0x94>)
    void vTaskSwitchContext( void )
 80085bc:	b570      	push	{r4, r5, r6, lr}
            taskCHECK_FOR_STACK_OVERFLOW();
 80085be:	4c24      	ldr	r4, [pc, #144]	@ (8008650 <vTaskSwitchContext.part.0+0x98>)
            xYieldPendings[ 0 ] = pdFALSE;
 80085c0:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80085cc:	d103      	bne.n	80085d6 <vTaskSwitchContext.part.0+0x1e>
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80085d4:	d031      	beq.n	800863a <vTaskSwitchContext.part.0+0x82>
 80085d6:	6821      	ldr	r1, [r4, #0]
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	3134      	adds	r1, #52	@ 0x34
 80085dc:	f7f8 ff5e 	bl	800149c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80085e0:	4d1c      	ldr	r5, [pc, #112]	@ (8008654 <vTaskSwitchContext.part.0+0x9c>)
 80085e2:	481d      	ldr	r0, [pc, #116]	@ (8008658 <vTaskSwitchContext.part.0+0xa0>)
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80085ea:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 80085ee:	0099      	lsls	r1, r3, #2
 80085f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80085f4:	b95e      	cbnz	r6, 800860e <vTaskSwitchContext.part.0+0x56>
 80085f6:	b133      	cbz	r3, 8008606 <vTaskSwitchContext.part.0+0x4e>
 80085f8:	f852 1c14 	ldr.w	r1, [r2, #-20]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b929      	cbnz	r1, 800860c <vTaskSwitchContext.part.0+0x54>
 8008600:	3a14      	subs	r2, #20
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1f8      	bne.n	80085f8 <vTaskSwitchContext.part.0+0x40>
 8008606:	f001 f9e1 	bl	80099cc <ulSetInterruptMask>
 800860a:	e7fe      	b.n	800860a <vTaskSwitchContext.part.0+0x52>
 800860c:	0099      	lsls	r1, r3, #2
 800860e:	4419      	add	r1, r3
 8008610:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8008614:	4632      	mov	r2, r6
 8008616:	6871      	ldr	r1, [r6, #4]
 8008618:	3208      	adds	r2, #8
 800861a:	6849      	ldr	r1, [r1, #4]
 800861c:	4291      	cmp	r1, r2
 800861e:	6071      	str	r1, [r6, #4]
 8008620:	bf08      	it	eq
 8008622:	68f1      	ldreq	r1, [r6, #12]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008624:	4a0d      	ldr	r2, [pc, #52]	@ (800865c <vTaskSwitchContext.part.0+0xa4>)
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8008626:	bf08      	it	eq
 8008628:	6071      	streq	r1, [r6, #4]
 800862a:	68c9      	ldr	r1, [r1, #12]
 800862c:	6021      	str	r1, [r4, #0]
 800862e:	602b      	str	r3, [r5, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8008630:	6823      	ldr	r3, [r4, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	3354      	adds	r3, #84	@ 0x54
 8008636:	6013      	str	r3, [r2, #0]
    }
 8008638:	bd70      	pop	{r4, r5, r6, pc}
            taskCHECK_FOR_STACK_OVERFLOW();
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 8008640:	d1c9      	bne.n	80085d6 <vTaskSwitchContext.part.0+0x1e>
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8008648:	d1c5      	bne.n	80085d6 <vTaskSwitchContext.part.0+0x1e>
 800864a:	e7c9      	b.n	80085e0 <vTaskSwitchContext.part.0+0x28>
 800864c:	20061a74 	.word	0x20061a74
 8008650:	20061f5c 	.word	0x20061f5c
 8008654:	20061a80 	.word	0x20061a80
 8008658:	20061afc 	.word	0x20061afc
 800865c:	20000f88 	.word	0x20000f88

08008660 <prvIdleTask>:
{
 8008660:	b580      	push	{r7, lr}
 8008662:	4d14      	ldr	r5, [pc, #80]	@ (80086b4 <prvIdleTask+0x54>)
 8008664:	4f14      	ldr	r7, [pc, #80]	@ (80086b8 <prvIdleTask+0x58>)
 8008666:	4e15      	ldr	r6, [pc, #84]	@ (80086bc <prvIdleTask+0x5c>)
 8008668:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 80086c0 <prvIdleTask+0x60>
 800866c:	e018      	b.n	80086a0 <prvIdleTask+0x40>
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800866e:	f001 f87b 	bl	8009768 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	68dc      	ldr	r4, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008676:	1d20      	adds	r0, r4, #4
 8008678:	f7ff f926 	bl	80078c8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800867c:	6833      	ldr	r3, [r6, #0]
 800867e:	3b01      	subs	r3, #1
 8008680:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	3b01      	subs	r3, #1
 8008686:	602b      	str	r3, [r5, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8008688:	f001 f87c 	bl	8009784 <vPortExitCritical>
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 800868c:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008690:	f004 fffa 	bl	800d688 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008694:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008696:	f001 fa9b 	bl	8009bd0 <vPortFree>
            vPortFree( pxTCB );
 800869a:	4620      	mov	r0, r4
 800869c:	f001 fa98 	bl	8009bd0 <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e3      	bne.n	800866e <prvIdleTask+0xe>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80086a6:	f8d8 3000 	ldr.w	r3, [r8]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d9f8      	bls.n	80086a0 <prvIdleTask+0x40>
                taskYIELD();
 80086ae:	f001 f84f 	bl	8009750 <vPortYield>
 80086b2:	e7f5      	b.n	80086a0 <prvIdleTask+0x40>
 80086b4:	20061aa0 	.word	0x20061aa0
 80086b8:	20061aa4 	.word	0x20061aa4
 80086bc:	20061a88 	.word	0x20061a88
 80086c0:	20061afc 	.word	0x20061afc

080086c4 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 80086c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086c8:	4b60      	ldr	r3, [pc, #384]	@ (800884c <xTaskIncrementTick.part.0+0x188>)
BaseType_t xTaskIncrementTick( void )
 80086ca:	b085      	sub	sp, #20
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086cc:	681c      	ldr	r4, [r3, #0]
 80086ce:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 80086d0:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	d075      	beq.n	80087c2 <xTaskIncrementTick.part.0+0xfe>
 80086d6:	495e      	ldr	r1, [pc, #376]	@ (8008850 <xTaskIncrementTick.part.0+0x18c>)
        if( xConstTickCount >= xNextTaskUnblockTime )
 80086d8:	680b      	ldr	r3, [r1, #0]
 80086da:	429c      	cmp	r4, r3
 80086dc:	f0c0 808a 	bcc.w	80087f4 <xTaskIncrementTick.part.0+0x130>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e0:	4d5c      	ldr	r5, [pc, #368]	@ (8008854 <xTaskIncrementTick.part.0+0x190>)
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80ab 	beq.w	8008842 <xTaskIncrementTick.part.0+0x17e>
    BaseType_t xSwitchRequired = pdFALSE;
 80086ec:	f04f 0e00 	mov.w	lr, #0
 80086f0:	4b59      	ldr	r3, [pc, #356]	@ (8008858 <xTaskIncrementTick.part.0+0x194>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086f2:	4676      	mov	r6, lr
 80086f4:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80086f8:	4858      	ldr	r0, [pc, #352]	@ (800885c <xTaskIncrementTick.part.0+0x198>)
                    prvAddTaskToReadyList( pxTCB );
 80086fa:	4f59      	ldr	r7, [pc, #356]	@ (8008860 <xTaskIncrementTick.part.0+0x19c>)
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	e053      	b.n	80087a8 <xTaskIncrementTick.part.0+0xe4>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008700:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8008704:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 8008708:	f8c2 9008 	str.w	r9, [r2, #8]
 800870c:	f8c9 2004 	str.w	r2, [r9, #4]
 8008710:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008714:	428a      	cmp	r2, r1
 8008716:	f8dc 2000 	ldr.w	r2, [ip]
 800871a:	bf08      	it	eq
 800871c:	f8cc 9004 	streq.w	r9, [ip, #4]
 8008720:	3a01      	subs	r2, #1
 8008722:	615e      	str	r6, [r3, #20]
 8008724:	f8cc 2000 	str.w	r2, [ip]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008728:	f8d3 c028 	ldr.w	ip, [r3, #40]	@ 0x28
 800872c:	f1bc 0f00 	cmp.w	ip, #0
 8008730:	d011      	beq.n	8008756 <xTaskIncrementTick.part.0+0x92>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008732:	e9d3 2907 	ldrd	r2, r9, [r3, #28]
 8008736:	f8c2 9008 	str.w	r9, [r2, #8]
 800873a:	f8c9 2004 	str.w	r2, [r9, #4]
 800873e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008742:	4542      	cmp	r2, r8
 8008744:	f8dc 2000 	ldr.w	r2, [ip]
 8008748:	bf08      	it	eq
 800874a:	f8cc 9004 	streq.w	r9, [ip, #4]
 800874e:	3a01      	subs	r2, #1
 8008750:	629e      	str	r6, [r3, #40]	@ 0x28
 8008752:	f8cc 2000 	str.w	r2, [ip]
                    prvAddTaskToReadyList( pxTCB );
 8008756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008758:	f8d7 8000 	ldr.w	r8, [r7]
 800875c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8008760:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
 8008764:	f8da 9004 	ldr.w	r9, [sl, #4]
 8008768:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 800876c:	f8d9 b008 	ldr.w	fp, [r9, #8]
 8008770:	f8c3 9008 	str.w	r9, [r3, #8]
 8008774:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008778:	4542      	cmp	r2, r8
 800877a:	f8cb 1004 	str.w	r1, [fp, #4]
 800877e:	f8c9 1008 	str.w	r1, [r9, #8]
 8008782:	f8c3 a014 	str.w	sl, [r3, #20]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008786:	9b01      	ldr	r3, [sp, #4]
                    prvAddTaskToReadyList( pxTCB );
 8008788:	bf88      	it	hi
 800878a:	603a      	strhi	r2, [r7, #0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800878c:	6819      	ldr	r1, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800878e:	f104 0801 	add.w	r8, r4, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008792:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008794:	f840 802c 	str.w	r8, [r0, ip, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008798:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800879a:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 800879c:	428a      	cmp	r2, r1
 800879e:	bf88      	it	hi
 80087a0:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d047      	beq.n	8008838 <xTaskIncrementTick.part.0+0x174>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80087a8:	682b      	ldr	r3, [r5, #0]
                    if( xConstTickCount < xItemValue )
 80087aa:	9c02      	ldr	r4, [sp, #8]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087b0:	685a      	ldr	r2, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80087b2:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
 80087b4:	4294      	cmp	r4, r2
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80087b6:	f103 0818 	add.w	r8, r3, #24
                    if( xConstTickCount < xItemValue )
 80087ba:	d2a1      	bcs.n	8008700 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
 80087bc:	9903      	ldr	r1, [sp, #12]
 80087be:	600a      	str	r2, [r1, #0]
                        break;
 80087c0:	e01d      	b.n	80087fe <xTaskIncrementTick.part.0+0x13a>
            taskSWITCH_DELAYED_LISTS();
 80087c2:	4b24      	ldr	r3, [pc, #144]	@ (8008854 <xTaskIncrementTick.part.0+0x190>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	d132      	bne.n	8008832 <xTaskIncrementTick.part.0+0x16e>
 80087cc:	4a25      	ldr	r2, [pc, #148]	@ (8008864 <xTaskIncrementTick.part.0+0x1a0>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	6811      	ldr	r1, [r2, #0]
 80087d2:	6019      	str	r1, [r3, #0]
 80087d4:	4924      	ldr	r1, [pc, #144]	@ (8008868 <xTaskIncrementTick.part.0+0x1a4>)
 80087d6:	6010      	str	r0, [r2, #0]
 80087d8:	680a      	ldr	r2, [r1, #0]
 80087da:	3201      	adds	r2, #1
 80087dc:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	bb02      	cbnz	r2, 8008826 <xTaskIncrementTick.part.0+0x162>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80087e4:	f04f 33ff 	mov.w	r3, #4294967295
 80087e8:	4919      	ldr	r1, [pc, #100]	@ (8008850 <xTaskIncrementTick.part.0+0x18c>)
 80087ea:	600b      	str	r3, [r1, #0]
        if( xConstTickCount >= xNextTaskUnblockTime )
 80087ec:	680b      	ldr	r3, [r1, #0]
 80087ee:	429c      	cmp	r4, r3
 80087f0:	f4bf af76 	bcs.w	80086e0 <xTaskIncrementTick.part.0+0x1c>
    BaseType_t xSwitchRequired = pdFALSE;
 80087f4:	f04f 0e00 	mov.w	lr, #0
 80087f8:	4b17      	ldr	r3, [pc, #92]	@ (8008858 <xTaskIncrementTick.part.0+0x194>)
 80087fa:	4818      	ldr	r0, [pc, #96]	@ (800885c <xTaskIncrementTick.part.0+0x198>)
 80087fc:	9301      	str	r3, [sp, #4]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80087fe:	9b01      	ldr	r3, [sp, #4]
                if( xYieldPendings[ 0 ] != pdFALSE )
 8008800:	4a1a      	ldr	r2, [pc, #104]	@ (800886c <xTaskIncrementTick.part.0+0x1a8>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8008802:	681b      	ldr	r3, [r3, #0]
                if( xYieldPendings[ 0 ] != pdFALSE )
 8008804:	6812      	ldr	r2, [r2, #0]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800880c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                    xSwitchRequired = pdTRUE;
 8008810:	2b02      	cmp	r3, #2
 8008812:	bf28      	it	cs
 8008814:	f04f 0e01 	movcs.w	lr, #1
                    xSwitchRequired = pdTRUE;
 8008818:	2a00      	cmp	r2, #0
}
 800881a:	bf0c      	ite	eq
 800881c:	4670      	moveq	r0, lr
 800881e:	2001      	movne	r0, #1
 8008820:	b005      	add	sp, #20
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4909      	ldr	r1, [pc, #36]	@ (8008850 <xTaskIncrementTick.part.0+0x18c>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	600b      	str	r3, [r1, #0]
    }
}
 8008830:	e752      	b.n	80086d8 <xTaskIncrementTick.part.0+0x14>
            taskSWITCH_DELAYED_LISTS();
 8008832:	f001 f8cb 	bl	80099cc <ulSetInterruptMask>
 8008836:	e7fe      	b.n	8008836 <xTaskIncrementTick.part.0+0x172>
 8008838:	9903      	ldr	r1, [sp, #12]
                    xNextTaskUnblockTime = portMAX_DELAY;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	600b      	str	r3, [r1, #0]
                    break;
 8008840:	e7dd      	b.n	80087fe <xTaskIncrementTick.part.0+0x13a>
    BaseType_t xSwitchRequired = pdFALSE;
 8008842:	469e      	mov	lr, r3
 8008844:	4b04      	ldr	r3, [pc, #16]	@ (8008858 <xTaskIncrementTick.part.0+0x194>)
 8008846:	4805      	ldr	r0, [pc, #20]	@ (800885c <xTaskIncrementTick.part.0+0x198>)
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	e7f6      	b.n	800883a <xTaskIncrementTick.part.0+0x176>
 800884c:	20061a84 	.word	0x20061a84
 8008850:	20061a68 	.word	0x20061a68
 8008854:	20061ad0 	.word	0x20061ad0
 8008858:	20061f5c 	.word	0x20061f5c
 800885c:	20061afc 	.word	0x20061afc
 8008860:	20061a80 	.word	0x20061a80
 8008864:	20061acc 	.word	0x20061acc
 8008868:	20061a70 	.word	0x20061a70
 800886c:	20061a74 	.word	0x20061a74

08008870 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8008874:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 80089e0 <xTaskResumeAll.part.0+0x170>
BaseType_t xTaskResumeAll( void )
 8008878:	b083      	sub	sp, #12
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800887a:	f8d8 3000 	ldr.w	r3, [r8]
 800887e:	3b01      	subs	r3, #1
 8008880:	f8c8 3000 	str.w	r3, [r8]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008884:	f8d8 e000 	ldr.w	lr, [r8]
 8008888:	f1be 0f00 	cmp.w	lr, #0
 800888c:	f040 8081 	bne.w	8008992 <xTaskResumeAll.part.0+0x122>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008890:	4b4c      	ldr	r3, [pc, #304]	@ (80089c4 <xTaskResumeAll.part.0+0x154>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d07c      	beq.n	8008992 <xTaskResumeAll.part.0+0x122>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008898:	f8df c148 	ldr.w	ip, [pc, #328]	@ 80089e4 <xTaskResumeAll.part.0+0x174>
 800889c:	f8dc 3000 	ldr.w	r3, [ip]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 808b 	beq.w	80089bc <xTaskResumeAll.part.0+0x14c>
 80088a6:	4b48      	ldr	r3, [pc, #288]	@ (80089c8 <xTaskResumeAll.part.0+0x158>)
 80088a8:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80089e8 <xTaskResumeAll.part.0+0x178>
 80088ac:	4e47      	ldr	r6, [pc, #284]	@ (80089cc <xTaskResumeAll.part.0+0x15c>)
 80088ae:	9301      	str	r3, [sp, #4]
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80088b0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80088b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088b8:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 80088bc:	6854      	ldr	r4, [r2, #4]
 80088be:	6081      	str	r1, [r0, #8]
 80088c0:	6048      	str	r0, [r1, #4]
 80088c2:	f103 0018 	add.w	r0, r3, #24
 80088c6:	4284      	cmp	r4, r0
 80088c8:	bf08      	it	eq
 80088ca:	6051      	streq	r1, [r2, #4]
 80088cc:	6811      	ldr	r1, [r2, #0]
 80088ce:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 80088d2:	3901      	subs	r1, #1
 80088d4:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 80088dc:	60a1      	str	r1, [r4, #8]
 80088de:	604c      	str	r4, [r1, #4]
 80088e0:	6854      	ldr	r4, [r2, #4]
 80088e2:	1d1d      	adds	r5, r3, #4
 80088e4:	42ac      	cmp	r4, r5
 80088e6:	bf08      	it	eq
 80088e8:	6051      	streq	r1, [r2, #4]
 80088ea:	6811      	ldr	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 80088ec:	f8d9 0000 	ldr.w	r0, [r9]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088f0:	3901      	subs	r1, #1
 80088f2:	6011      	str	r1, [r2, #0]
                        prvAddTaskToReadyList( pxTCB );
 80088f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f6:	4282      	cmp	r2, r0
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f8:	4835      	ldr	r0, [pc, #212]	@ (80089d0 <xTaskResumeAll.part.0+0x160>)
                        prvAddTaskToReadyList( pxTCB );
 80088fa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80088fe:	bf88      	it	hi
 8008900:	f8c9 2000 	strhi.w	r2, [r9]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008904:	6800      	ldr	r0, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 8008906:	eb06 0781 	add.w	r7, r6, r1, lsl #2
 800890a:	687c      	ldr	r4, [r7, #4]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800890c:	f8d0 a02c 	ldr.w	sl, [r0, #44]	@ 0x2c
                        prvAddTaskToReadyList( pxTCB );
 8008910:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 8008914:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8008918:	3001      	adds	r0, #1
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800891a:	4552      	cmp	r2, sl
                        prvAddTaskToReadyList( pxTCB );
 800891c:	609c      	str	r4, [r3, #8]
 800891e:	f8c3 b00c 	str.w	fp, [r3, #12]
 8008922:	f8cb 5004 	str.w	r5, [fp, #4]
 8008926:	60a5      	str	r5, [r4, #8]
 8008928:	615f      	str	r7, [r3, #20]
 800892a:	f846 0021 	str.w	r0, [r6, r1, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800892e:	d937      	bls.n	80089a0 <xTaskResumeAll.part.0+0x130>
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8008930:	2201      	movs	r2, #1
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	601a      	str	r2, [r3, #0]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008936:	f8dc 3000 	ldr.w	r3, [ip]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1b8      	bne.n	80088b0 <xTaskResumeAll.part.0+0x40>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800893e:	4b25      	ldr	r3, [pc, #148]	@ (80089d4 <xTaskResumeAll.part.0+0x164>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	6812      	ldr	r2, [r2, #0]
 8008944:	2a00      	cmp	r2, #0
 8008946:	d034      	beq.n	80089b2 <xTaskResumeAll.part.0+0x142>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	4b23      	ldr	r3, [pc, #140]	@ (80089d8 <xTaskResumeAll.part.0+0x168>)
 800894c:	68d2      	ldr	r2, [r2, #12]
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	601a      	str	r2, [r3, #0]
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008952:	4d22      	ldr	r5, [pc, #136]	@ (80089dc <xTaskResumeAll.part.0+0x16c>)
 8008954:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 8008956:	b19c      	cbz	r4, 8008980 <xTaskResumeAll.part.0+0x110>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8008958:	2601      	movs	r6, #1
 800895a:	9f01      	ldr	r7, [sp, #4]
 800895c:	e005      	b.n	800896a <xTaskResumeAll.part.0+0xfa>
 800895e:	f7ff feb1 	bl	80086c4 <xTaskIncrementTick.part.0>
                                if( xTaskIncrementTick() != pdFALSE )
 8008962:	b100      	cbz	r0, 8008966 <xTaskResumeAll.part.0+0xf6>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8008964:	603e      	str	r6, [r7, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8008966:	3c01      	subs	r4, #1
 8008968:	d009      	beq.n	800897e <xTaskResumeAll.part.0+0x10e>
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800896a:	f8d8 3000 	ldr.w	r3, [r8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0f5      	beq.n	800895e <xTaskResumeAll.part.0+0xee>
        xPendedTicks += 1U;
 8008972:	682b      	ldr	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8008974:	3c01      	subs	r4, #1
        xPendedTicks += 1U;
 8008976:	f103 0301 	add.w	r3, r3, #1
 800897a:	602b      	str	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800897c:	d1f5      	bne.n	800896a <xTaskResumeAll.part.0+0xfa>
                            xPendedTicks = 0;
 800897e:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b12b      	cbz	r3, 8008992 <xTaskResumeAll.part.0+0x122>
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8008986:	4b12      	ldr	r3, [pc, #72]	@ (80089d0 <xTaskResumeAll.part.0+0x160>)
                            xAlreadyYielded = pdTRUE;
 8008988:	2401      	movs	r4, #1
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f000 fee0 	bl	8009750 <vPortYield>
 8008990:	e000      	b.n	8008994 <xTaskResumeAll.part.0+0x124>
    BaseType_t xAlreadyYielded = pdFALSE;
 8008992:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
 8008994:	f000 fef6 	bl	8009784 <vPortExitCritical>
}
 8008998:	4620      	mov	r0, r4
 800899a:	b003      	add	sp, #12
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a0:	f8dc 3000 	ldr.w	r3, [ip]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d183      	bne.n	80088b0 <xTaskResumeAll.part.0+0x40>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a8:	4b0a      	ldr	r3, [pc, #40]	@ (80089d4 <xTaskResumeAll.part.0+0x164>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d1ca      	bne.n	8008948 <xTaskResumeAll.part.0+0xd8>
        xNextTaskUnblockTime = portMAX_DELAY;
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295
 80089b6:	4b08      	ldr	r3, [pc, #32]	@ (80089d8 <xTaskResumeAll.part.0+0x168>)
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e7ca      	b.n	8008952 <xTaskResumeAll.part.0+0xe2>
 80089bc:	4b02      	ldr	r3, [pc, #8]	@ (80089c8 <xTaskResumeAll.part.0+0x158>)
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	e7c7      	b.n	8008952 <xTaskResumeAll.part.0+0xe2>
 80089c2:	bf00      	nop
 80089c4:	20061a88 	.word	0x20061a88
 80089c8:	20061a74 	.word	0x20061a74
 80089cc:	20061afc 	.word	0x20061afc
 80089d0:	20061f5c 	.word	0x20061f5c
 80089d4:	20061ad0 	.word	0x20061ad0
 80089d8:	20061a68 	.word	0x20061a68
 80089dc:	20061a78 	.word	0x20061a78
 80089e0:	20061a60 	.word	0x20061a60
 80089e4:	20061ab8 	.word	0x20061ab8
 80089e8:	20061a80 	.word	0x20061a80

080089ec <xTaskCreate>:
    {
 80089ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80089f0:	0096      	lsls	r6, r2, #2
    {
 80089f2:	4680      	mov	r8, r0
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80089f4:	4630      	mov	r0, r6
    {
 80089f6:	460d      	mov	r5, r1
 80089f8:	4699      	mov	r9, r3
 80089fa:	f8dd a020 	ldr.w	sl, [sp, #32]
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80089fe:	f001 f833 	bl	8009a68 <pvPortMalloc>
            if( pxStack != NULL )
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f000 808d 	beq.w	8008b22 <xTaskCreate+0x136>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008a08:	4607      	mov	r7, r0
 8008a0a:	20a8      	movs	r0, #168	@ 0xa8
 8008a0c:	f001 f82c 	bl	8009a68 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8008a10:	4604      	mov	r4, r0
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f000 8082 	beq.w	8008b1c <xTaskCreate+0x130>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008a18:	22a8      	movs	r2, #168	@ 0xa8
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	f004 fe17 	bl	800d64e <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008a20:	4638      	mov	r0, r7
                    pxNewTCB->pxStack = pxStack;
 8008a22:	6327      	str	r7, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008a24:	21a5      	movs	r1, #165	@ 0xa5
 8008a26:	4632      	mov	r2, r6
 8008a28:	f004 fe11 	bl	800d64e <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008a2c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    if( pcName != NULL )
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	d03e      	beq.n	8008ab0 <xTaskCreate+0xc4>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a32:	782b      	ldrb	r3, [r5, #0]
 8008a34:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
            if( pcName[ x ] == ( char ) 0x00 )
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d036      	beq.n	8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a3c:	786b      	ldrb	r3, [r5, #1]
 8008a3e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            if( pcName[ x ] == ( char ) 0x00 )
 8008a42:	b393      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a44:	78ab      	ldrb	r3, [r5, #2]
 8008a46:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
            if( pcName[ x ] == ( char ) 0x00 )
 8008a4a:	b373      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a4c:	78eb      	ldrb	r3, [r5, #3]
 8008a4e:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
            if( pcName[ x ] == ( char ) 0x00 )
 8008a52:	b353      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a54:	792b      	ldrb	r3, [r5, #4]
 8008a56:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            if( pcName[ x ] == ( char ) 0x00 )
 8008a5a:	b333      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a5c:	796b      	ldrb	r3, [r5, #5]
 8008a5e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
            if( pcName[ x ] == ( char ) 0x00 )
 8008a62:	b313      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a64:	79ab      	ldrb	r3, [r5, #6]
 8008a66:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
            if( pcName[ x ] == ( char ) 0x00 )
 8008a6a:	b1f3      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a6c:	79eb      	ldrb	r3, [r5, #7]
 8008a6e:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
            if( pcName[ x ] == ( char ) 0x00 )
 8008a72:	b1d3      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a74:	7a2b      	ldrb	r3, [r5, #8]
 8008a76:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
            if( pcName[ x ] == ( char ) 0x00 )
 8008a7a:	b1b3      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a7c:	7a6b      	ldrb	r3, [r5, #9]
 8008a7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            if( pcName[ x ] == ( char ) 0x00 )
 8008a82:	b193      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a84:	7aab      	ldrb	r3, [r5, #10]
 8008a86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
            if( pcName[ x ] == ( char ) 0x00 )
 8008a8a:	b173      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a8c:	7aeb      	ldrb	r3, [r5, #11]
 8008a8e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
            if( pcName[ x ] == ( char ) 0x00 )
 8008a92:	b153      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a94:	7b2b      	ldrb	r3, [r5, #12]
 8008a96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            if( pcName[ x ] == ( char ) 0x00 )
 8008a9a:	b133      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a9c:	7b6b      	ldrb	r3, [r5, #13]
 8008a9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
            if( pcName[ x ] == ( char ) 0x00 )
 8008aa2:	b113      	cbz	r3, 8008aaa <xTaskCreate+0xbe>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aa4:	7bab      	ldrb	r3, [r5, #14]
 8008aa6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008ab0:	f1ba 0f37 	cmp.w	sl, #55	@ 0x37
 8008ab4:	d82f      	bhi.n	8008b16 <xTaskCreate+0x12a>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ab6:	1d20      	adds	r0, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 8008ab8:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8008abc:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ac0:	f7fe fed8 	bl	8007874 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ac4:	f104 0018 	add.w	r0, r4, #24
 8008ac8:	f7fe fed4 	bl	8007874 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008acc:	f1ca 0338 	rsb	r3, sl, #56	@ 0x38
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ad0:	224c      	movs	r2, #76	@ 0x4c
 8008ad2:	2100      	movs	r1, #0
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008ad4:	61a3      	str	r3, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ad6:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ad8:	6264      	str	r4, [r4, #36]	@ 0x24
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ada:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008ade:	f004 fdb6 	bl	800d64e <memset>
 8008ae2:	4912      	ldr	r1, [pc, #72]	@ (8008b2c <xTaskCreate+0x140>)
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008ae4:	3e04      	subs	r6, #4
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008ae6:	f101 0368 	add.w	r3, r1, #104	@ 0x68
 8008aea:	65a1      	str	r1, [r4, #88]	@ 0x58
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008aec:	19b8      	adds	r0, r7, r6
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008aee:	31d0      	adds	r1, #208	@ 0xd0
 8008af0:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8008af2:	6621      	str	r1, [r4, #96]	@ 0x60
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008af4:	464b      	mov	r3, r9
 8008af6:	4642      	mov	r2, r8
 8008af8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008afa:	f020 0007 	bic.w	r0, r0, #7
 8008afe:	f000 fe83 	bl	8009808 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8008b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008b04:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8008b06:	b103      	cbz	r3, 8008b0a <xTaskCreate+0x11e>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b08:	601c      	str	r4, [r3, #0]
            prvAddNewTaskToReadyList( pxNewTCB );
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff fcc6 	bl	800849c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008b10:	2001      	movs	r0, #1
    }
 8008b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008b16:	f000 ff59 	bl	80099cc <ulSetInterruptMask>
 8008b1a:	e7fe      	b.n	8008b1a <xTaskCreate+0x12e>
                    vPortFreeStack( pxStack );
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f001 f857 	bl	8009bd0 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b22:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8008b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2a:	bf00      	nop
 8008b2c:	2007afc8 	.word	0x2007afc8

08008b30 <vTaskDelete>:
    {
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	4604      	mov	r4, r0
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008b34:	4e2a      	ldr	r6, [pc, #168]	@ (8008be0 <vTaskDelete+0xb0>)
        taskENTER_CRITICAL();
 8008b36:	f000 fe17 	bl	8009768 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	d043      	beq.n	8008bc6 <vTaskDelete+0x96>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b3e:	1d27      	adds	r7, r4, #4
 8008b40:	4638      	mov	r0, r7
 8008b42:	f7fe fec1 	bl	80078c8 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b48:	b11b      	cbz	r3, 8008b52 <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b4a:	f104 0018 	add.w	r0, r4, #24
 8008b4e:	f7fe febb 	bl	80078c8 <uxListRemove>
            uxTaskNumber++;
 8008b52:	4a24      	ldr	r2, [pc, #144]	@ (8008be4 <vTaskDelete+0xb4>)
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008b54:	4d24      	ldr	r5, [pc, #144]	@ (8008be8 <vTaskDelete+0xb8>)
            uxTaskNumber++;
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	6013      	str	r3, [r2, #0]
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	42a3      	cmp	r3, r4
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008b60:	682b      	ldr	r3, [r5, #0]
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8008b62:	d023      	beq.n	8008bac <vTaskDelete+0x7c>
                --uxCurrentNumberOfTasks;
 8008b64:	4a21      	ldr	r2, [pc, #132]	@ (8008bec <vTaskDelete+0xbc>)
 8008b66:	6813      	ldr	r3, [r2, #0]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	6013      	str	r3, [r2, #0]
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b6c:	4b20      	ldr	r3, [pc, #128]	@ (8008bf0 <vTaskDelete+0xc0>)
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	b1b2      	cbz	r2, 8008ba2 <vTaskDelete+0x72>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <vTaskDelete+0xc4>)
 8008b78:	68d2      	ldr	r2, [r2, #12]
 8008b7a:	6812      	ldr	r2, [r2, #0]
 8008b7c:	601a      	str	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8008b7e:	f000 fe01 	bl	8009784 <vPortExitCritical>
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 8008b82:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008b86:	f004 fd7f 	bl	800d688 <_reclaim_reent>
            vPortFreeStack( pxTCB->pxStack );
 8008b8a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008b8c:	f001 f820 	bl	8009bd0 <vPortFree>
            vPortFree( pxTCB );
 8008b90:	4620      	mov	r0, r4
 8008b92:	f001 f81d 	bl	8009bd0 <vPortFree>
            if( xSchedulerRunning != pdFALSE )
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b113      	cbz	r3, 8008ba0 <vTaskDelete+0x70>
                if( pxTCB == pxCurrentTCB )
 8008b9a:	6833      	ldr	r3, [r6, #0]
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d014      	beq.n	8008bca <vTaskDelete+0x9a>
    }
 8008ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	4b13      	ldr	r3, [pc, #76]	@ (8008bf4 <vTaskDelete+0xc4>)
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	e7e8      	b.n	8008b7e <vTaskDelete+0x4e>
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0d9      	beq.n	8008b64 <vTaskDelete+0x34>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4811      	ldr	r0, [pc, #68]	@ (8008bf8 <vTaskDelete+0xc8>)
 8008bb4:	f7fe fe62 	bl	800787c <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8008bb8:	4a10      	ldr	r2, [pc, #64]	@ (8008bfc <vTaskDelete+0xcc>)
 8008bba:	6813      	ldr	r3, [r2, #0]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8008bc0:	f000 fde0 	bl	8009784 <vPortExitCritical>
        if( xDeleteTCBInIdleTask != pdTRUE )
 8008bc4:	e7e7      	b.n	8008b96 <vTaskDelete+0x66>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008bc6:	6834      	ldr	r4, [r6, #0]
 8008bc8:	e7b9      	b.n	8008b3e <vTaskDelete+0xe>
                    configASSERT( uxSchedulerSuspended == 0 );
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <vTaskDelete+0xd0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	b113      	cbz	r3, 8008bd6 <vTaskDelete+0xa6>
 8008bd0:	f000 fefc 	bl	80099cc <ulSetInterruptMask>
 8008bd4:	e7fe      	b.n	8008bd4 <vTaskDelete+0xa4>
    }
 8008bd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    taskYIELD_WITHIN_API();
 8008bda:	f000 bdb9 	b.w	8009750 <vPortYield>
 8008bde:	bf00      	nop
 8008be0:	20061f5c 	.word	0x20061f5c
 8008be4:	20061a6c 	.word	0x20061a6c
 8008be8:	20061a7c 	.word	0x20061a7c
 8008bec:	20061a88 	.word	0x20061a88
 8008bf0:	20061ad0 	.word	0x20061ad0
 8008bf4:	20061a68 	.word	0x20061a68
 8008bf8:	20061aa4 	.word	0x20061aa4
 8008bfc:	20061aa0 	.word	0x20061aa0
 8008c00:	20061a60 	.word	0x20061a60

08008c04 <xTaskDelayUntil>:
    {
 8008c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        configASSERT( pxPreviousWakeTime );
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d041      	beq.n	8008c90 <xTaskDelayUntil+0x8c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d038      	beq.n	8008c82 <xTaskDelayUntil+0x7e>
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008c10:	4d2a      	ldr	r5, [pc, #168]	@ (8008cbc <xTaskDelayUntil+0xb8>)
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	3301      	adds	r3, #1
 8008c16:	602b      	str	r3, [r5, #0]
            const TickType_t xConstTickCount = xTickCount;
 8008c18:	4e29      	ldr	r6, [pc, #164]	@ (8008cc0 <xTaskDelayUntil+0xbc>)
 8008c1a:	6832      	ldr	r2, [r6, #0]
            configASSERT( uxSchedulerSuspended == 1U );
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d12c      	bne.n	8008c7c <xTaskDelayUntil+0x78>
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008c22:	6803      	ldr	r3, [r0, #0]
 8008c24:	185c      	adds	r4, r3, r1
 8008c26:	bf2c      	ite	cs
 8008c28:	2101      	movcs	r1, #1
 8008c2a:	2100      	movcc	r1, #0
            if( xConstTickCount < *pxPreviousWakeTime )
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d82b      	bhi.n	8008c88 <xTaskDelayUntil+0x84>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008c30:	b389      	cbz	r1, 8008c96 <xTaskDelayUntil+0x92>
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008c32:	4b24      	ldr	r3, [pc, #144]	@ (8008cc4 <xTaskDelayUntil+0xc0>)
    const TickType_t xConstTickCount = xTickCount;
 8008c34:	f8d6 8000 	ldr.w	r8, [r6]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c38:	4f23      	ldr	r7, [pc, #140]	@ (8008cc8 <xTaskDelayUntil+0xc4>)
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008c3a:	f8d3 9000 	ldr.w	r9, [r3]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008c3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ccc <xTaskDelayUntil+0xc8>)
            *pxPreviousWakeTime = xTimeToWake;
 8008c40:	6004      	str	r4, [r0, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008c42:	f8d3 a000 	ldr.w	sl, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c46:	6838      	ldr	r0, [r7, #0]
 8008c48:	eba8 0602 	sub.w	r6, r8, r2
 8008c4c:	3004      	adds	r0, #4
 8008c4e:	f7fe fe3b 	bl	80078c8 <uxListRemove>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008c52:	4434      	add	r4, r6

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c54:	683b      	ldr	r3, [r7, #0]

            if( xTimeToWake < xConstTickCount )
 8008c56:	45a0      	cmp	r8, r4
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008c58:	6839      	ldr	r1, [r7, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c5a:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008c5c:	d921      	bls.n	8008ca2 <xTaskDelayUntil+0x9e>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008c5e:	4650      	mov	r0, sl
 8008c60:	3104      	adds	r1, #4
 8008c62:	f7fe fe19 	bl	8007898 <vListInsert>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008c66:	2601      	movs	r6, #1
        taskENTER_CRITICAL();
 8008c68:	f000 fd7e 	bl	8009768 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b1ab      	cbz	r3, 8008c9c <xTaskDelayUntil+0x98>
 8008c70:	f7ff fdfe 	bl	8008870 <xTaskResumeAll.part.0>
        if( xAlreadyYielded == pdFALSE )
 8008c74:	b1f8      	cbz	r0, 8008cb6 <xTaskDelayUntil+0xb2>
    }
 8008c76:	4630      	mov	r0, r6
 8008c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            configASSERT( uxSchedulerSuspended == 1U );
 8008c7c:	f000 fea6 	bl	80099cc <ulSetInterruptMask>
 8008c80:	e7fe      	b.n	8008c80 <xTaskDelayUntil+0x7c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8008c82:	f000 fea3 	bl	80099cc <ulSetInterruptMask>
 8008c86:	e7fe      	b.n	8008c86 <xTaskDelayUntil+0x82>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008c88:	b929      	cbnz	r1, 8008c96 <xTaskDelayUntil+0x92>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008c8a:	2600      	movs	r6, #0
            *pxPreviousWakeTime = xTimeToWake;
 8008c8c:	6004      	str	r4, [r0, #0]
 8008c8e:	e7eb      	b.n	8008c68 <xTaskDelayUntil+0x64>
        configASSERT( pxPreviousWakeTime );
 8008c90:	f000 fe9c 	bl	80099cc <ulSetInterruptMask>
 8008c94:	e7fe      	b.n	8008c94 <xTaskDelayUntil+0x90>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008c96:	42a2      	cmp	r2, r4
 8008c98:	d3cb      	bcc.n	8008c32 <xTaskDelayUntil+0x2e>
 8008c9a:	e7f6      	b.n	8008c8a <xTaskDelayUntil+0x86>
            configASSERT( uxSchedulerSuspended != 0U );
 8008c9c:	f000 fe96 	bl	80099cc <ulSetInterruptMask>
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskDelayUntil+0x9c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008ca2:	4648      	mov	r0, r9
 8008ca4:	3104      	adds	r1, #4
 8008ca6:	f7fe fdf7 	bl	8007898 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 8008caa:	4b09      	ldr	r3, [pc, #36]	@ (8008cd0 <xTaskDelayUntil+0xcc>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	4294      	cmp	r4, r2
 8008cb0:	d2d9      	bcs.n	8008c66 <xTaskDelayUntil+0x62>
                {
                    xNextTaskUnblockTime = xTimeToWake;
 8008cb2:	601c      	str	r4, [r3, #0]
 8008cb4:	e7d7      	b.n	8008c66 <xTaskDelayUntil+0x62>
            taskYIELD_WITHIN_API();
 8008cb6:	f000 fd4b 	bl	8009750 <vPortYield>
        return xShouldDelay;
 8008cba:	e7dc      	b.n	8008c76 <xTaskDelayUntil+0x72>
 8008cbc:	20061a60 	.word	0x20061a60
 8008cc0:	20061a84 	.word	0x20061a84
 8008cc4:	20061ad0 	.word	0x20061ad0
 8008cc8:	20061f5c 	.word	0x20061f5c
 8008ccc:	20061acc 	.word	0x20061acc
 8008cd0:	20061a68 	.word	0x20061a68

08008cd4 <vTaskStartScheduler>:
{
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008cd8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008cdc:	f000 fec4 	bl	8009a68 <pvPortMalloc>
            if( pxStack != NULL )
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d056      	beq.n	8008d92 <vTaskStartScheduler+0xbe>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	20a8      	movs	r0, #168	@ 0xa8
 8008ce8:	f000 febe 	bl	8009a68 <pvPortMalloc>
                if( pxNewTCB != NULL )
 8008cec:	4604      	mov	r4, r0
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d04c      	beq.n	8008d8c <vTaskStartScheduler+0xb8>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	22a8      	movs	r2, #168	@ 0xa8
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 8008de4 <vTaskStartScheduler+0x110>
 8008cfc:	f004 fca7 	bl	800d64e <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d04:	21a5      	movs	r1, #165	@ 0xa5
 8008d06:	4630      	mov	r0, r6
                    pxNewTCB->pxStack = pxStack;
 8008d08:	6326      	str	r6, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008d0a:	f004 fca0 	bl	800d64e <memset>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d0e:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008d12:	f884 5043 	strb.w	r5, [r4, #67]	@ 0x43
    pxNewTCB->uxPriority = uxPriority;
 8008d16:	62e5      	str	r5, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8008d18:	64e5      	str	r5, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d1a:	1d20      	adds	r0, r4, #4
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d1c:	f8c4 9034 	str.w	r9, [r4, #52]	@ 0x34
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008d20:	6b26      	ldr	r6, [r4, #48]	@ 0x30
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d22:	f7fe fda7 	bl	8007874 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d26:	f104 0018 	add.w	r0, r4, #24
 8008d2a:	f7fe fda3 	bl	8007874 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008d2e:	2338      	movs	r3, #56	@ 0x38
 8008d30:	4f23      	ldr	r7, [pc, #140]	@ (8008dc0 <vTaskStartScheduler+0xec>)
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d32:	4629      	mov	r1, r5
 8008d34:	224c      	movs	r2, #76	@ 0x4c
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008d36:	61a3      	str	r3, [r4, #24]
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008d38:	f506 76fe 	add.w	r6, r6, #508	@ 0x1fc
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d3c:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d3e:	6264      	str	r4, [r4, #36]	@ 0x24
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d40:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8008d44:	f004 fc83 	bl	800d64e <memset>
 8008d48:	f107 0868 	add.w	r8, r7, #104	@ 0x68
 8008d4c:	f107 0cd0 	add.w	ip, r7, #208	@ 0xd0
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008d50:	f026 0607 	bic.w	r6, r6, #7
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d54:	462b      	mov	r3, r5
 8008d56:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d58:	f8c4 c060 	str.w	ip, [r4, #96]	@ 0x60
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d5c:	4a19      	ldr	r2, [pc, #100]	@ (8008dc4 <vTaskStartScheduler+0xf0>)
 8008d5e:	4630      	mov	r0, r6
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8008d60:	e9c4 7816 	strd	r7, r8, [r4, #88]	@ 0x58
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d64:	f000 fd50 	bl	8009808 <pxPortInitialiseStack>
 8008d68:	4602      	mov	r2, r0
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d6a:	4b17      	ldr	r3, [pc, #92]	@ (8008dc8 <vTaskStartScheduler+0xf4>)
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008d6c:	6022      	str	r2, [r4, #0]
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d6e:	4620      	mov	r0, r4
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d70:	601c      	str	r4, [r3, #0]
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8008d72:	2501      	movs	r5, #1
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d74:	f7ff fb92 	bl	800849c <prvAddNewTaskToReadyList>
            xReturn = xTimerCreateTimerTask();
 8008d78:	f000 fc76 	bl	8009668 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8008d7c:	42a8      	cmp	r0, r5
 8008d7e:	d00b      	beq.n	8008d98 <vTaskStartScheduler+0xc4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d80:	3001      	adds	r0, #1
 8008d82:	d006      	beq.n	8008d92 <vTaskStartScheduler+0xbe>
    ( void ) uxTopUsedPriority;
 8008d84:	4b11      	ldr	r3, [pc, #68]	@ (8008dcc <vTaskStartScheduler+0xf8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
}
 8008d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f000 ff1f 	bl	8009bd0 <vPortFree>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d92:	f000 fe1b 	bl	80099cc <ulSetInterruptMask>
 8008d96:	e7fe      	b.n	8008d96 <vTaskStartScheduler+0xc2>
        portDISABLE_INTERRUPTS();
 8008d98:	f000 fe18 	bl	80099cc <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 8008d9c:	f04f 34ff 	mov.w	r4, #4294967295
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008da0:	2200      	movs	r2, #0
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008da2:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <vTaskStartScheduler+0xfc>)
 8008da4:	490b      	ldr	r1, [pc, #44]	@ (8008dd4 <vTaskStartScheduler+0x100>)
 8008da6:	681b      	ldr	r3, [r3, #0]
        xNextTaskUnblockTime = portMAX_DELAY;
 8008da8:	480b      	ldr	r0, [pc, #44]	@ (8008dd8 <vTaskStartScheduler+0x104>)
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8008daa:	3354      	adds	r3, #84	@ 0x54
 8008dac:	600b      	str	r3, [r1, #0]
        xSchedulerRunning = pdTRUE;
 8008dae:	490b      	ldr	r1, [pc, #44]	@ (8008ddc <vTaskStartScheduler+0x108>)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	@ (8008de0 <vTaskStartScheduler+0x10c>)
        xNextTaskUnblockTime = portMAX_DELAY;
 8008db2:	6004      	str	r4, [r0, #0]
        xSchedulerRunning = pdTRUE;
 8008db4:	600d      	str	r5, [r1, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008db6:	601a      	str	r2, [r3, #0]
        ( void ) xPortStartScheduler();
 8008db8:	f000 fd62 	bl	8009880 <xPortStartScheduler>
 8008dbc:	e7e2      	b.n	8008d84 <vTaskStartScheduler+0xb0>
 8008dbe:	bf00      	nop
 8008dc0:	2007afc8 	.word	0x2007afc8
 8008dc4:	08008661 	.word	0x08008661
 8008dc8:	20061a64 	.word	0x20061a64
 8008dcc:	0801e648 	.word	0x0801e648
 8008dd0:	20061f5c 	.word	0x20061f5c
 8008dd4:	20000f88 	.word	0x20000f88
 8008dd8:	20061a68 	.word	0x20061a68
 8008ddc:	20061a7c 	.word	0x20061a7c
 8008de0:	20061a84 	.word	0x20061a84
 8008de4:	454c4449 	.word	0x454c4449

08008de8 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008de8:	4a02      	ldr	r2, [pc, #8]	@ (8008df4 <vTaskSuspendAll+0xc>)
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	6013      	str	r3, [r2, #0]
}
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20061a60 	.word	0x20061a60

08008df8 <xTaskResumeAll>:
{
 8008df8:	b508      	push	{r3, lr}
        taskENTER_CRITICAL();
 8008dfa:	f000 fcb5 	bl	8009768 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8008dfe:	4b05      	ldr	r3, [pc, #20]	@ (8008e14 <xTaskResumeAll+0x1c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	b11b      	cbz	r3, 8008e0c <xTaskResumeAll+0x14>
}
 8008e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e08:	f7ff bd32 	b.w	8008870 <xTaskResumeAll.part.0>
            configASSERT( uxSchedulerSuspended != 0U );
 8008e0c:	f000 fdde 	bl	80099cc <ulSetInterruptMask>
 8008e10:	e7fe      	b.n	8008e10 <xTaskResumeAll+0x18>
 8008e12:	bf00      	nop
 8008e14:	20061a60 	.word	0x20061a60

08008e18 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8008e18:	4b01      	ldr	r3, [pc, #4]	@ (8008e20 <xTaskGetTickCount+0x8>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20061a84 	.word	0x20061a84

08008e24 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <xTaskIncrementTick+0x18>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	b90b      	cbnz	r3, 8008e2e <xTaskIncrementTick+0xa>
 8008e2a:	f7ff bc4b 	b.w	80086c4 <xTaskIncrementTick.part.0>
        xPendedTicks += 1U;
 8008e2e:	4a04      	ldr	r2, [pc, #16]	@ (8008e40 <xTaskIncrementTick+0x1c>)
}
 8008e30:	2000      	movs	r0, #0
        xPendedTicks += 1U;
 8008e32:	6813      	ldr	r3, [r2, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	6013      	str	r3, [r2, #0]
}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	20061a60 	.word	0x20061a60
 8008e40:	20061a78 	.word	0x20061a78

08008e44 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8008e44:	4b04      	ldr	r3, [pc, #16]	@ (8008e58 <vTaskSwitchContext+0x14>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	b11b      	cbz	r3, 8008e52 <vTaskSwitchContext+0xe>
            xYieldPendings[ 0 ] = pdTRUE;
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4b03      	ldr	r3, [pc, #12]	@ (8008e5c <vTaskSwitchContext+0x18>)
 8008e4e:	601a      	str	r2, [r3, #0]
    }
 8008e50:	4770      	bx	lr
 8008e52:	f7ff bbb1 	b.w	80085b8 <vTaskSwitchContext.part.0>
 8008e56:	bf00      	nop
 8008e58:	20061a60 	.word	0x20061a60
 8008e5c:	20061a74 	.word	0x20061a74

08008e60 <vTaskPlaceOnEventList>:
{
 8008e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( pxEventList );
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d031      	beq.n	8008ecc <vTaskPlaceOnEventList+0x6c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e68:	460c      	mov	r4, r1
 8008e6a:	4d1f      	ldr	r5, [pc, #124]	@ (8008ee8 <vTaskPlaceOnEventList+0x88>)
 8008e6c:	6829      	ldr	r1, [r5, #0]
 8008e6e:	3118      	adds	r1, #24
 8008e70:	f7fe fd12 	bl	8007898 <vListInsert>
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008e74:	4b1d      	ldr	r3, [pc, #116]	@ (8008eec <vTaskPlaceOnEventList+0x8c>)
    const TickType_t xConstTickCount = xTickCount;
 8008e76:	491e      	ldr	r1, [pc, #120]	@ (8008ef0 <vTaskPlaceOnEventList+0x90>)
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008e78:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef4 <vTaskPlaceOnEventList+0x94>)
    const TickType_t xConstTickCount = xTickCount;
 8008e7a:	680e      	ldr	r6, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008e7c:	6817      	ldr	r7, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008e7e:	f8d3 8000 	ldr.w	r8, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e82:	6828      	ldr	r0, [r5, #0]
 8008e84:	3004      	adds	r0, #4
 8008e86:	f7fe fd1f 	bl	80078c8 <uxListRemove>
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e8a:	1c63      	adds	r3, r4, #1
 8008e8c:	d00a      	beq.n	8008ea4 <vTaskPlaceOnEventList+0x44>
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	19a4      	adds	r4, r4, r6
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e92:	6829      	ldr	r1, [r5, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e94:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008e96:	d31c      	bcc.n	8008ed2 <vTaskPlaceOnEventList+0x72>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e98:	4640      	mov	r0, r8
}
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008e9e:	3104      	adds	r1, #4
 8008ea0:	f7fe bcfa 	b.w	8007898 <vListInsert>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea4:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <vTaskPlaceOnEventList+0x98>)
 8008ea6:	6829      	ldr	r1, [r5, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	681c      	ldr	r4, [r3, #0]
 8008eac:	608a      	str	r2, [r1, #8]
 8008eae:	682e      	ldr	r6, [r5, #0]
 8008eb0:	3401      	adds	r4, #1
 8008eb2:	6828      	ldr	r0, [r5, #0]
 8008eb4:	6829      	ldr	r1, [r5, #0]
 8008eb6:	601c      	str	r4, [r3, #0]
 8008eb8:	682d      	ldr	r5, [r5, #0]
 8008eba:	6894      	ldr	r4, [r2, #8]
 8008ebc:	3004      	adds	r0, #4
 8008ebe:	3104      	adds	r1, #4
 8008ec0:	60f4      	str	r4, [r6, #12]
 8008ec2:	6060      	str	r0, [r4, #4]
 8008ec4:	6091      	str	r1, [r2, #8]
 8008ec6:	616b      	str	r3, [r5, #20]
}
 8008ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( pxEventList );
 8008ecc:	f000 fd7e 	bl	80099cc <ulSetInterruptMask>
 8008ed0:	e7fe      	b.n	8008ed0 <vTaskPlaceOnEventList+0x70>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	3104      	adds	r1, #4
 8008ed6:	f7fe fcdf 	bl	8007898 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008eda:	4b08      	ldr	r3, [pc, #32]	@ (8008efc <vTaskPlaceOnEventList+0x9c>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4294      	cmp	r4, r2
                    xNextTaskUnblockTime = xTimeToWake;
 8008ee0:	bf38      	it	cc
 8008ee2:	601c      	strcc	r4, [r3, #0]
}
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	20061f5c 	.word	0x20061f5c
 8008eec:	20061acc 	.word	0x20061acc
 8008ef0:	20061a84 	.word	0x20061a84
 8008ef4:	20061ad0 	.word	0x20061ad0
 8008ef8:	20061a8c 	.word	0x20061a8c
 8008efc:	20061a68 	.word	0x20061a68

08008f00 <vTaskPlaceOnEventListRestricted>:
    {
 8008f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        configASSERT( pxEventList );
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d054      	beq.n	8008fb2 <vTaskPlaceOnEventListRestricted+0xb2>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f08:	4694      	mov	ip, r2
 8008f0a:	4c2b      	ldr	r4, [pc, #172]	@ (8008fb8 <vTaskPlaceOnEventListRestricted+0xb8>)
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	6841      	ldr	r1, [r0, #4]
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	f8d4 e000 	ldr.w	lr, [r4]
 8008f16:	6827      	ldr	r7, [r4, #0]
 8008f18:	688a      	ldr	r2, [r1, #8]
 8008f1a:	61d9      	str	r1, [r3, #28]
 8008f1c:	6826      	ldr	r6, [r4, #0]
 8008f1e:	6803      	ldr	r3, [r0, #0]
 8008f20:	3718      	adds	r7, #24
 8008f22:	f8ce 2020 	str.w	r2, [lr, #32]
 8008f26:	6057      	str	r7, [r2, #4]
 8008f28:	6822      	ldr	r2, [r4, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	3618      	adds	r6, #24
 8008f2e:	608e      	str	r6, [r1, #8]
 8008f30:	6290      	str	r0, [r2, #40]	@ 0x28
    const TickType_t xConstTickCount = xTickCount;
 8008f32:	4922      	ldr	r1, [pc, #136]	@ (8008fbc <vTaskPlaceOnEventListRestricted+0xbc>)
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f34:	6003      	str	r3, [r0, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008f36:	4a22      	ldr	r2, [pc, #136]	@ (8008fc0 <vTaskPlaceOnEventListRestricted+0xc0>)
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008f38:	4b22      	ldr	r3, [pc, #136]	@ (8008fc4 <vTaskPlaceOnEventListRestricted+0xc4>)
        if( xWaitIndefinitely != pdFALSE )
 8008f3a:	f1bc 0f00 	cmp.w	ip, #0
 8008f3e:	d01a      	beq.n	8008f76 <vTaskPlaceOnEventListRestricted+0x76>
    const TickType_t xConstTickCount = xTickCount;
 8008f40:	6809      	ldr	r1, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008f42:	6812      	ldr	r2, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008f44:	681b      	ldr	r3, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f46:	6820      	ldr	r0, [r4, #0]
 8008f48:	3004      	adds	r0, #4
 8008f4a:	f7fe fcbd 	bl	80078c8 <uxListRemove>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc8 <vTaskPlaceOnEventListRestricted+0xc8>)
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	3101      	adds	r1, #1
 8008f56:	6019      	str	r1, [r3, #0]
 8008f58:	6821      	ldr	r1, [r4, #0]
 8008f5a:	6890      	ldr	r0, [r2, #8]
 8008f5c:	608a      	str	r2, [r1, #8]
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	60c8      	str	r0, [r1, #12]
 8008f62:	6821      	ldr	r1, [r4, #0]
 8008f64:	3104      	adds	r1, #4
 8008f66:	6041      	str	r1, [r0, #4]
 8008f68:	6821      	ldr	r1, [r4, #0]
 8008f6a:	6820      	ldr	r0, [r4, #0]
 8008f6c:	3104      	adds	r1, #4
 8008f6e:	6091      	str	r1, [r2, #8]
 8008f70:	6143      	str	r3, [r0, #20]
    }
 8008f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const TickType_t xConstTickCount = xTickCount;
 8008f76:	680e      	ldr	r6, [r1, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8008f78:	6817      	ldr	r7, [r2, #0]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8008f7a:	f8d3 8000 	ldr.w	r8, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	3004      	adds	r0, #4
 8008f82:	f7fe fca1 	bl	80078c8 <uxListRemove>
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	19ad      	adds	r5, r5, r6
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f8a:	6821      	ldr	r1, [r4, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f8c:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008f8e:	d305      	bcc.n	8008f9c <vTaskPlaceOnEventListRestricted+0x9c>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f90:	4640      	mov	r0, r8
    }
 8008f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f96:	3104      	adds	r1, #4
 8008f98:	f7fe bc7e 	b.w	8007898 <vListInsert>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	3104      	adds	r1, #4
 8008fa0:	f7fe fc7a 	bl	8007898 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008fa4:	4b09      	ldr	r3, [pc, #36]	@ (8008fcc <vTaskPlaceOnEventListRestricted+0xcc>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	4295      	cmp	r5, r2
                    xNextTaskUnblockTime = xTimeToWake;
 8008faa:	bf38      	it	cc
 8008fac:	601d      	strcc	r5, [r3, #0]
    }
 8008fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( pxEventList );
 8008fb2:	f000 fd0b 	bl	80099cc <ulSetInterruptMask>
 8008fb6:	e7fe      	b.n	8008fb6 <vTaskPlaceOnEventListRestricted+0xb6>
 8008fb8:	20061f5c 	.word	0x20061f5c
 8008fbc:	20061a84 	.word	0x20061a84
 8008fc0:	20061ad0 	.word	0x20061ad0
 8008fc4:	20061acc 	.word	0x20061acc
 8008fc8:	20061a8c 	.word	0x20061a8c
 8008fcc:	20061a68 	.word	0x20061a68

08008fd0 <xTaskRemoveFromEventList>:
{
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008fd2:	68c3      	ldr	r3, [r0, #12]
 8008fd4:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d054      	beq.n	8009084 <xTaskRemoveFromEventList+0xb4>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008fda:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8008fde:	2600      	movs	r6, #0
 8008fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fe2:	6081      	str	r1, [r0, #8]
 8008fe4:	6048      	str	r0, [r1, #4]
 8008fe6:	6850      	ldr	r0, [r2, #4]
 8008fe8:	f103 0418 	add.w	r4, r3, #24
 8008fec:	42a0      	cmp	r0, r4
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008fee:	4827      	ldr	r0, [pc, #156]	@ (800908c <xTaskRemoveFromEventList+0xbc>)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008ff0:	bf08      	it	eq
 8008ff2:	6051      	streq	r1, [r2, #4]
 8008ff4:	6811      	ldr	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008ff6:	6805      	ldr	r5, [r0, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008ff8:	3901      	subs	r1, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ffa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008ffc:	629e      	str	r6, [r3, #40]	@ 0x28
 8008ffe:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009000:	b1a5      	cbz	r5, 800902c <xTaskRemoveFromEventList+0x5c>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009002:	4a23      	ldr	r2, [pc, #140]	@ (8009090 <xTaskRemoveFromEventList+0xc0>)
 8009004:	6815      	ldr	r5, [r2, #0]
 8009006:	6851      	ldr	r1, [r2, #4]
 8009008:	3501      	adds	r5, #1
 800900a:	6015      	str	r5, [r2, #0]
 800900c:	688d      	ldr	r5, [r1, #8]
 800900e:	61d9      	str	r1, [r3, #28]
 8009010:	621d      	str	r5, [r3, #32]
 8009012:	606c      	str	r4, [r5, #4]
 8009014:	608c      	str	r4, [r1, #8]
 8009016:	629a      	str	r2, [r3, #40]	@ 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009018:	4b1e      	ldr	r3, [pc, #120]	@ (8009094 <xTaskRemoveFromEventList+0xc4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901e:	4283      	cmp	r3, r0
 8009020:	d22e      	bcs.n	8009080 <xTaskRemoveFromEventList+0xb0>
            xYieldPendings[ 0 ] = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	4a1c      	ldr	r2, [pc, #112]	@ (8009098 <xTaskRemoveFromEventList+0xc8>)
            xReturn = pdTRUE;
 8009026:	4618      	mov	r0, r3
            xYieldPendings[ 0 ] = pdTRUE;
 8009028:	6013      	str	r3, [r2, #0]
}
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800902c:	695a      	ldr	r2, [r3, #20]
 800902e:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8009032:	60a1      	str	r1, [r4, #8]
 8009034:	604c      	str	r4, [r1, #4]
 8009036:	6854      	ldr	r4, [r2, #4]
 8009038:	1d1e      	adds	r6, r3, #4
 800903a:	42b4      	cmp	r4, r6
 800903c:	bf08      	it	eq
 800903e:	6051      	streq	r1, [r2, #4]
 8009040:	6811      	ldr	r1, [r2, #0]
 8009042:	3901      	subs	r1, #1
 8009044:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009046:	4a15      	ldr	r2, [pc, #84]	@ (800909c <xTaskRemoveFromEventList+0xcc>)
 8009048:	6811      	ldr	r1, [r2, #0]
 800904a:	4281      	cmp	r1, r0
 800904c:	4914      	ldr	r1, [pc, #80]	@ (80090a0 <xTaskRemoveFromEventList+0xd0>)
 800904e:	bf38      	it	cc
 8009050:	6010      	strcc	r0, [r2, #0]
 8009052:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8009056:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800905a:	687d      	ldr	r5, [r7, #4]
 800905c:	0092      	lsls	r2, r2, #2
 800905e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8009062:	588c      	ldr	r4, [r1, r2]
 8009064:	609d      	str	r5, [r3, #8]
 8009066:	f8c3 c00c 	str.w	ip, [r3, #12]
 800906a:	f8cc 6004 	str.w	r6, [ip, #4]
 800906e:	60ae      	str	r6, [r5, #8]
 8009070:	615f      	str	r7, [r3, #20]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009072:	4b08      	ldr	r3, [pc, #32]	@ (8009094 <xTaskRemoveFromEventList+0xc4>)
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009074:	3401      	adds	r4, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009076:	681b      	ldr	r3, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009078:	508c      	str	r4, [r1, r2]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800907a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907c:	4283      	cmp	r3, r0
 800907e:	d3d0      	bcc.n	8009022 <xTaskRemoveFromEventList+0x52>
            xReturn = pdFALSE;
 8009080:	2000      	movs	r0, #0
}
 8009082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( pxUnblockedTCB );
 8009084:	f000 fca2 	bl	80099cc <ulSetInterruptMask>
 8009088:	e7fe      	b.n	8009088 <xTaskRemoveFromEventList+0xb8>
 800908a:	bf00      	nop
 800908c:	20061a60 	.word	0x20061a60
 8009090:	20061ab8 	.word	0x20061ab8
 8009094:	20061f5c 	.word	0x20061f5c
 8009098:	20061a74 	.word	0x20061a74
 800909c:	20061a80 	.word	0x20061a80
 80090a0:	20061afc 	.word	0x20061afc

080090a4 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090a4:	4a03      	ldr	r2, [pc, #12]	@ (80090b4 <vTaskInternalSetTimeOutState+0x10>)
    pxTimeOut->xTimeOnEntering = xTickCount;
 80090a6:	4b04      	ldr	r3, [pc, #16]	@ (80090b8 <vTaskInternalSetTimeOutState+0x14>)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090a8:	6812      	ldr	r2, [r2, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	e9c0 2300 	strd	r2, r3, [r0]
}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20061a70 	.word	0x20061a70
 80090b8:	20061a84 	.word	0x20061a84

080090bc <xTaskCheckForTimeOut>:
{
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxTimeOut );
 80090be:	b368      	cbz	r0, 800911c <xTaskCheckForTimeOut+0x60>
    configASSERT( pxTicksToWait );
 80090c0:	460d      	mov	r5, r1
 80090c2:	b341      	cbz	r1, 8009116 <xTaskCheckForTimeOut+0x5a>
 80090c4:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80090c6:	f000 fb4f 	bl	8009768 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 80090ca:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 80090cc:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <xTaskCheckForTimeOut+0x68>)
            if( *pxTicksToWait == portMAX_DELAY )
 80090ce:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 80090d0:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80090d2:	d01b      	beq.n	800910c <xTaskCheckForTimeOut+0x50>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80090d4:	e9d4 6000 	ldrd	r6, r0, [r4]
 80090d8:	f8df c04c 	ldr.w	ip, [pc, #76]	@ 8009128 <xTaskCheckForTimeOut+0x6c>
 80090dc:	f8dc 7000 	ldr.w	r7, [ip]
 80090e0:	42be      	cmp	r6, r7
 80090e2:	d008      	beq.n	80090f6 <xTaskCheckForTimeOut+0x3a>
 80090e4:	4288      	cmp	r0, r1
 80090e6:	d806      	bhi.n	80090f6 <xTaskCheckForTimeOut+0x3a>
            *pxTicksToWait = ( TickType_t ) 0;
 80090e8:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 80090ea:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80090ec:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80090ee:	f000 fb49 	bl	8009784 <vPortExitCritical>
}
 80090f2:	4620      	mov	r0, r4
 80090f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090f6:	1a0f      	subs	r7, r1, r0
        else if( xElapsedTime < *pxTicksToWait )
 80090f8:	42bb      	cmp	r3, r7
 80090fa:	d9f5      	bls.n	80090e8 <xTaskCheckForTimeOut+0x2c>
            *pxTicksToWait -= xElapsedTime;
 80090fc:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090fe:	f8dc 1000 	ldr.w	r1, [ip]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009102:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 8009104:	4403      	add	r3, r0
 8009106:	602b      	str	r3, [r5, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009108:	e9c4 1200 	strd	r1, r2, [r4]
                xReturn = pdFALSE;
 800910c:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 800910e:	f000 fb39 	bl	8009784 <vPortExitCritical>
}
 8009112:	4620      	mov	r0, r4
 8009114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( pxTicksToWait );
 8009116:	f000 fc59 	bl	80099cc <ulSetInterruptMask>
 800911a:	e7fe      	b.n	800911a <xTaskCheckForTimeOut+0x5e>
    configASSERT( pxTimeOut );
 800911c:	f000 fc56 	bl	80099cc <ulSetInterruptMask>
 8009120:	e7fe      	b.n	8009120 <xTaskCheckForTimeOut+0x64>
 8009122:	bf00      	nop
 8009124:	20061a84 	.word	0x20061a84
 8009128:	20061a70 	.word	0x20061a70

0800912c <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800912c:	2201      	movs	r2, #1
 800912e:	4b01      	ldr	r3, [pc, #4]	@ (8009134 <vTaskMissedYield+0x8>)
 8009130:	601a      	str	r2, [r3, #0]
}
 8009132:	4770      	bx	lr
 8009134:	20061a74 	.word	0x20061a74

08009138 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8009138:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <xTaskGetSchedulerState+0x18>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	b133      	cbz	r3, 800914c <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800913e:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <xTaskGetSchedulerState+0x1c>)
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	fab0 f080 	clz	r0, r0
 8009146:	0940      	lsrs	r0, r0, #5
 8009148:	0040      	lsls	r0, r0, #1
 800914a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 800914c:	2001      	movs	r0, #1
    }
 800914e:	4770      	bx	lr
 8009150:	20061a7c 	.word	0x20061a7c
 8009154:	20061a60 	.word	0x20061a60

08009158 <xTaskPriorityInherit>:
    {
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800915a:	4604      	mov	r4, r0
 800915c:	b1c8      	cbz	r0, 8009192 <xTaskPriorityInherit+0x3a>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800915e:	4d1f      	ldr	r5, [pc, #124]	@ (80091dc <xTaskPriorityInherit+0x84>)
 8009160:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8009162:	682a      	ldr	r2, [r5, #0]
 8009164:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009166:	4293      	cmp	r3, r2
 8009168:	d214      	bcs.n	8009194 <xTaskPriorityInherit+0x3c>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800916a:	6982      	ldr	r2, [r0, #24]
 800916c:	2a00      	cmp	r2, #0
 800916e:	db04      	blt.n	800917a <xTaskPriorityInherit+0x22>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8009170:	682a      	ldr	r2, [r5, #0]
 8009172:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009174:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8009178:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800917a:	4e19      	ldr	r6, [pc, #100]	@ (80091e0 <xTaskPriorityInherit+0x88>)
 800917c:	6962      	ldr	r2, [r4, #20]
 800917e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009182:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009186:	429a      	cmp	r2, r3
 8009188:	d00c      	beq.n	80091a4 <xTaskPriorityInherit+0x4c>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918e:	62e3      	str	r3, [r4, #44]	@ 0x2c
                xReturn = pdTRUE;
 8009190:	2001      	movs	r0, #1
    }
 8009192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	4298      	cmp	r0, r3
 800919c:	bf2c      	ite	cs
 800919e:	2000      	movcs	r0, #0
 80091a0:	2001      	movcc	r0, #1
    }
 80091a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a4:	1d27      	adds	r7, r4, #4
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7fe fb8e 	bl	80078c8 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091ac:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80091ae:	4a0d      	ldr	r2, [pc, #52]	@ (80091e4 <xTaskPriorityInherit+0x8c>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80091b2:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80091b6:	428b      	cmp	r3, r1
 80091b8:	bf88      	it	hi
 80091ba:	6013      	strhi	r3, [r2, #0]
 80091bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091c0:	0098      	lsls	r0, r3, #2
 80091c2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091c6:	6859      	ldr	r1, [r3, #4]
 80091c8:	5832      	ldr	r2, [r6, r0]
 80091ca:	688d      	ldr	r5, [r1, #8]
 80091cc:	3201      	adds	r2, #1
 80091ce:	60a1      	str	r1, [r4, #8]
 80091d0:	60e5      	str	r5, [r4, #12]
 80091d2:	606f      	str	r7, [r5, #4]
 80091d4:	608f      	str	r7, [r1, #8]
 80091d6:	6163      	str	r3, [r4, #20]
 80091d8:	5032      	str	r2, [r6, r0]
 80091da:	e7d9      	b.n	8009190 <xTaskPriorityInherit+0x38>
 80091dc:	20061f5c 	.word	0x20061f5c
 80091e0:	20061afc 	.word	0x20061afc
 80091e4:	20061a80 	.word	0x20061a80

080091e8 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 80091e8:	b198      	cbz	r0, 8009212 <xTaskPriorityDisinherit+0x2a>
    {
 80091ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB == pxCurrentTCB );
 80091ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009264 <xTaskPriorityDisinherit+0x7c>)
 80091ee:	4604      	mov	r4, r0
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4283      	cmp	r3, r0
 80091f4:	d002      	beq.n	80091fc <xTaskPriorityDisinherit+0x14>
 80091f6:	f000 fbe9 	bl	80099cc <ulSetInterruptMask>
 80091fa:	e7fe      	b.n	80091fa <xTaskPriorityDisinherit+0x12>
            configASSERT( pxTCB->uxMutexesHeld );
 80091fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fe:	b153      	cbz	r3, 8009216 <xTaskPriorityDisinherit+0x2e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009200:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009202:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8009204:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009206:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 8009208:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800920a:	d000      	beq.n	800920e <xTaskPriorityDisinherit+0x26>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800920c:	b133      	cbz	r3, 800921c <xTaskPriorityDisinherit+0x34>
        BaseType_t xReturn = pdFALSE;
 800920e:	2000      	movs	r0, #0
    }
 8009210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BaseType_t xReturn = pdFALSE;
 8009212:	2000      	movs	r0, #0
    }
 8009214:	4770      	bx	lr
            configASSERT( pxTCB->uxMutexesHeld );
 8009216:	f000 fbd9 	bl	80099cc <ulSetInterruptMask>
 800921a:	e7fe      	b.n	800921a <xTaskPriorityDisinherit+0x32>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800921c:	1d05      	adds	r5, r0, #4
 800921e:	4628      	mov	r0, r5
 8009220:	f7fe fb52 	bl	80078c8 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009224:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8009226:	4a10      	ldr	r2, [pc, #64]	@ (8009268 <xTaskPriorityDisinherit+0x80>)
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8009228:	f1c3 0038 	rsb	r0, r3, #56	@ 0x38
 800922c:	61a0      	str	r0, [r4, #24]
                    xReturn = pdTRUE;
 800922e:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
 8009230:	6811      	ldr	r1, [r2, #0]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009232:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8009234:	428b      	cmp	r3, r1
 8009236:	bf88      	it	hi
 8009238:	6013      	strhi	r3, [r2, #0]
 800923a:	4a0c      	ldr	r2, [pc, #48]	@ (800926c <xTaskPriorityDisinherit+0x84>)
 800923c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009240:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8009244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009248:	685f      	ldr	r7, [r3, #4]
 800924a:	f852 100e 	ldr.w	r1, [r2, lr]
 800924e:	68be      	ldr	r6, [r7, #8]
 8009250:	4401      	add	r1, r0
 8009252:	60a7      	str	r7, [r4, #8]
 8009254:	60e6      	str	r6, [r4, #12]
 8009256:	6075      	str	r5, [r6, #4]
 8009258:	60bd      	str	r5, [r7, #8]
 800925a:	6163      	str	r3, [r4, #20]
 800925c:	f842 100e 	str.w	r1, [r2, lr]
    }
 8009260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009262:	bf00      	nop
 8009264:	20061f5c 	.word	0x20061f5c
 8009268:	20061a80 	.word	0x20061a80
 800926c:	20061afc 	.word	0x20061afc

08009270 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 8009270:	b180      	cbz	r0, 8009294 <vTaskPriorityDisinheritAfterTimeout+0x24>
    {
 8009272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB->uxMutexesHeld );
 8009274:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009276:	4604      	mov	r4, r0
 8009278:	b14b      	cbz	r3, 800928e <vTaskPriorityDisinheritAfterTimeout+0x1e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800927a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
            if( pxTCB->uxPriority != uxPriorityToUse )
 800927c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800927e:	4281      	cmp	r1, r0
 8009280:	bf38      	it	cc
 8009282:	4601      	movcc	r1, r0
            if( pxTCB->uxPriority != uxPriorityToUse )
 8009284:	428a      	cmp	r2, r1
 8009286:	d001      	beq.n	800928c <vTaskPriorityDisinheritAfterTimeout+0x1c>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009288:	2b01      	cmp	r3, #1
 800928a:	d004      	beq.n	8009296 <vTaskPriorityDisinheritAfterTimeout+0x26>
    }
 800928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB->uxMutexesHeld );
 800928e:	f000 fb9d 	bl	80099cc <ulSetInterruptMask>
 8009292:	e7fe      	b.n	8009292 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8009294:	4770      	bx	lr
                    configASSERT( pxTCB != pxCurrentTCB );
 8009296:	4b18      	ldr	r3, [pc, #96]	@ (80092f8 <vTaskPriorityDisinheritAfterTimeout+0x88>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	42a3      	cmp	r3, r4
 800929c:	d029      	beq.n	80092f2 <vTaskPriorityDisinheritAfterTimeout+0x82>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800929e:	69a3      	ldr	r3, [r4, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80092a0:	62e1      	str	r1, [r4, #44]	@ 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80092a2:	2b00      	cmp	r3, #0
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80092a4:	bfa8      	it	ge
 80092a6:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092aa:	4d14      	ldr	r5, [pc, #80]	@ (80092fc <vTaskPriorityDisinheritAfterTimeout+0x8c>)
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80092ac:	bfa8      	it	ge
 80092ae:	61a1      	strge	r1, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80092b4:	6961      	ldr	r1, [r4, #20]
 80092b6:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d1e6      	bne.n	800928c <vTaskPriorityDisinheritAfterTimeout+0x1c>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092be:	1d26      	adds	r6, r4, #4
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7fe fb01 	bl	80078c8 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 80092c6:	4a0e      	ldr	r2, [pc, #56]	@ (8009300 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80092c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80092ca:	6811      	ldr	r1, [r2, #0]
 80092cc:	428b      	cmp	r3, r1
 80092ce:	bf88      	it	hi
 80092d0:	6013      	strhi	r3, [r2, #0]
 80092d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092d6:	0098      	lsls	r0, r3, #2
 80092d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80092dc:	6859      	ldr	r1, [r3, #4]
 80092de:	582a      	ldr	r2, [r5, r0]
 80092e0:	688f      	ldr	r7, [r1, #8]
 80092e2:	3201      	adds	r2, #1
 80092e4:	60a1      	str	r1, [r4, #8]
 80092e6:	60e7      	str	r7, [r4, #12]
 80092e8:	607e      	str	r6, [r7, #4]
 80092ea:	608e      	str	r6, [r1, #8]
 80092ec:	6163      	str	r3, [r4, #20]
 80092ee:	502a      	str	r2, [r5, r0]
    }
 80092f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 80092f2:	f000 fb6b 	bl	80099cc <ulSetInterruptMask>
 80092f6:	e7fe      	b.n	80092f6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80092f8:	20061f5c 	.word	0x20061f5c
 80092fc:	20061afc 	.word	0x20061afc
 8009300:	20061a80 	.word	0x20061a80

08009304 <pvTaskIncrementMutexHeldCount>:
        pxTCB = pxCurrentTCB;
 8009304:	4b03      	ldr	r3, [pc, #12]	@ (8009314 <pvTaskIncrementMutexHeldCount+0x10>)
 8009306:	6818      	ldr	r0, [r3, #0]
        if( pxTCB != NULL )
 8009308:	b110      	cbz	r0, 8009310 <pvTaskIncrementMutexHeldCount+0xc>
            ( pxTCB->uxMutexesHeld )++;
 800930a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800930c:	3301      	adds	r3, #1
 800930e:	6503      	str	r3, [r0, #80]	@ 0x50
    }
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20061f5c 	.word	0x20061f5c

08009318 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	4fb6      	ldr	r7, [pc, #728]	@ (80095f8 <prvTimerTask+0x2e0>)
 800931e:	f8df b2e0 	ldr.w	fp, [pc, #736]	@ 8009600 <prvTimerTask+0x2e8>
 8009322:	f8df 82e0 	ldr.w	r8, [pc, #736]	@ 8009604 <prvTimerTask+0x2ec>
 8009326:	4db5      	ldr	r5, [pc, #724]	@ (80095fc <prvTimerTask+0x2e4>)
 8009328:	b087      	sub	sp, #28
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681c      	ldr	r4, [r3, #0]
 800932e:	2c00      	cmp	r4, #0
 8009330:	f040 811c 	bne.w	800956c <prvTimerTask+0x254>
        vTaskSuspendAll();
 8009334:	f7ff fd58 	bl	8008de8 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8009338:	f7ff fd6e 	bl	8008e18 <xTaskGetTickCount>

        if( xTimeNow < xLastTime )
 800933c:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 8009340:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 8009342:	4283      	cmp	r3, r0
 8009344:	d848      	bhi.n	80093d8 <prvTimerTask+0xc0>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009346:	f8d8 3000 	ldr.w	r3, [r8]
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
 800934a:	f8cb 0000 	str.w	r0, [fp]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	fab2 f282 	clz	r2, r2
 8009354:	0952      	lsrs	r2, r2, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009356:	6828      	ldr	r0, [r5, #0]
 8009358:	eba4 0109 	sub.w	r1, r4, r9
 800935c:	f7ff f83a 	bl	80083d4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009360:	f7ff fd4a 	bl	8008df8 <xTaskResumeAll>
 8009364:	2800      	cmp	r0, #0
 8009366:	f000 8123 	beq.w	80095b0 <prvTimerTask+0x298>
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
        DaemonTaskMessage_t xMessage = { 0 };
 800936a:	2300      	movs	r3, #0
 800936c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009370:	e9cd 3304 	strd	r3, r3, [sp, #16]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8009374:	2200      	movs	r2, #0
 8009376:	6828      	ldr	r0, [r5, #0]
 8009378:	a902      	add	r1, sp, #8
 800937a:	f7fe fcc9 	bl	8007d10 <xQueueReceive>
 800937e:	2800      	cmp	r0, #0
 8009380:	d0d3      	beq.n	800932a <prvTimerTask+0x12>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009382:	9b02      	ldr	r3, [sp, #8]
                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009384:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009386:	2b00      	cmp	r3, #0
 8009388:	f2c0 80e8 	blt.w	800955c <prvTimerTask+0x244>
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800938c:	f8dd a010 	ldr.w	sl, [sp, #16]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009390:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009394:	b11b      	cbz	r3, 800939e <prvTimerTask+0x86>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009396:	f10a 0004 	add.w	r0, sl, #4
 800939a:	f7fe fa95 	bl	80078c8 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 800939e:	f7ff fd3b 	bl	8008e18 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 80093a2:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 80093a6:	9001      	str	r0, [sp, #4]
        if( xTimeNow < xLastTime )
 80093a8:	4298      	cmp	r0, r3
 80093aa:	d343      	bcc.n	8009434 <prvTimerTask+0x11c>
        xLastTime = xTimeNow;
 80093ac:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
 80093b0:	3b01      	subs	r3, #1
        xLastTime = xTimeNow;
 80093b2:	f8cb 2000 	str.w	r2, [fp]
                switch( xMessage.xMessageID )
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d8dc      	bhi.n	8009374 <prvTimerTask+0x5c>
 80093ba:	e8df f003 	tbb	[pc, r3]
 80093be:	6161      	.short	0x6161
 80093c0:	61c6a5bf 	.word	0x61c6a5bf
 80093c4:	bf61      	.short	0xbf61
 80093c6:	a5          	.byte	0xa5
 80093c7:	00          	.byte	0x00
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	f88a 2028 	strb.w	r2, [sl, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093d0:	4650      	mov	r0, sl
 80093d2:	f8da 3020 	ldr.w	r3, [sl, #32]
 80093d6:	4798      	blx	r3

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	2a00      	cmp	r2, #0
 80093de:	f000 80d7 	beq.w	8009590 <prvTimerTask+0x278>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093e2:	68da      	ldr	r2, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093e4:	f8d2 a00c 	ldr.w	sl, [r2, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093e8:	6814      	ldr	r4, [r2, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093ea:	f10a 0604 	add.w	r6, sl, #4
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7fe fa6a 	bl	80078c8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80093f4:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 80093f8:	0751      	lsls	r1, r2, #29
 80093fa:	d5e5      	bpl.n	80093c8 <prvTimerTask+0xb0>
 80093fc:	e003      	b.n	8009406 <prvTimerTask+0xee>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093fe:	4650      	mov	r0, sl
 8009400:	f8da 2020 	ldr.w	r2, [sl, #32]
 8009404:	4790      	blx	r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009406:	f8da 2018 	ldr.w	r2, [sl, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800940a:	f8ca a010 	str.w	sl, [sl, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800940e:	18a1      	adds	r1, r4, r2
 8009410:	18a4      	adds	r4, r4, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009412:	f8ca 1004 	str.w	r1, [sl, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009416:	d3f2      	bcc.n	80093fe <prvTimerTask+0xe6>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009418:	4631      	mov	r1, r6
 800941a:	f8d8 0000 	ldr.w	r0, [r8]
 800941e:	f7fe fa3b 	bl	8007898 <vListInsert>
        return xProcessTimerNow;
 8009422:	e7d5      	b.n	80093d0 <prvTimerTask+0xb8>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009424:	f021 0101 	bic.w	r1, r1, #1
 8009428:	f889 1028 	strb.w	r1, [r9, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800942c:	4648      	mov	r0, r9
 800942e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009432:	4798      	blx	r3
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	6819      	ldr	r1, [r3, #0]
 8009438:	2900      	cmp	r1, #0
 800943a:	f000 80b3 	beq.w	80095a4 <prvTimerTask+0x28c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800943e:	68d9      	ldr	r1, [r3, #12]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009440:	f8d1 900c 	ldr.w	r9, [r1, #12]
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009444:	680c      	ldr	r4, [r1, #0]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009446:	f109 0604 	add.w	r6, r9, #4
 800944a:	4630      	mov	r0, r6
 800944c:	f7fe fa3c 	bl	80078c8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009450:	f899 1028 	ldrb.w	r1, [r9, #40]	@ 0x28
 8009454:	0748      	lsls	r0, r1, #29
 8009456:	d5e5      	bpl.n	8009424 <prvTimerTask+0x10c>
 8009458:	e003      	b.n	8009462 <prvTimerTask+0x14a>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800945a:	4648      	mov	r0, r9
 800945c:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8009460:	4788      	blx	r1
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009462:	f8d9 1018 	ldr.w	r1, [r9, #24]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009466:	f8c9 9010 	str.w	r9, [r9, #16]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800946a:	1860      	adds	r0, r4, r1
 800946c:	1864      	adds	r4, r4, r1
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800946e:	f8c9 0004 	str.w	r0, [r9, #4]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009472:	d3f2      	bcc.n	800945a <prvTimerTask+0x142>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009474:	4631      	mov	r1, r6
 8009476:	f8d8 0000 	ldr.w	r0, [r8]
 800947a:	f7fe fa0d 	bl	8007898 <vListInsert>
        return xProcessTimerNow;
 800947e:	e7d5      	b.n	800942c <prvTimerTask+0x114>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009480:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009484:	9903      	ldr	r1, [sp, #12]
 8009486:	f8da 4018 	ldr.w	r4, [sl, #24]
        if( xNextExpiryTime <= xTimeNow )
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	190b      	adds	r3, r1, r4
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800948e:	f040 0601 	orr.w	r6, r0, #1
 8009492:	f88a 6028 	strb.w	r6, [sl, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009496:	bf2c      	ite	cs
 8009498:	2601      	movcs	r6, #1
 800949a:	2600      	movcc	r6, #0
        if( xNextExpiryTime <= xTimeNow )
 800949c:	4293      	cmp	r3, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800949e:	f8ca 3004 	str.w	r3, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094a2:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 80094a6:	f200 8086 	bhi.w	80095b6 <prvTimerTask+0x29e>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094aa:	1a51      	subs	r1, r2, r1
 80094ac:	428c      	cmp	r4, r1
 80094ae:	d83e      	bhi.n	800952e <prvTimerTask+0x216>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80094b0:	0741      	lsls	r1, r0, #29
 80094b2:	d412      	bmi.n	80094da <prvTimerTask+0x1c2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80094b4:	f020 0001 	bic.w	r0, r0, #1
 80094b8:	f88a 0028 	strb.w	r0, [sl, #40]	@ 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094bc:	4650      	mov	r0, sl
 80094be:	f8da 3020 	ldr.w	r3, [sl, #32]
 80094c2:	4798      	blx	r3
 80094c4:	e756      	b.n	8009374 <prvTimerTask+0x5c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094c6:	428c      	cmp	r4, r1
 80094c8:	f200 80c4 	bhi.w	8009654 <prvTimerTask+0x33c>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094cc:	f8da 3020 	ldr.w	r3, [sl, #32]
 80094d0:	4650      	mov	r0, sl
 80094d2:	4798      	blx	r3
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80094d4:	4633      	mov	r3, r6
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80094d6:	f8da 4018 	ldr.w	r4, [sl, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	18e6      	adds	r6, r4, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094de:	bf2c      	ite	cs
 80094e0:	2001      	movcs	r0, #1
 80094e2:	2000      	movcc	r0, #0
        if( xNextExpiryTime <= xTimeNow )
 80094e4:	42b2      	cmp	r2, r6
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80094e6:	eba2 0103 	sub.w	r1, r2, r3
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094ea:	f8ca 6004 	str.w	r6, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094ee:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 80094f2:	d2e8      	bcs.n	80094c6 <prvTimerTask+0x1ae>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d201      	bcs.n	80094fc <prvTimerTask+0x1e4>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d0e7      	beq.n	80094cc <prvTimerTask+0x1b4>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094fc:	6838      	ldr	r0, [r7, #0]
 80094fe:	f10a 0104 	add.w	r1, sl, #4
 8009502:	f7fe f9c9 	bl	8007898 <vListInsert>
        return xProcessTimerNow;
 8009506:	e7d9      	b.n	80094bc <prvTimerTask+0x1a4>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009508:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800950c:	9b03      	ldr	r3, [sp, #12]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800950e:	f041 0101 	orr.w	r1, r1, #1
 8009512:	f88a 1028 	strb.w	r1, [sl, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009516:	f8ca 3018 	str.w	r3, [sl, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 80a1 	beq.w	8009662 <prvTimerTask+0x34a>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009520:	4413      	add	r3, r2
        if( xNextExpiryTime <= xTimeNow )
 8009522:	4293      	cmp	r3, r2
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009524:	f8ca 3004 	str.w	r3, [sl, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009528:	f8ca a010 	str.w	sl, [sl, #16]
        if( xNextExpiryTime <= xTimeNow )
 800952c:	d848      	bhi.n	80095c0 <prvTimerTask+0x2a8>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800952e:	f8d8 0000 	ldr.w	r0, [r8]
 8009532:	f10a 0104 	add.w	r1, sl, #4
 8009536:	f7fe f9af 	bl	8007898 <vListInsert>
 800953a:	e71b      	b.n	8009374 <prvTimerTask+0x5c>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800953c:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 8009540:	f023 0301 	bic.w	r3, r3, #1
 8009544:	f88a 3028 	strb.w	r3, [sl, #40]	@ 0x28
                        break;
 8009548:	e714      	b.n	8009374 <prvTimerTask+0x5c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800954a:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 800954e:	079a      	lsls	r2, r3, #30
 8009550:	d576      	bpl.n	8009640 <prvTimerTask+0x328>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	f88a 3028 	strb.w	r3, [sl, #40]	@ 0x28
 800955a:	e70b      	b.n	8009374 <prvTimerTask+0x5c>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	9905      	ldr	r1, [sp, #20]
 8009560:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f6ff af05 	blt.w	8009374 <prvTimerTask+0x5c>
 800956a:	e70f      	b.n	800938c <prvTimerTask+0x74>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	681c      	ldr	r4, [r3, #0]
        vTaskSuspendAll();
 8009570:	f7ff fc3a 	bl	8008de8 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 8009574:	f7ff fc50 	bl	8008e18 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8009578:	f8db 3000 	ldr.w	r3, [fp]
        xTimeNow = xTaskGetTickCount();
 800957c:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800957e:	4298      	cmp	r0, r3
 8009580:	f4ff af2a 	bcc.w	80093d8 <prvTimerTask+0xc0>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009584:	4284      	cmp	r4, r0
        xLastTime = xTimeNow;
 8009586:	f8cb 0000 	str.w	r0, [fp]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800958a:	d91f      	bls.n	80095cc <prvTimerTask+0x2b4>
 800958c:	2200      	movs	r2, #0
 800958e:	e6e2      	b.n	8009356 <prvTimerTask+0x3e>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 8009590:	f8d8 2000 	ldr.w	r2, [r8]
        xLastTime = xTimeNow;
 8009594:	f8cb 9000 	str.w	r9, [fp]
        pxCurrentTimerList = pxOverflowTimerList;
 8009598:	603a      	str	r2, [r7, #0]
        pxOverflowTimerList = pxTemp;
 800959a:	f8c8 3000 	str.w	r3, [r8]
                ( void ) xTaskResumeAll();
 800959e:	f7ff fc2b 	bl	8008df8 <xTaskResumeAll>
 80095a2:	e6e2      	b.n	800936a <prvTimerTask+0x52>
        pxCurrentTimerList = pxOverflowTimerList;
 80095a4:	f8d8 1000 	ldr.w	r1, [r8]
        pxOverflowTimerList = pxTemp;
 80095a8:	f8c8 3000 	str.w	r3, [r8]
        pxCurrentTimerList = pxOverflowTimerList;
 80095ac:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 80095ae:	e6fd      	b.n	80093ac <prvTimerTask+0x94>
                        taskYIELD_WITHIN_API();
 80095b0:	f000 f8ce 	bl	8009750 <vPortYield>
 80095b4:	e6d9      	b.n	800936a <prvTimerTask+0x52>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095b6:	4291      	cmp	r1, r2
 80095b8:	d902      	bls.n	80095c0 <prvTimerTask+0x2a8>
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	f43f af78 	beq.w	80094b0 <prvTimerTask+0x198>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095c0:	6838      	ldr	r0, [r7, #0]
 80095c2:	f10a 0104 	add.w	r1, sl, #4
 80095c6:	f7fe f967 	bl	8007898 <vListInsert>
 80095ca:	e6d3      	b.n	8009374 <prvTimerTask+0x5c>
                    ( void ) xTaskResumeAll();
 80095cc:	f7ff fc14 	bl	8008df8 <xTaskResumeAll>
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	68de      	ldr	r6, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095d6:	1d33      	adds	r3, r6, #4
 80095d8:	4618      	mov	r0, r3
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	f7fe f974 	bl	80078c8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80095e0:	f896 2028 	ldrb.w	r2, [r6, #40]	@ 0x28
 80095e4:	0753      	lsls	r3, r2, #29
 80095e6:	d415      	bmi.n	8009614 <prvTimerTask+0x2fc>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	f886 2028 	strb.w	r2, [r6, #40]	@ 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095f0:	4630      	mov	r0, r6
 80095f2:	6a33      	ldr	r3, [r6, #32]
 80095f4:	4798      	blx	r3
    }
 80095f6:	e6b8      	b.n	800936a <prvTimerTask+0x52>
 80095f8:	20061f70 	.word	0x20061f70
 80095fc:	20061f68 	.word	0x20061f68
 8009600:	20061f60 	.word	0x20061f60
 8009604:	20061f6c 	.word	0x20061f6c
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009608:	4281      	cmp	r1, r0
 800960a:	d81d      	bhi.n	8009648 <prvTimerTask+0x330>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800960c:	4630      	mov	r0, r6
 800960e:	6a31      	ldr	r1, [r6, #32]
 8009610:	4788      	blx	r1
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009612:	4654      	mov	r4, sl
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009614:	69b1      	ldr	r1, [r6, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009616:	eba9 0004 	sub.w	r0, r9, r4
 800961a:	eb14 0a01 	adds.w	sl, r4, r1
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800961e:	bf2c      	ite	cs
 8009620:	2301      	movcs	r3, #1
 8009622:	2300      	movcc	r3, #0
        if( xNextExpiryTime <= xTimeNow )
 8009624:	45d1      	cmp	r9, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009626:	f8c6 a004 	str.w	sl, [r6, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800962a:	6136      	str	r6, [r6, #16]
        if( xNextExpiryTime <= xTimeNow )
 800962c:	d2ec      	bcs.n	8009608 <prvTimerTask+0x2f0>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800962e:	45a1      	cmp	r9, r4
 8009630:	d201      	bcs.n	8009636 <prvTimerTask+0x31e>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0ea      	beq.n	800960c <prvTimerTask+0x2f4>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009636:	9901      	ldr	r1, [sp, #4]
 8009638:	6838      	ldr	r0, [r7, #0]
 800963a:	f7fe f92d 	bl	8007898 <vListInsert>
        return xProcessTimerNow;
 800963e:	e7d7      	b.n	80095f0 <prvTimerTask+0x2d8>
                                vPortFree( pxTimer );
 8009640:	4650      	mov	r0, sl
 8009642:	f000 fac5 	bl	8009bd0 <vPortFree>
 8009646:	e695      	b.n	8009374 <prvTimerTask+0x5c>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009648:	9901      	ldr	r1, [sp, #4]
 800964a:	f8d8 0000 	ldr.w	r0, [r8]
 800964e:	f7fe f923 	bl	8007898 <vListInsert>
        return xProcessTimerNow;
 8009652:	e7cd      	b.n	80095f0 <prvTimerTask+0x2d8>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009654:	f8d8 0000 	ldr.w	r0, [r8]
 8009658:	f10a 0104 	add.w	r1, sl, #4
 800965c:	f7fe f91c 	bl	8007898 <vListInsert>
        return xProcessTimerNow;
 8009660:	e72c      	b.n	80094bc <prvTimerTask+0x1a4>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009662:	f000 f9b3 	bl	80099cc <ulSetInterruptMask>
 8009666:	e7fe      	b.n	8009666 <prvTimerTask+0x34e>

08009668 <xTimerCreateTimerTask>:
    {
 8009668:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 800966a:	4c19      	ldr	r4, [pc, #100]	@ (80096d0 <xTimerCreateTimerTask+0x68>)
    {
 800966c:	b083      	sub	sp, #12
        taskENTER_CRITICAL();
 800966e:	f000 f87b 	bl	8009768 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8009672:	6825      	ldr	r5, [r4, #0]
 8009674:	b1a5      	cbz	r5, 80096a0 <xTimerCreateTimerTask+0x38>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009676:	f000 f885 	bl	8009784 <vPortExitCritical>
        if( xTimerQueue != NULL )
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	b15b      	cbz	r3, 8009696 <xTimerCreateTimerTask+0x2e>
                    xReturn = xTaskCreate( prvTimerTask,
 800967e:	2402      	movs	r4, #2
 8009680:	4814      	ldr	r0, [pc, #80]	@ (80096d4 <xTimerCreateTimerTask+0x6c>)
 8009682:	2300      	movs	r3, #0
 8009684:	9001      	str	r0, [sp, #4]
 8009686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800968a:	4913      	ldr	r1, [pc, #76]	@ (80096d8 <xTimerCreateTimerTask+0x70>)
 800968c:	4813      	ldr	r0, [pc, #76]	@ (80096dc <xTimerCreateTimerTask+0x74>)
 800968e:	9400      	str	r4, [sp, #0]
 8009690:	f7ff f9ac 	bl	80089ec <xTaskCreate>
        configASSERT( xReturn );
 8009694:	b910      	cbnz	r0, 800969c <xTimerCreateTimerTask+0x34>
 8009696:	f000 f999 	bl	80099cc <ulSetInterruptMask>
 800969a:	e7fe      	b.n	800969a <xTimerCreateTimerTask+0x32>
    }
 800969c:	b003      	add	sp, #12
 800969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                vListInitialise( &xActiveTimerList1 );
 80096a0:	4e0f      	ldr	r6, [pc, #60]	@ (80096e0 <xTimerCreateTimerTask+0x78>)
                vListInitialise( &xActiveTimerList2 );
 80096a2:	4f10      	ldr	r7, [pc, #64]	@ (80096e4 <xTimerCreateTimerTask+0x7c>)
                vListInitialise( &xActiveTimerList1 );
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7fe f8d9 	bl	800785c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7fe f8d6 	bl	800785c <vListInitialise>
                pxOverflowTimerList = &xActiveTimerList2;
 80096b0:	4a0d      	ldr	r2, [pc, #52]	@ (80096e8 <xTimerCreateTimerTask+0x80>)
                pxCurrentTimerList = &xActiveTimerList1;
 80096b2:	4b0e      	ldr	r3, [pc, #56]	@ (80096ec <xTimerCreateTimerTask+0x84>)
                pxOverflowTimerList = &xActiveTimerList2;
 80096b4:	6017      	str	r7, [r2, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80096b6:	2110      	movs	r1, #16
 80096b8:	462a      	mov	r2, r5
 80096ba:	200a      	movs	r0, #10
                pxCurrentTimerList = &xActiveTimerList1;
 80096bc:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80096be:	f7fe f953 	bl	8007968 <xQueueGenericCreate>
 80096c2:	6020      	str	r0, [r4, #0]
                    if( xTimerQueue != NULL )
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d0d6      	beq.n	8009676 <xTimerCreateTimerTask+0xe>
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096c8:	4909      	ldr	r1, [pc, #36]	@ (80096f0 <xTimerCreateTimerTask+0x88>)
 80096ca:	f7fe fdf1 	bl	80082b0 <vQueueAddToRegistry>
 80096ce:	e7d2      	b.n	8009676 <xTimerCreateTimerTask+0xe>
 80096d0:	20061f68 	.word	0x20061f68
 80096d4:	20061f64 	.word	0x20061f64
 80096d8:	0800f97c 	.word	0x0800f97c
 80096dc:	08009319 	.word	0x08009319
 80096e0:	20061f88 	.word	0x20061f88
 80096e4:	20061f74 	.word	0x20061f74
 80096e8:	20061f6c 	.word	0x20061f6c
 80096ec:	20061f70 	.word	0x20061f70
 80096f0:	0800f974 	.word	0x0800f974

080096f4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 80096f4:	2200      	movs	r2, #0
{
 80096f6:	b500      	push	{lr}
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 80096f8:	4b08      	ldr	r3, [pc, #32]	@ (800971c <prvTaskExitError+0x28>)
{
 80096fa:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0UL;
 80096fc:	9201      	str	r2, [sp, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3301      	adds	r3, #1
 8009702:	d002      	beq.n	800970a <prvTaskExitError+0x16>
 8009704:	f000 f962 	bl	80099cc <ulSetInterruptMask>
 8009708:	e7fe      	b.n	8009708 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800970a:	f000 f95f 	bl	80099cc <ulSetInterruptMask>

    while( ulDummy == 0 )
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0fc      	beq.n	800970e <prvTaskExitError+0x1a>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8009714:	b003      	add	sp, #12
 8009716:	f85d fb04 	ldr.w	pc, [sp], #4
 800971a:	bf00      	nop
 800971c:	20000f78 	.word	0x20000f78

08009720 <vPortSetupTimerInterrupt>:
{
 8009720:	b430      	push	{r4, r5}
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 8009722:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009726:	2504      	movs	r5, #4
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009728:	2400      	movs	r4, #0
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800972a:	2007      	movs	r0, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800972c:	4b06      	ldr	r3, [pc, #24]	@ (8009748 <vPortSetupTimerInterrupt+0x28>)
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 800972e:	6115      	str	r5, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009730:	6194      	str	r4, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4905      	ldr	r1, [pc, #20]	@ (800974c <vPortSetupTimerInterrupt+0x2c>)
}
 8009736:	bc30      	pop	{r4, r5}
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009738:	fba1 1303 	umull	r1, r3, r1, r3
 800973c:	099b      	lsrs	r3, r3, #6
 800973e:	3b01      	subs	r3, #1
 8009740:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009742:	6110      	str	r0, [r2, #16]
}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000000 	.word	0x20000000
 800974c:	10624dd3 	.word	0x10624dd3

08009750 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009750:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009758:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800975c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009760:	f3bf 8f6f 	isb	sy
}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop

08009768 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8009768:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
 800976a:	f000 f92f 	bl	80099cc <ulSetInterruptMask>
    ulCriticalNesting++;
 800976e:	4a04      	ldr	r2, [pc, #16]	@ (8009780 <vPortEnterCritical+0x18>)
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8009776:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800977a:	f3bf 8f6f 	isb	sy
}
 800977e:	bd08      	pop	{r3, pc}
 8009780:	20000f78 	.word	0x20000f78

08009784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8009784:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
 8009786:	4b08      	ldr	r3, [pc, #32]	@ (80097a8 <vPortExitCritical+0x24>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	b14a      	cbz	r2, 80097a0 <vPortExitCritical+0x1c>
    ulCriticalNesting--;
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	3a01      	subs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	b100      	cbz	r0, 8009798 <vPortExitCritical+0x14>
    {
        portENABLE_INTERRUPTS();
    }
}
 8009796:	bd08      	pop	{r3, pc}
 8009798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
 800979c:	f000 b922 	b.w	80099e4 <vClearInterruptMask>
    configASSERT( ulCriticalNesting );
 80097a0:	f000 f914 	bl	80099cc <ulSetInterruptMask>
 80097a4:	e7fe      	b.n	80097a4 <vPortExitCritical+0x20>
 80097a6:	bf00      	nop
 80097a8:	20000f78 	.word	0x20000f78

080097ac <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80097ac:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ae:	f000 f90d 	bl	80099cc <ulSetInterruptMask>
 80097b2:	4604      	mov	r4, r0
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80097b4:	f7ff fb36 	bl	8008e24 <xTaskIncrementTick>
 80097b8:	b128      	cbz	r0, 80097c6 <SysTick_Handler+0x1a>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80097c6:	4620      	mov	r0, r4
}
 80097c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80097cc:	f000 b90a 	b.w	80099e4 <vClearInterruptMask>

080097d0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80097d0:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80097d2:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
 80097d4:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80097d8:	2b66      	cmp	r3, #102	@ 0x66
 80097da:	d002      	beq.n	80097e2 <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 80097dc:	f000 f8f6 	bl	80099cc <ulSetInterruptMask>
 80097e0:	e7fe      	b.n	80097e0 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 80097e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097e6:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
 80097ea:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80097ee:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80097f2:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
 80097f6:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80097fa:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34
    }
}
 80097fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
 8009802:	f000 b8bd 	b.w	8009980 <vRestoreContextOfFirstTask>
 8009806:	bf00      	nop

08009808 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800980c:	f04f 3e11 	mov.w	lr, #286331153	@ 0x11111111
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8009810:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8009814:	e940 e309 	strd	lr, r3, [r0, #-36]	@ 0x24
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8009818:	f04f 3307 	mov.w	r3, #117901063	@ 0x7070707
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800981c:	f840 4c04 	str.w	r4, [r0, #-4]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8009820:	4c16      	ldr	r4, [pc, #88]	@ (800987c <pxPortInitialiseStack+0x74>)
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8009822:	f840 3c34 	str.w	r3, [r0, #-52]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8009826:	e940 4203 	strd	r4, r2, [r0, #-12]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800982a:	f04f 3305 	mov.w	r3, #84215045	@ 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800982e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8009832:	f04f 3b12 	mov.w	fp, #303174162	@ 0x12121212
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8009836:	e940 320f 	strd	r3, r2, [r0, #-60]	@ 0x3c
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800983a:	f04f 3a03 	mov.w	sl, #50529027	@ 0x3030303
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800983e:	f04f 3902 	mov.w	r9, #33686018	@ 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8009842:	f04f 3801 	mov.w	r8, #16843009	@ 0x1010101
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8009846:	f04f 3710 	mov.w	r7, #269488144	@ 0x10101010
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800984a:	f04f 3609 	mov.w	r6, #151587081	@ 0x9090909
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800984e:	f04f 3508 	mov.w	r5, #134744072	@ 0x8080808
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8009852:	f04f 3404 	mov.w	r4, #67372036	@ 0x4040404
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8009856:	f06f 0343 	mvn.w	r3, #67	@ 0x43
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800985a:	e940 ab05 	strd	sl, fp, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800985e:	e940 8907 	strd	r8, r9, [r0, #-28]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8009862:	e940 670b 	strd	r6, r7, [r0, #-44]	@ 0x2c
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8009866:	f840 5c30 	str.w	r5, [r0, #-48]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800986a:	f840 4c40 	str.w	r4, [r0, #-64]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800986e:	f840 3c44 	str.w	r3, [r0, #-68]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 8009872:	f840 1d48 	str.w	r1, [r0, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	bf00      	nop
 800987c:	080096f5 	.word	0x080096f5

08009880 <xPortStartScheduler>:
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8009880:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8009884:	b530      	push	{r4, r5, lr}
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8009886:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 800988a:	4938      	ldr	r1, [pc, #224]	@ (800996c <xPortStartScheduler+0xec>)
 800988c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
{
 800988e:	b085      	sub	sp, #20
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8009890:	4288      	cmp	r0, r1
 8009892:	d002      	beq.n	800989a <xPortStartScheduler+0x1a>
 8009894:	f000 f89a 	bl	80099cc <ulSetInterruptMask>
 8009898:	e7fe      	b.n	8009898 <xPortStartScheduler+0x18>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 800989a:	4935      	ldr	r1, [pc, #212]	@ (8009970 <xPortStartScheduler+0xf0>)
 800989c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800989e:	428a      	cmp	r2, r1
 80098a0:	d002      	beq.n	80098a8 <xPortStartScheduler+0x28>
 80098a2:	f000 f893 	bl	80099cc <ulSetInterruptMask>
 80098a6:	e7fe      	b.n	80098a6 <xPortStartScheduler+0x26>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 80098a8:	2000      	movs	r0, #0
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 80098aa:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        volatile uint32_t ulImplementedPrioBits = 0;
 80098ae:	9002      	str	r0, [sp, #8]
        portNVIC_SHPR2_REG = 0xFF000000;
 80098b0:	f8c3 1d1c 	str.w	r1, [r3, #3356]	@ 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 80098b4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009974 <xPortStartScheduler+0xf4>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 80098ba:	0e1b      	lsrs	r3, r3, #24
 80098bc:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098c8:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d03e      	beq.n	800994c <xPortStartScheduler+0xcc>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 80098ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098d2:	43db      	mvns	r3, r3
 80098d4:	f013 0f50 	tst.w	r3, #80	@ 0x50
 80098d8:	d009      	beq.n	80098ee <xPortStartScheduler+0x6e>
 80098da:	e03a      	b.n	8009952 <xPortStartScheduler+0xd2>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	3301      	adds	r3, #1
 80098e0:	9302      	str	r3, [sp, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098f2:	061b      	lsls	r3, r3, #24
 80098f4:	d4f2      	bmi.n	80098dc <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d035      	beq.n	8009968 <xPortStartScheduler+0xe8>
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80098fc:	9b02      	ldr	r3, [sp, #8]
 80098fe:	f1c3 0307 	rsb	r3, r3, #7
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009902:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009908:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    portNVIC_SHPR2_REG = 0;
 800990c:	2400      	movs	r4, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800990e:	491a      	ldr	r1, [pc, #104]	@ (8009978 <xPortStartScheduler+0xf8>)
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8009910:	4d1a      	ldr	r5, [pc, #104]	@ (800997c <xPortStartScheduler+0xfc>)
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009912:	600b      	str	r3, [r1, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009914:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	@ 0xd20
 8009918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800991c:	f8c2 3d20 	str.w	r3, [r2, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009920:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	@ 0xd20
 8009924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009928:	f8c2 3d20 	str.w	r3, [r2, #3360]	@ 0xd20
    portNVIC_SHPR2_REG = 0;
 800992c:	f8c2 4d1c 	str.w	r4, [r2, #3356]	@ 0xd1c
    vPortSetupTimerInterrupt();
 8009930:	f7ff fef6 	bl	8009720 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
 8009934:	602c      	str	r4, [r5, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 8009936:	f000 f839 	bl	80099ac <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800993a:	f7ff fa83 	bl	8008e44 <vTaskSwitchContext>
    volatile uint32_t ulDummy = 0UL;
 800993e:	9403      	str	r4, [sp, #12]
    configASSERT( ulCriticalNesting == ~0UL );
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	d008      	beq.n	8009958 <xPortStartScheduler+0xd8>
 8009946:	f000 f841 	bl	80099cc <ulSetInterruptMask>
 800994a:	e7fe      	b.n	800994a <xPortStartScheduler+0xca>
        configASSERT( ucMaxSysCallPriority );
 800994c:	f000 f83e 	bl	80099cc <ulSetInterruptMask>
 8009950:	e7fe      	b.n	8009950 <xPortStartScheduler+0xd0>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 8009952:	f000 f83b 	bl	80099cc <ulSetInterruptMask>
 8009956:	e7fe      	b.n	8009956 <xPortStartScheduler+0xd6>
    portDISABLE_INTERRUPTS();
 8009958:	f000 f838 	bl	80099cc <ulSetInterruptMask>
    while( ulDummy == 0 )
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0fc      	beq.n	800995c <xPortStartScheduler+0xdc>
    prvTaskExitError();

    /* Should not get here. */
    return 0;
}
 8009962:	2000      	movs	r0, #0
 8009964:	b005      	add	sp, #20
 8009966:	bd30      	pop	{r4, r5, pc}
 8009968:	2300      	movs	r3, #0
 800996a:	e7cd      	b.n	8009908 <xPortStartScheduler+0x88>
 800996c:	08009a51 	.word	0x08009a51
 8009970:	080099f5 	.word	0x080099f5
 8009974:	20061fa0 	.word	0x20061fa0
 8009978:	20061f9c 	.word	0x20061f9c
 800997c:	20000f78 	.word	0x20000f78

08009980 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009980:	4a09      	ldr	r2, [pc, #36]	@ (80099a8 <vRestoreContextOfFirstTask+0x28>)
 8009982:	6811      	ldr	r1, [r2, #0]
 8009984:	6808      	ldr	r0, [r1, #0]
 8009986:	c806      	ldmia	r0!, {r1, r2}
 8009988:	f381 880b 	msr	PSPLIM, r1
 800998c:	2102      	movs	r1, #2
 800998e:	f381 8814 	msr	CONTROL, r1
 8009992:	3020      	adds	r0, #32
 8009994:	f380 8809 	msr	PSP, r0
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f04f 0000 	mov.w	r0, #0
 80099a0:	f380 8811 	msr	BASEPRI, r0
 80099a4:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 80099a6:	0000      	.short	0x0000
 80099a8:	20061f5c 	.word	0x20061f5c

080099ac <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80099ac:	4806      	ldr	r0, [pc, #24]	@ (80099c8 <vStartFirstTask+0x1c>)
 80099ae:	6800      	ldr	r0, [r0, #0]
 80099b0:	6800      	ldr	r0, [r0, #0]
 80099b2:	f380 8808 	msr	MSP, r0
 80099b6:	b662      	cpsie	i
 80099b8:	b661      	cpsie	f
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	df66      	svc	102	@ 0x66
 80099c4:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80099c6:	0000      	.short	0x0000
 80099c8:	e000ed08 	.word	0xe000ed08

080099cc <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80099cc:	f3ef 8011 	mrs	r0, BASEPRI
 80099d0:	f04f 0150 	mov.w	r1, #80	@ 0x50
 80099d4:	f381 8811 	msr	BASEPRI, r1
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80099e4:	f380 8811 	msr	BASEPRI, r0
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop

080099f4 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80099f4:	f3ef 8009 	mrs	r0, PSP
 80099f8:	f01e 0f10 	tst.w	lr, #16
 80099fc:	bf08      	it	eq
 80099fe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a02:	f3ef 820b 	mrs	r2, PSPLIM
 8009a06:	4673      	mov	r3, lr
 8009a08:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8009a4c <PendSV_Handler+0x58>)
 8009a0e:	6811      	ldr	r1, [r2, #0]
 8009a10:	6008      	str	r0, [r1, #0]
 8009a12:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a16:	f380 8811 	msr	BASEPRI, r0
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f7ff fa0f 	bl	8008e44 <vTaskSwitchContext>
 8009a26:	f04f 0000 	mov.w	r0, #0
 8009a2a:	f380 8811 	msr	BASEPRI, r0
 8009a2e:	4a07      	ldr	r2, [pc, #28]	@ (8009a4c <PendSV_Handler+0x58>)
 8009a30:	6811      	ldr	r1, [r2, #0]
 8009a32:	6808      	ldr	r0, [r1, #0]
 8009a34:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009a38:	f013 0f10 	tst.w	r3, #16
 8009a3c:	bf08      	it	eq
 8009a3e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a42:	f382 880b 	msr	PSPLIM, r2
 8009a46:	f380 8809 	msr	PSP, r0
 8009a4a:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8009a4c:	20061f5c 	.word	0x20061f5c

08009a50 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009a50:	f01e 0f04 	tst.w	lr, #4
 8009a54:	bf0c      	ite	eq
 8009a56:	f3ef 8008 	mrseq	r0, MSP
 8009a5a:	f3ef 8009 	mrsne	r0, PSP
 8009a5e:	4901      	ldr	r1, [pc, #4]	@ (8009a64 <SVC_Handler+0x14>)
 8009a60:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 8009a62:	0000      	.short	0x0000
 8009a64:	080097d1 	.word	0x080097d1

08009a68 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8009a6a:	1e43      	subs	r3, r0, #1
 8009a6c:	330a      	adds	r3, #10
 8009a6e:	d811      	bhi.n	8009a94 <pvPortMalloc+0x2c>
        {
            xWantedSize += xHeapStructSize;

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a70:	f010 0307 	ands.w	r3, r0, #7
            xWantedSize += xHeapStructSize;
 8009a74:	f100 0408 	add.w	r4, r0, #8
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a78:	d04f      	beq.n	8009b1a <pvPortMalloc+0xb2>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009a7a:	f1a3 0209 	sub.w	r2, r3, #9
 8009a7e:	42a2      	cmp	r2, r4
 8009a80:	d308      	bcc.n	8009a94 <pvPortMalloc+0x2c>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8009a82:	3010      	adds	r0, #16
 8009a84:	1ac4      	subs	r4, r0, r3
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8009a86:	f7ff f9af 	bl	8008de8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009a8a:	4a49      	ldr	r2, [pc, #292]	@ (8009bb0 <pvPortMalloc+0x148>)

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009a8c:	4626      	mov	r6, r4
        if( pxEnd == NULL )
 8009a8e:	6815      	ldr	r5, [r2, #0]
 8009a90:	bb25      	cbnz	r5, 8009adc <pvPortMalloc+0x74>
 8009a92:	e00b      	b.n	8009aac <pvPortMalloc+0x44>
    vTaskSuspendAll();
 8009a94:	f7ff f9a8 	bl	8008de8 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8009a98:	4a45      	ldr	r2, [pc, #276]	@ (8009bb0 <pvPortMalloc+0x148>)
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	b123      	cbz	r3, 8009aa8 <pvPortMalloc+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009a9e:	f7ff f9ab 	bl	8008df8 <xTaskResumeAll>
    void * pvReturn = NULL;
 8009aa2:	2500      	movs	r5, #0
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	4634      	mov	r4, r6
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009aac:	4b41      	ldr	r3, [pc, #260]	@ (8009bb4 <pvPortMalloc+0x14c>)
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;
 8009aae:	2000      	movs	r0, #0
    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ab0:	075d      	lsls	r5, r3, #29
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ab2:	bf1c      	itt	ne
 8009ab4:	3307      	addne	r3, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009ab6:	f023 0307 	bicne.w	r3, r3, #7
 8009aba:	4619      	mov	r1, r3

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8009abc:	4d3e      	ldr	r5, [pc, #248]	@ (8009bb8 <pvPortMalloc+0x150>)
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009abe:	f025 0507 	bic.w	r5, r5, #7
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8009ac2:	6015      	str	r5, [r2, #0]
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8009ac4:	4a3d      	ldr	r2, [pc, #244]	@ (8009bbc <pvPortMalloc+0x154>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8009ac6:	1aeb      	subs	r3, r5, r3
    xStart.xBlockSize = ( size_t ) 0;
 8009ac8:	e9c2 1000 	strd	r1, r0, [r2]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009acc:	4a3c      	ldr	r2, [pc, #240]	@ (8009bc0 <pvPortMalloc+0x158>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8009ace:	e9c5 0000 	strd	r0, r0, [r5]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ad2:	6013      	str	r3, [r2, #0]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009ad4:	e9c1 5300 	strd	r5, r3, [r1]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ad8:	4a3a      	ldr	r2, [pc, #232]	@ (8009bc4 <pvPortMalloc+0x15c>)
 8009ada:	6013      	str	r3, [r2, #0]
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	dbde      	blt.n	8009a9e <pvPortMalloc+0x36>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ae0:	2c00      	cmp	r4, #0
 8009ae2:	d0dc      	beq.n	8009a9e <pvPortMalloc+0x36>
 8009ae4:	4f37      	ldr	r7, [pc, #220]	@ (8009bc4 <pvPortMalloc+0x15c>)
 8009ae6:	683e      	ldr	r6, [r7, #0]
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d3d8      	bcc.n	8009a9e <pvPortMalloc+0x36>
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8009aec:	4a33      	ldr	r2, [pc, #204]	@ (8009bbc <pvPortMalloc+0x154>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009aee:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <pvPortMalloc+0x14c>)
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8009af0:	6811      	ldr	r1, [r2, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009af2:	4299      	cmp	r1, r3
 8009af4:	d30e      	bcc.n	8009b14 <pvPortMalloc+0xac>
 8009af6:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8009bcc <pvPortMalloc+0x164>
 8009afa:	4571      	cmp	r1, lr
 8009afc:	d80a      	bhi.n	8009b14 <pvPortMalloc+0xac>
                pxPreviousBlock = &xStart;
 8009afe:	4694      	mov	ip, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8009b00:	6848      	ldr	r0, [r1, #4]
 8009b02:	42a0      	cmp	r0, r4
 8009b04:	d218      	bcs.n	8009b38 <pvPortMalloc+0xd0>
 8009b06:	680a      	ldr	r2, [r1, #0]
 8009b08:	b1b2      	cbz	r2, 8009b38 <pvPortMalloc+0xd0>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d20f      	bcs.n	8009b2e <pvPortMalloc+0xc6>
 8009b0e:	f7ff ff5d 	bl	80099cc <ulSetInterruptMask>
 8009b12:	e7fe      	b.n	8009b12 <pvPortMalloc+0xaa>
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009b14:	f7ff ff5a 	bl	80099cc <ulSetInterruptMask>
 8009b18:	e7fe      	b.n	8009b18 <pvPortMalloc+0xb0>
    vTaskSuspendAll();
 8009b1a:	f7ff f965 	bl	8008de8 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8009b1e:	4a24      	ldr	r2, [pc, #144]	@ (8009bb0 <pvPortMalloc+0x148>)
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009b20:	4626      	mov	r6, r4
        if( pxEnd == NULL )
 8009b22:	6815      	ldr	r5, [r2, #0]
 8009b24:	2d00      	cmp	r5, #0
 8009b26:	d0c1      	beq.n	8009aac <pvPortMalloc+0x44>
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009b28:	2c00      	cmp	r4, #0
 8009b2a:	dadb      	bge.n	8009ae4 <pvPortMalloc+0x7c>
 8009b2c:	e7b7      	b.n	8009a9e <pvPortMalloc+0x36>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8009b2e:	4572      	cmp	r2, lr
 8009b30:	d8ed      	bhi.n	8009b0e <pvPortMalloc+0xa6>
                    pxPreviousBlock = pxBlock;
 8009b32:	468c      	mov	ip, r1
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8009b34:	4611      	mov	r1, r2
 8009b36:	e7e3      	b.n	8009b00 <pvPortMalloc+0x98>
                if( pxBlock != pxEnd )
 8009b38:	42a9      	cmp	r1, r5
 8009b3a:	d0b0      	beq.n	8009a9e <pvPortMalloc+0x36>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8009b3c:	f101 0508 	add.w	r5, r1, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8009b40:	429d      	cmp	r5, r3
 8009b42:	d32b      	bcc.n	8009b9c <pvPortMalloc+0x134>
 8009b44:	4575      	cmp	r5, lr
 8009b46:	d829      	bhi.n	8009b9c <pvPortMalloc+0x134>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b48:	680a      	ldr	r2, [r1, #0]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009b4a:	42a0      	cmp	r0, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b4c:	f8cc 2000 	str.w	r2, [ip]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009b50:	d327      	bcc.n	8009ba2 <pvPortMalloc+0x13a>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b52:	eba0 0e04 	sub.w	lr, r0, r4
 8009b56:	f1be 0f10 	cmp.w	lr, #16
 8009b5a:	d908      	bls.n	8009b6e <pvPortMalloc+0x106>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b5c:	190b      	adds	r3, r1, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b5e:	0758      	lsls	r0, r3, #29
 8009b60:	d122      	bne.n	8009ba8 <pvPortMalloc+0x140>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b62:	4620      	mov	r0, r4
 8009b64:	f8c3 e004 	str.w	lr, [r3, #4]
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8009b68:	510a      	str	r2, [r1, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8009b6a:	f8cc 3000 	str.w	r3, [ip]
                    pxBlock->pxNextFreeBlock = NULL;
 8009b6e:	2400      	movs	r4, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b70:	4b13      	ldr	r3, [pc, #76]	@ (8009bc0 <pvPortMalloc+0x158>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b72:	1a36      	subs	r6, r6, r0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b74:	681a      	ldr	r2, [r3, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009b76:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b7a:	4296      	cmp	r6, r2
                    xNumberOfSuccessfulAllocations++;
 8009b7c:	4a12      	ldr	r2, [pc, #72]	@ (8009bc8 <pvPortMalloc+0x160>)
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b7e:	bf38      	it	cc
 8009b80:	601e      	strcc	r6, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009b82:	6813      	ldr	r3, [r2, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 8009b84:	6048      	str	r0, [r1, #4]
                    xNumberOfSuccessfulAllocations++;
 8009b86:	3301      	adds	r3, #1
                    pxBlock->pxNextFreeBlock = NULL;
 8009b88:	600c      	str	r4, [r1, #0]
                    xNumberOfSuccessfulAllocations++;
 8009b8a:	6013      	str	r3, [r2, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b8c:	603e      	str	r6, [r7, #0]
    ( void ) xTaskResumeAll();
 8009b8e:	f7ff f933 	bl	8008df8 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b92:	076b      	lsls	r3, r5, #29
 8009b94:	d086      	beq.n	8009aa4 <pvPortMalloc+0x3c>
 8009b96:	f7ff ff19 	bl	80099cc <ulSetInterruptMask>
 8009b9a:	e7fe      	b.n	8009b9a <pvPortMalloc+0x132>
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8009b9c:	f7ff ff16 	bl	80099cc <ulSetInterruptMask>
 8009ba0:	e7fe      	b.n	8009ba0 <pvPortMalloc+0x138>
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8009ba2:	f7ff ff13 	bl	80099cc <ulSetInterruptMask>
 8009ba6:	e7fe      	b.n	8009ba6 <pvPortMalloc+0x13e>
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ba8:	f7ff ff10 	bl	80099cc <ulSetInterruptMask>
 8009bac:	e7fe      	b.n	8009bac <pvPortMalloc+0x144>
 8009bae:	bf00      	nop
 8009bb0:	20061fb4 	.word	0x20061fb4
 8009bb4:	20061fc0 	.word	0x20061fc0
 8009bb8:	2007afb8 	.word	0x2007afb8
 8009bbc:	20061fb8 	.word	0x20061fb8
 8009bc0:	20061fac 	.word	0x20061fac
 8009bc4:	20061fb0 	.word	0x20061fb0
 8009bc8:	20061fa8 	.word	0x20061fa8
 8009bcc:	2007afbf 	.word	0x2007afbf

08009bd0 <vPortFree>:
    if( pv != NULL )
 8009bd0:	b1b0      	cbz	r0, 8009c00 <vPortFree+0x30>
{
 8009bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bd4:	4d32      	ldr	r5, [pc, #200]	@ (8009ca0 <vPortFree+0xd0>)
        puc -= xHeapStructSize;
 8009bd6:	f1a0 0408 	sub.w	r4, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bda:	42ac      	cmp	r4, r5
{
 8009bdc:	b083      	sub	sp, #12
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bde:	d30c      	bcc.n	8009bfa <vPortFree+0x2a>
 8009be0:	4e30      	ldr	r6, [pc, #192]	@ (8009ca4 <vPortFree+0xd4>)
 8009be2:	42b4      	cmp	r4, r6
 8009be4:	d809      	bhi.n	8009bfa <vPortFree+0x2a>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009be6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da09      	bge.n	8009c02 <vPortFree+0x32>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bee:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8009bf2:	b14a      	cbz	r2, 8009c08 <vPortFree+0x38>
 8009bf4:	f7ff feea 	bl	80099cc <ulSetInterruptMask>
 8009bf8:	e7fe      	b.n	8009bf8 <vPortFree+0x28>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8009bfa:	f7ff fee7 	bl	80099cc <ulSetInterruptMask>
 8009bfe:	e7fe      	b.n	8009bfe <vPortFree+0x2e>
 8009c00:	4770      	bx	lr
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009c02:	f7ff fee3 	bl	80099cc <ulSetInterruptMask>
 8009c06:	e7fe      	b.n	8009c06 <vPortFree+0x36>
                heapFREE_BLOCK( pxLink );
 8009c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c0c:	4f26      	ldr	r7, [pc, #152]	@ (8009ca8 <vPortFree+0xd8>)
                heapFREE_BLOCK( pxLink );
 8009c0e:	f840 3c04 	str.w	r3, [r0, #-4]
 8009c12:	9001      	str	r0, [sp, #4]
                vTaskSuspendAll();
 8009c14:	f7ff f8e8 	bl	8008de8 <vTaskSuspendAll>
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c18:	463b      	mov	r3, r7
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009c1a:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8009cb4 <vPortFree+0xe4>
 8009c1e:	9801      	ldr	r0, [sp, #4]
 8009c20:	f8de 2000 	ldr.w	r2, [lr]
 8009c24:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8009c28:	440a      	add	r2, r1
 8009c2a:	f8ce 2000 	str.w	r2, [lr]
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c2e:	461a      	mov	r2, r3
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	429c      	cmp	r4, r3
 8009c34:	d8fb      	bhi.n	8009c2e <vPortFree+0x5e>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8009c36:	42ba      	cmp	r2, r7
 8009c38:	d006      	beq.n	8009c48 <vPortFree+0x78>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8009c3a:	42aa      	cmp	r2, r5
 8009c3c:	d301      	bcc.n	8009c42 <vPortFree+0x72>
 8009c3e:	42b2      	cmp	r2, r6
 8009c40:	d902      	bls.n	8009c48 <vPortFree+0x78>
 8009c42:	f7ff fec3 	bl	80099cc <ulSetInterruptMask>
 8009c46:	e7fe      	b.n	8009c46 <vPortFree+0x76>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c48:	6855      	ldr	r5, [r2, #4]
 8009c4a:	1956      	adds	r6, r2, r5
 8009c4c:	42b4      	cmp	r4, r6
 8009c4e:	d010      	beq.n	8009c72 <vPortFree+0xa2>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c50:	1865      	adds	r5, r4, r1
 8009c52:	42ab      	cmp	r3, r5
 8009c54:	d01d      	beq.n	8009c92 <vPortFree+0xc2>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c56:	f840 3c08 	str.w	r3, [r0, #-8]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009c5a:	42a2      	cmp	r2, r4
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8009c5c:	bf18      	it	ne
 8009c5e:	6014      	strne	r4, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8009c60:	4a12      	ldr	r2, [pc, #72]	@ (8009cac <vPortFree+0xdc>)
 8009c62:	6813      	ldr	r3, [r2, #0]
 8009c64:	3301      	adds	r3, #1
 8009c66:	6013      	str	r3, [r2, #0]
}
 8009c68:	b003      	add	sp, #12
 8009c6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 8009c6e:	f7ff b8c3 	b.w	8008df8 <xTaskResumeAll>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c72:	4429      	add	r1, r5
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c74:	1850      	adds	r0, r2, r1
 8009c76:	4283      	cmp	r3, r0
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c78:	6051      	str	r1, [r2, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009c7a:	d1f1      	bne.n	8009c60 <vPortFree+0x90>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009c7c:	480c      	ldr	r0, [pc, #48]	@ (8009cb0 <vPortFree+0xe0>)
 8009c7e:	6800      	ldr	r0, [r0, #0]
 8009c80:	4283      	cmp	r3, r0
 8009c82:	d00b      	beq.n	8009c9c <vPortFree+0xcc>
        pxBlockToInsert = pxIterator;
 8009c84:	4614      	mov	r4, r2
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009c86:	e9d3 5000 	ldrd	r5, r0, [r3]
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8009c8a:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009c8c:	e9c4 5100 	strd	r5, r1, [r4]
 8009c90:	e7e3      	b.n	8009c5a <vPortFree+0x8a>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009c92:	4d07      	ldr	r5, [pc, #28]	@ (8009cb0 <vPortFree+0xe0>)
 8009c94:	682d      	ldr	r5, [r5, #0]
 8009c96:	42ab      	cmp	r3, r5
 8009c98:	d1f5      	bne.n	8009c86 <vPortFree+0xb6>
 8009c9a:	e7dc      	b.n	8009c56 <vPortFree+0x86>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8009c9c:	6013      	str	r3, [r2, #0]
    if( pxIterator != pxBlockToInsert )
 8009c9e:	e7df      	b.n	8009c60 <vPortFree+0x90>
 8009ca0:	20061fc0 	.word	0x20061fc0
 8009ca4:	2007afbf 	.word	0x2007afbf
 8009ca8:	20061fb8 	.word	0x20061fb8
 8009cac:	20061fa4 	.word	0x20061fa4
 8009cb0:	20061fb4 	.word	0x20061fb4
 8009cb4:	20061fb0 	.word	0x20061fb0

08009cb8 <xPortGetFreeHeapSize>:
    return xFreeBytesRemaining;
 8009cb8:	4b01      	ldr	r3, [pc, #4]	@ (8009cc0 <xPortGetFreeHeapSize+0x8>)
}
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	20061fb0 	.word	0x20061fb0

08009cc4 <ai_buffer_get_size>:
 8009cc4:	b360      	cbz	r0, 8009d20 <ai_buffer_get_size+0x5c>
 8009cc6:	b430      	push	{r4, r5}
 8009cc8:	6803      	ldr	r3, [r0, #0]
 8009cca:	4d16      	ldr	r5, [pc, #88]	@ (8009d24 <ai_buffer_get_size+0x60>)
 8009ccc:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009cd0:	6984      	ldr	r4, [r0, #24]
 8009cd2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009cd6:	42ab      	cmp	r3, r5
 8009cd8:	6862      	ldr	r2, [r4, #4]
 8009cda:	d01b      	beq.n	8009d14 <ai_buffer_get_size+0x50>
 8009cdc:	7d03      	ldrb	r3, [r0, #20]
 8009cde:	6941      	ldr	r1, [r0, #20]
 8009ce0:	f1a3 0301 	sub.w	r3, r3, #1
 8009ce4:	fab3 f383 	clz	r3, r3
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009cee:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009cf2:	da0b      	bge.n	8009d0c <ai_buffer_get_size+0x48>
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d102      	bne.n	8009cfe <ai_buffer_get_size+0x3a>
 8009cf8:	2802      	cmp	r0, #2
 8009cfa:	d007      	beq.n	8009d0c <ai_buffer_get_size+0x48>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009d02:	3301      	adds	r3, #1
 8009d04:	4298      	cmp	r0, r3
 8009d06:	fb01 f202 	mul.w	r2, r1, r2
 8009d0a:	d1f3      	bne.n	8009cf4 <ai_buffer_get_size+0x30>
 8009d0c:	bc30      	pop	{r4, r5}
 8009d0e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009d12:	4770      	bx	lr
 8009d14:	2900      	cmp	r1, #0
 8009d16:	d0e1      	beq.n	8009cdc <ai_buffer_get_size+0x18>
 8009d18:	321f      	adds	r2, #31
 8009d1a:	f022 021f 	bic.w	r2, r2, #31
 8009d1e:	e7dd      	b.n	8009cdc <ai_buffer_get_size+0x18>
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	000400c0 	.word	0x000400c0

08009d28 <ai_buffer_array_sane>:
 8009d28:	b138      	cbz	r0, 8009d3a <ai_buffer_array_sane+0x12>
 8009d2a:	6843      	ldr	r3, [r0, #4]
 8009d2c:	b123      	cbz	r3, 8009d38 <ai_buffer_array_sane+0x10>
 8009d2e:	8840      	ldrh	r0, [r0, #2]
 8009d30:	3800      	subs	r0, #0
 8009d32:	bf18      	it	ne
 8009d34:	2001      	movne	r0, #1
 8009d36:	4770      	bx	lr
 8009d38:	4618      	mov	r0, r3
 8009d3a:	4770      	bx	lr

08009d3c <ai_buffer_array_item_set_address>:
 8009d3c:	b158      	cbz	r0, 8009d56 <ai_buffer_array_item_set_address+0x1a>
 8009d3e:	6843      	ldr	r3, [r0, #4]
 8009d40:	b143      	cbz	r3, 8009d54 <ai_buffer_array_item_set_address+0x18>
 8009d42:	8840      	ldrh	r0, [r0, #2]
 8009d44:	b138      	cbz	r0, 8009d56 <ai_buffer_array_item_set_address+0x1a>
 8009d46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009d4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009d4e:	2001      	movs	r0, #1
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	4770      	bx	lr
 8009d54:	4618      	mov	r0, r3
 8009d56:	4770      	bx	lr

08009d58 <ai_platform_get_weights_map>:
 8009d58:	b1f2      	cbz	r2, 8009d98 <ai_platform_get_weights_map+0x40>
 8009d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	b1c8      	cbz	r0, 8009d94 <ai_platform_get_weights_map+0x3c>
 8009d60:	460c      	mov	r4, r1
 8009d62:	b1b9      	cbz	r1, 8009d94 <ai_platform_get_weights_map+0x3c>
 8009d64:	4615      	mov	r5, r2
 8009d66:	4b23      	ldr	r3, [pc, #140]	@ (8009df4 <ai_platform_get_weights_map+0x9c>)
 8009d68:	6812      	ldr	r2, [r2, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d00b      	beq.n	8009d86 <ai_platform_get_weights_map+0x2e>
 8009d6e:	686d      	ldr	r5, [r5, #4]
 8009d70:	b185      	cbz	r5, 8009d94 <ai_platform_get_weights_map+0x3c>
 8009d72:	682f      	ldr	r7, [r5, #0]
 8009d74:	429f      	cmp	r7, r3
 8009d76:	d011      	beq.n	8009d9c <ai_platform_get_weights_map+0x44>
 8009d78:	f1a1 0001 	sub.w	r0, r1, #1
 8009d7c:	fab0 f080 	clz	r0, r0
 8009d80:	6035      	str	r5, [r6, #0]
 8009d82:	0940      	lsrs	r0, r0, #5
 8009d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d86:	1d28      	adds	r0, r5, #4
 8009d88:	f7ff ffce 	bl	8009d28 <ai_buffer_array_sane>
 8009d8c:	b110      	cbz	r0, 8009d94 <ai_platform_get_weights_map+0x3c>
 8009d8e:	88eb      	ldrh	r3, [r5, #6]
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d01b      	beq.n	8009dcc <ai_platform_get_weights_map+0x74>
 8009d94:	2000      	movs	r0, #0
 8009d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d98:	2000      	movs	r0, #0
 8009d9a:	4770      	bx	lr
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	2300      	movs	r3, #0
 8009da0:	3804      	subs	r0, #4
 8009da2:	e004      	b.n	8009dae <ai_platform_get_weights_map+0x56>
 8009da4:	3301      	adds	r3, #1
 8009da6:	429c      	cmp	r4, r3
 8009da8:	f840 2f04 	str.w	r2, [r0, #4]!
 8009dac:	d005      	beq.n	8009dba <ai_platform_get_weights_map+0x62>
 8009dae:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009db2:	42ba      	cmp	r2, r7
 8009db4:	d1f6      	bne.n	8009da4 <ai_platform_get_weights_map+0x4c>
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d1ec      	bne.n	8009d94 <ai_platform_get_weights_map+0x3c>
 8009dba:	3401      	adds	r4, #1
 8009dbc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8009dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8009df4 <ai_platform_get_weights_map+0x9c>)
 8009dc2:	1ac0      	subs	r0, r0, r3
 8009dc4:	fab0 f080 	clz	r0, r0
 8009dc8:	0940      	lsrs	r0, r0, #5
 8009dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dcc:	2200      	movs	r2, #0
 8009dce:	1f30      	subs	r0, r6, #4
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	e004      	b.n	8009dde <ai_platform_get_weights_map+0x86>
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	428c      	cmp	r4, r1
 8009dd8:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ddc:	d005      	beq.n	8009dea <ai_platform_get_weights_map+0x92>
 8009dde:	68ab      	ldr	r3, [r5, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	321c      	adds	r2, #28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1f4      	bne.n	8009dd4 <ai_platform_get_weights_map+0x7c>
 8009dea:	1a60      	subs	r0, r4, r1
 8009dec:	fab0 f080 	clz	r0, r0
 8009df0:	0940      	lsrs	r0, r0, #5
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df4:	a1facade 	.word	0xa1facade

08009df8 <ai_platform_get_activations_map>:
 8009df8:	b1fa      	cbz	r2, 8009e3a <ai_platform_get_activations_map+0x42>
 8009dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	b1d0      	cbz	r0, 8009e36 <ai_platform_get_activations_map+0x3e>
 8009e00:	460c      	mov	r4, r1
 8009e02:	b1c1      	cbz	r1, 8009e36 <ai_platform_get_activations_map+0x3e>
 8009e04:	4615      	mov	r5, r2
 8009e06:	4b24      	ldr	r3, [pc, #144]	@ (8009e98 <ai_platform_get_activations_map+0xa0>)
 8009e08:	6812      	ldr	r2, [r2, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d00b      	beq.n	8009e26 <ai_platform_get_activations_map+0x2e>
 8009e0e:	6a2d      	ldr	r5, [r5, #32]
 8009e10:	b18d      	cbz	r5, 8009e36 <ai_platform_get_activations_map+0x3e>
 8009e12:	682f      	ldr	r7, [r5, #0]
 8009e14:	429f      	cmp	r7, r3
 8009e16:	d012      	beq.n	8009e3e <ai_platform_get_activations_map+0x46>
 8009e18:	f1a1 0001 	sub.w	r0, r1, #1
 8009e1c:	fab0 f080 	clz	r0, r0
 8009e20:	6035      	str	r5, [r6, #0]
 8009e22:	0940      	lsrs	r0, r0, #5
 8009e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e26:	f105 000c 	add.w	r0, r5, #12
 8009e2a:	f7ff ff7d 	bl	8009d28 <ai_buffer_array_sane>
 8009e2e:	b110      	cbz	r0, 8009e36 <ai_platform_get_activations_map+0x3e>
 8009e30:	89eb      	ldrh	r3, [r5, #14]
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d01b      	beq.n	8009e6e <ai_platform_get_activations_map+0x76>
 8009e36:	2000      	movs	r0, #0
 8009e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	4770      	bx	lr
 8009e3e:	4629      	mov	r1, r5
 8009e40:	2300      	movs	r3, #0
 8009e42:	3804      	subs	r0, #4
 8009e44:	e004      	b.n	8009e50 <ai_platform_get_activations_map+0x58>
 8009e46:	3301      	adds	r3, #1
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	f840 2f04 	str.w	r2, [r0, #4]!
 8009e4e:	d005      	beq.n	8009e5c <ai_platform_get_activations_map+0x64>
 8009e50:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009e54:	42ba      	cmp	r2, r7
 8009e56:	d1f6      	bne.n	8009e46 <ai_platform_get_activations_map+0x4e>
 8009e58:	429c      	cmp	r4, r3
 8009e5a:	d1ec      	bne.n	8009e36 <ai_platform_get_activations_map+0x3e>
 8009e5c:	3401      	adds	r4, #1
 8009e5e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8009e62:	4b0d      	ldr	r3, [pc, #52]	@ (8009e98 <ai_platform_get_activations_map+0xa0>)
 8009e64:	1ac0      	subs	r0, r0, r3
 8009e66:	fab0 f080 	clz	r0, r0
 8009e6a:	0940      	lsrs	r0, r0, #5
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	2200      	movs	r2, #0
 8009e70:	1f30      	subs	r0, r6, #4
 8009e72:	4611      	mov	r1, r2
 8009e74:	e004      	b.n	8009e80 <ai_platform_get_activations_map+0x88>
 8009e76:	3101      	adds	r1, #1
 8009e78:	428c      	cmp	r4, r1
 8009e7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e7e:	d005      	beq.n	8009e8c <ai_platform_get_activations_map+0x94>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	321c      	adds	r2, #28
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1f4      	bne.n	8009e76 <ai_platform_get_activations_map+0x7e>
 8009e8c:	1a60      	subs	r0, r4, r1
 8009e8e:	fab0 f080 	clz	r0, r0
 8009e92:	0940      	lsrs	r0, r0, #5
 8009e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e96:	bf00      	nop
 8009e98:	a1facade 	.word	0xa1facade

08009e9c <ai_platform_bind_network_params>:
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	b198      	cbz	r0, 8009ec8 <ai_platform_bind_network_params+0x2c>
 8009ea0:	b1a9      	cbz	r1, 8009ece <ai_platform_bind_network_params+0x32>
 8009ea2:	b1ba      	cbz	r2, 8009ed4 <ai_platform_bind_network_params+0x38>
 8009ea4:	f04f 0c01 	mov.w	ip, #1
 8009ea8:	b500      	push	{lr}
 8009eaa:	480c      	ldr	r0, [pc, #48]	@ (8009edc <ai_platform_bind_network_params+0x40>)
 8009eac:	f103 0e0c 	add.w	lr, r3, #12
 8009eb0:	f843 0b04 	str.w	r0, [r3], #4
 8009eb4:	c903      	ldmia	r1, {r0, r1}
 8009eb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8009eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ebe:	e88e 0003 	stmia.w	lr, {r0, r1}
 8009ec2:	4660      	mov	r0, ip
 8009ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ec8:	4684      	mov	ip, r0
 8009eca:	4660      	mov	r0, ip
 8009ecc:	4770      	bx	lr
 8009ece:	468c      	mov	ip, r1
 8009ed0:	4660      	mov	r0, ip
 8009ed2:	4770      	bx	lr
 8009ed4:	4694      	mov	ip, r2
 8009ed6:	4660      	mov	r0, ip
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	a1facade 	.word	0xa1facade

08009ee0 <ai_platform_runtime_get_revision>:
 8009ee0:	4800      	ldr	r0, [pc, #0]	@ (8009ee4 <ai_platform_runtime_get_revision+0x4>)
 8009ee2:	4770      	bx	lr
 8009ee4:	0800f884 	.word	0x0800f884

08009ee8 <ai_platform_runtime_get_version>:
 8009ee8:	2000      	movs	r0, #0
 8009eea:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <ai_platform_runtime_get_version+0x2c>)
 8009eec:	b082      	sub	sp, #8
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	fa5f fc83 	uxtb.w	ip, r3
 8009ef4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009ef8:	f36c 0007 	bfi	r0, ip, #0, #8
 8009efc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f00:	f361 200f 	bfi	r0, r1, #8, #8
 8009f04:	0e1b      	lsrs	r3, r3, #24
 8009f06:	f362 4017 	bfi	r0, r2, #16, #8
 8009f0a:	f363 601f 	bfi	r0, r3, #24, #8
 8009f0e:	b002      	add	sp, #8
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	0801e654 	.word	0x0801e654

08009f18 <ai_platform_api_get_version>:
 8009f18:	2000      	movs	r0, #0
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f44 <ai_platform_api_get_version+0x2c>)
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	fa5f fc83 	uxtb.w	ip, r3
 8009f24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009f28:	f36c 0007 	bfi	r0, ip, #0, #8
 8009f2c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f30:	f361 200f 	bfi	r0, r1, #8, #8
 8009f34:	0e1b      	lsrs	r3, r3, #24
 8009f36:	f362 4017 	bfi	r0, r2, #16, #8
 8009f3a:	f363 601f 	bfi	r0, r3, #24, #8
 8009f3e:	b002      	add	sp, #8
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	0801e650 	.word	0x0801e650

08009f48 <ai_platform_interface_api_get_version>:
 8009f48:	2000      	movs	r0, #0
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f74 <ai_platform_interface_api_get_version+0x2c>)
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	fa5f fc83 	uxtb.w	ip, r3
 8009f54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009f58:	f36c 0007 	bfi	r0, ip, #0, #8
 8009f5c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f60:	f361 200f 	bfi	r0, r1, #8, #8
 8009f64:	0e1b      	lsrs	r3, r3, #24
 8009f66:	f362 4017 	bfi	r0, r2, #16, #8
 8009f6a:	f363 601f 	bfi	r0, r3, #24, #8
 8009f6e:	b002      	add	sp, #8
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	0801e64c 	.word	0x0801e64c

08009f78 <ai_platform_context_acquire>:
 8009f78:	6802      	ldr	r2, [r0, #0]
 8009f7a:	4b02      	ldr	r3, [pc, #8]	@ (8009f84 <ai_platform_context_acquire+0xc>)
 8009f7c:	4393      	bics	r3, r2
 8009f7e:	bf18      	it	ne
 8009f80:	2000      	movne	r0, #0
 8009f82:	4770      	bx	lr
 8009f84:	a1c00100 	.word	0xa1c00100

08009f88 <ai_platform_network_get_error>:
 8009f88:	4b04      	ldr	r3, [pc, #16]	@ (8009f9c <ai_platform_network_get_error+0x14>)
 8009f8a:	6802      	ldr	r2, [r0, #0]
 8009f8c:	4393      	bics	r3, r2
 8009f8e:	d102      	bne.n	8009f96 <ai_platform_network_get_error+0xe>
 8009f90:	300c      	adds	r0, #12
 8009f92:	f000 bdc3 	b.w	800ab1c <core_get_error>
 8009f96:	f241 0010 	movw	r0, #4112	@ 0x1010
 8009f9a:	4770      	bx	lr
 8009f9c:	a1c00100 	.word	0xa1c00100

08009fa0 <ai_platform_network_set_error>:
 8009fa0:	b110      	cbz	r0, 8009fa8 <ai_platform_network_set_error+0x8>
 8009fa2:	300c      	adds	r0, #12
 8009fa4:	f000 bdc0 	b.w	800ab28 <core_set_error>
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop

08009fac <ai_platform_inputs_get>:
 8009fac:	4b39      	ldr	r3, [pc, #228]	@ (800a094 <ai_platform_inputs_get+0xe8>)
 8009fae:	6802      	ldr	r2, [r0, #0]
 8009fb0:	4393      	bics	r3, r2
 8009fb2:	d163      	bne.n	800a07c <ai_platform_inputs_get+0xd0>
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009fba:	4605      	mov	r5, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d04e      	beq.n	800a062 <ai_platform_inputs_get+0xb6>
 8009fc4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8009fc6:	2f00      	cmp	r7, #0
 8009fc8:	d04b      	beq.n	800a062 <ai_platform_inputs_get+0xb6>
 8009fca:	f04f 0b00 	mov.w	fp, #0
 8009fce:	46ba      	mov	sl, r7
 8009fd0:	465e      	mov	r6, fp
 8009fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd6:	e016      	b.n	800a006 <ai_platform_inputs_get+0x5a>
 8009fd8:	2201      	movs	r2, #1
 8009fda:	9901      	ldr	r1, [sp, #4]
 8009fdc:	507a      	str	r2, [r7, r1]
 8009fde:	69a1      	ldr	r1, [r4, #24]
 8009fe0:	f04f 0201 	mov.w	r2, #1
 8009fe4:	684c      	ldr	r4, [r1, #4]
 8009fe6:	60ab      	str	r3, [r5, #8]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	752a      	strb	r2, [r5, #20]
 8009fec:	6028      	str	r0, [r5, #0]
 8009fee:	6968      	ldr	r0, [r5, #20]
 8009ff0:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8009ff4:	f368 201f 	bfi	r0, r8, #8, #24
 8009ff8:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8009ffc:	f8c5 c004 	str.w	ip, [r5, #4]
 800a000:	3601      	adds	r6, #1
 800a002:	f10b 0b1c 	add.w	fp, fp, #28
 800a006:	f8ba 3000 	ldrh.w	r3, [sl]
 800a00a:	00f2      	lsls	r2, r6, #3
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	9201      	str	r2, [sp, #4]
 800a010:	d936      	bls.n	800a080 <ai_platform_inputs_get+0xd4>
 800a012:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d032      	beq.n	800a080 <ai_platform_inputs_get+0xd4>
 800a01a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a01e:	b37c      	cbz	r4, 800a080 <ai_platform_inputs_get+0xd4>
 800a020:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a024:	69a2      	ldr	r2, [r4, #24]
 800a026:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	6810      	ldr	r0, [r2, #0]
 800a02e:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800a032:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800a036:	f002 fa73 	bl	800c520 <ai_array_to_buffer_fmt>
 800a03a:	69a1      	ldr	r1, [r4, #24]
 800a03c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a040:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a044:	445d      	add	r5, fp
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ca      	beq.n	8009fe0 <ai_platform_inputs_get+0x34>
 800a04a:	2100      	movs	r1, #0
 800a04c:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 800a050:	6821      	ldr	r1, [r4, #0]
 800a052:	6059      	str	r1, [r3, #4]
 800a054:	b111      	cbz	r1, 800a05c <ai_platform_inputs_get+0xb0>
 800a056:	8849      	ldrh	r1, [r1, #2]
 800a058:	2900      	cmp	r1, #0
 800a05a:	d1bd      	bne.n	8009fd8 <ai_platform_inputs_get+0x2c>
 800a05c:	2300      	movs	r3, #0
 800a05e:	69a1      	ldr	r1, [r4, #24]
 800a060:	e7be      	b.n	8009fe0 <ai_platform_inputs_get+0x34>
 800a062:	2600      	movs	r6, #0
 800a064:	2218      	movs	r2, #24
 800a066:	2111      	movs	r1, #17
 800a068:	f105 000c 	add.w	r0, r5, #12
 800a06c:	f000 fd5c 	bl	800ab28 <core_set_error>
 800a070:	4630      	mov	r0, r6
 800a072:	b104      	cbz	r4, 800a076 <ai_platform_inputs_get+0xca>
 800a074:	8026      	strh	r6, [r4, #0]
 800a076:	b005      	add	sp, #20
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	2000      	movs	r0, #0
 800a07e:	4770      	bx	lr
 800a080:	b2b6      	uxth	r6, r6
 800a082:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800a086:	2e00      	cmp	r6, #0
 800a088:	d0eb      	beq.n	800a062 <ai_platform_inputs_get+0xb6>
 800a08a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a08e:	6858      	ldr	r0, [r3, #4]
 800a090:	e7ef      	b.n	800a072 <ai_platform_inputs_get+0xc6>
 800a092:	bf00      	nop
 800a094:	a1c00100 	.word	0xa1c00100

0800a098 <ai_platform_outputs_get>:
 800a098:	4b37      	ldr	r3, [pc, #220]	@ (800a178 <ai_platform_outputs_get+0xe0>)
 800a09a:	6802      	ldr	r2, [r0, #0]
 800a09c:	4393      	bics	r3, r2
 800a09e:	d169      	bne.n	800a174 <ai_platform_outputs_get+0xdc>
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	b085      	sub	sp, #20
 800a0ae:	d94b      	bls.n	800a148 <ai_platform_outputs_get+0xb0>
 800a0b0:	f04f 0b00 	mov.w	fp, #0
 800a0b4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 800a0b6:	465e      	mov	r6, fp
 800a0b8:	46d8      	mov	r8, fp
 800a0ba:	46ba      	mov	sl, r7
 800a0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c0:	e016      	b.n	800a0f0 <ai_platform_outputs_get+0x58>
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	9901      	ldr	r1, [sp, #4]
 800a0c6:	507a      	str	r2, [r7, r1]
 800a0c8:	69a9      	ldr	r1, [r5, #24]
 800a0ca:	f04f 0201 	mov.w	r2, #1
 800a0ce:	684d      	ldr	r5, [r1, #4]
 800a0d0:	7522      	strb	r2, [r4, #20]
 800a0d2:	6020      	str	r0, [r4, #0]
 800a0d4:	6960      	ldr	r0, [r4, #20]
 800a0d6:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800a0da:	f369 201f 	bfi	r0, r9, #8, #24
 800a0de:	e9c4 5004 	strd	r5, r0, [r4, #16]
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	f8c4 c004 	str.w	ip, [r4, #4]
 800a0e8:	61a3      	str	r3, [r4, #24]
 800a0ea:	3601      	adds	r6, #1
 800a0ec:	f10b 0b1c 	add.w	fp, fp, #28
 800a0f0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800a0f4:	00f2      	lsls	r2, r6, #3
 800a0f6:	42b3      	cmp	r3, r6
 800a0f8:	9201      	str	r2, [sp, #4]
 800a0fa:	d932      	bls.n	800a162 <ai_platform_outputs_get+0xca>
 800a0fc:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a100:	b37b      	cbz	r3, 800a162 <ai_platform_outputs_get+0xca>
 800a102:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a106:	b365      	cbz	r5, 800a162 <ai_platform_outputs_get+0xca>
 800a108:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a10c:	69aa      	ldr	r2, [r5, #24]
 800a10e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a112:	68ab      	ldr	r3, [r5, #8]
 800a114:	6810      	ldr	r0, [r2, #0]
 800a116:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a11a:	68eb      	ldr	r3, [r5, #12]
 800a11c:	445c      	add	r4, fp
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	f002 f9fe 	bl	800c520 <ai_array_to_buffer_fmt>
 800a124:	69a9      	ldr	r1, [r5, #24]
 800a126:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a12a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0cb      	beq.n	800a0ca <ai_platform_outputs_get+0x32>
 800a132:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 800a136:	6829      	ldr	r1, [r5, #0]
 800a138:	6059      	str	r1, [r3, #4]
 800a13a:	b111      	cbz	r1, 800a142 <ai_platform_outputs_get+0xaa>
 800a13c:	8849      	ldrh	r1, [r1, #2]
 800a13e:	2900      	cmp	r1, #0
 800a140:	d1bf      	bne.n	800a0c2 <ai_platform_outputs_get+0x2a>
 800a142:	2300      	movs	r3, #0
 800a144:	69a9      	ldr	r1, [r5, #24]
 800a146:	e7c0      	b.n	800a0ca <ai_platform_outputs_get+0x32>
 800a148:	2600      	movs	r6, #0
 800a14a:	2218      	movs	r2, #24
 800a14c:	2111      	movs	r1, #17
 800a14e:	f105 000c 	add.w	r0, r5, #12
 800a152:	f000 fce9 	bl	800ab28 <core_set_error>
 800a156:	4630      	mov	r0, r6
 800a158:	b104      	cbz	r4, 800a15c <ai_platform_outputs_get+0xc4>
 800a15a:	8026      	strh	r6, [r4, #0]
 800a15c:	b005      	add	sp, #20
 800a15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a162:	b2b6      	uxth	r6, r6
 800a164:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800a168:	2e00      	cmp	r6, #0
 800a16a:	d0ed      	beq.n	800a148 <ai_platform_outputs_get+0xb0>
 800a16c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a170:	6858      	ldr	r0, [r3, #4]
 800a172:	e7f1      	b.n	800a158 <ai_platform_outputs_get+0xc0>
 800a174:	2000      	movs	r0, #0
 800a176:	4770      	bx	lr
 800a178:	a1c00100 	.word	0xa1c00100

0800a17c <ai_platform_api_get_network_report>:
 800a17c:	4b9f      	ldr	r3, [pc, #636]	@ (800a3fc <ai_platform_api_get_network_report+0x280>)
 800a17e:	6802      	ldr	r2, [r0, #0]
 800a180:	4393      	bics	r3, r2
 800a182:	f040 8181 	bne.w	800a488 <ai_platform_api_get_network_report+0x30c>
 800a186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	460d      	mov	r5, r1
 800a18c:	b089      	sub	sp, #36	@ 0x24
 800a18e:	2900      	cmp	r1, #0
 800a190:	d075      	beq.n	800a27e <ai_platform_api_get_network_report+0x102>
 800a192:	2300      	movs	r3, #0
 800a194:	67cb      	str	r3, [r1, #124]	@ 0x7c
 800a196:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a198:	4682      	mov	sl, r0
 800a19a:	2201      	movs	r2, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 8125 	beq.w	800a3ec <ai_platform_api_get_network_report+0x270>
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	67ea      	str	r2, [r5, #124]	@ 0x7c
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	428b      	cmp	r3, r1
 800a1aa:	d007      	beq.n	800a1bc <ai_platform_api_get_network_report+0x40>
 800a1ac:	1c51      	adds	r1, r2, #1
 800a1ae:	b12b      	cbz	r3, 800a1bc <ai_platform_api_get_network_report+0x40>
 800a1b0:	460a      	mov	r2, r1
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	67ea      	str	r2, [r5, #124]	@ 0x7c
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	d1f7      	bne.n	800a1ac <ai_platform_api_get_network_report+0x30>
 800a1bc:	2a00      	cmp	r2, #0
 800a1be:	f000 8115 	beq.w	800a3ec <ai_platform_api_get_network_report+0x270>
 800a1c2:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d050      	beq.n	800a26c <ai_platform_api_get_network_report+0xf0>
 800a1ca:	f8da 7034 	ldr.w	r7, [sl, #52]	@ 0x34
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	d04c      	beq.n	800a26c <ai_platform_api_get_network_report+0xf0>
 800a1d2:	f04f 0b00 	mov.w	fp, #0
 800a1d6:	f8cd a008 	str.w	sl, [sp, #8]
 800a1da:	465e      	mov	r6, fp
 800a1dc:	46ba      	mov	sl, r7
 800a1de:	9503      	str	r5, [sp, #12]
 800a1e0:	e016      	b.n	800a210 <ai_platform_api_get_network_report+0x94>
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	00f1      	lsls	r1, r6, #3
 800a1e6:	507a      	str	r2, [r7, r1]
 800a1e8:	69a9      	ldr	r1, [r5, #24]
 800a1ea:	684d      	ldr	r5, [r1, #4]
 800a1ec:	60a3      	str	r3, [r4, #8]
 800a1ee:	f04f 0301 	mov.w	r3, #1
 800a1f2:	7523      	strb	r3, [r4, #20]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a1fa:	6963      	ldr	r3, [r4, #20]
 800a1fc:	e9c4 0c00 	strd	r0, ip, [r4]
 800a200:	f369 231f 	bfi	r3, r9, #8, #24
 800a204:	f8c4 8018 	str.w	r8, [r4, #24]
 800a208:	6163      	str	r3, [r4, #20]
 800a20a:	3601      	adds	r6, #1
 800a20c:	f10b 0b1c 	add.w	fp, fp, #28
 800a210:	f8ba 3000 	ldrh.w	r3, [sl]
 800a214:	42b3      	cmp	r3, r6
 800a216:	d936      	bls.n	800a286 <ai_platform_api_get_network_report+0x10a>
 800a218:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d032      	beq.n	800a286 <ai_platform_api_get_network_report+0x10a>
 800a220:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a224:	b37d      	cbz	r5, 800a286 <ai_platform_api_get_network_report+0x10a>
 800a226:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a22a:	00f1      	lsls	r1, r6, #3
 800a22c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800a230:	69ab      	ldr	r3, [r5, #24]
 800a232:	9101      	str	r1, [sp, #4]
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	68ab      	ldr	r3, [r5, #8]
 800a238:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800a23c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800a240:	f002 f96e 	bl	800c520 <ai_array_to_buffer_fmt>
 800a244:	69a9      	ldr	r1, [r5, #24]
 800a246:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a24a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a24e:	445c      	add	r4, fp
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0ca      	beq.n	800a1ea <ai_platform_api_get_network_report+0x6e>
 800a254:	2200      	movs	r2, #0
 800a256:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
 800a25a:	6829      	ldr	r1, [r5, #0]
 800a25c:	6059      	str	r1, [r3, #4]
 800a25e:	b111      	cbz	r1, 800a266 <ai_platform_api_get_network_report+0xea>
 800a260:	8849      	ldrh	r1, [r1, #2]
 800a262:	2900      	cmp	r1, #0
 800a264:	d1bd      	bne.n	800a1e2 <ai_platform_api_get_network_report+0x66>
 800a266:	2300      	movs	r3, #0
 800a268:	69a9      	ldr	r1, [r5, #24]
 800a26a:	e7be      	b.n	800a1ea <ai_platform_api_get_network_report+0x6e>
 800a26c:	2300      	movs	r3, #0
 800a26e:	2218      	movs	r2, #24
 800a270:	2112      	movs	r1, #18
 800a272:	f10a 000c 	add.w	r0, sl, #12
 800a276:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800a278:	872b      	strh	r3, [r5, #56]	@ 0x38
 800a27a:	f000 fc55 	bl	800ab28 <core_set_error>
 800a27e:	2000      	movs	r0, #0
 800a280:	b009      	add	sp, #36	@ 0x24
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	b2b6      	uxth	r6, r6
 800a288:	4657      	mov	r7, sl
 800a28a:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800a28e:	2e00      	cmp	r6, #0
 800a290:	d0ec      	beq.n	800a26c <ai_platform_api_get_network_report+0xf0>
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	872e      	strh	r6, [r5, #56]	@ 0x38
 800a298:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800a29a:	f8ba 3030 	ldrh.w	r3, [sl, #48]	@ 0x30
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	f240 809a 	bls.w	800a3d8 <ai_platform_api_get_network_report+0x25c>
 800a2a4:	f04f 0900 	mov.w	r9, #0
 800a2a8:	e9cd a502 	strd	sl, r5, [sp, #8]
 800a2ac:	464f      	mov	r7, r9
 800a2ae:	46cb      	mov	fp, r9
 800a2b0:	f8da 8034 	ldr.w	r8, [sl, #52]	@ 0x34
 800a2b4:	e016      	b.n	800a2e4 <ai_platform_api_get_network_report+0x168>
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	f84a 100e 	str.w	r1, [sl, lr]
 800a2bc:	69a9      	ldr	r1, [r5, #24]
 800a2be:	6849      	ldr	r1, [r1, #4]
 800a2c0:	60a3      	str	r3, [r4, #8]
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	e9c4 0200 	strd	r0, r2, [r4]
 800a2c8:	61a3      	str	r3, [r4, #24]
 800a2ca:	f04f 0301 	mov.w	r3, #1
 800a2ce:	7523      	strb	r3, [r4, #20]
 800a2d0:	6963      	ldr	r3, [r4, #20]
 800a2d2:	6121      	str	r1, [r4, #16]
 800a2d4:	f366 231f 	bfi	r3, r6, #8, #24
 800a2d8:	f8c4 b00c 	str.w	fp, [r4, #12]
 800a2dc:	3701      	adds	r7, #1
 800a2de:	f109 091c 	add.w	r9, r9, #28
 800a2e2:	6163      	str	r3, [r4, #20]
 800a2e4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a2e8:	429f      	cmp	r7, r3
 800a2ea:	d226      	bcs.n	800a33a <ai_platform_api_get_network_report+0x1be>
 800a2ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a2f0:	b31b      	cbz	r3, 800a33a <ai_platform_api_get_network_report+0x1be>
 800a2f2:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800a2f6:	b305      	cbz	r5, 800a33a <ai_platform_api_get_network_report+0x1be>
 800a2f8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a2fc:	68ae      	ldr	r6, [r5, #8]
 800a2fe:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 800a302:	69ab      	ldr	r3, [r5, #24]
 800a304:	444c      	add	r4, r9
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	68eb      	ldr	r3, [r5, #12]
 800a30a:	f3c6 2617 	ubfx	r6, r6, #8, #24
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	f002 f906 	bl	800c520 <ai_array_to_buffer_fmt>
 800a314:	69a9      	ldr	r1, [r5, #24]
 800a316:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 800a31a:	688a      	ldr	r2, [r1, #8]
 800a31c:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0cc      	beq.n	800a2be <ai_platform_api_get_network_report+0x142>
 800a324:	f84a b037 	str.w	fp, [sl, r7, lsl #3]
 800a328:	6829      	ldr	r1, [r5, #0]
 800a32a:	6059      	str	r1, [r3, #4]
 800a32c:	b111      	cbz	r1, 800a334 <ai_platform_api_get_network_report+0x1b8>
 800a32e:	8849      	ldrh	r1, [r1, #2]
 800a330:	2900      	cmp	r1, #0
 800a332:	d1c0      	bne.n	800a2b6 <ai_platform_api_get_network_report+0x13a>
 800a334:	2300      	movs	r3, #0
 800a336:	69a9      	ldr	r1, [r5, #24]
 800a338:	e7c1      	b.n	800a2be <ai_platform_api_get_network_report+0x142>
 800a33a:	b2bf      	uxth	r7, r7
 800a33c:	e9dd a502 	ldrd	sl, r5, [sp, #8]
 800a340:	2f00      	cmp	r7, #0
 800a342:	d049      	beq.n	800a3d8 <ai_platform_api_get_network_report+0x25c>
 800a344:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a348:	f10a 0828 	add.w	r8, sl, #40	@ 0x28
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	4640      	mov	r0, r8
 800a350:	876f      	strh	r7, [r5, #58]	@ 0x3a
 800a352:	642b      	str	r3, [r5, #64]	@ 0x40
 800a354:	f7ff fce8 	bl	8009d28 <ai_buffer_array_sane>
 800a358:	b968      	cbnz	r0, 800a376 <ai_platform_api_get_network_report+0x1fa>
 800a35a:	4640      	mov	r0, r8
 800a35c:	f7ff fce4 	bl	8009d28 <ai_buffer_array_sane>
 800a360:	b148      	cbz	r0, 800a376 <ai_platform_api_get_network_report+0x1fa>
 800a362:	f8ba 302a 	ldrh.w	r3, [sl, #42]	@ 0x2a
 800a366:	b133      	cbz	r3, 800a376 <ai_platform_api_get_network_report+0x1fa>
 800a368:	2213      	movs	r2, #19
 800a36a:	2111      	movs	r1, #17
 800a36c:	f10a 000c 	add.w	r0, sl, #12
 800a370:	f000 fbda 	bl	800ab28 <core_set_error>
 800a374:	e783      	b.n	800a27e <ai_platform_api_get_network_report+0x102>
 800a376:	f10a 0720 	add.w	r7, sl, #32
 800a37a:	4638      	mov	r0, r7
 800a37c:	f7ff fcd4 	bl	8009d28 <ai_buffer_array_sane>
 800a380:	b920      	cbnz	r0, 800a38c <ai_platform_api_get_network_report+0x210>
 800a382:	4638      	mov	r0, r7
 800a384:	f7ff fcd0 	bl	8009d28 <ai_buffer_array_sane>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d172      	bne.n	800a472 <ai_platform_api_get_network_report+0x2f6>
 800a38c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a390:	f240 2201 	movw	r2, #513	@ 0x201
 800a394:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 800a398:	4b19      	ldr	r3, [pc, #100]	@ (800a400 <ai_platform_api_get_network_report+0x284>)
 800a39a:	626a      	str	r2, [r5, #36]	@ 0x24
 800a39c:	612b      	str	r3, [r5, #16]
 800a39e:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 800a3a2:	616b      	str	r3, [r5, #20]
 800a3a4:	f240 5301 	movw	r3, #1281	@ 0x501
 800a3a8:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a3aa:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a3ae:	f002 f93d 	bl	800c62c <ai_platform_version_get>
 800a3b2:	4b14      	ldr	r3, [pc, #80]	@ (800a404 <ai_platform_api_get_network_report+0x288>)
 800a3b4:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800a3b6:	6228      	str	r0, [r5, #32]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d125      	bne.n	800a408 <ai_platform_api_get_network_report+0x28c>
 800a3bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a3c0:	f105 0350 	add.w	r3, r5, #80	@ 0x50
 800a3c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3c8:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 800a3cc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a3d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	e753      	b.n	800a280 <ai_platform_api_get_network_report+0x104>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2218      	movs	r2, #24
 800a3dc:	2113      	movs	r1, #19
 800a3de:	f10a 000c 	add.w	r0, sl, #12
 800a3e2:	642b      	str	r3, [r5, #64]	@ 0x40
 800a3e4:	876b      	strh	r3, [r5, #58]	@ 0x3a
 800a3e6:	f000 fb9f 	bl	800ab28 <core_set_error>
 800a3ea:	e748      	b.n	800a27e <ai_platform_api_get_network_report+0x102>
 800a3ec:	2218      	movs	r2, #24
 800a3ee:	2111      	movs	r1, #17
 800a3f0:	f10a 000c 	add.w	r0, sl, #12
 800a3f4:	f000 fb98 	bl	800ab28 <core_set_error>
 800a3f8:	e741      	b.n	800a27e <ai_platform_api_get_network_report+0x102>
 800a3fa:	bf00      	nop
 800a3fc:	a1c00100 	.word	0xa1c00100
 800a400:	0800f884 	.word	0x0800f884
 800a404:	a1facade 	.word	0xa1facade
 800a408:	2200      	movs	r2, #0
 800a40a:	f240 4101 	movw	r1, #1025	@ 0x401
 800a40e:	f105 0b60 	add.w	fp, r5, #96	@ 0x60
 800a412:	f105 0944 	add.w	r9, r5, #68	@ 0x44
 800a416:	465c      	mov	r4, fp
 800a418:	464e      	mov	r6, r9
 800a41a:	e9c5 2212 	strd	r2, r2, [r5, #72]	@ 0x48
 800a41e:	e9c5 2214 	strd	r2, r2, [r5, #80]	@ 0x50
 800a422:	4a2a      	ldr	r2, [pc, #168]	@ (800a4cc <ai_platform_api_get_network_report+0x350>)
 800a424:	f10d 0c10 	add.w	ip, sp, #16
 800a428:	4b29      	ldr	r3, [pc, #164]	@ (800a4d0 <ai_platform_api_get_network_report+0x354>)
 800a42a:	65a9      	str	r1, [r5, #88]	@ 0x58
 800a42c:	646a      	str	r2, [r5, #68]	@ 0x44
 800a42e:	f8c5 c05c 	str.w	ip, [r5, #92]	@ 0x5c
 800a432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a434:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a438:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a43a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a43c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a444:	4640      	mov	r0, r8
 800a446:	f7ff fc6f 	bl	8009d28 <ai_buffer_array_sane>
 800a44a:	b9f8      	cbnz	r0, 800a48c <ai_platform_api_get_network_report+0x310>
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff fc6b 	bl	8009d28 <ai_buffer_array_sane>
 800a452:	2800      	cmp	r0, #0
 800a454:	d0be      	beq.n	800a3d4 <ai_platform_api_get_network_report+0x258>
 800a456:	4638      	mov	r0, r7
 800a458:	f7ff fc66 	bl	8009d28 <ai_buffer_array_sane>
 800a45c:	b320      	cbz	r0, 800a4a8 <ai_platform_api_get_network_report+0x32c>
 800a45e:	f8da 4024 	ldr.w	r4, [sl, #36]	@ 0x24
 800a462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a464:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800a468:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a46c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800a470:	e7b0      	b.n	800a3d4 <ai_platform_api_get_network_report+0x258>
 800a472:	f8ba 3022 	ldrh.w	r3, [sl, #34]	@ 0x22
 800a476:	2b00      	cmp	r3, #0
 800a478:	d088      	beq.n	800a38c <ai_platform_api_get_network_report+0x210>
 800a47a:	2212      	movs	r2, #18
 800a47c:	2111      	movs	r1, #17
 800a47e:	f10a 000c 	add.w	r0, sl, #12
 800a482:	f000 fb51 	bl	800ab28 <core_set_error>
 800a486:	e6fa      	b.n	800a27e <ai_platform_api_get_network_report+0x102>
 800a488:	2000      	movs	r0, #0
 800a48a:	4770      	bx	lr
 800a48c:	4640      	mov	r0, r8
 800a48e:	f7ff fc4b 	bl	8009d28 <ai_buffer_array_sane>
 800a492:	b190      	cbz	r0, 800a4ba <ai_platform_api_get_network_report+0x33e>
 800a494:	f8da 402c 	ldr.w	r4, [sl, #44]	@ 0x2c
 800a498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a49a:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800a49e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a4a2:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a4a6:	e7d1      	b.n	800a44c <ai_platform_api_get_network_report+0x2d0>
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4ac:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800a4b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a4b4:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800a4b8:	deff      	udf	#255	@ 0xff
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4be:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800a4c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a4c6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a4ca:	deff      	udf	#255	@ 0xff
 800a4cc:	00040440 	.word	0x00040440
 800a4d0:	0800f7b0 	.word	0x0800f7b0

0800a4d4 <ai_platform_network_create>:
 800a4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800a4de:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800a4e2:	b320      	cbz	r0, 800a52e <ai_platform_network_create+0x5a>
 800a4e4:	6002      	str	r2, [r0, #0]
 800a4e6:	4616      	mov	r6, r2
 800a4e8:	461f      	mov	r7, r3
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	f000 fb14 	bl	800ab18 <core_init>
 800a4f0:	b970      	cbnz	r0, 800a510 <ai_platform_network_create+0x3c>
 800a4f2:	2530      	movs	r5, #48	@ 0x30
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	6023      	str	r3, [r4, #0]
 800a4f8:	2410      	movs	r4, #16
 800a4fa:	464a      	mov	r2, r9
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	4638      	mov	r0, r7
 800a500:	f002 f88e 	bl	800c620 <ai_version_get>
 800a504:	60b0      	str	r0, [r6, #8]
 800a506:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800a50a:	b003      	add	sp, #12
 800a50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a510:	2200      	movs	r2, #0
 800a512:	4641      	mov	r1, r8
 800a514:	4638      	mov	r0, r7
 800a516:	f002 f883 	bl	800c620 <ai_version_get>
 800a51a:	2200      	movs	r2, #0
 800a51c:	4605      	mov	r5, r0
 800a51e:	2105      	movs	r1, #5
 800a520:	2001      	movs	r0, #1
 800a522:	f002 f87d 	bl	800c620 <ai_version_get>
 800a526:	4285      	cmp	r5, r0
 800a528:	d008      	beq.n	800a53c <ai_platform_network_create+0x68>
 800a52a:	2501      	movs	r5, #1
 800a52c:	e7e2      	b.n	800a4f4 <ai_platform_network_create+0x20>
 800a52e:	2510      	movs	r5, #16
 800a530:	462c      	mov	r4, r5
 800a532:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800a536:	b003      	add	sp, #12
 800a538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a53c:	4b05      	ldr	r3, [pc, #20]	@ (800a554 <ai_platform_network_create+0x80>)
 800a53e:	a801      	add	r0, sp, #4
 800a540:	9301      	str	r3, [sp, #4]
 800a542:	f000 fafd 	bl	800ab40 <ai_check_custom_types>
 800a546:	b110      	cbz	r0, 800a54e <ai_platform_network_create+0x7a>
 800a548:	2400      	movs	r4, #0
 800a54a:	4625      	mov	r5, r4
 800a54c:	e7d5      	b.n	800a4fa <ai_platform_network_create+0x26>
 800a54e:	2502      	movs	r5, #2
 800a550:	e7d0      	b.n	800a4f4 <ai_platform_network_create+0x20>
 800a552:	bf00      	nop
 800a554:	84048403 	.word	0x84048403

0800a558 <ai_platform_network_init>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4a48      	ldr	r2, [pc, #288]	@ (800a680 <ai_platform_network_init+0x128>)
 800a55e:	460b      	mov	r3, r1
 800a560:	6801      	ldr	r1, [r0, #0]
 800a562:	4604      	mov	r4, r0
 800a564:	ea01 0002 	and.w	r0, r1, r2
 800a568:	438a      	bics	r2, r1
 800a56a:	d13b      	bne.n	800a5e4 <ai_platform_network_init+0x8c>
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d078      	beq.n	800a662 <ai_platform_network_init+0x10a>
 800a570:	4a44      	ldr	r2, [pc, #272]	@ (800a684 <ai_platform_network_init+0x12c>)
 800a572:	681d      	ldr	r5, [r3, #0]
 800a574:	4295      	cmp	r5, r2
 800a576:	d10a      	bne.n	800a58e <ai_platform_network_init+0x36>
 800a578:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 800a57c:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 800a580:	4281      	cmp	r1, r0
 800a582:	d03d      	beq.n	800a600 <ai_platform_network_init+0xa8>
 800a584:	2303      	movs	r3, #3
 800a586:	4620      	mov	r0, r4
 800a588:	6123      	str	r3, [r4, #16]
 800a58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58e:	461d      	mov	r5, r3
 800a590:	2101      	movs	r1, #1
 800a592:	4618      	mov	r0, r3
 800a594:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800a598:	f7ff fb94 	bl	8009cc4 <ai_buffer_get_size>
 800a59c:	f105 071c 	add.w	r7, r5, #28
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a5aa:	f7ff fb8b 	bl	8009cc4 <ai_buffer_get_size>
 800a5ae:	2e00      	cmp	r6, #0
 800a5b0:	bf0a      	itet	eq
 800a5b2:	4631      	moveq	r1, r6
 800a5b4:	2101      	movne	r1, #1
 800a5b6:	4635      	moveq	r5, r6
 800a5b8:	b1b0      	cbz	r0, 800a5e8 <ai_platform_network_init+0x90>
 800a5ba:	f1b9 0f00 	cmp.w	r9, #0
 800a5be:	d057      	beq.n	800a670 <ai_platform_network_init+0x118>
 800a5c0:	f04f 0e01 	mov.w	lr, #1
 800a5c4:	f1b8 0f00 	cmp.w	r8, #0
 800a5c8:	d011      	beq.n	800a5ee <ai_platform_network_init+0x96>
 800a5ca:	4b2d      	ldr	r3, [pc, #180]	@ (800a680 <ai_platform_network_init+0x128>)
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d1d8      	bne.n	800a584 <ai_platform_network_init+0x2c>
 800a5d2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 800a5d4:	428b      	cmp	r3, r1
 800a5d6:	d21b      	bcs.n	800a610 <ai_platform_network_init+0xb8>
 800a5d8:	2212      	movs	r2, #18
 800a5da:	2116      	movs	r1, #22
 800a5dc:	f104 000c 	add.w	r0, r4, #12
 800a5e0:	f000 faa2 	bl	800ab28 <core_set_error>
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	e7d0      	b.n	800a58a <ai_platform_network_init+0x32>
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	4686      	mov	lr, r0
 800a5ec:	e7ea      	b.n	800a5c4 <ai_platform_network_init+0x6c>
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	d0eb      	beq.n	800a5ca <ai_platform_network_init+0x72>
 800a5f2:	2212      	movs	r2, #18
 800a5f4:	2110      	movs	r1, #16
 800a5f6:	f104 000c 	add.w	r0, r4, #12
 800a5fa:	f000 fa95 	bl	800ab28 <core_set_error>
 800a5fe:	e7f1      	b.n	800a5e4 <ai_platform_network_init+0x8c>
 800a600:	e9c4 6308 	strd	r6, r3, [r4, #32]
 800a604:	62e5      	str	r5, [r4, #44]	@ 0x2c
 800a606:	4620      	mov	r0, r4
 800a608:	62a2      	str	r2, [r4, #40]	@ 0x28
 800a60a:	f000 fac1 	bl	800ab90 <ai_layers_init_all>
 800a60e:	e7b9      	b.n	800a584 <ai_platform_network_init+0x2c>
 800a610:	b1e1      	cbz	r1, 800a64c <ai_platform_network_init+0xf4>
 800a612:	46ac      	mov	ip, r5
 800a614:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800a618:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a61c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a61e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a620:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a624:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a628:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a62a:	6226      	str	r6, [r4, #32]
 800a62c:	4573      	cmp	r3, lr
 800a62e:	d311      	bcc.n	800a654 <ai_platform_network_init+0xfc>
 800a630:	f1be 0f00 	cmp.w	lr, #0
 800a634:	d007      	beq.n	800a646 <ai_platform_network_init+0xee>
 800a636:	463e      	mov	r6, r7
 800a638:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800a63a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a63c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a63e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a642:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a646:	ea4f 420e 	mov.w	r2, lr, lsl #16
 800a64a:	e7dc      	b.n	800a606 <ai_platform_network_init+0xae>
 800a64c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a64e:	6221      	str	r1, [r4, #32]
 800a650:	4573      	cmp	r3, lr
 800a652:	d2ed      	bcs.n	800a630 <ai_platform_network_init+0xd8>
 800a654:	2213      	movs	r2, #19
 800a656:	2116      	movs	r1, #22
 800a658:	f104 000c 	add.w	r0, r4, #12
 800a65c:	f000 fa64 	bl	800ab28 <core_set_error>
 800a660:	e7c0      	b.n	800a5e4 <ai_platform_network_init+0x8c>
 800a662:	2211      	movs	r2, #17
 800a664:	2110      	movs	r1, #16
 800a666:	f104 000c 	add.w	r0, r4, #12
 800a66a:	f000 fa5d 	bl	800ab28 <core_set_error>
 800a66e:	e7b9      	b.n	800a5e4 <ai_platform_network_init+0x8c>
 800a670:	2213      	movs	r2, #19
 800a672:	2110      	movs	r1, #16
 800a674:	f104 000c 	add.w	r0, r4, #12
 800a678:	f000 fa56 	bl	800ab28 <core_set_error>
 800a67c:	e7b2      	b.n	800a5e4 <ai_platform_network_init+0x8c>
 800a67e:	bf00      	nop
 800a680:	a1c00100 	.word	0xa1c00100
 800a684:	a1facade 	.word	0xa1facade

0800a688 <ai_platform_network_post_init>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4b14      	ldr	r3, [pc, #80]	@ (800a6dc <ai_platform_network_post_init+0x54>)
 800a68c:	6802      	ldr	r2, [r0, #0]
 800a68e:	ea02 0103 	and.w	r1, r2, r3
 800a692:	4393      	bics	r3, r2
 800a694:	d10c      	bne.n	800a6b0 <ai_platform_network_post_init+0x28>
 800a696:	6903      	ldr	r3, [r0, #16]
 800a698:	4604      	mov	r4, r0
 800a69a:	079b      	lsls	r3, r3, #30
 800a69c:	d503      	bpl.n	800a6a6 <ai_platform_network_post_init+0x1e>
 800a69e:	428a      	cmp	r2, r1
 800a6a0:	d008      	beq.n	800a6b4 <ai_platform_network_post_init+0x2c>
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	bd38      	pop	{r3, r4, r5, pc}
 800a6a6:	2210      	movs	r2, #16
 800a6a8:	2111      	movs	r1, #17
 800a6aa:	300c      	adds	r0, #12
 800a6ac:	f000 fa3c 	bl	800ab28 <core_set_error>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	f000 fa7c 	bl	800abb0 <ai_layers_post_init_all>
 800a6b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0f1      	beq.n	800a6a2 <ai_platform_network_post_init+0x1a>
 800a6be:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	d0ee      	beq.n	800a6a2 <ai_platform_network_post_init+0x1a>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a6ca:	4798      	blx	r3
 800a6cc:	692b      	ldr	r3, [r5, #16]
 800a6ce:	42ab      	cmp	r3, r5
 800a6d0:	d0e7      	beq.n	800a6a2 <ai_platform_network_post_init+0x1a>
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0e5      	beq.n	800a6a2 <ai_platform_network_post_init+0x1a>
 800a6d6:	461d      	mov	r5, r3
 800a6d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6da:	e7f3      	b.n	800a6c4 <ai_platform_network_post_init+0x3c>
 800a6dc:	a1c00100 	.word	0xa1c00100

0800a6e0 <ai_platform_network_process>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	4bb7      	ldr	r3, [pc, #732]	@ (800a9c4 <ai_platform_network_process+0x2e4>)
 800a6e6:	4690      	mov	r8, r2
 800a6e8:	6802      	ldr	r2, [r0, #0]
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	4393      	bics	r3, r2
 800a6ee:	f040 812d 	bne.w	800a94c <ai_platform_network_process+0x26c>
 800a6f2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 811c 	beq.w	800a934 <ai_platform_network_process+0x254>
 800a6fc:	2600      	movs	r6, #0
 800a6fe:	6903      	ldr	r3, [r0, #16]
 800a700:	f8d0 9034 	ldr.w	r9, [r0, #52]	@ 0x34
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	2b03      	cmp	r3, #3
 800a70a:	6186      	str	r6, [r0, #24]
 800a70c:	f040 8128 	bne.w	800a960 <ai_platform_network_process+0x280>
 800a710:	2900      	cmp	r1, #0
 800a712:	f000 8115 	beq.w	800a940 <ai_platform_network_process+0x260>
 800a716:	f1b9 0f00 	cmp.w	r9, #0
 800a71a:	f000 8111 	beq.w	800a940 <ai_platform_network_process+0x260>
 800a71e:	f8b9 3000 	ldrh.w	r3, [r9]
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 810c 	beq.w	800a940 <ai_platform_network_process+0x260>
 800a728:	460c      	mov	r4, r1
 800a72a:	698b      	ldr	r3, [r1, #24]
 800a72c:	e9cd 0802 	strd	r0, r8, [sp, #8]
 800a730:	f8d3 b000 	ldr.w	fp, [r3]
 800a734:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d071      	beq.n	800a820 <ai_platform_network_process+0x140>
 800a73c:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800a740:	2d00      	cmp	r5, #0
 800a742:	d06d      	beq.n	800a820 <ai_platform_network_process+0x140>
 800a744:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a748:	f8d3 a000 	ldr.w	sl, [r3]
 800a74c:	0133      	lsls	r3, r6, #4
 800a74e:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	f000 81b8 	beq.w	800aac8 <ai_platform_network_process+0x3e8>
 800a758:	69ab      	ldr	r3, [r5, #24]
 800a75a:	2101      	movs	r1, #1
 800a75c:	4620      	mov	r0, r4
 800a75e:	685f      	ldr	r7, [r3, #4]
 800a760:	f7ff fab0 	bl	8009cc4 <ai_buffer_get_size>
 800a764:	4287      	cmp	r7, r0
 800a766:	f0c0 8102 	bcc.w	800a96e <ai_platform_network_process+0x28e>
 800a76a:	68e8      	ldr	r0, [r5, #12]
 800a76c:	69a1      	ldr	r1, [r4, #24]
 800a76e:	68c2      	ldr	r2, [r0, #12]
 800a770:	68cb      	ldr	r3, [r1, #12]
 800a772:	429a      	cmp	r2, r3
 800a774:	f040 80fb 	bne.w	800a96e <ai_platform_network_process+0x28e>
 800a778:	6882      	ldr	r2, [r0, #8]
 800a77a:	688b      	ldr	r3, [r1, #8]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	f040 80f6 	bne.w	800a96e <ai_platform_network_process+0x28e>
 800a782:	6842      	ldr	r2, [r0, #4]
 800a784:	684b      	ldr	r3, [r1, #4]
 800a786:	429a      	cmp	r2, r3
 800a788:	f040 80f1 	bne.w	800a96e <ai_platform_network_process+0x28e>
 800a78c:	69ab      	ldr	r3, [r5, #24]
 800a78e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a792:	f001 ff35 	bl	800c600 <ai_array_get_data_byte_size>
 800a796:	4603      	mov	r3, r0
 800a798:	4628      	mov	r0, r5
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	f001 ff58 	bl	800c650 <get_tensor_byte_size>
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	4283      	cmp	r3, r0
 800a7a4:	f0c0 80e3 	bcc.w	800a96e <ai_platform_network_process+0x28e>
 800a7a8:	69ab      	ldr	r3, [r5, #24]
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	f001 feb8 	bl	800c520 <ai_array_to_buffer_fmt>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	4058      	eors	r0, r3
 800a7b4:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 800a7b8:	f040 8190 	bne.w	800aadc <ai_platform_network_process+0x3fc>
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 8182 	beq.w	800aac8 <ai_platform_network_process+0x3e8>
 800a7c4:	69a3      	ldr	r3, [r4, #24]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 817f 	beq.w	800aacc <ai_platform_network_process+0x3ec>
 800a7ce:	459b      	cmp	fp, r3
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	bf38      	it	cc
 800a7d4:	469b      	movcc	fp, r3
 800a7d6:	f001 ff3b 	bl	800c650 <get_tensor_byte_size>
 800a7da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7de:	69a3      	ldr	r3, [r4, #24]
 800a7e0:	0132      	lsls	r2, r6, #4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3601      	adds	r6, #1
 800a7e6:	fb00 f303 	mul.w	r3, r0, r3
 800a7ea:	f8c8 300c 	str.w	r3, [r8, #12]
 800a7ee:	6861      	ldr	r1, [r4, #4]
 800a7f0:	341c      	adds	r4, #28
 800a7f2:	440b      	add	r3, r1
 800a7f4:	f8c8 1004 	str.w	r1, [r8, #4]
 800a7f8:	f84a 3002 	str.w	r3, [sl, r2]
 800a7fc:	69a8      	ldr	r0, [r5, #24]
 800a7fe:	6803      	ldr	r3, [r0, #0]
 800a800:	009a      	lsls	r2, r3, #2
 800a802:	f100 80a7 	bmi.w	800a954 <ai_platform_network_process+0x274>
 800a806:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a80a:	1a9b      	subs	r3, r3, r2
 800a80c:	4419      	add	r1, r3
 800a80e:	6081      	str	r1, [r0, #8]
 800a810:	69ab      	ldr	r3, [r5, #24]
 800a812:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a816:	60da      	str	r2, [r3, #12]
 800a818:	f8b9 3000 	ldrh.w	r3, [r9]
 800a81c:	42b3      	cmp	r3, r6
 800a81e:	d889      	bhi.n	800a734 <ai_platform_network_process+0x54>
 800a820:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 800a824:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a826:	f1b8 0f00 	cmp.w	r8, #0
 800a82a:	f000 80b5 	beq.w	800a998 <ai_platform_network_process+0x2b8>
 800a82e:	2b01      	cmp	r3, #1
 800a830:	f240 80a5 	bls.w	800a97e <ai_platform_network_process+0x29e>
 800a834:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 800a838:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 809e 	beq.w	800a97e <ai_platform_network_process+0x29e>
 800a842:	4645      	mov	r5, r8
 800a844:	2600      	movs	r6, #0
 800a846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 80a3 	beq.w	800a996 <ai_platform_network_process+0x2b6>
 800a850:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a854:	2c00      	cmp	r4, #0
 800a856:	f000 809e 	beq.w	800a996 <ai_platform_network_process+0x2b6>
 800a85a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a85e:	f8d3 a000 	ldr.w	sl, [r3]
 800a862:	0133      	lsls	r3, r6, #4
 800a864:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	f000 813f 	beq.w	800aaec <ai_platform_network_process+0x40c>
 800a86e:	69a3      	ldr	r3, [r4, #24]
 800a870:	2101      	movs	r1, #1
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	4628      	mov	r0, r5
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	f7ff fa24 	bl	8009cc4 <ai_buffer_get_size>
 800a87c:	9b01      	ldr	r3, [sp, #4]
 800a87e:	4283      	cmp	r3, r0
 800a880:	d37d      	bcc.n	800a97e <ai_platform_network_process+0x29e>
 800a882:	68e0      	ldr	r0, [r4, #12]
 800a884:	69a9      	ldr	r1, [r5, #24]
 800a886:	68c2      	ldr	r2, [r0, #12]
 800a888:	68cb      	ldr	r3, [r1, #12]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d177      	bne.n	800a97e <ai_platform_network_process+0x29e>
 800a88e:	6882      	ldr	r2, [r0, #8]
 800a890:	688b      	ldr	r3, [r1, #8]
 800a892:	429a      	cmp	r2, r3
 800a894:	d173      	bne.n	800a97e <ai_platform_network_process+0x29e>
 800a896:	6842      	ldr	r2, [r0, #4]
 800a898:	684b      	ldr	r3, [r1, #4]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d16f      	bne.n	800a97e <ai_platform_network_process+0x29e>
 800a89e:	69a3      	ldr	r3, [r4, #24]
 800a8a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8a4:	f001 feac 	bl	800c600 <ai_array_get_data_byte_size>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f001 fecf 	bl	800c650 <get_tensor_byte_size>
 800a8b2:	9b01      	ldr	r3, [sp, #4]
 800a8b4:	4283      	cmp	r3, r0
 800a8b6:	d362      	bcc.n	800a97e <ai_platform_network_process+0x29e>
 800a8b8:	69a3      	ldr	r3, [r4, #24]
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	f001 fe30 	bl	800c520 <ai_array_to_buffer_fmt>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	4043      	eors	r3, r0
 800a8c4:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800a8c8:	f040 8117 	bne.w	800aafa <ai_platform_network_process+0x41a>
 800a8cc:	686b      	ldr	r3, [r5, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 810c 	beq.w	800aaec <ai_platform_network_process+0x40c>
 800a8d4:	69ab      	ldr	r3, [r5, #24]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 8115 	beq.w	800ab08 <ai_platform_network_process+0x428>
 800a8de:	459b      	cmp	fp, r3
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	bf38      	it	cc
 800a8e4:	469b      	movcc	fp, r3
 800a8e6:	f001 feb3 	bl	800c650 <get_tensor_byte_size>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8f0:	69aa      	ldr	r2, [r5, #24]
 800a8f2:	351c      	adds	r5, #28
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	fb02 f303 	mul.w	r3, r2, r3
 800a8fa:	f8c8 300c 	str.w	r3, [r8, #12]
 800a8fe:	f855 1c18 	ldr.w	r1, [r5, #-24]
 800a902:	0132      	lsls	r2, r6, #4
 800a904:	440b      	add	r3, r1
 800a906:	f8c8 1004 	str.w	r1, [r8, #4]
 800a90a:	f84a 3002 	str.w	r3, [sl, r2]
 800a90e:	69a0      	ldr	r0, [r4, #24]
 800a910:	3601      	adds	r6, #1
 800a912:	6803      	ldr	r3, [r0, #0]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	d439      	bmi.n	800a98c <ai_platform_network_process+0x2ac>
 800a918:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a91c:	1a9b      	subs	r3, r3, r2
 800a91e:	4419      	add	r1, r3
 800a920:	6081      	str	r1, [r0, #8]
 800a922:	69a3      	ldr	r3, [r4, #24]
 800a924:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a928:	60da      	str	r2, [r3, #12]
 800a92a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a92e:	429e      	cmp	r6, r3
 800a930:	d389      	bcc.n	800a846 <ai_platform_network_process+0x166>
 800a932:	e030      	b.n	800a996 <ai_platform_network_process+0x2b6>
 800a934:	6902      	ldr	r2, [r0, #16]
 800a936:	6183      	str	r3, [r0, #24]
 800a938:	f002 0203 	and.w	r2, r2, #3
 800a93c:	2a03      	cmp	r2, #3
 800a93e:	d10f      	bne.n	800a960 <ai_platform_network_process+0x280>
 800a940:	2217      	movs	r2, #23
 800a942:	2112      	movs	r1, #18
 800a944:	f107 000c 	add.w	r0, r7, #12
 800a948:	f000 f8ee 	bl	800ab28 <core_set_error>
 800a94c:	2000      	movs	r0, #0
 800a94e:	b005      	add	sp, #20
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	f8b9 3000 	ldrh.w	r3, [r9]
 800a958:	429e      	cmp	r6, r3
 800a95a:	f4ff aeeb 	bcc.w	800a734 <ai_platform_network_process+0x54>
 800a95e:	e75f      	b.n	800a820 <ai_platform_network_process+0x140>
 800a960:	2230      	movs	r2, #48	@ 0x30
 800a962:	2111      	movs	r1, #17
 800a964:	f107 000c 	add.w	r0, r7, #12
 800a968:	f000 f8de 	bl	800ab28 <core_set_error>
 800a96c:	e7ee      	b.n	800a94c <ai_platform_network_process+0x26c>
 800a96e:	9f02      	ldr	r7, [sp, #8]
 800a970:	2218      	movs	r2, #24
 800a972:	2112      	movs	r1, #18
 800a974:	f107 000c 	add.w	r0, r7, #12
 800a978:	f000 f8d6 	bl	800ab28 <core_set_error>
 800a97c:	e7e6      	b.n	800a94c <ai_platform_network_process+0x26c>
 800a97e:	2218      	movs	r2, #24
 800a980:	2113      	movs	r1, #19
 800a982:	f107 000c 	add.w	r0, r7, #12
 800a986:	f000 f8cf 	bl	800ab28 <core_set_error>
 800a98a:	e7df      	b.n	800a94c <ai_platform_network_process+0x26c>
 800a98c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a990:	429e      	cmp	r6, r3
 800a992:	f4ff af58 	bcc.w	800a846 <ai_platform_network_process+0x166>
 800a996:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a998:	fa1f fb8b 	uxth.w	fp, fp
 800a99c:	f8a7 b018 	strh.w	fp, [r7, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 808b 	beq.w	800aabc <ai_platform_network_process+0x3dc>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800a9aa:	f000 808a 	beq.w	800aac2 <ai_platform_network_process+0x3e2>
 800a9ae:	f106 080c 	add.w	r8, r6, #12
 800a9b2:	8b78      	ldrh	r0, [r7, #26]
 800a9b4:	4583      	cmp	fp, r0
 800a9b6:	d9ca      	bls.n	800a94e <ai_platform_network_process+0x26e>
 800a9b8:	4645      	mov	r5, r8
 800a9ba:	46bb      	mov	fp, r7
 800a9bc:	f04f 0800 	mov.w	r8, #0
 800a9c0:	b9b6      	cbnz	r6, 800a9f0 <ai_platform_network_process+0x310>
 800a9c2:	e02e      	b.n	800aa22 <ai_platform_network_process+0x342>
 800a9c4:	a1c00100 	.word	0xa1c00100
 800a9c8:	68df      	ldr	r7, [r3, #12]
 800a9ca:	1bc9      	subs	r1, r1, r7
 800a9cc:	4408      	add	r0, r1
 800a9ce:	6098      	str	r0, [r3, #8]
 800a9d0:	6993      	ldr	r3, [r2, #24]
 800a9d2:	6862      	ldr	r2, [r4, #4]
 800a9d4:	60da      	str	r2, [r3, #12]
 800a9d6:	f859 200a 	ldr.w	r2, [r9, sl]
 800a9da:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a9de:	440b      	add	r3, r1
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	bf28      	it	cs
 800a9e4:	68e3      	ldrcs	r3, [r4, #12]
 800a9e6:	f108 0801 	add.w	r8, r8, #1
 800a9ea:	bf28      	it	cs
 800a9ec:	1ad3      	subcs	r3, r2, r3
 800a9ee:	6063      	str	r3, [r4, #4]
 800a9f0:	8833      	ldrh	r3, [r6, #0]
 800a9f2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a9f6:	4543      	cmp	r3, r8
 800a9f8:	d913      	bls.n	800aa22 <ai_platform_network_process+0x342>
 800a9fa:	6873      	ldr	r3, [r6, #4]
 800a9fc:	b18b      	cbz	r3, 800aa22 <ai_platform_network_process+0x342>
 800a9fe:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800aa02:	b172      	cbz	r2, 800aa22 <ai_platform_network_process+0x342>
 800aa04:	68b1      	ldr	r1, [r6, #8]
 800aa06:	6993      	ldr	r3, [r2, #24]
 800aa08:	f8d1 9000 	ldr.w	r9, [r1]
 800aa0c:	681f      	ldr	r7, [r3, #0]
 800aa0e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800aa12:	00bf      	lsls	r7, r7, #2
 800aa14:	6860      	ldr	r0, [r4, #4]
 800aa16:	6899      	ldr	r1, [r3, #8]
 800aa18:	d5d6      	bpl.n	800a9c8 <ai_platform_network_process+0x2e8>
 800aa1a:	68a2      	ldr	r2, [r4, #8]
 800aa1c:	f001 fce2 	bl	800c3e4 <st_int8_copy>
 800aa20:	e7d9      	b.n	800a9d6 <ai_platform_network_process+0x2f6>
 800aa22:	4658      	mov	r0, fp
 800aa24:	f000 f8e0 	bl	800abe8 <ai_layers_forward_all>
 800aa28:	2400      	movs	r4, #0
 800aa2a:	b9ad      	cbnz	r5, 800aa58 <ai_platform_network_process+0x378>
 800aa2c:	e039      	b.n	800aaa2 <ai_platform_network_process+0x3c2>
 800aa2e:	f859 300a 	ldr.w	r3, [r9, sl]
 800aa32:	4411      	add	r1, r2
 800aa34:	4299      	cmp	r1, r3
 800aa36:	bf24      	itt	cs
 800aa38:	f8d8 100c 	ldrcs.w	r1, [r8, #12]
 800aa3c:	1a59      	subcs	r1, r3, r1
 800aa3e:	f8c8 1004 	str.w	r1, [r8, #4]
 800aa42:	6982      	ldr	r2, [r0, #24]
 800aa44:	e9d2 3702 	ldrd	r3, r7, [r2, #8]
 800aa48:	1bdb      	subs	r3, r3, r7
 800aa4a:	4419      	add	r1, r3
 800aa4c:	6091      	str	r1, [r2, #8]
 800aa4e:	6983      	ldr	r3, [r0, #24]
 800aa50:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aa54:	60da      	str	r2, [r3, #12]
 800aa56:	3401      	adds	r4, #1
 800aa58:	882b      	ldrh	r3, [r5, #0]
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	d921      	bls.n	800aaa2 <ai_platform_network_process+0x3c2>
 800aa5e:	686b      	ldr	r3, [r5, #4]
 800aa60:	b1fb      	cbz	r3, 800aaa2 <ai_platform_network_process+0x3c2>
 800aa62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800aa66:	b1e0      	cbz	r0, 800aaa2 <ai_platform_network_process+0x3c2>
 800aa68:	68aa      	ldr	r2, [r5, #8]
 800aa6a:	6983      	ldr	r3, [r0, #24]
 800aa6c:	f8d2 9000 	ldr.w	r9, [r2]
 800aa70:	681f      	ldr	r7, [r3, #0]
 800aa72:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800aa76:	00bf      	lsls	r7, r7, #2
 800aa78:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800aa7c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800aa80:	d5d5      	bpl.n	800aa2e <ai_platform_network_process+0x34e>
 800aa82:	6898      	ldr	r0, [r3, #8]
 800aa84:	f001 fcae 	bl	800c3e4 <st_int8_copy>
 800aa88:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800aa8c:	f859 200a 	ldr.w	r2, [r9, sl]
 800aa90:	440b      	add	r3, r1
 800aa92:	4293      	cmp	r3, r2
 800aa94:	bf24      	itt	cs
 800aa96:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800aa9a:	1ad3      	subcs	r3, r2, r3
 800aa9c:	f8c8 3004 	str.w	r3, [r8, #4]
 800aaa0:	e7d9      	b.n	800aa56 <ai_platform_network_process+0x376>
 800aaa2:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 800aaa6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800aaaa:	3001      	adds	r0, #1
 800aaac:	b280      	uxth	r0, r0
 800aaae:	4283      	cmp	r3, r0
 800aab0:	f8ab 001a 	strh.w	r0, [fp, #26]
 800aab4:	d882      	bhi.n	800a9bc <ai_platform_network_process+0x2dc>
 800aab6:	b005      	add	sp, #20
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	461e      	mov	r6, r3
 800aabe:	4698      	mov	r8, r3
 800aac0:	e777      	b.n	800a9b2 <ai_platform_network_process+0x2d2>
 800aac2:	f04f 0800 	mov.w	r8, #0
 800aac6:	e774      	b.n	800a9b2 <ai_platform_network_process+0x2d2>
 800aac8:	9f02      	ldr	r7, [sp, #8]
 800aaca:	e739      	b.n	800a940 <ai_platform_network_process+0x260>
 800aacc:	9f02      	ldr	r7, [sp, #8]
 800aace:	2221      	movs	r2, #33	@ 0x21
 800aad0:	2112      	movs	r1, #18
 800aad2:	f107 000c 	add.w	r0, r7, #12
 800aad6:	f000 f827 	bl	800ab28 <core_set_error>
 800aada:	e737      	b.n	800a94c <ai_platform_network_process+0x26c>
 800aadc:	9f02      	ldr	r7, [sp, #8]
 800aade:	2219      	movs	r2, #25
 800aae0:	2112      	movs	r1, #18
 800aae2:	f107 000c 	add.w	r0, r7, #12
 800aae6:	f000 f81f 	bl	800ab28 <core_set_error>
 800aaea:	e72f      	b.n	800a94c <ai_platform_network_process+0x26c>
 800aaec:	2217      	movs	r2, #23
 800aaee:	2113      	movs	r1, #19
 800aaf0:	f107 000c 	add.w	r0, r7, #12
 800aaf4:	f000 f818 	bl	800ab28 <core_set_error>
 800aaf8:	e728      	b.n	800a94c <ai_platform_network_process+0x26c>
 800aafa:	2219      	movs	r2, #25
 800aafc:	2113      	movs	r1, #19
 800aafe:	f107 000c 	add.w	r0, r7, #12
 800ab02:	f000 f811 	bl	800ab28 <core_set_error>
 800ab06:	e721      	b.n	800a94c <ai_platform_network_process+0x26c>
 800ab08:	2221      	movs	r2, #33	@ 0x21
 800ab0a:	2113      	movs	r1, #19
 800ab0c:	f107 000c 	add.w	r0, r7, #12
 800ab10:	f000 f80a 	bl	800ab28 <core_set_error>
 800ab14:	e71a      	b.n	800a94c <ai_platform_network_process+0x26c>
 800ab16:	bf00      	nop

0800ab18 <core_init>:
 800ab18:	2001      	movs	r0, #1
 800ab1a:	4770      	bx	lr

0800ab1c <core_get_error>:
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2200      	movs	r2, #0
 800ab20:	6800      	ldr	r0, [r0, #0]
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop

0800ab28 <core_set_error>:
 800ab28:	4603      	mov	r3, r0
 800ab2a:	7800      	ldrb	r0, [r0, #0]
 800ab2c:	b108      	cbz	r0, 800ab32 <core_set_error+0xa>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	4770      	bx	lr
 800ab32:	7019      	strb	r1, [r3, #0]
 800ab34:	6819      	ldr	r1, [r3, #0]
 800ab36:	2001      	movs	r0, #1
 800ab38:	f362 211f 	bfi	r1, r2, #8, #24
 800ab3c:	6019      	str	r1, [r3, #0]
 800ab3e:	4770      	bx	lr

0800ab40 <ai_check_custom_types>:
 800ab40:	4b12      	ldr	r3, [pc, #72]	@ (800ab8c <ai_check_custom_types+0x4c>)
 800ab42:	b082      	sub	sp, #8
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	b118      	cbz	r0, 800ab50 <ai_check_custom_types+0x10>
 800ab48:	7803      	ldrb	r3, [r0, #0]
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d002      	beq.n	800ab54 <ai_check_custom_types+0x14>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	b002      	add	sp, #8
 800ab52:	4770      	bx	lr
 800ab54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d004      	beq.n	800ab66 <ai_check_custom_types+0x26>
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	f080 0001 	eor.w	r0, r0, #1
 800ab62:	b002      	add	sp, #8
 800ab64:	4770      	bx	lr
 800ab66:	7842      	ldrb	r2, [r0, #1]
 800ab68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d1f4      	bne.n	800ab5c <ai_check_custom_types+0x1c>
 800ab72:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ab76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d1ee      	bne.n	800ab5c <ai_check_custom_types+0x1c>
 800ab7e:	7842      	ldrb	r2, [r0, #1]
 800ab80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d1e9      	bne.n	800ab5c <ai_check_custom_types+0x1c>
 800ab88:	2000      	movs	r0, #0
 800ab8a:	e7e8      	b.n	800ab5e <ai_check_custom_types+0x1e>
 800ab8c:	84048403 	.word	0x84048403

0800ab90 <ai_layers_init_all>:
 800ab90:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab92:	4601      	mov	r1, r0
 800ab94:	b14b      	cbz	r3, 800abaa <ai_layers_init_all+0x1a>
 800ab96:	2000      	movs	r0, #0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	60d9      	str	r1, [r3, #12]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	3001      	adds	r0, #1
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d003      	beq.n	800abac <ai_layers_init_all+0x1c>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1f7      	bne.n	800ab98 <ai_layers_init_all+0x8>
 800aba8:	4770      	bx	lr
 800abaa:	4618      	mov	r0, r3
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop

0800abb0 <ai_layers_post_init_all>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800abb4:	b1ac      	cbz	r4, 800abe2 <ai_layers_post_init_all+0x32>
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	2500      	movs	r5, #0
 800abba:	07db      	lsls	r3, r3, #31
 800abbc:	d504      	bpl.n	800abc8 <ai_layers_post_init_all+0x18>
 800abbe:	6a23      	ldr	r3, [r4, #32]
 800abc0:	b113      	cbz	r3, 800abc8 <ai_layers_post_init_all+0x18>
 800abc2:	4620      	mov	r0, r4
 800abc4:	4798      	blx	r3
 800abc6:	3501      	adds	r5, #1
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	42a3      	cmp	r3, r4
 800abcc:	d007      	beq.n	800abde <ai_layers_post_init_all+0x2e>
 800abce:	b133      	cbz	r3, 800abde <ai_layers_post_init_all+0x2e>
 800abd0:	461c      	mov	r4, r3
 800abd2:	6863      	ldr	r3, [r4, #4]
 800abd4:	07db      	lsls	r3, r3, #31
 800abd6:	d4f2      	bmi.n	800abbe <ai_layers_post_init_all+0xe>
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	42a3      	cmp	r3, r4
 800abdc:	d1f7      	bne.n	800abce <ai_layers_post_init_all+0x1e>
 800abde:	4628      	mov	r0, r5
 800abe0:	bd38      	pop	{r3, r4, r5, pc}
 800abe2:	4625      	mov	r5, r4
 800abe4:	4628      	mov	r0, r5
 800abe6:	bd38      	pop	{r3, r4, r5, pc}

0800abe8 <ai_layers_forward_all>:
 800abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abec:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800abee:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800abf2:	4604      	mov	r4, r0
 800abf4:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800abf6:	f1b8 0f00 	cmp.w	r8, #0
 800abfa:	d02b      	beq.n	800ac54 <ai_layers_forward_all+0x6c>
 800abfc:	b335      	cbz	r5, 800ac4c <ai_layers_forward_all+0x64>
 800abfe:	4629      	mov	r1, r5
 800ac00:	2001      	movs	r0, #1
 800ac02:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac04:	47c0      	blx	r8
 800ac06:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800ac08:	b306      	cbz	r6, 800ac4c <ai_layers_forward_all+0x64>
 800ac0a:	2700      	movs	r7, #0
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac10:	2002      	movs	r0, #2
 800ac12:	47c0      	blx	r8
 800ac14:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800ac16:	4628      	mov	r0, r5
 800ac18:	696b      	ldr	r3, [r5, #20]
 800ac1a:	4798      	blx	r3
 800ac1c:	692e      	ldr	r6, [r5, #16]
 800ac1e:	42b5      	cmp	r5, r6
 800ac20:	d00a      	beq.n	800ac38 <ai_layers_forward_all+0x50>
 800ac22:	2003      	movs	r0, #3
 800ac24:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac26:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ac28:	47c0      	blx	r8
 800ac2a:	3701      	adds	r7, #1
 800ac2c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	d1ec      	bne.n	800ac0c <ai_layers_forward_all+0x24>
 800ac32:	4638      	mov	r0, r7
 800ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac38:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac3a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ac3c:	2003      	movs	r0, #3
 800ac3e:	47c0      	blx	r8
 800ac40:	2300      	movs	r3, #0
 800ac42:	3701      	adds	r7, #1
 800ac44:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ac46:	4638      	mov	r0, r7
 800ac48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac4c:	2700      	movs	r7, #0
 800ac4e:	4638      	mov	r0, r7
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	d0f9      	beq.n	800ac4c <ai_layers_forward_all+0x64>
 800ac58:	4647      	mov	r7, r8
 800ac5a:	696b      	ldr	r3, [r5, #20]
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	4798      	blx	r3
 800ac60:	462b      	mov	r3, r5
 800ac62:	692d      	ldr	r5, [r5, #16]
 800ac64:	429d      	cmp	r5, r3
 800ac66:	d004      	beq.n	800ac72 <ai_layers_forward_all+0x8a>
 800ac68:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800ac6a:	3701      	adds	r7, #1
 800ac6c:	2d00      	cmp	r5, #0
 800ac6e:	d1f4      	bne.n	800ac5a <ai_layers_forward_all+0x72>
 800ac70:	e7df      	b.n	800ac32 <ai_layers_forward_all+0x4a>
 800ac72:	2300      	movs	r3, #0
 800ac74:	3701      	adds	r7, #1
 800ac76:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ac78:	e7db      	b.n	800ac32 <ai_layers_forward_all+0x4a>
 800ac7a:	bf00      	nop

0800ac7c <forward_conv2d_if32of32wf32>:
 800ac7c:	6982      	ldr	r2, [r0, #24]
 800ac7e:	8813      	ldrh	r3, [r2, #0]
 800ac80:	b90b      	cbnz	r3, 800ac86 <forward_conv2d_if32of32wf32+0xa>
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	deff      	udf	#255	@ 0xff
 800ac86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	6857      	ldr	r7, [r2, #4]
 800ac8c:	4686      	mov	lr, r0
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	b0a3      	sub	sp, #140	@ 0x8c
 800ac92:	b102      	cbz	r2, 800ac96 <forward_conv2d_if32of32wf32+0x1a>
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	f000 80bf 	beq.w	800ae1a <forward_conv2d_if32of32wf32+0x19e>
 800ac9c:	6938      	ldr	r0, [r7, #16]
 800ac9e:	b100      	cbz	r0, 800aca2 <forward_conv2d_if32of32wf32+0x26>
 800aca0:	6800      	ldr	r0, [r0, #0]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	f000 80b4 	beq.w	800ae10 <forward_conv2d_if32of32wf32+0x194>
 800aca8:	69fe      	ldr	r6, [r7, #28]
 800acaa:	2e00      	cmp	r6, #0
 800acac:	f000 80b3 	beq.w	800ae16 <forward_conv2d_if32of32wf32+0x19a>
 800acb0:	8b39      	ldrh	r1, [r7, #24]
 800acb2:	6834      	ldr	r4, [r6, #0]
 800acb4:	2901      	cmp	r1, #1
 800acb6:	f240 80b3 	bls.w	800ae20 <forward_conv2d_if32of32wf32+0x1a4>
 800acba:	6876      	ldr	r6, [r6, #4]
 800acbc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800acc0:	6992      	ldr	r2, [r2, #24]
 800acc2:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800acc6:	6892      	ldr	r2, [r2, #8]
 800acc8:	68e1      	ldr	r1, [r4, #12]
 800acca:	9220      	str	r2, [sp, #128]	@ 0x80
 800accc:	69a2      	ldr	r2, [r4, #24]
 800acce:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800acd2:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 800acd6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800acd8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800acdc:	e9de 5a0c 	ldrd	r5, sl, [lr, #48]	@ 0x30
 800ace0:	9415      	str	r4, [sp, #84]	@ 0x54
 800ace2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ace6:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 800acea:	9416      	str	r4, [sp, #88]	@ 0x58
 800acec:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800acf0:	9417      	str	r4, [sp, #92]	@ 0x5c
 800acf2:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800acf6:	9418      	str	r4, [sp, #96]	@ 0x60
 800acf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acfc:	9419      	str	r4, [sp, #100]	@ 0x64
 800acfe:	f8be 402c 	ldrh.w	r4, [lr, #44]	@ 0x2c
 800ad02:	941a      	str	r4, [sp, #104]	@ 0x68
 800ad04:	f8de 401c 	ldr.w	r4, [lr, #28]
 800ad08:	941f      	str	r4, [sp, #124]	@ 0x7c
 800ad0a:	f8bc 4000 	ldrh.w	r4, [ip]
 800ad0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ad10:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 800ad14:	941c      	str	r4, [sp, #112]	@ 0x70
 800ad16:	b2ac      	uxth	r4, r5
 800ad18:	e9d1 9801 	ldrd	r9, r8, [r1, #4]
 800ad1c:	941d      	str	r4, [sp, #116]	@ 0x74
 800ad1e:	fa1f f48a 	uxth.w	r4, sl
 800ad22:	6891      	ldr	r1, [r2, #8]
 800ad24:	941e      	str	r4, [sp, #120]	@ 0x78
 800ad26:	b10e      	cbz	r6, 800ad2c <forward_conv2d_if32of32wf32+0xb0>
 800ad28:	69b6      	ldr	r6, [r6, #24]
 800ad2a:	68b6      	ldr	r6, [r6, #8]
 800ad2c:	6980      	ldr	r0, [r0, #24]
 800ad2e:	fa1f f48a 	uxth.w	r4, sl
 800ad32:	6880      	ldr	r0, [r0, #8]
 800ad34:	b2ad      	uxth	r5, r5
 800ad36:	3c01      	subs	r4, #1
 800ad38:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad3a:	f108 30ff 	add.w	r0, r8, #4294967295
 800ad3e:	fb00 8404 	mla	r4, r0, r4, r8
 800ad42:	3d01      	subs	r5, #1
 800ad44:	f109 30ff 	add.w	r0, r9, #4294967295
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	fb00 9505 	mla	r5, r0, r5, r9
 800ad4e:	d074      	beq.n	800ae3a <forward_conv2d_if32of32wf32+0x1be>
 800ad50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d03e      	beq.n	800add4 <forward_conv2d_if32of32wf32+0x158>
 800ad56:	f8d3 a000 	ldr.w	sl, [r3]
 800ad5a:	f1ba 0f00 	cmp.w	sl, #0
 800ad5e:	d003      	beq.n	800ad68 <forward_conv2d_if32of32wf32+0xec>
 800ad60:	f8da 0018 	ldr.w	r0, [sl, #24]
 800ad64:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800ad68:	6858      	ldr	r0, [r3, #4]
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d033      	beq.n	800add6 <forward_conv2d_if32of32wf32+0x15a>
 800ad6e:	6983      	ldr	r3, [r0, #24]
 800ad70:	f8d2 c000 	ldr.w	ip, [r2]
 800ad74:	689f      	ldr	r7, [r3, #8]
 800ad76:	f3cc 4343 	ubfx	r3, ip, #17, #4
 800ad7a:	2b08      	cmp	r3, #8
 800ad7c:	d052      	beq.n	800ae24 <forward_conv2d_if32of32wf32+0x1a8>
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	bf08      	it	eq
 800ad82:	460f      	moveq	r7, r1
 800ad84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ad86:	463a      	mov	r2, r7
 800ad88:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 800ad8c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ad8e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ad90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad92:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ad94:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800ad96:	e9cd 8308 	strd	r8, r3, [sp, #32]
 800ad9a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad9c:	940d      	str	r4, [sp, #52]	@ 0x34
 800ad9e:	9306      	str	r3, [sp, #24]
 800ada0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ada2:	f8cd 901c 	str.w	r9, [sp, #28]
 800ada6:	9305      	str	r3, [sp, #20]
 800ada8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800adaa:	950e      	str	r5, [sp, #56]	@ 0x38
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adb0:	9303      	str	r3, [sp, #12]
 800adb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800adb4:	9302      	str	r3, [sp, #8]
 800adb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adb8:	e9cd a300 	strd	sl, r3, [sp]
 800adbc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800adbe:	9311      	str	r3, [sp, #68]	@ 0x44
 800adc0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800adc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800adc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adc8:	4633      	mov	r3, r6
 800adca:	f000 fb81 	bl	800b4d0 <forward_lite_conv2d_if32of32wf32>
 800adce:	b023      	add	sp, #140	@ 0x8c
 800add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add4:	469a      	mov	sl, r3
 800add6:	6810      	ldr	r0, [r2, #0]
 800add8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800addc:	2b08      	cmp	r3, #8
 800adde:	d001      	beq.n	800ade4 <forward_conv2d_if32of32wf32+0x168>
 800ade0:	460f      	mov	r7, r1
 800ade2:	e7cf      	b.n	800ad84 <forward_conv2d_if32of32wf32+0x108>
 800ade4:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ade8:	68d2      	ldr	r2, [r2, #12]
 800adea:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800adee:	4103      	asrs	r3, r0
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	d0f4      	beq.n	800ade0 <forward_conv2d_if32of32wf32+0x164>
 800adf6:	2700      	movs	r7, #0
 800adf8:	4638      	mov	r0, r7
 800adfa:	6980      	ldr	r0, [r0, #24]
 800adfc:	9121      	str	r1, [sp, #132]	@ 0x84
 800adfe:	6840      	ldr	r0, [r0, #4]
 800ae00:	9001      	str	r0, [sp, #4]
 800ae02:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ae04:	9000      	str	r0, [sp, #0]
 800ae06:	4638      	mov	r0, r7
 800ae08:	f000 fea8 	bl	800bb5c <lite_decompress_ilutof32>
 800ae0c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ae0e:	e7b6      	b.n	800ad7e <forward_conv2d_if32of32wf32+0x102>
 800ae10:	2300      	movs	r3, #0
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	deff      	udf	#255	@ 0xff
 800ae16:	4634      	mov	r4, r6
 800ae18:	e750      	b.n	800acbc <forward_conv2d_if32of32wf32+0x40>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	deff      	udf	#255	@ 0xff
 800ae20:	2600      	movs	r6, #0
 800ae22:	e74b      	b.n	800acbc <forward_conv2d_if32of32wf32+0x40>
 800ae24:	68d2      	ldr	r2, [r2, #12]
 800ae26:	2a00      	cmp	r2, #0
 800ae28:	d0a9      	beq.n	800ad7e <forward_conv2d_if32of32wf32+0x102>
 800ae2a:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 800ae2e:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 800ae32:	fa43 f30c 	asr.w	r3, r3, ip
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	e7df      	b.n	800adfa <forward_conv2d_if32of32wf32+0x17e>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	deff      	udf	#255	@ 0xff

0800ae40 <forward_dense>:
 800ae40:	6982      	ldr	r2, [r0, #24]
 800ae42:	8813      	ldrh	r3, [r2, #0]
 800ae44:	b90b      	cbnz	r3, 800ae4a <forward_dense+0xa>
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	deff      	udf	#255	@ 0xff
 800ae4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4e:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800ae52:	b08e      	sub	sp, #56	@ 0x38
 800ae54:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ae58:	b100      	cbz	r0, 800ae5c <forward_dense+0x1c>
 800ae5a:	6800      	ldr	r0, [r0, #0]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d061      	beq.n	800af24 <forward_dense+0xe4>
 800ae60:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ae64:	b102      	cbz	r2, 800ae68 <forward_dense+0x28>
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d035      	beq.n	800aed8 <forward_dense+0x98>
 800ae6c:	f8da 501c 	ldr.w	r5, [sl, #28]
 800ae70:	2d00      	cmp	r5, #0
 800ae72:	d055      	beq.n	800af20 <forward_dense+0xe0>
 800ae74:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 800ae78:	6829      	ldr	r1, [r5, #0]
 800ae7a:	2c01      	cmp	r4, #1
 800ae7c:	d955      	bls.n	800af2a <forward_dense+0xea>
 800ae7e:	686d      	ldr	r5, [r5, #4]
 800ae80:	698e      	ldr	r6, [r1, #24]
 800ae82:	68c4      	ldr	r4, [r0, #12]
 800ae84:	68d1      	ldr	r1, [r2, #12]
 800ae86:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800ae8a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800ae8e:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 800ae92:	6831      	ldr	r1, [r6, #0]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	fb07 f804 	mul.w	r8, r7, r4
 800ae9a:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800ae9e:	d046      	beq.n	800af2e <forward_dense+0xee>
 800aea0:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 800aea4:	b11c      	cbz	r4, 800aeae <forward_dense+0x6e>
 800aea6:	6824      	ldr	r4, [r4, #0]
 800aea8:	b10c      	cbz	r4, 800aeae <forward_dense+0x6e>
 800aeaa:	69a3      	ldr	r3, [r4, #24]
 800aeac:	689c      	ldr	r4, [r3, #8]
 800aeae:	6983      	ldr	r3, [r0, #24]
 800aeb0:	6992      	ldr	r2, [r2, #24]
 800aeb2:	6899      	ldr	r1, [r3, #8]
 800aeb4:	6890      	ldr	r0, [r2, #8]
 800aeb6:	b10d      	cbz	r5, 800aebc <forward_dense+0x7c>
 800aeb8:	69ab      	ldr	r3, [r5, #24]
 800aeba:	689d      	ldr	r5, [r3, #8]
 800aebc:	4f1d      	ldr	r7, [pc, #116]	@ (800af34 <forward_dense+0xf4>)
 800aebe:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800aec2:	45bc      	cmp	ip, r7
 800aec4:	d022      	beq.n	800af0c <forward_dense+0xcc>
 800aec6:	4e1c      	ldr	r6, [pc, #112]	@ (800af38 <forward_dense+0xf8>)
 800aec8:	45b4      	cmp	ip, r6
 800aeca:	d015      	beq.n	800aef8 <forward_dense+0xb8>
 800aecc:	4b1b      	ldr	r3, [pc, #108]	@ (800af3c <forward_dense+0xfc>)
 800aece:	459c      	cmp	ip, r3
 800aed0:	d005      	beq.n	800aede <forward_dense+0x9e>
 800aed2:	b00e      	add	sp, #56	@ 0x38
 800aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed8:	2300      	movs	r3, #0
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	deff      	udf	#255	@ 0xff
 800aede:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800aee2:	a807      	add	r0, sp, #28
 800aee4:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 800aee8:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 800aeec:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeee:	f000 fe8b 	bl	800bc08 <forward_lite_dense_if32of32wf32>
 800aef2:	b00e      	add	sp, #56	@ 0x38
 800aef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef8:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800aefc:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800af00:	9400      	str	r4, [sp, #0]
 800af02:	f000 ffdd 	bl	800bec0 <forward_lite_dense_if32of32wf32_lut4>
 800af06:	b00e      	add	sp, #56	@ 0x38
 800af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af0c:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800af10:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800af14:	9400      	str	r4, [sp, #0]
 800af16:	f001 f917 	bl	800c148 <forward_lite_dense_if32of32wf32_lut8>
 800af1a:	b00e      	add	sp, #56	@ 0x38
 800af1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af20:	4629      	mov	r1, r5
 800af22:	e7ad      	b.n	800ae80 <forward_dense+0x40>
 800af24:	2300      	movs	r3, #0
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	deff      	udf	#255	@ 0xff
 800af2a:	2500      	movs	r5, #0
 800af2c:	e7a8      	b.n	800ae80 <forward_dense+0x40>
 800af2e:	2300      	movs	r3, #0
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	deff      	udf	#255	@ 0xff
 800af34:	00d01040 	.word	0x00d01040
 800af38:	00f01040 	.word	0x00f01040
 800af3c:	00821040 	.word	0x00821040

0800af40 <forward_sigmoid>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	ed2d 8b02 	vpush	{d8}
 800af46:	6982      	ldr	r2, [r0, #24]
 800af48:	8813      	ldrh	r3, [r2, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d03b      	beq.n	800afc6 <forward_sigmoid+0x86>
 800af4e:	6852      	ldr	r2, [r2, #4]
 800af50:	6854      	ldr	r4, [r2, #4]
 800af52:	b104      	cbz	r4, 800af56 <forward_sigmoid+0x16>
 800af54:	6824      	ldr	r4, [r4, #0]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d034      	beq.n	800afc4 <forward_sigmoid+0x84>
 800af5a:	6915      	ldr	r5, [r2, #16]
 800af5c:	b105      	cbz	r5, 800af60 <forward_sigmoid+0x20>
 800af5e:	682d      	ldr	r5, [r5, #0]
 800af60:	68a3      	ldr	r3, [r4, #8]
 800af62:	0a1b      	lsrs	r3, r3, #8
 800af64:	d031      	beq.n	800afca <forward_sigmoid+0x8a>
 800af66:	2201      	movs	r2, #1
 800af68:	68e0      	ldr	r0, [r4, #12]
 800af6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800af6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af72:	4298      	cmp	r0, r3
 800af74:	fb01 f202 	mul.w	r2, r1, r2
 800af78:	d1f9      	bne.n	800af6e <forward_sigmoid+0x2e>
 800af7a:	69a7      	ldr	r7, [r4, #24]
 800af7c:	69a9      	ldr	r1, [r5, #24]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800af84:	3a01      	subs	r2, #1
 800af86:	688e      	ldr	r6, [r1, #8]
 800af88:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800af8c:	42ab      	cmp	r3, r5
 800af8e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800af92:	d814      	bhi.n	800afbe <forward_sigmoid+0x7e>
 800af94:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800af98:	3504      	adds	r5, #4
 800af9a:	3604      	adds	r6, #4
 800af9c:	462c      	mov	r4, r5
 800af9e:	ed35 0a01 	vldmdb	r5!, {s0}
 800afa2:	eeb1 0a40 	vneg.f32	s0, s0
 800afa6:	f001 fb6b 	bl	800c680 <expf>
 800afaa:	ee30 0a08 	vadd.f32	s0, s0, s16
 800afae:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800afb2:	ed66 7a01 	vstmdb	r6!, {s15}
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	3c08      	subs	r4, #8
 800afba:	42a3      	cmp	r3, r4
 800afbc:	d9ee      	bls.n	800af9c <forward_sigmoid+0x5c>
 800afbe:	ecbd 8b02 	vpop	{d8}
 800afc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc4:	2300      	movs	r3, #0
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	deff      	udf	#255	@ 0xff
 800afca:	69ab      	ldr	r3, [r5, #24]
 800afcc:	69a7      	ldr	r7, [r4, #24]
 800afce:	689e      	ldr	r6, [r3, #8]
 800afd0:	68bd      	ldr	r5, [r7, #8]
 800afd2:	e7df      	b.n	800af94 <forward_sigmoid+0x54>

0800afd4 <forward_relu>:
 800afd4:	6982      	ldr	r2, [r0, #24]
 800afd6:	8813      	ldrh	r3, [r2, #0]
 800afd8:	b90b      	cbnz	r3, 800afde <forward_relu+0xa>
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	deff      	udf	#255	@ 0xff
 800afde:	b470      	push	{r4, r5, r6}
 800afe0:	6852      	ldr	r2, [r2, #4]
 800afe2:	6854      	ldr	r4, [r2, #4]
 800afe4:	b104      	cbz	r4, 800afe8 <forward_relu+0x14>
 800afe6:	6824      	ldr	r4, [r4, #0]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	f000 8083 	beq.w	800b0f4 <forward_relu+0x120>
 800afee:	6913      	ldr	r3, [r2, #16]
 800aff0:	b103      	cbz	r3, 800aff4 <forward_relu+0x20>
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6999      	ldr	r1, [r3, #24]
 800aff6:	69a2      	ldr	r2, [r4, #24]
 800aff8:	68a3      	ldr	r3, [r4, #8]
 800affa:	69c6      	ldr	r6, [r0, #28]
 800affc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800b000:	6888      	ldr	r0, [r1, #8]
 800b002:	6891      	ldr	r1, [r2, #8]
 800b004:	b196      	cbz	r6, 800b02c <forward_relu+0x58>
 800b006:	6872      	ldr	r2, [r6, #4]
 800b008:	2a01      	cmp	r2, #1
 800b00a:	d036      	beq.n	800b07a <forward_relu+0xa6>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d068      	beq.n	800b0e2 <forward_relu+0x10e>
 800b010:	2201      	movs	r2, #1
 800b012:	68e5      	ldr	r5, [r4, #12]
 800b014:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b018:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b01c:	429d      	cmp	r5, r3
 800b01e:	fb04 f202 	mul.w	r2, r4, r2
 800b022:	d1f9      	bne.n	800b018 <forward_relu+0x44>
 800b024:	68b3      	ldr	r3, [r6, #8]
 800b026:	bc70      	pop	{r4, r5, r6}
 800b028:	f000 bd28 	b.w	800ba7c <forward_lite_nl_relu_generic_if32of32_kernel>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d05a      	beq.n	800b0e6 <forward_relu+0x112>
 800b030:	2201      	movs	r2, #1
 800b032:	68e5      	ldr	r5, [r4, #12]
 800b034:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b038:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b03c:	429d      	cmp	r5, r3
 800b03e:	fb04 f202 	mul.w	r2, r4, r2
 800b042:	d1f9      	bne.n	800b038 <forward_relu+0x64>
 800b044:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b048:	3a01      	subs	r2, #1
 800b04a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b04e:	428c      	cmp	r4, r1
 800b050:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b054:	d30f      	bcc.n	800b076 <forward_relu+0xa2>
 800b056:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800b0fc <forward_relu+0x128>
 800b05a:	1a61      	subs	r1, r4, r1
 800b05c:	f021 0103 	bic.w	r1, r1, #3
 800b060:	1d23      	adds	r3, r4, #4
 800b062:	3004      	adds	r0, #4
 800b064:	1a62      	subs	r2, r4, r1
 800b066:	ed73 7a01 	vldmdb	r3!, {s15}
 800b06a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b06e:	429a      	cmp	r2, r3
 800b070:	ed60 7a01 	vstmdb	r0!, {s15}
 800b074:	d1f7      	bne.n	800b066 <forward_relu+0x92>
 800b076:	bc70      	pop	{r4, r5, r6}
 800b078:	4770      	bx	lr
 800b07a:	b3b3      	cbz	r3, 800b0ea <forward_relu+0x116>
 800b07c:	68e5      	ldr	r5, [r4, #12]
 800b07e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b082:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b086:	429d      	cmp	r5, r3
 800b088:	fb04 f202 	mul.w	r2, r4, r2
 800b08c:	d1f9      	bne.n	800b082 <forward_relu+0xae>
 800b08e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b092:	3a01      	subs	r2, #1
 800b094:	68b3      	ldr	r3, [r6, #8]
 800b096:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b09a:	428c      	cmp	r4, r1
 800b09c:	ed93 7a00 	vldr	s14, [r3]
 800b0a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b0a4:	d3e7      	bcc.n	800b076 <forward_relu+0xa2>
 800b0a6:	2500      	movs	r5, #0
 800b0a8:	1a61      	subs	r1, r4, r1
 800b0aa:	f021 0103 	bic.w	r1, r1, #3
 800b0ae:	1d23      	adds	r3, r4, #4
 800b0b0:	1a62      	subs	r2, r4, r1
 800b0b2:	3004      	adds	r0, #4
 800b0b4:	ed73 7a01 	vldmdb	r3!, {s15}
 800b0b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	d50a      	bpl.n	800b0d8 <forward_relu+0x104>
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	ed60 7a01 	vstmdb	r0!, {s15}
 800b0c8:	d0d5      	beq.n	800b076 <forward_relu+0xa2>
 800b0ca:	ed73 7a01 	vldmdb	r3!, {s15}
 800b0ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d6:	d4f4      	bmi.n	800b0c2 <forward_relu+0xee>
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	f840 5d04 	str.w	r5, [r0, #-4]!
 800b0de:	d1e9      	bne.n	800b0b4 <forward_relu+0xe0>
 800b0e0:	e7c9      	b.n	800b076 <forward_relu+0xa2>
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	e79e      	b.n	800b024 <forward_relu+0x50>
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	e7b5      	b.n	800b056 <forward_relu+0x82>
 800b0ea:	68b3      	ldr	r3, [r6, #8]
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	ed93 7a00 	vldr	s14, [r3]
 800b0f2:	e7d8      	b.n	800b0a6 <forward_relu+0xd2>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	deff      	udf	#255	@ 0xff
 800b0fa:	bf00      	nop
 800b0fc:	00000000 	.word	0x00000000

0800b100 <forward_mp>:
 800b100:	6983      	ldr	r3, [r0, #24]
 800b102:	881a      	ldrh	r2, [r3, #0]
 800b104:	b90a      	cbnz	r2, 800b10a <forward_mp+0xa>
 800b106:	6853      	ldr	r3, [r2, #4]
 800b108:	deff      	udf	#255	@ 0xff
 800b10a:	4601      	mov	r1, r0
 800b10c:	6858      	ldr	r0, [r3, #4]
 800b10e:	6843      	ldr	r3, [r0, #4]
 800b110:	b103      	cbz	r3, 800b114 <forward_mp+0x14>
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2a01      	cmp	r2, #1
 800b116:	f000 80cc 	beq.w	800b2b2 <forward_mp+0x1b2>
 800b11a:	6902      	ldr	r2, [r0, #16]
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	f000 80c6 	beq.w	800b2ae <forward_mp+0x1ae>
 800b122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b126:	6810      	ldr	r0, [r2, #0]
 800b128:	68dc      	ldr	r4, [r3, #12]
 800b12a:	68c2      	ldr	r2, [r0, #12]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	6980      	ldr	r0, [r0, #24]
 800b130:	68d5      	ldr	r5, [r2, #12]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	6897      	ldr	r7, [r2, #8]
 800b136:	6882      	ldr	r2, [r0, #8]
 800b138:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 800b13a:	b093      	sub	sp, #76	@ 0x4c
 800b13c:	6866      	ldr	r6, [r4, #4]
 800b13e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b140:	e9d0 3000 	ldrd	r3, r0, [r0]
 800b144:	9005      	str	r0, [sp, #20]
 800b146:	e9d4 b002 	ldrd	fp, r0, [r4, #8]
 800b14a:	69cc      	ldr	r4, [r1, #28]
 800b14c:	9509      	str	r5, [sp, #36]	@ 0x24
 800b14e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b150:	6a0c      	ldr	r4, [r1, #32]
 800b152:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b154:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800b156:	9404      	str	r4, [sp, #16]
 800b158:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800b15a:	4259      	negs	r1, r3
 800b15c:	2d00      	cmp	r5, #0
 800b15e:	f000 80a3 	beq.w	800b2a8 <forward_mp+0x1a8>
 800b162:	eb00 0c03 	add.w	ip, r0, r3
 800b166:	fb06 f30b 	mul.w	r3, r6, fp
 800b16a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800b16e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800b172:	fb07 f309 	mul.w	r3, r7, r9
 800b176:	9805      	ldr	r0, [sp, #20]
 800b178:	930d      	str	r3, [sp, #52]	@ 0x34
 800b17a:	4243      	negs	r3, r0
 800b17c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b17e:	f04f 0800 	mov.w	r8, #0
 800b182:	4663      	mov	r3, ip
 800b184:	9707      	str	r7, [sp, #28]
 800b186:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b188:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800b18c:	4298      	cmp	r0, r3
 800b18e:	bf94      	ite	ls
 800b190:	eb01 0e00 	addls.w	lr, r1, r0
 800b194:	eb01 0e03 	addhi.w	lr, r1, r3
 800b198:	9807      	ldr	r0, [sp, #28]
 800b19a:	9506      	str	r5, [sp, #24]
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d07a      	beq.n	800b296 <forward_mp+0x196>
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	9003      	str	r0, [sp, #12]
 800b1a4:	fb0b f005 	mul.w	r0, fp, r5
 800b1a8:	9002      	str	r0, [sp, #8]
 800b1aa:	9805      	ldr	r0, [sp, #20]
 800b1ac:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 800b1b0:	4458      	add	r0, fp
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	9001      	str	r0, [sp, #4]
 800b1b6:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800b1ba:	4617      	mov	r7, r2
 800b1bc:	46a3      	mov	fp, r4
 800b1be:	4641      	mov	r1, r8
 800b1c0:	4660      	mov	r0, ip
 800b1c2:	9200      	str	r2, [sp, #0]
 800b1c4:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	bfaa      	itet	ge
 800b1cc:	9c02      	ldrge	r4, [sp, #8]
 800b1ce:	f8dd 8008 	ldrlt.w	r8, [sp, #8]
 800b1d2:	eb04 0800 	addge.w	r8, r4, r0
 800b1d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b1d8:	9a01      	ldr	r2, [sp, #4]
 800b1da:	fb08 4809 	mla	r8, r8, r9, r4
 800b1de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1e0:	bfb8      	it	lt
 800b1e2:	2000      	movlt	r0, #0
 800b1e4:	4294      	cmp	r4, r2
 800b1e6:	bf94      	ite	ls
 800b1e8:	191c      	addls	r4, r3, r4
 800b1ea:	189c      	addhi	r4, r3, r2
 800b1ec:	1a22      	subs	r2, r4, r0
 800b1ee:	9208      	str	r2, [sp, #32]
 800b1f0:	b15e      	cbz	r6, 800b20a <forward_mp+0x10a>
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	463c      	mov	r4, r7
 800b1f6:	9a00      	ldr	r2, [sp, #0]
 800b1f8:	eb09 0c08 	add.w	ip, r9, r8
 800b1fc:	ecf0 7a01 	vldmia	r0!, {s15}
 800b200:	4584      	cmp	ip, r0
 800b202:	ece4 7a01 	vstmia	r4!, {s15}
 800b206:	d1f9      	bne.n	800b1fc <forward_mp+0xfc>
 800b208:	9200      	str	r2, [sp, #0]
 800b20a:	9a06      	ldr	r2, [sp, #24]
 800b20c:	4596      	cmp	lr, r2
 800b20e:	dd2c      	ble.n	800b26a <forward_mp+0x16a>
 800b210:	460c      	mov	r4, r1
 800b212:	4610      	mov	r0, r2
 800b214:	9a08      	ldr	r2, [sp, #32]
 800b216:	9511      	str	r5, [sp, #68]	@ 0x44
 800b218:	fb09 8c02 	mla	ip, r9, r2, r8
 800b21c:	9a00      	ldr	r2, [sp, #0]
 800b21e:	f8cd b020 	str.w	fp, [sp, #32]
 800b222:	45e0      	cmp	r8, ip
 800b224:	d217      	bcs.n	800b256 <forward_mp+0x156>
 800b226:	b1b6      	cbz	r6, 800b256 <forward_mp+0x156>
 800b228:	46c3      	mov	fp, r8
 800b22a:	eb08 0509 	add.w	r5, r8, r9
 800b22e:	f8cd a000 	str.w	sl, [sp]
 800b232:	46da      	mov	sl, fp
 800b234:	4639      	mov	r1, r7
 800b236:	ecfa 7a01 	vldmia	sl!, {s15}
 800b23a:	ed91 7a00 	vldr	s14, [r1]
 800b23e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b242:	45aa      	cmp	sl, r5
 800b244:	ece1 7a01 	vstmia	r1!, {s15}
 800b248:	d1f5      	bne.n	800b236 <forward_mp+0x136>
 800b24a:	44cb      	add	fp, r9
 800b24c:	45e3      	cmp	fp, ip
 800b24e:	444d      	add	r5, r9
 800b250:	d3ef      	bcc.n	800b232 <forward_mp+0x132>
 800b252:	f8dd a000 	ldr.w	sl, [sp]
 800b256:	3001      	adds	r0, #1
 800b258:	4586      	cmp	lr, r0
 800b25a:	44d0      	add	r8, sl
 800b25c:	44d4      	add	ip, sl
 800b25e:	d1e0      	bne.n	800b222 <forward_mp+0x122>
 800b260:	4621      	mov	r1, r4
 800b262:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b266:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b268:	9200      	str	r2, [sp, #0]
 800b26a:	9804      	ldr	r0, [sp, #16]
 800b26c:	9a01      	ldr	r2, [sp, #4]
 800b26e:	4418      	add	r0, r3
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	9c03      	ldr	r4, [sp, #12]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	9b07      	ldr	r3, [sp, #28]
 800b27a:	3401      	adds	r4, #1
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	9403      	str	r4, [sp, #12]
 800b280:	444f      	add	r7, r9
 800b282:	d1a0      	bne.n	800b1c6 <forward_mp+0xc6>
 800b284:	4688      	mov	r8, r1
 800b286:	4629      	mov	r1, r5
 800b288:	9a00      	ldr	r2, [sp, #0]
 800b28a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b28c:	465c      	mov	r4, fp
 800b28e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b290:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800b294:	4402      	add	r2, r0
 800b296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b298:	f108 0801 	add.w	r8, r8, #1
 800b29c:	4540      	cmp	r0, r8
 800b29e:	4421      	add	r1, r4
 800b2a0:	eba3 0304 	sub.w	r3, r3, r4
 800b2a4:	f47f af6f 	bne.w	800b186 <forward_mp+0x86>
 800b2a8:	b013      	add	sp, #76	@ 0x4c
 800b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	68d3      	ldr	r3, [r2, #12]
 800b2b0:	deff      	udf	#255	@ 0xff
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	deff      	udf	#255	@ 0xff

0800b2b8 <forward_ap>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	6983      	ldr	r3, [r0, #24]
 800b2be:	b09d      	sub	sp, #116	@ 0x74
 800b2c0:	881a      	ldrh	r2, [r3, #0]
 800b2c2:	900d      	str	r0, [sp, #52]	@ 0x34
 800b2c4:	b90a      	cbnz	r2, 800b2ca <forward_ap+0x12>
 800b2c6:	6853      	ldr	r3, [r2, #4]
 800b2c8:	deff      	udf	#255	@ 0xff
 800b2ca:	6859      	ldr	r1, [r3, #4]
 800b2cc:	684b      	ldr	r3, [r1, #4]
 800b2ce:	b103      	cbz	r3, 800b2d2 <forward_ap+0x1a>
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2a01      	cmp	r2, #1
 800b2d4:	f000 80f7 	beq.w	800b4c6 <forward_ap+0x20e>
 800b2d8:	690a      	ldr	r2, [r1, #16]
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	f000 80f6 	beq.w	800b4cc <forward_ap+0x214>
 800b2e0:	6811      	ldr	r1, [r2, #0]
 800b2e2:	68dc      	ldr	r4, [r3, #12]
 800b2e4:	68ca      	ldr	r2, [r1, #12]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	68d5      	ldr	r5, [r2, #12]
 800b2ea:	6892      	ldr	r2, [r2, #8]
 800b2ec:	6989      	ldr	r1, [r1, #24]
 800b2ee:	9205      	str	r2, [sp, #20]
 800b2f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	6888      	ldr	r0, [r1, #8]
 800b2f6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b2f8:	6867      	ldr	r7, [r4, #4]
 800b2fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2fc:	e9d1 6300 	ldrd	r6, r3, [r1]
 800b300:	e9d4 8102 	ldrd	r8, r1, [r4, #8]
 800b304:	69d4      	ldr	r4, [r2, #28]
 800b306:	9309      	str	r3, [sp, #36]	@ 0x24
 800b308:	9408      	str	r4, [sp, #32]
 800b30a:	e9d2 c308 	ldrd	ip, r3, [r2, #32]
 800b30e:	950e      	str	r5, [sp, #56]	@ 0x38
 800b310:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b312:	4274      	negs	r4, r6
 800b314:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b316:	2d00      	cmp	r5, #0
 800b318:	f000 80cc 	beq.w	800b4b4 <forward_ap+0x1fc>
 800b31c:	2500      	movs	r5, #0
 800b31e:	fb07 f208 	mul.w	r2, r7, r8
 800b322:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800b326:	950a      	str	r5, [sp, #40]	@ 0x28
 800b328:	0095      	lsls	r5, r2, #2
 800b32a:	9502      	str	r5, [sp, #8]
 800b32c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b330:	463d      	mov	r5, r7
 800b332:	46cb      	mov	fp, r9
 800b334:	440e      	add	r6, r1
 800b336:	9908      	ldr	r1, [sp, #32]
 800b338:	9a05      	ldr	r2, [sp, #20]
 800b33a:	fb0c f101 	mul.w	r1, ip, r1
 800b33e:	9111      	str	r1, [sp, #68]	@ 0x44
 800b340:	fb09 f102 	mul.w	r1, r9, r2
 800b344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b346:	9114      	str	r1, [sp, #80]	@ 0x50
 800b348:	4252      	negs	r2, r2
 800b34a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b34c:	45b4      	cmp	ip, r6
 800b34e:	bf94      	ite	ls
 800b350:	eb04 020c 	addls.w	r2, r4, ip
 800b354:	19a2      	addhi	r2, r4, r6
 800b356:	9905      	ldr	r1, [sp, #20]
 800b358:	9201      	str	r2, [sp, #4]
 800b35a:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 800b35e:	2900      	cmp	r1, #0
 800b360:	f000 809e 	beq.w	800b4a0 <forward_ap+0x1e8>
 800b364:	2100      	movs	r1, #0
 800b366:	4681      	mov	r9, r0
 800b368:	ebaa 0202 	sub.w	r2, sl, r2
 800b36c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b36e:	fb08 f10a 	mul.w	r1, r8, sl
 800b372:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b376:	e9cd 8c15 	strd	r8, ip, [sp, #84]	@ 0x54
 800b37a:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
 800b37e:	4442      	add	r2, r8
 800b380:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b382:	9107      	str	r1, [sp, #28]
 800b384:	9206      	str	r2, [sp, #24]
 800b386:	eb00 010b 	add.w	r1, r0, fp
 800b38a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b38c:	2f00      	cmp	r7, #0
 800b38e:	bfaa      	itet	ge
 800b390:	9b07      	ldrge	r3, [sp, #28]
 800b392:	9807      	ldrlt	r0, [sp, #28]
 800b394:	19d8      	addge	r0, r3, r7
 800b396:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b398:	970c      	str	r7, [sp, #48]	@ 0x30
 800b39a:	9a06      	ldr	r2, [sp, #24]
 800b39c:	fb00 300b 	mla	r0, r0, fp, r3
 800b3a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	bfb8      	it	lt
 800b3a6:	2700      	movlt	r7, #0
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bf94      	ite	ls
 800b3ac:	18e4      	addls	r4, r4, r3
 800b3ae:	18a4      	addhi	r4, r4, r2
 800b3b0:	eba7 0e04 	sub.w	lr, r7, r4
 800b3b4:	1be2      	subs	r2, r4, r7
 800b3b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b3b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3ba:	fb04 fe0e 	mul.w	lr, r4, lr
 800b3be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b3c2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	bf08      	it	eq
 800b3c8:	4674      	moveq	r4, lr
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	9404      	str	r4, [sp, #16]
 800b3ce:	459a      	cmp	sl, r3
 800b3d0:	da50      	bge.n	800b474 <forward_ap+0x1bc>
 800b3d2:	46d4      	mov	ip, sl
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	2700      	movs	r7, #0
 800b3d8:	4690      	mov	r8, r2
 800b3da:	fb0b f402 	mul.w	r4, fp, r2
 800b3de:	e9cd a61a 	strd	sl, r6, [sp, #104]	@ 0x68
 800b3e2:	9403      	str	r4, [sp, #12]
 800b3e4:	9a03      	ldr	r2, [sp, #12]
 800b3e6:	4447      	add	r7, r8
 800b3e8:	45be      	cmp	lr, r7
 800b3ea:	eb00 0602 	add.w	r6, r0, r2
 800b3ee:	d064      	beq.n	800b4ba <forward_ap+0x202>
 800b3f0:	42b0      	cmp	r0, r6
 800b3f2:	bf38      	it	cc
 800b3f4:	2200      	movcc	r2, #0
 800b3f6:	d232      	bcs.n	800b45e <forward_ap+0x1a6>
 800b3f8:	eb0b 0a00 	add.w	sl, fp, r0
 800b3fc:	b14d      	cbz	r5, 800b412 <forward_ap+0x15a>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d05f      	beq.n	800b4c2 <forward_ap+0x20a>
 800b402:	464c      	mov	r4, r9
 800b404:	4603      	mov	r3, r0
 800b406:	ecf3 7a01 	vldmia	r3!, {s15}
 800b40a:	459a      	cmp	sl, r3
 800b40c:	ece4 7a01 	vstmia	r4!, {s15}
 800b410:	d1f9      	bne.n	800b406 <forward_ap+0x14e>
 800b412:	4682      	mov	sl, r0
 800b414:	44da      	add	sl, fp
 800b416:	45b2      	cmp	sl, r6
 800b418:	d210      	bcs.n	800b43c <forward_ap+0x184>
 800b41a:	2d00      	cmp	r5, #0
 800b41c:	d0fa      	beq.n	800b414 <forward_ap+0x15c>
 800b41e:	464b      	mov	r3, r9
 800b420:	4654      	mov	r4, sl
 800b422:	edd3 7a00 	vldr	s15, [r3]
 800b426:	ecb4 7a01 	vldmia	r4!, {s14}
 800b42a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b42e:	ece3 7a01 	vstmia	r3!, {s15}
 800b432:	4299      	cmp	r1, r3
 800b434:	d1f5      	bne.n	800b422 <forward_ap+0x16a>
 800b436:	44da      	add	sl, fp
 800b438:	45b2      	cmp	sl, r6
 800b43a:	d3ee      	bcc.n	800b41a <forward_ap+0x162>
 800b43c:	b17a      	cbz	r2, 800b45e <forward_ap+0x1a6>
 800b43e:	ee07 2a90 	vmov	s15, r2
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	b145      	cbz	r5, 800b45e <forward_ap+0x1a6>
 800b44c:	464b      	mov	r3, r9
 800b44e:	edd3 7a00 	vldr	s15, [r3]
 800b452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b456:	ece3 7a01 	vstmia	r3!, {s15}
 800b45a:	428b      	cmp	r3, r1
 800b45c:	d1f7      	bne.n	800b44e <forward_ap+0x196>
 800b45e:	9a01      	ldr	r2, [sp, #4]
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	f10c 0c01 	add.w	ip, ip, #1
 800b466:	4562      	cmp	r2, ip
 800b468:	4418      	add	r0, r3
 800b46a:	f04f 0300 	mov.w	r3, #0
 800b46e:	d1b9      	bne.n	800b3e4 <forward_ap+0x12c>
 800b470:	e9dd a61a 	ldrd	sl, r6, [sp, #104]	@ 0x68
 800b474:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b476:	9806      	ldr	r0, [sp, #24]
 800b478:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800b47a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b47c:	4417      	add	r7, r2
 800b47e:	1a82      	subs	r2, r0, r2
 800b480:	9206      	str	r2, [sp, #24]
 800b482:	9a05      	ldr	r2, [sp, #20]
 800b484:	3301      	adds	r3, #1
 800b486:	429a      	cmp	r2, r3
 800b488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b48a:	44d9      	add	r9, fp
 800b48c:	4459      	add	r1, fp
 800b48e:	f47f af7d 	bne.w	800b38c <forward_ap+0xd4>
 800b492:	e9dd 8c15 	ldrd	r8, ip, [sp, #84]	@ 0x54
 800b496:	e9dd 3417 	ldrd	r3, r4, [sp, #92]	@ 0x5c
 800b49a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b49c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b49e:	4410      	add	r0, r2
 800b4a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4a2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b4a4:	3201      	adds	r2, #1
 800b4a6:	4291      	cmp	r1, r2
 800b4a8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b4aa:	441c      	add	r4, r3
 800b4ac:	eba6 0603 	sub.w	r6, r6, r3
 800b4b0:	f47f af4c 	bne.w	800b34c <forward_ap+0x94>
 800b4b4:	b01d      	add	sp, #116	@ 0x74
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ba:	42b0      	cmp	r0, r6
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	d39b      	bcc.n	800b3f8 <forward_ap+0x140>
 800b4c0:	e7bc      	b.n	800b43c <forward_ap+0x184>
 800b4c2:	4682      	mov	sl, r0
 800b4c4:	e7ab      	b.n	800b41e <forward_ap+0x166>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	deff      	udf	#255	@ 0xff
 800b4cc:	68d3      	ldr	r3, [r2, #12]
 800b4ce:	deff      	udf	#255	@ 0xff

0800b4d0 <forward_lite_conv2d_if32of32wf32>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	ed2d 8b10 	vpush	{d8-d15}
 800b4d8:	b0a3      	sub	sp, #140	@ 0x8c
 800b4da:	468c      	mov	ip, r1
 800b4dc:	4690      	mov	r8, r2
 800b4de:	f8bd 6114 	ldrh.w	r6, [sp, #276]	@ 0x114
 800b4e2:	f8bd 711c 	ldrh.w	r7, [sp, #284]	@ 0x11c
 800b4e6:	f8bd 1120 	ldrh.w	r1, [sp, #288]	@ 0x120
 800b4ea:	9212      	str	r2, [sp, #72]	@ 0x48
 800b4ec:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800b4ee:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4f0:	f8bd 4118 	ldrh.w	r4, [sp, #280]	@ 0x118
 800b4f4:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
 800b4f6:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 800b4f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4fa:	9613      	str	r6, [sp, #76]	@ 0x4c
 800b4fc:	9706      	str	r7, [sp, #24]
 800b4fe:	9114      	str	r1, [sp, #80]	@ 0x50
 800b500:	2a00      	cmp	r2, #0
 800b502:	f000 817e 	beq.w	800b802 <forward_lite_conv2d_if32of32wf32+0x332>
 800b506:	4681      	mov	r9, r0
 800b508:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b50a:	46a6      	mov	lr, r4
 800b50c:	fb02 f303 	mul.w	r3, r2, r3
 800b510:	2000      	movs	r0, #0
 800b512:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800b514:	4261      	negs	r1, r4
 800b516:	fb02 f303 	mul.w	r3, r2, r3
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b51e:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800b520:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800b522:	fb02 f303 	mul.w	r3, r2, r3
 800b526:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b528:	fb02 f205 	mul.w	r2, r2, r5
 800b52c:	00ad      	lsls	r5, r5, #2
 800b52e:	9503      	str	r5, [sp, #12]
 800b530:	0095      	lsls	r5, r2, #2
 800b532:	fb04 f203 	mul.w	r2, r4, r3
 800b536:	fb01 f303 	mul.w	r3, r1, r3
 800b53a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b53e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b540:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800b542:	0094      	lsls	r4, r2, #2
 800b544:	fb07 f303 	mul.w	r3, r7, r3
 800b548:	9418      	str	r4, [sp, #96]	@ 0x60
 800b54a:	9c3d      	ldr	r4, [sp, #244]	@ 0xf4
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	00a4      	lsls	r4, r4, #2
 800b550:	9305      	str	r3, [sp, #20]
 800b552:	4273      	negs	r3, r6
 800b554:	fb04 f703 	mul.w	r7, r4, r3
 800b558:	9516      	str	r5, [sp, #88]	@ 0x58
 800b55a:	9311      	str	r3, [sp, #68]	@ 0x44
 800b55c:	9404      	str	r4, [sp, #16]
 800b55e:	f108 4378 	add.w	r3, r8, #4160749568	@ 0xf8000000
 800b562:	4606      	mov	r6, r0
 800b564:	46b8      	mov	r8, r7
 800b566:	4675      	mov	r5, lr
 800b568:	460f      	mov	r7, r1
 800b56a:	4664      	mov	r4, ip
 800b56c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b56e:	2f00      	cmp	r7, #0
 800b570:	f2c0 827d 	blt.w	800ba6e <forward_lite_conv2d_if32of32wf32+0x59e>
 800b574:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b576:	930d      	str	r3, [sp, #52]	@ 0x34
 800b578:	2300      	movs	r3, #0
 800b57a:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800b57c:	9949      	ldr	r1, [sp, #292]	@ 0x124
 800b57e:	442a      	add	r2, r5
 800b580:	428a      	cmp	r2, r1
 800b582:	bf94      	ite	ls
 800b584:	ebc3 0202 	rsbls	r2, r3, r2
 800b588:	ebc3 0201 	rsbhi	r2, r3, r1
 800b58c:	4610      	mov	r0, r2
 800b58e:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 800b590:	2a00      	cmp	r2, #0
 800b592:	f000 8143 	beq.w	800b81c <forward_lite_conv2d_if32of32wf32+0x34c>
 800b596:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b598:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b59c:	f0c0 813e 	bcc.w	800b81c <forward_lite_conv2d_if32of32wf32+0x34c>
 800b5a0:	9a03      	ldr	r2, [sp, #12]
 800b5a2:	18a2      	adds	r2, r4, r2
 800b5a4:	4294      	cmp	r4, r2
 800b5a6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b5a8:	f080 811d 	bcs.w	800b7e6 <forward_lite_conv2d_if32of32wf32+0x316>
 800b5ac:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b5ae:	e9cd 761b 	strd	r7, r6, [sp, #108]	@ 0x6c
 800b5b2:	fb02 f303 	mul.w	r3, r2, r3
 800b5b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ba:	e9cd 581d 	strd	r5, r8, [sp, #116]	@ 0x74
 800b5be:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5c2:	4626      	mov	r6, r4
 800b5c4:	4443      	add	r3, r8
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 800b5cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5ce:	941f      	str	r4, [sp, #124]	@ 0x7c
 800b5d0:	4648      	mov	r0, r9
 800b5d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5d4:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 800b5d6:	f000 ff05 	bl	800c3e4 <st_int8_copy>
 800b5da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 811a 	beq.w	800b816 <forward_lite_conv2d_if32of32wf32+0x346>
 800b5e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5e4:	ecb3 6a01 	vldmia	r3!, {s12}
 800b5e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 80ee 	beq.w	800b7ce <forward_lite_conv2d_if32of32wf32+0x2fe>
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5f6:	e9cd 9620 	strd	r9, r6, [sp, #128]	@ 0x80
 800b5fa:	9202      	str	r2, [sp, #8]
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	4630      	mov	r0, r6
 800b600:	4614      	mov	r4, r2
 800b602:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b604:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b606:	2d00      	cmp	r5, #0
 800b608:	f2c0 8100 	blt.w	800b80c <forward_lite_conv2d_if32of32wf32+0x33c>
 800b60c:	f04f 0e00 	mov.w	lr, #0
 800b610:	9902      	ldr	r1, [sp, #8]
 800b612:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b614:	9e3c      	ldr	r6, [sp, #240]	@ 0xf0
 800b616:	9f04      	ldr	r7, [sp, #16]
 800b618:	eeb0 7a46 	vmov.f32	s14, s12
 800b61c:	fb02 6207 	mla	r2, r2, r7, r6
 800b620:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800b622:	9201      	str	r2, [sp, #4]
 800b624:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b626:	441e      	add	r6, r3
 800b628:	4296      	cmp	r6, r2
 800b62a:	bf94      	ite	ls
 800b62c:	ebce 0e06 	rsbls	lr, lr, r6
 800b630:	ebce 0e02 	rsbhi	lr, lr, r2
 800b634:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800b636:	f1b8 0f00 	cmp.w	r8, #0
 800b63a:	fb0e f602 	mul.w	r6, lr, r2
 800b63e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b640:	eba2 0b0e 	sub.w	fp, r2, lr
 800b644:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b646:	eba2 0e0e 	sub.w	lr, r2, lr
 800b64a:	f340 80ae 	ble.w	800b7aa <forward_lite_conv2d_if32of32wf32+0x2da>
 800b64e:	f04f 0c00 	mov.w	ip, #0
 800b652:	fb07 fb0b 	mul.w	fp, r7, fp
 800b656:	fb07 fe0e 	mul.w	lr, r7, lr
 800b65a:	f026 070f 	bic.w	r7, r6, #15
 800b65e:	f107 3aff 	add.w	sl, r7, #4294967295
 800b662:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800b666:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800b66a:	f10a 0a01 	add.w	sl, sl, #1
 800b66e:	9a01      	ldr	r2, [sp, #4]
 800b670:	ea4f 198a 	mov.w	r9, sl, lsl #6
 800b674:	9409      	str	r4, [sp, #36]	@ 0x24
 800b676:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800b67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b67c:	2f00      	cmp	r7, #0
 800b67e:	bfd8      	it	le
 800b680:	2000      	movle	r0, #0
 800b682:	dd74      	ble.n	800b76e <forward_lite_conv2d_if32of32wf32+0x29e>
 800b684:	2400      	movs	r4, #0
 800b686:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b68a:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800b68e:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800b692:	ed50 6a0f 	vldr	s13, [r0, #-60]	@ 0xffffffc4
 800b696:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800b69a:	ed53 fa10 	vldr	s31, [r3, #-64]	@ 0xffffffc0
 800b69e:	ed10 fa10 	vldr	s30, [r0, #-64]	@ 0xffffffc0
 800b6a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6a6:	ed10 ea0e 	vldr	s28, [r0, #-56]	@ 0xffffffc8
 800b6aa:	ed53 ea0e 	vldr	s29, [r3, #-56]	@ 0xffffffc8
 800b6ae:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800b6b2:	ed10 da0d 	vldr	s26, [r0, #-52]	@ 0xffffffcc
 800b6b6:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800b6ba:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800b6be:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800b6c2:	ed10 ca0c 	vldr	s24, [r0, #-48]	@ 0xffffffd0
 800b6c6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b6ca:	ed50 ba0b 	vldr	s23, [r0, #-44]	@ 0xffffffd4
 800b6ce:	ed13 ba0b 	vldr	s22, [r3, #-44]	@ 0xffffffd4
 800b6d2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b6d6:	ed50 aa0a 	vldr	s21, [r0, #-40]	@ 0xffffffd8
 800b6da:	ed13 aa0a 	vldr	s20, [r3, #-40]	@ 0xffffffd8
 800b6de:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b6e2:	ed50 9a09 	vldr	s19, [r0, #-36]	@ 0xffffffdc
 800b6e6:	ed13 9a09 	vldr	s18, [r3, #-36]	@ 0xffffffdc
 800b6ea:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b6ee:	ed53 8a08 	vldr	s17, [r3, #-32]	@ 0xffffffe0
 800b6f2:	ed10 8a08 	vldr	s16, [r0, #-32]	@ 0xffffffe0
 800b6f6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b6fa:	ed10 0a07 	vldr	s0, [r0, #-28]	@ 0xffffffe4
 800b6fe:	ed53 0a07 	vldr	s1, [r3, #-28]	@ 0xffffffe4
 800b702:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b706:	ed10 1a06 	vldr	s2, [r0, #-24]	@ 0xffffffe8
 800b70a:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800b70e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b712:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800b716:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800b71a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b71e:	ed13 3a04 	vldr	s6, [r3, #-16]
 800b722:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b726:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b72a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b72e:	ed13 4a03 	vldr	s8, [r3, #-12]
 800b732:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b736:	ed10 5a02 	vldr	s10, [r0, #-8]
 800b73a:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b73e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b742:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b746:	ed53 6a01 	vldr	s13, [r3, #-4]
 800b74a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b74e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b752:	3410      	adds	r4, #16
 800b754:	42bc      	cmp	r4, r7
 800b756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b75a:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b75e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b762:	db96      	blt.n	800b692 <forward_lite_conv2d_if32of32wf32+0x1c2>
 800b764:	ed9d 6a01 	vldr	s12, [sp, #4]
 800b768:	4650      	mov	r0, sl
 800b76a:	4449      	add	r1, r9
 800b76c:	444a      	add	r2, r9
 800b76e:	4286      	cmp	r6, r0
 800b770:	dd10      	ble.n	800b794 <forward_lite_conv2d_if32of32wf32+0x2c4>
 800b772:	4603      	mov	r3, r0
 800b774:	460d      	mov	r5, r1
 800b776:	4614      	mov	r4, r2
 800b778:	ecf4 6a01 	vldmia	r4!, {s13}
 800b77c:	ecf5 7a01 	vldmia	r5!, {s15}
 800b780:	3301      	adds	r3, #1
 800b782:	429e      	cmp	r6, r3
 800b784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b788:	d1f6      	bne.n	800b778 <forward_lite_conv2d_if32of32wf32+0x2a8>
 800b78a:	1a30      	subs	r0, r6, r0
 800b78c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b790:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b794:	f10c 0c01 	add.w	ip, ip, #1
 800b798:	45e0      	cmp	r8, ip
 800b79a:	4459      	add	r1, fp
 800b79c:	4472      	add	r2, lr
 800b79e:	f47f af6d 	bne.w	800b67c <forward_lite_conv2d_if32of32wf32+0x1ac>
 800b7a2:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 800b7a6:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	@ 0x24
 800b7aa:	9a06      	ldr	r2, [sp, #24]
 800b7ac:	9903      	ldr	r1, [sp, #12]
 800b7ae:	ed80 7a00 	vstr	s14, [r0]
 800b7b2:	4415      	add	r5, r2
 800b7b4:	4408      	add	r0, r1
 800b7b6:	1a9b      	subs	r3, r3, r2
 800b7b8:	9905      	ldr	r1, [sp, #20]
 800b7ba:	9a02      	ldr	r2, [sp, #8]
 800b7bc:	3401      	adds	r4, #1
 800b7be:	440a      	add	r2, r1
 800b7c0:	9202      	str	r2, [sp, #8]
 800b7c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b7c4:	42a2      	cmp	r2, r4
 800b7c6:	f47f af1e 	bne.w	800b606 <forward_lite_conv2d_if32of32wf32+0x136>
 800b7ca:	e9dd 9620 	ldrd	r9, r6, [sp, #128]	@ 0x80
 800b7ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7d0:	3604      	adds	r6, #4
 800b7d2:	4499      	add	r9, r3
 800b7d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7d6:	429e      	cmp	r6, r3
 800b7d8:	f4ff aefa 	bcc.w	800b5d0 <forward_lite_conv2d_if32of32wf32+0x100>
 800b7dc:	e9dd 761b 	ldrd	r7, r6, [sp, #108]	@ 0x6c
 800b7e0:	e9dd 581d 	ldrd	r5, r8, [sp, #116]	@ 0x74
 800b7e4:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800b7e6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b7ea:	441c      	add	r4, r3
 800b7ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	441f      	add	r7, r3
 800b7f2:	1aed      	subs	r5, r5, r3
 800b7f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7f6:	4413      	add	r3, r2
 800b7f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7fa:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800b7fc:	42b3      	cmp	r3, r6
 800b7fe:	f47f aeb6 	bne.w	800b56e <forward_lite_conv2d_if32of32wf32+0x9e>
 800b802:	b023      	add	sp, #140	@ 0x8c
 800b804:	ecbd 8b10 	vpop	{d8-d15}
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b80e:	469e      	mov	lr, r3
 800b810:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b812:	441a      	add	r2, r3
 800b814:	e6fe      	b.n	800b614 <forward_lite_conv2d_if32of32wf32+0x144>
 800b816:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 800ba78 <forward_lite_conv2d_if32of32wf32+0x5a8>
 800b81a:	e6e6      	b.n	800b5ea <forward_lite_conv2d_if32of32wf32+0x11a>
 800b81c:	9a03      	ldr	r2, [sp, #12]
 800b81e:	eb04 0c02 	add.w	ip, r4, r2
 800b822:	4564      	cmp	r4, ip
 800b824:	d2df      	bcs.n	800b7e6 <forward_lite_conv2d_if32of32wf32+0x316>
 800b826:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800b828:	4683      	mov	fp, r0
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
 800b82e:	4622      	mov	r2, r4
 800b830:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b832:	e9cd 541b 	strd	r5, r4, [sp, #108]	@ 0x6c
 800b836:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b838:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b83a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b83e:	eb01 0e08 	add.w	lr, r1, r8
 800b842:	9717      	str	r7, [sp, #92]	@ 0x5c
 800b844:	9619      	str	r6, [sp, #100]	@ 0x64
 800b846:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b848:	2900      	cmp	r1, #0
 800b84a:	f000 810d 	beq.w	800ba68 <forward_lite_conv2d_if32of32wf32+0x598>
 800b84e:	ecb3 6a01 	vldmia	r3!, {s12}
 800b852:	9941      	ldr	r1, [sp, #260]	@ 0x104
 800b854:	2900      	cmp	r1, #0
 800b856:	f000 80f5 	beq.w	800ba44 <forward_lite_conv2d_if32of32wf32+0x574>
 800b85a:	2100      	movs	r1, #0
 800b85c:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
 800b860:	460b      	mov	r3, r1
 800b862:	4611      	mov	r1, r2
 800b864:	461c      	mov	r4, r3
 800b866:	e9cd c81f 	strd	ip, r8, [sp, #124]	@ 0x7c
 800b86a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b86c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b86e:	f8cd e008 	str.w	lr, [sp, #8]
 800b872:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
 800b876:	2d00      	cmp	r5, #0
 800b878:	f2c0 80f1 	blt.w	800ba5e <forward_lite_conv2d_if32of32wf32+0x58e>
 800b87c:	f04f 0e00 	mov.w	lr, #0
 800b880:	9a02      	ldr	r2, [sp, #8]
 800b882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b884:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b886:	9f04      	ldr	r7, [sp, #16]
 800b888:	eeb0 7a46 	vmov.f32	s14, s12
 800b88c:	fb03 6307 	mla	r3, r3, r7, r6
 800b890:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800b892:	9301      	str	r3, [sp, #4]
 800b894:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b896:	4406      	add	r6, r0
 800b898:	429e      	cmp	r6, r3
 800b89a:	bf94      	ite	ls
 800b89c:	ebce 0e06 	rsbls	lr, lr, r6
 800b8a0:	ebce 0e03 	rsbhi	lr, lr, r3
 800b8a4:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800b8a6:	f1bb 0f00 	cmp.w	fp, #0
 800b8aa:	fb0e f603 	mul.w	r6, lr, r3
 800b8ae:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800b8b0:	eba3 0a0e 	sub.w	sl, r3, lr
 800b8b4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b8b6:	eba3 0e0e 	sub.w	lr, r3, lr
 800b8ba:	f340 80ad 	ble.w	800ba18 <forward_lite_conv2d_if32of32wf32+0x548>
 800b8be:	fb07 fa0a 	mul.w	sl, r7, sl
 800b8c2:	fb07 fe0e 	mul.w	lr, r7, lr
 800b8c6:	2700      	movs	r7, #0
 800b8c8:	f026 0c0f 	bic.w	ip, r6, #15
 800b8cc:	f10c 39ff 	add.w	r9, ip, #4294967295
 800b8d0:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800b8d4:	e9cd 1507 	strd	r1, r5, [sp, #28]
 800b8d8:	f109 0901 	add.w	r9, r9, #1
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	ea4f 1889 	mov.w	r8, r9, lsl #6
 800b8e2:	9409      	str	r4, [sp, #36]	@ 0x24
 800b8e4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800b8e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8ea:	f1bc 0f00 	cmp.w	ip, #0
 800b8ee:	bfd8      	it	le
 800b8f0:	2100      	movle	r1, #0
 800b8f2:	dd74      	ble.n	800b9de <forward_lite_conv2d_if32of32wf32+0x50e>
 800b8f4:	2400      	movs	r4, #0
 800b8f6:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b8fa:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800b8fe:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b902:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 800b906:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800b90a:	ed51 fa10 	vldr	s31, [r1, #-64]	@ 0xffffffc0
 800b90e:	ed10 fa10 	vldr	s30, [r0, #-64]	@ 0xffffffc0
 800b912:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b916:	ed10 ea0e 	vldr	s28, [r0, #-56]	@ 0xffffffc8
 800b91a:	ed51 ea0e 	vldr	s29, [r1, #-56]	@ 0xffffffc8
 800b91e:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800b922:	ed10 da0d 	vldr	s26, [r0, #-52]	@ 0xffffffcc
 800b926:	ed51 da0d 	vldr	s27, [r1, #-52]	@ 0xffffffcc
 800b92a:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800b92e:	ed50 ca0c 	vldr	s25, [r0, #-48]	@ 0xffffffd0
 800b932:	ed11 ca0c 	vldr	s24, [r1, #-48]	@ 0xffffffd0
 800b936:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b93a:	ed50 ba0b 	vldr	s23, [r0, #-44]	@ 0xffffffd4
 800b93e:	ed11 ba0b 	vldr	s22, [r1, #-44]	@ 0xffffffd4
 800b942:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b946:	ed50 aa0a 	vldr	s21, [r0, #-40]	@ 0xffffffd8
 800b94a:	ed11 aa0a 	vldr	s20, [r1, #-40]	@ 0xffffffd8
 800b94e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b952:	ed50 9a09 	vldr	s19, [r0, #-36]	@ 0xffffffdc
 800b956:	ed11 9a09 	vldr	s18, [r1, #-36]	@ 0xffffffdc
 800b95a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b95e:	ed51 8a08 	vldr	s17, [r1, #-32]	@ 0xffffffe0
 800b962:	ed10 8a08 	vldr	s16, [r0, #-32]	@ 0xffffffe0
 800b966:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b96a:	ed50 0a07 	vldr	s1, [r0, #-28]	@ 0xffffffe4
 800b96e:	ed11 0a07 	vldr	s0, [r1, #-28]	@ 0xffffffe4
 800b972:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b976:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 800b97a:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800b97e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b982:	ed50 2a05 	vldr	s5, [r0, #-20]	@ 0xffffffec
 800b986:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800b98a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b98e:	ed10 3a04 	vldr	s6, [r0, #-16]
 800b992:	ed51 3a04 	vldr	s7, [r1, #-16]
 800b996:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b99a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b99e:	ed11 4a03 	vldr	s8, [r1, #-12]
 800b9a2:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b9a6:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b9aa:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b9ae:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b9b2:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b9b6:	ed51 6a01 	vldr	s13, [r1, #-4]
 800b9ba:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b9be:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b9c2:	3410      	adds	r4, #16
 800b9c4:	4564      	cmp	r4, ip
 800b9c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9ca:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b9ce:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800b9d2:	db96      	blt.n	800b902 <forward_lite_conv2d_if32of32wf32+0x432>
 800b9d4:	ed9d 6a01 	vldr	s12, [sp, #4]
 800b9d8:	4649      	mov	r1, r9
 800b9da:	4442      	add	r2, r8
 800b9dc:	4443      	add	r3, r8
 800b9de:	428e      	cmp	r6, r1
 800b9e0:	dd10      	ble.n	800ba04 <forward_lite_conv2d_if32of32wf32+0x534>
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	4615      	mov	r5, r2
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	ecf4 6a01 	vldmia	r4!, {s13}
 800b9ec:	ecf5 7a01 	vldmia	r5!, {s15}
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	4286      	cmp	r6, r0
 800b9f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b9f8:	d1f6      	bne.n	800b9e8 <forward_lite_conv2d_if32of32wf32+0x518>
 800b9fa:	1a71      	subs	r1, r6, r1
 800b9fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ba00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ba04:	3701      	adds	r7, #1
 800ba06:	45bb      	cmp	fp, r7
 800ba08:	4452      	add	r2, sl
 800ba0a:	4473      	add	r3, lr
 800ba0c:	f47f af6d 	bne.w	800b8ea <forward_lite_conv2d_if32of32wf32+0x41a>
 800ba10:	e9dd 1507 	ldrd	r1, r5, [sp, #28]
 800ba14:	e9dd 4009 	ldrd	r4, r0, [sp, #36]	@ 0x24
 800ba18:	9b06      	ldr	r3, [sp, #24]
 800ba1a:	9a03      	ldr	r2, [sp, #12]
 800ba1c:	ed81 7a00 	vstr	s14, [r1]
 800ba20:	441d      	add	r5, r3
 800ba22:	4411      	add	r1, r2
 800ba24:	1ac0      	subs	r0, r0, r3
 800ba26:	9a05      	ldr	r2, [sp, #20]
 800ba28:	9b02      	ldr	r3, [sp, #8]
 800ba2a:	3401      	adds	r4, #1
 800ba2c:	4413      	add	r3, r2
 800ba2e:	9302      	str	r3, [sp, #8]
 800ba30:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	f47f af1f 	bne.w	800b876 <forward_lite_conv2d_if32of32wf32+0x3a6>
 800ba38:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	@ 0x74
 800ba3c:	e9dd c81f 	ldrd	ip, r8, [sp, #124]	@ 0x7c
 800ba40:	f8dd e084 	ldr.w	lr, [sp, #132]	@ 0x84
 800ba44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba46:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ba48:	3204      	adds	r2, #4
 800ba4a:	4401      	add	r1, r0
 800ba4c:	4562      	cmp	r2, ip
 800ba4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ba50:	f4ff aef9 	bcc.w	800b846 <forward_lite_conv2d_if32of32wf32+0x376>
 800ba54:	e9dd 541b 	ldrd	r5, r4, [sp, #108]	@ 0x6c
 800ba58:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ba5a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800ba5c:	e6c3      	b.n	800b7e6 <forward_lite_conv2d_if32of32wf32+0x316>
 800ba5e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
 800ba62:	4686      	mov	lr, r0
 800ba64:	4403      	add	r3, r0
 800ba66:	e70d      	b.n	800b884 <forward_lite_conv2d_if32of32wf32+0x3b4>
 800ba68:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800ba78 <forward_lite_conv2d_if32of32wf32+0x5a8>
 800ba6c:	e6f1      	b.n	800b852 <forward_lite_conv2d_if32of32wf32+0x382>
 800ba6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba70:	462b      	mov	r3, r5
 800ba72:	920d      	str	r2, [sp, #52]	@ 0x34
 800ba74:	e581      	b.n	800b57a <forward_lite_conv2d_if32of32wf32+0xaa>
 800ba76:	bf00      	nop
 800ba78:	00000000 	.word	0x00000000

0800ba7c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800ba7c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ba84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba88:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800ba8c:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba90:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800ba94:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ba98:	edd3 6a00 	vldr	s13, [r3]
 800ba9c:	ed93 6a01 	vldr	s12, [r3, #4]
 800baa0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800baa4:	d421      	bmi.n	800baea <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800baa6:	428a      	cmp	r2, r1
 800baa8:	d31e      	bcc.n	800bae8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800baaa:	1d13      	adds	r3, r2, #4
 800baac:	3004      	adds	r0, #4
 800baae:	eba2 020c 	sub.w	r2, r2, ip
 800bab2:	e00c      	b.n	800bace <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800bab4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800bab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babc:	db03      	blt.n	800bac6 <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 800babe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bac2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bac6:	4293      	cmp	r3, r2
 800bac8:	ed60 7a01 	vstmdb	r0!, {s15}
 800bacc:	d00c      	beq.n	800bae8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800bace:	ed73 7a01 	vldmdb	r3!, {s15}
 800bad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bada:	daeb      	bge.n	800bab4 <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 800badc:	eef0 7a47 	vmov.f32	s15, s14
 800bae0:	4293      	cmp	r3, r2
 800bae2:	ed60 7a01 	vstmdb	r0!, {s15}
 800bae6:	d1f2      	bne.n	800bace <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 800bae8:	4770      	bx	lr
 800baea:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	d015      	beq.n	800bb20 <forward_lite_nl_relu_generic_if32of32_kernel+0xa4>
 800baf4:	428a      	cmp	r2, r1
 800baf6:	d3f7      	bcc.n	800bae8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800baf8:	1d13      	adds	r3, r2, #4
 800bafa:	3004      	adds	r0, #4
 800bafc:	eba2 020c 	sub.w	r2, r2, ip
 800bb00:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb04:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0c:	d81b      	bhi.n	800bb46 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800bb0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb12:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb16:	4293      	cmp	r3, r2
 800bb18:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb1c:	d1f0      	bne.n	800bb00 <forward_lite_nl_relu_generic_if32of32_kernel+0x84>
 800bb1e:	4770      	bx	lr
 800bb20:	428a      	cmp	r2, r1
 800bb22:	d3e1      	bcc.n	800bae8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800bb24:	2100      	movs	r1, #0
 800bb26:	1d13      	adds	r3, r2, #4
 800bb28:	3004      	adds	r0, #4
 800bb2a:	eba2 020c 	sub.w	r2, r2, ip
 800bb2e:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb32:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb3a:	dd09      	ble.n	800bb50 <forward_lite_nl_relu_generic_if32of32_kernel+0xd4>
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb42:	d1f4      	bne.n	800bb2e <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 800bb44:	4770      	bx	lr
 800bb46:	4293      	cmp	r3, r2
 800bb48:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb4c:	d1d8      	bne.n	800bb00 <forward_lite_nl_relu_generic_if32of32_kernel+0x84>
 800bb4e:	4770      	bx	lr
 800bb50:	429a      	cmp	r2, r3
 800bb52:	f840 1d04 	str.w	r1, [r0, #-4]!
 800bb56:	d1ea      	bne.n	800bb2e <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop

0800bb5c <lite_decompress_ilutof32>:
 800bb5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb60:	4604      	mov	r4, r0
 800bb62:	9d08      	ldr	r5, [sp, #32]
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800bb6a:	4608      	mov	r0, r1
 800bb6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bb70:	d012      	beq.n	800bb98 <lite_decompress_ilutof32+0x3c>
 800bb72:	2b08      	cmp	r3, #8
 800bb74:	d10e      	bne.n	800bb94 <lite_decompress_ilutof32+0x38>
 800bb76:	42ac      	cmp	r4, r5
 800bb78:	d20c      	bcs.n	800bb94 <lite_decompress_ilutof32+0x38>
 800bb7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f844 3b04 	str.w	r3, [r4], #4
 800bb88:	42a5      	cmp	r5, r4
 800bb8a:	d8f6      	bhi.n	800bb7a <lite_decompress_ilutof32+0x1e>
 800bb8c:	3e01      	subs	r6, #1
 800bb8e:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 800bb92:	1c70      	adds	r0, r6, #1
 800bb94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb98:	9b07      	ldr	r3, [sp, #28]
 800bb9a:	085f      	lsrs	r7, r3, #1
 800bb9c:	f003 0601 	and.w	r6, r3, #1
 800bba0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800bba4:	f107 38ff 	add.w	r8, r7, #4294967295
 800bba8:	42ac      	cmp	r4, r5
 800bbaa:	d2f3      	bcs.n	800bb94 <lite_decompress_ilutof32+0x38>
 800bbac:	b30f      	cbz	r7, 800bbf2 <lite_decompress_ilutof32+0x96>
 800bbae:	f104 0e08 	add.w	lr, r4, #8
 800bbb2:	f100 3cff 	add.w	ip, r0, #4294967295
 800bbb6:	eb00 0108 	add.w	r1, r0, r8
 800bbba:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800bbbe:	f10e 0e08 	add.w	lr, lr, #8
 800bbc2:	091b      	lsrs	r3, r3, #4
 800bbc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4561      	cmp	r1, ip
 800bbcc:	f84e 3c10 	str.w	r3, [lr, #-16]
 800bbd0:	f89c 3000 	ldrb.w	r3, [ip]
 800bbd4:	f003 030f 	and.w	r3, r3, #15
 800bbd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800bbe2:	d1ea      	bne.n	800bbba <lite_decompress_ilutof32+0x5e>
 800bbe4:	4438      	add	r0, r7
 800bbe6:	444c      	add	r4, r9
 800bbe8:	b92e      	cbnz	r6, 800bbf6 <lite_decompress_ilutof32+0x9a>
 800bbea:	42a5      	cmp	r5, r4
 800bbec:	d8df      	bhi.n	800bbae <lite_decompress_ilutof32+0x52>
 800bbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	b906      	cbnz	r6, 800bbf6 <lite_decompress_ilutof32+0x9a>
 800bbf4:	e7fe      	b.n	800bbf4 <lite_decompress_ilutof32+0x98>
 800bbf6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbfa:	091b      	lsrs	r3, r3, #4
 800bbfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f844 3b04 	str.w	r3, [r4], #4
 800bc06:	e7cf      	b.n	800bba8 <lite_decompress_ilutof32+0x4c>

0800bc08 <forward_lite_dense_if32of32wf32>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ed2d 8b10 	vpush	{d8-d15}
 800bc10:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800bc14:	fb06 f303 	mul.w	r3, r6, r3
 800bc18:	6801      	ldr	r1, [r0, #0]
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bc20:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bc24:	4281      	cmp	r1, r0
 800bc26:	b083      	sub	sp, #12
 800bc28:	f080 811d 	bcs.w	800be66 <forward_lite_dense_if32of32wf32+0x25e>
 800bc2c:	6915      	ldr	r5, [r2, #16]
 800bc2e:	00b7      	lsls	r7, r6, #2
 800bc30:	eb01 0907 	add.w	r9, r1, r7
 800bc34:	4589      	cmp	r9, r1
 800bc36:	6897      	ldr	r7, [r2, #8]
 800bc38:	f240 8109 	bls.w	800be4e <forward_lite_dense_if32of32wf32+0x246>
 800bc3c:	460e      	mov	r6, r1
 800bc3e:	f1a5 0e10 	sub.w	lr, r5, #16
 800bc42:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800bc46:	e9cd 0100 	strd	r0, r1, [sp]
 800bc4a:	f10e 0e01 	add.w	lr, lr, #1
 800bc4e:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 800bc52:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800bc56:	eb08 1e8e 	add.w	lr, r8, lr, lsl #6
 800bc5a:	2d0f      	cmp	r5, #15
 800bc5c:	f240 8108 	bls.w	800be70 <forward_lite_dense_if32of32wf32+0x268>
 800bc60:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800bebc <forward_lite_dense_if32of32wf32+0x2b4>
 800bc64:	4628      	mov	r0, r5
 800bc66:	f108 0140 	add.w	r1, r8, #64	@ 0x40
 800bc6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc6e:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 800bc72:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800bc76:	ed51 fa10 	vldr	s31, [r1, #-64]	@ 0xffffffc0
 800bc7a:	ed13 fa10 	vldr	s30, [r3, #-64]	@ 0xffffffc0
 800bc7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bc82:	ed51 ea0e 	vldr	s29, [r1, #-56]	@ 0xffffffc8
 800bc86:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800bc8a:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800bc8e:	ed11 da0d 	vldr	s26, [r1, #-52]	@ 0xffffffcc
 800bc92:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800bc96:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800bc9a:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800bc9e:	ed11 ca0c 	vldr	s24, [r1, #-48]	@ 0xffffffd0
 800bca2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800bca6:	ed11 ba0b 	vldr	s22, [r1, #-44]	@ 0xffffffd4
 800bcaa:	ed53 ba0b 	vldr	s23, [r3, #-44]	@ 0xffffffd4
 800bcae:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800bcb2:	ed11 aa0a 	vldr	s20, [r1, #-40]	@ 0xffffffd8
 800bcb6:	ed53 aa0a 	vldr	s21, [r3, #-40]	@ 0xffffffd8
 800bcba:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800bcbe:	ed11 9a09 	vldr	s18, [r1, #-36]	@ 0xffffffdc
 800bcc2:	ed53 9a09 	vldr	s19, [r3, #-36]	@ 0xffffffdc
 800bcc6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800bcca:	ed51 8a08 	vldr	s17, [r1, #-32]	@ 0xffffffe0
 800bcce:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 800bcd2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800bcd6:	ed11 0a07 	vldr	s0, [r1, #-28]	@ 0xffffffe4
 800bcda:	ed53 0a07 	vldr	s1, [r3, #-28]	@ 0xffffffe4
 800bcde:	eee8 7a88 	vfma.f32	s15, s17, s16
 800bce2:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800bce6:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800bcea:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bcee:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800bcf2:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800bcf6:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bcfa:	ed11 3a04 	vldr	s6, [r1, #-16]
 800bcfe:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bd02:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bd06:	ed51 4a03 	vldr	s9, [r1, #-12]
 800bd0a:	ed13 4a03 	vldr	s8, [r3, #-12]
 800bd0e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bd12:	ed51 5a02 	vldr	s11, [r1, #-8]
 800bd16:	ed13 5a02 	vldr	s10, [r3, #-8]
 800bd1a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd1e:	ed51 6a01 	vldr	s13, [r1, #-4]
 800bd22:	ed13 6a01 	vldr	s12, [r3, #-4]
 800bd26:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd2a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd2e:	3810      	subs	r0, #16
 800bd30:	280f      	cmp	r0, #15
 800bd32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd36:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800bd3a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800bd3e:	d896      	bhi.n	800bc6e <forward_lite_dense_if32of32wf32+0x66>
 800bd40:	4673      	mov	r3, lr
 800bd42:	eb07 010b 	add.w	r1, r7, fp
 800bd46:	f005 000f 	and.w	r0, r5, #15
 800bd4a:	2803      	cmp	r0, #3
 800bd4c:	d95f      	bls.n	800be0e <forward_lite_dense_if32of32wf32+0x206>
 800bd4e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd52:	edd1 3a01 	vldr	s7, [r1, #4]
 800bd56:	ed93 4a00 	vldr	s8, [r3]
 800bd5a:	edd1 4a00 	vldr	s9, [r1]
 800bd5e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bd62:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd66:	ed93 5a02 	vldr	s10, [r3, #8]
 800bd6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd6e:	edd1 5a02 	vldr	s11, [r1, #8]
 800bd72:	ed93 6a03 	vldr	s12, [r3, #12]
 800bd76:	edd1 6a03 	vldr	s13, [r1, #12]
 800bd7a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd7e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd82:	1f04      	subs	r4, r0, #4
 800bd84:	2c03      	cmp	r4, #3
 800bd86:	eeb0 7a67 	vmov.f32	s14, s15
 800bd8a:	d938      	bls.n	800bdfe <forward_lite_dense_if32of32wf32+0x1f6>
 800bd8c:	edd3 7a05 	vldr	s15, [r3, #20]
 800bd90:	edd1 3a05 	vldr	s7, [r1, #20]
 800bd94:	ed93 4a04 	vldr	s8, [r3, #16]
 800bd98:	edd1 4a04 	vldr	s9, [r1, #16]
 800bd9c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bda0:	ed93 5a06 	vldr	s10, [r3, #24]
 800bda4:	edd1 5a06 	vldr	s11, [r1, #24]
 800bda8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bdac:	ed93 6a07 	vldr	s12, [r3, #28]
 800bdb0:	edd1 6a07 	vldr	s13, [r1, #28]
 800bdb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bdb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bdbc:	f1a0 0c08 	sub.w	ip, r0, #8
 800bdc0:	f1bc 0f03 	cmp.w	ip, #3
 800bdc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdc8:	d919      	bls.n	800bdfe <forward_lite_dense_if32of32wf32+0x1f6>
 800bdca:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 800bdce:	edd3 3a09 	vldr	s7, [r3, #36]	@ 0x24
 800bdd2:	ed91 4a08 	vldr	s8, [r1, #32]
 800bdd6:	edd3 4a08 	vldr	s9, [r3, #32]
 800bdda:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bdde:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 800bde2:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800bde6:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bdea:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 800bdee:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800bdf2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bdf6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bdfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdfe:	08a4      	lsrs	r4, r4, #2
 800be00:	3401      	adds	r4, #1
 800be02:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800be06:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800be0a:	f000 0003 	and.w	r0, r0, #3
 800be0e:	b1a8      	cbz	r0, 800be3c <forward_lite_dense_if32of32wf32+0x234>
 800be10:	edd3 6a00 	vldr	s13, [r3]
 800be14:	edd1 7a00 	vldr	s15, [r1]
 800be18:	2801      	cmp	r0, #1
 800be1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be1e:	d00d      	beq.n	800be3c <forward_lite_dense_if32of32wf32+0x234>
 800be20:	edd3 6a01 	vldr	s13, [r3, #4]
 800be24:	edd1 7a01 	vldr	s15, [r1, #4]
 800be28:	2802      	cmp	r0, #2
 800be2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be2e:	d005      	beq.n	800be3c <forward_lite_dense_if32of32wf32+0x234>
 800be30:	edd1 6a02 	vldr	s13, [r1, #8]
 800be34:	edd3 7a02 	vldr	s15, [r3, #8]
 800be38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be3c:	eca6 7a01 	vstmia	r6!, {s14}
 800be40:	45b1      	cmp	r9, r6
 800be42:	4457      	add	r7, sl
 800be44:	f63f af09 	bhi.w	800bc5a <forward_lite_dense_if32of32wf32+0x52>
 800be48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be4c:	6956      	ldr	r6, [r2, #20]
 800be4e:	68d3      	ldr	r3, [r2, #12]
 800be50:	b9a3      	cbnz	r3, 800be7c <forward_lite_dense_if32of32wf32+0x274>
 800be52:	6915      	ldr	r5, [r2, #16]
 800be54:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800be58:	4288      	cmp	r0, r1
 800be5a:	eb08 0885 	add.w	r8, r8, r5, lsl #2
 800be5e:	ea4f 0786 	mov.w	r7, r6, lsl #2
 800be62:	f63f aee5 	bhi.w	800bc30 <forward_lite_dense_if32of32wf32+0x28>
 800be66:	b003      	add	sp, #12
 800be68:	ecbd 8b10 	vpop	{d8-d15}
 800be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be70:	4628      	mov	r0, r5
 800be72:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bebc <forward_lite_dense_if32of32wf32+0x2b4>
 800be76:	4639      	mov	r1, r7
 800be78:	4643      	mov	r3, r8
 800be7a:	e766      	b.n	800bd4a <forward_lite_dense_if32of32wf32+0x142>
 800be7c:	2e00      	cmp	r6, #0
 800be7e:	d0e8      	beq.n	800be52 <forward_lite_dense_if32of32wf32+0x24a>
 800be80:	edd1 7a00 	vldr	s15, [r1]
 800be84:	ed93 7a00 	vldr	s14, [r3]
 800be88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be8c:	edc1 7a00 	vstr	s15, [r1]
 800be90:	6956      	ldr	r6, [r2, #20]
 800be92:	2e01      	cmp	r6, #1
 800be94:	d9dd      	bls.n	800be52 <forward_lite_dense_if32of32wf32+0x24a>
 800be96:	2301      	movs	r3, #1
 800be98:	1d0d      	adds	r5, r1, #4
 800be9a:	68d4      	ldr	r4, [r2, #12]
 800be9c:	ed95 7a00 	vldr	s14, [r5]
 800bea0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bea4:	edd4 7a00 	vldr	s15, [r4]
 800bea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800beac:	ece5 7a01 	vstmia	r5!, {s15}
 800beb0:	6956      	ldr	r6, [r2, #20]
 800beb2:	3301      	adds	r3, #1
 800beb4:	429e      	cmp	r6, r3
 800beb6:	d8f0      	bhi.n	800be9a <forward_lite_dense_if32of32wf32+0x292>
 800beb8:	e7cb      	b.n	800be52 <forward_lite_dense_if32of32wf32+0x24a>
 800beba:	bf00      	nop
 800bebc:	00000000 	.word	0x00000000

0800bec0 <forward_lite_dense_if32of32wf32_lut4>:
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	b08d      	sub	sp, #52	@ 0x34
 800bec6:	e9dd 5419 	ldrd	r5, r4, [sp, #100]	@ 0x64
 800beca:	fb04 fc05 	mul.w	ip, r4, r5
 800bece:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 800bed2:	4604      	mov	r4, r0
 800bed4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bed8:	4618      	mov	r0, r3
 800beda:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800bede:	460d      	mov	r5, r1
 800bee0:	920a      	str	r2, [sp, #40]	@ 0x28
 800bee2:	9308      	str	r3, [sp, #32]
 800bee4:	f1b8 0f00 	cmp.w	r8, #0
 800bee8:	d004      	beq.n	800bef4 <forward_lite_dense_if32of32wf32_lut4+0x34>
 800beea:	2240      	movs	r2, #64	@ 0x40
 800beec:	4641      	mov	r1, r8
 800beee:	f000 fa79 	bl	800c3e4 <st_int8_copy>
 800bef2:	4640      	mov	r0, r8
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	429c      	cmp	r4, r3
 800bef8:	f080 8108 	bcs.w	800c10c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800befc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800befe:	08fa      	lsrs	r2, r7, #3
 800bf00:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800bf04:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 800bf08:	9405      	str	r4, [sp, #20]
 800bf0a:	46e6      	mov	lr, ip
 800bf0c:	465c      	mov	r4, fp
 800bf0e:	f007 0301 	and.w	r3, r7, #1
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	00bb      	lsls	r3, r7, #2
 800bf16:	9202      	str	r2, [sp, #8]
 800bf18:	f027 0901 	bic.w	r9, r7, #1
 800bf1c:	0092      	lsls	r2, r2, #2
 800bf1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf20:	9b05      	ldr	r3, [sp, #20]
 800bf22:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800bf26:	f105 0120 	add.w	r1, r5, #32
 800bf2a:	9204      	str	r2, [sp, #16]
 800bf2c:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf30:	9617      	str	r6, [sp, #92]	@ 0x5c
 800bf32:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800bf36:	9a07      	ldr	r2, [sp, #28]
 800bf38:	eb03 0a02 	add.w	sl, r3, r2
 800bf3c:	459a      	cmp	sl, r3
 800bf3e:	f1a1 0220 	sub.w	r2, r1, #32
 800bf42:	9206      	str	r2, [sp, #24]
 800bf44:	f240 80e5 	bls.w	800c112 <forward_lite_dense_if32of32wf32_lut4+0x252>
 800bf48:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf4c:	4698      	mov	r8, r3
 800bf4e:	465d      	mov	r5, fp
 800bf50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf52:	9b02      	ldr	r3, [sp, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 80bc 	beq.w	800c0d2 <forward_lite_dense_if32of32wf32_lut4+0x212>
 800bf5a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800c144 <forward_lite_dense_if32of32wf32_lut4+0x284>
 800bf5e:	460b      	mov	r3, r1
 800bf60:	9e04      	ldr	r6, [sp, #16]
 800bf62:	eb02 0c06 	add.w	ip, r2, r6
 800bf66:	7817      	ldrb	r7, [r2, #0]
 800bf68:	ed13 6a07 	vldr	s12, [r3, #-28]	@ 0xffffffe4
 800bf6c:	f007 0e0f 	and.w	lr, r7, #15
 800bf70:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800bf74:	edde 7a00 	vldr	s15, [lr]
 800bf78:	093f      	lsrs	r7, r7, #4
 800bf7a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bf7e:	ed53 0a08 	vldr	s1, [r3, #-32]	@ 0xffffffe0
 800bf82:	ed97 0a00 	vldr	s0, [r7]
 800bf86:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bf8a:	7856      	ldrb	r6, [r2, #1]
 800bf8c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800bf90:	0937      	lsrs	r7, r6, #4
 800bf92:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bf96:	ed97 1a00 	vldr	s2, [r7]
 800bf9a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bf9e:	f006 060f 	and.w	r6, r6, #15
 800bfa2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bfa6:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800bfaa:	ed96 2a00 	vldr	s4, [r6]
 800bfae:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bfb2:	7897      	ldrb	r7, [r2, #2]
 800bfb4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bfb8:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 800bfbc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800bfc0:	ed9e 3a00 	vldr	s6, [lr]
 800bfc4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bfc8:	f007 070f 	and.w	r7, r7, #15
 800bfcc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bfd0:	ed53 4a03 	vldr	s9, [r3, #-12]
 800bfd4:	ed97 4a00 	vldr	s8, [r7]
 800bfd8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bfdc:	78d6      	ldrb	r6, [r2, #3]
 800bfde:	ed53 5a02 	vldr	s11, [r3, #-8]
 800bfe2:	0937      	lsrs	r7, r6, #4
 800bfe4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800bfe8:	ed97 5a00 	vldr	s10, [r7]
 800bfec:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bff0:	f006 060f 	and.w	r6, r6, #15
 800bff4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bff8:	ed53 6a01 	vldr	s13, [r3, #-4]
 800bffc:	ed96 6a00 	vldr	s12, [r6]
 800c000:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c004:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c008:	3204      	adds	r2, #4
 800c00a:	4562      	cmp	r2, ip
 800c00c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c010:	f103 0320 	add.w	r3, r3, #32
 800c014:	d1a7      	bne.n	800bf66 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 800c016:	46a6      	mov	lr, r4
 800c018:	45ce      	cmp	lr, r9
 800c01a:	d261      	bcs.n	800c0e0 <forward_lite_dense_if32of32wf32_lut4+0x220>
 800c01c:	eba5 070e 	sub.w	r7, r5, lr
 800c020:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 800c024:	f10e 0208 	add.w	r2, lr, #8
 800c028:	f10c 36ff 	add.w	r6, ip, #4294967295
 800c02c:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 800c030:	f8cd a004 	str.w	sl, [sp, #4]
 800c034:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c038:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c03c:	f003 0a0f 	and.w	sl, r3, #15
 800c040:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800c044:	edda 7a00 	vldr	s15, [sl]
 800c048:	091b      	lsrs	r3, r3, #4
 800c04a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c04e:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c052:	ed93 6a00 	vldr	s12, [r3]
 800c056:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c05a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c05e:	42b7      	cmp	r7, r6
 800c060:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c064:	f102 0208 	add.w	r2, r2, #8
 800c068:	d1e4      	bne.n	800c034 <forward_lite_dense_if32of32wf32_lut4+0x174>
 800c06a:	f10b 0b01 	add.w	fp, fp, #1
 800c06e:	f8dd a004 	ldr.w	sl, [sp, #4]
 800c072:	eb0c 020b 	add.w	r2, ip, fp
 800c076:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	b30b      	cbz	r3, 800c0c2 <forward_lite_dense_if32of32wf32_lut4+0x202>
 800c07e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c082:	edde 7a00 	vldr	s15, [lr]
 800c086:	091b      	lsrs	r3, r3, #4
 800c088:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c08c:	edd3 6a00 	vldr	s13, [r3]
 800c090:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c094:	eca8 7a01 	vstmia	r8!, {s14}
 800c098:	45c2      	cmp	sl, r8
 800c09a:	f63f af5a 	bhi.w	800bf52 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800c09e:	9b05      	ldr	r3, [sp, #20]
 800c0a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0a2:	189d      	adds	r5, r3, r2
 800c0a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0a6:	b9eb      	cbnz	r3, 800c0e4 <forward_lite_dense_if32of32wf32_lut4+0x224>
 800c0a8:	9b08      	ldr	r3, [sp, #32]
 800c0aa:	42ab      	cmp	r3, r5
 800c0ac:	d92e      	bls.n	800c10c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800c0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b0:	4499      	add	r9, r3
 800c0b2:	441c      	add	r4, r3
 800c0b4:	4419      	add	r1, r3
 800c0b6:	9b05      	ldr	r3, [sp, #20]
 800c0b8:	459a      	cmp	sl, r3
 800c0ba:	d92c      	bls.n	800c116 <forward_lite_dense_if32of32wf32_lut4+0x256>
 800c0bc:	462b      	mov	r3, r5
 800c0be:	9505      	str	r5, [sp, #20]
 800c0c0:	e739      	b.n	800bf36 <forward_lite_dense_if32of32wf32_lut4+0x76>
 800c0c2:	eca8 7a01 	vstmia	r8!, {s14}
 800c0c6:	45c2      	cmp	sl, r8
 800c0c8:	d9e9      	bls.n	800c09e <forward_lite_dense_if32of32wf32_lut4+0x1de>
 800c0ca:	9b02      	ldr	r3, [sp, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f47f af44 	bne.w	800bf5a <forward_lite_dense_if32of32wf32_lut4+0x9a>
 800c0d2:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c0d6:	4694      	mov	ip, r2
 800c0d8:	45ce      	cmp	lr, r9
 800c0da:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800c144 <forward_lite_dense_if32of32wf32_lut4+0x284>
 800c0de:	d39d      	bcc.n	800c01c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 800c0e0:	4662      	mov	r2, ip
 800c0e2:	e7ca      	b.n	800c07a <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 800c0e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0de      	beq.n	800c0a8 <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 800c0ea:	9b07      	ldr	r3, [sp, #28]
 800c0ec:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800c0f0:	1aea      	subs	r2, r5, r3
 800c0f2:	edd2 7a00 	vldr	s15, [r2]
 800c0f6:	ecbc 7a01 	vldmia	ip!, {s14}
 800c0fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0fe:	ece2 7a01 	vstmia	r2!, {s15}
 800c102:	42aa      	cmp	r2, r5
 800c104:	d1f5      	bne.n	800c0f2 <forward_lite_dense_if32of32wf32_lut4+0x232>
 800c106:	9b08      	ldr	r3, [sp, #32]
 800c108:	42ab      	cmp	r3, r5
 800c10a:	d8d0      	bhi.n	800c0ae <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 800c10c:	b00d      	add	sp, #52	@ 0x34
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	461d      	mov	r5, r3
 800c114:	e7c6      	b.n	800c0a4 <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 800c116:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c11a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c11c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800c11e:	eba5 0c0c 	sub.w	ip, r5, ip
 800c122:	b169      	cbz	r1, 800c140 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c124:	4663      	mov	r3, ip
 800c126:	4632      	mov	r2, r6
 800c128:	ed93 7a00 	vldr	s14, [r3]
 800c12c:	ecf2 7a01 	vldmia	r2!, {s15}
 800c130:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c134:	ece3 7a01 	vstmia	r3!, {s15}
 800c138:	429d      	cmp	r5, r3
 800c13a:	d1f5      	bne.n	800c128 <forward_lite_dense_if32of32wf32_lut4+0x268>
 800c13c:	2900      	cmp	r1, #0
 800c13e:	d1f1      	bne.n	800c124 <forward_lite_dense_if32of32wf32_lut4+0x264>
 800c140:	e7fe      	b.n	800c140 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c142:	bf00      	nop
 800c144:	00000000 	.word	0x00000000

0800c148 <forward_lite_dense_if32of32wf32_lut8>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	b087      	sub	sp, #28
 800c14e:	e9dd 6513 	ldrd	r6, r5, [sp, #76]	@ 0x4c
 800c152:	fb05 fc06 	mul.w	ip, r5, r6
 800c156:	e9dd b511 	ldrd	fp, r5, [sp, #68]	@ 0x44
 800c15a:	4606      	mov	r6, r0
 800c15c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c15e:	4618      	mov	r0, r3
 800c160:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 800c164:	460f      	mov	r7, r1
 800c166:	9205      	str	r2, [sp, #20]
 800c168:	9303      	str	r3, [sp, #12]
 800c16a:	b12c      	cbz	r4, 800c178 <forward_lite_dense_if32of32wf32_lut8+0x30>
 800c16c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c170:	4621      	mov	r1, r4
 800c172:	f000 f937 	bl	800c3e4 <st_int8_copy>
 800c176:	4620      	mov	r0, r4
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	429e      	cmp	r6, r3
 800c17c:	f080 8118 	bcs.w	800c3b0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c180:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c182:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 800c186:	0099      	lsls	r1, r3, #2
 800c188:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800c18c:	9600      	str	r6, [sp, #0]
 800c18e:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800c192:	464e      	mov	r6, r9
 800c194:	4689      	mov	r9, r1
 800c196:	9b00      	ldr	r3, [sp, #0]
 800c198:	00aa      	lsls	r2, r5, #2
 800c19a:	9104      	str	r1, [sp, #16]
 800c19c:	4611      	mov	r1, r2
 800c19e:	465a      	mov	r2, fp
 800c1a0:	eb03 0b09 	add.w	fp, r3, r9
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	459b      	cmp	fp, r3
 800c1a8:	f005 0407 	and.w	r4, r5, #7
 800c1ac:	f1a7 0e20 	sub.w	lr, r7, #32
 800c1b0:	f240 80d7 	bls.w	800c362 <forward_lite_dense_if32of32wf32_lut8+0x21a>
 800c1b4:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 800c1b8:	469c      	mov	ip, r3
 800c1ba:	9b05      	ldr	r3, [sp, #20]
 800c1bc:	2e00      	cmp	r6, #0
 800c1be:	f000 80de 	beq.w	800c37e <forward_lite_dense_if32of32wf32_lut8+0x236>
 800c1c2:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800c3e0 <forward_lite_dense_if32of32wf32_lut8+0x298>
 800c1c6:	463d      	mov	r5, r7
 800c1c8:	eb03 090a 	add.w	r9, r3, sl
 800c1cc:	f893 e001 	ldrb.w	lr, [r3, #1]
 800c1d0:	ed15 5a07 	vldr	s10, [r5, #-28]	@ 0xffffffe4
 800c1d4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1d8:	edde 7a00 	vldr	s15, [lr]
 800c1dc:	f893 e000 	ldrb.w	lr, [r3]
 800c1e0:	ed15 6a08 	vldr	s12, [r5, #-32]	@ 0xffffffe0
 800c1e4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1e8:	edde 0a00 	vldr	s1, [lr]
 800c1ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c1f0:	f893 e002 	ldrb.w	lr, [r3, #2]
 800c1f4:	ed55 1a06 	vldr	s3, [r5, #-24]	@ 0xffffffe8
 800c1f8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c1fc:	ed9e 1a00 	vldr	s2, [lr]
 800c200:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c204:	f893 e003 	ldrb.w	lr, [r3, #3]
 800c208:	ed55 2a05 	vldr	s5, [r5, #-20]	@ 0xffffffec
 800c20c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c210:	ed9e 2a00 	vldr	s4, [lr]
 800c214:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c218:	f893 e004 	ldrb.w	lr, [r3, #4]
 800c21c:	ed55 3a04 	vldr	s7, [r5, #-16]
 800c220:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c224:	ed9e 3a00 	vldr	s6, [lr]
 800c228:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c22c:	f893 e005 	ldrb.w	lr, [r3, #5]
 800c230:	ed55 4a03 	vldr	s9, [r5, #-12]
 800c234:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c238:	ed9e 4a00 	vldr	s8, [lr]
 800c23c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c240:	f893 e006 	ldrb.w	lr, [r3, #6]
 800c244:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c248:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c24c:	ed9e 5a00 	vldr	s10, [lr]
 800c250:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c254:	f893 e007 	ldrb.w	lr, [r3, #7]
 800c258:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c25c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c260:	ed9e 6a00 	vldr	s12, [lr]
 800c264:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c268:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c26c:	3308      	adds	r3, #8
 800c26e:	454b      	cmp	r3, r9
 800c270:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c274:	f105 0520 	add.w	r5, r5, #32
 800c278:	d1a8      	bne.n	800c1cc <forward_lite_dense_if32of32wf32_lut8+0x84>
 800c27a:	4643      	mov	r3, r8
 800c27c:	2c00      	cmp	r4, #0
 800c27e:	d07c      	beq.n	800c37a <forward_lite_dense_if32of32wf32_lut8+0x232>
 800c280:	f899 5000 	ldrb.w	r5, [r9]
 800c284:	edd3 7a00 	vldr	s15, [r3]
 800c288:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c28c:	edd5 6a00 	vldr	s13, [r5]
 800c290:	2c01      	cmp	r4, #1
 800c292:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c296:	d045      	beq.n	800c324 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c298:	f899 5001 	ldrb.w	r5, [r9, #1]
 800c29c:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2a0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2a4:	edd5 6a00 	vldr	s13, [r5]
 800c2a8:	2c02      	cmp	r4, #2
 800c2aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2ae:	d039      	beq.n	800c324 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2b0:	f899 5002 	ldrb.w	r5, [r9, #2]
 800c2b4:	edd3 7a02 	vldr	s15, [r3, #8]
 800c2b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2bc:	edd5 6a00 	vldr	s13, [r5]
 800c2c0:	2c03      	cmp	r4, #3
 800c2c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2c6:	d02d      	beq.n	800c324 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2c8:	f899 5003 	ldrb.w	r5, [r9, #3]
 800c2cc:	edd3 6a03 	vldr	s13, [r3, #12]
 800c2d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2d4:	edd5 7a00 	vldr	s15, [r5]
 800c2d8:	2c04      	cmp	r4, #4
 800c2da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2de:	d021      	beq.n	800c324 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2e0:	f899 5004 	ldrb.w	r5, [r9, #4]
 800c2e4:	edd3 6a04 	vldr	s13, [r3, #16]
 800c2e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c2ec:	edd5 7a00 	vldr	s15, [r5]
 800c2f0:	2c05      	cmp	r4, #5
 800c2f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2f6:	d015      	beq.n	800c324 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c2f8:	f899 5005 	ldrb.w	r5, [r9, #5]
 800c2fc:	edd3 6a05 	vldr	s13, [r3, #20]
 800c300:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c304:	edd5 7a00 	vldr	s15, [r5]
 800c308:	2c06      	cmp	r4, #6
 800c30a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c30e:	d009      	beq.n	800c324 <forward_lite_dense_if32of32wf32_lut8+0x1dc>
 800c310:	edd3 7a06 	vldr	s15, [r3, #24]
 800c314:	f899 3006 	ldrb.w	r3, [r9, #6]
 800c318:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c31c:	edd3 6a00 	vldr	s13, [r3]
 800c320:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c324:	eb09 0304 	add.w	r3, r9, r4
 800c328:	ecac 7a01 	vstmia	ip!, {s14}
 800c32c:	45e3      	cmp	fp, ip
 800c32e:	f63f af45 	bhi.w	800c1bc <forward_lite_dense_if32of32wf32_lut8+0x74>
 800c332:	e9dd 3900 	ldrd	r3, r9, [sp]
 800c336:	9d04      	ldr	r5, [sp, #16]
 800c338:	eb03 0e05 	add.w	lr, r3, r5
 800c33c:	bb2a      	cbnz	r2, 800c38a <forward_lite_dense_if32of32wf32_lut8+0x242>
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	4573      	cmp	r3, lr
 800c342:	d935      	bls.n	800c3b0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c344:	9b00      	ldr	r3, [sp, #0]
 800c346:	4488      	add	r8, r1
 800c348:	459b      	cmp	fp, r3
 800c34a:	440f      	add	r7, r1
 800c34c:	d944      	bls.n	800c3d8 <forward_lite_dense_if32of32wf32_lut8+0x290>
 800c34e:	4673      	mov	r3, lr
 800c350:	eb03 0b09 	add.w	fp, r3, r9
 800c354:	459b      	cmp	fp, r3
 800c356:	f8cd e000 	str.w	lr, [sp]
 800c35a:	f1a7 0e20 	sub.w	lr, r7, #32
 800c35e:	f63f af29 	bhi.w	800c1b4 <forward_lite_dense_if32of32wf32_lut8+0x6c>
 800c362:	b98a      	cbnz	r2, 800c388 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800c364:	461e      	mov	r6, r3
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	4649      	mov	r1, r9
 800c36a:	42b3      	cmp	r3, r6
 800c36c:	4693      	mov	fp, r2
 800c36e:	d91f      	bls.n	800c3b0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c370:	465b      	mov	r3, fp
 800c372:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c374:	4249      	negs	r1, r1
 800c376:	b9f3      	cbnz	r3, 800c3b6 <forward_lite_dense_if32of32wf32_lut8+0x26e>
 800c378:	e7fe      	b.n	800c378 <forward_lite_dense_if32of32wf32_lut8+0x230>
 800c37a:	464b      	mov	r3, r9
 800c37c:	e7d4      	b.n	800c328 <forward_lite_dense_if32of32wf32_lut8+0x1e0>
 800c37e:	4699      	mov	r9, r3
 800c380:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800c3e0 <forward_lite_dense_if32of32wf32_lut8+0x298>
 800c384:	9b02      	ldr	r3, [sp, #8]
 800c386:	e779      	b.n	800c27c <forward_lite_dense_if32of32wf32_lut8+0x134>
 800c388:	469e      	mov	lr, r3
 800c38a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d0d6      	beq.n	800c33e <forward_lite_dense_if32of32wf32_lut8+0x1f6>
 800c390:	4615      	mov	r5, r2
 800c392:	ebae 0309 	sub.w	r3, lr, r9
 800c396:	edd3 7a00 	vldr	s15, [r3]
 800c39a:	ecb5 7a01 	vldmia	r5!, {s14}
 800c39e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3a2:	ece3 7a01 	vstmia	r3!, {s15}
 800c3a6:	4573      	cmp	r3, lr
 800c3a8:	d1f5      	bne.n	800c396 <forward_lite_dense_if32of32wf32_lut8+0x24e>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	4573      	cmp	r3, lr
 800c3ae:	d8c9      	bhi.n	800c344 <forward_lite_dense_if32of32wf32_lut8+0x1fc>
 800c3b0:	b007      	add	sp, #28
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	d0dd      	beq.n	800c376 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800c3ba:	469b      	mov	fp, r3
 800c3bc:	4431      	add	r1, r6
 800c3be:	460b      	mov	r3, r1
 800c3c0:	465a      	mov	r2, fp
 800c3c2:	ed93 7a00 	vldr	s14, [r3]
 800c3c6:	ecf2 7a01 	vldmia	r2!, {s15}
 800c3ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3ce:	ece3 7a01 	vstmia	r3!, {s15}
 800c3d2:	42b3      	cmp	r3, r6
 800c3d4:	d1f5      	bne.n	800c3c2 <forward_lite_dense_if32of32wf32_lut8+0x27a>
 800c3d6:	e7f2      	b.n	800c3be <forward_lite_dense_if32of32wf32_lut8+0x276>
 800c3d8:	4649      	mov	r1, r9
 800c3da:	4693      	mov	fp, r2
 800c3dc:	4676      	mov	r6, lr
 800c3de:	e7c7      	b.n	800c370 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800c3e0:	00000000 	.word	0x00000000

0800c3e4 <st_int8_copy>:
 800c3e4:	4288      	cmp	r0, r1
 800c3e6:	d021      	beq.n	800c42c <st_int8_copy+0x48>
 800c3e8:	b302      	cbz	r2, 800c42c <st_int8_copy+0x48>
 800c3ea:	4288      	cmp	r0, r1
 800c3ec:	d313      	bcc.n	800c416 <st_int8_copy+0x32>
 800c3ee:	2a03      	cmp	r2, #3
 800c3f0:	d81d      	bhi.n	800c42e <st_int8_copy+0x4a>
 800c3f2:	3a01      	subs	r2, #1
 800c3f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c3f8:	f801 3b01 	strb.w	r3, [r1], #1
 800c3fc:	b1b2      	cbz	r2, 800c42c <st_int8_copy+0x48>
 800c3fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c402:	f801 3b01 	strb.w	r3, [r1], #1
 800c406:	2a01      	cmp	r2, #1
 800c408:	f000 8088 	beq.w	800c51c <st_int8_copy+0x138>
 800c40c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c410:	f801 3b01 	strb.w	r3, [r1], #1
 800c414:	4770      	bx	lr
 800c416:	1883      	adds	r3, r0, r2
 800c418:	428b      	cmp	r3, r1
 800c41a:	d9e8      	bls.n	800c3ee <st_int8_copy+0xa>
 800c41c:	440a      	add	r2, r1
 800c41e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800c422:	4298      	cmp	r0, r3
 800c424:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800c428:	d1f9      	bne.n	800c41e <st_int8_copy+0x3a>
 800c42a:	4770      	bx	lr
 800c42c:	4770      	bx	lr
 800c42e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c432:	f001 0e03 	and.w	lr, r1, #3
 800c436:	f1ce 0304 	rsb	r3, lr, #4
 800c43a:	eba2 0c03 	sub.w	ip, r2, r3
 800c43e:	f000 0803 	and.w	r8, r0, #3
 800c442:	f1ce 0203 	rsb	r2, lr, #3
 800c446:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c44a:	f801 3b01 	strb.w	r3, [r1], #1
 800c44e:	b182      	cbz	r2, 800c472 <st_int8_copy+0x8e>
 800c450:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c454:	f801 3b01 	strb.w	r3, [r1], #1
 800c458:	2a01      	cmp	r2, #1
 800c45a:	d00a      	beq.n	800c472 <st_int8_copy+0x8e>
 800c45c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c460:	f801 3b01 	strb.w	r3, [r1], #1
 800c464:	f1be 0f01 	cmp.w	lr, #1
 800c468:	d003      	beq.n	800c472 <st_int8_copy+0x8e>
 800c46a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c46e:	f801 3b01 	strb.w	r3, [r1], #1
 800c472:	45c6      	cmp	lr, r8
 800c474:	d02a      	beq.n	800c4cc <st_int8_copy+0xe8>
 800c476:	ea5f 121c 	movs.w	r2, ip, lsr #4
 800c47a:	d00a      	beq.n	800c492 <st_int8_copy+0xae>
 800c47c:	f850 3b04 	ldr.w	r3, [r0], #4
 800c480:	f850 4b04 	ldr.w	r4, [r0], #4
 800c484:	f850 5b04 	ldr.w	r5, [r0], #4
 800c488:	f850 6b04 	ldr.w	r6, [r0], #4
 800c48c:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c48e:	3a01      	subs	r2, #1
 800c490:	d1f4      	bne.n	800c47c <st_int8_copy+0x98>
 800c492:	f01c 0f08 	tst.w	ip, #8
 800c496:	d004      	beq.n	800c4a2 <st_int8_copy+0xbe>
 800c498:	f850 3b04 	ldr.w	r3, [r0], #4
 800c49c:	f850 4b04 	ldr.w	r4, [r0], #4
 800c4a0:	c118      	stmia	r1!, {r3, r4}
 800c4a2:	f01c 0f04 	tst.w	ip, #4
 800c4a6:	d003      	beq.n	800c4b0 <st_int8_copy+0xcc>
 800c4a8:	f850 3b04 	ldr.w	r3, [r0], #4
 800c4ac:	f841 3b04 	str.w	r3, [r1], #4
 800c4b0:	f01c 0f02 	tst.w	ip, #2
 800c4b4:	d003      	beq.n	800c4be <st_int8_copy+0xda>
 800c4b6:	f830 3b02 	ldrh.w	r3, [r0], #2
 800c4ba:	f821 3b02 	strh.w	r3, [r1], #2
 800c4be:	f01c 0f01 	tst.w	ip, #1
 800c4c2:	d001      	beq.n	800c4c8 <st_int8_copy+0xe4>
 800c4c4:	7803      	ldrb	r3, [r0, #0]
 800c4c6:	700b      	strb	r3, [r1, #0]
 800c4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4cc:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800c4d0:	d00e      	beq.n	800c4f0 <st_int8_copy+0x10c>
 800c4d2:	4688      	mov	r8, r1
 800c4d4:	4686      	mov	lr, r0
 800c4d6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4da:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4de:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4e2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4e6:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ea:	4641      	mov	r1, r8
 800c4ec:	4670      	mov	r0, lr
 800c4ee:	d1f0      	bne.n	800c4d2 <st_int8_copy+0xee>
 800c4f0:	f01c 0f20 	tst.w	ip, #32
 800c4f4:	d007      	beq.n	800c506 <st_int8_copy+0x122>
 800c4f6:	4688      	mov	r8, r1
 800c4f8:	4686      	mov	lr, r0
 800c4fa:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c4fe:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800c502:	4641      	mov	r1, r8
 800c504:	4670      	mov	r0, lr
 800c506:	f01c 0f10 	tst.w	ip, #16
 800c50a:	d001      	beq.n	800c510 <st_int8_copy+0x12c>
 800c50c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800c50e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c510:	f01c 0f08 	tst.w	ip, #8
 800c514:	d0c5      	beq.n	800c4a2 <st_int8_copy+0xbe>
 800c516:	c818      	ldmia	r0!, {r3, r4}
 800c518:	c118      	stmia	r1!, {r3, r4}
 800c51a:	e7c2      	b.n	800c4a2 <st_int8_copy+0xbe>
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop

0800c520 <ai_array_to_buffer_fmt>:
 800c520:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c524:	2b02      	cmp	r3, #2
 800c526:	d055      	beq.n	800c5d4 <ai_array_to_buffer_fmt+0xb4>
 800c528:	4a2d      	ldr	r2, [pc, #180]	@ (800c5e0 <ai_array_to_buffer_fmt+0xc0>)
 800c52a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800c52e:	4293      	cmp	r3, r2
 800c530:	d010      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c532:	dc21      	bgt.n	800c578 <ai_array_to_buffer_fmt+0x58>
 800c534:	4a2b      	ldr	r2, [pc, #172]	@ (800c5e4 <ai_array_to_buffer_fmt+0xc4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d00c      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c53a:	dd0f      	ble.n	800c55c <ai_array_to_buffer_fmt+0x3c>
 800c53c:	4a2a      	ldr	r2, [pc, #168]	@ (800c5e8 <ai_array_to_buffer_fmt+0xc8>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d008      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c542:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800c546:	4293      	cmp	r3, r2
 800c548:	d004      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c54a:	4a28      	ldr	r2, [pc, #160]	@ (800c5ec <ai_array_to_buffer_fmt+0xcc>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	bf0c      	ite	eq
 800c550:	4613      	moveq	r3, r2
 800c552:	2340      	movne	r3, #64	@ 0x40
 800c554:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c558:	4318      	orrs	r0, r3
 800c55a:	4770      	bx	lr
 800c55c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c560:	4293      	cmp	r3, r2
 800c562:	d0f7      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c564:	dd2c      	ble.n	800c5c0 <ai_array_to_buffer_fmt+0xa0>
 800c566:	4a22      	ldr	r2, [pc, #136]	@ (800c5f0 <ai_array_to_buffer_fmt+0xd0>)
 800c568:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c56c:	4293      	cmp	r3, r2
 800c56e:	bf0c      	ite	eq
 800c570:	4613      	moveq	r3, r2
 800c572:	2340      	movne	r3, #64	@ 0x40
 800c574:	4318      	orrs	r0, r3
 800c576:	4770      	bx	lr
 800c578:	4a1e      	ldr	r2, [pc, #120]	@ (800c5f4 <ai_array_to_buffer_fmt+0xd4>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d0ea      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c57e:	dd10      	ble.n	800c5a2 <ai_array_to_buffer_fmt+0x82>
 800c580:	4a1d      	ldr	r2, [pc, #116]	@ (800c5f8 <ai_array_to_buffer_fmt+0xd8>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d0e6      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c586:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d0e2      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c58e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800c592:	4293      	cmp	r3, r2
 800c594:	bf0c      	ite	eq
 800c596:	4613      	moveq	r3, r2
 800c598:	2340      	movne	r3, #64	@ 0x40
 800c59a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800c59e:	4318      	orrs	r0, r3
 800c5a0:	4770      	bx	lr
 800c5a2:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d0d4      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c5aa:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d0d0      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c5b2:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	bf0c      	ite	eq
 800c5ba:	4613      	moveq	r3, r2
 800c5bc:	2340      	movne	r3, #64	@ 0x40
 800c5be:	e7c9      	b.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c5c0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d0c5      	beq.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c5c8:	3280      	adds	r2, #128	@ 0x80
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	bf0c      	ite	eq
 800c5ce:	4613      	moveq	r3, r2
 800c5d0:	2340      	movne	r3, #64	@ 0x40
 800c5d2:	e7bf      	b.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c5d4:	4b09      	ldr	r3, [pc, #36]	@ (800c5fc <ai_array_to_buffer_fmt+0xdc>)
 800c5d6:	4003      	ands	r3, r0
 800c5d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c5dc:	e7ba      	b.n	800c554 <ai_array_to_buffer_fmt+0x34>
 800c5de:	bf00      	nop
 800c5e0:	00821040 	.word	0x00821040
 800c5e4:	00040840 	.word	0x00040840
 800c5e8:	00041040 	.word	0x00041040
 800c5ec:	0004084f 	.word	0x0004084f
 800c5f0:	00040447 	.word	0x00040447
 800c5f4:	00840447 	.word	0x00840447
 800c5f8:	0084084f 	.word	0x0084084f
 800c5fc:	00803fff 	.word	0x00803fff

0800c600 <ai_array_get_data_byte_size>:
 800c600:	b161      	cbz	r1, 800c61c <ai_array_get_data_byte_size+0x1c>
 800c602:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c606:	fb03 f101 	mul.w	r1, r3, r1
 800c60a:	f3c0 5341 	ubfx	r3, r0, #21, #2
 800c60e:	1dc8      	adds	r0, r1, #7
 800c610:	f020 0007 	bic.w	r0, r0, #7
 800c614:	40d8      	lsrs	r0, r3
 800c616:	3007      	adds	r0, #7
 800c618:	08c0      	lsrs	r0, r0, #3
 800c61a:	4770      	bx	lr
 800c61c:	4608      	mov	r0, r1
 800c61e:	4770      	bx	lr

0800c620 <ai_version_get>:
 800c620:	0212      	lsls	r2, r2, #8
 800c622:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c626:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c62a:	4770      	bx	lr

0800c62c <ai_platform_version_get>:
 800c62c:	2300      	movs	r3, #0
 800c62e:	0e02      	lsrs	r2, r0, #24
 800c630:	f362 0307 	bfi	r3, r2, #0, #8
 800c634:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800c638:	f362 230f 	bfi	r3, r2, #8, #8
 800c63c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c640:	f360 4317 	bfi	r3, r0, #16, #8
 800c644:	b082      	sub	sp, #8
 800c646:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 800c64a:	b002      	add	sp, #8
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop

0800c650 <get_tensor_byte_size>:
 800c650:	b410      	push	{r4}
 800c652:	68c4      	ldr	r4, [r0, #12]
 800c654:	6941      	ldr	r1, [r0, #20]
 800c656:	6983      	ldr	r3, [r0, #24]
 800c658:	68c9      	ldr	r1, [r1, #12]
 800c65a:	68e0      	ldr	r0, [r4, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	fb01 f000 	mul.w	r0, r1, r0
 800c662:	4a06      	ldr	r2, [pc, #24]	@ (800c67c <get_tensor_byte_size+0x2c>)
 800c664:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c668:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c66c:	4293      	cmp	r3, r2
 800c66e:	bf04      	itt	eq
 800c670:	3007      	addeq	r0, #7
 800c672:	08c0      	lsreq	r0, r0, #3
 800c674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	000400c0 	.word	0x000400c0

0800c680 <expf>:
 800c680:	b508      	push	{r3, lr}
 800c682:	ed2d 8b02 	vpush	{d8}
 800c686:	eef0 8a40 	vmov.f32	s17, s0
 800c68a:	f000 f881 	bl	800c790 <__ieee754_expf>
 800c68e:	eeb0 8a40 	vmov.f32	s16, s0
 800c692:	eeb0 0a68 	vmov.f32	s0, s17
 800c696:	f000 f847 	bl	800c728 <finitef>
 800c69a:	b160      	cbz	r0, 800c6b6 <expf+0x36>
 800c69c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c6dc <expf+0x5c>
 800c6a0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a8:	dd0a      	ble.n	800c6c0 <expf+0x40>
 800c6aa:	f001 f891 	bl	800d7d0 <__errno>
 800c6ae:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c6e0 <expf+0x60>
 800c6b2:	2322      	movs	r3, #34	@ 0x22
 800c6b4:	6003      	str	r3, [r0, #0]
 800c6b6:	eeb0 0a48 	vmov.f32	s0, s16
 800c6ba:	ecbd 8b02 	vpop	{d8}
 800c6be:	bd08      	pop	{r3, pc}
 800c6c0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c6e4 <expf+0x64>
 800c6c4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6cc:	d5f3      	bpl.n	800c6b6 <expf+0x36>
 800c6ce:	f001 f87f 	bl	800d7d0 <__errno>
 800c6d2:	2322      	movs	r3, #34	@ 0x22
 800c6d4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c6e8 <expf+0x68>
 800c6d8:	6003      	str	r3, [r0, #0]
 800c6da:	e7ec      	b.n	800c6b6 <expf+0x36>
 800c6dc:	42b17217 	.word	0x42b17217
 800c6e0:	7f800000 	.word	0x7f800000
 800c6e4:	c2cff1b5 	.word	0xc2cff1b5
 800c6e8:	00000000 	.word	0x00000000

0800c6ec <sqrtf>:
 800c6ec:	b508      	push	{r3, lr}
 800c6ee:	ed2d 8b02 	vpush	{d8}
 800c6f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6f6:	f000 f847 	bl	800c788 <__ieee754_sqrtf>
 800c6fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	d60c      	bvs.n	800c71e <sqrtf+0x32>
 800c704:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c724 <sqrtf+0x38>
 800c708:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c710:	d505      	bpl.n	800c71e <sqrtf+0x32>
 800c712:	f001 f85d 	bl	800d7d0 <__errno>
 800c716:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c71a:	2321      	movs	r3, #33	@ 0x21
 800c71c:	6003      	str	r3, [r0, #0]
 800c71e:	ecbd 8b02 	vpop	{d8}
 800c722:	bd08      	pop	{r3, pc}
 800c724:	00000000 	.word	0x00000000

0800c728 <finitef>:
 800c728:	ee10 3a10 	vmov	r3, s0
 800c72c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c730:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c734:	bfac      	ite	ge
 800c736:	2000      	movge	r0, #0
 800c738:	2001      	movlt	r0, #1
 800c73a:	4770      	bx	lr

0800c73c <with_errnof>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	ed2d 8b02 	vpush	{d8}
 800c742:	eeb0 8a40 	vmov.f32	s16, s0
 800c746:	4604      	mov	r4, r0
 800c748:	f001 f842 	bl	800d7d0 <__errno>
 800c74c:	6004      	str	r4, [r0, #0]
 800c74e:	eeb0 0a48 	vmov.f32	s0, s16
 800c752:	ecbd 8b02 	vpop	{d8}
 800c756:	bd10      	pop	{r4, pc}

0800c758 <xflowf>:
 800c758:	b130      	cbz	r0, 800c768 <xflowf+0x10>
 800c75a:	eef1 7a40 	vneg.f32	s15, s0
 800c75e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c762:	2022      	movs	r0, #34	@ 0x22
 800c764:	f7ff bfea 	b.w	800c73c <with_errnof>
 800c768:	eef0 7a40 	vmov.f32	s15, s0
 800c76c:	e7f7      	b.n	800c75e <xflowf+0x6>
	...

0800c770 <__math_uflowf>:
 800c770:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c778 <__math_uflowf+0x8>
 800c774:	f7ff bff0 	b.w	800c758 <xflowf>
 800c778:	10000000 	.word	0x10000000

0800c77c <__math_oflowf>:
 800c77c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c784 <__math_oflowf+0x8>
 800c780:	f7ff bfea 	b.w	800c758 <xflowf>
 800c784:	70000000 	.word	0x70000000

0800c788 <__ieee754_sqrtf>:
 800c788:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c78c:	4770      	bx	lr
	...

0800c790 <__ieee754_expf>:
 800c790:	ee10 2a10 	vmov	r2, s0
 800c794:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c798:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c79c:	d902      	bls.n	800c7a4 <__ieee754_expf+0x14>
 800c79e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7a2:	4770      	bx	lr
 800c7a4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c7a8:	d105      	bne.n	800c7b6 <__ieee754_expf+0x26>
 800c7aa:	2900      	cmp	r1, #0
 800c7ac:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c8e4 <__ieee754_expf+0x154>
 800c7b0:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800c7b4:	4770      	bx	lr
 800c7b6:	484c      	ldr	r0, [pc, #304]	@ (800c8e8 <__ieee754_expf+0x158>)
 800c7b8:	4282      	cmp	r2, r0
 800c7ba:	dd02      	ble.n	800c7c2 <__ieee754_expf+0x32>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7ff bfdd 	b.w	800c77c <__math_oflowf>
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	da05      	bge.n	800c7d2 <__ieee754_expf+0x42>
 800c7c6:	4a49      	ldr	r2, [pc, #292]	@ (800c8ec <__ieee754_expf+0x15c>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d902      	bls.n	800c7d2 <__ieee754_expf+0x42>
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	f7ff bfcf 	b.w	800c770 <__math_uflowf>
 800c7d2:	4a47      	ldr	r2, [pc, #284]	@ (800c8f0 <__ieee754_expf+0x160>)
 800c7d4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d952      	bls.n	800c882 <__ieee754_expf+0xf2>
 800c7dc:	4a45      	ldr	r2, [pc, #276]	@ (800c8f4 <__ieee754_expf+0x164>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c7e4:	d834      	bhi.n	800c850 <__ieee754_expf+0xc0>
 800c7e6:	4b44      	ldr	r3, [pc, #272]	@ (800c8f8 <__ieee754_expf+0x168>)
 800c7e8:	4413      	add	r3, r2
 800c7ea:	ed93 7a00 	vldr	s14, [r3]
 800c7ee:	4b43      	ldr	r3, [pc, #268]	@ (800c8fc <__ieee754_expf+0x16c>)
 800c7f0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f081 0201 	eor.w	r2, r1, #1
 800c7fa:	edd3 7a00 	vldr	s15, [r3]
 800c7fe:	1a52      	subs	r2, r2, r1
 800c800:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c804:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c808:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c900 <__ieee754_expf+0x170>
 800c80c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c904 <__ieee754_expf+0x174>
 800c810:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c814:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c908 <__ieee754_expf+0x178>
 800c818:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c81c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c90c <__ieee754_expf+0x17c>
 800c820:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c824:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c910 <__ieee754_expf+0x180>
 800c828:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c82c:	eef0 6a40 	vmov.f32	s13, s0
 800c830:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c834:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c838:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c83c:	bb92      	cbnz	r2, 800c8a4 <__ieee754_expf+0x114>
 800c83e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c842:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c846:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c84a:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c84e:	4770      	bx	lr
 800c850:	4b30      	ldr	r3, [pc, #192]	@ (800c914 <__ieee754_expf+0x184>)
 800c852:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c918 <__ieee754_expf+0x188>
 800c856:	4413      	add	r3, r2
 800c858:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c91c <__ieee754_expf+0x18c>
 800c85c:	edd3 7a00 	vldr	s15, [r3]
 800c860:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c864:	eeb0 7a40 	vmov.f32	s14, s0
 800c868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c86c:	ee17 2a90 	vmov	r2, s15
 800c870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c874:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c878:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c920 <__ieee754_expf+0x190>
 800c87c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c880:	e7be      	b.n	800c800 <__ieee754_expf+0x70>
 800c882:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c886:	d20b      	bcs.n	800c8a0 <__ieee754_expf+0x110>
 800c888:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c924 <__ieee754_expf+0x194>
 800c88c:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c890:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c898:	dd02      	ble.n	800c8a0 <__ieee754_expf+0x110>
 800c89a:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c89e:	4770      	bx	lr
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	e7af      	b.n	800c804 <__ieee754_expf+0x74>
 800c8a4:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c8a8:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c8ac:	bfb8      	it	lt
 800c8ae:	3264      	addlt	r2, #100	@ 0x64
 800c8b0:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c8b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c8b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8bc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c8c0:	ee17 3a90 	vmov	r3, s15
 800c8c4:	bfb5      	itete	lt
 800c8c6:	eddf 7a18 	vldrlt	s15, [pc, #96]	@ 800c928 <__ieee754_expf+0x198>
 800c8ca:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c8ce:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c8d2:	ee00 3a10 	vmovge	s0, r3
 800c8d6:	bfbc      	itt	lt
 800c8d8:	ee00 3a10 	vmovlt	s0, r3
 800c8dc:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	00000000 	.word	0x00000000
 800c8e8:	42b17217 	.word	0x42b17217
 800c8ec:	42cff1b5 	.word	0x42cff1b5
 800c8f0:	3eb17218 	.word	0x3eb17218
 800c8f4:	3f851591 	.word	0x3f851591
 800c8f8:	0801e660 	.word	0x0801e660
 800c8fc:	0801e658 	.word	0x0801e658
 800c900:	3331bb4c 	.word	0x3331bb4c
 800c904:	b5ddea0e 	.word	0xb5ddea0e
 800c908:	388ab355 	.word	0x388ab355
 800c90c:	bb360b61 	.word	0xbb360b61
 800c910:	3e2aaaab 	.word	0x3e2aaaab
 800c914:	0801e668 	.word	0x0801e668
 800c918:	3fb8aa3b 	.word	0x3fb8aa3b
 800c91c:	3f317180 	.word	0x3f317180
 800c920:	3717f7d1 	.word	0x3717f7d1
 800c924:	7149f2ca 	.word	0x7149f2ca
 800c928:	0d800000 	.word	0x0d800000

0800c92c <malloc>:
 800c92c:	4b02      	ldr	r3, [pc, #8]	@ (800c938 <malloc+0xc>)
 800c92e:	4601      	mov	r1, r0
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f000 b825 	b.w	800c980 <_malloc_r>
 800c936:	bf00      	nop
 800c938:	20000f88 	.word	0x20000f88

0800c93c <sbrk_aligned>:
 800c93c:	b570      	push	{r4, r5, r6, lr}
 800c93e:	4e0f      	ldr	r6, [pc, #60]	@ (800c97c <sbrk_aligned+0x40>)
 800c940:	460c      	mov	r4, r1
 800c942:	4605      	mov	r5, r0
 800c944:	6831      	ldr	r1, [r6, #0]
 800c946:	b911      	cbnz	r1, 800c94e <sbrk_aligned+0x12>
 800c948:	f000 ff20 	bl	800d78c <_sbrk_r>
 800c94c:	6030      	str	r0, [r6, #0]
 800c94e:	4621      	mov	r1, r4
 800c950:	4628      	mov	r0, r5
 800c952:	f000 ff1b 	bl	800d78c <_sbrk_r>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	d103      	bne.n	800c962 <sbrk_aligned+0x26>
 800c95a:	f04f 34ff 	mov.w	r4, #4294967295
 800c95e:	4620      	mov	r0, r4
 800c960:	bd70      	pop	{r4, r5, r6, pc}
 800c962:	1cc4      	adds	r4, r0, #3
 800c964:	f024 0403 	bic.w	r4, r4, #3
 800c968:	42a0      	cmp	r0, r4
 800c96a:	d0f8      	beq.n	800c95e <sbrk_aligned+0x22>
 800c96c:	1a21      	subs	r1, r4, r0
 800c96e:	4628      	mov	r0, r5
 800c970:	f000 ff0c 	bl	800d78c <_sbrk_r>
 800c974:	3001      	adds	r0, #1
 800c976:	d1f2      	bne.n	800c95e <sbrk_aligned+0x22>
 800c978:	e7ef      	b.n	800c95a <sbrk_aligned+0x1e>
 800c97a:	bf00      	nop
 800c97c:	2007afc0 	.word	0x2007afc0

0800c980 <_malloc_r>:
 800c980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c984:	1ccd      	adds	r5, r1, #3
 800c986:	4606      	mov	r6, r0
 800c988:	f025 0503 	bic.w	r5, r5, #3
 800c98c:	3508      	adds	r5, #8
 800c98e:	2d0c      	cmp	r5, #12
 800c990:	bf38      	it	cc
 800c992:	250c      	movcc	r5, #12
 800c994:	2d00      	cmp	r5, #0
 800c996:	db01      	blt.n	800c99c <_malloc_r+0x1c>
 800c998:	42a9      	cmp	r1, r5
 800c99a:	d904      	bls.n	800c9a6 <_malloc_r+0x26>
 800c99c:	230c      	movs	r3, #12
 800c99e:	6033      	str	r3, [r6, #0]
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca7c <_malloc_r+0xfc>
 800c9aa:	f000 f869 	bl	800ca80 <__malloc_lock>
 800c9ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b2:	461c      	mov	r4, r3
 800c9b4:	bb44      	cbnz	r4, 800ca08 <_malloc_r+0x88>
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7ff ffbf 	bl	800c93c <sbrk_aligned>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	d158      	bne.n	800ca76 <_malloc_r+0xf6>
 800c9c4:	f8d8 4000 	ldr.w	r4, [r8]
 800c9c8:	4627      	mov	r7, r4
 800c9ca:	2f00      	cmp	r7, #0
 800c9cc:	d143      	bne.n	800ca56 <_malloc_r+0xd6>
 800c9ce:	2c00      	cmp	r4, #0
 800c9d0:	d04b      	beq.n	800ca6a <_malloc_r+0xea>
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	4639      	mov	r1, r7
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	eb04 0903 	add.w	r9, r4, r3
 800c9dc:	f000 fed6 	bl	800d78c <_sbrk_r>
 800c9e0:	4581      	cmp	r9, r0
 800c9e2:	d142      	bne.n	800ca6a <_malloc_r+0xea>
 800c9e4:	6821      	ldr	r1, [r4, #0]
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	1a6d      	subs	r5, r5, r1
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7ff ffa6 	bl	800c93c <sbrk_aligned>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d03a      	beq.n	800ca6a <_malloc_r+0xea>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	442b      	add	r3, r5
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	bb62      	cbnz	r2, 800ca5c <_malloc_r+0xdc>
 800ca02:	f8c8 7000 	str.w	r7, [r8]
 800ca06:	e00f      	b.n	800ca28 <_malloc_r+0xa8>
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	1b52      	subs	r2, r2, r5
 800ca0c:	d420      	bmi.n	800ca50 <_malloc_r+0xd0>
 800ca0e:	2a0b      	cmp	r2, #11
 800ca10:	d917      	bls.n	800ca42 <_malloc_r+0xc2>
 800ca12:	1961      	adds	r1, r4, r5
 800ca14:	42a3      	cmp	r3, r4
 800ca16:	6025      	str	r5, [r4, #0]
 800ca18:	bf18      	it	ne
 800ca1a:	6059      	strne	r1, [r3, #4]
 800ca1c:	6863      	ldr	r3, [r4, #4]
 800ca1e:	bf08      	it	eq
 800ca20:	f8c8 1000 	streq.w	r1, [r8]
 800ca24:	5162      	str	r2, [r4, r5]
 800ca26:	604b      	str	r3, [r1, #4]
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f000 f82f 	bl	800ca8c <__malloc_unlock>
 800ca2e:	f104 000b 	add.w	r0, r4, #11
 800ca32:	1d23      	adds	r3, r4, #4
 800ca34:	f020 0007 	bic.w	r0, r0, #7
 800ca38:	1ac2      	subs	r2, r0, r3
 800ca3a:	bf1c      	itt	ne
 800ca3c:	1a1b      	subne	r3, r3, r0
 800ca3e:	50a3      	strne	r3, [r4, r2]
 800ca40:	e7af      	b.n	800c9a2 <_malloc_r+0x22>
 800ca42:	6862      	ldr	r2, [r4, #4]
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	bf0c      	ite	eq
 800ca48:	f8c8 2000 	streq.w	r2, [r8]
 800ca4c:	605a      	strne	r2, [r3, #4]
 800ca4e:	e7eb      	b.n	800ca28 <_malloc_r+0xa8>
 800ca50:	4623      	mov	r3, r4
 800ca52:	6864      	ldr	r4, [r4, #4]
 800ca54:	e7ae      	b.n	800c9b4 <_malloc_r+0x34>
 800ca56:	463c      	mov	r4, r7
 800ca58:	687f      	ldr	r7, [r7, #4]
 800ca5a:	e7b6      	b.n	800c9ca <_malloc_r+0x4a>
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	d1fb      	bne.n	800ca5c <_malloc_r+0xdc>
 800ca64:	2300      	movs	r3, #0
 800ca66:	6053      	str	r3, [r2, #4]
 800ca68:	e7de      	b.n	800ca28 <_malloc_r+0xa8>
 800ca6a:	230c      	movs	r3, #12
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	6033      	str	r3, [r6, #0]
 800ca70:	f000 f80c 	bl	800ca8c <__malloc_unlock>
 800ca74:	e794      	b.n	800c9a0 <_malloc_r+0x20>
 800ca76:	6005      	str	r5, [r0, #0]
 800ca78:	e7d6      	b.n	800ca28 <_malloc_r+0xa8>
 800ca7a:	bf00      	nop
 800ca7c:	2007afc4 	.word	0x2007afc4

0800ca80 <__malloc_lock>:
 800ca80:	4801      	ldr	r0, [pc, #4]	@ (800ca88 <__malloc_lock+0x8>)
 800ca82:	f000 bed0 	b.w	800d826 <__retarget_lock_acquire_recursive>
 800ca86:	bf00      	nop
 800ca88:	2007b108 	.word	0x2007b108

0800ca8c <__malloc_unlock>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	@ (800ca94 <__malloc_unlock+0x8>)
 800ca8e:	f000 becb 	b.w	800d828 <__retarget_lock_release_recursive>
 800ca92:	bf00      	nop
 800ca94:	2007b108 	.word	0x2007b108

0800ca98 <_realloc_r>:
 800ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	4614      	mov	r4, r2
 800caa0:	460d      	mov	r5, r1
 800caa2:	b921      	cbnz	r1, 800caae <_realloc_r+0x16>
 800caa4:	4611      	mov	r1, r2
 800caa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caaa:	f7ff bf69 	b.w	800c980 <_malloc_r>
 800caae:	b92a      	cbnz	r2, 800cabc <_realloc_r+0x24>
 800cab0:	4625      	mov	r5, r4
 800cab2:	f001 fd37 	bl	800e524 <_free_r>
 800cab6:	4628      	mov	r0, r5
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	f002 f8fe 	bl	800ecbc <_malloc_usable_size_r>
 800cac0:	4284      	cmp	r4, r0
 800cac2:	4606      	mov	r6, r0
 800cac4:	d802      	bhi.n	800cacc <_realloc_r+0x34>
 800cac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800caca:	d8f4      	bhi.n	800cab6 <_realloc_r+0x1e>
 800cacc:	4621      	mov	r1, r4
 800cace:	4638      	mov	r0, r7
 800cad0:	f7ff ff56 	bl	800c980 <_malloc_r>
 800cad4:	4680      	mov	r8, r0
 800cad6:	b908      	cbnz	r0, 800cadc <_realloc_r+0x44>
 800cad8:	4645      	mov	r5, r8
 800cada:	e7ec      	b.n	800cab6 <_realloc_r+0x1e>
 800cadc:	42b4      	cmp	r4, r6
 800cade:	4622      	mov	r2, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	bf28      	it	cs
 800cae4:	4632      	movcs	r2, r6
 800cae6:	f000 feae 	bl	800d846 <memcpy>
 800caea:	4629      	mov	r1, r5
 800caec:	4638      	mov	r0, r7
 800caee:	f001 fd19 	bl	800e524 <_free_r>
 800caf2:	e7f1      	b.n	800cad8 <_realloc_r+0x40>

0800caf4 <__cvt>:
 800caf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	ec57 6b10 	vmov	r6, r7, d0
 800cafc:	2f00      	cmp	r7, #0
 800cafe:	460c      	mov	r4, r1
 800cb00:	4619      	mov	r1, r3
 800cb02:	463b      	mov	r3, r7
 800cb04:	bfb4      	ite	lt
 800cb06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb0a:	2300      	movge	r3, #0
 800cb0c:	4691      	mov	r9, r2
 800cb0e:	bfbf      	itttt	lt
 800cb10:	4632      	movlt	r2, r6
 800cb12:	461f      	movlt	r7, r3
 800cb14:	232d      	movlt	r3, #45	@ 0x2d
 800cb16:	4616      	movlt	r6, r2
 800cb18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb1c:	700b      	strb	r3, [r1, #0]
 800cb1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb20:	f023 0820 	bic.w	r8, r3, #32
 800cb24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb28:	d005      	beq.n	800cb36 <__cvt+0x42>
 800cb2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb2e:	d100      	bne.n	800cb32 <__cvt+0x3e>
 800cb30:	3401      	adds	r4, #1
 800cb32:	2102      	movs	r1, #2
 800cb34:	e000      	b.n	800cb38 <__cvt+0x44>
 800cb36:	2103      	movs	r1, #3
 800cb38:	ab03      	add	r3, sp, #12
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	9301      	str	r3, [sp, #4]
 800cb3e:	ab02      	add	r3, sp, #8
 800cb40:	ec47 6b10 	vmov	d0, r6, r7
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	4653      	mov	r3, sl
 800cb48:	f000 ff1a 	bl	800d980 <_dtoa_r>
 800cb4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb50:	4605      	mov	r5, r0
 800cb52:	d119      	bne.n	800cb88 <__cvt+0x94>
 800cb54:	f019 0f01 	tst.w	r9, #1
 800cb58:	d00e      	beq.n	800cb78 <__cvt+0x84>
 800cb5a:	eb00 0904 	add.w	r9, r0, r4
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2300      	movs	r3, #0
 800cb62:	4630      	mov	r0, r6
 800cb64:	4639      	mov	r1, r7
 800cb66:	f7f3 ffbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb6a:	b108      	cbz	r0, 800cb70 <__cvt+0x7c>
 800cb6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb70:	2230      	movs	r2, #48	@ 0x30
 800cb72:	9b03      	ldr	r3, [sp, #12]
 800cb74:	454b      	cmp	r3, r9
 800cb76:	d31e      	bcc.n	800cbb6 <__cvt+0xc2>
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb7e:	1b5b      	subs	r3, r3, r5
 800cb80:	6013      	str	r3, [r2, #0]
 800cb82:	b004      	add	sp, #16
 800cb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb8c:	eb00 0904 	add.w	r9, r0, r4
 800cb90:	d1e5      	bne.n	800cb5e <__cvt+0x6a>
 800cb92:	7803      	ldrb	r3, [r0, #0]
 800cb94:	2b30      	cmp	r3, #48	@ 0x30
 800cb96:	d10a      	bne.n	800cbae <__cvt+0xba>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	4639      	mov	r1, r7
 800cba0:	f7f3 ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cba4:	b918      	cbnz	r0, 800cbae <__cvt+0xba>
 800cba6:	f1c4 0401 	rsb	r4, r4, #1
 800cbaa:	f8ca 4000 	str.w	r4, [sl]
 800cbae:	f8da 3000 	ldr.w	r3, [sl]
 800cbb2:	4499      	add	r9, r3
 800cbb4:	e7d3      	b.n	800cb5e <__cvt+0x6a>
 800cbb6:	1c59      	adds	r1, r3, #1
 800cbb8:	9103      	str	r1, [sp, #12]
 800cbba:	701a      	strb	r2, [r3, #0]
 800cbbc:	e7d9      	b.n	800cb72 <__cvt+0x7e>

0800cbbe <__exponent>:
 800cbbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	7002      	strb	r2, [r0, #0]
 800cbc4:	bfba      	itte	lt
 800cbc6:	4249      	neglt	r1, r1
 800cbc8:	232d      	movlt	r3, #45	@ 0x2d
 800cbca:	232b      	movge	r3, #43	@ 0x2b
 800cbcc:	2909      	cmp	r1, #9
 800cbce:	7043      	strb	r3, [r0, #1]
 800cbd0:	dd28      	ble.n	800cc24 <__exponent+0x66>
 800cbd2:	f10d 0307 	add.w	r3, sp, #7
 800cbd6:	270a      	movs	r7, #10
 800cbd8:	461d      	mov	r5, r3
 800cbda:	461a      	mov	r2, r3
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	fbb1 f6f7 	udiv	r6, r1, r7
 800cbe2:	fb07 1416 	mls	r4, r7, r6, r1
 800cbe6:	3430      	adds	r4, #48	@ 0x30
 800cbe8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cbec:	460c      	mov	r4, r1
 800cbee:	4631      	mov	r1, r6
 800cbf0:	2c63      	cmp	r4, #99	@ 0x63
 800cbf2:	dcf2      	bgt.n	800cbda <__exponent+0x1c>
 800cbf4:	3130      	adds	r1, #48	@ 0x30
 800cbf6:	1e94      	subs	r4, r2, #2
 800cbf8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cbfc:	1c41      	adds	r1, r0, #1
 800cbfe:	4623      	mov	r3, r4
 800cc00:	42ab      	cmp	r3, r5
 800cc02:	d30a      	bcc.n	800cc1a <__exponent+0x5c>
 800cc04:	f10d 0309 	add.w	r3, sp, #9
 800cc08:	1a9b      	subs	r3, r3, r2
 800cc0a:	42ac      	cmp	r4, r5
 800cc0c:	bf88      	it	hi
 800cc0e:	2300      	movhi	r3, #0
 800cc10:	3302      	adds	r3, #2
 800cc12:	4403      	add	r3, r0
 800cc14:	1a18      	subs	r0, r3, r0
 800cc16:	b003      	add	sp, #12
 800cc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc22:	e7ed      	b.n	800cc00 <__exponent+0x42>
 800cc24:	2330      	movs	r3, #48	@ 0x30
 800cc26:	3130      	adds	r1, #48	@ 0x30
 800cc28:	7083      	strb	r3, [r0, #2]
 800cc2a:	1d03      	adds	r3, r0, #4
 800cc2c:	70c1      	strb	r1, [r0, #3]
 800cc2e:	e7f1      	b.n	800cc14 <__exponent+0x56>

0800cc30 <_printf_float>:
 800cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc34:	b08d      	sub	sp, #52	@ 0x34
 800cc36:	460c      	mov	r4, r1
 800cc38:	4616      	mov	r6, r2
 800cc3a:	461f      	mov	r7, r3
 800cc3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc40:	4605      	mov	r5, r0
 800cc42:	f000 fd0d 	bl	800d660 <_localeconv_r>
 800cc46:	6803      	ldr	r3, [r0, #0]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	9304      	str	r3, [sp, #16]
 800cc4c:	f7f3 fb20 	bl	8000290 <strlen>
 800cc50:	2300      	movs	r3, #0
 800cc52:	9005      	str	r0, [sp, #20]
 800cc54:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc56:	f8d8 3000 	ldr.w	r3, [r8]
 800cc5a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc5e:	3307      	adds	r3, #7
 800cc60:	f8d4 b000 	ldr.w	fp, [r4]
 800cc64:	f023 0307 	bic.w	r3, r3, #7
 800cc68:	f103 0208 	add.w	r2, r3, #8
 800cc6c:	f8c8 2000 	str.w	r2, [r8]
 800cc70:	f04f 32ff 	mov.w	r2, #4294967295
 800cc74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc80:	9307      	str	r3, [sp, #28]
 800cc82:	4b9d      	ldr	r3, [pc, #628]	@ (800cef8 <_printf_float+0x2c8>)
 800cc84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc88:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc8c:	f7f3 ff5e 	bl	8000b4c <__aeabi_dcmpun>
 800cc90:	bb70      	cbnz	r0, 800ccf0 <_printf_float+0xc0>
 800cc92:	f04f 32ff 	mov.w	r2, #4294967295
 800cc96:	4b98      	ldr	r3, [pc, #608]	@ (800cef8 <_printf_float+0x2c8>)
 800cc98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc9c:	f7f3 ff38 	bl	8000b10 <__aeabi_dcmple>
 800cca0:	bb30      	cbnz	r0, 800ccf0 <_printf_float+0xc0>
 800cca2:	2200      	movs	r2, #0
 800cca4:	2300      	movs	r3, #0
 800cca6:	4640      	mov	r0, r8
 800cca8:	4649      	mov	r1, r9
 800ccaa:	f7f3 ff27 	bl	8000afc <__aeabi_dcmplt>
 800ccae:	b110      	cbz	r0, 800ccb6 <_printf_float+0x86>
 800ccb0:	232d      	movs	r3, #45	@ 0x2d
 800ccb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccb6:	4a91      	ldr	r2, [pc, #580]	@ (800cefc <_printf_float+0x2cc>)
 800ccb8:	4b91      	ldr	r3, [pc, #580]	@ (800cf00 <_printf_float+0x2d0>)
 800ccba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccbe:	bf8c      	ite	hi
 800ccc0:	4690      	movhi	r8, r2
 800ccc2:	4698      	movls	r8, r3
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	f04f 0900 	mov.w	r9, #0
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	f02b 0304 	bic.w	r3, fp, #4
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	4633      	mov	r3, r6
 800ccd4:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4628      	mov	r0, r5
 800ccda:	9700      	str	r7, [sp, #0]
 800ccdc:	f000 f9d2 	bl	800d084 <_printf_common>
 800cce0:	3001      	adds	r0, #1
 800cce2:	f040 808d 	bne.w	800ce00 <_printf_float+0x1d0>
 800cce6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccea:	b00d      	add	sp, #52	@ 0x34
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	4642      	mov	r2, r8
 800ccf2:	464b      	mov	r3, r9
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	f7f3 ff28 	bl	8000b4c <__aeabi_dcmpun>
 800ccfc:	b140      	cbz	r0, 800cd10 <_printf_float+0xe0>
 800ccfe:	464b      	mov	r3, r9
 800cd00:	4a80      	ldr	r2, [pc, #512]	@ (800cf04 <_printf_float+0x2d4>)
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfbc      	itt	lt
 800cd06:	232d      	movlt	r3, #45	@ 0x2d
 800cd08:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd0c:	4b7e      	ldr	r3, [pc, #504]	@ (800cf08 <_printf_float+0x2d8>)
 800cd0e:	e7d4      	b.n	800ccba <_printf_float+0x8a>
 800cd10:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd14:	6863      	ldr	r3, [r4, #4]
 800cd16:	9206      	str	r2, [sp, #24]
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	d13b      	bne.n	800cd94 <_printf_float+0x164>
 800cd1c:	2306      	movs	r3, #6
 800cd1e:	6063      	str	r3, [r4, #4]
 800cd20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd24:	2300      	movs	r3, #0
 800cd26:	4628      	mov	r0, r5
 800cd28:	6022      	str	r2, [r4, #0]
 800cd2a:	9303      	str	r3, [sp, #12]
 800cd2c:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd2e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd32:	ab09      	add	r3, sp, #36	@ 0x24
 800cd34:	ec49 8b10 	vmov	d0, r8, r9
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd3e:	6861      	ldr	r1, [r4, #4]
 800cd40:	f7ff fed8 	bl	800caf4 <__cvt>
 800cd44:	9b06      	ldr	r3, [sp, #24]
 800cd46:	4680      	mov	r8, r0
 800cd48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd4a:	2b47      	cmp	r3, #71	@ 0x47
 800cd4c:	d129      	bne.n	800cda2 <_printf_float+0x172>
 800cd4e:	1cc8      	adds	r0, r1, #3
 800cd50:	db02      	blt.n	800cd58 <_printf_float+0x128>
 800cd52:	6863      	ldr	r3, [r4, #4]
 800cd54:	4299      	cmp	r1, r3
 800cd56:	dd41      	ble.n	800cddc <_printf_float+0x1ac>
 800cd58:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd5c:	fa5f fa8a 	uxtb.w	sl, sl
 800cd60:	3901      	subs	r1, #1
 800cd62:	4652      	mov	r2, sl
 800cd64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd68:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd6a:	f7ff ff28 	bl	800cbbe <__exponent>
 800cd6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd70:	4681      	mov	r9, r0
 800cd72:	1813      	adds	r3, r2, r0
 800cd74:	2a01      	cmp	r2, #1
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	dc02      	bgt.n	800cd80 <_printf_float+0x150>
 800cd7a:	6822      	ldr	r2, [r4, #0]
 800cd7c:	07d2      	lsls	r2, r2, #31
 800cd7e:	d501      	bpl.n	800cd84 <_printf_float+0x154>
 800cd80:	3301      	adds	r3, #1
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d0a2      	beq.n	800ccd2 <_printf_float+0xa2>
 800cd8c:	232d      	movs	r3, #45	@ 0x2d
 800cd8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd92:	e79e      	b.n	800ccd2 <_printf_float+0xa2>
 800cd94:	9a06      	ldr	r2, [sp, #24]
 800cd96:	2a47      	cmp	r2, #71	@ 0x47
 800cd98:	d1c2      	bne.n	800cd20 <_printf_float+0xf0>
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1c0      	bne.n	800cd20 <_printf_float+0xf0>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e7bd      	b.n	800cd1e <_printf_float+0xee>
 800cda2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cda6:	d9db      	bls.n	800cd60 <_printf_float+0x130>
 800cda8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cdac:	d118      	bne.n	800cde0 <_printf_float+0x1b0>
 800cdae:	2900      	cmp	r1, #0
 800cdb0:	6863      	ldr	r3, [r4, #4]
 800cdb2:	dd0b      	ble.n	800cdcc <_printf_float+0x19c>
 800cdb4:	6121      	str	r1, [r4, #16]
 800cdb6:	b913      	cbnz	r3, 800cdbe <_printf_float+0x18e>
 800cdb8:	6822      	ldr	r2, [r4, #0]
 800cdba:	07d0      	lsls	r0, r2, #31
 800cdbc:	d502      	bpl.n	800cdc4 <_printf_float+0x194>
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	440b      	add	r3, r1
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	f04f 0900 	mov.w	r9, #0
 800cdc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdca:	e7db      	b.n	800cd84 <_printf_float+0x154>
 800cdcc:	b913      	cbnz	r3, 800cdd4 <_printf_float+0x1a4>
 800cdce:	6822      	ldr	r2, [r4, #0]
 800cdd0:	07d2      	lsls	r2, r2, #31
 800cdd2:	d501      	bpl.n	800cdd8 <_printf_float+0x1a8>
 800cdd4:	3302      	adds	r3, #2
 800cdd6:	e7f4      	b.n	800cdc2 <_printf_float+0x192>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e7f2      	b.n	800cdc2 <_printf_float+0x192>
 800cddc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cde0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cde2:	4299      	cmp	r1, r3
 800cde4:	db05      	blt.n	800cdf2 <_printf_float+0x1c2>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	6121      	str	r1, [r4, #16]
 800cdea:	07d8      	lsls	r0, r3, #31
 800cdec:	d5ea      	bpl.n	800cdc4 <_printf_float+0x194>
 800cdee:	1c4b      	adds	r3, r1, #1
 800cdf0:	e7e7      	b.n	800cdc2 <_printf_float+0x192>
 800cdf2:	2900      	cmp	r1, #0
 800cdf4:	bfd4      	ite	le
 800cdf6:	f1c1 0202 	rsble	r2, r1, #2
 800cdfa:	2201      	movgt	r2, #1
 800cdfc:	4413      	add	r3, r2
 800cdfe:	e7e0      	b.n	800cdc2 <_printf_float+0x192>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	055a      	lsls	r2, r3, #21
 800ce04:	d407      	bmi.n	800ce16 <_printf_float+0x1e6>
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	4642      	mov	r2, r8
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	d12b      	bne.n	800ce6c <_printf_float+0x23c>
 800ce14:	e767      	b.n	800cce6 <_printf_float+0xb6>
 800ce16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce1a:	f240 80dd 	bls.w	800cfd8 <_printf_float+0x3a8>
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2300      	movs	r3, #0
 800ce22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce26:	f7f3 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d033      	beq.n	800ce96 <_printf_float+0x266>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	4a36      	ldr	r2, [pc, #216]	@ (800cf0c <_printf_float+0x2dc>)
 800ce32:	4631      	mov	r1, r6
 800ce34:	4628      	mov	r0, r5
 800ce36:	47b8      	blx	r7
 800ce38:	3001      	adds	r0, #1
 800ce3a:	f43f af54 	beq.w	800cce6 <_printf_float+0xb6>
 800ce3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce42:	4543      	cmp	r3, r8
 800ce44:	db02      	blt.n	800ce4c <_printf_float+0x21c>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	07d8      	lsls	r0, r3, #31
 800ce4a:	d50f      	bpl.n	800ce6c <_printf_float+0x23c>
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce54:	47b8      	blx	r7
 800ce56:	3001      	adds	r0, #1
 800ce58:	f43f af45 	beq.w	800cce6 <_printf_float+0xb6>
 800ce5c:	f04f 0900 	mov.w	r9, #0
 800ce60:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce64:	f104 0a1a 	add.w	sl, r4, #26
 800ce68:	45c8      	cmp	r8, r9
 800ce6a:	dc09      	bgt.n	800ce80 <_printf_float+0x250>
 800ce6c:	6823      	ldr	r3, [r4, #0]
 800ce6e:	079b      	lsls	r3, r3, #30
 800ce70:	f100 8103 	bmi.w	800d07a <_printf_float+0x44a>
 800ce74:	68e0      	ldr	r0, [r4, #12]
 800ce76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce78:	4298      	cmp	r0, r3
 800ce7a:	bfb8      	it	lt
 800ce7c:	4618      	movlt	r0, r3
 800ce7e:	e734      	b.n	800ccea <_printf_float+0xba>
 800ce80:	2301      	movs	r3, #1
 800ce82:	4652      	mov	r2, sl
 800ce84:	4631      	mov	r1, r6
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b8      	blx	r7
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f43f af2b 	beq.w	800cce6 <_printf_float+0xb6>
 800ce90:	f109 0901 	add.w	r9, r9, #1
 800ce94:	e7e8      	b.n	800ce68 <_printf_float+0x238>
 800ce96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dc39      	bgt.n	800cf10 <_printf_float+0x2e0>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	4a1b      	ldr	r2, [pc, #108]	@ (800cf0c <_printf_float+0x2dc>)
 800cea0:	4631      	mov	r1, r6
 800cea2:	4628      	mov	r0, r5
 800cea4:	47b8      	blx	r7
 800cea6:	3001      	adds	r0, #1
 800cea8:	f43f af1d 	beq.w	800cce6 <_printf_float+0xb6>
 800ceac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ceb0:	ea59 0303 	orrs.w	r3, r9, r3
 800ceb4:	d102      	bne.n	800cebc <_printf_float+0x28c>
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	07d9      	lsls	r1, r3, #31
 800ceba:	d5d7      	bpl.n	800ce6c <_printf_float+0x23c>
 800cebc:	4631      	mov	r1, r6
 800cebe:	4628      	mov	r0, r5
 800cec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cec4:	47b8      	blx	r7
 800cec6:	3001      	adds	r0, #1
 800cec8:	f43f af0d 	beq.w	800cce6 <_printf_float+0xb6>
 800cecc:	f04f 0a00 	mov.w	sl, #0
 800ced0:	f104 0b1a 	add.w	fp, r4, #26
 800ced4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced6:	425b      	negs	r3, r3
 800ced8:	4553      	cmp	r3, sl
 800ceda:	dc01      	bgt.n	800cee0 <_printf_float+0x2b0>
 800cedc:	464b      	mov	r3, r9
 800cede:	e793      	b.n	800ce08 <_printf_float+0x1d8>
 800cee0:	2301      	movs	r3, #1
 800cee2:	465a      	mov	r2, fp
 800cee4:	4631      	mov	r1, r6
 800cee6:	4628      	mov	r0, r5
 800cee8:	47b8      	blx	r7
 800ceea:	3001      	adds	r0, #1
 800ceec:	f43f aefb 	beq.w	800cce6 <_printf_float+0xb6>
 800cef0:	f10a 0a01 	add.w	sl, sl, #1
 800cef4:	e7ee      	b.n	800ced4 <_printf_float+0x2a4>
 800cef6:	bf00      	nop
 800cef8:	7fefffff 	.word	0x7fefffff
 800cefc:	0801e674 	.word	0x0801e674
 800cf00:	0801e670 	.word	0x0801e670
 800cf04:	0801e67c 	.word	0x0801e67c
 800cf08:	0801e678 	.word	0x0801e678
 800cf0c:	0801e680 	.word	0x0801e680
 800cf10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf16:	4553      	cmp	r3, sl
 800cf18:	bfa8      	it	ge
 800cf1a:	4653      	movge	r3, sl
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	4699      	mov	r9, r3
 800cf20:	dc36      	bgt.n	800cf90 <_printf_float+0x360>
 800cf22:	f04f 0b00 	mov.w	fp, #0
 800cf26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf2a:	f104 021a 	add.w	r2, r4, #26
 800cf2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf30:	9306      	str	r3, [sp, #24]
 800cf32:	eba3 0309 	sub.w	r3, r3, r9
 800cf36:	455b      	cmp	r3, fp
 800cf38:	dc31      	bgt.n	800cf9e <_printf_float+0x36e>
 800cf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf3c:	459a      	cmp	sl, r3
 800cf3e:	dc3a      	bgt.n	800cfb6 <_printf_float+0x386>
 800cf40:	6823      	ldr	r3, [r4, #0]
 800cf42:	07da      	lsls	r2, r3, #31
 800cf44:	d437      	bmi.n	800cfb6 <_printf_float+0x386>
 800cf46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf48:	ebaa 0903 	sub.w	r9, sl, r3
 800cf4c:	9b06      	ldr	r3, [sp, #24]
 800cf4e:	ebaa 0303 	sub.w	r3, sl, r3
 800cf52:	4599      	cmp	r9, r3
 800cf54:	bfa8      	it	ge
 800cf56:	4699      	movge	r9, r3
 800cf58:	f1b9 0f00 	cmp.w	r9, #0
 800cf5c:	dc33      	bgt.n	800cfc6 <_printf_float+0x396>
 800cf5e:	f04f 0800 	mov.w	r8, #0
 800cf62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf66:	f104 0b1a 	add.w	fp, r4, #26
 800cf6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf6c:	ebaa 0303 	sub.w	r3, sl, r3
 800cf70:	eba3 0309 	sub.w	r3, r3, r9
 800cf74:	4543      	cmp	r3, r8
 800cf76:	f77f af79 	ble.w	800ce6c <_printf_float+0x23c>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	465a      	mov	r2, fp
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4628      	mov	r0, r5
 800cf82:	47b8      	blx	r7
 800cf84:	3001      	adds	r0, #1
 800cf86:	f43f aeae 	beq.w	800cce6 <_printf_float+0xb6>
 800cf8a:	f108 0801 	add.w	r8, r8, #1
 800cf8e:	e7ec      	b.n	800cf6a <_printf_float+0x33a>
 800cf90:	4642      	mov	r2, r8
 800cf92:	4631      	mov	r1, r6
 800cf94:	4628      	mov	r0, r5
 800cf96:	47b8      	blx	r7
 800cf98:	3001      	adds	r0, #1
 800cf9a:	d1c2      	bne.n	800cf22 <_printf_float+0x2f2>
 800cf9c:	e6a3      	b.n	800cce6 <_printf_float+0xb6>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	9206      	str	r2, [sp, #24]
 800cfa6:	47b8      	blx	r7
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	f43f ae9c 	beq.w	800cce6 <_printf_float+0xb6>
 800cfae:	f10b 0b01 	add.w	fp, fp, #1
 800cfb2:	9a06      	ldr	r2, [sp, #24]
 800cfb4:	e7bb      	b.n	800cf2e <_printf_float+0x2fe>
 800cfb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d1c0      	bne.n	800cf46 <_printf_float+0x316>
 800cfc4:	e68f      	b.n	800cce6 <_printf_float+0xb6>
 800cfc6:	9a06      	ldr	r2, [sp, #24]
 800cfc8:	464b      	mov	r3, r9
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4628      	mov	r0, r5
 800cfce:	4442      	add	r2, r8
 800cfd0:	47b8      	blx	r7
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d1c3      	bne.n	800cf5e <_printf_float+0x32e>
 800cfd6:	e686      	b.n	800cce6 <_printf_float+0xb6>
 800cfd8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfdc:	f1ba 0f01 	cmp.w	sl, #1
 800cfe0:	dc01      	bgt.n	800cfe6 <_printf_float+0x3b6>
 800cfe2:	07db      	lsls	r3, r3, #31
 800cfe4:	d536      	bpl.n	800d054 <_printf_float+0x424>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	4642      	mov	r2, r8
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	47b8      	blx	r7
 800cff0:	3001      	adds	r0, #1
 800cff2:	f43f ae78 	beq.w	800cce6 <_printf_float+0xb6>
 800cff6:	4631      	mov	r1, r6
 800cff8:	4628      	mov	r0, r5
 800cffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cffe:	47b8      	blx	r7
 800d000:	3001      	adds	r0, #1
 800d002:	f43f ae70 	beq.w	800cce6 <_printf_float+0xb6>
 800d006:	2200      	movs	r2, #0
 800d008:	2300      	movs	r3, #0
 800d00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d00e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d012:	f7f3 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 800d016:	b9c0      	cbnz	r0, 800d04a <_printf_float+0x41a>
 800d018:	4653      	mov	r3, sl
 800d01a:	f108 0201 	add.w	r2, r8, #1
 800d01e:	4631      	mov	r1, r6
 800d020:	4628      	mov	r0, r5
 800d022:	47b8      	blx	r7
 800d024:	3001      	adds	r0, #1
 800d026:	d10c      	bne.n	800d042 <_printf_float+0x412>
 800d028:	e65d      	b.n	800cce6 <_printf_float+0xb6>
 800d02a:	2301      	movs	r3, #1
 800d02c:	465a      	mov	r2, fp
 800d02e:	4631      	mov	r1, r6
 800d030:	4628      	mov	r0, r5
 800d032:	47b8      	blx	r7
 800d034:	3001      	adds	r0, #1
 800d036:	f43f ae56 	beq.w	800cce6 <_printf_float+0xb6>
 800d03a:	f108 0801 	add.w	r8, r8, #1
 800d03e:	45d0      	cmp	r8, sl
 800d040:	dbf3      	blt.n	800d02a <_printf_float+0x3fa>
 800d042:	464b      	mov	r3, r9
 800d044:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d048:	e6df      	b.n	800ce0a <_printf_float+0x1da>
 800d04a:	f04f 0800 	mov.w	r8, #0
 800d04e:	f104 0b1a 	add.w	fp, r4, #26
 800d052:	e7f4      	b.n	800d03e <_printf_float+0x40e>
 800d054:	2301      	movs	r3, #1
 800d056:	4642      	mov	r2, r8
 800d058:	e7e1      	b.n	800d01e <_printf_float+0x3ee>
 800d05a:	2301      	movs	r3, #1
 800d05c:	464a      	mov	r2, r9
 800d05e:	4631      	mov	r1, r6
 800d060:	4628      	mov	r0, r5
 800d062:	47b8      	blx	r7
 800d064:	3001      	adds	r0, #1
 800d066:	f43f ae3e 	beq.w	800cce6 <_printf_float+0xb6>
 800d06a:	f108 0801 	add.w	r8, r8, #1
 800d06e:	68e3      	ldr	r3, [r4, #12]
 800d070:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d072:	1a5b      	subs	r3, r3, r1
 800d074:	4543      	cmp	r3, r8
 800d076:	dcf0      	bgt.n	800d05a <_printf_float+0x42a>
 800d078:	e6fc      	b.n	800ce74 <_printf_float+0x244>
 800d07a:	f04f 0800 	mov.w	r8, #0
 800d07e:	f104 0919 	add.w	r9, r4, #25
 800d082:	e7f4      	b.n	800d06e <_printf_float+0x43e>

0800d084 <_printf_common>:
 800d084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d088:	4616      	mov	r6, r2
 800d08a:	4698      	mov	r8, r3
 800d08c:	688a      	ldr	r2, [r1, #8]
 800d08e:	4607      	mov	r7, r0
 800d090:	690b      	ldr	r3, [r1, #16]
 800d092:	460c      	mov	r4, r1
 800d094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d098:	4293      	cmp	r3, r2
 800d09a:	bfb8      	it	lt
 800d09c:	4613      	movlt	r3, r2
 800d09e:	6033      	str	r3, [r6, #0]
 800d0a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0a4:	b10a      	cbz	r2, 800d0aa <_printf_common+0x26>
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	6033      	str	r3, [r6, #0]
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	0699      	lsls	r1, r3, #26
 800d0ae:	bf42      	ittt	mi
 800d0b0:	6833      	ldrmi	r3, [r6, #0]
 800d0b2:	3302      	addmi	r3, #2
 800d0b4:	6033      	strmi	r3, [r6, #0]
 800d0b6:	6825      	ldr	r5, [r4, #0]
 800d0b8:	f015 0506 	ands.w	r5, r5, #6
 800d0bc:	d106      	bne.n	800d0cc <_printf_common+0x48>
 800d0be:	f104 0a19 	add.w	sl, r4, #25
 800d0c2:	68e3      	ldr	r3, [r4, #12]
 800d0c4:	6832      	ldr	r2, [r6, #0]
 800d0c6:	1a9b      	subs	r3, r3, r2
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	dc2b      	bgt.n	800d124 <_printf_common+0xa0>
 800d0cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0d0:	6822      	ldr	r2, [r4, #0]
 800d0d2:	3b00      	subs	r3, #0
 800d0d4:	bf18      	it	ne
 800d0d6:	2301      	movne	r3, #1
 800d0d8:	0692      	lsls	r2, r2, #26
 800d0da:	d430      	bmi.n	800d13e <_printf_common+0xba>
 800d0dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0e0:	4641      	mov	r1, r8
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	47c8      	blx	r9
 800d0e6:	3001      	adds	r0, #1
 800d0e8:	d023      	beq.n	800d132 <_printf_common+0xae>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	341a      	adds	r4, #26
 800d0ee:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d0f2:	f003 0306 	and.w	r3, r3, #6
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	bf0a      	itet	eq
 800d0fa:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d0fe:	2500      	movne	r5, #0
 800d100:	6833      	ldreq	r3, [r6, #0]
 800d102:	f04f 0600 	mov.w	r6, #0
 800d106:	bf08      	it	eq
 800d108:	1aed      	subeq	r5, r5, r3
 800d10a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d10e:	bf08      	it	eq
 800d110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d114:	4293      	cmp	r3, r2
 800d116:	bfc4      	itt	gt
 800d118:	1a9b      	subgt	r3, r3, r2
 800d11a:	18ed      	addgt	r5, r5, r3
 800d11c:	42b5      	cmp	r5, r6
 800d11e:	d11a      	bne.n	800d156 <_printf_common+0xd2>
 800d120:	2000      	movs	r0, #0
 800d122:	e008      	b.n	800d136 <_printf_common+0xb2>
 800d124:	2301      	movs	r3, #1
 800d126:	4652      	mov	r2, sl
 800d128:	4641      	mov	r1, r8
 800d12a:	4638      	mov	r0, r7
 800d12c:	47c8      	blx	r9
 800d12e:	3001      	adds	r0, #1
 800d130:	d103      	bne.n	800d13a <_printf_common+0xb6>
 800d132:	f04f 30ff 	mov.w	r0, #4294967295
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	3501      	adds	r5, #1
 800d13c:	e7c1      	b.n	800d0c2 <_printf_common+0x3e>
 800d13e:	18e1      	adds	r1, r4, r3
 800d140:	1c5a      	adds	r2, r3, #1
 800d142:	2030      	movs	r0, #48	@ 0x30
 800d144:	3302      	adds	r3, #2
 800d146:	4422      	add	r2, r4
 800d148:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d14c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d154:	e7c2      	b.n	800d0dc <_printf_common+0x58>
 800d156:	2301      	movs	r3, #1
 800d158:	4622      	mov	r2, r4
 800d15a:	4641      	mov	r1, r8
 800d15c:	4638      	mov	r0, r7
 800d15e:	47c8      	blx	r9
 800d160:	3001      	adds	r0, #1
 800d162:	d0e6      	beq.n	800d132 <_printf_common+0xae>
 800d164:	3601      	adds	r6, #1
 800d166:	e7d9      	b.n	800d11c <_printf_common+0x98>

0800d168 <_printf_i>:
 800d168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d16c:	7e0f      	ldrb	r7, [r1, #24]
 800d16e:	4691      	mov	r9, r2
 800d170:	4680      	mov	r8, r0
 800d172:	460c      	mov	r4, r1
 800d174:	2f78      	cmp	r7, #120	@ 0x78
 800d176:	469a      	mov	sl, r3
 800d178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d17a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d17e:	d807      	bhi.n	800d190 <_printf_i+0x28>
 800d180:	2f62      	cmp	r7, #98	@ 0x62
 800d182:	d80a      	bhi.n	800d19a <_printf_i+0x32>
 800d184:	2f00      	cmp	r7, #0
 800d186:	f000 80d1 	beq.w	800d32c <_printf_i+0x1c4>
 800d18a:	2f58      	cmp	r7, #88	@ 0x58
 800d18c:	f000 80b8 	beq.w	800d300 <_printf_i+0x198>
 800d190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d198:	e03a      	b.n	800d210 <_printf_i+0xa8>
 800d19a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d19e:	2b15      	cmp	r3, #21
 800d1a0:	d8f6      	bhi.n	800d190 <_printf_i+0x28>
 800d1a2:	a101      	add	r1, pc, #4	@ (adr r1, 800d1a8 <_printf_i+0x40>)
 800d1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1a8:	0800d201 	.word	0x0800d201
 800d1ac:	0800d215 	.word	0x0800d215
 800d1b0:	0800d191 	.word	0x0800d191
 800d1b4:	0800d191 	.word	0x0800d191
 800d1b8:	0800d191 	.word	0x0800d191
 800d1bc:	0800d191 	.word	0x0800d191
 800d1c0:	0800d215 	.word	0x0800d215
 800d1c4:	0800d191 	.word	0x0800d191
 800d1c8:	0800d191 	.word	0x0800d191
 800d1cc:	0800d191 	.word	0x0800d191
 800d1d0:	0800d191 	.word	0x0800d191
 800d1d4:	0800d313 	.word	0x0800d313
 800d1d8:	0800d23f 	.word	0x0800d23f
 800d1dc:	0800d2cd 	.word	0x0800d2cd
 800d1e0:	0800d191 	.word	0x0800d191
 800d1e4:	0800d191 	.word	0x0800d191
 800d1e8:	0800d335 	.word	0x0800d335
 800d1ec:	0800d191 	.word	0x0800d191
 800d1f0:	0800d23f 	.word	0x0800d23f
 800d1f4:	0800d191 	.word	0x0800d191
 800d1f8:	0800d191 	.word	0x0800d191
 800d1fc:	0800d2d5 	.word	0x0800d2d5
 800d200:	6833      	ldr	r3, [r6, #0]
 800d202:	1d1a      	adds	r2, r3, #4
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6032      	str	r2, [r6, #0]
 800d208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d20c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d210:	2301      	movs	r3, #1
 800d212:	e09c      	b.n	800d34e <_printf_i+0x1e6>
 800d214:	6833      	ldr	r3, [r6, #0]
 800d216:	6820      	ldr	r0, [r4, #0]
 800d218:	1d19      	adds	r1, r3, #4
 800d21a:	6031      	str	r1, [r6, #0]
 800d21c:	0606      	lsls	r6, r0, #24
 800d21e:	d501      	bpl.n	800d224 <_printf_i+0xbc>
 800d220:	681d      	ldr	r5, [r3, #0]
 800d222:	e003      	b.n	800d22c <_printf_i+0xc4>
 800d224:	0645      	lsls	r5, r0, #25
 800d226:	d5fb      	bpl.n	800d220 <_printf_i+0xb8>
 800d228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d22c:	2d00      	cmp	r5, #0
 800d22e:	da03      	bge.n	800d238 <_printf_i+0xd0>
 800d230:	232d      	movs	r3, #45	@ 0x2d
 800d232:	426d      	negs	r5, r5
 800d234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d238:	4858      	ldr	r0, [pc, #352]	@ (800d39c <_printf_i+0x234>)
 800d23a:	230a      	movs	r3, #10
 800d23c:	e011      	b.n	800d262 <_printf_i+0xfa>
 800d23e:	6821      	ldr	r1, [r4, #0]
 800d240:	6833      	ldr	r3, [r6, #0]
 800d242:	0608      	lsls	r0, r1, #24
 800d244:	f853 5b04 	ldr.w	r5, [r3], #4
 800d248:	d402      	bmi.n	800d250 <_printf_i+0xe8>
 800d24a:	0649      	lsls	r1, r1, #25
 800d24c:	bf48      	it	mi
 800d24e:	b2ad      	uxthmi	r5, r5
 800d250:	2f6f      	cmp	r7, #111	@ 0x6f
 800d252:	6033      	str	r3, [r6, #0]
 800d254:	4851      	ldr	r0, [pc, #324]	@ (800d39c <_printf_i+0x234>)
 800d256:	bf14      	ite	ne
 800d258:	230a      	movne	r3, #10
 800d25a:	2308      	moveq	r3, #8
 800d25c:	2100      	movs	r1, #0
 800d25e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d262:	6866      	ldr	r6, [r4, #4]
 800d264:	2e00      	cmp	r6, #0
 800d266:	60a6      	str	r6, [r4, #8]
 800d268:	db05      	blt.n	800d276 <_printf_i+0x10e>
 800d26a:	6821      	ldr	r1, [r4, #0]
 800d26c:	432e      	orrs	r6, r5
 800d26e:	f021 0104 	bic.w	r1, r1, #4
 800d272:	6021      	str	r1, [r4, #0]
 800d274:	d04b      	beq.n	800d30e <_printf_i+0x1a6>
 800d276:	4616      	mov	r6, r2
 800d278:	fbb5 f1f3 	udiv	r1, r5, r3
 800d27c:	fb03 5711 	mls	r7, r3, r1, r5
 800d280:	5dc7      	ldrb	r7, [r0, r7]
 800d282:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d286:	462f      	mov	r7, r5
 800d288:	460d      	mov	r5, r1
 800d28a:	42bb      	cmp	r3, r7
 800d28c:	d9f4      	bls.n	800d278 <_printf_i+0x110>
 800d28e:	2b08      	cmp	r3, #8
 800d290:	d10b      	bne.n	800d2aa <_printf_i+0x142>
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	07df      	lsls	r7, r3, #31
 800d296:	d508      	bpl.n	800d2aa <_printf_i+0x142>
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	6861      	ldr	r1, [r4, #4]
 800d29c:	4299      	cmp	r1, r3
 800d29e:	bfde      	ittt	le
 800d2a0:	2330      	movle	r3, #48	@ 0x30
 800d2a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2aa:	1b92      	subs	r2, r2, r6
 800d2ac:	6122      	str	r2, [r4, #16]
 800d2ae:	464b      	mov	r3, r9
 800d2b0:	aa03      	add	r2, sp, #12
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	f8cd a000 	str.w	sl, [sp]
 800d2ba:	f7ff fee3 	bl	800d084 <_printf_common>
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d14a      	bne.n	800d358 <_printf_i+0x1f0>
 800d2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c6:	b004      	add	sp, #16
 800d2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	f043 0320 	orr.w	r3, r3, #32
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	2778      	movs	r7, #120	@ 0x78
 800d2d6:	4832      	ldr	r0, [pc, #200]	@ (800d3a0 <_printf_i+0x238>)
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2de:	061f      	lsls	r7, r3, #24
 800d2e0:	6831      	ldr	r1, [r6, #0]
 800d2e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2e6:	d402      	bmi.n	800d2ee <_printf_i+0x186>
 800d2e8:	065f      	lsls	r7, r3, #25
 800d2ea:	bf48      	it	mi
 800d2ec:	b2ad      	uxthmi	r5, r5
 800d2ee:	6031      	str	r1, [r6, #0]
 800d2f0:	07d9      	lsls	r1, r3, #31
 800d2f2:	bf44      	itt	mi
 800d2f4:	f043 0320 	orrmi.w	r3, r3, #32
 800d2f8:	6023      	strmi	r3, [r4, #0]
 800d2fa:	b11d      	cbz	r5, 800d304 <_printf_i+0x19c>
 800d2fc:	2310      	movs	r3, #16
 800d2fe:	e7ad      	b.n	800d25c <_printf_i+0xf4>
 800d300:	4826      	ldr	r0, [pc, #152]	@ (800d39c <_printf_i+0x234>)
 800d302:	e7e9      	b.n	800d2d8 <_printf_i+0x170>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	f023 0320 	bic.w	r3, r3, #32
 800d30a:	6023      	str	r3, [r4, #0]
 800d30c:	e7f6      	b.n	800d2fc <_printf_i+0x194>
 800d30e:	4616      	mov	r6, r2
 800d310:	e7bd      	b.n	800d28e <_printf_i+0x126>
 800d312:	6833      	ldr	r3, [r6, #0]
 800d314:	6825      	ldr	r5, [r4, #0]
 800d316:	1d18      	adds	r0, r3, #4
 800d318:	6961      	ldr	r1, [r4, #20]
 800d31a:	6030      	str	r0, [r6, #0]
 800d31c:	062e      	lsls	r6, r5, #24
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	d501      	bpl.n	800d326 <_printf_i+0x1be>
 800d322:	6019      	str	r1, [r3, #0]
 800d324:	e002      	b.n	800d32c <_printf_i+0x1c4>
 800d326:	0668      	lsls	r0, r5, #25
 800d328:	d5fb      	bpl.n	800d322 <_printf_i+0x1ba>
 800d32a:	8019      	strh	r1, [r3, #0]
 800d32c:	2300      	movs	r3, #0
 800d32e:	4616      	mov	r6, r2
 800d330:	6123      	str	r3, [r4, #16]
 800d332:	e7bc      	b.n	800d2ae <_printf_i+0x146>
 800d334:	6833      	ldr	r3, [r6, #0]
 800d336:	2100      	movs	r1, #0
 800d338:	1d1a      	adds	r2, r3, #4
 800d33a:	6032      	str	r2, [r6, #0]
 800d33c:	681e      	ldr	r6, [r3, #0]
 800d33e:	6862      	ldr	r2, [r4, #4]
 800d340:	4630      	mov	r0, r6
 800d342:	f000 fa72 	bl	800d82a <memchr>
 800d346:	b108      	cbz	r0, 800d34c <_printf_i+0x1e4>
 800d348:	1b80      	subs	r0, r0, r6
 800d34a:	6060      	str	r0, [r4, #4]
 800d34c:	6863      	ldr	r3, [r4, #4]
 800d34e:	6123      	str	r3, [r4, #16]
 800d350:	2300      	movs	r3, #0
 800d352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d356:	e7aa      	b.n	800d2ae <_printf_i+0x146>
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	4632      	mov	r2, r6
 800d35c:	4649      	mov	r1, r9
 800d35e:	4640      	mov	r0, r8
 800d360:	47d0      	blx	sl
 800d362:	3001      	adds	r0, #1
 800d364:	d0ad      	beq.n	800d2c2 <_printf_i+0x15a>
 800d366:	6823      	ldr	r3, [r4, #0]
 800d368:	079b      	lsls	r3, r3, #30
 800d36a:	d413      	bmi.n	800d394 <_printf_i+0x22c>
 800d36c:	68e0      	ldr	r0, [r4, #12]
 800d36e:	9b03      	ldr	r3, [sp, #12]
 800d370:	4298      	cmp	r0, r3
 800d372:	bfb8      	it	lt
 800d374:	4618      	movlt	r0, r3
 800d376:	e7a6      	b.n	800d2c6 <_printf_i+0x15e>
 800d378:	2301      	movs	r3, #1
 800d37a:	4632      	mov	r2, r6
 800d37c:	4649      	mov	r1, r9
 800d37e:	4640      	mov	r0, r8
 800d380:	47d0      	blx	sl
 800d382:	3001      	adds	r0, #1
 800d384:	d09d      	beq.n	800d2c2 <_printf_i+0x15a>
 800d386:	3501      	adds	r5, #1
 800d388:	68e3      	ldr	r3, [r4, #12]
 800d38a:	9903      	ldr	r1, [sp, #12]
 800d38c:	1a5b      	subs	r3, r3, r1
 800d38e:	42ab      	cmp	r3, r5
 800d390:	dcf2      	bgt.n	800d378 <_printf_i+0x210>
 800d392:	e7eb      	b.n	800d36c <_printf_i+0x204>
 800d394:	2500      	movs	r5, #0
 800d396:	f104 0619 	add.w	r6, r4, #25
 800d39a:	e7f5      	b.n	800d388 <_printf_i+0x220>
 800d39c:	0801e682 	.word	0x0801e682
 800d3a0:	0801e693 	.word	0x0801e693

0800d3a4 <std>:
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	b510      	push	{r4, lr}
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	6083      	str	r3, [r0, #8]
 800d3ac:	8181      	strh	r1, [r0, #12]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3b2:	81c2      	strh	r2, [r0, #14]
 800d3b4:	2208      	movs	r2, #8
 800d3b6:	6183      	str	r3, [r0, #24]
 800d3b8:	e9c0 3300 	strd	r3, r3, [r0]
 800d3bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3c0:	305c      	adds	r0, #92	@ 0x5c
 800d3c2:	f000 f944 	bl	800d64e <memset>
 800d3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d3fc <std+0x58>)
 800d3c8:	6224      	str	r4, [r4, #32]
 800d3ca:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800d400 <std+0x5c>)
 800d3ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d404 <std+0x60>)
 800d3d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d408 <std+0x64>)
 800d3d6:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d40c <std+0x68>)
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	d006      	beq.n	800d3ec <std+0x48>
 800d3de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d3e2:	4294      	cmp	r4, r2
 800d3e4:	d002      	beq.n	800d3ec <std+0x48>
 800d3e6:	33d0      	adds	r3, #208	@ 0xd0
 800d3e8:	429c      	cmp	r4, r3
 800d3ea:	d105      	bne.n	800d3f8 <std+0x54>
 800d3ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f4:	f000 ba16 	b.w	800d824 <__retarget_lock_init_recursive>
 800d3f8:	bd10      	pop	{r4, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0800d595 	.word	0x0800d595
 800d400:	0800d5b7 	.word	0x0800d5b7
 800d404:	0800d5ef 	.word	0x0800d5ef
 800d408:	0800d613 	.word	0x0800d613
 800d40c:	2007afc8 	.word	0x2007afc8

0800d410 <stdio_exit_handler>:
 800d410:	4a02      	ldr	r2, [pc, #8]	@ (800d41c <stdio_exit_handler+0xc>)
 800d412:	4903      	ldr	r1, [pc, #12]	@ (800d420 <stdio_exit_handler+0x10>)
 800d414:	4803      	ldr	r0, [pc, #12]	@ (800d424 <stdio_exit_handler+0x14>)
 800d416:	f000 b869 	b.w	800d4ec <_fwalk_sglue>
 800d41a:	bf00      	nop
 800d41c:	20000f7c 	.word	0x20000f7c
 800d420:	0800f085 	.word	0x0800f085
 800d424:	20000f8c 	.word	0x20000f8c

0800d428 <cleanup_stdio>:
 800d428:	6841      	ldr	r1, [r0, #4]
 800d42a:	4b0c      	ldr	r3, [pc, #48]	@ (800d45c <cleanup_stdio+0x34>)
 800d42c:	4299      	cmp	r1, r3
 800d42e:	b510      	push	{r4, lr}
 800d430:	4604      	mov	r4, r0
 800d432:	d001      	beq.n	800d438 <cleanup_stdio+0x10>
 800d434:	f001 fe26 	bl	800f084 <_fflush_r>
 800d438:	68a1      	ldr	r1, [r4, #8]
 800d43a:	4b09      	ldr	r3, [pc, #36]	@ (800d460 <cleanup_stdio+0x38>)
 800d43c:	4299      	cmp	r1, r3
 800d43e:	d002      	beq.n	800d446 <cleanup_stdio+0x1e>
 800d440:	4620      	mov	r0, r4
 800d442:	f001 fe1f 	bl	800f084 <_fflush_r>
 800d446:	68e1      	ldr	r1, [r4, #12]
 800d448:	4b06      	ldr	r3, [pc, #24]	@ (800d464 <cleanup_stdio+0x3c>)
 800d44a:	4299      	cmp	r1, r3
 800d44c:	d004      	beq.n	800d458 <cleanup_stdio+0x30>
 800d44e:	4620      	mov	r0, r4
 800d450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d454:	f001 be16 	b.w	800f084 <_fflush_r>
 800d458:	bd10      	pop	{r4, pc}
 800d45a:	bf00      	nop
 800d45c:	2007afc8 	.word	0x2007afc8
 800d460:	2007b030 	.word	0x2007b030
 800d464:	2007b098 	.word	0x2007b098

0800d468 <global_stdio_init.part.0>:
 800d468:	b510      	push	{r4, lr}
 800d46a:	4b0b      	ldr	r3, [pc, #44]	@ (800d498 <global_stdio_init.part.0+0x30>)
 800d46c:	2104      	movs	r1, #4
 800d46e:	4c0b      	ldr	r4, [pc, #44]	@ (800d49c <global_stdio_init.part.0+0x34>)
 800d470:	4a0b      	ldr	r2, [pc, #44]	@ (800d4a0 <global_stdio_init.part.0+0x38>)
 800d472:	4620      	mov	r0, r4
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	2200      	movs	r2, #0
 800d478:	f7ff ff94 	bl	800d3a4 <std>
 800d47c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d480:	2201      	movs	r2, #1
 800d482:	2109      	movs	r1, #9
 800d484:	f7ff ff8e 	bl	800d3a4 <std>
 800d488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d48c:	2202      	movs	r2, #2
 800d48e:	2112      	movs	r1, #18
 800d490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d494:	f7ff bf86 	b.w	800d3a4 <std>
 800d498:	2007b100 	.word	0x2007b100
 800d49c:	2007afc8 	.word	0x2007afc8
 800d4a0:	0800d411 	.word	0x0800d411

0800d4a4 <__sfp_lock_acquire>:
 800d4a4:	4801      	ldr	r0, [pc, #4]	@ (800d4ac <__sfp_lock_acquire+0x8>)
 800d4a6:	f000 b9be 	b.w	800d826 <__retarget_lock_acquire_recursive>
 800d4aa:	bf00      	nop
 800d4ac:	2007b109 	.word	0x2007b109

0800d4b0 <__sfp_lock_release>:
 800d4b0:	4801      	ldr	r0, [pc, #4]	@ (800d4b8 <__sfp_lock_release+0x8>)
 800d4b2:	f000 b9b9 	b.w	800d828 <__retarget_lock_release_recursive>
 800d4b6:	bf00      	nop
 800d4b8:	2007b109 	.word	0x2007b109

0800d4bc <__sinit>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	4604      	mov	r4, r0
 800d4c0:	f7ff fff0 	bl	800d4a4 <__sfp_lock_acquire>
 800d4c4:	6a23      	ldr	r3, [r4, #32]
 800d4c6:	b11b      	cbz	r3, 800d4d0 <__sinit+0x14>
 800d4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4cc:	f7ff bff0 	b.w	800d4b0 <__sfp_lock_release>
 800d4d0:	4b04      	ldr	r3, [pc, #16]	@ (800d4e4 <__sinit+0x28>)
 800d4d2:	6223      	str	r3, [r4, #32]
 800d4d4:	4b04      	ldr	r3, [pc, #16]	@ (800d4e8 <__sinit+0x2c>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1f5      	bne.n	800d4c8 <__sinit+0xc>
 800d4dc:	f7ff ffc4 	bl	800d468 <global_stdio_init.part.0>
 800d4e0:	e7f2      	b.n	800d4c8 <__sinit+0xc>
 800d4e2:	bf00      	nop
 800d4e4:	0800d429 	.word	0x0800d429
 800d4e8:	2007b100 	.word	0x2007b100

0800d4ec <_fwalk_sglue>:
 800d4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f0:	4607      	mov	r7, r0
 800d4f2:	4688      	mov	r8, r1
 800d4f4:	4614      	mov	r4, r2
 800d4f6:	2600      	movs	r6, #0
 800d4f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4fc:	f1b9 0901 	subs.w	r9, r9, #1
 800d500:	d505      	bpl.n	800d50e <_fwalk_sglue+0x22>
 800d502:	6824      	ldr	r4, [r4, #0]
 800d504:	2c00      	cmp	r4, #0
 800d506:	d1f7      	bne.n	800d4f8 <_fwalk_sglue+0xc>
 800d508:	4630      	mov	r0, r6
 800d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50e:	89ab      	ldrh	r3, [r5, #12]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d907      	bls.n	800d524 <_fwalk_sglue+0x38>
 800d514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d518:	3301      	adds	r3, #1
 800d51a:	d003      	beq.n	800d524 <_fwalk_sglue+0x38>
 800d51c:	4629      	mov	r1, r5
 800d51e:	4638      	mov	r0, r7
 800d520:	47c0      	blx	r8
 800d522:	4306      	orrs	r6, r0
 800d524:	3568      	adds	r5, #104	@ 0x68
 800d526:	e7e9      	b.n	800d4fc <_fwalk_sglue+0x10>

0800d528 <sniprintf>:
 800d528:	b40c      	push	{r2, r3}
 800d52a:	4b19      	ldr	r3, [pc, #100]	@ (800d590 <sniprintf+0x68>)
 800d52c:	b530      	push	{r4, r5, lr}
 800d52e:	1e0c      	subs	r4, r1, #0
 800d530:	b09d      	sub	sp, #116	@ 0x74
 800d532:	681d      	ldr	r5, [r3, #0]
 800d534:	da08      	bge.n	800d548 <sniprintf+0x20>
 800d536:	238b      	movs	r3, #139	@ 0x8b
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	b01d      	add	sp, #116	@ 0x74
 800d540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d544:	b002      	add	sp, #8
 800d546:	4770      	bx	lr
 800d548:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d54c:	9002      	str	r0, [sp, #8]
 800d54e:	9006      	str	r0, [sp, #24]
 800d550:	a902      	add	r1, sp, #8
 800d552:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d556:	f04f 0300 	mov.w	r3, #0
 800d55a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d55c:	4628      	mov	r0, r5
 800d55e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d560:	bf14      	ite	ne
 800d562:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d566:	4623      	moveq	r3, r4
 800d568:	9304      	str	r3, [sp, #16]
 800d56a:	9307      	str	r3, [sp, #28]
 800d56c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d570:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d574:	ab21      	add	r3, sp, #132	@ 0x84
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	f001 fc04 	bl	800ed84 <_svfiprintf_r>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	bfbc      	itt	lt
 800d580:	238b      	movlt	r3, #139	@ 0x8b
 800d582:	602b      	strlt	r3, [r5, #0]
 800d584:	2c00      	cmp	r4, #0
 800d586:	d0da      	beq.n	800d53e <sniprintf+0x16>
 800d588:	9b02      	ldr	r3, [sp, #8]
 800d58a:	2200      	movs	r2, #0
 800d58c:	701a      	strb	r2, [r3, #0]
 800d58e:	e7d6      	b.n	800d53e <sniprintf+0x16>
 800d590:	20000f88 	.word	0x20000f88

0800d594 <__sread>:
 800d594:	b510      	push	{r4, lr}
 800d596:	460c      	mov	r4, r1
 800d598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59c:	f000 f8e4 	bl	800d768 <_read_r>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	bfab      	itete	ge
 800d5a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5a8:	181b      	addge	r3, r3, r0
 800d5aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5ae:	bfac      	ite	ge
 800d5b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5b2:	81a3      	strhlt	r3, [r4, #12]
 800d5b4:	bd10      	pop	{r4, pc}

0800d5b6 <__swrite>:
 800d5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ba:	461f      	mov	r7, r3
 800d5bc:	898b      	ldrh	r3, [r1, #12]
 800d5be:	4605      	mov	r5, r0
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	05db      	lsls	r3, r3, #23
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	d505      	bpl.n	800d5d4 <__swrite+0x1e>
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	f000 f8b8 	bl	800d744 <_lseek_r>
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	4632      	mov	r2, r6
 800d5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ea:	f000 b8df 	b.w	800d7ac <_write_r>

0800d5ee <__sseek>:
 800d5ee:	b510      	push	{r4, lr}
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f6:	f000 f8a5 	bl	800d744 <_lseek_r>
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	bf15      	itete	ne
 800d600:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d60a:	81a3      	strheq	r3, [r4, #12]
 800d60c:	bf18      	it	ne
 800d60e:	81a3      	strhne	r3, [r4, #12]
 800d610:	bd10      	pop	{r4, pc}

0800d612 <__sclose>:
 800d612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d616:	f000 b827 	b.w	800d668 <_close_r>

0800d61a <memmove>:
 800d61a:	4288      	cmp	r0, r1
 800d61c:	b510      	push	{r4, lr}
 800d61e:	eb01 0402 	add.w	r4, r1, r2
 800d622:	d902      	bls.n	800d62a <memmove+0x10>
 800d624:	4284      	cmp	r4, r0
 800d626:	4623      	mov	r3, r4
 800d628:	d807      	bhi.n	800d63a <memmove+0x20>
 800d62a:	1e43      	subs	r3, r0, #1
 800d62c:	42a1      	cmp	r1, r4
 800d62e:	d008      	beq.n	800d642 <memmove+0x28>
 800d630:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d634:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d638:	e7f8      	b.n	800d62c <memmove+0x12>
 800d63a:	4402      	add	r2, r0
 800d63c:	4601      	mov	r1, r0
 800d63e:	428a      	cmp	r2, r1
 800d640:	d100      	bne.n	800d644 <memmove+0x2a>
 800d642:	bd10      	pop	{r4, pc}
 800d644:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d648:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64c:	e7f7      	b.n	800d63e <memmove+0x24>

0800d64e <memset>:
 800d64e:	4402      	add	r2, r0
 800d650:	4603      	mov	r3, r0
 800d652:	4293      	cmp	r3, r2
 800d654:	d100      	bne.n	800d658 <memset+0xa>
 800d656:	4770      	bx	lr
 800d658:	f803 1b01 	strb.w	r1, [r3], #1
 800d65c:	e7f9      	b.n	800d652 <memset+0x4>
	...

0800d660 <_localeconv_r>:
 800d660:	4800      	ldr	r0, [pc, #0]	@ (800d664 <_localeconv_r+0x4>)
 800d662:	4770      	bx	lr
 800d664:	200010c8 	.word	0x200010c8

0800d668 <_close_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	2300      	movs	r3, #0
 800d66c:	4d05      	ldr	r5, [pc, #20]	@ (800d684 <_close_r+0x1c>)
 800d66e:	4604      	mov	r4, r0
 800d670:	4608      	mov	r0, r1
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	f002 f836 	bl	800f6e4 <_close>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d102      	bne.n	800d682 <_close_r+0x1a>
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	b103      	cbz	r3, 800d682 <_close_r+0x1a>
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	2007b104 	.word	0x2007b104

0800d688 <_reclaim_reent>:
 800d688:	4b2d      	ldr	r3, [pc, #180]	@ (800d740 <_reclaim_reent+0xb8>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4283      	cmp	r3, r0
 800d68e:	b570      	push	{r4, r5, r6, lr}
 800d690:	4604      	mov	r4, r0
 800d692:	d053      	beq.n	800d73c <_reclaim_reent+0xb4>
 800d694:	69c3      	ldr	r3, [r0, #28]
 800d696:	b31b      	cbz	r3, 800d6e0 <_reclaim_reent+0x58>
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	b163      	cbz	r3, 800d6b6 <_reclaim_reent+0x2e>
 800d69c:	2500      	movs	r5, #0
 800d69e:	69e3      	ldr	r3, [r4, #28]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	5959      	ldr	r1, [r3, r5]
 800d6a4:	b9b1      	cbnz	r1, 800d6d4 <_reclaim_reent+0x4c>
 800d6a6:	3504      	adds	r5, #4
 800d6a8:	2d80      	cmp	r5, #128	@ 0x80
 800d6aa:	d1f8      	bne.n	800d69e <_reclaim_reent+0x16>
 800d6ac:	69e3      	ldr	r3, [r4, #28]
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	68d9      	ldr	r1, [r3, #12]
 800d6b2:	f000 ff37 	bl	800e524 <_free_r>
 800d6b6:	69e3      	ldr	r3, [r4, #28]
 800d6b8:	6819      	ldr	r1, [r3, #0]
 800d6ba:	b111      	cbz	r1, 800d6c2 <_reclaim_reent+0x3a>
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 ff31 	bl	800e524 <_free_r>
 800d6c2:	69e3      	ldr	r3, [r4, #28]
 800d6c4:	689d      	ldr	r5, [r3, #8]
 800d6c6:	b15d      	cbz	r5, 800d6e0 <_reclaim_reent+0x58>
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	682d      	ldr	r5, [r5, #0]
 800d6ce:	f000 ff29 	bl	800e524 <_free_r>
 800d6d2:	e7f8      	b.n	800d6c6 <_reclaim_reent+0x3e>
 800d6d4:	680e      	ldr	r6, [r1, #0]
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 ff24 	bl	800e524 <_free_r>
 800d6dc:	4631      	mov	r1, r6
 800d6de:	e7e1      	b.n	800d6a4 <_reclaim_reent+0x1c>
 800d6e0:	6961      	ldr	r1, [r4, #20]
 800d6e2:	b111      	cbz	r1, 800d6ea <_reclaim_reent+0x62>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 ff1d 	bl	800e524 <_free_r>
 800d6ea:	69e1      	ldr	r1, [r4, #28]
 800d6ec:	b111      	cbz	r1, 800d6f4 <_reclaim_reent+0x6c>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 ff18 	bl	800e524 <_free_r>
 800d6f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d6f6:	b111      	cbz	r1, 800d6fe <_reclaim_reent+0x76>
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f000 ff13 	bl	800e524 <_free_r>
 800d6fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d700:	b111      	cbz	r1, 800d708 <_reclaim_reent+0x80>
 800d702:	4620      	mov	r0, r4
 800d704:	f000 ff0e 	bl	800e524 <_free_r>
 800d708:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d70a:	b111      	cbz	r1, 800d712 <_reclaim_reent+0x8a>
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 ff09 	bl	800e524 <_free_r>
 800d712:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d714:	b111      	cbz	r1, 800d71c <_reclaim_reent+0x94>
 800d716:	4620      	mov	r0, r4
 800d718:	f000 ff04 	bl	800e524 <_free_r>
 800d71c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d71e:	b111      	cbz	r1, 800d726 <_reclaim_reent+0x9e>
 800d720:	4620      	mov	r0, r4
 800d722:	f000 feff 	bl	800e524 <_free_r>
 800d726:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d728:	b111      	cbz	r1, 800d730 <_reclaim_reent+0xa8>
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fefa 	bl	800e524 <_free_r>
 800d730:	6a23      	ldr	r3, [r4, #32]
 800d732:	b11b      	cbz	r3, 800d73c <_reclaim_reent+0xb4>
 800d734:	4620      	mov	r0, r4
 800d736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d73a:	4718      	bx	r3
 800d73c:	bd70      	pop	{r4, r5, r6, pc}
 800d73e:	bf00      	nop
 800d740:	20000f88 	.word	0x20000f88

0800d744 <_lseek_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4604      	mov	r4, r0
 800d748:	4d06      	ldr	r5, [pc, #24]	@ (800d764 <_lseek_r+0x20>)
 800d74a:	4608      	mov	r0, r1
 800d74c:	4611      	mov	r1, r2
 800d74e:	2200      	movs	r2, #0
 800d750:	602a      	str	r2, [r5, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	f001 ffee 	bl	800f734 <_lseek>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_lseek_r+0x1e>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_lseek_r+0x1e>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	2007b104 	.word	0x2007b104

0800d768 <_read_r>:
 800d768:	b538      	push	{r3, r4, r5, lr}
 800d76a:	4604      	mov	r4, r0
 800d76c:	4d06      	ldr	r5, [pc, #24]	@ (800d788 <_read_r+0x20>)
 800d76e:	4608      	mov	r0, r1
 800d770:	4611      	mov	r1, r2
 800d772:	2200      	movs	r2, #0
 800d774:	602a      	str	r2, [r5, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	f001 ffe4 	bl	800f744 <_read>
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d102      	bne.n	800d786 <_read_r+0x1e>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b103      	cbz	r3, 800d786 <_read_r+0x1e>
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	2007b104 	.word	0x2007b104

0800d78c <_sbrk_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	2300      	movs	r3, #0
 800d790:	4d05      	ldr	r5, [pc, #20]	@ (800d7a8 <_sbrk_r+0x1c>)
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	f001 ffdc 	bl	800f754 <_sbrk>
 800d79c:	1c43      	adds	r3, r0, #1
 800d79e:	d102      	bne.n	800d7a6 <_sbrk_r+0x1a>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	b103      	cbz	r3, 800d7a6 <_sbrk_r+0x1a>
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	2007b104 	.word	0x2007b104

0800d7ac <_write_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4d06      	ldr	r5, [pc, #24]	@ (800d7cc <_write_r+0x20>)
 800d7b2:	4608      	mov	r0, r1
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	602a      	str	r2, [r5, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	f001 ffd8 	bl	800f770 <_write>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	d102      	bne.n	800d7ca <_write_r+0x1e>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	b103      	cbz	r3, 800d7ca <_write_r+0x1e>
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	2007b104 	.word	0x2007b104

0800d7d0 <__errno>:
 800d7d0:	4b01      	ldr	r3, [pc, #4]	@ (800d7d8 <__errno+0x8>)
 800d7d2:	6818      	ldr	r0, [r3, #0]
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	20000f88 	.word	0x20000f88

0800d7dc <__libc_init_array>:
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	4d0d      	ldr	r5, [pc, #52]	@ (800d814 <__libc_init_array+0x38>)
 800d7e0:	2600      	movs	r6, #0
 800d7e2:	4c0d      	ldr	r4, [pc, #52]	@ (800d818 <__libc_init_array+0x3c>)
 800d7e4:	1b64      	subs	r4, r4, r5
 800d7e6:	10a4      	asrs	r4, r4, #2
 800d7e8:	42a6      	cmp	r6, r4
 800d7ea:	d109      	bne.n	800d800 <__libc_init_array+0x24>
 800d7ec:	4d0b      	ldr	r5, [pc, #44]	@ (800d81c <__libc_init_array+0x40>)
 800d7ee:	2600      	movs	r6, #0
 800d7f0:	4c0b      	ldr	r4, [pc, #44]	@ (800d820 <__libc_init_array+0x44>)
 800d7f2:	f001 ffc7 	bl	800f784 <_init>
 800d7f6:	1b64      	subs	r4, r4, r5
 800d7f8:	10a4      	asrs	r4, r4, #2
 800d7fa:	42a6      	cmp	r6, r4
 800d7fc:	d105      	bne.n	800d80a <__libc_init_array+0x2e>
 800d7fe:	bd70      	pop	{r4, r5, r6, pc}
 800d800:	f855 3b04 	ldr.w	r3, [r5], #4
 800d804:	3601      	adds	r6, #1
 800d806:	4798      	blx	r3
 800d808:	e7ee      	b.n	800d7e8 <__libc_init_array+0xc>
 800d80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d80e:	3601      	adds	r6, #1
 800d810:	4798      	blx	r3
 800d812:	e7f2      	b.n	800d7fa <__libc_init_array+0x1e>
 800d814:	0801e9ec 	.word	0x0801e9ec
 800d818:	0801e9ec 	.word	0x0801e9ec
 800d81c:	0801e9ec 	.word	0x0801e9ec
 800d820:	0801e9f0 	.word	0x0801e9f0

0800d824 <__retarget_lock_init_recursive>:
 800d824:	4770      	bx	lr

0800d826 <__retarget_lock_acquire_recursive>:
 800d826:	4770      	bx	lr

0800d828 <__retarget_lock_release_recursive>:
 800d828:	4770      	bx	lr

0800d82a <memchr>:
 800d82a:	b2c9      	uxtb	r1, r1
 800d82c:	4603      	mov	r3, r0
 800d82e:	4402      	add	r2, r0
 800d830:	b510      	push	{r4, lr}
 800d832:	4293      	cmp	r3, r2
 800d834:	4618      	mov	r0, r3
 800d836:	d101      	bne.n	800d83c <memchr+0x12>
 800d838:	2000      	movs	r0, #0
 800d83a:	e003      	b.n	800d844 <memchr+0x1a>
 800d83c:	7804      	ldrb	r4, [r0, #0]
 800d83e:	3301      	adds	r3, #1
 800d840:	428c      	cmp	r4, r1
 800d842:	d1f6      	bne.n	800d832 <memchr+0x8>
 800d844:	bd10      	pop	{r4, pc}

0800d846 <memcpy>:
 800d846:	440a      	add	r2, r1
 800d848:	1e43      	subs	r3, r0, #1
 800d84a:	4291      	cmp	r1, r2
 800d84c:	d100      	bne.n	800d850 <memcpy+0xa>
 800d84e:	4770      	bx	lr
 800d850:	b510      	push	{r4, lr}
 800d852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d856:	4291      	cmp	r1, r2
 800d858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d85c:	d1f9      	bne.n	800d852 <memcpy+0xc>
 800d85e:	bd10      	pop	{r4, pc}

0800d860 <quorem>:
 800d860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d864:	6903      	ldr	r3, [r0, #16]
 800d866:	4607      	mov	r7, r0
 800d868:	690c      	ldr	r4, [r1, #16]
 800d86a:	42a3      	cmp	r3, r4
 800d86c:	f2c0 8083 	blt.w	800d976 <quorem+0x116>
 800d870:	3c01      	subs	r4, #1
 800d872:	f100 0514 	add.w	r5, r0, #20
 800d876:	f101 0814 	add.w	r8, r1, #20
 800d87a:	00a3      	lsls	r3, r4, #2
 800d87c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d890:	3301      	adds	r3, #1
 800d892:	429a      	cmp	r2, r3
 800d894:	fbb2 f6f3 	udiv	r6, r2, r3
 800d898:	d331      	bcc.n	800d8fe <quorem+0x9e>
 800d89a:	f04f 0a00 	mov.w	sl, #0
 800d89e:	46c4      	mov	ip, r8
 800d8a0:	46ae      	mov	lr, r5
 800d8a2:	46d3      	mov	fp, sl
 800d8a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d8a8:	b298      	uxth	r0, r3
 800d8aa:	45e1      	cmp	r9, ip
 800d8ac:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d8b0:	fb06 a000 	mla	r0, r6, r0, sl
 800d8b4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d8b8:	b280      	uxth	r0, r0
 800d8ba:	fb06 2303 	mla	r3, r6, r3, r2
 800d8be:	f8de 2000 	ldr.w	r2, [lr]
 800d8c2:	b292      	uxth	r2, r2
 800d8c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8c8:	eba2 0200 	sub.w	r2, r2, r0
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f8de 0000 	ldr.w	r0, [lr]
 800d8d2:	445a      	add	r2, fp
 800d8d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d8d8:	b292      	uxth	r2, r2
 800d8da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d8de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d8e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d8e6:	f84e 2b04 	str.w	r2, [lr], #4
 800d8ea:	d2db      	bcs.n	800d8a4 <quorem+0x44>
 800d8ec:	9b00      	ldr	r3, [sp, #0]
 800d8ee:	58eb      	ldr	r3, [r5, r3]
 800d8f0:	b92b      	cbnz	r3, 800d8fe <quorem+0x9e>
 800d8f2:	9b01      	ldr	r3, [sp, #4]
 800d8f4:	3b04      	subs	r3, #4
 800d8f6:	429d      	cmp	r5, r3
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	d330      	bcc.n	800d95e <quorem+0xfe>
 800d8fc:	613c      	str	r4, [r7, #16]
 800d8fe:	4638      	mov	r0, r7
 800d900:	f001 f8d0 	bl	800eaa4 <__mcmp>
 800d904:	2800      	cmp	r0, #0
 800d906:	db26      	blt.n	800d956 <quorem+0xf6>
 800d908:	4629      	mov	r1, r5
 800d90a:	2000      	movs	r0, #0
 800d90c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d910:	f8d1 c000 	ldr.w	ip, [r1]
 800d914:	fa1f fe82 	uxth.w	lr, r2
 800d918:	45c1      	cmp	r9, r8
 800d91a:	fa1f f38c 	uxth.w	r3, ip
 800d91e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d922:	eba3 030e 	sub.w	r3, r3, lr
 800d926:	4403      	add	r3, r0
 800d928:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d936:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d93a:	f841 3b04 	str.w	r3, [r1], #4
 800d93e:	d2e5      	bcs.n	800d90c <quorem+0xac>
 800d940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d948:	b922      	cbnz	r2, 800d954 <quorem+0xf4>
 800d94a:	3b04      	subs	r3, #4
 800d94c:	429d      	cmp	r5, r3
 800d94e:	461a      	mov	r2, r3
 800d950:	d30b      	bcc.n	800d96a <quorem+0x10a>
 800d952:	613c      	str	r4, [r7, #16]
 800d954:	3601      	adds	r6, #1
 800d956:	4630      	mov	r0, r6
 800d958:	b003      	add	sp, #12
 800d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95e:	6812      	ldr	r2, [r2, #0]
 800d960:	3b04      	subs	r3, #4
 800d962:	2a00      	cmp	r2, #0
 800d964:	d1ca      	bne.n	800d8fc <quorem+0x9c>
 800d966:	3c01      	subs	r4, #1
 800d968:	e7c5      	b.n	800d8f6 <quorem+0x96>
 800d96a:	6812      	ldr	r2, [r2, #0]
 800d96c:	3b04      	subs	r3, #4
 800d96e:	2a00      	cmp	r2, #0
 800d970:	d1ef      	bne.n	800d952 <quorem+0xf2>
 800d972:	3c01      	subs	r4, #1
 800d974:	e7ea      	b.n	800d94c <quorem+0xec>
 800d976:	2000      	movs	r0, #0
 800d978:	e7ee      	b.n	800d958 <quorem+0xf8>
 800d97a:	0000      	movs	r0, r0
 800d97c:	0000      	movs	r0, r0
	...

0800d980 <_dtoa_r>:
 800d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	69c7      	ldr	r7, [r0, #28]
 800d986:	b097      	sub	sp, #92	@ 0x5c
 800d988:	4681      	mov	r9, r0
 800d98a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d98c:	9107      	str	r1, [sp, #28]
 800d98e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d990:	9311      	str	r3, [sp, #68]	@ 0x44
 800d992:	ec55 4b10 	vmov	r4, r5, d0
 800d996:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d99a:	b97f      	cbnz	r7, 800d9bc <_dtoa_r+0x3c>
 800d99c:	2010      	movs	r0, #16
 800d99e:	f7fe ffc5 	bl	800c92c <malloc>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	f8c9 001c 	str.w	r0, [r9, #28]
 800d9a8:	b920      	cbnz	r0, 800d9b4 <_dtoa_r+0x34>
 800d9aa:	4ba9      	ldr	r3, [pc, #676]	@ (800dc50 <_dtoa_r+0x2d0>)
 800d9ac:	21ef      	movs	r1, #239	@ 0xef
 800d9ae:	48a9      	ldr	r0, [pc, #676]	@ (800dc54 <_dtoa_r+0x2d4>)
 800d9b0:	f001 fb90 	bl	800f0d4 <__assert_func>
 800d9b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d9b8:	6007      	str	r7, [r0, #0]
 800d9ba:	60c7      	str	r7, [r0, #12]
 800d9bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	b159      	cbz	r1, 800d9dc <_dtoa_r+0x5c>
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	4648      	mov	r0, r9
 800d9ca:	4093      	lsls	r3, r2
 800d9cc:	604a      	str	r2, [r1, #4]
 800d9ce:	608b      	str	r3, [r1, #8]
 800d9d0:	f000 fe32 	bl	800e638 <_Bfree>
 800d9d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	1e2b      	subs	r3, r5, #0
 800d9de:	bfb7      	itett	lt
 800d9e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d9e4:	2300      	movge	r3, #0
 800d9e6:	2201      	movlt	r2, #1
 800d9e8:	9305      	strlt	r3, [sp, #20]
 800d9ea:	bfa8      	it	ge
 800d9ec:	6033      	strge	r3, [r6, #0]
 800d9ee:	9f05      	ldr	r7, [sp, #20]
 800d9f0:	4b99      	ldr	r3, [pc, #612]	@ (800dc58 <_dtoa_r+0x2d8>)
 800d9f2:	bfb8      	it	lt
 800d9f4:	6032      	strlt	r2, [r6, #0]
 800d9f6:	43bb      	bics	r3, r7
 800d9f8:	d112      	bne.n	800da20 <_dtoa_r+0xa0>
 800d9fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d9fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da00:	6013      	str	r3, [r2, #0]
 800da02:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da06:	4323      	orrs	r3, r4
 800da08:	f000 855a 	beq.w	800e4c0 <_dtoa_r+0xb40>
 800da0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da0e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dc6c <_dtoa_r+0x2ec>
 800da12:	2b00      	cmp	r3, #0
 800da14:	f000 855c 	beq.w	800e4d0 <_dtoa_r+0xb50>
 800da18:	f10a 0303 	add.w	r3, sl, #3
 800da1c:	f000 bd56 	b.w	800e4cc <_dtoa_r+0xb4c>
 800da20:	ed9d 7b04 	vldr	d7, [sp, #16]
 800da24:	2200      	movs	r2, #0
 800da26:	2300      	movs	r3, #0
 800da28:	ec51 0b17 	vmov	r0, r1, d7
 800da2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800da30:	f7f3 f85a 	bl	8000ae8 <__aeabi_dcmpeq>
 800da34:	4680      	mov	r8, r0
 800da36:	b158      	cbz	r0, 800da50 <_dtoa_r+0xd0>
 800da38:	2301      	movs	r3, #1
 800da3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da3c:	6013      	str	r3, [r2, #0]
 800da3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da40:	b113      	cbz	r3, 800da48 <_dtoa_r+0xc8>
 800da42:	4b86      	ldr	r3, [pc, #536]	@ (800dc5c <_dtoa_r+0x2dc>)
 800da44:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800dc70 <_dtoa_r+0x2f0>
 800da4c:	f000 bd40 	b.w	800e4d0 <_dtoa_r+0xb50>
 800da50:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800da54:	aa14      	add	r2, sp, #80	@ 0x50
 800da56:	a915      	add	r1, sp, #84	@ 0x54
 800da58:	4648      	mov	r0, r9
 800da5a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800da5e:	f001 f8d5 	bl	800ec0c <__d2b>
 800da62:	9002      	str	r0, [sp, #8]
 800da64:	2e00      	cmp	r6, #0
 800da66:	d076      	beq.n	800db56 <_dtoa_r+0x1d6>
 800da68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da6a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800da6e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800da72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da76:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800da7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da7e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800da82:	4619      	mov	r1, r3
 800da84:	2200      	movs	r2, #0
 800da86:	4b76      	ldr	r3, [pc, #472]	@ (800dc60 <_dtoa_r+0x2e0>)
 800da88:	f7f2 fc0e 	bl	80002a8 <__aeabi_dsub>
 800da8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800dc38 <_dtoa_r+0x2b8>)
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	f7f2 fdc1 	bl	8000618 <__aeabi_dmul>
 800da96:	a36a      	add	r3, pc, #424	@ (adr r3, 800dc40 <_dtoa_r+0x2c0>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f7f2 fc06 	bl	80002ac <__adddf3>
 800daa0:	4604      	mov	r4, r0
 800daa2:	460d      	mov	r5, r1
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7f2 fd4d 	bl	8000544 <__aeabi_i2d>
 800daaa:	a367      	add	r3, pc, #412	@ (adr r3, 800dc48 <_dtoa_r+0x2c8>)
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	f7f2 fdb2 	bl	8000618 <__aeabi_dmul>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4620      	mov	r0, r4
 800daba:	4629      	mov	r1, r5
 800dabc:	f7f2 fbf6 	bl	80002ac <__adddf3>
 800dac0:	4604      	mov	r4, r0
 800dac2:	460d      	mov	r5, r1
 800dac4:	f7f3 f858 	bl	8000b78 <__aeabi_d2iz>
 800dac8:	2200      	movs	r2, #0
 800daca:	4607      	mov	r7, r0
 800dacc:	2300      	movs	r3, #0
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f3 f813 	bl	8000afc <__aeabi_dcmplt>
 800dad6:	b140      	cbz	r0, 800daea <_dtoa_r+0x16a>
 800dad8:	4638      	mov	r0, r7
 800dada:	f7f2 fd33 	bl	8000544 <__aeabi_i2d>
 800dade:	4622      	mov	r2, r4
 800dae0:	462b      	mov	r3, r5
 800dae2:	f7f3 f801 	bl	8000ae8 <__aeabi_dcmpeq>
 800dae6:	b900      	cbnz	r0, 800daea <_dtoa_r+0x16a>
 800dae8:	3f01      	subs	r7, #1
 800daea:	2f16      	cmp	r7, #22
 800daec:	d852      	bhi.n	800db94 <_dtoa_r+0x214>
 800daee:	4b5d      	ldr	r3, [pc, #372]	@ (800dc64 <_dtoa_r+0x2e4>)
 800daf0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800daf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f7f2 fffe 	bl	8000afc <__aeabi_dcmplt>
 800db00:	2800      	cmp	r0, #0
 800db02:	d049      	beq.n	800db98 <_dtoa_r+0x218>
 800db04:	3f01      	subs	r7, #1
 800db06:	2300      	movs	r3, #0
 800db08:	9310      	str	r3, [sp, #64]	@ 0x40
 800db0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800db0c:	1b9b      	subs	r3, r3, r6
 800db0e:	1e5a      	subs	r2, r3, #1
 800db10:	bf4c      	ite	mi
 800db12:	f1c3 0301 	rsbmi	r3, r3, #1
 800db16:	2300      	movpl	r3, #0
 800db18:	9206      	str	r2, [sp, #24]
 800db1a:	bf45      	ittet	mi
 800db1c:	9300      	strmi	r3, [sp, #0]
 800db1e:	2300      	movmi	r3, #0
 800db20:	9300      	strpl	r3, [sp, #0]
 800db22:	9306      	strmi	r3, [sp, #24]
 800db24:	2f00      	cmp	r7, #0
 800db26:	db39      	blt.n	800db9c <_dtoa_r+0x21c>
 800db28:	9b06      	ldr	r3, [sp, #24]
 800db2a:	970d      	str	r7, [sp, #52]	@ 0x34
 800db2c:	443b      	add	r3, r7
 800db2e:	9306      	str	r3, [sp, #24]
 800db30:	2300      	movs	r3, #0
 800db32:	9308      	str	r3, [sp, #32]
 800db34:	9b07      	ldr	r3, [sp, #28]
 800db36:	2b09      	cmp	r3, #9
 800db38:	d863      	bhi.n	800dc02 <_dtoa_r+0x282>
 800db3a:	2b05      	cmp	r3, #5
 800db3c:	bfc5      	ittet	gt
 800db3e:	3b04      	subgt	r3, #4
 800db40:	2400      	movgt	r4, #0
 800db42:	2401      	movle	r4, #1
 800db44:	9307      	strgt	r3, [sp, #28]
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	3b02      	subs	r3, #2
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d865      	bhi.n	800dc1a <_dtoa_r+0x29a>
 800db4e:	e8df f003 	tbb	[pc, r3]
 800db52:	5654      	.short	0x5654
 800db54:	2d39      	.short	0x2d39
 800db56:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800db5a:	441e      	add	r6, r3
 800db5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800db60:	2b20      	cmp	r3, #32
 800db62:	bfc9      	itett	gt
 800db64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800db68:	f1c3 0320 	rsble	r3, r3, #32
 800db6c:	409f      	lslgt	r7, r3
 800db6e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800db72:	bfd8      	it	le
 800db74:	fa04 f003 	lslle.w	r0, r4, r3
 800db78:	f106 36ff 	add.w	r6, r6, #4294967295
 800db7c:	bfc4      	itt	gt
 800db7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800db82:	ea47 0003 	orrgt.w	r0, r7, r3
 800db86:	f7f2 fccd 	bl	8000524 <__aeabi_ui2d>
 800db8a:	2201      	movs	r2, #1
 800db8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800db90:	9212      	str	r2, [sp, #72]	@ 0x48
 800db92:	e776      	b.n	800da82 <_dtoa_r+0x102>
 800db94:	2301      	movs	r3, #1
 800db96:	e7b7      	b.n	800db08 <_dtoa_r+0x188>
 800db98:	9010      	str	r0, [sp, #64]	@ 0x40
 800db9a:	e7b6      	b.n	800db0a <_dtoa_r+0x18a>
 800db9c:	9b00      	ldr	r3, [sp, #0]
 800db9e:	1bdb      	subs	r3, r3, r7
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	427b      	negs	r3, r7
 800dba4:	9308      	str	r3, [sp, #32]
 800dba6:	2300      	movs	r3, #0
 800dba8:	930d      	str	r3, [sp, #52]	@ 0x34
 800dbaa:	e7c3      	b.n	800db34 <_dtoa_r+0x1b4>
 800dbac:	2301      	movs	r3, #1
 800dbae:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbb2:	eb07 0b03 	add.w	fp, r7, r3
 800dbb6:	f10b 0301 	add.w	r3, fp, #1
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	9303      	str	r3, [sp, #12]
 800dbbe:	bfb8      	it	lt
 800dbc0:	2301      	movlt	r3, #1
 800dbc2:	e006      	b.n	800dbd2 <_dtoa_r+0x252>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	dd28      	ble.n	800dc20 <_dtoa_r+0x2a0>
 800dbce:	469b      	mov	fp, r3
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	2204      	movs	r2, #4
 800dbda:	f102 0514 	add.w	r5, r2, #20
 800dbde:	429d      	cmp	r5, r3
 800dbe0:	d926      	bls.n	800dc30 <_dtoa_r+0x2b0>
 800dbe2:	6041      	str	r1, [r0, #4]
 800dbe4:	4648      	mov	r0, r9
 800dbe6:	f000 fce7 	bl	800e5b8 <_Balloc>
 800dbea:	4682      	mov	sl, r0
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d141      	bne.n	800dc74 <_dtoa_r+0x2f4>
 800dbf0:	4b1d      	ldr	r3, [pc, #116]	@ (800dc68 <_dtoa_r+0x2e8>)
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	f240 11af 	movw	r1, #431	@ 0x1af
 800dbf8:	e6d9      	b.n	800d9ae <_dtoa_r+0x2e>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e7e3      	b.n	800dbc6 <_dtoa_r+0x246>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e7d5      	b.n	800dbae <_dtoa_r+0x22e>
 800dc02:	2401      	movs	r4, #1
 800dc04:	2300      	movs	r3, #0
 800dc06:	9409      	str	r4, [sp, #36]	@ 0x24
 800dc08:	9307      	str	r3, [sp, #28]
 800dc0a:	f04f 3bff 	mov.w	fp, #4294967295
 800dc0e:	2200      	movs	r2, #0
 800dc10:	2312      	movs	r3, #18
 800dc12:	f8cd b00c 	str.w	fp, [sp, #12]
 800dc16:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc18:	e7db      	b.n	800dbd2 <_dtoa_r+0x252>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1e:	e7f4      	b.n	800dc0a <_dtoa_r+0x28a>
 800dc20:	f04f 0b01 	mov.w	fp, #1
 800dc24:	465b      	mov	r3, fp
 800dc26:	f8cd b00c 	str.w	fp, [sp, #12]
 800dc2a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800dc2e:	e7d0      	b.n	800dbd2 <_dtoa_r+0x252>
 800dc30:	3101      	adds	r1, #1
 800dc32:	0052      	lsls	r2, r2, #1
 800dc34:	e7d1      	b.n	800dbda <_dtoa_r+0x25a>
 800dc36:	bf00      	nop
 800dc38:	636f4361 	.word	0x636f4361
 800dc3c:	3fd287a7 	.word	0x3fd287a7
 800dc40:	8b60c8b3 	.word	0x8b60c8b3
 800dc44:	3fc68a28 	.word	0x3fc68a28
 800dc48:	509f79fb 	.word	0x509f79fb
 800dc4c:	3fd34413 	.word	0x3fd34413
 800dc50:	0801e6b1 	.word	0x0801e6b1
 800dc54:	0801e6c8 	.word	0x0801e6c8
 800dc58:	7ff00000 	.word	0x7ff00000
 800dc5c:	0801e681 	.word	0x0801e681
 800dc60:	3ff80000 	.word	0x3ff80000
 800dc64:	0801e818 	.word	0x0801e818
 800dc68:	0801e720 	.word	0x0801e720
 800dc6c:	0801e6ad 	.word	0x0801e6ad
 800dc70:	0801e680 	.word	0x0801e680
 800dc74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc78:	6018      	str	r0, [r3, #0]
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	2b0e      	cmp	r3, #14
 800dc7e:	f200 80a1 	bhi.w	800ddc4 <_dtoa_r+0x444>
 800dc82:	2c00      	cmp	r4, #0
 800dc84:	f000 809e 	beq.w	800ddc4 <_dtoa_r+0x444>
 800dc88:	2f00      	cmp	r7, #0
 800dc8a:	dd33      	ble.n	800dcf4 <_dtoa_r+0x374>
 800dc8c:	f007 020f 	and.w	r2, r7, #15
 800dc90:	4b9b      	ldr	r3, [pc, #620]	@ (800df00 <_dtoa_r+0x580>)
 800dc92:	05f8      	lsls	r0, r7, #23
 800dc94:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dc98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc9c:	ed93 7b00 	vldr	d7, [r3]
 800dca0:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dca4:	d516      	bpl.n	800dcd4 <_dtoa_r+0x354>
 800dca6:	4b97      	ldr	r3, [pc, #604]	@ (800df04 <_dtoa_r+0x584>)
 800dca8:	f004 040f 	and.w	r4, r4, #15
 800dcac:	2603      	movs	r6, #3
 800dcae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dcb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dcb6:	f7f2 fdd9 	bl	800086c <__aeabi_ddiv>
 800dcba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcbe:	4d91      	ldr	r5, [pc, #580]	@ (800df04 <_dtoa_r+0x584>)
 800dcc0:	b954      	cbnz	r4, 800dcd8 <_dtoa_r+0x358>
 800dcc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dcc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcca:	f7f2 fdcf 	bl	800086c <__aeabi_ddiv>
 800dcce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcd2:	e028      	b.n	800dd26 <_dtoa_r+0x3a6>
 800dcd4:	2602      	movs	r6, #2
 800dcd6:	e7f2      	b.n	800dcbe <_dtoa_r+0x33e>
 800dcd8:	07e1      	lsls	r1, r4, #31
 800dcda:	d508      	bpl.n	800dcee <_dtoa_r+0x36e>
 800dcdc:	3601      	adds	r6, #1
 800dcde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dce2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dce6:	f7f2 fc97 	bl	8000618 <__aeabi_dmul>
 800dcea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dcee:	1064      	asrs	r4, r4, #1
 800dcf0:	3508      	adds	r5, #8
 800dcf2:	e7e5      	b.n	800dcc0 <_dtoa_r+0x340>
 800dcf4:	f000 80af 	beq.w	800de56 <_dtoa_r+0x4d6>
 800dcf8:	427c      	negs	r4, r7
 800dcfa:	4b81      	ldr	r3, [pc, #516]	@ (800df00 <_dtoa_r+0x580>)
 800dcfc:	4d81      	ldr	r5, [pc, #516]	@ (800df04 <_dtoa_r+0x584>)
 800dcfe:	2602      	movs	r6, #2
 800dd00:	f004 020f 	and.w	r2, r4, #15
 800dd04:	1124      	asrs	r4, r4, #4
 800dd06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f7f2 fc81 	bl	8000618 <__aeabi_dmul>
 800dd16:	2300      	movs	r3, #0
 800dd18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd1c:	2c00      	cmp	r4, #0
 800dd1e:	f040 808f 	bne.w	800de40 <_dtoa_r+0x4c0>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1d3      	bne.n	800dcce <_dtoa_r+0x34e>
 800dd26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd28:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 8094 	beq.w	800de5a <_dtoa_r+0x4da>
 800dd32:	2200      	movs	r2, #0
 800dd34:	4b74      	ldr	r3, [pc, #464]	@ (800df08 <_dtoa_r+0x588>)
 800dd36:	4620      	mov	r0, r4
 800dd38:	4629      	mov	r1, r5
 800dd3a:	f7f2 fedf 	bl	8000afc <__aeabi_dcmplt>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f000 808b 	beq.w	800de5a <_dtoa_r+0x4da>
 800dd44:	9b03      	ldr	r3, [sp, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 8087 	beq.w	800de5a <_dtoa_r+0x4da>
 800dd4c:	f1bb 0f00 	cmp.w	fp, #0
 800dd50:	dd34      	ble.n	800ddbc <_dtoa_r+0x43c>
 800dd52:	4620      	mov	r0, r4
 800dd54:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd58:	3601      	adds	r6, #1
 800dd5a:	465c      	mov	r4, fp
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4b6b      	ldr	r3, [pc, #428]	@ (800df0c <_dtoa_r+0x58c>)
 800dd60:	4629      	mov	r1, r5
 800dd62:	f7f2 fc59 	bl	8000618 <__aeabi_dmul>
 800dd66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f7f2 fbea 	bl	8000544 <__aeabi_i2d>
 800dd70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd74:	f7f2 fc50 	bl	8000618 <__aeabi_dmul>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	4b65      	ldr	r3, [pc, #404]	@ (800df10 <_dtoa_r+0x590>)
 800dd7c:	f7f2 fa96 	bl	80002ac <__adddf3>
 800dd80:	4605      	mov	r5, r0
 800dd82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dd86:	2c00      	cmp	r4, #0
 800dd88:	d16a      	bne.n	800de60 <_dtoa_r+0x4e0>
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	4b61      	ldr	r3, [pc, #388]	@ (800df14 <_dtoa_r+0x594>)
 800dd8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd92:	f7f2 fa89 	bl	80002a8 <__aeabi_dsub>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd9e:	462a      	mov	r2, r5
 800dda0:	4633      	mov	r3, r6
 800dda2:	f7f2 fec9 	bl	8000b38 <__aeabi_dcmpgt>
 800dda6:	2800      	cmp	r0, #0
 800dda8:	f040 8298 	bne.w	800e2dc <_dtoa_r+0x95c>
 800ddac:	462a      	mov	r2, r5
 800ddae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ddb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddb6:	f7f2 fea1 	bl	8000afc <__aeabi_dcmplt>
 800ddba:	bb38      	cbnz	r0, 800de0c <_dtoa_r+0x48c>
 800ddbc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ddc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ddc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f2c0 8157 	blt.w	800e07a <_dtoa_r+0x6fa>
 800ddcc:	2f0e      	cmp	r7, #14
 800ddce:	f300 8154 	bgt.w	800e07a <_dtoa_r+0x6fa>
 800ddd2:	4b4b      	ldr	r3, [pc, #300]	@ (800df00 <_dtoa_r+0x580>)
 800ddd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddd8:	ed93 7b00 	vldr	d7, [r3]
 800dddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	ed8d 7b00 	vstr	d7, [sp]
 800dde4:	f280 80e5 	bge.w	800dfb2 <_dtoa_r+0x632>
 800dde8:	9b03      	ldr	r3, [sp, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f300 80e1 	bgt.w	800dfb2 <_dtoa_r+0x632>
 800ddf0:	d10c      	bne.n	800de0c <_dtoa_r+0x48c>
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4b47      	ldr	r3, [pc, #284]	@ (800df14 <_dtoa_r+0x594>)
 800ddf6:	ec51 0b17 	vmov	r0, r1, d7
 800ddfa:	f7f2 fc0d 	bl	8000618 <__aeabi_dmul>
 800ddfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de02:	f7f2 fe8f 	bl	8000b24 <__aeabi_dcmpge>
 800de06:	2800      	cmp	r0, #0
 800de08:	f000 8266 	beq.w	800e2d8 <_dtoa_r+0x958>
 800de0c:	2400      	movs	r4, #0
 800de0e:	4625      	mov	r5, r4
 800de10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de12:	4656      	mov	r6, sl
 800de14:	ea6f 0803 	mvn.w	r8, r3
 800de18:	2700      	movs	r7, #0
 800de1a:	4621      	mov	r1, r4
 800de1c:	4648      	mov	r0, r9
 800de1e:	f000 fc0b 	bl	800e638 <_Bfree>
 800de22:	2d00      	cmp	r5, #0
 800de24:	f000 80bd 	beq.w	800dfa2 <_dtoa_r+0x622>
 800de28:	b12f      	cbz	r7, 800de36 <_dtoa_r+0x4b6>
 800de2a:	42af      	cmp	r7, r5
 800de2c:	d003      	beq.n	800de36 <_dtoa_r+0x4b6>
 800de2e:	4639      	mov	r1, r7
 800de30:	4648      	mov	r0, r9
 800de32:	f000 fc01 	bl	800e638 <_Bfree>
 800de36:	4629      	mov	r1, r5
 800de38:	4648      	mov	r0, r9
 800de3a:	f000 fbfd 	bl	800e638 <_Bfree>
 800de3e:	e0b0      	b.n	800dfa2 <_dtoa_r+0x622>
 800de40:	07e2      	lsls	r2, r4, #31
 800de42:	d505      	bpl.n	800de50 <_dtoa_r+0x4d0>
 800de44:	3601      	adds	r6, #1
 800de46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de4a:	f7f2 fbe5 	bl	8000618 <__aeabi_dmul>
 800de4e:	2301      	movs	r3, #1
 800de50:	1064      	asrs	r4, r4, #1
 800de52:	3508      	adds	r5, #8
 800de54:	e762      	b.n	800dd1c <_dtoa_r+0x39c>
 800de56:	2602      	movs	r6, #2
 800de58:	e765      	b.n	800dd26 <_dtoa_r+0x3a6>
 800de5a:	46b8      	mov	r8, r7
 800de5c:	9c03      	ldr	r4, [sp, #12]
 800de5e:	e784      	b.n	800dd6a <_dtoa_r+0x3ea>
 800de60:	4b27      	ldr	r3, [pc, #156]	@ (800df00 <_dtoa_r+0x580>)
 800de62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de68:	4454      	add	r4, sl
 800de6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de6e:	2900      	cmp	r1, #0
 800de70:	d054      	beq.n	800df1c <_dtoa_r+0x59c>
 800de72:	2000      	movs	r0, #0
 800de74:	4928      	ldr	r1, [pc, #160]	@ (800df18 <_dtoa_r+0x598>)
 800de76:	f7f2 fcf9 	bl	800086c <__aeabi_ddiv>
 800de7a:	4633      	mov	r3, r6
 800de7c:	4656      	mov	r6, sl
 800de7e:	462a      	mov	r2, r5
 800de80:	f7f2 fa12 	bl	80002a8 <__aeabi_dsub>
 800de84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de8c:	f7f2 fe74 	bl	8000b78 <__aeabi_d2iz>
 800de90:	4605      	mov	r5, r0
 800de92:	f7f2 fb57 	bl	8000544 <__aeabi_i2d>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	3530      	adds	r5, #48	@ 0x30
 800de9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dea0:	f7f2 fa02 	bl	80002a8 <__aeabi_dsub>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	f806 5b01 	strb.w	r5, [r6], #1
 800deac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800deb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800deb4:	f7f2 fe22 	bl	8000afc <__aeabi_dcmplt>
 800deb8:	2800      	cmp	r0, #0
 800deba:	d172      	bne.n	800dfa2 <_dtoa_r+0x622>
 800debc:	2000      	movs	r0, #0
 800debe:	4912      	ldr	r1, [pc, #72]	@ (800df08 <_dtoa_r+0x588>)
 800dec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dec4:	f7f2 f9f0 	bl	80002a8 <__aeabi_dsub>
 800dec8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800decc:	f7f2 fe16 	bl	8000afc <__aeabi_dcmplt>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	f040 80b4 	bne.w	800e03e <_dtoa_r+0x6be>
 800ded6:	42a6      	cmp	r6, r4
 800ded8:	f43f af70 	beq.w	800ddbc <_dtoa_r+0x43c>
 800dedc:	2200      	movs	r2, #0
 800dede:	4b0b      	ldr	r3, [pc, #44]	@ (800df0c <_dtoa_r+0x58c>)
 800dee0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dee4:	f7f2 fb98 	bl	8000618 <__aeabi_dmul>
 800dee8:	2200      	movs	r2, #0
 800deea:	4b08      	ldr	r3, [pc, #32]	@ (800df0c <_dtoa_r+0x58c>)
 800deec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800def0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800def4:	f7f2 fb90 	bl	8000618 <__aeabi_dmul>
 800def8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800defc:	e7c4      	b.n	800de88 <_dtoa_r+0x508>
 800defe:	bf00      	nop
 800df00:	0801e818 	.word	0x0801e818
 800df04:	0801e7f0 	.word	0x0801e7f0
 800df08:	3ff00000 	.word	0x3ff00000
 800df0c:	40240000 	.word	0x40240000
 800df10:	401c0000 	.word	0x401c0000
 800df14:	40140000 	.word	0x40140000
 800df18:	3fe00000 	.word	0x3fe00000
 800df1c:	4631      	mov	r1, r6
 800df1e:	4656      	mov	r6, sl
 800df20:	4628      	mov	r0, r5
 800df22:	f7f2 fb79 	bl	8000618 <__aeabi_dmul>
 800df26:	9413      	str	r4, [sp, #76]	@ 0x4c
 800df28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800df2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df30:	f7f2 fe22 	bl	8000b78 <__aeabi_d2iz>
 800df34:	4605      	mov	r5, r0
 800df36:	f7f2 fb05 	bl	8000544 <__aeabi_i2d>
 800df3a:	4602      	mov	r2, r0
 800df3c:	3530      	adds	r5, #48	@ 0x30
 800df3e:	460b      	mov	r3, r1
 800df40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df44:	f7f2 f9b0 	bl	80002a8 <__aeabi_dsub>
 800df48:	f806 5b01 	strb.w	r5, [r6], #1
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	42a6      	cmp	r6, r4
 800df52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df56:	f04f 0200 	mov.w	r2, #0
 800df5a:	d124      	bne.n	800dfa6 <_dtoa_r+0x626>
 800df5c:	4baf      	ldr	r3, [pc, #700]	@ (800e21c <_dtoa_r+0x89c>)
 800df5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800df62:	f7f2 f9a3 	bl	80002ac <__adddf3>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df6e:	f7f2 fde3 	bl	8000b38 <__aeabi_dcmpgt>
 800df72:	2800      	cmp	r0, #0
 800df74:	d163      	bne.n	800e03e <_dtoa_r+0x6be>
 800df76:	2000      	movs	r0, #0
 800df78:	49a8      	ldr	r1, [pc, #672]	@ (800e21c <_dtoa_r+0x89c>)
 800df7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df7e:	f7f2 f993 	bl	80002a8 <__aeabi_dsub>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df8a:	f7f2 fdb7 	bl	8000afc <__aeabi_dcmplt>
 800df8e:	2800      	cmp	r0, #0
 800df90:	f43f af14 	beq.w	800ddbc <_dtoa_r+0x43c>
 800df94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800df96:	1e73      	subs	r3, r6, #1
 800df98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df9e:	2b30      	cmp	r3, #48	@ 0x30
 800dfa0:	d0f8      	beq.n	800df94 <_dtoa_r+0x614>
 800dfa2:	4647      	mov	r7, r8
 800dfa4:	e03b      	b.n	800e01e <_dtoa_r+0x69e>
 800dfa6:	4b9e      	ldr	r3, [pc, #632]	@ (800e220 <_dtoa_r+0x8a0>)
 800dfa8:	f7f2 fb36 	bl	8000618 <__aeabi_dmul>
 800dfac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfb0:	e7bc      	b.n	800df2c <_dtoa_r+0x5ac>
 800dfb2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dfb6:	4656      	mov	r6, sl
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4629      	mov	r1, r5
 800dfbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfc0:	f7f2 fc54 	bl	800086c <__aeabi_ddiv>
 800dfc4:	f7f2 fdd8 	bl	8000b78 <__aeabi_d2iz>
 800dfc8:	4680      	mov	r8, r0
 800dfca:	f7f2 fabb 	bl	8000544 <__aeabi_i2d>
 800dfce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfd2:	f7f2 fb21 	bl	8000618 <__aeabi_dmul>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f7f2 f961 	bl	80002a8 <__aeabi_dsub>
 800dfe6:	9d03      	ldr	r5, [sp, #12]
 800dfe8:	f806 4b01 	strb.w	r4, [r6], #1
 800dfec:	eba6 040a 	sub.w	r4, r6, sl
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	42a5      	cmp	r5, r4
 800dff6:	d133      	bne.n	800e060 <_dtoa_r+0x6e0>
 800dff8:	f7f2 f958 	bl	80002ac <__adddf3>
 800dffc:	4604      	mov	r4, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e004:	f7f2 fd98 	bl	8000b38 <__aeabi_dcmpgt>
 800e008:	b9c0      	cbnz	r0, 800e03c <_dtoa_r+0x6bc>
 800e00a:	4620      	mov	r0, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e012:	f7f2 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 800e016:	b110      	cbz	r0, 800e01e <_dtoa_r+0x69e>
 800e018:	f018 0f01 	tst.w	r8, #1
 800e01c:	d10e      	bne.n	800e03c <_dtoa_r+0x6bc>
 800e01e:	9902      	ldr	r1, [sp, #8]
 800e020:	4648      	mov	r0, r9
 800e022:	f000 fb09 	bl	800e638 <_Bfree>
 800e026:	2300      	movs	r3, #0
 800e028:	3701      	adds	r7, #1
 800e02a:	7033      	strb	r3, [r6, #0]
 800e02c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e02e:	601f      	str	r7, [r3, #0]
 800e030:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 824c 	beq.w	800e4d0 <_dtoa_r+0xb50>
 800e038:	601e      	str	r6, [r3, #0]
 800e03a:	e249      	b.n	800e4d0 <_dtoa_r+0xb50>
 800e03c:	46b8      	mov	r8, r7
 800e03e:	4633      	mov	r3, r6
 800e040:	461e      	mov	r6, r3
 800e042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e046:	2a39      	cmp	r2, #57	@ 0x39
 800e048:	d106      	bne.n	800e058 <_dtoa_r+0x6d8>
 800e04a:	459a      	cmp	sl, r3
 800e04c:	d1f8      	bne.n	800e040 <_dtoa_r+0x6c0>
 800e04e:	2230      	movs	r2, #48	@ 0x30
 800e050:	f108 0801 	add.w	r8, r8, #1
 800e054:	f88a 2000 	strb.w	r2, [sl]
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	3201      	adds	r2, #1
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	e7a0      	b.n	800dfa2 <_dtoa_r+0x622>
 800e060:	2200      	movs	r2, #0
 800e062:	4b6f      	ldr	r3, [pc, #444]	@ (800e220 <_dtoa_r+0x8a0>)
 800e064:	f7f2 fad8 	bl	8000618 <__aeabi_dmul>
 800e068:	2200      	movs	r2, #0
 800e06a:	2300      	movs	r3, #0
 800e06c:	4604      	mov	r4, r0
 800e06e:	460d      	mov	r5, r1
 800e070:	f7f2 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e074:	2800      	cmp	r0, #0
 800e076:	d09f      	beq.n	800dfb8 <_dtoa_r+0x638>
 800e078:	e7d1      	b.n	800e01e <_dtoa_r+0x69e>
 800e07a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e07c:	2a00      	cmp	r2, #0
 800e07e:	f000 80ea 	beq.w	800e256 <_dtoa_r+0x8d6>
 800e082:	9a07      	ldr	r2, [sp, #28]
 800e084:	2a01      	cmp	r2, #1
 800e086:	f300 80cd 	bgt.w	800e224 <_dtoa_r+0x8a4>
 800e08a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	f000 80c1 	beq.w	800e214 <_dtoa_r+0x894>
 800e092:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e096:	9c08      	ldr	r4, [sp, #32]
 800e098:	9e00      	ldr	r6, [sp, #0]
 800e09a:	9a00      	ldr	r2, [sp, #0]
 800e09c:	2101      	movs	r1, #1
 800e09e:	4648      	mov	r0, r9
 800e0a0:	441a      	add	r2, r3
 800e0a2:	9200      	str	r2, [sp, #0]
 800e0a4:	9a06      	ldr	r2, [sp, #24]
 800e0a6:	441a      	add	r2, r3
 800e0a8:	9206      	str	r2, [sp, #24]
 800e0aa:	f000 fb7b 	bl	800e7a4 <__i2b>
 800e0ae:	4605      	mov	r5, r0
 800e0b0:	b166      	cbz	r6, 800e0cc <_dtoa_r+0x74c>
 800e0b2:	9b06      	ldr	r3, [sp, #24]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dd09      	ble.n	800e0cc <_dtoa_r+0x74c>
 800e0b8:	42b3      	cmp	r3, r6
 800e0ba:	9a00      	ldr	r2, [sp, #0]
 800e0bc:	bfa8      	it	ge
 800e0be:	4633      	movge	r3, r6
 800e0c0:	1ad2      	subs	r2, r2, r3
 800e0c2:	1af6      	subs	r6, r6, r3
 800e0c4:	9200      	str	r2, [sp, #0]
 800e0c6:	9a06      	ldr	r2, [sp, #24]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	9306      	str	r3, [sp, #24]
 800e0cc:	9b08      	ldr	r3, [sp, #32]
 800e0ce:	b30b      	cbz	r3, 800e114 <_dtoa_r+0x794>
 800e0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 80c6 	beq.w	800e264 <_dtoa_r+0x8e4>
 800e0d8:	2c00      	cmp	r4, #0
 800e0da:	f000 80c0 	beq.w	800e25e <_dtoa_r+0x8de>
 800e0de:	4629      	mov	r1, r5
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	4648      	mov	r0, r9
 800e0e4:	f000 fc18 	bl	800e918 <__pow5mult>
 800e0e8:	9a02      	ldr	r2, [sp, #8]
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	4648      	mov	r0, r9
 800e0f0:	f000 fb6e 	bl	800e7d0 <__multiply>
 800e0f4:	9902      	ldr	r1, [sp, #8]
 800e0f6:	4680      	mov	r8, r0
 800e0f8:	4648      	mov	r0, r9
 800e0fa:	f000 fa9d 	bl	800e638 <_Bfree>
 800e0fe:	9b08      	ldr	r3, [sp, #32]
 800e100:	1b1b      	subs	r3, r3, r4
 800e102:	9308      	str	r3, [sp, #32]
 800e104:	f000 80b1 	beq.w	800e26a <_dtoa_r+0x8ea>
 800e108:	9a08      	ldr	r2, [sp, #32]
 800e10a:	4641      	mov	r1, r8
 800e10c:	4648      	mov	r0, r9
 800e10e:	f000 fc03 	bl	800e918 <__pow5mult>
 800e112:	9002      	str	r0, [sp, #8]
 800e114:	2101      	movs	r1, #1
 800e116:	4648      	mov	r0, r9
 800e118:	f000 fb44 	bl	800e7a4 <__i2b>
 800e11c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e11e:	4604      	mov	r4, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 81d9 	beq.w	800e4d8 <_dtoa_r+0xb58>
 800e126:	461a      	mov	r2, r3
 800e128:	4601      	mov	r1, r0
 800e12a:	4648      	mov	r0, r9
 800e12c:	f000 fbf4 	bl	800e918 <__pow5mult>
 800e130:	9b07      	ldr	r3, [sp, #28]
 800e132:	4604      	mov	r4, r0
 800e134:	2b01      	cmp	r3, #1
 800e136:	f300 809f 	bgt.w	800e278 <_dtoa_r+0x8f8>
 800e13a:	9b04      	ldr	r3, [sp, #16]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 8097 	bne.w	800e270 <_dtoa_r+0x8f0>
 800e142:	9b05      	ldr	r3, [sp, #20]
 800e144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f040 8093 	bne.w	800e274 <_dtoa_r+0x8f4>
 800e14e:	9b05      	ldr	r3, [sp, #20]
 800e150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e154:	0d1b      	lsrs	r3, r3, #20
 800e156:	051b      	lsls	r3, r3, #20
 800e158:	b133      	cbz	r3, 800e168 <_dtoa_r+0x7e8>
 800e15a:	9b00      	ldr	r3, [sp, #0]
 800e15c:	3301      	adds	r3, #1
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	9b06      	ldr	r3, [sp, #24]
 800e162:	3301      	adds	r3, #1
 800e164:	9306      	str	r3, [sp, #24]
 800e166:	2301      	movs	r3, #1
 800e168:	9308      	str	r3, [sp, #32]
 800e16a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 81b9 	beq.w	800e4e4 <_dtoa_r+0xb64>
 800e172:	6923      	ldr	r3, [r4, #16]
 800e174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e178:	6918      	ldr	r0, [r3, #16]
 800e17a:	f000 fac7 	bl	800e70c <__hi0bits>
 800e17e:	f1c0 0020 	rsb	r0, r0, #32
 800e182:	9b06      	ldr	r3, [sp, #24]
 800e184:	4418      	add	r0, r3
 800e186:	f010 001f 	ands.w	r0, r0, #31
 800e18a:	f000 8082 	beq.w	800e292 <_dtoa_r+0x912>
 800e18e:	f1c0 0320 	rsb	r3, r0, #32
 800e192:	2b04      	cmp	r3, #4
 800e194:	dd73      	ble.n	800e27e <_dtoa_r+0x8fe>
 800e196:	f1c0 001c 	rsb	r0, r0, #28
 800e19a:	9b00      	ldr	r3, [sp, #0]
 800e19c:	4403      	add	r3, r0
 800e19e:	4406      	add	r6, r0
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	9b06      	ldr	r3, [sp, #24]
 800e1a4:	4403      	add	r3, r0
 800e1a6:	9306      	str	r3, [sp, #24]
 800e1a8:	9b00      	ldr	r3, [sp, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	dd05      	ble.n	800e1ba <_dtoa_r+0x83a>
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	9902      	ldr	r1, [sp, #8]
 800e1b2:	4648      	mov	r0, r9
 800e1b4:	f000 fc0a 	bl	800e9cc <__lshift>
 800e1b8:	9002      	str	r0, [sp, #8]
 800e1ba:	9b06      	ldr	r3, [sp, #24]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dd05      	ble.n	800e1cc <_dtoa_r+0x84c>
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	4648      	mov	r0, r9
 800e1c6:	f000 fc01 	bl	800e9cc <__lshift>
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d061      	beq.n	800e296 <_dtoa_r+0x916>
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	9802      	ldr	r0, [sp, #8]
 800e1d6:	f000 fc65 	bl	800eaa4 <__mcmp>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	da5b      	bge.n	800e296 <_dtoa_r+0x916>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	220a      	movs	r2, #10
 800e1e2:	9902      	ldr	r1, [sp, #8]
 800e1e4:	4648      	mov	r0, r9
 800e1e6:	f000 fa49 	bl	800e67c <__multadd>
 800e1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ec:	f107 38ff 	add.w	r8, r7, #4294967295
 800e1f0:	9002      	str	r0, [sp, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f000 8178 	beq.w	800e4e8 <_dtoa_r+0xb68>
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	220a      	movs	r2, #10
 800e1fe:	4648      	mov	r0, r9
 800e200:	f000 fa3c 	bl	800e67c <__multadd>
 800e204:	f1bb 0f00 	cmp.w	fp, #0
 800e208:	4605      	mov	r5, r0
 800e20a:	dc6f      	bgt.n	800e2ec <_dtoa_r+0x96c>
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	2b02      	cmp	r3, #2
 800e210:	dc49      	bgt.n	800e2a6 <_dtoa_r+0x926>
 800e212:	e06b      	b.n	800e2ec <_dtoa_r+0x96c>
 800e214:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e21a:	e73c      	b.n	800e096 <_dtoa_r+0x716>
 800e21c:	3fe00000 	.word	0x3fe00000
 800e220:	40240000 	.word	0x40240000
 800e224:	9b03      	ldr	r3, [sp, #12]
 800e226:	1e5c      	subs	r4, r3, #1
 800e228:	9b08      	ldr	r3, [sp, #32]
 800e22a:	42a3      	cmp	r3, r4
 800e22c:	db09      	blt.n	800e242 <_dtoa_r+0x8c2>
 800e22e:	1b1c      	subs	r4, r3, r4
 800e230:	9b03      	ldr	r3, [sp, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	f6bf af30 	bge.w	800e098 <_dtoa_r+0x718>
 800e238:	9b00      	ldr	r3, [sp, #0]
 800e23a:	9a03      	ldr	r2, [sp, #12]
 800e23c:	1a9e      	subs	r6, r3, r2
 800e23e:	2300      	movs	r3, #0
 800e240:	e72b      	b.n	800e09a <_dtoa_r+0x71a>
 800e242:	9b08      	ldr	r3, [sp, #32]
 800e244:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e246:	1ae3      	subs	r3, r4, r3
 800e248:	9408      	str	r4, [sp, #32]
 800e24a:	9e00      	ldr	r6, [sp, #0]
 800e24c:	2400      	movs	r4, #0
 800e24e:	441a      	add	r2, r3
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	920d      	str	r2, [sp, #52]	@ 0x34
 800e254:	e721      	b.n	800e09a <_dtoa_r+0x71a>
 800e256:	9c08      	ldr	r4, [sp, #32]
 800e258:	9e00      	ldr	r6, [sp, #0]
 800e25a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e25c:	e728      	b.n	800e0b0 <_dtoa_r+0x730>
 800e25e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e262:	e751      	b.n	800e108 <_dtoa_r+0x788>
 800e264:	9a08      	ldr	r2, [sp, #32]
 800e266:	9902      	ldr	r1, [sp, #8]
 800e268:	e750      	b.n	800e10c <_dtoa_r+0x78c>
 800e26a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e26e:	e751      	b.n	800e114 <_dtoa_r+0x794>
 800e270:	2300      	movs	r3, #0
 800e272:	e779      	b.n	800e168 <_dtoa_r+0x7e8>
 800e274:	9b04      	ldr	r3, [sp, #16]
 800e276:	e777      	b.n	800e168 <_dtoa_r+0x7e8>
 800e278:	2300      	movs	r3, #0
 800e27a:	9308      	str	r3, [sp, #32]
 800e27c:	e779      	b.n	800e172 <_dtoa_r+0x7f2>
 800e27e:	d093      	beq.n	800e1a8 <_dtoa_r+0x828>
 800e280:	331c      	adds	r3, #28
 800e282:	9a00      	ldr	r2, [sp, #0]
 800e284:	441a      	add	r2, r3
 800e286:	441e      	add	r6, r3
 800e288:	9200      	str	r2, [sp, #0]
 800e28a:	9a06      	ldr	r2, [sp, #24]
 800e28c:	441a      	add	r2, r3
 800e28e:	9206      	str	r2, [sp, #24]
 800e290:	e78a      	b.n	800e1a8 <_dtoa_r+0x828>
 800e292:	4603      	mov	r3, r0
 800e294:	e7f4      	b.n	800e280 <_dtoa_r+0x900>
 800e296:	9b03      	ldr	r3, [sp, #12]
 800e298:	46b8      	mov	r8, r7
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	dc20      	bgt.n	800e2e0 <_dtoa_r+0x960>
 800e29e:	469b      	mov	fp, r3
 800e2a0:	9b07      	ldr	r3, [sp, #28]
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	dd1e      	ble.n	800e2e4 <_dtoa_r+0x964>
 800e2a6:	f1bb 0f00 	cmp.w	fp, #0
 800e2aa:	f47f adb1 	bne.w	800de10 <_dtoa_r+0x490>
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	465b      	mov	r3, fp
 800e2b2:	2205      	movs	r2, #5
 800e2b4:	4648      	mov	r0, r9
 800e2b6:	f000 f9e1 	bl	800e67c <__multadd>
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	4604      	mov	r4, r0
 800e2be:	9802      	ldr	r0, [sp, #8]
 800e2c0:	f000 fbf0 	bl	800eaa4 <__mcmp>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	f77f ada3 	ble.w	800de10 <_dtoa_r+0x490>
 800e2ca:	4656      	mov	r6, sl
 800e2cc:	2331      	movs	r3, #49	@ 0x31
 800e2ce:	f108 0801 	add.w	r8, r8, #1
 800e2d2:	f806 3b01 	strb.w	r3, [r6], #1
 800e2d6:	e59f      	b.n	800de18 <_dtoa_r+0x498>
 800e2d8:	46b8      	mov	r8, r7
 800e2da:	9c03      	ldr	r4, [sp, #12]
 800e2dc:	4625      	mov	r5, r4
 800e2de:	e7f4      	b.n	800e2ca <_dtoa_r+0x94a>
 800e2e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	f000 8102 	beq.w	800e4f0 <_dtoa_r+0xb70>
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	dd05      	ble.n	800e2fc <_dtoa_r+0x97c>
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	4648      	mov	r0, r9
 800e2f6:	f000 fb69 	bl	800e9cc <__lshift>
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	9b08      	ldr	r3, [sp, #32]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d05c      	beq.n	800e3bc <_dtoa_r+0xa3c>
 800e302:	6869      	ldr	r1, [r5, #4]
 800e304:	4648      	mov	r0, r9
 800e306:	f000 f957 	bl	800e5b8 <_Balloc>
 800e30a:	4606      	mov	r6, r0
 800e30c:	b928      	cbnz	r0, 800e31a <_dtoa_r+0x99a>
 800e30e:	4b83      	ldr	r3, [pc, #524]	@ (800e51c <_dtoa_r+0xb9c>)
 800e310:	4602      	mov	r2, r0
 800e312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e316:	f7ff bb4a 	b.w	800d9ae <_dtoa_r+0x2e>
 800e31a:	692a      	ldr	r2, [r5, #16]
 800e31c:	f105 010c 	add.w	r1, r5, #12
 800e320:	300c      	adds	r0, #12
 800e322:	3202      	adds	r2, #2
 800e324:	0092      	lsls	r2, r2, #2
 800e326:	f7ff fa8e 	bl	800d846 <memcpy>
 800e32a:	2201      	movs	r2, #1
 800e32c:	4631      	mov	r1, r6
 800e32e:	4648      	mov	r0, r9
 800e330:	f000 fb4c 	bl	800e9cc <__lshift>
 800e334:	f10a 0301 	add.w	r3, sl, #1
 800e338:	462f      	mov	r7, r5
 800e33a:	4605      	mov	r5, r0
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	eb0a 030b 	add.w	r3, sl, fp
 800e342:	9308      	str	r3, [sp, #32]
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	f003 0301 	and.w	r3, r3, #1
 800e34a:	9306      	str	r3, [sp, #24]
 800e34c:	9b00      	ldr	r3, [sp, #0]
 800e34e:	4621      	mov	r1, r4
 800e350:	9802      	ldr	r0, [sp, #8]
 800e352:	f103 3bff 	add.w	fp, r3, #4294967295
 800e356:	f7ff fa83 	bl	800d860 <quorem>
 800e35a:	4603      	mov	r3, r0
 800e35c:	4639      	mov	r1, r7
 800e35e:	9003      	str	r0, [sp, #12]
 800e360:	3330      	adds	r3, #48	@ 0x30
 800e362:	9802      	ldr	r0, [sp, #8]
 800e364:	9309      	str	r3, [sp, #36]	@ 0x24
 800e366:	f000 fb9d 	bl	800eaa4 <__mcmp>
 800e36a:	462a      	mov	r2, r5
 800e36c:	9004      	str	r0, [sp, #16]
 800e36e:	4621      	mov	r1, r4
 800e370:	4648      	mov	r0, r9
 800e372:	f000 fbb3 	bl	800eadc <__mdiff>
 800e376:	68c2      	ldr	r2, [r0, #12]
 800e378:	4606      	mov	r6, r0
 800e37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37c:	bb02      	cbnz	r2, 800e3c0 <_dtoa_r+0xa40>
 800e37e:	4601      	mov	r1, r0
 800e380:	9802      	ldr	r0, [sp, #8]
 800e382:	f000 fb8f 	bl	800eaa4 <__mcmp>
 800e386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e388:	4602      	mov	r2, r0
 800e38a:	4631      	mov	r1, r6
 800e38c:	4648      	mov	r0, r9
 800e38e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e390:	9309      	str	r3, [sp, #36]	@ 0x24
 800e392:	f000 f951 	bl	800e638 <_Bfree>
 800e396:	9b07      	ldr	r3, [sp, #28]
 800e398:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e39a:	9e00      	ldr	r6, [sp, #0]
 800e39c:	ea42 0103 	orr.w	r1, r2, r3
 800e3a0:	9b06      	ldr	r3, [sp, #24]
 800e3a2:	4319      	orrs	r1, r3
 800e3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a6:	d10d      	bne.n	800e3c4 <_dtoa_r+0xa44>
 800e3a8:	2b39      	cmp	r3, #57	@ 0x39
 800e3aa:	d027      	beq.n	800e3fc <_dtoa_r+0xa7c>
 800e3ac:	9a04      	ldr	r2, [sp, #16]
 800e3ae:	2a00      	cmp	r2, #0
 800e3b0:	dd01      	ble.n	800e3b6 <_dtoa_r+0xa36>
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	3331      	adds	r3, #49	@ 0x31
 800e3b6:	f88b 3000 	strb.w	r3, [fp]
 800e3ba:	e52e      	b.n	800de1a <_dtoa_r+0x49a>
 800e3bc:	4628      	mov	r0, r5
 800e3be:	e7b9      	b.n	800e334 <_dtoa_r+0x9b4>
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	e7e2      	b.n	800e38a <_dtoa_r+0xa0a>
 800e3c4:	9904      	ldr	r1, [sp, #16]
 800e3c6:	2900      	cmp	r1, #0
 800e3c8:	db04      	blt.n	800e3d4 <_dtoa_r+0xa54>
 800e3ca:	9807      	ldr	r0, [sp, #28]
 800e3cc:	4301      	orrs	r1, r0
 800e3ce:	9806      	ldr	r0, [sp, #24]
 800e3d0:	4301      	orrs	r1, r0
 800e3d2:	d120      	bne.n	800e416 <_dtoa_r+0xa96>
 800e3d4:	2a00      	cmp	r2, #0
 800e3d6:	ddee      	ble.n	800e3b6 <_dtoa_r+0xa36>
 800e3d8:	2201      	movs	r2, #1
 800e3da:	9902      	ldr	r1, [sp, #8]
 800e3dc:	4648      	mov	r0, r9
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	f000 faf4 	bl	800e9cc <__lshift>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	9002      	str	r0, [sp, #8]
 800e3e8:	f000 fb5c 	bl	800eaa4 <__mcmp>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	9b00      	ldr	r3, [sp, #0]
 800e3f0:	dc02      	bgt.n	800e3f8 <_dtoa_r+0xa78>
 800e3f2:	d1e0      	bne.n	800e3b6 <_dtoa_r+0xa36>
 800e3f4:	07da      	lsls	r2, r3, #31
 800e3f6:	d5de      	bpl.n	800e3b6 <_dtoa_r+0xa36>
 800e3f8:	2b39      	cmp	r3, #57	@ 0x39
 800e3fa:	d1da      	bne.n	800e3b2 <_dtoa_r+0xa32>
 800e3fc:	2339      	movs	r3, #57	@ 0x39
 800e3fe:	f88b 3000 	strb.w	r3, [fp]
 800e402:	4633      	mov	r3, r6
 800e404:	461e      	mov	r6, r3
 800e406:	3b01      	subs	r3, #1
 800e408:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e40c:	2a39      	cmp	r2, #57	@ 0x39
 800e40e:	d04f      	beq.n	800e4b0 <_dtoa_r+0xb30>
 800e410:	3201      	adds	r2, #1
 800e412:	701a      	strb	r2, [r3, #0]
 800e414:	e501      	b.n	800de1a <_dtoa_r+0x49a>
 800e416:	2a00      	cmp	r2, #0
 800e418:	dd03      	ble.n	800e422 <_dtoa_r+0xaa2>
 800e41a:	2b39      	cmp	r3, #57	@ 0x39
 800e41c:	d0ee      	beq.n	800e3fc <_dtoa_r+0xa7c>
 800e41e:	3301      	adds	r3, #1
 800e420:	e7c9      	b.n	800e3b6 <_dtoa_r+0xa36>
 800e422:	9a00      	ldr	r2, [sp, #0]
 800e424:	9908      	ldr	r1, [sp, #32]
 800e426:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e42a:	428a      	cmp	r2, r1
 800e42c:	d029      	beq.n	800e482 <_dtoa_r+0xb02>
 800e42e:	2300      	movs	r3, #0
 800e430:	220a      	movs	r2, #10
 800e432:	9902      	ldr	r1, [sp, #8]
 800e434:	4648      	mov	r0, r9
 800e436:	f000 f921 	bl	800e67c <__multadd>
 800e43a:	42af      	cmp	r7, r5
 800e43c:	9002      	str	r0, [sp, #8]
 800e43e:	f04f 0300 	mov.w	r3, #0
 800e442:	f04f 020a 	mov.w	r2, #10
 800e446:	4639      	mov	r1, r7
 800e448:	4648      	mov	r0, r9
 800e44a:	d107      	bne.n	800e45c <_dtoa_r+0xadc>
 800e44c:	f000 f916 	bl	800e67c <__multadd>
 800e450:	4607      	mov	r7, r0
 800e452:	4605      	mov	r5, r0
 800e454:	9b00      	ldr	r3, [sp, #0]
 800e456:	3301      	adds	r3, #1
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	e777      	b.n	800e34c <_dtoa_r+0x9cc>
 800e45c:	f000 f90e 	bl	800e67c <__multadd>
 800e460:	4629      	mov	r1, r5
 800e462:	4607      	mov	r7, r0
 800e464:	2300      	movs	r3, #0
 800e466:	220a      	movs	r2, #10
 800e468:	4648      	mov	r0, r9
 800e46a:	f000 f907 	bl	800e67c <__multadd>
 800e46e:	4605      	mov	r5, r0
 800e470:	e7f0      	b.n	800e454 <_dtoa_r+0xad4>
 800e472:	f1bb 0f00 	cmp.w	fp, #0
 800e476:	f04f 0700 	mov.w	r7, #0
 800e47a:	bfcc      	ite	gt
 800e47c:	465e      	movgt	r6, fp
 800e47e:	2601      	movle	r6, #1
 800e480:	4456      	add	r6, sl
 800e482:	2201      	movs	r2, #1
 800e484:	9902      	ldr	r1, [sp, #8]
 800e486:	4648      	mov	r0, r9
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	f000 fa9f 	bl	800e9cc <__lshift>
 800e48e:	4621      	mov	r1, r4
 800e490:	9002      	str	r0, [sp, #8]
 800e492:	f000 fb07 	bl	800eaa4 <__mcmp>
 800e496:	2800      	cmp	r0, #0
 800e498:	dcb3      	bgt.n	800e402 <_dtoa_r+0xa82>
 800e49a:	d102      	bne.n	800e4a2 <_dtoa_r+0xb22>
 800e49c:	9b00      	ldr	r3, [sp, #0]
 800e49e:	07db      	lsls	r3, r3, #31
 800e4a0:	d4af      	bmi.n	800e402 <_dtoa_r+0xa82>
 800e4a2:	4633      	mov	r3, r6
 800e4a4:	461e      	mov	r6, r3
 800e4a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4aa:	2a30      	cmp	r2, #48	@ 0x30
 800e4ac:	d0fa      	beq.n	800e4a4 <_dtoa_r+0xb24>
 800e4ae:	e4b4      	b.n	800de1a <_dtoa_r+0x49a>
 800e4b0:	459a      	cmp	sl, r3
 800e4b2:	d1a7      	bne.n	800e404 <_dtoa_r+0xa84>
 800e4b4:	2331      	movs	r3, #49	@ 0x31
 800e4b6:	f108 0801 	add.w	r8, r8, #1
 800e4ba:	f88a 3000 	strb.w	r3, [sl]
 800e4be:	e4ac      	b.n	800de1a <_dtoa_r+0x49a>
 800e4c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e4c2:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e520 <_dtoa_r+0xba0>
 800e4c6:	b11b      	cbz	r3, 800e4d0 <_dtoa_r+0xb50>
 800e4c8:	f10a 0308 	add.w	r3, sl, #8
 800e4cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e4ce:	6013      	str	r3, [r2, #0]
 800e4d0:	4650      	mov	r0, sl
 800e4d2:	b017      	add	sp, #92	@ 0x5c
 800e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d8:	9b07      	ldr	r3, [sp, #28]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	f77f ae2d 	ble.w	800e13a <_dtoa_r+0x7ba>
 800e4e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4e2:	9308      	str	r3, [sp, #32]
 800e4e4:	2001      	movs	r0, #1
 800e4e6:	e64c      	b.n	800e182 <_dtoa_r+0x802>
 800e4e8:	f1bb 0f00 	cmp.w	fp, #0
 800e4ec:	f77f aed8 	ble.w	800e2a0 <_dtoa_r+0x920>
 800e4f0:	4656      	mov	r6, sl
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	9802      	ldr	r0, [sp, #8]
 800e4f6:	f7ff f9b3 	bl	800d860 <quorem>
 800e4fa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e4fe:	f806 3b01 	strb.w	r3, [r6], #1
 800e502:	eba6 020a 	sub.w	r2, r6, sl
 800e506:	4593      	cmp	fp, r2
 800e508:	ddb3      	ble.n	800e472 <_dtoa_r+0xaf2>
 800e50a:	2300      	movs	r3, #0
 800e50c:	220a      	movs	r2, #10
 800e50e:	9902      	ldr	r1, [sp, #8]
 800e510:	4648      	mov	r0, r9
 800e512:	f000 f8b3 	bl	800e67c <__multadd>
 800e516:	9002      	str	r0, [sp, #8]
 800e518:	e7eb      	b.n	800e4f2 <_dtoa_r+0xb72>
 800e51a:	bf00      	nop
 800e51c:	0801e720 	.word	0x0801e720
 800e520:	0801e6a4 	.word	0x0801e6a4

0800e524 <_free_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4605      	mov	r5, r0
 800e528:	2900      	cmp	r1, #0
 800e52a:	d041      	beq.n	800e5b0 <_free_r+0x8c>
 800e52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e530:	1f0c      	subs	r4, r1, #4
 800e532:	2b00      	cmp	r3, #0
 800e534:	bfb8      	it	lt
 800e536:	18e4      	addlt	r4, r4, r3
 800e538:	f7fe faa2 	bl	800ca80 <__malloc_lock>
 800e53c:	4a1d      	ldr	r2, [pc, #116]	@ (800e5b4 <_free_r+0x90>)
 800e53e:	6813      	ldr	r3, [r2, #0]
 800e540:	b933      	cbnz	r3, 800e550 <_free_r+0x2c>
 800e542:	6063      	str	r3, [r4, #4]
 800e544:	6014      	str	r4, [r2, #0]
 800e546:	4628      	mov	r0, r5
 800e548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e54c:	f7fe ba9e 	b.w	800ca8c <__malloc_unlock>
 800e550:	42a3      	cmp	r3, r4
 800e552:	d908      	bls.n	800e566 <_free_r+0x42>
 800e554:	6820      	ldr	r0, [r4, #0]
 800e556:	1821      	adds	r1, r4, r0
 800e558:	428b      	cmp	r3, r1
 800e55a:	bf01      	itttt	eq
 800e55c:	6819      	ldreq	r1, [r3, #0]
 800e55e:	685b      	ldreq	r3, [r3, #4]
 800e560:	1809      	addeq	r1, r1, r0
 800e562:	6021      	streq	r1, [r4, #0]
 800e564:	e7ed      	b.n	800e542 <_free_r+0x1e>
 800e566:	461a      	mov	r2, r3
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	b10b      	cbz	r3, 800e570 <_free_r+0x4c>
 800e56c:	42a3      	cmp	r3, r4
 800e56e:	d9fa      	bls.n	800e566 <_free_r+0x42>
 800e570:	6811      	ldr	r1, [r2, #0]
 800e572:	1850      	adds	r0, r2, r1
 800e574:	42a0      	cmp	r0, r4
 800e576:	d10b      	bne.n	800e590 <_free_r+0x6c>
 800e578:	6820      	ldr	r0, [r4, #0]
 800e57a:	4401      	add	r1, r0
 800e57c:	1850      	adds	r0, r2, r1
 800e57e:	6011      	str	r1, [r2, #0]
 800e580:	4283      	cmp	r3, r0
 800e582:	d1e0      	bne.n	800e546 <_free_r+0x22>
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	4408      	add	r0, r1
 800e58a:	6053      	str	r3, [r2, #4]
 800e58c:	6010      	str	r0, [r2, #0]
 800e58e:	e7da      	b.n	800e546 <_free_r+0x22>
 800e590:	d902      	bls.n	800e598 <_free_r+0x74>
 800e592:	230c      	movs	r3, #12
 800e594:	602b      	str	r3, [r5, #0]
 800e596:	e7d6      	b.n	800e546 <_free_r+0x22>
 800e598:	6820      	ldr	r0, [r4, #0]
 800e59a:	1821      	adds	r1, r4, r0
 800e59c:	428b      	cmp	r3, r1
 800e59e:	bf02      	ittt	eq
 800e5a0:	6819      	ldreq	r1, [r3, #0]
 800e5a2:	685b      	ldreq	r3, [r3, #4]
 800e5a4:	1809      	addeq	r1, r1, r0
 800e5a6:	6063      	str	r3, [r4, #4]
 800e5a8:	bf08      	it	eq
 800e5aa:	6021      	streq	r1, [r4, #0]
 800e5ac:	6054      	str	r4, [r2, #4]
 800e5ae:	e7ca      	b.n	800e546 <_free_r+0x22>
 800e5b0:	bd38      	pop	{r3, r4, r5, pc}
 800e5b2:	bf00      	nop
 800e5b4:	2007afc4 	.word	0x2007afc4

0800e5b8 <_Balloc>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	69c6      	ldr	r6, [r0, #28]
 800e5bc:	4604      	mov	r4, r0
 800e5be:	460d      	mov	r5, r1
 800e5c0:	b976      	cbnz	r6, 800e5e0 <_Balloc+0x28>
 800e5c2:	2010      	movs	r0, #16
 800e5c4:	f7fe f9b2 	bl	800c92c <malloc>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	61e0      	str	r0, [r4, #28]
 800e5cc:	b920      	cbnz	r0, 800e5d8 <_Balloc+0x20>
 800e5ce:	4b18      	ldr	r3, [pc, #96]	@ (800e630 <_Balloc+0x78>)
 800e5d0:	216b      	movs	r1, #107	@ 0x6b
 800e5d2:	4818      	ldr	r0, [pc, #96]	@ (800e634 <_Balloc+0x7c>)
 800e5d4:	f000 fd7e 	bl	800f0d4 <__assert_func>
 800e5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5dc:	6006      	str	r6, [r0, #0]
 800e5de:	60c6      	str	r6, [r0, #12]
 800e5e0:	69e6      	ldr	r6, [r4, #28]
 800e5e2:	68f3      	ldr	r3, [r6, #12]
 800e5e4:	b183      	cbz	r3, 800e608 <_Balloc+0x50>
 800e5e6:	69e3      	ldr	r3, [r4, #28]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5ee:	b9b8      	cbnz	r0, 800e620 <_Balloc+0x68>
 800e5f0:	2101      	movs	r1, #1
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	fa01 f605 	lsl.w	r6, r1, r5
 800e5f8:	1d72      	adds	r2, r6, #5
 800e5fa:	0092      	lsls	r2, r2, #2
 800e5fc:	f000 fd88 	bl	800f110 <_calloc_r>
 800e600:	b160      	cbz	r0, 800e61c <_Balloc+0x64>
 800e602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e606:	e00e      	b.n	800e626 <_Balloc+0x6e>
 800e608:	2221      	movs	r2, #33	@ 0x21
 800e60a:	2104      	movs	r1, #4
 800e60c:	4620      	mov	r0, r4
 800e60e:	f000 fd7f 	bl	800f110 <_calloc_r>
 800e612:	69e3      	ldr	r3, [r4, #28]
 800e614:	60f0      	str	r0, [r6, #12]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1e4      	bne.n	800e5e6 <_Balloc+0x2e>
 800e61c:	2000      	movs	r0, #0
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
 800e620:	6802      	ldr	r2, [r0, #0]
 800e622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e626:	2300      	movs	r3, #0
 800e628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e62c:	e7f7      	b.n	800e61e <_Balloc+0x66>
 800e62e:	bf00      	nop
 800e630:	0801e6b1 	.word	0x0801e6b1
 800e634:	0801e731 	.word	0x0801e731

0800e638 <_Bfree>:
 800e638:	b570      	push	{r4, r5, r6, lr}
 800e63a:	69c6      	ldr	r6, [r0, #28]
 800e63c:	4605      	mov	r5, r0
 800e63e:	460c      	mov	r4, r1
 800e640:	b976      	cbnz	r6, 800e660 <_Bfree+0x28>
 800e642:	2010      	movs	r0, #16
 800e644:	f7fe f972 	bl	800c92c <malloc>
 800e648:	4602      	mov	r2, r0
 800e64a:	61e8      	str	r0, [r5, #28]
 800e64c:	b920      	cbnz	r0, 800e658 <_Bfree+0x20>
 800e64e:	4b09      	ldr	r3, [pc, #36]	@ (800e674 <_Bfree+0x3c>)
 800e650:	218f      	movs	r1, #143	@ 0x8f
 800e652:	4809      	ldr	r0, [pc, #36]	@ (800e678 <_Bfree+0x40>)
 800e654:	f000 fd3e 	bl	800f0d4 <__assert_func>
 800e658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e65c:	6006      	str	r6, [r0, #0]
 800e65e:	60c6      	str	r6, [r0, #12]
 800e660:	b13c      	cbz	r4, 800e672 <_Bfree+0x3a>
 800e662:	69eb      	ldr	r3, [r5, #28]
 800e664:	6862      	ldr	r2, [r4, #4]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e66c:	6021      	str	r1, [r4, #0]
 800e66e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e672:	bd70      	pop	{r4, r5, r6, pc}
 800e674:	0801e6b1 	.word	0x0801e6b1
 800e678:	0801e731 	.word	0x0801e731

0800e67c <__multadd>:
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	f101 0c14 	add.w	ip, r1, #20
 800e684:	4607      	mov	r7, r0
 800e686:	460c      	mov	r4, r1
 800e688:	461e      	mov	r6, r3
 800e68a:	690d      	ldr	r5, [r1, #16]
 800e68c:	2000      	movs	r0, #0
 800e68e:	f8dc 3000 	ldr.w	r3, [ip]
 800e692:	3001      	adds	r0, #1
 800e694:	b299      	uxth	r1, r3
 800e696:	4285      	cmp	r5, r0
 800e698:	fb02 6101 	mla	r1, r2, r1, r6
 800e69c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e6a0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e6a4:	b289      	uxth	r1, r1
 800e6a6:	fb02 3306 	mla	r3, r2, r6, r3
 800e6aa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e6ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e6b2:	f84c 1b04 	str.w	r1, [ip], #4
 800e6b6:	dcea      	bgt.n	800e68e <__multadd+0x12>
 800e6b8:	b30e      	cbz	r6, 800e6fe <__multadd+0x82>
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	42ab      	cmp	r3, r5
 800e6be:	dc19      	bgt.n	800e6f4 <__multadd+0x78>
 800e6c0:	6861      	ldr	r1, [r4, #4]
 800e6c2:	4638      	mov	r0, r7
 800e6c4:	3101      	adds	r1, #1
 800e6c6:	f7ff ff77 	bl	800e5b8 <_Balloc>
 800e6ca:	4680      	mov	r8, r0
 800e6cc:	b928      	cbnz	r0, 800e6da <__multadd+0x5e>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e704 <__multadd+0x88>)
 800e6d2:	21ba      	movs	r1, #186	@ 0xba
 800e6d4:	480c      	ldr	r0, [pc, #48]	@ (800e708 <__multadd+0x8c>)
 800e6d6:	f000 fcfd 	bl	800f0d4 <__assert_func>
 800e6da:	6922      	ldr	r2, [r4, #16]
 800e6dc:	f104 010c 	add.w	r1, r4, #12
 800e6e0:	300c      	adds	r0, #12
 800e6e2:	3202      	adds	r2, #2
 800e6e4:	0092      	lsls	r2, r2, #2
 800e6e6:	f7ff f8ae 	bl	800d846 <memcpy>
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4644      	mov	r4, r8
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	f7ff ffa2 	bl	800e638 <_Bfree>
 800e6f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	615e      	str	r6, [r3, #20]
 800e6fc:	6125      	str	r5, [r4, #16]
 800e6fe:	4620      	mov	r0, r4
 800e700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e704:	0801e720 	.word	0x0801e720
 800e708:	0801e731 	.word	0x0801e731

0800e70c <__hi0bits>:
 800e70c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e710:	4603      	mov	r3, r0
 800e712:	bf36      	itet	cc
 800e714:	0403      	lslcc	r3, r0, #16
 800e716:	2000      	movcs	r0, #0
 800e718:	2010      	movcc	r0, #16
 800e71a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e71e:	bf3c      	itt	cc
 800e720:	021b      	lslcc	r3, r3, #8
 800e722:	3008      	addcc	r0, #8
 800e724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e728:	bf3c      	itt	cc
 800e72a:	011b      	lslcc	r3, r3, #4
 800e72c:	3004      	addcc	r0, #4
 800e72e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e732:	bf3c      	itt	cc
 800e734:	009b      	lslcc	r3, r3, #2
 800e736:	3002      	addcc	r0, #2
 800e738:	2b00      	cmp	r3, #0
 800e73a:	db05      	blt.n	800e748 <__hi0bits+0x3c>
 800e73c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e740:	f100 0001 	add.w	r0, r0, #1
 800e744:	bf08      	it	eq
 800e746:	2020      	moveq	r0, #32
 800e748:	4770      	bx	lr

0800e74a <__lo0bits>:
 800e74a:	6803      	ldr	r3, [r0, #0]
 800e74c:	4602      	mov	r2, r0
 800e74e:	f013 0007 	ands.w	r0, r3, #7
 800e752:	d00b      	beq.n	800e76c <__lo0bits+0x22>
 800e754:	07d9      	lsls	r1, r3, #31
 800e756:	d421      	bmi.n	800e79c <__lo0bits+0x52>
 800e758:	0798      	lsls	r0, r3, #30
 800e75a:	bf47      	ittee	mi
 800e75c:	085b      	lsrmi	r3, r3, #1
 800e75e:	2001      	movmi	r0, #1
 800e760:	089b      	lsrpl	r3, r3, #2
 800e762:	2002      	movpl	r0, #2
 800e764:	bf4c      	ite	mi
 800e766:	6013      	strmi	r3, [r2, #0]
 800e768:	6013      	strpl	r3, [r2, #0]
 800e76a:	4770      	bx	lr
 800e76c:	b299      	uxth	r1, r3
 800e76e:	b909      	cbnz	r1, 800e774 <__lo0bits+0x2a>
 800e770:	0c1b      	lsrs	r3, r3, #16
 800e772:	2010      	movs	r0, #16
 800e774:	b2d9      	uxtb	r1, r3
 800e776:	b909      	cbnz	r1, 800e77c <__lo0bits+0x32>
 800e778:	3008      	adds	r0, #8
 800e77a:	0a1b      	lsrs	r3, r3, #8
 800e77c:	0719      	lsls	r1, r3, #28
 800e77e:	bf04      	itt	eq
 800e780:	091b      	lsreq	r3, r3, #4
 800e782:	3004      	addeq	r0, #4
 800e784:	0799      	lsls	r1, r3, #30
 800e786:	bf04      	itt	eq
 800e788:	089b      	lsreq	r3, r3, #2
 800e78a:	3002      	addeq	r0, #2
 800e78c:	07d9      	lsls	r1, r3, #31
 800e78e:	d403      	bmi.n	800e798 <__lo0bits+0x4e>
 800e790:	085b      	lsrs	r3, r3, #1
 800e792:	f100 0001 	add.w	r0, r0, #1
 800e796:	d003      	beq.n	800e7a0 <__lo0bits+0x56>
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	4770      	bx	lr
 800e79c:	2000      	movs	r0, #0
 800e79e:	4770      	bx	lr
 800e7a0:	2020      	movs	r0, #32
 800e7a2:	4770      	bx	lr

0800e7a4 <__i2b>:
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	2101      	movs	r1, #1
 800e7aa:	f7ff ff05 	bl	800e5b8 <_Balloc>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	b928      	cbnz	r0, 800e7be <__i2b+0x1a>
 800e7b2:	4b05      	ldr	r3, [pc, #20]	@ (800e7c8 <__i2b+0x24>)
 800e7b4:	f240 1145 	movw	r1, #325	@ 0x145
 800e7b8:	4804      	ldr	r0, [pc, #16]	@ (800e7cc <__i2b+0x28>)
 800e7ba:	f000 fc8b 	bl	800f0d4 <__assert_func>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	6144      	str	r4, [r0, #20]
 800e7c2:	6103      	str	r3, [r0, #16]
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0801e720 	.word	0x0801e720
 800e7cc:	0801e731 	.word	0x0801e731

0800e7d0 <__multiply>:
 800e7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d4:	4617      	mov	r7, r2
 800e7d6:	690a      	ldr	r2, [r1, #16]
 800e7d8:	4689      	mov	r9, r1
 800e7da:	b085      	sub	sp, #20
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	bfa2      	ittt	ge
 800e7e2:	463b      	movge	r3, r7
 800e7e4:	460f      	movge	r7, r1
 800e7e6:	4699      	movge	r9, r3
 800e7e8:	693d      	ldr	r5, [r7, #16]
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e7f0:	6879      	ldr	r1, [r7, #4]
 800e7f2:	eb05 060a 	add.w	r6, r5, sl
 800e7f6:	42b3      	cmp	r3, r6
 800e7f8:	bfb8      	it	lt
 800e7fa:	3101      	addlt	r1, #1
 800e7fc:	f7ff fedc 	bl	800e5b8 <_Balloc>
 800e800:	b930      	cbnz	r0, 800e810 <__multiply+0x40>
 800e802:	4602      	mov	r2, r0
 800e804:	4b42      	ldr	r3, [pc, #264]	@ (800e910 <__multiply+0x140>)
 800e806:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e80a:	4842      	ldr	r0, [pc, #264]	@ (800e914 <__multiply+0x144>)
 800e80c:	f000 fc62 	bl	800f0d4 <__assert_func>
 800e810:	f100 0414 	add.w	r4, r0, #20
 800e814:	2200      	movs	r2, #0
 800e816:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e81a:	4623      	mov	r3, r4
 800e81c:	4573      	cmp	r3, lr
 800e81e:	d320      	bcc.n	800e862 <__multiply+0x92>
 800e820:	f107 0814 	add.w	r8, r7, #20
 800e824:	f109 0114 	add.w	r1, r9, #20
 800e828:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e82c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e830:	9302      	str	r3, [sp, #8]
 800e832:	1beb      	subs	r3, r5, r7
 800e834:	3715      	adds	r7, #21
 800e836:	3b15      	subs	r3, #21
 800e838:	f023 0303 	bic.w	r3, r3, #3
 800e83c:	3304      	adds	r3, #4
 800e83e:	42bd      	cmp	r5, r7
 800e840:	bf38      	it	cc
 800e842:	2304      	movcc	r3, #4
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	9b02      	ldr	r3, [sp, #8]
 800e848:	9103      	str	r1, [sp, #12]
 800e84a:	428b      	cmp	r3, r1
 800e84c:	d80c      	bhi.n	800e868 <__multiply+0x98>
 800e84e:	2e00      	cmp	r6, #0
 800e850:	dd03      	ble.n	800e85a <__multiply+0x8a>
 800e852:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e856:	2b00      	cmp	r3, #0
 800e858:	d057      	beq.n	800e90a <__multiply+0x13a>
 800e85a:	6106      	str	r6, [r0, #16]
 800e85c:	b005      	add	sp, #20
 800e85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e862:	f843 2b04 	str.w	r2, [r3], #4
 800e866:	e7d9      	b.n	800e81c <__multiply+0x4c>
 800e868:	f8b1 a000 	ldrh.w	sl, [r1]
 800e86c:	f1ba 0f00 	cmp.w	sl, #0
 800e870:	d021      	beq.n	800e8b6 <__multiply+0xe6>
 800e872:	46c4      	mov	ip, r8
 800e874:	46a1      	mov	r9, r4
 800e876:	2700      	movs	r7, #0
 800e878:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e87c:	f8d9 3000 	ldr.w	r3, [r9]
 800e880:	fa1f fb82 	uxth.w	fp, r2
 800e884:	4565      	cmp	r5, ip
 800e886:	b29b      	uxth	r3, r3
 800e888:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e88c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e890:	443b      	add	r3, r7
 800e892:	f8d9 7000 	ldr.w	r7, [r9]
 800e896:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800e89a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e89e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e8a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ac:	f849 3b04 	str.w	r3, [r9], #4
 800e8b0:	d8e2      	bhi.n	800e878 <__multiply+0xa8>
 800e8b2:	9b01      	ldr	r3, [sp, #4]
 800e8b4:	50e7      	str	r7, [r4, r3]
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	3104      	adds	r1, #4
 800e8ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e8be:	f1b9 0f00 	cmp.w	r9, #0
 800e8c2:	d020      	beq.n	800e906 <__multiply+0x136>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	4647      	mov	r7, r8
 800e8c8:	46a4      	mov	ip, r4
 800e8ca:	f04f 0a00 	mov.w	sl, #0
 800e8ce:	f8b7 b000 	ldrh.w	fp, [r7]
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e8d8:	fb09 220b 	mla	r2, r9, fp, r2
 800e8dc:	4452      	add	r2, sl
 800e8de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8e2:	f84c 3b04 	str.w	r3, [ip], #4
 800e8e6:	f857 3b04 	ldr.w	r3, [r7], #4
 800e8ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8ee:	f8bc 3000 	ldrh.w	r3, [ip]
 800e8f2:	42bd      	cmp	r5, r7
 800e8f4:	fb09 330a 	mla	r3, r9, sl, r3
 800e8f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e8fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e900:	d8e5      	bhi.n	800e8ce <__multiply+0xfe>
 800e902:	9a01      	ldr	r2, [sp, #4]
 800e904:	50a3      	str	r3, [r4, r2]
 800e906:	3404      	adds	r4, #4
 800e908:	e79d      	b.n	800e846 <__multiply+0x76>
 800e90a:	3e01      	subs	r6, #1
 800e90c:	e79f      	b.n	800e84e <__multiply+0x7e>
 800e90e:	bf00      	nop
 800e910:	0801e720 	.word	0x0801e720
 800e914:	0801e731 	.word	0x0801e731

0800e918 <__pow5mult>:
 800e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	4615      	mov	r5, r2
 800e91e:	f012 0203 	ands.w	r2, r2, #3
 800e922:	4607      	mov	r7, r0
 800e924:	460e      	mov	r6, r1
 800e926:	d007      	beq.n	800e938 <__pow5mult+0x20>
 800e928:	3a01      	subs	r2, #1
 800e92a:	4c25      	ldr	r4, [pc, #148]	@ (800e9c0 <__pow5mult+0xa8>)
 800e92c:	2300      	movs	r3, #0
 800e92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e932:	f7ff fea3 	bl	800e67c <__multadd>
 800e936:	4606      	mov	r6, r0
 800e938:	10ad      	asrs	r5, r5, #2
 800e93a:	d03d      	beq.n	800e9b8 <__pow5mult+0xa0>
 800e93c:	69fc      	ldr	r4, [r7, #28]
 800e93e:	b97c      	cbnz	r4, 800e960 <__pow5mult+0x48>
 800e940:	2010      	movs	r0, #16
 800e942:	f7fd fff3 	bl	800c92c <malloc>
 800e946:	4602      	mov	r2, r0
 800e948:	61f8      	str	r0, [r7, #28]
 800e94a:	b928      	cbnz	r0, 800e958 <__pow5mult+0x40>
 800e94c:	4b1d      	ldr	r3, [pc, #116]	@ (800e9c4 <__pow5mult+0xac>)
 800e94e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e952:	481d      	ldr	r0, [pc, #116]	@ (800e9c8 <__pow5mult+0xb0>)
 800e954:	f000 fbbe 	bl	800f0d4 <__assert_func>
 800e958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e95c:	6004      	str	r4, [r0, #0]
 800e95e:	60c4      	str	r4, [r0, #12]
 800e960:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e968:	b94c      	cbnz	r4, 800e97e <__pow5mult+0x66>
 800e96a:	f240 2171 	movw	r1, #625	@ 0x271
 800e96e:	4638      	mov	r0, r7
 800e970:	f7ff ff18 	bl	800e7a4 <__i2b>
 800e974:	2300      	movs	r3, #0
 800e976:	4604      	mov	r4, r0
 800e978:	f8c8 0008 	str.w	r0, [r8, #8]
 800e97c:	6003      	str	r3, [r0, #0]
 800e97e:	f04f 0900 	mov.w	r9, #0
 800e982:	07eb      	lsls	r3, r5, #31
 800e984:	d50a      	bpl.n	800e99c <__pow5mult+0x84>
 800e986:	4631      	mov	r1, r6
 800e988:	4622      	mov	r2, r4
 800e98a:	4638      	mov	r0, r7
 800e98c:	f7ff ff20 	bl	800e7d0 <__multiply>
 800e990:	4680      	mov	r8, r0
 800e992:	4631      	mov	r1, r6
 800e994:	4638      	mov	r0, r7
 800e996:	4646      	mov	r6, r8
 800e998:	f7ff fe4e 	bl	800e638 <_Bfree>
 800e99c:	106d      	asrs	r5, r5, #1
 800e99e:	d00b      	beq.n	800e9b8 <__pow5mult+0xa0>
 800e9a0:	6820      	ldr	r0, [r4, #0]
 800e9a2:	b938      	cbnz	r0, 800e9b4 <__pow5mult+0x9c>
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f7ff ff11 	bl	800e7d0 <__multiply>
 800e9ae:	6020      	str	r0, [r4, #0]
 800e9b0:	f8c0 9000 	str.w	r9, [r0]
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	e7e4      	b.n	800e982 <__pow5mult+0x6a>
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9be:	bf00      	nop
 800e9c0:	0801e7e4 	.word	0x0801e7e4
 800e9c4:	0801e6b1 	.word	0x0801e6b1
 800e9c8:	0801e731 	.word	0x0801e731

0800e9cc <__lshift>:
 800e9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	4691      	mov	r9, r2
 800e9d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	6849      	ldr	r1, [r1, #4]
 800e9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9e2:	68a3      	ldr	r3, [r4, #8]
 800e9e4:	f108 0601 	add.w	r6, r8, #1
 800e9e8:	42b3      	cmp	r3, r6
 800e9ea:	db0b      	blt.n	800ea04 <__lshift+0x38>
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	f7ff fde3 	bl	800e5b8 <_Balloc>
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	b948      	cbnz	r0, 800ea0a <__lshift+0x3e>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	4b28      	ldr	r3, [pc, #160]	@ (800ea9c <__lshift+0xd0>)
 800e9fa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e9fe:	4828      	ldr	r0, [pc, #160]	@ (800eaa0 <__lshift+0xd4>)
 800ea00:	f000 fb68 	bl	800f0d4 <__assert_func>
 800ea04:	3101      	adds	r1, #1
 800ea06:	005b      	lsls	r3, r3, #1
 800ea08:	e7ee      	b.n	800e9e8 <__lshift+0x1c>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	f100 0114 	add.w	r1, r0, #20
 800ea10:	f100 0210 	add.w	r2, r0, #16
 800ea14:	4618      	mov	r0, r3
 800ea16:	4553      	cmp	r3, sl
 800ea18:	db33      	blt.n	800ea82 <__lshift+0xb6>
 800ea1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea1e:	f104 0314 	add.w	r3, r4, #20
 800ea22:	6920      	ldr	r0, [r4, #16]
 800ea24:	f019 091f 	ands.w	r9, r9, #31
 800ea28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea30:	d02b      	beq.n	800ea8a <__lshift+0xbe>
 800ea32:	f1c9 0e20 	rsb	lr, r9, #32
 800ea36:	468a      	mov	sl, r1
 800ea38:	2200      	movs	r2, #0
 800ea3a:	6818      	ldr	r0, [r3, #0]
 800ea3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ea40:	4310      	orrs	r0, r2
 800ea42:	f84a 0b04 	str.w	r0, [sl], #4
 800ea46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea4a:	459c      	cmp	ip, r3
 800ea4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea50:	d8f3      	bhi.n	800ea3a <__lshift+0x6e>
 800ea52:	ebac 0304 	sub.w	r3, ip, r4
 800ea56:	f104 0015 	add.w	r0, r4, #21
 800ea5a:	3b15      	subs	r3, #21
 800ea5c:	f023 0303 	bic.w	r3, r3, #3
 800ea60:	3304      	adds	r3, #4
 800ea62:	4560      	cmp	r0, ip
 800ea64:	bf88      	it	hi
 800ea66:	2304      	movhi	r3, #4
 800ea68:	50ca      	str	r2, [r1, r3]
 800ea6a:	b10a      	cbz	r2, 800ea70 <__lshift+0xa4>
 800ea6c:	f108 0602 	add.w	r6, r8, #2
 800ea70:	3e01      	subs	r6, #1
 800ea72:	4638      	mov	r0, r7
 800ea74:	4621      	mov	r1, r4
 800ea76:	612e      	str	r6, [r5, #16]
 800ea78:	f7ff fdde 	bl	800e638 <_Bfree>
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea82:	3301      	adds	r3, #1
 800ea84:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea88:	e7c5      	b.n	800ea16 <__lshift+0x4a>
 800ea8a:	3904      	subs	r1, #4
 800ea8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea90:	459c      	cmp	ip, r3
 800ea92:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea96:	d8f9      	bhi.n	800ea8c <__lshift+0xc0>
 800ea98:	e7ea      	b.n	800ea70 <__lshift+0xa4>
 800ea9a:	bf00      	nop
 800ea9c:	0801e720 	.word	0x0801e720
 800eaa0:	0801e731 	.word	0x0801e731

0800eaa4 <__mcmp>:
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	690a      	ldr	r2, [r1, #16]
 800eaa8:	6900      	ldr	r0, [r0, #16]
 800eaaa:	1a80      	subs	r0, r0, r2
 800eaac:	b530      	push	{r4, r5, lr}
 800eaae:	d10e      	bne.n	800eace <__mcmp+0x2a>
 800eab0:	3314      	adds	r3, #20
 800eab2:	3114      	adds	r1, #20
 800eab4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eab8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eabc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eac4:	4295      	cmp	r5, r2
 800eac6:	d003      	beq.n	800ead0 <__mcmp+0x2c>
 800eac8:	d205      	bcs.n	800ead6 <__mcmp+0x32>
 800eaca:	f04f 30ff 	mov.w	r0, #4294967295
 800eace:	bd30      	pop	{r4, r5, pc}
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	d3f3      	bcc.n	800eabc <__mcmp+0x18>
 800ead4:	e7fb      	b.n	800eace <__mcmp+0x2a>
 800ead6:	2001      	movs	r0, #1
 800ead8:	e7f9      	b.n	800eace <__mcmp+0x2a>
	...

0800eadc <__mdiff>:
 800eadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae0:	4689      	mov	r9, r1
 800eae2:	4606      	mov	r6, r0
 800eae4:	4611      	mov	r1, r2
 800eae6:	4614      	mov	r4, r2
 800eae8:	4648      	mov	r0, r9
 800eaea:	f7ff ffdb 	bl	800eaa4 <__mcmp>
 800eaee:	1e05      	subs	r5, r0, #0
 800eaf0:	d112      	bne.n	800eb18 <__mdiff+0x3c>
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f7ff fd5f 	bl	800e5b8 <_Balloc>
 800eafa:	4602      	mov	r2, r0
 800eafc:	b928      	cbnz	r0, 800eb0a <__mdiff+0x2e>
 800eafe:	4b41      	ldr	r3, [pc, #260]	@ (800ec04 <__mdiff+0x128>)
 800eb00:	f240 2137 	movw	r1, #567	@ 0x237
 800eb04:	4840      	ldr	r0, [pc, #256]	@ (800ec08 <__mdiff+0x12c>)
 800eb06:	f000 fae5 	bl	800f0d4 <__assert_func>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb10:	4610      	mov	r0, r2
 800eb12:	b003      	add	sp, #12
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	bfbc      	itt	lt
 800eb1a:	464b      	movlt	r3, r9
 800eb1c:	46a1      	movlt	r9, r4
 800eb1e:	4630      	mov	r0, r6
 800eb20:	bfb8      	it	lt
 800eb22:	2501      	movlt	r5, #1
 800eb24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb28:	bfb4      	ite	lt
 800eb2a:	461c      	movlt	r4, r3
 800eb2c:	2500      	movge	r5, #0
 800eb2e:	f7ff fd43 	bl	800e5b8 <_Balloc>
 800eb32:	4602      	mov	r2, r0
 800eb34:	b918      	cbnz	r0, 800eb3e <__mdiff+0x62>
 800eb36:	4b33      	ldr	r3, [pc, #204]	@ (800ec04 <__mdiff+0x128>)
 800eb38:	f240 2145 	movw	r1, #581	@ 0x245
 800eb3c:	e7e2      	b.n	800eb04 <__mdiff+0x28>
 800eb3e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb42:	f104 0e14 	add.w	lr, r4, #20
 800eb46:	6926      	ldr	r6, [r4, #16]
 800eb48:	f100 0b14 	add.w	fp, r0, #20
 800eb4c:	60c5      	str	r5, [r0, #12]
 800eb4e:	f109 0514 	add.w	r5, r9, #20
 800eb52:	f109 0310 	add.w	r3, r9, #16
 800eb56:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb5a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb5e:	46d9      	mov	r9, fp
 800eb60:	f04f 0c00 	mov.w	ip, #0
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	9b01      	ldr	r3, [sp, #4]
 800eb68:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb6c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb70:	4576      	cmp	r6, lr
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	fa1f f38a 	uxth.w	r3, sl
 800eb78:	4619      	mov	r1, r3
 800eb7a:	b283      	uxth	r3, r0
 800eb7c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800eb80:	eba1 0303 	sub.w	r3, r1, r3
 800eb84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eb88:	4463      	add	r3, ip
 800eb8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eb98:	f849 3b04 	str.w	r3, [r9], #4
 800eb9c:	d8e3      	bhi.n	800eb66 <__mdiff+0x8a>
 800eb9e:	1b33      	subs	r3, r6, r4
 800eba0:	3415      	adds	r4, #21
 800eba2:	3b15      	subs	r3, #21
 800eba4:	f023 0303 	bic.w	r3, r3, #3
 800eba8:	3304      	adds	r3, #4
 800ebaa:	42a6      	cmp	r6, r4
 800ebac:	bf38      	it	cc
 800ebae:	2304      	movcc	r3, #4
 800ebb0:	441d      	add	r5, r3
 800ebb2:	445b      	add	r3, fp
 800ebb4:	462c      	mov	r4, r5
 800ebb6:	461e      	mov	r6, r3
 800ebb8:	4544      	cmp	r4, r8
 800ebba:	d30e      	bcc.n	800ebda <__mdiff+0xfe>
 800ebbc:	f108 0103 	add.w	r1, r8, #3
 800ebc0:	1b49      	subs	r1, r1, r5
 800ebc2:	3d03      	subs	r5, #3
 800ebc4:	f021 0103 	bic.w	r1, r1, #3
 800ebc8:	45a8      	cmp	r8, r5
 800ebca:	bf38      	it	cc
 800ebcc:	2100      	movcc	r1, #0
 800ebce:	440b      	add	r3, r1
 800ebd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebd4:	b199      	cbz	r1, 800ebfe <__mdiff+0x122>
 800ebd6:	6117      	str	r7, [r2, #16]
 800ebd8:	e79a      	b.n	800eb10 <__mdiff+0x34>
 800ebda:	f854 1b04 	ldr.w	r1, [r4], #4
 800ebde:	46e6      	mov	lr, ip
 800ebe0:	fa1f fc81 	uxth.w	ip, r1
 800ebe4:	0c08      	lsrs	r0, r1, #16
 800ebe6:	4471      	add	r1, lr
 800ebe8:	44f4      	add	ip, lr
 800ebea:	b289      	uxth	r1, r1
 800ebec:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ebf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ebf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebf8:	f846 1b04 	str.w	r1, [r6], #4
 800ebfc:	e7dc      	b.n	800ebb8 <__mdiff+0xdc>
 800ebfe:	3f01      	subs	r7, #1
 800ec00:	e7e6      	b.n	800ebd0 <__mdiff+0xf4>
 800ec02:	bf00      	nop
 800ec04:	0801e720 	.word	0x0801e720
 800ec08:	0801e731 	.word	0x0801e731

0800ec0c <__d2b>:
 800ec0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec10:	460f      	mov	r7, r1
 800ec12:	2101      	movs	r1, #1
 800ec14:	4616      	mov	r6, r2
 800ec16:	ec59 8b10 	vmov	r8, r9, d0
 800ec1a:	f7ff fccd 	bl	800e5b8 <_Balloc>
 800ec1e:	4604      	mov	r4, r0
 800ec20:	b930      	cbnz	r0, 800ec30 <__d2b+0x24>
 800ec22:	4602      	mov	r2, r0
 800ec24:	4b23      	ldr	r3, [pc, #140]	@ (800ecb4 <__d2b+0xa8>)
 800ec26:	f240 310f 	movw	r1, #783	@ 0x30f
 800ec2a:	4823      	ldr	r0, [pc, #140]	@ (800ecb8 <__d2b+0xac>)
 800ec2c:	f000 fa52 	bl	800f0d4 <__assert_func>
 800ec30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec38:	b10d      	cbz	r5, 800ec3e <__d2b+0x32>
 800ec3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	f1b8 0300 	subs.w	r3, r8, #0
 800ec44:	d023      	beq.n	800ec8e <__d2b+0x82>
 800ec46:	4668      	mov	r0, sp
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	f7ff fd7e 	bl	800e74a <__lo0bits>
 800ec4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec52:	b1d0      	cbz	r0, 800ec8a <__d2b+0x7e>
 800ec54:	f1c0 0320 	rsb	r3, r0, #32
 800ec58:	fa02 f303 	lsl.w	r3, r2, r3
 800ec5c:	40c2      	lsrs	r2, r0
 800ec5e:	430b      	orrs	r3, r1
 800ec60:	9201      	str	r2, [sp, #4]
 800ec62:	6163      	str	r3, [r4, #20]
 800ec64:	9b01      	ldr	r3, [sp, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	61a3      	str	r3, [r4, #24]
 800ec6a:	bf0c      	ite	eq
 800ec6c:	2201      	moveq	r2, #1
 800ec6e:	2202      	movne	r2, #2
 800ec70:	6122      	str	r2, [r4, #16]
 800ec72:	b1a5      	cbz	r5, 800ec9e <__d2b+0x92>
 800ec74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ec78:	4405      	add	r5, r0
 800ec7a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ec7e:	603d      	str	r5, [r7, #0]
 800ec80:	6030      	str	r0, [r6, #0]
 800ec82:	4620      	mov	r0, r4
 800ec84:	b003      	add	sp, #12
 800ec86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec8a:	6161      	str	r1, [r4, #20]
 800ec8c:	e7ea      	b.n	800ec64 <__d2b+0x58>
 800ec8e:	a801      	add	r0, sp, #4
 800ec90:	f7ff fd5b 	bl	800e74a <__lo0bits>
 800ec94:	9b01      	ldr	r3, [sp, #4]
 800ec96:	3020      	adds	r0, #32
 800ec98:	2201      	movs	r2, #1
 800ec9a:	6163      	str	r3, [r4, #20]
 800ec9c:	e7e8      	b.n	800ec70 <__d2b+0x64>
 800ec9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eca2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eca6:	6038      	str	r0, [r7, #0]
 800eca8:	6918      	ldr	r0, [r3, #16]
 800ecaa:	f7ff fd2f 	bl	800e70c <__hi0bits>
 800ecae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecb2:	e7e5      	b.n	800ec80 <__d2b+0x74>
 800ecb4:	0801e720 	.word	0x0801e720
 800ecb8:	0801e731 	.word	0x0801e731

0800ecbc <_malloc_usable_size_r>:
 800ecbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc0:	1f18      	subs	r0, r3, #4
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfbc      	itt	lt
 800ecc6:	580b      	ldrlt	r3, [r1, r0]
 800ecc8:	18c0      	addlt	r0, r0, r3
 800ecca:	4770      	bx	lr

0800eccc <__ssputs_r>:
 800eccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd0:	461f      	mov	r7, r3
 800ecd2:	688e      	ldr	r6, [r1, #8]
 800ecd4:	4682      	mov	sl, r0
 800ecd6:	460c      	mov	r4, r1
 800ecd8:	42be      	cmp	r6, r7
 800ecda:	4690      	mov	r8, r2
 800ecdc:	680b      	ldr	r3, [r1, #0]
 800ecde:	d82d      	bhi.n	800ed3c <__ssputs_r+0x70>
 800ece0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ece4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ece8:	d026      	beq.n	800ed38 <__ssputs_r+0x6c>
 800ecea:	6965      	ldr	r5, [r4, #20]
 800ecec:	6909      	ldr	r1, [r1, #16]
 800ecee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecf2:	eba3 0901 	sub.w	r9, r3, r1
 800ecf6:	1c7b      	adds	r3, r7, #1
 800ecf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ecfc:	444b      	add	r3, r9
 800ecfe:	106d      	asrs	r5, r5, #1
 800ed00:	429d      	cmp	r5, r3
 800ed02:	bf38      	it	cc
 800ed04:	461d      	movcc	r5, r3
 800ed06:	0553      	lsls	r3, r2, #21
 800ed08:	d527      	bpl.n	800ed5a <__ssputs_r+0x8e>
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	f7fd fe38 	bl	800c980 <_malloc_r>
 800ed10:	4606      	mov	r6, r0
 800ed12:	b360      	cbz	r0, 800ed6e <__ssputs_r+0xa2>
 800ed14:	464a      	mov	r2, r9
 800ed16:	6921      	ldr	r1, [r4, #16]
 800ed18:	f7fe fd95 	bl	800d846 <memcpy>
 800ed1c:	89a3      	ldrh	r3, [r4, #12]
 800ed1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed26:	81a3      	strh	r3, [r4, #12]
 800ed28:	6126      	str	r6, [r4, #16]
 800ed2a:	444e      	add	r6, r9
 800ed2c:	6165      	str	r5, [r4, #20]
 800ed2e:	eba5 0509 	sub.w	r5, r5, r9
 800ed32:	6026      	str	r6, [r4, #0]
 800ed34:	463e      	mov	r6, r7
 800ed36:	60a5      	str	r5, [r4, #8]
 800ed38:	42be      	cmp	r6, r7
 800ed3a:	d900      	bls.n	800ed3e <__ssputs_r+0x72>
 800ed3c:	463e      	mov	r6, r7
 800ed3e:	4632      	mov	r2, r6
 800ed40:	4641      	mov	r1, r8
 800ed42:	6820      	ldr	r0, [r4, #0]
 800ed44:	f7fe fc69 	bl	800d61a <memmove>
 800ed48:	68a3      	ldr	r3, [r4, #8]
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	1b9b      	subs	r3, r3, r6
 800ed4e:	60a3      	str	r3, [r4, #8]
 800ed50:	6823      	ldr	r3, [r4, #0]
 800ed52:	4433      	add	r3, r6
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	f7fd fe9c 	bl	800ca98 <_realloc_r>
 800ed60:	4606      	mov	r6, r0
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d1e0      	bne.n	800ed28 <__ssputs_r+0x5c>
 800ed66:	6921      	ldr	r1, [r4, #16]
 800ed68:	4650      	mov	r0, sl
 800ed6a:	f7ff fbdb 	bl	800e524 <_free_r>
 800ed6e:	230c      	movs	r3, #12
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	f8ca 3000 	str.w	r3, [sl]
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	e7e9      	b.n	800ed56 <__ssputs_r+0x8a>
	...

0800ed84 <_svfiprintf_r>:
 800ed84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed88:	4698      	mov	r8, r3
 800ed8a:	898b      	ldrh	r3, [r1, #12]
 800ed8c:	b09d      	sub	sp, #116	@ 0x74
 800ed8e:	4607      	mov	r7, r0
 800ed90:	061b      	lsls	r3, r3, #24
 800ed92:	460d      	mov	r5, r1
 800ed94:	4614      	mov	r4, r2
 800ed96:	d510      	bpl.n	800edba <_svfiprintf_r+0x36>
 800ed98:	690b      	ldr	r3, [r1, #16]
 800ed9a:	b973      	cbnz	r3, 800edba <_svfiprintf_r+0x36>
 800ed9c:	2140      	movs	r1, #64	@ 0x40
 800ed9e:	f7fd fdef 	bl	800c980 <_malloc_r>
 800eda2:	6028      	str	r0, [r5, #0]
 800eda4:	6128      	str	r0, [r5, #16]
 800eda6:	b930      	cbnz	r0, 800edb6 <_svfiprintf_r+0x32>
 800eda8:	230c      	movs	r3, #12
 800edaa:	603b      	str	r3, [r7, #0]
 800edac:	f04f 30ff 	mov.w	r0, #4294967295
 800edb0:	b01d      	add	sp, #116	@ 0x74
 800edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb6:	2340      	movs	r3, #64	@ 0x40
 800edb8:	616b      	str	r3, [r5, #20]
 800edba:	2300      	movs	r3, #0
 800edbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800edc0:	f04f 0901 	mov.w	r9, #1
 800edc4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ef68 <_svfiprintf_r+0x1e4>
 800edc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800edca:	2320      	movs	r3, #32
 800edcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edd0:	2330      	movs	r3, #48	@ 0x30
 800edd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edd6:	4623      	mov	r3, r4
 800edd8:	469a      	mov	sl, r3
 800edda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edde:	b10a      	cbz	r2, 800ede4 <_svfiprintf_r+0x60>
 800ede0:	2a25      	cmp	r2, #37	@ 0x25
 800ede2:	d1f9      	bne.n	800edd8 <_svfiprintf_r+0x54>
 800ede4:	ebba 0b04 	subs.w	fp, sl, r4
 800ede8:	d00b      	beq.n	800ee02 <_svfiprintf_r+0x7e>
 800edea:	465b      	mov	r3, fp
 800edec:	4622      	mov	r2, r4
 800edee:	4629      	mov	r1, r5
 800edf0:	4638      	mov	r0, r7
 800edf2:	f7ff ff6b 	bl	800eccc <__ssputs_r>
 800edf6:	3001      	adds	r0, #1
 800edf8:	f000 80a7 	beq.w	800ef4a <_svfiprintf_r+0x1c6>
 800edfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edfe:	445a      	add	r2, fp
 800ee00:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee02:	f89a 3000 	ldrb.w	r3, [sl]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	f000 809f 	beq.w	800ef4a <_svfiprintf_r+0x1c6>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee12:	f10a 0a01 	add.w	sl, sl, #1
 800ee16:	9304      	str	r3, [sp, #16]
 800ee18:	9307      	str	r3, [sp, #28]
 800ee1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee24:	4654      	mov	r4, sl
 800ee26:	2205      	movs	r2, #5
 800ee28:	484f      	ldr	r0, [pc, #316]	@ (800ef68 <_svfiprintf_r+0x1e4>)
 800ee2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee2e:	f7fe fcfc 	bl	800d82a <memchr>
 800ee32:	9a04      	ldr	r2, [sp, #16]
 800ee34:	b9d8      	cbnz	r0, 800ee6e <_svfiprintf_r+0xea>
 800ee36:	06d0      	lsls	r0, r2, #27
 800ee38:	bf44      	itt	mi
 800ee3a:	2320      	movmi	r3, #32
 800ee3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee40:	0711      	lsls	r1, r2, #28
 800ee42:	bf44      	itt	mi
 800ee44:	232b      	movmi	r3, #43	@ 0x2b
 800ee46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee50:	d015      	beq.n	800ee7e <_svfiprintf_r+0xfa>
 800ee52:	9a07      	ldr	r2, [sp, #28]
 800ee54:	4654      	mov	r4, sl
 800ee56:	2000      	movs	r0, #0
 800ee58:	f04f 0c0a 	mov.w	ip, #10
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee62:	3b30      	subs	r3, #48	@ 0x30
 800ee64:	2b09      	cmp	r3, #9
 800ee66:	d94b      	bls.n	800ef00 <_svfiprintf_r+0x17c>
 800ee68:	b1b0      	cbz	r0, 800ee98 <_svfiprintf_r+0x114>
 800ee6a:	9207      	str	r2, [sp, #28]
 800ee6c:	e014      	b.n	800ee98 <_svfiprintf_r+0x114>
 800ee6e:	eba0 0308 	sub.w	r3, r0, r8
 800ee72:	46a2      	mov	sl, r4
 800ee74:	fa09 f303 	lsl.w	r3, r9, r3
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	9304      	str	r3, [sp, #16]
 800ee7c:	e7d2      	b.n	800ee24 <_svfiprintf_r+0xa0>
 800ee7e:	9b03      	ldr	r3, [sp, #12]
 800ee80:	1d19      	adds	r1, r3, #4
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	9103      	str	r1, [sp, #12]
 800ee88:	bfbb      	ittet	lt
 800ee8a:	425b      	neglt	r3, r3
 800ee8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ee90:	9307      	strge	r3, [sp, #28]
 800ee92:	9307      	strlt	r3, [sp, #28]
 800ee94:	bfb8      	it	lt
 800ee96:	9204      	strlt	r2, [sp, #16]
 800ee98:	7823      	ldrb	r3, [r4, #0]
 800ee9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee9c:	d10a      	bne.n	800eeb4 <_svfiprintf_r+0x130>
 800ee9e:	7863      	ldrb	r3, [r4, #1]
 800eea0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eea2:	d132      	bne.n	800ef0a <_svfiprintf_r+0x186>
 800eea4:	9b03      	ldr	r3, [sp, #12]
 800eea6:	3402      	adds	r4, #2
 800eea8:	1d1a      	adds	r2, r3, #4
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeb0:	9203      	str	r2, [sp, #12]
 800eeb2:	9305      	str	r3, [sp, #20]
 800eeb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef78 <_svfiprintf_r+0x1f4>
 800eeb8:	2203      	movs	r2, #3
 800eeba:	7821      	ldrb	r1, [r4, #0]
 800eebc:	4650      	mov	r0, sl
 800eebe:	f7fe fcb4 	bl	800d82a <memchr>
 800eec2:	b138      	cbz	r0, 800eed4 <_svfiprintf_r+0x150>
 800eec4:	eba0 000a 	sub.w	r0, r0, sl
 800eec8:	2240      	movs	r2, #64	@ 0x40
 800eeca:	9b04      	ldr	r3, [sp, #16]
 800eecc:	3401      	adds	r4, #1
 800eece:	4082      	lsls	r2, r0
 800eed0:	4313      	orrs	r3, r2
 800eed2:	9304      	str	r3, [sp, #16]
 800eed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed8:	2206      	movs	r2, #6
 800eeda:	4824      	ldr	r0, [pc, #144]	@ (800ef6c <_svfiprintf_r+0x1e8>)
 800eedc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eee0:	f7fe fca3 	bl	800d82a <memchr>
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d036      	beq.n	800ef56 <_svfiprintf_r+0x1d2>
 800eee8:	4b21      	ldr	r3, [pc, #132]	@ (800ef70 <_svfiprintf_r+0x1ec>)
 800eeea:	bb1b      	cbnz	r3, 800ef34 <_svfiprintf_r+0x1b0>
 800eeec:	9b03      	ldr	r3, [sp, #12]
 800eeee:	3307      	adds	r3, #7
 800eef0:	f023 0307 	bic.w	r3, r3, #7
 800eef4:	3308      	adds	r3, #8
 800eef6:	9303      	str	r3, [sp, #12]
 800eef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eefa:	4433      	add	r3, r6
 800eefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eefe:	e76a      	b.n	800edd6 <_svfiprintf_r+0x52>
 800ef00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef04:	460c      	mov	r4, r1
 800ef06:	2001      	movs	r0, #1
 800ef08:	e7a8      	b.n	800ee5c <_svfiprintf_r+0xd8>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	3401      	adds	r4, #1
 800ef0e:	f04f 0c0a 	mov.w	ip, #10
 800ef12:	4619      	mov	r1, r3
 800ef14:	9305      	str	r3, [sp, #20]
 800ef16:	4620      	mov	r0, r4
 800ef18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef1c:	3a30      	subs	r2, #48	@ 0x30
 800ef1e:	2a09      	cmp	r2, #9
 800ef20:	d903      	bls.n	800ef2a <_svfiprintf_r+0x1a6>
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d0c6      	beq.n	800eeb4 <_svfiprintf_r+0x130>
 800ef26:	9105      	str	r1, [sp, #20]
 800ef28:	e7c4      	b.n	800eeb4 <_svfiprintf_r+0x130>
 800ef2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef2e:	4604      	mov	r4, r0
 800ef30:	2301      	movs	r3, #1
 800ef32:	e7f0      	b.n	800ef16 <_svfiprintf_r+0x192>
 800ef34:	ab03      	add	r3, sp, #12
 800ef36:	462a      	mov	r2, r5
 800ef38:	a904      	add	r1, sp, #16
 800ef3a:	4638      	mov	r0, r7
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <_svfiprintf_r+0x1f0>)
 800ef40:	f7fd fe76 	bl	800cc30 <_printf_float>
 800ef44:	1c42      	adds	r2, r0, #1
 800ef46:	4606      	mov	r6, r0
 800ef48:	d1d6      	bne.n	800eef8 <_svfiprintf_r+0x174>
 800ef4a:	89ab      	ldrh	r3, [r5, #12]
 800ef4c:	065b      	lsls	r3, r3, #25
 800ef4e:	f53f af2d 	bmi.w	800edac <_svfiprintf_r+0x28>
 800ef52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef54:	e72c      	b.n	800edb0 <_svfiprintf_r+0x2c>
 800ef56:	ab03      	add	r3, sp, #12
 800ef58:	462a      	mov	r2, r5
 800ef5a:	a904      	add	r1, sp, #16
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	4b04      	ldr	r3, [pc, #16]	@ (800ef74 <_svfiprintf_r+0x1f0>)
 800ef62:	f7fe f901 	bl	800d168 <_printf_i>
 800ef66:	e7ed      	b.n	800ef44 <_svfiprintf_r+0x1c0>
 800ef68:	0801e78a 	.word	0x0801e78a
 800ef6c:	0801e794 	.word	0x0801e794
 800ef70:	0800cc31 	.word	0x0800cc31
 800ef74:	0800eccd 	.word	0x0800eccd
 800ef78:	0801e790 	.word	0x0801e790

0800ef7c <__sflush_r>:
 800ef7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef84:	0716      	lsls	r6, r2, #28
 800ef86:	4605      	mov	r5, r0
 800ef88:	460c      	mov	r4, r1
 800ef8a:	d454      	bmi.n	800f036 <__sflush_r+0xba>
 800ef8c:	684b      	ldr	r3, [r1, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dc02      	bgt.n	800ef98 <__sflush_r+0x1c>
 800ef92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	dd48      	ble.n	800f02a <__sflush_r+0xae>
 800ef98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef9a:	2e00      	cmp	r6, #0
 800ef9c:	d045      	beq.n	800f02a <__sflush_r+0xae>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800efa4:	682f      	ldr	r7, [r5, #0]
 800efa6:	6a21      	ldr	r1, [r4, #32]
 800efa8:	602b      	str	r3, [r5, #0]
 800efaa:	d030      	beq.n	800f00e <__sflush_r+0x92>
 800efac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	0759      	lsls	r1, r3, #29
 800efb2:	d505      	bpl.n	800efc0 <__sflush_r+0x44>
 800efb4:	6863      	ldr	r3, [r4, #4]
 800efb6:	1ad2      	subs	r2, r2, r3
 800efb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800efba:	b10b      	cbz	r3, 800efc0 <__sflush_r+0x44>
 800efbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800efbe:	1ad2      	subs	r2, r2, r3
 800efc0:	2300      	movs	r3, #0
 800efc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800efc4:	6a21      	ldr	r1, [r4, #32]
 800efc6:	4628      	mov	r0, r5
 800efc8:	47b0      	blx	r6
 800efca:	1c43      	adds	r3, r0, #1
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	d106      	bne.n	800efde <__sflush_r+0x62>
 800efd0:	6829      	ldr	r1, [r5, #0]
 800efd2:	291d      	cmp	r1, #29
 800efd4:	d82b      	bhi.n	800f02e <__sflush_r+0xb2>
 800efd6:	4a2a      	ldr	r2, [pc, #168]	@ (800f080 <__sflush_r+0x104>)
 800efd8:	40ca      	lsrs	r2, r1
 800efda:	07d6      	lsls	r6, r2, #31
 800efdc:	d527      	bpl.n	800f02e <__sflush_r+0xb2>
 800efde:	2200      	movs	r2, #0
 800efe0:	04d9      	lsls	r1, r3, #19
 800efe2:	6062      	str	r2, [r4, #4]
 800efe4:	6922      	ldr	r2, [r4, #16]
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	d504      	bpl.n	800eff4 <__sflush_r+0x78>
 800efea:	1c42      	adds	r2, r0, #1
 800efec:	d101      	bne.n	800eff2 <__sflush_r+0x76>
 800efee:	682b      	ldr	r3, [r5, #0]
 800eff0:	b903      	cbnz	r3, 800eff4 <__sflush_r+0x78>
 800eff2:	6560      	str	r0, [r4, #84]	@ 0x54
 800eff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eff6:	602f      	str	r7, [r5, #0]
 800eff8:	b1b9      	cbz	r1, 800f02a <__sflush_r+0xae>
 800effa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800effe:	4299      	cmp	r1, r3
 800f000:	d002      	beq.n	800f008 <__sflush_r+0x8c>
 800f002:	4628      	mov	r0, r5
 800f004:	f7ff fa8e 	bl	800e524 <_free_r>
 800f008:	2300      	movs	r3, #0
 800f00a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f00c:	e00d      	b.n	800f02a <__sflush_r+0xae>
 800f00e:	2301      	movs	r3, #1
 800f010:	4628      	mov	r0, r5
 800f012:	47b0      	blx	r6
 800f014:	4602      	mov	r2, r0
 800f016:	1c50      	adds	r0, r2, #1
 800f018:	d1c9      	bne.n	800efae <__sflush_r+0x32>
 800f01a:	682b      	ldr	r3, [r5, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d0c6      	beq.n	800efae <__sflush_r+0x32>
 800f020:	2b1d      	cmp	r3, #29
 800f022:	d001      	beq.n	800f028 <__sflush_r+0xac>
 800f024:	2b16      	cmp	r3, #22
 800f026:	d11d      	bne.n	800f064 <__sflush_r+0xe8>
 800f028:	602f      	str	r7, [r5, #0]
 800f02a:	2000      	movs	r0, #0
 800f02c:	e021      	b.n	800f072 <__sflush_r+0xf6>
 800f02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f032:	b21b      	sxth	r3, r3
 800f034:	e01a      	b.n	800f06c <__sflush_r+0xf0>
 800f036:	690f      	ldr	r7, [r1, #16]
 800f038:	2f00      	cmp	r7, #0
 800f03a:	d0f6      	beq.n	800f02a <__sflush_r+0xae>
 800f03c:	0793      	lsls	r3, r2, #30
 800f03e:	680e      	ldr	r6, [r1, #0]
 800f040:	600f      	str	r7, [r1, #0]
 800f042:	bf0c      	ite	eq
 800f044:	694b      	ldreq	r3, [r1, #20]
 800f046:	2300      	movne	r3, #0
 800f048:	eba6 0807 	sub.w	r8, r6, r7
 800f04c:	608b      	str	r3, [r1, #8]
 800f04e:	f1b8 0f00 	cmp.w	r8, #0
 800f052:	ddea      	ble.n	800f02a <__sflush_r+0xae>
 800f054:	4643      	mov	r3, r8
 800f056:	463a      	mov	r2, r7
 800f058:	6a21      	ldr	r1, [r4, #32]
 800f05a:	4628      	mov	r0, r5
 800f05c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f05e:	47b0      	blx	r6
 800f060:	2800      	cmp	r0, #0
 800f062:	dc08      	bgt.n	800f076 <__sflush_r+0xfa>
 800f064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f06c:	f04f 30ff 	mov.w	r0, #4294967295
 800f070:	81a3      	strh	r3, [r4, #12]
 800f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f076:	4407      	add	r7, r0
 800f078:	eba8 0800 	sub.w	r8, r8, r0
 800f07c:	e7e7      	b.n	800f04e <__sflush_r+0xd2>
 800f07e:	bf00      	nop
 800f080:	20400001 	.word	0x20400001

0800f084 <_fflush_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	690b      	ldr	r3, [r1, #16]
 800f088:	4605      	mov	r5, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	b913      	cbnz	r3, 800f094 <_fflush_r+0x10>
 800f08e:	2500      	movs	r5, #0
 800f090:	4628      	mov	r0, r5
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	b118      	cbz	r0, 800f09e <_fflush_r+0x1a>
 800f096:	6a03      	ldr	r3, [r0, #32]
 800f098:	b90b      	cbnz	r3, 800f09e <_fflush_r+0x1a>
 800f09a:	f7fe fa0f 	bl	800d4bc <__sinit>
 800f09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0f3      	beq.n	800f08e <_fflush_r+0xa>
 800f0a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f0a8:	07d0      	lsls	r0, r2, #31
 800f0aa:	d404      	bmi.n	800f0b6 <_fflush_r+0x32>
 800f0ac:	0599      	lsls	r1, r3, #22
 800f0ae:	d402      	bmi.n	800f0b6 <_fflush_r+0x32>
 800f0b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0b2:	f7fe fbb8 	bl	800d826 <__retarget_lock_acquire_recursive>
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	f7ff ff5f 	bl	800ef7c <__sflush_r>
 800f0be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	07da      	lsls	r2, r3, #31
 800f0c4:	d4e4      	bmi.n	800f090 <_fflush_r+0xc>
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	059b      	lsls	r3, r3, #22
 800f0ca:	d4e1      	bmi.n	800f090 <_fflush_r+0xc>
 800f0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0ce:	f7fe fbab 	bl	800d828 <__retarget_lock_release_recursive>
 800f0d2:	e7dd      	b.n	800f090 <_fflush_r+0xc>

0800f0d4 <__assert_func>:
 800f0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0d6:	4614      	mov	r4, r2
 800f0d8:	461a      	mov	r2, r3
 800f0da:	4b09      	ldr	r3, [pc, #36]	@ (800f100 <__assert_func+0x2c>)
 800f0dc:	4605      	mov	r5, r0
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68d8      	ldr	r0, [r3, #12]
 800f0e2:	b14c      	cbz	r4, 800f0f8 <__assert_func+0x24>
 800f0e4:	4b07      	ldr	r3, [pc, #28]	@ (800f104 <__assert_func+0x30>)
 800f0e6:	9100      	str	r1, [sp, #0]
 800f0e8:	4907      	ldr	r1, [pc, #28]	@ (800f108 <__assert_func+0x34>)
 800f0ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0ee:	462b      	mov	r3, r5
 800f0f0:	f000 f842 	bl	800f178 <fiprintf>
 800f0f4:	f000 f852 	bl	800f19c <abort>
 800f0f8:	4b04      	ldr	r3, [pc, #16]	@ (800f10c <__assert_func+0x38>)
 800f0fa:	461c      	mov	r4, r3
 800f0fc:	e7f3      	b.n	800f0e6 <__assert_func+0x12>
 800f0fe:	bf00      	nop
 800f100:	20000f88 	.word	0x20000f88
 800f104:	0801e7a5 	.word	0x0801e7a5
 800f108:	0801e7b2 	.word	0x0801e7b2
 800f10c:	0801e7e0 	.word	0x0801e7e0

0800f110 <_calloc_r>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	fba1 5402 	umull	r5, r4, r1, r2
 800f116:	b934      	cbnz	r4, 800f126 <_calloc_r+0x16>
 800f118:	4629      	mov	r1, r5
 800f11a:	f7fd fc31 	bl	800c980 <_malloc_r>
 800f11e:	4606      	mov	r6, r0
 800f120:	b928      	cbnz	r0, 800f12e <_calloc_r+0x1e>
 800f122:	4630      	mov	r0, r6
 800f124:	bd70      	pop	{r4, r5, r6, pc}
 800f126:	220c      	movs	r2, #12
 800f128:	2600      	movs	r6, #0
 800f12a:	6002      	str	r2, [r0, #0]
 800f12c:	e7f9      	b.n	800f122 <_calloc_r+0x12>
 800f12e:	462a      	mov	r2, r5
 800f130:	4621      	mov	r1, r4
 800f132:	f7fe fa8c 	bl	800d64e <memset>
 800f136:	e7f4      	b.n	800f122 <_calloc_r+0x12>

0800f138 <__ascii_mbtowc>:
 800f138:	b082      	sub	sp, #8
 800f13a:	b901      	cbnz	r1, 800f13e <__ascii_mbtowc+0x6>
 800f13c:	a901      	add	r1, sp, #4
 800f13e:	b142      	cbz	r2, 800f152 <__ascii_mbtowc+0x1a>
 800f140:	b14b      	cbz	r3, 800f156 <__ascii_mbtowc+0x1e>
 800f142:	7813      	ldrb	r3, [r2, #0]
 800f144:	600b      	str	r3, [r1, #0]
 800f146:	7812      	ldrb	r2, [r2, #0]
 800f148:	1e10      	subs	r0, r2, #0
 800f14a:	bf18      	it	ne
 800f14c:	2001      	movne	r0, #1
 800f14e:	b002      	add	sp, #8
 800f150:	4770      	bx	lr
 800f152:	4610      	mov	r0, r2
 800f154:	e7fb      	b.n	800f14e <__ascii_mbtowc+0x16>
 800f156:	f06f 0001 	mvn.w	r0, #1
 800f15a:	e7f8      	b.n	800f14e <__ascii_mbtowc+0x16>

0800f15c <__ascii_wctomb>:
 800f15c:	4603      	mov	r3, r0
 800f15e:	4608      	mov	r0, r1
 800f160:	b141      	cbz	r1, 800f174 <__ascii_wctomb+0x18>
 800f162:	2aff      	cmp	r2, #255	@ 0xff
 800f164:	d904      	bls.n	800f170 <__ascii_wctomb+0x14>
 800f166:	228a      	movs	r2, #138	@ 0x8a
 800f168:	f04f 30ff 	mov.w	r0, #4294967295
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	4770      	bx	lr
 800f170:	2001      	movs	r0, #1
 800f172:	700a      	strb	r2, [r1, #0]
 800f174:	4770      	bx	lr
	...

0800f178 <fiprintf>:
 800f178:	b40e      	push	{r1, r2, r3}
 800f17a:	b503      	push	{r0, r1, lr}
 800f17c:	ab03      	add	r3, sp, #12
 800f17e:	4601      	mov	r1, r0
 800f180:	4805      	ldr	r0, [pc, #20]	@ (800f198 <fiprintf+0x20>)
 800f182:	f853 2b04 	ldr.w	r2, [r3], #4
 800f186:	6800      	ldr	r0, [r0, #0]
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	f000 f837 	bl	800f1fc <_vfiprintf_r>
 800f18e:	b002      	add	sp, #8
 800f190:	f85d eb04 	ldr.w	lr, [sp], #4
 800f194:	b003      	add	sp, #12
 800f196:	4770      	bx	lr
 800f198:	20000f88 	.word	0x20000f88

0800f19c <abort>:
 800f19c:	2006      	movs	r0, #6
 800f19e:	b508      	push	{r3, lr}
 800f1a0:	f000 fa00 	bl	800f5a4 <raise>
 800f1a4:	2001      	movs	r0, #1
 800f1a6:	f000 faeb 	bl	800f780 <_exit>

0800f1aa <__sfputc_r>:
 800f1aa:	6893      	ldr	r3, [r2, #8]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	b410      	push	{r4}
 800f1b2:	6093      	str	r3, [r2, #8]
 800f1b4:	da08      	bge.n	800f1c8 <__sfputc_r+0x1e>
 800f1b6:	6994      	ldr	r4, [r2, #24]
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	db01      	blt.n	800f1c0 <__sfputc_r+0x16>
 800f1bc:	290a      	cmp	r1, #10
 800f1be:	d103      	bne.n	800f1c8 <__sfputc_r+0x1e>
 800f1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c4:	f000 b932 	b.w	800f42c <__swbuf_r>
 800f1c8:	6813      	ldr	r3, [r2, #0]
 800f1ca:	1c58      	adds	r0, r3, #1
 800f1cc:	6010      	str	r0, [r2, #0]
 800f1ce:	4608      	mov	r0, r1
 800f1d0:	7019      	strb	r1, [r3, #0]
 800f1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <__sfputs_r>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	4606      	mov	r6, r0
 800f1dc:	460f      	mov	r7, r1
 800f1de:	4614      	mov	r4, r2
 800f1e0:	18d5      	adds	r5, r2, r3
 800f1e2:	42ac      	cmp	r4, r5
 800f1e4:	d101      	bne.n	800f1ea <__sfputs_r+0x12>
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	e007      	b.n	800f1fa <__sfputs_r+0x22>
 800f1ea:	463a      	mov	r2, r7
 800f1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f7ff ffda 	bl	800f1aa <__sfputc_r>
 800f1f6:	1c43      	adds	r3, r0, #1
 800f1f8:	d1f3      	bne.n	800f1e2 <__sfputs_r+0xa>
 800f1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1fc <_vfiprintf_r>:
 800f1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f200:	460d      	mov	r5, r1
 800f202:	b09d      	sub	sp, #116	@ 0x74
 800f204:	4614      	mov	r4, r2
 800f206:	4698      	mov	r8, r3
 800f208:	4606      	mov	r6, r0
 800f20a:	b118      	cbz	r0, 800f214 <_vfiprintf_r+0x18>
 800f20c:	6a03      	ldr	r3, [r0, #32]
 800f20e:	b90b      	cbnz	r3, 800f214 <_vfiprintf_r+0x18>
 800f210:	f7fe f954 	bl	800d4bc <__sinit>
 800f214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f216:	07d9      	lsls	r1, r3, #31
 800f218:	d405      	bmi.n	800f226 <_vfiprintf_r+0x2a>
 800f21a:	89ab      	ldrh	r3, [r5, #12]
 800f21c:	059a      	lsls	r2, r3, #22
 800f21e:	d402      	bmi.n	800f226 <_vfiprintf_r+0x2a>
 800f220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f222:	f7fe fb00 	bl	800d826 <__retarget_lock_acquire_recursive>
 800f226:	89ab      	ldrh	r3, [r5, #12]
 800f228:	071b      	lsls	r3, r3, #28
 800f22a:	d501      	bpl.n	800f230 <_vfiprintf_r+0x34>
 800f22c:	692b      	ldr	r3, [r5, #16]
 800f22e:	b99b      	cbnz	r3, 800f258 <_vfiprintf_r+0x5c>
 800f230:	4629      	mov	r1, r5
 800f232:	4630      	mov	r0, r6
 800f234:	f000 f938 	bl	800f4a8 <__swsetup_r>
 800f238:	b170      	cbz	r0, 800f258 <_vfiprintf_r+0x5c>
 800f23a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f23c:	07dc      	lsls	r4, r3, #31
 800f23e:	d504      	bpl.n	800f24a <_vfiprintf_r+0x4e>
 800f240:	f04f 30ff 	mov.w	r0, #4294967295
 800f244:	b01d      	add	sp, #116	@ 0x74
 800f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24a:	89ab      	ldrh	r3, [r5, #12]
 800f24c:	0598      	lsls	r0, r3, #22
 800f24e:	d4f7      	bmi.n	800f240 <_vfiprintf_r+0x44>
 800f250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f252:	f7fe fae9 	bl	800d828 <__retarget_lock_release_recursive>
 800f256:	e7f3      	b.n	800f240 <_vfiprintf_r+0x44>
 800f258:	2300      	movs	r3, #0
 800f25a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f25e:	f04f 0901 	mov.w	r9, #1
 800f262:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f418 <_vfiprintf_r+0x21c>
 800f266:	9309      	str	r3, [sp, #36]	@ 0x24
 800f268:	2320      	movs	r3, #32
 800f26a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f26e:	2330      	movs	r3, #48	@ 0x30
 800f270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f274:	4623      	mov	r3, r4
 800f276:	469a      	mov	sl, r3
 800f278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f27c:	b10a      	cbz	r2, 800f282 <_vfiprintf_r+0x86>
 800f27e:	2a25      	cmp	r2, #37	@ 0x25
 800f280:	d1f9      	bne.n	800f276 <_vfiprintf_r+0x7a>
 800f282:	ebba 0b04 	subs.w	fp, sl, r4
 800f286:	d00b      	beq.n	800f2a0 <_vfiprintf_r+0xa4>
 800f288:	465b      	mov	r3, fp
 800f28a:	4622      	mov	r2, r4
 800f28c:	4629      	mov	r1, r5
 800f28e:	4630      	mov	r0, r6
 800f290:	f7ff ffa2 	bl	800f1d8 <__sfputs_r>
 800f294:	3001      	adds	r0, #1
 800f296:	f000 80a7 	beq.w	800f3e8 <_vfiprintf_r+0x1ec>
 800f29a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f29c:	445a      	add	r2, fp
 800f29e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 809f 	beq.w	800f3e8 <_vfiprintf_r+0x1ec>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b0:	f10a 0a01 	add.w	sl, sl, #1
 800f2b4:	9304      	str	r3, [sp, #16]
 800f2b6:	9307      	str	r3, [sp, #28]
 800f2b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2c2:	4654      	mov	r4, sl
 800f2c4:	2205      	movs	r2, #5
 800f2c6:	4854      	ldr	r0, [pc, #336]	@ (800f418 <_vfiprintf_r+0x21c>)
 800f2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2cc:	f7fe faad 	bl	800d82a <memchr>
 800f2d0:	9a04      	ldr	r2, [sp, #16]
 800f2d2:	b9d8      	cbnz	r0, 800f30c <_vfiprintf_r+0x110>
 800f2d4:	06d1      	lsls	r1, r2, #27
 800f2d6:	bf44      	itt	mi
 800f2d8:	2320      	movmi	r3, #32
 800f2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2de:	0713      	lsls	r3, r2, #28
 800f2e0:	bf44      	itt	mi
 800f2e2:	232b      	movmi	r3, #43	@ 0x2b
 800f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ee:	d015      	beq.n	800f31c <_vfiprintf_r+0x120>
 800f2f0:	9a07      	ldr	r2, [sp, #28]
 800f2f2:	4654      	mov	r4, sl
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	f04f 0c0a 	mov.w	ip, #10
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f300:	3b30      	subs	r3, #48	@ 0x30
 800f302:	2b09      	cmp	r3, #9
 800f304:	d94b      	bls.n	800f39e <_vfiprintf_r+0x1a2>
 800f306:	b1b0      	cbz	r0, 800f336 <_vfiprintf_r+0x13a>
 800f308:	9207      	str	r2, [sp, #28]
 800f30a:	e014      	b.n	800f336 <_vfiprintf_r+0x13a>
 800f30c:	eba0 0308 	sub.w	r3, r0, r8
 800f310:	46a2      	mov	sl, r4
 800f312:	fa09 f303 	lsl.w	r3, r9, r3
 800f316:	4313      	orrs	r3, r2
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	e7d2      	b.n	800f2c2 <_vfiprintf_r+0xc6>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	1d19      	adds	r1, r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	9103      	str	r1, [sp, #12]
 800f326:	bfbb      	ittet	lt
 800f328:	425b      	neglt	r3, r3
 800f32a:	f042 0202 	orrlt.w	r2, r2, #2
 800f32e:	9307      	strge	r3, [sp, #28]
 800f330:	9307      	strlt	r3, [sp, #28]
 800f332:	bfb8      	it	lt
 800f334:	9204      	strlt	r2, [sp, #16]
 800f336:	7823      	ldrb	r3, [r4, #0]
 800f338:	2b2e      	cmp	r3, #46	@ 0x2e
 800f33a:	d10a      	bne.n	800f352 <_vfiprintf_r+0x156>
 800f33c:	7863      	ldrb	r3, [r4, #1]
 800f33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f340:	d132      	bne.n	800f3a8 <_vfiprintf_r+0x1ac>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	3402      	adds	r4, #2
 800f346:	1d1a      	adds	r2, r3, #4
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f34e:	9203      	str	r2, [sp, #12]
 800f350:	9305      	str	r3, [sp, #20]
 800f352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f428 <_vfiprintf_r+0x22c>
 800f356:	2203      	movs	r2, #3
 800f358:	7821      	ldrb	r1, [r4, #0]
 800f35a:	4650      	mov	r0, sl
 800f35c:	f7fe fa65 	bl	800d82a <memchr>
 800f360:	b138      	cbz	r0, 800f372 <_vfiprintf_r+0x176>
 800f362:	eba0 000a 	sub.w	r0, r0, sl
 800f366:	2240      	movs	r2, #64	@ 0x40
 800f368:	9b04      	ldr	r3, [sp, #16]
 800f36a:	3401      	adds	r4, #1
 800f36c:	4082      	lsls	r2, r0
 800f36e:	4313      	orrs	r3, r2
 800f370:	9304      	str	r3, [sp, #16]
 800f372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f376:	2206      	movs	r2, #6
 800f378:	4828      	ldr	r0, [pc, #160]	@ (800f41c <_vfiprintf_r+0x220>)
 800f37a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f37e:	f7fe fa54 	bl	800d82a <memchr>
 800f382:	2800      	cmp	r0, #0
 800f384:	d03f      	beq.n	800f406 <_vfiprintf_r+0x20a>
 800f386:	4b26      	ldr	r3, [pc, #152]	@ (800f420 <_vfiprintf_r+0x224>)
 800f388:	bb1b      	cbnz	r3, 800f3d2 <_vfiprintf_r+0x1d6>
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	3307      	adds	r3, #7
 800f38e:	f023 0307 	bic.w	r3, r3, #7
 800f392:	3308      	adds	r3, #8
 800f394:	9303      	str	r3, [sp, #12]
 800f396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f398:	443b      	add	r3, r7
 800f39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f39c:	e76a      	b.n	800f274 <_vfiprintf_r+0x78>
 800f39e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3a2:	460c      	mov	r4, r1
 800f3a4:	2001      	movs	r0, #1
 800f3a6:	e7a8      	b.n	800f2fa <_vfiprintf_r+0xfe>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	3401      	adds	r4, #1
 800f3ac:	f04f 0c0a 	mov.w	ip, #10
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	9305      	str	r3, [sp, #20]
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ba:	3a30      	subs	r2, #48	@ 0x30
 800f3bc:	2a09      	cmp	r2, #9
 800f3be:	d903      	bls.n	800f3c8 <_vfiprintf_r+0x1cc>
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d0c6      	beq.n	800f352 <_vfiprintf_r+0x156>
 800f3c4:	9105      	str	r1, [sp, #20]
 800f3c6:	e7c4      	b.n	800f352 <_vfiprintf_r+0x156>
 800f3c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e7f0      	b.n	800f3b4 <_vfiprintf_r+0x1b8>
 800f3d2:	ab03      	add	r3, sp, #12
 800f3d4:	462a      	mov	r2, r5
 800f3d6:	a904      	add	r1, sp, #16
 800f3d8:	4630      	mov	r0, r6
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	4b11      	ldr	r3, [pc, #68]	@ (800f424 <_vfiprintf_r+0x228>)
 800f3de:	f7fd fc27 	bl	800cc30 <_printf_float>
 800f3e2:	4607      	mov	r7, r0
 800f3e4:	1c78      	adds	r0, r7, #1
 800f3e6:	d1d6      	bne.n	800f396 <_vfiprintf_r+0x19a>
 800f3e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3ea:	07d9      	lsls	r1, r3, #31
 800f3ec:	d405      	bmi.n	800f3fa <_vfiprintf_r+0x1fe>
 800f3ee:	89ab      	ldrh	r3, [r5, #12]
 800f3f0:	059a      	lsls	r2, r3, #22
 800f3f2:	d402      	bmi.n	800f3fa <_vfiprintf_r+0x1fe>
 800f3f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3f6:	f7fe fa17 	bl	800d828 <__retarget_lock_release_recursive>
 800f3fa:	89ab      	ldrh	r3, [r5, #12]
 800f3fc:	065b      	lsls	r3, r3, #25
 800f3fe:	f53f af1f 	bmi.w	800f240 <_vfiprintf_r+0x44>
 800f402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f404:	e71e      	b.n	800f244 <_vfiprintf_r+0x48>
 800f406:	ab03      	add	r3, sp, #12
 800f408:	462a      	mov	r2, r5
 800f40a:	a904      	add	r1, sp, #16
 800f40c:	4630      	mov	r0, r6
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	4b04      	ldr	r3, [pc, #16]	@ (800f424 <_vfiprintf_r+0x228>)
 800f412:	f7fd fea9 	bl	800d168 <_printf_i>
 800f416:	e7e4      	b.n	800f3e2 <_vfiprintf_r+0x1e6>
 800f418:	0801e78a 	.word	0x0801e78a
 800f41c:	0801e794 	.word	0x0801e794
 800f420:	0800cc31 	.word	0x0800cc31
 800f424:	0800f1d9 	.word	0x0800f1d9
 800f428:	0801e790 	.word	0x0801e790

0800f42c <__swbuf_r>:
 800f42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42e:	460e      	mov	r6, r1
 800f430:	4614      	mov	r4, r2
 800f432:	4605      	mov	r5, r0
 800f434:	b118      	cbz	r0, 800f43e <__swbuf_r+0x12>
 800f436:	6a03      	ldr	r3, [r0, #32]
 800f438:	b90b      	cbnz	r3, 800f43e <__swbuf_r+0x12>
 800f43a:	f7fe f83f 	bl	800d4bc <__sinit>
 800f43e:	69a3      	ldr	r3, [r4, #24]
 800f440:	60a3      	str	r3, [r4, #8]
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	071a      	lsls	r2, r3, #28
 800f446:	d501      	bpl.n	800f44c <__swbuf_r+0x20>
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	b943      	cbnz	r3, 800f45e <__swbuf_r+0x32>
 800f44c:	4621      	mov	r1, r4
 800f44e:	4628      	mov	r0, r5
 800f450:	f000 f82a 	bl	800f4a8 <__swsetup_r>
 800f454:	b118      	cbz	r0, 800f45e <__swbuf_r+0x32>
 800f456:	f04f 37ff 	mov.w	r7, #4294967295
 800f45a:	4638      	mov	r0, r7
 800f45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	b2f6      	uxtb	r6, r6
 800f462:	6922      	ldr	r2, [r4, #16]
 800f464:	4637      	mov	r7, r6
 800f466:	1a98      	subs	r0, r3, r2
 800f468:	6963      	ldr	r3, [r4, #20]
 800f46a:	4283      	cmp	r3, r0
 800f46c:	dc05      	bgt.n	800f47a <__swbuf_r+0x4e>
 800f46e:	4621      	mov	r1, r4
 800f470:	4628      	mov	r0, r5
 800f472:	f7ff fe07 	bl	800f084 <_fflush_r>
 800f476:	2800      	cmp	r0, #0
 800f478:	d1ed      	bne.n	800f456 <__swbuf_r+0x2a>
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	60a3      	str	r3, [r4, #8]
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	6022      	str	r2, [r4, #0]
 800f486:	701e      	strb	r6, [r3, #0]
 800f488:	1c43      	adds	r3, r0, #1
 800f48a:	6962      	ldr	r2, [r4, #20]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d004      	beq.n	800f49a <__swbuf_r+0x6e>
 800f490:	89a3      	ldrh	r3, [r4, #12]
 800f492:	07db      	lsls	r3, r3, #31
 800f494:	d5e1      	bpl.n	800f45a <__swbuf_r+0x2e>
 800f496:	2e0a      	cmp	r6, #10
 800f498:	d1df      	bne.n	800f45a <__swbuf_r+0x2e>
 800f49a:	4621      	mov	r1, r4
 800f49c:	4628      	mov	r0, r5
 800f49e:	f7ff fdf1 	bl	800f084 <_fflush_r>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d0d9      	beq.n	800f45a <__swbuf_r+0x2e>
 800f4a6:	e7d6      	b.n	800f456 <__swbuf_r+0x2a>

0800f4a8 <__swsetup_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4b29      	ldr	r3, [pc, #164]	@ (800f550 <__swsetup_r+0xa8>)
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	b118      	cbz	r0, 800f4bc <__swsetup_r+0x14>
 800f4b4:	6a03      	ldr	r3, [r0, #32]
 800f4b6:	b90b      	cbnz	r3, 800f4bc <__swsetup_r+0x14>
 800f4b8:	f7fe f800 	bl	800d4bc <__sinit>
 800f4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4c0:	0719      	lsls	r1, r3, #28
 800f4c2:	d422      	bmi.n	800f50a <__swsetup_r+0x62>
 800f4c4:	06da      	lsls	r2, r3, #27
 800f4c6:	d407      	bmi.n	800f4d8 <__swsetup_r+0x30>
 800f4c8:	2209      	movs	r2, #9
 800f4ca:	602a      	str	r2, [r5, #0]
 800f4cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	81a3      	strh	r3, [r4, #12]
 800f4d6:	e033      	b.n	800f540 <__swsetup_r+0x98>
 800f4d8:	0758      	lsls	r0, r3, #29
 800f4da:	d512      	bpl.n	800f502 <__swsetup_r+0x5a>
 800f4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4de:	b141      	cbz	r1, 800f4f2 <__swsetup_r+0x4a>
 800f4e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4e4:	4299      	cmp	r1, r3
 800f4e6:	d002      	beq.n	800f4ee <__swsetup_r+0x46>
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f7ff f81b 	bl	800e524 <_free_r>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4f2:	89a3      	ldrh	r3, [r4, #12]
 800f4f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4f8:	81a3      	strh	r3, [r4, #12]
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	6063      	str	r3, [r4, #4]
 800f4fe:	6923      	ldr	r3, [r4, #16]
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	89a3      	ldrh	r3, [r4, #12]
 800f504:	f043 0308 	orr.w	r3, r3, #8
 800f508:	81a3      	strh	r3, [r4, #12]
 800f50a:	6923      	ldr	r3, [r4, #16]
 800f50c:	b94b      	cbnz	r3, 800f522 <__swsetup_r+0x7a>
 800f50e:	89a3      	ldrh	r3, [r4, #12]
 800f510:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f518:	d003      	beq.n	800f522 <__swsetup_r+0x7a>
 800f51a:	4621      	mov	r1, r4
 800f51c:	4628      	mov	r0, r5
 800f51e:	f000 f882 	bl	800f626 <__smakebuf_r>
 800f522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f526:	f013 0201 	ands.w	r2, r3, #1
 800f52a:	d00a      	beq.n	800f542 <__swsetup_r+0x9a>
 800f52c:	2200      	movs	r2, #0
 800f52e:	60a2      	str	r2, [r4, #8]
 800f530:	6962      	ldr	r2, [r4, #20]
 800f532:	4252      	negs	r2, r2
 800f534:	61a2      	str	r2, [r4, #24]
 800f536:	6922      	ldr	r2, [r4, #16]
 800f538:	b942      	cbnz	r2, 800f54c <__swsetup_r+0xa4>
 800f53a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f53e:	d1c5      	bne.n	800f4cc <__swsetup_r+0x24>
 800f540:	bd38      	pop	{r3, r4, r5, pc}
 800f542:	0799      	lsls	r1, r3, #30
 800f544:	bf58      	it	pl
 800f546:	6962      	ldrpl	r2, [r4, #20]
 800f548:	60a2      	str	r2, [r4, #8]
 800f54a:	e7f4      	b.n	800f536 <__swsetup_r+0x8e>
 800f54c:	2000      	movs	r0, #0
 800f54e:	e7f7      	b.n	800f540 <__swsetup_r+0x98>
 800f550:	20000f88 	.word	0x20000f88

0800f554 <_raise_r>:
 800f554:	291f      	cmp	r1, #31
 800f556:	b538      	push	{r3, r4, r5, lr}
 800f558:	4605      	mov	r5, r0
 800f55a:	460c      	mov	r4, r1
 800f55c:	d904      	bls.n	800f568 <_raise_r+0x14>
 800f55e:	2316      	movs	r3, #22
 800f560:	6003      	str	r3, [r0, #0]
 800f562:	f04f 30ff 	mov.w	r0, #4294967295
 800f566:	bd38      	pop	{r3, r4, r5, pc}
 800f568:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f56a:	b112      	cbz	r2, 800f572 <_raise_r+0x1e>
 800f56c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f570:	b94b      	cbnz	r3, 800f586 <_raise_r+0x32>
 800f572:	4628      	mov	r0, r5
 800f574:	f000 f830 	bl	800f5d8 <_getpid_r>
 800f578:	4622      	mov	r2, r4
 800f57a:	4601      	mov	r1, r0
 800f57c:	4628      	mov	r0, r5
 800f57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f582:	f000 b817 	b.w	800f5b4 <_kill_r>
 800f586:	2b01      	cmp	r3, #1
 800f588:	d00a      	beq.n	800f5a0 <_raise_r+0x4c>
 800f58a:	1c59      	adds	r1, r3, #1
 800f58c:	d103      	bne.n	800f596 <_raise_r+0x42>
 800f58e:	2316      	movs	r3, #22
 800f590:	6003      	str	r3, [r0, #0]
 800f592:	2001      	movs	r0, #1
 800f594:	e7e7      	b.n	800f566 <_raise_r+0x12>
 800f596:	2100      	movs	r1, #0
 800f598:	4620      	mov	r0, r4
 800f59a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f59e:	4798      	blx	r3
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	e7e0      	b.n	800f566 <_raise_r+0x12>

0800f5a4 <raise>:
 800f5a4:	4b02      	ldr	r3, [pc, #8]	@ (800f5b0 <raise+0xc>)
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	f7ff bfd3 	b.w	800f554 <_raise_r>
 800f5ae:	bf00      	nop
 800f5b0:	20000f88 	.word	0x20000f88

0800f5b4 <_kill_r>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	4d06      	ldr	r5, [pc, #24]	@ (800f5d4 <_kill_r+0x20>)
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	4608      	mov	r0, r1
 800f5be:	4611      	mov	r1, r2
 800f5c0:	602b      	str	r3, [r5, #0]
 800f5c2:	f000 f8af 	bl	800f724 <_kill>
 800f5c6:	1c43      	adds	r3, r0, #1
 800f5c8:	d102      	bne.n	800f5d0 <_kill_r+0x1c>
 800f5ca:	682b      	ldr	r3, [r5, #0]
 800f5cc:	b103      	cbz	r3, 800f5d0 <_kill_r+0x1c>
 800f5ce:	6023      	str	r3, [r4, #0]
 800f5d0:	bd38      	pop	{r3, r4, r5, pc}
 800f5d2:	bf00      	nop
 800f5d4:	2007b104 	.word	0x2007b104

0800f5d8 <_getpid_r>:
 800f5d8:	f000 b894 	b.w	800f704 <_getpid>

0800f5dc <__swhatbuf_r>:
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	460c      	mov	r4, r1
 800f5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5e4:	b096      	sub	sp, #88	@ 0x58
 800f5e6:	4615      	mov	r5, r2
 800f5e8:	2900      	cmp	r1, #0
 800f5ea:	461e      	mov	r6, r3
 800f5ec:	da0c      	bge.n	800f608 <__swhatbuf_r+0x2c>
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5f6:	bf14      	ite	ne
 800f5f8:	2340      	movne	r3, #64	@ 0x40
 800f5fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5fe:	2000      	movs	r0, #0
 800f600:	6031      	str	r1, [r6, #0]
 800f602:	602b      	str	r3, [r5, #0]
 800f604:	b016      	add	sp, #88	@ 0x58
 800f606:	bd70      	pop	{r4, r5, r6, pc}
 800f608:	466a      	mov	r2, sp
 800f60a:	f000 f849 	bl	800f6a0 <_fstat_r>
 800f60e:	2800      	cmp	r0, #0
 800f610:	dbed      	blt.n	800f5ee <__swhatbuf_r+0x12>
 800f612:	9901      	ldr	r1, [sp, #4]
 800f614:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f618:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f61c:	4259      	negs	r1, r3
 800f61e:	4159      	adcs	r1, r3
 800f620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f624:	e7eb      	b.n	800f5fe <__swhatbuf_r+0x22>

0800f626 <__smakebuf_r>:
 800f626:	898b      	ldrh	r3, [r1, #12]
 800f628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f62a:	079d      	lsls	r5, r3, #30
 800f62c:	4606      	mov	r6, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	d507      	bpl.n	800f642 <__smakebuf_r+0x1c>
 800f632:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f636:	6023      	str	r3, [r4, #0]
 800f638:	6123      	str	r3, [r4, #16]
 800f63a:	2301      	movs	r3, #1
 800f63c:	6163      	str	r3, [r4, #20]
 800f63e:	b003      	add	sp, #12
 800f640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f642:	ab01      	add	r3, sp, #4
 800f644:	466a      	mov	r2, sp
 800f646:	f7ff ffc9 	bl	800f5dc <__swhatbuf_r>
 800f64a:	9f00      	ldr	r7, [sp, #0]
 800f64c:	4605      	mov	r5, r0
 800f64e:	4630      	mov	r0, r6
 800f650:	4639      	mov	r1, r7
 800f652:	f7fd f995 	bl	800c980 <_malloc_r>
 800f656:	b948      	cbnz	r0, 800f66c <__smakebuf_r+0x46>
 800f658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f65c:	059a      	lsls	r2, r3, #22
 800f65e:	d4ee      	bmi.n	800f63e <__smakebuf_r+0x18>
 800f660:	f023 0303 	bic.w	r3, r3, #3
 800f664:	f043 0302 	orr.w	r3, r3, #2
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	e7e2      	b.n	800f632 <__smakebuf_r+0xc>
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	6020      	str	r0, [r4, #0]
 800f670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f674:	81a3      	strh	r3, [r4, #12]
 800f676:	9b01      	ldr	r3, [sp, #4]
 800f678:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f67c:	b15b      	cbz	r3, 800f696 <__smakebuf_r+0x70>
 800f67e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f682:	4630      	mov	r0, r6
 800f684:	f000 f81e 	bl	800f6c4 <_isatty_r>
 800f688:	b128      	cbz	r0, 800f696 <__smakebuf_r+0x70>
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	f023 0303 	bic.w	r3, r3, #3
 800f690:	f043 0301 	orr.w	r3, r3, #1
 800f694:	81a3      	strh	r3, [r4, #12]
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	431d      	orrs	r5, r3
 800f69a:	81a5      	strh	r5, [r4, #12]
 800f69c:	e7cf      	b.n	800f63e <__smakebuf_r+0x18>
	...

0800f6a0 <_fstat_r>:
 800f6a0:	b538      	push	{r3, r4, r5, lr}
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4d06      	ldr	r5, [pc, #24]	@ (800f6c0 <_fstat_r+0x20>)
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	4608      	mov	r0, r1
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	602b      	str	r3, [r5, #0]
 800f6ae:	f000 f821 	bl	800f6f4 <_fstat>
 800f6b2:	1c43      	adds	r3, r0, #1
 800f6b4:	d102      	bne.n	800f6bc <_fstat_r+0x1c>
 800f6b6:	682b      	ldr	r3, [r5, #0]
 800f6b8:	b103      	cbz	r3, 800f6bc <_fstat_r+0x1c>
 800f6ba:	6023      	str	r3, [r4, #0]
 800f6bc:	bd38      	pop	{r3, r4, r5, pc}
 800f6be:	bf00      	nop
 800f6c0:	2007b104 	.word	0x2007b104

0800f6c4 <_isatty_r>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	4d05      	ldr	r5, [pc, #20]	@ (800f6e0 <_isatty_r+0x1c>)
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	4608      	mov	r0, r1
 800f6ce:	602b      	str	r3, [r5, #0]
 800f6d0:	f000 f820 	bl	800f714 <_isatty>
 800f6d4:	1c43      	adds	r3, r0, #1
 800f6d6:	d102      	bne.n	800f6de <_isatty_r+0x1a>
 800f6d8:	682b      	ldr	r3, [r5, #0]
 800f6da:	b103      	cbz	r3, 800f6de <_isatty_r+0x1a>
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	bd38      	pop	{r3, r4, r5, pc}
 800f6e0:	2007b104 	.word	0x2007b104

0800f6e4 <_close>:
 800f6e4:	4b02      	ldr	r3, [pc, #8]	@ (800f6f0 <_close+0xc>)
 800f6e6:	2258      	movs	r2, #88	@ 0x58
 800f6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ec:	601a      	str	r2, [r3, #0]
 800f6ee:	4770      	bx	lr
 800f6f0:	2007b104 	.word	0x2007b104

0800f6f4 <_fstat>:
 800f6f4:	4b02      	ldr	r3, [pc, #8]	@ (800f700 <_fstat+0xc>)
 800f6f6:	2258      	movs	r2, #88	@ 0x58
 800f6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fc:	601a      	str	r2, [r3, #0]
 800f6fe:	4770      	bx	lr
 800f700:	2007b104 	.word	0x2007b104

0800f704 <_getpid>:
 800f704:	4b02      	ldr	r3, [pc, #8]	@ (800f710 <_getpid+0xc>)
 800f706:	2258      	movs	r2, #88	@ 0x58
 800f708:	f04f 30ff 	mov.w	r0, #4294967295
 800f70c:	601a      	str	r2, [r3, #0]
 800f70e:	4770      	bx	lr
 800f710:	2007b104 	.word	0x2007b104

0800f714 <_isatty>:
 800f714:	4b02      	ldr	r3, [pc, #8]	@ (800f720 <_isatty+0xc>)
 800f716:	2258      	movs	r2, #88	@ 0x58
 800f718:	2000      	movs	r0, #0
 800f71a:	601a      	str	r2, [r3, #0]
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	2007b104 	.word	0x2007b104

0800f724 <_kill>:
 800f724:	4b02      	ldr	r3, [pc, #8]	@ (800f730 <_kill+0xc>)
 800f726:	2258      	movs	r2, #88	@ 0x58
 800f728:	f04f 30ff 	mov.w	r0, #4294967295
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	4770      	bx	lr
 800f730:	2007b104 	.word	0x2007b104

0800f734 <_lseek>:
 800f734:	4b02      	ldr	r3, [pc, #8]	@ (800f740 <_lseek+0xc>)
 800f736:	2258      	movs	r2, #88	@ 0x58
 800f738:	f04f 30ff 	mov.w	r0, #4294967295
 800f73c:	601a      	str	r2, [r3, #0]
 800f73e:	4770      	bx	lr
 800f740:	2007b104 	.word	0x2007b104

0800f744 <_read>:
 800f744:	4b02      	ldr	r3, [pc, #8]	@ (800f750 <_read+0xc>)
 800f746:	2258      	movs	r2, #88	@ 0x58
 800f748:	f04f 30ff 	mov.w	r0, #4294967295
 800f74c:	601a      	str	r2, [r3, #0]
 800f74e:	4770      	bx	lr
 800f750:	2007b104 	.word	0x2007b104

0800f754 <_sbrk>:
 800f754:	4a04      	ldr	r2, [pc, #16]	@ (800f768 <_sbrk+0x14>)
 800f756:	4603      	mov	r3, r0
 800f758:	6811      	ldr	r1, [r2, #0]
 800f75a:	b909      	cbnz	r1, 800f760 <_sbrk+0xc>
 800f75c:	4903      	ldr	r1, [pc, #12]	@ (800f76c <_sbrk+0x18>)
 800f75e:	6011      	str	r1, [r2, #0]
 800f760:	6810      	ldr	r0, [r2, #0]
 800f762:	4403      	add	r3, r0
 800f764:	6013      	str	r3, [r2, #0]
 800f766:	4770      	bx	lr
 800f768:	2007b10c 	.word	0x2007b10c
 800f76c:	2007b110 	.word	0x2007b110

0800f770 <_write>:
 800f770:	4b02      	ldr	r3, [pc, #8]	@ (800f77c <_write+0xc>)
 800f772:	2258      	movs	r2, #88	@ 0x58
 800f774:	f04f 30ff 	mov.w	r0, #4294967295
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	4770      	bx	lr
 800f77c:	2007b104 	.word	0x2007b104

0800f780 <_exit>:
 800f780:	e7fe      	b.n	800f780 <_exit>
	...

0800f784 <_init>:
 800f784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f786:	bf00      	nop
 800f788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f78a:	bc08      	pop	{r3}
 800f78c:	469e      	mov	lr, r3
 800f78e:	4770      	bx	lr

0800f790 <_fini>:
 800f790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f792:	bf00      	nop
 800f794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f796:	bc08      	pop	{r3}
 800f798:	469e      	mov	lr, r3
 800f79a:	4770      	bx	lr
